00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91    Bit
00156                                           ! 91 8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos();
00321                                           !BCC_EOS
00322                                           ! 180 st
00323                                           ! 180 atic void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         00FE              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        74            .ascii "tryout"
00413 003E                        20            .ascii " "
00414                       0000003F            vgabios_date:
00415 003F                        30            .ascii "08 Dec 2011"
00416 004A                        0A            .byte 0x0a,0x0d
00417 004C                        00            .byte 0x00
00418                       0000004D            vgabios_copyright:
00419 004D                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 0076                        0A            .byte 0x0a,0x0d
00421 0078                        00            .byte 0x00
00422                       00000079            vgabios_license:
00423 0079                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00A9                        0A            .byte 0x0a,0x0d
00425 00AB                        0A            .byte 0x0a,0x0d
00426 00AD                        00            .byte 0x00
00427                       000000AE            vgabios_website:
00428 00AE                        50            .ascii "Please visit :"
00429 00BC                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00BE                        20            .ascii " . http://bochs.sourceforge.net"
00433 00DD                        0A            .byte 0x0a,0x0d
00434 00DF                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 00FF                        0A            .byte 0x0a,0x0d
00436 0101                        0A            .byte 0x0a,0x0d
00437 0103                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000104            vgabios_init_func:
00444                                           ;; init vga card
00445 0104           E8         3457              call init_vga_card
00446                                           ;; init basic bios vars
00447 0107           E8         347F              call init_bios_area
00448                                           ;; init vbe functions
00449 010A           E8         96FC              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010D           1E                           push ds
 +a   010E           31C0                         xor ax, ax
 +a   0110           8ED8                         mov ds, ax
 +a   0112           B8                   012E    mov ax,  #vgabios_int10_handler
 +a   0115           A3         0040              mov 0x10*4, ax
 +a   0118           B8                   C000    mov ax,  #0xC000
 +a   011B           A3         0042              mov 0x10*4+2, ax
 +a   011E           1F                           pop ds
00452                                           ;; display splash screen
00453 011F           E8         34BB              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0122           B8                   0003    mov ax,#0x0003
00456 0125           CD                     10    int #0x10
00457                                           ;; show info
00458 0127           E8         34B4              call _display_info
00459                                           ;; show vbe info
00460 012A           E8         970A              call vbe_display_info
00461 012D           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       0000012E            vgabios_int10_handler:
00467 012E           9C                           pushf
00468                                           ! 292  298
00469 012F           80FC                   0F    cmp ah, #0x0f
00470 0132           75           06              jne int10_test_1A
00471 0134           E8         60E0              call biosfn_get_video_mode
00472 0137           E9         00BC              jmp int10_end
00473                       0000013A            int10_test_1A:
00474 013A           80FC                   1A    cmp ah, #0x1a
00475 013D           75           06              jne int10_test_0B
00476 013F           E8         6C02              call biosfn_group_1A
00477 0142           E9         00B1              jmp int10_end
00478                       00000145            int10_test_0B:
00479 0145           80FC                   0B    cmp ah, #0x0b
00480 0148           75           06              jne int10_test_1103
00481 014A           E8         57F0              call biosfn_group_0B
00482 014D           E9         00A6              jmp int10_end
00483                       00000150            int10_test_1103:
00484 0150           3D                   1103    cmp ax, #0x1103
00485 0153           75           06              jne int10_test_12
00486 0155           E8         67BA              call biosfn_set_text_block_specifier
00487 0158           E9         009B              jmp int10_end
00488                       0000015B            int10_test_12:
00489 015B           80FC                   12    cmp ah, #0x12
00490 015E           75           3E              jne int10_test_101B
00491 0160           80FB                   10    cmp bl, #0x10
00492 0163           75           06              jne int10_test_BL30
00493 0165           E8         6A04              call biosfn_get_ega_info
00494 0168           E9         008B              jmp int10_end
00495                       0000016B            int10_test_BL30:
00496 016B           80FB                   30    cmp bl, #0x30
00497 016E           75           06              jne int10_test_BL31
00498 0170           E8         6A1D              call biosfn_select_vert_res
00499 0173           E9         0080              jmp int10_end
00500                       00000176            int10_test_BL31:
00501 0176           80FB                   31    cmp bl, #0x31
00502 0179           75           05              jne int10_test_BL32
00503 017B           E8         6A65              call biosfn_enable_default_palette_loading
00504 017E           EB           76              jmp int10_end
00505                       00000180            int10_test_BL32:
00506 0180           80FB                   32    cmp bl, #0x32
00507 0183           75           05              jne int10_test_BL33
00508 0185           E8         6A7D              call biosfn_enable_video_addressing
00509 0188           EB           6C              jmp int10_end
00510                       0000018A            int10_test_BL33:
00511 018A           80FB                   33    cmp bl, #0x33
00512 018D           75           05              jne int10_test_BL34
00513 018F           E8         6A91              call biosfn_enable_grayscale_summing
00514 0192           EB           62              jmp int10_end
00515                       00000194            int10_test_BL34:
00516 0194           80FB                   34    cmp bl, #0x34
00517 0197           75           4F              jne int10_normal
00518 0199           E8         6AAB              call biosfn_enable_cursor_emulation
00519 019C           EB           58              jmp int10_end
00520                       0000019E            int10_test_101B:
00521 019E           3D                   101B    cmp ax, #0x101b
00522 01A1           74           45              je int10_normal
00523 01A3           80FC                   10    cmp ah, #0x10
00524                                           
00525                                           
00526                                           
00527 01A6           75           05              jne int10_test_4F
00528                                           
00529 01A8           E8         6093              call biosfn_group_10
00530 01AB           EB           49              jmp int10_end
00531                                           
00532                       000001AD            int10_test_4F:
00533 01AD           80FC                   4F    cmp ah, #0x4f
00534 01B0           75           36              jne int10_normal
00535 01B2           3C                     03    cmp al, #0x03
00536 01B4           75           05              jne int10_test_vbe_05
00537 01B6           E8         9B70              call vbe_biosfn_return_current_mode
00538 01B9           EB           3B              jmp int10_end
00539                       000001BB            int10_test_vbe_05:
00540 01BB           3C                     05    cmp al, #0x05
00541 01BD           75           05              jne int10_test_vbe_06
00542 01BF           E8         9E3B              call vbe_biosfn_display_window_control
00543 01C2           EB           32              jmp int10_end
00544                       000001C4            int10_test_vbe_06:
00545 01C4           3C                     06    cmp al, #0x06
00546 01C6           75           05              jne int10_test_vbe_07
00547 01C8           E8         9E5F              call vbe_biosfn_set_get_logical_scan_line_length
00548 01CB           EB           29              jmp int10_end
00549                       000001CD            int10_test_vbe_07:
00550 01CD           3C                     07    cmp al, #0x07
00551 01CF           75           05              jne int10_test_vbe_08
00552 01D1           E8         9EA3              call vbe_biosfn_set_get_display_start
00553 01D4           EB           20              jmp int10_end
00554                       000001D6            int10_test_vbe_08:
00555 01D6           3C                     08    cmp al, #0x08
00556 01D8           75           05              jne int10_test_vbe_0A
00557 01DA           E8         9EC8              call vbe_biosfn_set_get_dac_palette_format
00558 01DD           EB           17              jmp int10_end
00559                       000001DF            int10_test_vbe_0A:
00560 01DF           3C                     0A    cmp al, #0x0A
00561 01E1           75           05              jne int10_normal
00562 01E3           E8         9EF7              call vbe_biosfn_return_protected_mode_interface
00563 01E6           EB           0E              jmp int10_end
00564                                           
00565                                           
00566                       000001E8            int10_normal:
00567 01E8           06                           push es
00568 01E9           1E                           push ds
00569 01EA           60                           pusha
00570                                           
00571                                           ;; We have to set ds to access the right data segment
00572 01EB           BB                   C000    mov bx, #0xc000
00573 01EE           8EDB                         mov ds, bx
00574 01F0           E8         3430              call _int10_func
00575                                           
00576 01F3           61                           popa
00577 01F4           1F                           pop ds
00578 01F5           07                           pop es
00579                       000001F6            int10_end:
00580 01F6           9D                           popf
00581 01F7           CF                           iret
00582                                           ! 411 endasm
00583                                           !BCC_ENDASM
00584                                           ! 412 typedef struct
00585                                           ! 413 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 414  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 415  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 416  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 417  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 418  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 419  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 420 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 421 static VGAMODES vga_modes[15 +1]=
00602                                           ! 422 {
00603                                           
00604                       000001F8            _vga_modes:
00605                                           ! 423  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 01F8                        00            .byte	0
00607 01F9                        00            .byte	0
00608 01FA                        00            .byte	0
00609 01FB                        04            .byte	4
00610 01FC                      B800            .word	$B800
00611 01FE                        FF            .byte	$FF
00612 01FF                        02            .byte	2
00613                                           ! 424  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 0200                        01            .byte	1
00615 0201                        00            .byte	0
00616 0202                        00            .byte	0
00617 0203                        04            .byte	4
00618 0204                      B800            .word	$B800
00619 0206                        FF            .byte	$FF
00620 0207                        02            .byte	2
00621                                           ! 425  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 0208                        02            .byte	2
00623 0209                        00            .byte	0
00624 020A                        00            .byte	0
00625 020B                        04            .byte	4
00626 020C                      B800            .word	$B800
00627 020E                        FF            .byte	$FF
00628 020F                        02            .byte	2
00629                                           ! 426  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 0210                        03            .byte	3
00631 0211                        00            .byte	0
00632 0212                        00            .byte	0
00633 0213                        04            .byte	4
00634 0214                      B800            .word	$B800
00635 0216                        FF            .byte	$FF
00636 0217                        02            .byte	2
00637                                           ! 427  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 0218                        04            .byte	4
00639 0219                        01            .byte	1
00640 021A                        02            .byte	2
00641 021B                        02            .byte	2
00642 021C                      B800            .word	$B800
00643 021E                        FF            .byte	$FF
00644 021F                        01            .byte	1
00645                                           ! 428  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 0220                        05            .byte	5
00647 0221                        01            .byte	1
00648 0222                        02            .byte	2
00649 0223                        02            .byte	2
00650 0224                      B800            .word	$B800
00651 0226                        FF            .byte	$FF
00652 0227                        01            .byte	1
00653                                           ! 429  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 0228                        06            .byte	6
00655 0229                        01            .byte	1
00656 022A                        02            .byte	2
00657 022B                        01            .byte	1
00658 022C                      B800            .word	$B800
00659 022E                        FF            .byte	$FF
00660 022F                        01            .byte	1
00661                                           ! 430  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 0230                        07            .byte	7
00663 0231                        00            .byte	0
00664 0232                        01            .byte	1
00665 0233                        04            .byte	4
00666 0234                      B000            .word	$B000
00667 0236                        FF            .byte	$FF
00668 0237                        00            .byte	0
00669                                           ! 431  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 0238                        0D            .byte	$D
00671 0239                        01            .byte	1
00672 023A                        04            .byte	4
00673 023B                        04            .byte	4
00674 023C                      A000            .word	$A000
00675 023E                        FF            .byte	$FF
00676 023F                        01            .byte	1
00677                                           ! 432  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 0240                        0E            .byte	$E
00679 0241                        01            .byte	1
00680 0242                        04            .byte	4
00681 0243                        04            .byte	4
00682 0244                      A000            .word	$A000
00683 0246                        FF            .byte	$FF
00684 0247                        01            .byte	1
00685                                           ! 433  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 0248                        0F            .byte	$F
00687 0249                        01            .byte	1
00688 024A                        03            .byte	3
00689 024B                        01            .byte	1
00690 024C                      A000            .word	$A000
00691 024E                        FF            .byte	$FF
00692 024F                        00            .byte	0
00693                                           ! 434  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 0250                        10            .byte	$10
00695 0251                        01            .byte	1
00696 0252                        04            .byte	4
00697 0253                        04            .byte	4
00698 0254                      A000            .word	$A000
00699 0256                        FF            .byte	$FF
00700 0257                        02            .byte	2
00701                                           ! 435  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 0258                        11            .byte	$11
00703 0259                        01            .byte	1
00704 025A                        03            .byte	3
00705 025B                        01            .byte	1
00706 025C                      A000            .word	$A000
00707 025E                        FF            .byte	$FF
00708 025F                        02            .byte	2
00709                                           ! 436  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 0260                        12            .byte	$12
00711 0261                        01            .byte	1
00712 0262                        04            .byte	4
00713 0263                        04            .byte	4
00714 0264                      A000            .word	$A000
00715 0266                        FF            .byte	$FF
00716 0267                        02            .byte	2
00717                                           ! 437  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 0268                        13            .byte	$13
00719 0269                        01            .byte	1
00720 026A                        05            .byte	5
00721 026B                        08            .byte	8
00722 026C                      A000            .word	$A000
00723 026E                        FF            .byte	$FF
00724 026F                        03            .byte	3
00725                                           ! 438  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 0270                        6A            .byte	$6A
00727 0271                        01            .byte	1
00728 0272                        04            .byte	4
00729 0273                        04            .byte	4
00730 0274                      A000            .word	$A000
00731 0276                        FF            .byte	$FF
00732 0277                        02            .byte	2
00733                                           ! 439 };
00734                                           !BCC_EOS
00735                                           ! 440 static Bit8u line_to_vpti[15 +1]={
00736                       00000278            _line_to_vpti:
00737                                           ! 441     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 0278                        17            .byte	$17
00739 0279                        17            .byte	$17
00740 027A                        18            .byte	$18
00741 027B                        18            .byte	$18
00742 027C                        04            .byte	4
00743 027D                        05            .byte	5
00744 027E                        06            .byte	6
00745 027F                        07            .byte	7
00746                                           ! 442     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 0280                        0D            .byte	$D
00748 0281                        0E            .byte	$E
00749 0282                        11            .byte	$11
00750 0283                        12            .byte	$12
00751 0284                        1A            .byte	$1A
00752 0285                        1B            .byte	$1B
00753 0286                        1C            .byte	$1C
00754 0287                        1D            .byte	$1D
00755                                           ! 443 };
00756                                           !BCC_EOS
00757                                           ! 444 static Bit8u dac_regs[3 +1]=
00758                                           ! 445 {0x3f,0x3f,0x3f,0xff};
00759                       00000288            _dac_regs:
00760 0288                        3F            .byte	$3F
00761 0289                        3F            .byte	$3F
00762 028A                        3F            .byte	$3F
00763 028B                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 446 typedef struct {
00766                                           ! 447     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 448     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 449     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 450     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 451     Bit8u slength_h;
00775                                           !BCC_EOS
00776                                           ! 452     Bit8u sequ_regs[4];
00777                                           !BCC_EOS
00778                                           ! 453     Bit8u miscreg;
00779                                           !BCC_EOS
00780                                           ! 454     Bit8u crtc_regs[25];
00781                                           !BCC_EOS
00782                                           ! 455     Bit8
00783                                           ! 455 u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 456     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 457 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 458 static VideoParamTableEntry video_param_table[30] = {
00790                       0000028C            _video_param_table:
00791                                           ! 459 {
00792                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 028C                        00            .byte	0
00794 028D                        00            .byte	0
00795 028E                        00            .byte	0
00796 028F                        00            .byte	0
00797 0290                        00            .byte	0
00798 0291                        00            .byte	0
00799 0292                        00            .byte	0
00800 0293                        00            .byte	0
00801                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 0294                        00            .byte	0
00803 0295                        00            .byte	0
00804 0296                        00            .byte	0
00805 0297                        00            .byte	0
00806 0298                        00            .byte	0
00807 0299                        00            .byte	0
00808 029A                        00            .byte	0
00809 029B                        00            .byte	0
00810                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 029C                        00            .byte	0
00812 029D                        00            .byte	0
00813 029E                        00            .byte	0
00814 029F                        00            .byte	0
00815 02A0                        00            .byte	0
00816 02A1                        00            .byte	0
00817 02A2                        00            .byte	0
00818 02A3                        00            .byte	0
00819                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02A4                        00            .byte	0
00821 02A5                        00            .byte	0
00822 02A6                        00            .byte	0
00823 02A7                        00            .byte	0
00824 02A8                        00            .byte	0
00825 02A9                        00            .byte	0
00826 02AA                        00            .byte	0
00827 02AB                        00            .byte	0
00828                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02AC                        00            .byte	0
00830 02AD                        00            .byte	0
00831 02AE                        00            .byte	0
00832 02AF                        00            .byte	0
00833 02B0                        00            .byte	0
00834 02B1                        00            .byte	0
00835 02B2                        00            .byte	0
00836 02B3                        00            .byte	0
00837                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02B4                        00            .byte	0
00839 02B5                        00            .byte	0
00840 02B6                        00            .byte	0
00841 02B7                        00            .byte	0
00842 02B8                        00            .byte	0
00843 02B9                        00            .byte	0
00844 02BA                        00            .byte	0
00845 02BB                        00            .byte	0
00846                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02BC                        00            .byte	0
00848 02BD                        00            .byte	0
00849 02BE                        00            .byte	0
00850 02BF                        00            .byte	0
00851 02C0                        00            .byte	0
00852 02C1                        00            .byte	0
00853 02C2                        00            .byte	0
00854 02C3                        00            .byte	0
00855                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02C4                        00            .byte	0
00857 02C5                        00            .byte	0
00858 02C6                        00            .byte	0
00859 02C7                        00            .byte	0
00860 02C8                        00            .byte	0
00861 02C9                        00            .byte	0
00862 02CA                        00            .byte	0
00863 02CB                        00            .byte	0
00864                                           ! 468 },
00865                                           ! 469 {
00866                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02CC                        00            .byte	0
00868 02CD                        00            .byte	0
00869 02CE                        00            .byte	0
00870 02CF                        00            .byte	0
00871 02D0                        00            .byte	0
00872 02D1                        00            .byte	0
00873 02D2                        00            .byte	0
00874 02D3                        00            .byte	0
00875                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02D4                        00            .byte	0
00877 02D5                        00            .byte	0
00878 02D6                        00            .byte	0
00879 02D7                        00            .byte	0
00880 02D8                        00            .byte	0
00881 02D9                        00            .byte	0
00882 02DA                        00            .byte	0
00883 02DB                        00            .byte	0
00884                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02DC                        00            .byte	0
00886 02DD                        00            .byte	0
00887 02DE                        00            .byte	0
00888 02DF                        00            .byte	0
00889 02E0                        00            .byte	0
00890 02E1                        00            .byte	0
00891 02E2                        00            .byte	0
00892 02E3                        00            .byte	0
00893                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02E4                        00            .byte	0
00895 02E5                        00            .byte	0
00896 02E6                        00            .byte	0
00897 02E7                        00            .byte	0
00898 02E8                        00            .byte	0
00899 02E9                        00            .byte	0
00900 02EA                        00            .byte	0
00901 02EB                        00            .byte	0
00902                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02EC                        00            .byte	0
00904 02ED                        00            .byte	0
00905 02EE                        00            .byte	0
00906 02EF                        00            .byte	0
00907 02F0                        00            .byte	0
00908 02F1                        00            .byte	0
00909 02F2                        00            .byte	0
00910 02F3                        00            .byte	0
00911                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 02F4                        00            .byte	0
00913 02F5                        00            .byte	0
00914 02F6                        00            .byte	0
00915 02F7                        00            .byte	0
00916 02F8                        00            .byte	0
00917 02F9                        00            .byte	0
00918 02FA                        00            .byte	0
00919 02FB                        00            .byte	0
00920                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 02FC                        00            .byte	0
00922 02FD                        00            .byte	0
00923 02FE                        00            .byte	0
00924 02FF                        00            .byte	0
00925 0300                        00            .byte	0
00926 0301                        00            .byte	0
00927 0302                        00            .byte	0
00928 0303                        00            .byte	0
00929                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0304                        00            .byte	0
00931 0305                        00            .byte	0
00932 0306                        00            .byte	0
00933 0307                        00            .byte	0
00934 0308                        00            .byte	0
00935 0309                        00            .byte	0
00936 030A                        00            .byte	0
00937 030B                        00            .byte	0
00938                                           ! 478 },
00939                                           ! 479 {
00940                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 030C                        00            .byte	0
00942 030D                        00            .byte	0
00943 030E                        00            .byte	0
00944 030F                        00            .byte	0
00945 0310                        00            .byte	0
00946 0311                        00            .byte	0
00947 0312                        00            .byte	0
00948 0313                        00            .byte	0
00949                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0314                        00            .byte	0
00951 0315                        00            .byte	0
00952 0316                        00            .byte	0
00953 0317                        00            .byte	0
00954 0318                        00            .byte	0
00955 0319                        00            .byte	0
00956 031A                        00            .byte	0
00957 031B                        00            .byte	0
00958                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 031C                        00            .byte	0
00960 031D                        00            .byte	0
00961 031E                        00            .byte	0
00962 031F                        00            .byte	0
00963 0320                        00            .byte	0
00964 0321                        00            .byte	0
00965 0322                        00            .byte	0
00966 0323                        00            .byte	0
00967                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0324                        00            .byte	0
00969 0325                        00            .byte	0
00970 0326                        00            .byte	0
00971 0327                        00            .byte	0
00972 0328                        00            .byte	0
00973 0329                        00            .byte	0
00974 032A                        00            .byte	0
00975 032B                        00            .byte	0
00976                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 032C                        00            .byte	0
00978 032D                        00            .byte	0
00979 032E                        00            .byte	0
00980 032F                        00            .byte	0
00981 0330                        00            .byte	0
00982 0331                        00            .byte	0
00983 0332                        00            .byte	0
00984 0333                        00            .byte	0
00985                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0334                        00            .byte	0
00987 0335                        00            .byte	0
00988 0336                        00            .byte	0
00989 0337                        00            .byte	0
00990 0338                        00            .byte	0
00991 0339                        00            .byte	0
00992 033A                        00            .byte	0
00993 033B                        00            .byte	0
00994                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 033C                        00            .byte	0
00996 033D                        00            .byte	0
00997 033E                        00            .byte	0
00998 033F                        00            .byte	0
00999 0340                        00            .byte	0
01000 0341                        00            .byte	0
01001 0342                        00            .byte	0
01002 0343                        00            .byte	0
01003                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0344                        00            .byte	0
01005 0345                        00            .byte	0
01006 0346                        00            .byte	0
01007 0347                        00            .byte	0
01008 0348                        00            .byte	0
01009 0349                        00            .byte	0
01010 034A                        00            .byte	0
01011 034B                        00            .byte	0
01012                                           ! 488 },
01013                                           ! 489 {
01014                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 034C                        00            .byte	0
01016 034D                        00            .byte	0
01017 034E                        00            .byte	0
01018 034F                        00            .byte	0
01019 0350                        00            .byte	0
01020 0351                        00            .byte	0
01021 0352                        00            .byte	0
01022 0353                        00            .byte	0
01023                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0354                        00            .byte	0
01025 0355                        00            .byte	0
01026 0356                        00            .byte	0
01027 0357                        00            .byte	0
01028 0358                        00            .byte	0
01029 0359                        00            .byte	0
01030 035A                        00            .byte	0
01031 035B                        00            .byte	0
01032                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 035C                        00            .byte	0
01034 035D                        00            .byte	0
01035 035E                        00            .byte	0
01036 035F                        00            .byte	0
01037 0360                        00            .byte	0
01038 0361                        00            .byte	0
01039 0362                        00            .byte	0
01040 0363                        00            .byte	0
01041                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0364                        00            .byte	0
01043 0365                        00            .byte	0
01044 0366                        00            .byte	0
01045 0367                        00            .byte	0
01046 0368                        00            .byte	0
01047 0369                        00            .byte	0
01048 036A                        00            .byte	0
01049 036B                        00            .byte	0
01050                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 036C                        00            .byte	0
01052 036D                        00            .byte	0
01053 036E                        00            .byte	0
01054 036F                        00            .byte	0
01055 0370                        00            .byte	0
01056 0371                        00            .byte	0
01057 0372                        00            .byte	0
01058 0373                        00            .byte	0
01059                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0374                        00            .byte	0
01061 0375                        00            .byte	0
01062 0376                        00            .byte	0
01063 0377                        00            .byte	0
01064 0378                        00            .byte	0
01065 0379                        00            .byte	0
01066 037A                        00            .byte	0
01067 037B                        00            .byte	0
01068                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 037C                        00            .byte	0
01070 037D                        00            .byte	0
01071 037E                        00            .byte	0
01072 037F                        00            .byte	0
01073 0380                        00            .byte	0
01074 0381                        00            .byte	0
01075 0382                        00            .byte	0
01076 0383                        00            .byte	0
01077                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0384                        00            .byte	0
01079 0385                        00            .byte	0
01080 0386                        00            .byte	0
01081 0387                        00            .byte	0
01082 0388                        00            .byte	0
01083 0389                        00            .byte	0
01084 038A                        00            .byte	0
01085 038B                        00            .byte	0
01086                                           ! 498 },
01087                                           ! 499 {
01088                                           ! 500  40, 24, 8, 0x00, 0x08,
01089 038C                        28            .byte	$28
01090 038D                        18            .byte	$18
01091 038E                        08            .byte	8
01092 038F                        00            .byte	0
01093 0390                        08            .byte	8
01094                                           ! 501  0x09, 0x03, 0x00, 0x02,
01095 0391                        09            .byte	9
01096 0392                        03            .byte	3
01097 0393                        00            .byte	0
01098 0394                        02            .byte	2
01099                                           ! 502  0x63,
01100 0395                        63            .byte	$63
01101                                           ! 503  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 0396                        2D            .byte	$2D
01103 0397                        27            .byte	$27
01104 0398                        28            .byte	$28
01105 0399                        90            .byte	$90
01106 039A                        2B            .byte	$2B
01107 039B                        80            .byte	$80
01108 039C                        BF            .byte	$BF
01109 039D                        1F            .byte	$1F
01110                                           ! 504  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 039E                        00            .byte	0
01112 039F                        C1            .byte	$C1
01113 03A0                        00            .byte	0
01114 03A1                        00            .byte	0
01115 03A2                        00            .byte	0
01116 03A3                        00            .byte	0
01117 03A4                        00            .byte	0
01118 03A5                        00            .byte	0
01119                                           ! 505  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03A6                        9C            .byte	$9C
01121 03A7                        8E            .byte	$8E
01122 03A8                        8F            .byte	$8F
01123 03A9                        14            .byte	$14
01124 03AA                        00            .byte	0
01125 03AB                        96            .byte	$96
01126 03AC                        B9            .byte	$B9
01127 03AD                        A2            .byte	$A2
01128                                           ! 506  0xff,
01129 03AE                        FF            .byte	$FF
01130                                           ! 507  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01131 03AF                        00            .byte	0
01132 03B0                        13            .byte	$13
01133 03B1                        15            .byte	$15
01134 03B2                        17            .byte	$17
01135 03B3                        02            .byte	2
01136 03B4                        04            .byte	4
01137 03B5                        06            .byte	6
01138 03B6                        07            .byte	7
01139                                           ! 508  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01140 03B7                        10            .byte	$10
01141 03B8                        11            .byte	$11
01142 03B9                        12            .byte	$12
01143 03BA                        13            .byte	$13
01144 03BB                        14            .byte	$14
01145 03BC                        15            .byte	$15
01146 03BD                        16            .byte	$16
01147 03BE                        17            .byte	$17
01148                                           ! 509  0x01, 0x00, 0x03, 0x00,
01149 03BF                        01            .byte	1
01150 03C0                        00            .byte	0
01151 03C1                        03            .byte	3
01152 03C2                        00            .byte	0
01153                                           ! 510  0x00,
01154                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03C3                        00            .byte	0
01156 03C4                        00            .byte	0
01157 03C5                        00            .byte	0
01158 03C6                        00            .byte	0
01159 03C7                        00            .byte	0
01160 03C8                        30            .byte	$30
01161 03C9                        0F            .byte	$F
01162 03CA                        0F            .byte	$F
01163 03CB                        FF            .byte	$FF
01164                                           ! 511 },
01165                                           ! 512 {
01166                                           ! 513  40, 24, 8, 0x00, 0x08,
01167 03CC                        28            .byte	$28
01168 03CD                        18            .byte	$18
01169 03CE                        08            .byte	8
01170 03CF                        00            .byte	0
01171 03D0                        08            .byte	8
01172                                           ! 514  0x09, 0x03, 0x00, 0x02,
01173 03D1                        09            .byte	9
01174 03D2                        03            .byte	3
01175 03D3                        00            .byte	0
01176 03D4                        02            .byte	2
01177                                           ! 515  0x63,
01178 03D5                        63            .byte	$63
01179                                           ! 516  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03D6                        2D            .byte	$2D
01181 03D7                        27            .byte	$27
01182 03D8                        28            .byte	$28
01183 03D9                        90            .byte	$90
01184 03DA                        2B            .byte	$2B
01185 03DB                        80            .byte	$80
01186 03DC                        BF            .byte	$BF
01187 03DD                        1F            .byte	$1F
01188                                           ! 517  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03DE                        00            .byte	0
01190 03DF                        C1            .byte	$C1
01191 03E0                        00            .byte	0
01192 03E1                        00            .byte	0
01193 03E2                        00            .byte	0
01194 03E3                        00            .byte	0
01195 03E4                        00            .byte	0
01196 03E5                        00            .byte	0
01197                                           ! 518  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03E6                        9C            .byte	$9C
01199 03E7                        8E            .byte	$8E
01200 03E8                        8F            .byte	$8F
01201 03E9                        14            .byte	$14
01202 03EA                        00            .byte	0
01203 03EB                        96            .byte	$96
01204 03EC                        B9            .byte	$B9
01205 03ED                        A2            .byte	$A2
01206                                           ! 519  0xff,
01207 03EE                        FF            .byte	$FF
01208                                           ! 520  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03EF                        00            .byte	0
01210 03F0                        13            .byte	$13
01211 03F1                        15            .byte	$15
01212 03F2                        17            .byte	$17
01213 03F3                        02            .byte	2
01214 03F4                        04            .byte	4
01215 03F5                        06            .byte	6
01216 03F6                        07            .byte	7
01217                                           ! 521  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 03F7                        10            .byte	$10
01219 03F8                        11            .byte	$11
01220 03F9                        12            .byte	$12
01221 03FA                        13            .byte	$13
01222 03FB                        14            .byte	$14
01223 03FC                        15            .byte	$15
01224 03FD                        16            .byte	$16
01225 03FE                        17            .byte	$17
01226                                           ! 522  0x01, 0x00, 0x03, 0x00,
01227 03FF                        01            .byte	1
01228 0400                        00            .byte	0
01229 0401                        03            .byte	3
01230 0402                        00            .byte	0
01231                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0403                        00            .byte	0
01233 0404                        00            .byte	0
01234 0405                        00            .byte	0
01235 0406                        00            .byte	0
01236 0407                        00            .byte	0
01237 0408                        30            .byte	$30
01238 0409                        0F            .byte	$F
01239 040A                        0F            .byte	$F
01240 040B                        FF            .byte	$FF
01241                                           ! 524 },
01242                                           ! 525 {
01243                                           ! 526  80, 24, 8, 0x00, 0x10,
01244 040C                        50            .byte	$50
01245 040D                        18            .byte	$18
01246 040E                        08            .byte	8
01247 040F                        00            .byte	0
01248 0410                        10            .byte	$10
01249                                           ! 527  0x01, 0x01, 0x00, 0x06,
01250 0411                        01            .byte	1
01251 0412                        01            .byte	1
01252 0413                        00            .byte	0
01253 0414                        06            .byte	6
01254                                           ! 528  0x63,
01255 0415                        63            .byte	$63
01256                                           ! 529  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 0416                        5F            .byte	$5F
01258 0417                        4F            .byte	$4F
01259 0418                        50            .byte	$50
01260 0419                        82            .byte	$82
01261 041A                        54            .byte	$54
01262 041B                        80            .byte	$80
01263 041C                        BF            .byte	$BF
01264 041D                        1F            .byte	$1F
01265                                           ! 530  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 041E                        00            .byte	0
01267 041F                        C1            .byte	$C1
01268 0420                        00            .byte	0
01269 0421                        00            .byte	0
01270 0422                        00            .byte	0
01271 0423                        00            .byte	0
01272 0424                        00            .byte	0
01273 0425                        00            .byte	0
01274                                           ! 531  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 0426                        9C            .byte	$9C
01276 0427                        8E            .byte	$8E
01277 0428                        8F            .byte	$8F
01278 0429                        28            .byte	$28
01279 042A                        00            .byte	0
01280 042B                        96            .byte	$96
01281 042C                        B9            .byte	$B9
01282 042D                        C2            .byte	$C2
01283                                           ! 532  0xff,
01284 042E                        FF            .byte	$FF
01285                                           ! 533  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 042F                        00            .byte	0
01287 0430                        17            .byte	$17
01288 0431                        17            .byte	$17
01289 0432                        17            .byte	$17
01290 0433                        17            .byte	$17
01291 0434                        17            .byte	$17
01292 0435                        17            .byte	$17
01293 0436                        17            .byte	$17
01294                                           ! 534  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 0437                        17            .byte	$17
01296 0438                        17            .byte	$17
01297 0439                        17            .byte	$17
01298 043A                        17            .byte	$17
01299 043B                        17            .byte	$17
01300 043C                        17            .byte	$17
01301 043D                        17            .byte	$17
01302 043E                        17            .byte	$17
01303                                           ! 535  0x01, 0x00, 0x01, 0x00,
01304 043F                        01            .byte	1
01305 0440                        00            .byte	0
01306 0441                        01            .byte	1
01307 0442                        00            .byte	0
01308                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0443                        00            .byte	0
01310 0444                        00            .byte	0
01311 0445                        00            .byte	0
01312 0446                        00            .byte	0
01313 0447                        00            .byte	0
01314 0448                        00            .byte	0
01315 0449                        0D            .byte	$D
01316 044A                        0F            .byte	$F
01317 044B                        FF            .byte	$FF
01318                                           ! 537 },
01319                                           ! 538 {
01320                                           ! 539  80, 24, 16, 0x00, 0x10,
01321 044C                        50            .byte	$50
01322 044D                        18            .byte	$18
01323 044E                        10            .byte	$10
01324 044F                        00            .byte	0
01325 0450                        10            .byte	$10
01326                                           ! 540  0x00, 0x03, 0x00, 0x02,
01327 0451                        00            .byte	0
01328 0452                        03            .byte	3
01329 0453                        00            .byte	0
01330 0454                        02            .byte	2
01331                                           ! 541  0x66,
01332 0455                        66            .byte	$66
01333                                           ! 542  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 0456                        5F            .byte	$5F
01335 0457                        4F            .byte	$4F
01336 0458                        50            .byte	$50
01337 0459                        82            .byte	$82
01338 045A                        55            .byte	$55
01339 045B                        81            .byte	$81
01340 045C                        BF            .byte	$BF
01341 045D                        1F            .byte	$1F
01342                                           ! 543  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 045E                        00            .byte	0
01344 045F                        4F            .byte	$4F
01345 0460                        0D            .byte	$D
01346 0461                        0E            .byte	$E
01347 0462                        00            .byte	0
01348 0463                        00            .byte	0
01349 0464                        00            .byte	0
01350 0465                        00            .byte	0
01351                                           ! 544  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 0466                        9C            .byte	$9C
01353 0467                        8E            .byte	$8E
01354 0468                        8F            .byte	$8F
01355 0469                        28            .byte	$28
01356 046A                        0F            .byte	$F
01357 046B                        96            .byte	$96
01358 046C                        B9            .byte	$B9
01359 046D                        A3            .byte	$A3
01360                                           ! 545  0xff,
01361 046E                        FF            .byte	$FF
01362                                           ! 546  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 046F                        00            .byte	0
01364 0470                        08            .byte	8
01365 0471                        08            .byte	8
01366 0472                        08            .byte	8
01367 0473                        08            .byte	8
01368 0474                        08            .byte	8
01369 0475                        08            .byte	8
01370 0476                        08            .byte	8
01371                                           ! 547  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 0477                        10            .byte	$10
01373 0478                        18            .byte	$18
01374 0479                        18            .byte	$18
01375 047A                        18            .byte	$18
01376 047B                        18            .byte	$18
01377 047C                        18            .byte	$18
01378 047D                        18            .byte	$18
01379 047E                        18            .byte	$18
01380                                           ! 548  0x0e, 0x00, 0x0f, 0x08,
01381 047F                        0E            .byte	$E
01382 0480                        00            .byte	0
01383 0481                        0F            .byte	$F
01384 0482                        08            .byte	8
01385                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0483                        00            .byte	0
01387 0484                        00            .byte	0
01388 0485                        00            .byte	0
01389 0486                        00            .byte	0
01390 0487                        00            .byte	0
01391 0488                        10            .byte	$10
01392 0489                        0A            .byte	$A
01393 048A                        0F            .byte	$F
01394 048B                        FF            .byte	$FF
01395                                           ! 550 },
01396                                           ! 551 {
01397                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 048C                        00            .byte	0
01399 048D                        00            .byte	0
01400 048E                        00            .byte	0
01401 048F                        00            .byte	0
01402 0490                        00            .byte	0
01403 0491                        00            .byte	0
01404 0492                        00            .byte	0
01405 0493                        00            .byte	0
01406                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 0494                        00            .byte	0
01408 0495                        00            .byte	0
01409 0496                        00            .byte	0
01410 0497                        00            .byte	0
01411 0498                        00            .byte	0
01412 0499                        00            .byte	0
01413 049A                        00            .byte	0
01414 049B                        00            .byte	0
01415                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 049C                        00            .byte	0
01417 049D                        00            .byte	0
01418 049E                        00            .byte	0
01419 049F                        00            .byte	0
01420 04A0                        00            .byte	0
01421 04A1                        00            .byte	0
01422 04A2                        00            .byte	0
01423 04A3                        00            .byte	0
01424                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04A4                        00            .byte	0
01426 04A5                        00            .byte	0
01427 04A6                        00            .byte	0
01428 04A7                        00            .byte	0
01429 04A8                        00            .byte	0
01430 04A9                        00            .byte	0
01431 04AA                        00            .byte	0
01432 04AB                        00            .byte	0
01433                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04AC                        00            .byte	0
01435 04AD                        00            .byte	0
01436 04AE                        00            .byte	0
01437 04AF                        00            .byte	0
01438 04B0                        00            .byte	0
01439 04B1                        00            .byte	0
01440 04B2                        00            .byte	0
01441 04B3                        00            .byte	0
01442                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04B4                        00            .byte	0
01444 04B5                        00            .byte	0
01445 04B6                        00            .byte	0
01446 04B7                        00            .byte	0
01447 04B8                        00            .byte	0
01448 04B9                        00            .byte	0
01449 04BA                        00            .byte	0
01450 04BB                        00            .byte	0
01451                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04BC                        00            .byte	0
01453 04BD                        00            .byte	0
01454 04BE                        00            .byte	0
01455 04BF                        00            .byte	0
01456 04C0                        00            .byte	0
01457 04C1                        00            .byte	0
01458 04C2                        00            .byte	0
01459 04C3                        00            .byte	0
01460                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04C4                        00            .byte	0
01462 04C5                        00            .byte	0
01463 04C6                        00            .byte	0
01464 04C7                        00            .byte	0
01465 04C8                        00            .byte	0
01466 04C9                        00            .byte	0
01467 04CA                        00            .byte	0
01468 04CB                        00            .byte	0
01469                                           ! 560 },
01470                                           ! 561 {
01471                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04CC                        00            .byte	0
01473 04CD                        00            .byte	0
01474 04CE                        00            .byte	0
01475 04CF                        00            .byte	0
01476 04D0                        00            .byte	0
01477 04D1                        00            .byte	0
01478 04D2                        00            .byte	0
01479 04D3                        00            .byte	0
01480                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04D4                        00            .byte	0
01482 04D5                        00            .byte	0
01483 04D6                        00            .byte	0
01484 04D7                        00            .byte	0
01485 04D8                        00            .byte	0
01486 04D9                        00            .byte	0
01487 04DA                        00            .byte	0
01488 04DB                        00            .byte	0
01489                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04DC                        00            .byte	0
01491 04DD                        00            .byte	0
01492 04DE                        00            .byte	0
01493 04DF                        00            .byte	0
01494 04E0                        00            .byte	0
01495 04E1                        00            .byte	0
01496 04E2                        00            .byte	0
01497 04E3                        00            .byte	0
01498                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04E4                        00            .byte	0
01500 04E5                        00            .byte	0
01501 04E6                        00            .byte	0
01502 04E7                        00            .byte	0
01503 04E8                        00            .byte	0
01504 04E9                        00            .byte	0
01505 04EA                        00            .byte	0
01506 04EB                        00            .byte	0
01507                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04EC                        00            .byte	0
01509 04ED                        00            .byte	0
01510 04EE                        00            .byte	0
01511 04EF                        00            .byte	0
01512 04F0                        00            .byte	0
01513 04F1                        00            .byte	0
01514 04F2                        00            .byte	0
01515 04F3                        00            .byte	0
01516                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 04F4                        00            .byte	0
01518 04F5                        00            .byte	0
01519 04F6                        00            .byte	0
01520 04F7                        00            .byte	0
01521 04F8                        00            .byte	0
01522 04F9                        00            .byte	0
01523 04FA                        00            .byte	0
01524 04FB                        00            .byte	0
01525                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 04FC                        00            .byte	0
01527 04FD                        00            .byte	0
01528 04FE                        00            .byte	0
01529 04FF                        00            .byte	0
01530 0500                        00            .byte	0
01531 0501                        00            .byte	0
01532 0502                        00            .byte	0
01533 0503                        00            .byte	0
01534                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0504                        00            .byte	0
01536 0505                        00            .byte	0
01537 0506                        00            .byte	0
01538 0507                        00            .byte	0
01539 0508                        00            .byte	0
01540 0509                        00            .byte	0
01541 050A                        00            .byte	0
01542 050B                        00            .byte	0
01543                                           ! 570 },
01544                                           ! 571 {
01545                                           ! 572  0x00, 0x00, 0x00, 0
01546 050C                        00            .byte	0
01547 050D                        00            .byte	0
01548 050E                        00            .byte	0
01549                                           ! 572 x00, 0x00, 0x00, 0x00, 0x00,
01550 050F                        00            .byte	0
01551 0510                        00            .byte	0
01552 0511                        00            .byte	0
01553 0512                        00            .byte	0
01554 0513                        00            .byte	0
01555                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0514                        00            .byte	0
01557 0515                        00            .byte	0
01558 0516                        00            .byte	0
01559 0517                        00            .byte	0
01560 0518                        00            .byte	0
01561 0519                        00            .byte	0
01562 051A                        00            .byte	0
01563 051B                        00            .byte	0
01564                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 051C                        00            .byte	0
01566 051D                        00            .byte	0
01567 051E                        00            .byte	0
01568 051F                        00            .byte	0
01569 0520                        00            .byte	0
01570 0521                        00            .byte	0
01571 0522                        00            .byte	0
01572 0523                        00            .byte	0
01573                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0524                        00            .byte	0
01575 0525                        00            .byte	0
01576 0526                        00            .byte	0
01577 0527                        00            .byte	0
01578 0528                        00            .byte	0
01579 0529                        00            .byte	0
01580 052A                        00            .byte	0
01581 052B                        00            .byte	0
01582                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 052C                        00            .byte	0
01584 052D                        00            .byte	0
01585 052E                        00            .byte	0
01586 052F                        00            .byte	0
01587 0530                        00            .byte	0
01588 0531                        00            .byte	0
01589 0532                        00            .byte	0
01590 0533                        00            .byte	0
01591                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0534                        00            .byte	0
01593 0535                        00            .byte	0
01594 0536                        00            .byte	0
01595 0537                        00            .byte	0
01596 0538                        00            .byte	0
01597 0539                        00            .byte	0
01598 053A                        00            .byte	0
01599 053B                        00            .byte	0
01600                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 053C                        00            .byte	0
01602 053D                        00            .byte	0
01603 053E                        00            .byte	0
01604 053F                        00            .byte	0
01605 0540                        00            .byte	0
01606 0541                        00            .byte	0
01607 0542                        00            .byte	0
01608 0543                        00            .byte	0
01609                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0544                        00            .byte	0
01611 0545                        00            .byte	0
01612 0546                        00            .byte	0
01613 0547                        00            .byte	0
01614 0548                        00            .byte	0
01615 0549                        00            .byte	0
01616 054A                        00            .byte	0
01617 054B                        00            .byte	0
01618                                           ! 580 },
01619                                           ! 581 {
01620                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 054C                        00            .byte	0
01622 054D                        00            .byte	0
01623 054E                        00            .byte	0
01624 054F                        00            .byte	0
01625 0550                        00            .byte	0
01626 0551                        00            .byte	0
01627 0552                        00            .byte	0
01628 0553                        00            .byte	0
01629                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0554                        00            .byte	0
01631 0555                        00            .byte	0
01632 0556                        00            .byte	0
01633 0557                        00            .byte	0
01634 0558                        00            .byte	0
01635 0559                        00            .byte	0
01636 055A                        00            .byte	0
01637 055B                        00            .byte	0
01638                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 055C                        00            .byte	0
01640 055D                        00            .byte	0
01641 055E                        00            .byte	0
01642 055F                        00            .byte	0
01643 0560                        00            .byte	0
01644 0561                        00            .byte	0
01645 0562                        00            .byte	0
01646 0563                        00            .byte	0
01647                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0564                        00            .byte	0
01649 0565                        00            .byte	0
01650 0566                        00            .byte	0
01651 0567                        00            .byte	0
01652 0568                        00            .byte	0
01653 0569                        00            .byte	0
01654 056A                        00            .byte	0
01655 056B                        00            .byte	0
01656                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 056C                        00            .byte	0
01658 056D                        00            .byte	0
01659 056E                        00            .byte	0
01660 056F                        00            .byte	0
01661 0570                        00            .byte	0
01662 0571                        00            .byte	0
01663 0572                        00            .byte	0
01664 0573                        00            .byte	0
01665                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0574                        00            .byte	0
01667 0575                        00            .byte	0
01668 0576                        00            .byte	0
01669 0577                        00            .byte	0
01670 0578                        00            .byte	0
01671 0579                        00            .byte	0
01672 057A                        00            .byte	0
01673 057B                        00            .byte	0
01674                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 057C                        00            .byte	0
01676 057D                        00            .byte	0
01677 057E                        00            .byte	0
01678 057F                        00            .byte	0
01679 0580                        00            .byte	0
01680 0581                        00            .byte	0
01681 0582                        00            .byte	0
01682 0583                        00            .byte	0
01683                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0584                        00            .byte	0
01685 0585                        00            .byte	0
01686 0586                        00            .byte	0
01687 0587                        00            .byte	0
01688 0588                        00            .byte	0
01689 0589                        00            .byte	0
01690 058A                        00            .byte	0
01691 058B                        00            .byte	0
01692                                           ! 590 },
01693                                           ! 591 {
01694                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 058C                        00            .byte	0
01696 058D                        00            .byte	0
01697 058E                        00            .byte	0
01698 058F                        00            .byte	0
01699 0590                        00            .byte	0
01700 0591                        00            .byte	0
01701 0592                        00            .byte	0
01702 0593                        00            .byte	0
01703                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0594                        00            .byte	0
01705 0595                        00            .byte	0
01706 0596                        00            .byte	0
01707 0597                        00            .byte	0
01708 0598                        00            .byte	0
01709 0599                        00            .byte	0
01710 059A                        00            .byte	0
01711 059B                        00            .byte	0
01712                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 059C                        00            .byte	0
01714 059D                        00            .byte	0
01715 059E                        00            .byte	0
01716 059F                        00            .byte	0
01717 05A0                        00            .byte	0
01718 05A1                        00            .byte	0
01719 05A2                        00            .byte	0
01720 05A3                        00            .byte	0
01721                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05A4                        00            .byte	0
01723 05A5                        00            .byte	0
01724 05A6                        00            .byte	0
01725 05A7                        00            .byte	0
01726 05A8                        00            .byte	0
01727 05A9                        00            .byte	0
01728 05AA                        00            .byte	0
01729 05AB                        00            .byte	0
01730                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05AC                        00            .byte	0
01732 05AD                        00            .byte	0
01733 05AE                        00            .byte	0
01734 05AF                        00            .byte	0
01735 05B0                        00            .byte	0
01736 05B1                        00            .byte	0
01737 05B2                        00            .byte	0
01738 05B3                        00            .byte	0
01739                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05B4                        00            .byte	0
01741 05B5                        00            .byte	0
01742 05B6                        00            .byte	0
01743 05B7                        00            .byte	0
01744 05B8                        00            .byte	0
01745 05B9                        00            .byte	0
01746 05BA                        00            .byte	0
01747 05BB                        00            .byte	0
01748                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05BC                        00            .byte	0
01750 05BD                        00            .byte	0
01751 05BE                        00            .byte	0
01752 05BF                        00            .byte	0
01753 05C0                        00            .byte	0
01754 05C1                        00            .byte	0
01755 05C2                        00            .byte	0
01756 05C3                        00            .byte	0
01757                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05C4                        00            .byte	0
01759 05C5                        00            .byte	0
01760 05C6                        00            .byte	0
01761 05C7                        00            .byte	0
01762 05C8                        00            .byte	0
01763 05C9                        00            .byte	0
01764 05CA                        00            .byte	0
01765 05CB                        00            .byte	0
01766                                           ! 600 },
01767                                           ! 601 {
01768                                           ! 602  40, 24, 8, 0x00, 0x20,
01769 05CC                        28            .byte	$28
01770 05CD                        18            .byte	$18
01771 05CE                        08            .byte	8
01772 05CF                        00            .byte	0
01773 05D0                        20            .byte	$20
01774                                           ! 603  0x09, 0x0f, 0x00, 0x06,
01775 05D1                        09            .byte	9
01776 05D2                        0F            .byte	$F
01777 05D3                        00            .byte	0
01778 05D4                        06            .byte	6
01779                                           ! 604  0x63,
01780 05D5                        63            .byte	$63
01781                                           ! 605  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05D6                        2D            .byte	$2D
01783 05D7                        27            .byte	$27
01784 05D8                        28            .byte	$28
01785 05D9                        90            .byte	$90
01786 05DA                        2B            .byte	$2B
01787 05DB                        80            .byte	$80
01788 05DC                        BF            .byte	$BF
01789 05DD                        1F            .byte	$1F
01790                                           ! 606  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05DE                        00            .byte	0
01792 05DF                        C0            .byte	$C0
01793 05E0                        00            .byte	0
01794 05E1                        00            .byte	0
01795 05E2                        00            .byte	0
01796 05E3                        00            .byte	0
01797 05E4                        00            .byte	0
01798 05E5                        00            .byte	0
01799                                           ! 607  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05E6                        9C            .byte	$9C
01801 05E7                        8E            .byte	$8E
01802 05E8                        8F            .byte	$8F
01803 05E9                        14            .byte	$14
01804 05EA                        00            .byte	0
01805 05EB                        96            .byte	$96
01806 05EC                        B9            .byte	$B9
01807 05ED                        E3            .byte	$E3
01808                                           ! 608  0xff,
01809 05EE                        FF            .byte	$FF
01810                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05EF                        00            .byte	0
01812 05F0                        01            .byte	1
01813 05F1                        02            .byte	2
01814 05F2                        03            .byte	3
01815 05F3                        04            .byte	4
01816 05F4                        05            .byte	5
01817 05F5                        06            .byte	6
01818 05F6                        07            .byte	7
01819                                           ! 610  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 05F7                        10            .byte	$10
01821 05F8                        11            .byte	$11
01822 05F9                        12            .byte	$12
01823 05FA                        13            .byte	$13
01824 05FB                        14            .byte	$14
01825 05FC                        15            .byte	$15
01826 05FD                        16            .byte	$16
01827 05FE                        17            .byte	$17
01828                                           ! 611  0x01, 0x00, 0x0f, 0x00,
01829 05FF                        01            .byte	1
01830 0600                        00            .byte	0
01831 0601                        0F            .byte	$F
01832 0602                        00            .byte	0
01833                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0603                        00            .byte	0
01835 0604                        00            .byte	0
01836 0605                        00            .byte	0
01837 0606                        00            .byte	0
01838 0607                        00            .byte	0
01839 0608                        00            .byte	0
01840 0609                        05            .byte	5
01841 060A                        0F            .byte	$F
01842 060B                        FF            .byte	$FF
01843                                           ! 613 },
01844                                           ! 614 {
01845                                           ! 615  80, 24, 8, 0x00, 0x40,
01846 060C                        50            .byte	$50
01847 060D                        18            .byte	$18
01848 060E                        08            .byte	8
01849 060F                        00            .byte	0
01850 0610                        40            .byte	$40
01851                                           ! 616  0x01, 0x0f, 0x00, 0x06,
01852 0611                        01            .byte	1
01853 0612                        0F            .byte	$F
01854 0613                        00            .byte	0
01855 0614                        06            .byte	6
01856                                           ! 617  0x63,
01857 0615                        63            .byte	$63
01858                                           ! 618  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 0616                        5F            .byte	$5F
01860 0617                        4F            .byte	$4F
01861 0618                        50            .byte	$50
01862 0619                        82            .byte	$82
01863 061A                        54            .byte	$54
01864 061B                        80            .byte	$80
01865 061C                        BF            .byte	$BF
01866 061D                        1F            .byte	$1F
01867                                           ! 619  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 061E                        00            .byte	0
01869 061F                        C0            .byte	$C0
01870 0620                        00            .byte	0
01871 0621                        00            .byte	0
01872 0622                        00            .byte	0
01873 0623                        00            .byte	0
01874 0624                        00            .byte	0
01875 0625                        00            .byte	0
01876                                           ! 620  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 0626                        9C            .byte	$9C
01878 0627                        8E            .byte	$8E
01879 0628                        8F            .byte	$8F
01880 0629                        28            .byte	$28
01881 062A                        00            .byte	0
01882 062B                        96            .byte	$96
01883 062C                        B9            .byte	$B9
01884 062D                        E3            .byte	$E3
01885                                           ! 621  0xff,
01886 062E                        FF            .byte	$FF
01887                                           ! 622  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 062F                        00            .byte	0
01889 0630                        01            .byte	1
01890 0631                        02            .byte	2
01891 0632                        03            .byte	3
01892 0633                        04            .byte	4
01893 0634                        05            .byte	5
01894 0635                        06            .byte	6
01895 0636                        07            .byte	7
01896                                           ! 623  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 0637                        10            .byte	$10
01898 0638                        11            .byte	$11
01899 0639                        12            .byte	$12
01900 063A                        13            .byte	$13
01901 063B                        14            .byte	$14
01902 063C                        15            .byte	$15
01903 063D                        16            .byte	$16
01904 063E                        17            .byte	$17
01905                                           ! 624  0x01, 0x00, 0x0f, 0x00,
01906 063F                        01            .byte	1
01907 0640                        00            .byte	0
01908 0641                        0F            .byte	$F
01909 0642                        00            .byte	0
01910                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 0643                        00            .byte	0
01912 0644                        00            .byte	0
01913 0645                        00            .byte	0
01914 0646                        00            .byte	0
01915 0647                        00            .byte	0
01916 0648                        00            .byte	0
01917 0649                        05            .byte	5
01918 064A                        0F            .byte	$F
01919 064B                        FF            .byte	$FF
01920                                           ! 626 },
01921                                           ! 627 {
01922                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01923 064C                        00            .byte	0
01924 064D                        00            .byte	0
01925 064E                        00            .byte	0
01926 064F                        00            .byte	0
01927 0650                        00            .byte	0
01928 0651                        00            .byte	0
01929 0652                        00            .byte	0
01930 0653                        00            .byte	0
01931                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01932 0654                        00            .byte	0
01933 0655                        00            .byte	0
01934 0656                        00            .byte	0
01935 0657                        00            .byte	0
01936 0658                        00            .byte	0
01937 0659                        00            .byte	0
01938                                           ! 629  0x00,
01939 065A                        00            .byte	0
01940 065B                        00            .byte	0
01941                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 065C                        00            .byte	0
01943 065D                        00            .byte	0
01944 065E                        00            .byte	0
01945 065F                        00            .byte	0
01946 0660                        00            .byte	0
01947 0661                        00            .byte	0
01948 0662                        00            .byte	0
01949 0663                        00            .byte	0
01950                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0664                        00            .byte	0
01952 0665                        00            .byte	0
01953 0666                        00            .byte	0
01954 0667                        00            .byte	0
01955 0668                        00            .byte	0
01956 0669                        00            .byte	0
01957 066A                        00            .byte	0
01958 066B                        00            .byte	0
01959                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 066C                        00            .byte	0
01961 066D                        00            .byte	0
01962 066E                        00            .byte	0
01963 066F                        00            .byte	0
01964 0670                        00            .byte	0
01965 0671                        00            .byte	0
01966 0672                        00            .byte	0
01967 0673                        00            .byte	0
01968                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0674                        00            .byte	0
01970 0675                        00            .byte	0
01971 0676                        00            .byte	0
01972 0677                        00            .byte	0
01973 0678                        00            .byte	0
01974 0679                        00            .byte	0
01975 067A                        00            .byte	0
01976 067B                        00            .byte	0
01977                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 067C                        00            .byte	0
01979 067D                        00            .byte	0
01980 067E                        00            .byte	0
01981 067F                        00            .byte	0
01982 0680                        00            .byte	0
01983 0681                        00            .byte	0
01984 0682                        00            .byte	0
01985 0683                        00            .byte	0
01986                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0684                        00            .byte	0
01988 0685                        00            .byte	0
01989 0686                        00            .byte	0
01990 0687                        00            .byte	0
01991 0688                        00            .byte	0
01992 0689                        00            .byte	0
01993 068A                        00            .byte	0
01994 068B                        00            .byte	0
01995                                           ! 636 },
01996                                           ! 637 {
01997                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 068C                        00            .byte	0
01999 068D                        00            .byte	0
02000 068E                        00            .byte	0
02001 068F                        00            .byte	0
02002 0690                        00            .byte	0
02003 0691                        00            .byte	0
02004 0692                        00            .byte	0
02005 0693                        00            .byte	0
02006                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0694                        00            .byte	0
02008 0695                        00            .byte	0
02009 0696                        00            .byte	0
02010 0697                        00            .byte	0
02011 0698                        00            .byte	0
02012 0699                        00            .byte	0
02013 069A                        00            .byte	0
02014 069B                        00            .byte	0
02015                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 069C                        00            .byte	0
02017 069D                        00            .byte	0
02018 069E                        00            .byte	0
02019 069F                        00            .byte	0
02020 06A0                        00            .byte	0
02021 06A1                        00            .byte	0
02022 06A2                        00            .byte	0
02023 06A3                        00            .byte	0
02024                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06A4                        00            .byte	0
02026 06A5                        00            .byte	0
02027 06A6                        00            .byte	0
02028 06A7                        00            .byte	0
02029 06A8                        00            .byte	0
02030 06A9                        00            .byte	0
02031 06AA                        00            .byte	0
02032 06AB                        00            .byte	0
02033                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06AC                        00            .byte	0
02035 06AD                        00            .byte	0
02036 06AE                        00            .byte	0
02037 06AF                        00            .byte	0
02038 06B0                        00            .byte	0
02039 06B1                        00            .byte	0
02040 06B2                        00            .byte	0
02041 06B3                        00            .byte	0
02042                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06B4                        00            .byte	0
02044 06B5                        00            .byte	0
02045 06B6                        00            .byte	0
02046 06B7                        00            .byte	0
02047 06B8                        00            .byte	0
02048 06B9                        00            .byte	0
02049 06BA                        00            .byte	0
02050 06BB                        00            .byte	0
02051                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06BC                        00            .byte	0
02053 06BD                        00            .byte	0
02054 06BE                        00            .byte	0
02055 06BF                        00            .byte	0
02056 06C0                        00            .byte	0
02057 06C1                        00            .byte	0
02058 06C2                        00            .byte	0
02059 06C3                        00            .byte	0
02060                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06C4                        00            .byte	0
02062 06C5                        00            .byte	0
02063 06C6                        00            .byte	0
02064 06C7                        00            .byte	0
02065 06C8                        00            .byte	0
02066 06C9                        00            .byte	0
02067 06CA                        00            .byte	0
02068 06CB                        00            .byte	0
02069                                           ! 646 },
02070                                           ! 647 {
02071                                           ! 648  80, 24, 14, 0x00, 0x80,
02072 06CC                        50            .byte	$50
02073 06CD                        18            .byte	$18
02074 06CE                        0E            .byte	$E
02075 06CF                        00            .byte	0
02076 06D0                        80            .byte	$80
02077                                           ! 649  0x01, 0x0f, 0x00, 0x06,
02078 06D1                        01            .byte	1
02079 06D2                        0F            .byte	$F
02080 06D3                        00            .byte	0
02081 06D4                        06            .byte	6
02082                                           ! 650  0xa3,
02083 06D5                        A3            .byte	$A3
02084                                           ! 651  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06D6                        5F            .byte	$5F
02086 06D7                        4F            .byte	$4F
02087 06D8                        50            .byte	$50
02088 06D9                        82            .byte	$82
02089 06DA                        54            .byte	$54
02090 06DB                        80            .byte	$80
02091 06DC                        BF            .byte	$BF
02092 06DD                        1F            .byte	$1F
02093                                           ! 652  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06DE                        00            .byte	0
02095 06DF                        40            .byte	$40
02096 06E0                        00            .byte	0
02097 06E1                        00            .byte	0
02098 06E2                        00            .byte	0
02099 06E3                        00            .byte	0
02100 06E4                        00            .byte	0
02101 06E5                        00            .byte	0
02102                                           ! 653  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06E6                        83            .byte	$83
02104 06E7                        85            .byte	$85
02105 06E8                        5D            .byte	$5D
02106 06E9                        28            .byte	$28
02107 06EA                        0F            .byte	$F
02108 06EB                        63            .byte	$63
02109 06EC                        BA            .byte	$BA
02110 06ED                        E3            .byte	$E3
02111                                           ! 654  0xff,
02112 06EE                        FF            .byte	$FF
02113                                           ! 655  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06EF                        00            .byte	0
02115 06F0                        08            .byte	8
02116 06F1                        00            .byte	0
02117 06F2                        00            .byte	0
02118 06F3                        18            .byte	$18
02119 06F4                        18            .byte	$18
02120 06F5                        00            .byte	0
02121 06F6                        00            .byte	0
02122                                           ! 656  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 06F7                        00            .byte	0
02124 06F8                        08            .byte	8
02125 06F9                        00            .byte	0
02126 06FA                        00            .byte	0
02127 06FB                        00            .byte	0
02128 06FC                        18            .byte	$18
02129 06FD                        00            .byte	0
02130 06FE                        00            .byte	0
02131                                           ! 657  0x01, 0x00, 0x01, 0x00,
02132 06FF                        01            .byte	1
02133 0700                        00            .byte	0
02134 0701                        01            .byte	1
02135 0702                        00            .byte	0
02136                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0703                        00            .byte	0
02138 0704                        00            .byte	0
02139 0705                        00            .byte	0
02140 0706                        00            .byte	0
02141 0707                        00            .byte	0
02142 0708                        00            .byte	0
02143 0709                        05            .byte	5
02144 070A                        0F            .byte	$F
02145 070B                        FF            .byte	$FF
02146                                           ! 659 },
02147                                           ! 660 {
02148                                           ! 661  80, 24, 14, 0x00, 0x80,
02149 070C                        50            .byte	$50
02150 070D                        18            .byte	$18
02151 070E                        0E            .byte	$E
02152 070F                        00            .byte	0
02153 0710                        80            .byte	$80
02154                                           ! 662  0x01, 0x0f, 0x00, 0x06,
02155 0711                        01            .byte	1
02156 0712                        0F            .byte	$F
02157 0713                        00            .byte	0
02158 0714                        06            .byte	6
02159                                           ! 663  0xa3,
02160 0715                        A3            .byte	$A3
02161                                           ! 664  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 0716                        5F            .byte	$5F
02163 0717                        4F            .byte	$4F
02164 0718                        50            .byte	$50
02165 0719                        82            .byte	$82
02166 071A                        54            .byte	$54
02167 071B                        80            .byte	$80
02168 071C                        BF            .byte	$BF
02169 071D                        1F            .byte	$1F
02170                                           ! 665  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 071E                        00            .byte	0
02172 071F                        40            .byte	$40
02173 0720                        00            .byte	0
02174 0721                        00            .byte	0
02175 0722                        00            .byte	0
02176 0723                        00            .byte	0
02177 0724                        00            .byte	0
02178 0725                        00            .byte	0
02179                                           ! 666  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 0726                        83            .byte	$83
02181 0727                        85            .byte	$85
02182 0728                        5D            .byte	$5D
02183 0729                        28            .byte	$28
02184 072A                        0F            .byte	$F
02185 072B                        63            .byte	$63
02186 072C                        BA            .byte	$BA
02187 072D                        E3            .byte	$E3
02188                                           ! 667  0xff,
02189 072E                        FF            .byte	$FF
02190                                           ! 668  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 072F                        00            .byte	0
02192 0730                        01            .byte	1
02193 0731                        02            .byte	2
02194 0732                        03            .byte	3
02195 0733                        04            .byte	4
02196 0734                        05            .byte	5
02197 0735                        14            .byte	$14
02198 0736                        07            .byte	7
02199                                           ! 669  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 0737                        38            .byte	$38
02201 0738                        39            .byte	$39
02202 0739                        3A            .byte	$3A
02203 073A                        3B            .byte	$3B
02204 073B                        3C            .byte	$3C
02205 073C                        3D            .byte	$3D
02206 073D                        3E            .byte	$3E
02207 073E                        3F            .byte	$3F
02208                                           ! 670  0x01, 0x00, 0x0f, 0x00,
02209 073F                        01            .byte	1
02210 0740                        00            .byte	0
02211 0741                        0F            .byte	$F
02212 0742                        00            .byte	0
02213                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0743                        00            .byte	0
02215 0744                        00            .byte	0
02216 0745                        00            .byte	0
02217 0746                        00            .byte	0
02218 0747                        00            .byte	0
02219 0748                        00            .byte	0
02220 0749                        05            .byte	5
02221 074A                        0F            .byte	$F
02222 074B                        FF            .byte	$FF
02223                                           ! 672 },
02224                                           ! 673 {
02225                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 074C                        00            .byte	0
02227 074D                        00            .byte	0
02228 074E                        00            .byte	0
02229 074F                        00            .byte	0
02230 0750                        00            .byte	0
02231 0751                        00            .byte	0
02232 0752                        00            .byte	0
02233 0753                        00            .byte	0
02234                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0754                        00            .byte	0
02236 0755                        00            .byte	0
02237 0756                        00            .byte	0
02238 0757                        00            .byte	0
02239 0758                        00            .byte	0
02240 0759                        00            .byte	0
02241 075A                        00            .byte	0
02242 075B                        00            .byte	0
02243                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 075C                        00            .byte	0
02245 075D                        00            .byte	0
02246 075E                        00            .byte	0
02247 075F                        00            .byte	0
02248 0760                        00            .byte	0
02249 0761                        00            .byte	0
02250 0762                        00            .byte	0
02251 0763                        00            .byte	0
02252                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0764                        00            .byte	0
02254 0765                        00            .byte	0
02255 0766                        00            .byte	0
02256 0767                        00            .byte	0
02257 0768                        00            .byte	0
02258 0769                        00            .byte	0
02259 076A                        00            .byte	0
02260 076B                        00            .byte	0
02261                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 076C                        00            .byte	0
02263 076D                        00            .byte	0
02264 076E                        00            .byte	0
02265 076F                        00            .byte	0
02266 0770                        00            .byte	0
02267 0771                        00            .byte	0
02268 0772                        00            .byte	0
02269 0773                        00            .byte	0
02270                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0774                        00            .byte	0
02272 0775                        00            .byte	0
02273 0776                        00            .byte	0
02274 0777                        00            .byte	0
02275 0778                        00            .byte	0
02276 0779                        00            .byte	0
02277 077A                        00            .byte	0
02278 077B                        00            .byte	0
02279                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 077C                        00            .byte	0
02281 077D                        00            .byte	0
02282 077E                        00            .byte	0
02283 077F                        00            .byte	0
02284 0780                        00            .byte	0
02285 0781                        00            .byte	0
02286 0782                        00            .byte	0
02287 0783                        00            .byte	0
02288                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0784                        00            .byte	0
02290 0785                        00            .byte	0
02291 0786                        00            .byte	0
02292 0787                        00            .byte	0
02293 0788                        00            .byte	0
02294 0789                        00            .byte	0
02295 078A                        00            .byte	0
02296 078B                        00            .byte	0
02297                                           ! 682 },
02298                                           ! 683 {
02299                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 078C                        00            .byte	0
02301 078D                        00            .byte	0
02302 078E                        00            .byte	0
02303 078F                        00            .byte	0
02304 0790                        00            .byte	0
02305 0791                        00            .byte	0
02306 0792                        00            .byte	0
02307 0793                        00            .byte	0
02308                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02309 0794                        00            .byte	0
02310 0795                        00            .byte	0
02311 0796                        00            .byte	0
02312 0797                        00            .byte	0
02313 0798                        00            .byte	0
02314 0799                        00            .byte	0
02315 079A                        00            .byte	0
02316 079B                        00            .byte	0
02317                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02318 079C                        00            .byte	0
02319 079D                        00            .byte	0
02320 079E                        00            .byte	0
02321 079F                        00            .byte	0
02322 07A0                        00            .byte	0
02323 07A1                        00            .byte	0
02324 07A2                        00            .byte	0
02325 07A3                        00            .byte	0
02326                                           ! 687  0x00, 0x00, 
02327 07A4                        00            .byte	0
02328 07A5                        00            .byte	0
02329                                           ! 687 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02330 07A6                        00            .byte	0
02331 07A7                        00            .byte	0
02332 07A8                        00            .byte	0
02333 07A9                        00            .byte	0
02334 07AA                        00            .byte	0
02335 07AB                        00            .byte	0
02336                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07AC                        00            .byte	0
02338 07AD                        00            .byte	0
02339 07AE                        00            .byte	0
02340 07AF                        00            .byte	0
02341 07B0                        00            .byte	0
02342 07B1                        00            .byte	0
02343 07B2                        00            .byte	0
02344 07B3                        00            .byte	0
02345                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07B4                        00            .byte	0
02347 07B5                        00            .byte	0
02348 07B6                        00            .byte	0
02349 07B7                        00            .byte	0
02350 07B8                        00            .byte	0
02351 07B9                        00            .byte	0
02352 07BA                        00            .byte	0
02353 07BB                        00            .byte	0
02354                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07BC                        00            .byte	0
02356 07BD                        00            .byte	0
02357 07BE                        00            .byte	0
02358 07BF                        00            .byte	0
02359 07C0                        00            .byte	0
02360 07C1                        00            .byte	0
02361 07C2                        00            .byte	0
02362 07C3                        00            .byte	0
02363                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07C4                        00            .byte	0
02365 07C5                        00            .byte	0
02366 07C6                        00            .byte	0
02367 07C7                        00            .byte	0
02368 07C8                        00            .byte	0
02369 07C9                        00            .byte	0
02370 07CA                        00            .byte	0
02371 07CB                        00            .byte	0
02372                                           ! 692 },
02373                                           ! 693 {
02374                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07CC                        00            .byte	0
02376 07CD                        00            .byte	0
02377 07CE                        00            .byte	0
02378 07CF                        00            .byte	0
02379 07D0                        00            .byte	0
02380 07D1                        00            .byte	0
02381 07D2                        00            .byte	0
02382 07D3                        00            .byte	0
02383                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07D4                        00            .byte	0
02385 07D5                        00            .byte	0
02386 07D6                        00            .byte	0
02387 07D7                        00            .byte	0
02388 07D8                        00            .byte	0
02389 07D9                        00            .byte	0
02390 07DA                        00            .byte	0
02391 07DB                        00            .byte	0
02392                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07DC                        00            .byte	0
02394 07DD                        00            .byte	0
02395 07DE                        00            .byte	0
02396 07DF                        00            .byte	0
02397 07E0                        00            .byte	0
02398 07E1                        00            .byte	0
02399 07E2                        00            .byte	0
02400 07E3                        00            .byte	0
02401                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07E4                        00            .byte	0
02403 07E5                        00            .byte	0
02404 07E6                        00            .byte	0
02405 07E7                        00            .byte	0
02406 07E8                        00            .byte	0
02407 07E9                        00            .byte	0
02408 07EA                        00            .byte	0
02409 07EB                        00            .byte	0
02410                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07EC                        00            .byte	0
02412 07ED                        00            .byte	0
02413 07EE                        00            .byte	0
02414 07EF                        00            .byte	0
02415 07F0                        00            .byte	0
02416 07F1                        00            .byte	0
02417 07F2                        00            .byte	0
02418 07F3                        00            .byte	0
02419                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 07F4                        00            .byte	0
02421 07F5                        00            .byte	0
02422 07F6                        00            .byte	0
02423 07F7                        00            .byte	0
02424 07F8                        00            .byte	0
02425 07F9                        00            .byte	0
02426 07FA                        00            .byte	0
02427 07FB                        00            .byte	0
02428                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 07FC                        00            .byte	0
02430 07FD                        00            .byte	0
02431 07FE                        00            .byte	0
02432 07FF                        00            .byte	0
02433 0800                        00            .byte	0
02434 0801                        00            .byte	0
02435 0802                        00            .byte	0
02436 0803                        00            .byte	0
02437                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0804                        00            .byte	0
02439 0805                        00            .byte	0
02440 0806                        00            .byte	0
02441 0807                        00            .byte	0
02442 0808                        00            .byte	0
02443 0809                        00            .byte	0
02444 080A                        00            .byte	0
02445 080B                        00            .byte	0
02446                                           ! 702 },
02447                                           ! 703 {
02448                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 080C                        00            .byte	0
02450 080D                        00            .byte	0
02451 080E                        00            .byte	0
02452 080F                        00            .byte	0
02453 0810                        00            .byte	0
02454 0811                        00            .byte	0
02455 0812                        00            .byte	0
02456 0813                        00            .byte	0
02457                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0814                        00            .byte	0
02459 0815                        00            .byte	0
02460 0816                        00            .byte	0
02461 0817                        00            .byte	0
02462 0818                        00            .byte	0
02463 0819                        00            .byte	0
02464 081A                        00            .byte	0
02465 081B                        00            .byte	0
02466                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 081C                        00            .byte	0
02468 081D                        00            .byte	0
02469 081E                        00            .byte	0
02470 081F                        00            .byte	0
02471 0820                        00            .byte	0
02472 0821                        00            .byte	0
02473 0822                        00            .byte	0
02474 0823                        00            .byte	0
02475                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0824                        00            .byte	0
02477 0825                        00            .byte	0
02478 0826                        00            .byte	0
02479 0827                        00            .byte	0
02480 0828                        00            .byte	0
02481 0829                        00            .byte	0
02482 082A                        00            .byte	0
02483 082B                        00            .byte	0
02484                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 082C                        00            .byte	0
02486 082D                        00            .byte	0
02487 082E                        00            .byte	0
02488 082F                        00            .byte	0
02489 0830                        00            .byte	0
02490 0831                        00            .byte	0
02491 0832                        00            .byte	0
02492 0833                        00            .byte	0
02493                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0834                        00            .byte	0
02495 0835                        00            .byte	0
02496 0836                        00            .byte	0
02497 0837                        00            .byte	0
02498 0838                        00            .byte	0
02499 0839                        00            .byte	0
02500 083A                        00            .byte	0
02501 083B                        00            .byte	0
02502                                           ! 710  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 083C                        00            .byte	0
02504 083D                        00            .byte	0
02505 083E                        00            .byte	0
02506 083F                        00            .byte	0
02507 0840                        00            .byte	0
02508 0841                        00            .byte	0
02509 0842                        00            .byte	0
02510 0843                        00            .byte	0
02511                                           ! 711  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0844                        00            .byte	0
02513 0845                        00            .byte	0
02514 0846                        00            .byte	0
02515 0847                        00            .byte	0
02516 0848                        00            .byte	0
02517 0849                        00            .byte	0
02518 084A                        00            .byte	0
02519 084B                        00            .byte	0
02520                                           ! 712 },
02521                                           ! 713 {
02522                                           ! 714  40, 24, 16, 0x00, 0x08,
02523 084C                        28            .byte	$28
02524 084D                        18            .byte	$18
02525 084E                        10            .byte	$10
02526 084F                        00            .byte	0
02527 0850                        08            .byte	8
02528                                           ! 715  0x08, 0x03, 0x00, 0x02,
02529 0851                        08            .byte	8
02530 0852                        03            .byte	3
02531 0853                        00            .byte	0
02532 0854                        02            .byte	2
02533                                           ! 716  0x67,
02534 0855                        67            .byte	$67
02535                                           ! 717  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 0856                        2D            .byte	$2D
02537 0857                        27            .byte	$27
02538 0858                        28            .byte	$28
02539 0859                        90            .byte	$90
02540 085A                        2B            .byte	$2B
02541 085B                        A0            .byte	$A0
02542 085C                        BF            .byte	$BF
02543 085D                        1F            .byte	$1F
02544                                           ! 718  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 085E                        00            .byte	0
02546 085F                        4F            .byte	$4F
02547 0860                        0D            .byte	$D
02548 0861                        0E            .byte	$E
02549 0862                        00            .byte	0
02550 0863                        00            .byte	0
02551 0864                        00            .byte	0
02552 0865                        00            .byte	0
02553                                           ! 719  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 0866                        9C            .byte	$9C
02555 0867                        8E            .byte	$8E
02556 0868                        8F            .byte	$8F
02557 0869                        14            .byte	$14
02558 086A                        1F            .byte	$1F
02559 086B                        96            .byte	$96
02560 086C                        B9            .byte	$B9
02561 086D                        A3            .byte	$A3
02562                                           ! 720  0xff,
02563 086E                        FF            .byte	$FF
02564                                           ! 721  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 086F                        00            .byte	0
02566 0870                        01            .byte	1
02567 0871                        02            .byte	2
02568 0872                        03            .byte	3
02569 0873                        04            .byte	4
02570 0874                        05            .byte	5
02571 0875                        14            .byte	$14
02572 0876                        07            .byte	7
02573                                           ! 722  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 0877                        38            .byte	$38
02575 0878                        39            .byte	$39
02576 0879                        3A            .byte	$3A
02577 087A                        3B            .byte	$3B
02578 087B                        3C            .byte	$3C
02579 087C                        3D            .byte	$3D
02580 087D                        3E            .byte	$3E
02581 087E                        3F            .byte	$3F
02582                                           ! 723  0x0c, 0x00, 0x0f, 0x08,
02583 087F                        0C            .byte	$C
02584 0880                        00            .byte	0
02585 0881                        0F            .byte	$F
02586 0882                        08            .byte	8
02587                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0883                        00            .byte	0
02589 0884                        00            .byte	0
02590 0885                        00            .byte	0
02591 0886                        00            .byte	0
02592 0887                        00            .byte	0
02593 0888                        10            .byte	$10
02594 0889                        0E            .byte	$E
02595 088A                        0F            .byte	$F
02596 088B                        FF            .byte	$FF
02597                                           ! 725 },
02598                                           ! 726 {
02599                                           ! 727  80, 24, 16, 0x00, 0x10,
02600 088C                        50            .byte	$50
02601 088D                        18            .byte	$18
02602 088E                        10            .byte	$10
02603 088F                        00            .byte	0
02604 0890                        10            .byte	$10
02605                                           ! 728  0x00, 0x03, 0x00, 0x02,
02606 0891                        00            .byte	0
02607 0892                        03            .byte	3
02608 0893                        00            .byte	0
02609 0894                        02            .byte	2
02610                                           ! 729  0x67,
02611 0895                        67            .byte	$67
02612                                           ! 730  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 0896                        5F            .byte	$5F
02614 0897                        4F            .byte	$4F
02615 0898                        50            .byte	$50
02616 0899                        82            .byte	$82
02617 089A                        55            .byte	$55
02618 089B                        81            .byte	$81
02619 089C                        BF            .byte	$BF
02620 089D                        1F            .byte	$1F
02621                                           ! 731  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 089E                        00            .byte	0
02623 089F                        4F            .byte	$4F
02624 08A0                        0D            .byte	$D
02625 08A1                        0E            .byte	$E
02626 08A2                        00            .byte	0
02627 08A3                        00            .byte	0
02628 08A4                        00            .byte	0
02629 08A5                        00            .byte	0
02630                                           ! 732  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08A6                        9C            .byte	$9C
02632 08A7                        8E            .byte	$8E
02633 08A8                        8F            .byte	$8F
02634 08A9                        28            .byte	$28
02635 08AA                        1F            .byte	$1F
02636 08AB                        96            .byte	$96
02637 08AC                        B9            .byte	$B9
02638 08AD                        A3            .byte	$A3
02639                                           ! 733  0xff,
02640 08AE                        FF            .byte	$FF
02641                                           ! 734  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08AF                        00            .byte	0
02643 08B0                        01            .byte	1
02644 08B1                        02            .byte	2
02645 08B2                        03            .byte	3
02646 08B3                        04            .byte	4
02647 08B4                        05            .byte	5
02648 08B5                        14            .byte	$14
02649 08B6                        07            .byte	7
02650                                           ! 735  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08B7                        38            .byte	$38
02652 08B8                        39            .byte	$39
02653 08B9                        3A            .byte	$3A
02654 08BA                        3B            .byte	$3B
02655 08BB                        3C            .byte	$3C
02656 08BC                        3D            .byte	$3D
02657 08BD                        3E            .byte	$3E
02658 08BE                        3F            .byte	$3F
02659                                           ! 736  0x0c, 0x00, 0x0f, 0x08,
02660 08BF                        0C            .byte	$C
02661 08C0                        00            .byte	0
02662 08C1                        0F            .byte	$F
02663 08C2                        08            .byte	8
02664                                           ! 737  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08C3                        00            .byte	0
02666 08C4                        00            .byte	0
02667 08C5                        00            .byte	0
02668 08C6                        00            .byte	0
02669 08C7                        00            .byte	0
02670 08C8                        10            .byte	$10
02671 08C9                        0E            .byte	$E
02672 08CA                        0F            .byte	$F
02673 08CB                        FF            .byte	$FF
02674                                           ! 738 },
02675                                           ! 739 {
02676                                           ! 740  80, 24, 16, 0x00, 0x10,
02677 08CC                        50            .byte	$50
02678 08CD                        18            .byte	$18
02679 08CE                        10            .byte	$10
02680 08CF                        00            .byte	0
02681 08D0                        10            .byte	$10
02682                                           ! 741  0x00, 0x03, 0x00, 0x02,
02683 08D1                        00            .byte	0
02684 08D2                        03            .byte	3
02685 08D3                        00            .byte	0
02686 08D4                        02            .byte	2
02687                                           ! 742  0x66,
02688 08D5                        66            .byte	$66
02689                                           ! 743  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08D6                        5F            .byte	$5F
02691 08D7                        4F            .byte	$4F
02692 08D8                        50            .byte	$50
02693 08D9                        82            .byte	$82
02694 08DA                        55            .byte	$55
02695 08DB                        81            .byte	$81
02696 08DC                        BF            .byte	$BF
02697 08DD                        1F            .byte	$1F
02698                                           ! 744  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02699 08DE                        00            .byte	0
02700 08DF                        4F            .byte	$4F
02701 08E0                        0D            .byte	$D
02702 08E1                        0E            .byte	$E
02703 08E2                        00            .byte	0
02704 08E3                        00            .byte	0
02705 08E4                        00            .byte	0
02706 08E5                        00            .byte	0
02707                                           ! 745  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02708 08E6                        9C            .byte	$9C
02709 08E7                        8E            .byte	$8E
02710 08E8                        8F            .byte	$8F
02711 08E9                        28            .byte	$28
02712 08EA                        0F            .byte	$F
02713 08EB                        96            .byte	$96
02714 08EC                        B9            .byte	$B9
02715 08ED                        A3            .byte	$A3
02716                                           ! 746  0xff,
02717 08EE                        FF            .byte	$FF
02718                                           ! 747  0x00, 0x08, 0x08,
02719 08EF                        00            .byte	0
02720 08F0                        08            .byte	8
02721                                           ! 747  0x08, 0x08, 0x08, 0x08, 0x08,
02722 08F1                        08            .byte	8
02723 08F2                        08            .byte	8
02724 08F3                        08            .byte	8
02725 08F4                        08            .byte	8
02726 08F5                        08            .byte	8
02727 08F6                        08            .byte	8
02728                                           ! 748  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 08F7                        10            .byte	$10
02730 08F8                        18            .byte	$18
02731 08F9                        18            .byte	$18
02732 08FA                        18            .byte	$18
02733 08FB                        18            .byte	$18
02734 08FC                        18            .byte	$18
02735 08FD                        18            .byte	$18
02736 08FE                        18            .byte	$18
02737                                           ! 749  0x0e, 0x00, 0x0f, 0x08,
02738 08FF                        0E            .byte	$E
02739 0900                        00            .byte	0
02740 0901                        0F            .byte	$F
02741 0902                        08            .byte	8
02742                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0903                        00            .byte	0
02744 0904                        00            .byte	0
02745 0905                        00            .byte	0
02746 0906                        00            .byte	0
02747 0907                        00            .byte	0
02748 0908                        10            .byte	$10
02749 0909                        0A            .byte	$A
02750 090A                        0F            .byte	$F
02751 090B                        FF            .byte	$FF
02752                                           ! 751 },
02753                                           ! 752 {
02754                                           ! 753  80, 29, 16, 0x00, 0x00,
02755 090C                        50            .byte	$50
02756 090D                        1D            .byte	$1D
02757 090E                        10            .byte	$10
02758 090F                        00            .byte	0
02759 0910                        00            .byte	0
02760                                           ! 754  0x01, 0x0f, 0x00, 0x06,
02761 0911                        01            .byte	1
02762 0912                        0F            .byte	$F
02763 0913                        00            .byte	0
02764 0914                        06            .byte	6
02765                                           ! 755  0xe3,
02766 0915                        E3            .byte	$E3
02767                                           ! 756  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 0916                        5F            .byte	$5F
02769 0917                        4F            .byte	$4F
02770 0918                        50            .byte	$50
02771 0919                        82            .byte	$82
02772 091A                        54            .byte	$54
02773 091B                        80            .byte	$80
02774 091C                        0B            .byte	$B
02775 091D                        3E            .byte	$3E
02776                                           ! 757  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 091E                        00            .byte	0
02778 091F                        40            .byte	$40
02779 0920                        00            .byte	0
02780 0921                        00            .byte	0
02781 0922                        00            .byte	0
02782 0923                        00            .byte	0
02783 0924                        00            .byte	0
02784 0925                        00            .byte	0
02785                                           ! 758  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 0926                        EA            .byte	$EA
02787 0927                        8C            .byte	$8C
02788 0928                        DF            .byte	$DF
02789 0929                        28            .byte	$28
02790 092A                        00            .byte	0
02791 092B                        E7            .byte	$E7
02792 092C                        04            .byte	4
02793 092D                        E3            .byte	$E3
02794                                           ! 759  0xff,
02795 092E                        FF            .byte	$FF
02796                                           ! 760  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 092F                        00            .byte	0
02798 0930                        3F            .byte	$3F
02799 0931                        00            .byte	0
02800 0932                        3F            .byte	$3F
02801 0933                        00            .byte	0
02802 0934                        3F            .byte	$3F
02803 0935                        00            .byte	0
02804 0936                        3F            .byte	$3F
02805                                           ! 761  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 0937                        00            .byte	0
02807 0938                        3F            .byte	$3F
02808 0939                        00            .byte	0
02809 093A                        3F            .byte	$3F
02810 093B                        00            .byte	0
02811 093C                        3F            .byte	$3F
02812 093D                        00            .byte	0
02813 093E                        3F            .byte	$3F
02814                                           ! 762  0x01, 0x00, 0x0f, 0x00,
02815 093F                        01            .byte	1
02816 0940                        00            .byte	0
02817 0941                        0F            .byte	$F
02818 0942                        00            .byte	0
02819                                           ! 763  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0943                        00            .byte	0
02821 0944                        00            .byte	0
02822 0945                        00            .byte	0
02823 0946                        00            .byte	0
02824 0947                        00            .byte	0
02825 0948                        00            .byte	0
02826 0949                        05            .byte	5
02827 094A                        0F            .byte	$F
02828 094B                        FF            .byte	$FF
02829                                           ! 764 },
02830                                           ! 765 {
02831                                           ! 766  80, 29, 16, 0x00, 0x00,
02832 094C                        50            .byte	$50
02833 094D                        1D            .byte	$1D
02834 094E                        10            .byte	$10
02835 094F                        00            .byte	0
02836 0950                        00            .byte	0
02837                                           ! 767  0x01, 0x0f, 0x00, 0x06,
02838 0951                        01            .byte	1
02839 0952                        0F            .byte	$F
02840 0953                        00            .byte	0
02841 0954                        06            .byte	6
02842                                           ! 768  0xe3,
02843 0955                        E3            .byte	$E3
02844                                           ! 769  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 0956                        5F            .byte	$5F
02846 0957                        4F            .byte	$4F
02847 0958                        50            .byte	$50
02848 0959                        82            .byte	$82
02849 095A                        54            .byte	$54
02850 095B                        80            .byte	$80
02851 095C                        0B            .byte	$B
02852 095D                        3E            .byte	$3E
02853                                           ! 770  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 095E                        00            .byte	0
02855 095F                        40            .byte	$40
02856 0960                        00            .byte	0
02857 0961                        00            .byte	0
02858 0962                        00            .byte	0
02859 0963                        00            .byte	0
02860 0964                        00            .byte	0
02861 0965                        00            .byte	0
02862                                           ! 771  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 0966                        EA            .byte	$EA
02864 0967                        8C            .byte	$8C
02865 0968                        DF            .byte	$DF
02866 0969                        28            .byte	$28
02867 096A                        00            .byte	0
02868 096B                        E7            .byte	$E7
02869 096C                        04            .byte	4
02870 096D                        E3            .byte	$E3
02871                                           ! 772  0xff,
02872 096E                        FF            .byte	$FF
02873                                           ! 773  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 096F                        00            .byte	0
02875 0970                        01            .byte	1
02876 0971                        02            .byte	2
02877 0972                        03            .byte	3
02878 0973                        04            .byte	4
02879 0974                        05            .byte	5
02880 0975                        14            .byte	$14
02881 0976                        07            .byte	7
02882                                           ! 774  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 0977                        38            .byte	$38
02884 0978                        39            .byte	$39
02885 0979                        3A            .byte	$3A
02886 097A                        3B            .byte	$3B
02887 097B                        3C            .byte	$3C
02888 097C                        3D            .byte	$3D
02889 097D                        3E            .byte	$3E
02890 097E                        3F            .byte	$3F
02891                                           ! 775  0x01, 0x00, 0x0f, 0x00,
02892 097F                        01            .byte	1
02893 0980                        00            .byte	0
02894 0981                        0F            .byte	$F
02895 0982                        00            .byte	0
02896                                           ! 776  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0983                        00            .byte	0
02898 0984                        00            .byte	0
02899 0985                        00            .byte	0
02900 0986                        00            .byte	0
02901 0987                        00            .byte	0
02902 0988                        00            .byte	0
02903 0989                        05            .byte	5
02904 098A                        0F            .byte	$F
02905 098B                        FF            .byte	$FF
02906                                           ! 777 },
02907                                           ! 778 {
02908                                           ! 779  40, 24, 8, 0x00, 0x00,
02909 098C                        28            .byte	$28
02910 098D                        18            .byte	$18
02911 098E                        08            .byte	8
02912 098F                        00            .byte	0
02913 0990                        00            .byte	0
02914                                           ! 780  0x01, 0x0f, 0x00, 0x0e,
02915 0991                        01            .byte	1
02916 0992                        0F            .byte	$F
02917 0993                        00            .byte	0
02918 0994                        0E            .byte	$E
02919                                           ! 781  0x63,
02920 0995                        63            .byte	$63
02921                                           ! 782  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 0996                        5F            .byte	$5F
02923 0997                        4F            .byte	$4F
02924 0998                        50            .byte	$50
02925 0999                        82            .byte	$82
02926 099A                        54            .byte	$54
02927 099B                        80            .byte	$80
02928 099C                        BF            .byte	$BF
02929 099D                        1F            .byte	$1F
02930                                           ! 783  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 099E                        00            .byte	0
02932 099F                        41            .byte	$41
02933 09A0                        00            .byte	0
02934 09A1                        00            .byte	0
02935 09A2                        00            .byte	0
02936 09A3                        00            .byte	0
02937 09A4                        00            .byte	0
02938 09A5                        00            .byte	0
02939                                           ! 784  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09A6                        9C            .byte	$9C
02941 09A7                        8E            .byte	$8E
02942 09A8                        8F            .byte	$8F
02943 09A9                        28            .byte	$28
02944 09AA                        40            .byte	$40
02945 09AB                        96            .byte	$96
02946 09AC                        B9            .byte	$B9
02947 09AD                        A3            .byte	$A3
02948                                           ! 785  0xff,
02949 09AE                        FF            .byte	$FF
02950                                           ! 786  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09AF                        00            .byte	0
02952 09B0                        01            .byte	1
02953 09B1                        02            .byte	2
02954 09B2                        03            .byte	3
02955 09B3                        04            .byte	4
02956 09B4                        05            .byte	5
02957 09B5                        06            .byte	6
02958 09B6                        07            .byte	7
02959                                           ! 787  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09B7                        08            .byte	8
02961 09B8                        09            .byte	9
02962 09B9                        0A            .byte	$A
02963 09BA                        0B            .byte	$B
02964 09BB                        0C            .byte	$C
02965 09BC                        0D            .byte	$D
02966 09BD                        0E            .byte	$E
02967 09BE                        0F            .byte	$F
02968                                           ! 788  0x41, 0x00, 0x0f, 0x00,
02969 09BF                        41            .byte	$41
02970 09C0                        00            .byte	0
02971 09C1                        0F            .byte	$F
02972 09C2                        00            .byte	0
02973                                           ! 789  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09C3                        00            .byte	0
02975 09C4                        00            .byte	0
02976 09C5                        00            .byte	0
02977 09C6                        00            .byte	0
02978 09C7                        00            .byte	0
02979 09C8                        40            .byte	$40
02980 09C9                        05            .byte	5
02981 09CA                        0F            .byte	$F
02982 09CB                        FF            .byte	$FF
02983                                           ! 790 },
02984                                           ! 791 {
02985                                           ! 792  100, 36, 16, 0x00, 0x00,
02986 09CC                        64            .byte	$64
02987 09CD                        24            .byte	$24
02988 09CE                        10            .byte	$10
02989 09CF                        00            .byte	0
02990 09D0                        00            .byte	0
02991                                           ! 793  0x01, 0x0f, 0x00, 0x06,
02992 09D1                        01            .byte	1
02993 09D2                        0F            .byte	$F
02994 09D3                        00            .byte	0
02995 09D4                        06            .byte	6
02996                                           ! 794  0xe3,
02997 09D5                        E3            .byte	$E3
02998                                           ! 795  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09D6                        7F            .byte	$7F
03000 09D7                        63            .byte	$63
03001 09D8                        63            .byte	$63
03002 09D9                        83            .byte	$83
03003 09DA                        6B            .byte	$6B
03004 09DB                        1B            .byte	$1B
03005 09DC                        72            .byte	$72
03006 09DD                        F0            .byte	$F0
03007                                           ! 796  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09DE                        00            .byte	0
03009 09DF                        60            .byte	$60
03010 09E0                        00            .byte	0
03011 09E1                        00            .byte	0
03012 09E2                        00            .byte	0
03013 09E3                        00            .byte	0
03014 09E4                        00            .byte	0
03015 09E5                        00            .byte	0
03016                                           ! 797  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09E6                        59            .byte	$59
03018 09E7                        8D            .byte	$8D
03019 09E8                        57            .byte	$57
03020 09E9                        32            .byte	$32
03021 09EA                        00            .byte	0
03022 09EB                        57            .byte	$57
03023 09EC                        73            .byte	$73
03024 09ED                        E3            .byte	$E3
03025                                           ! 798  0xff,
03026 09EE                        FF            .byte	$FF
03027                                           ! 799  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09EF                        00            .byte	0
03029 09F0                        01            .byte	1
03030 09F1                        02            .byte	2
03031 09F2                        03            .byte	3
03032 09F3                        04            .byte	4
03033 09F4                        05            .byte	5
03034 09F5                        14            .byte	$14
03035 09F6                        07            .byte	7
03036                                           ! 800  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 09F7                        38            .byte	$38
03038 09F8                        39            .byte	$39
03039 09F9                        3A            .byte	$3A
03040 09FA                        3B            .byte	$3B
03041 09FB                        3C            .byte	$3C
03042 09FC                        3D            .byte	$3D
03043 09FD                        3E            .byte	$3E
03044 09FE                        3F            .byte	$3F
03045                                           ! 801  0x01, 0x00, 0x0f, 0x00,
03046 09FF                        01            .byte	1
03047 0A00                        00            .byte	0
03048 0A01                        0F            .byte	$F
03049 0A02                        00            .byte	0
03050                                           ! 802  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A03                        00            .byte	0
03052 0A04                        00            .byte	0
03053 0A05                        00            .byte	0
03054 0A06                        00            .byte	0
03055 0A07                        00            .byte	0
03056 0A08                        00            .byte	0
03057 0A09                        05            .byte	5
03058 0A0A                        0F            .byte	$F
03059 0A0B                        FF            .byte	$FF
03060                                           ! 803 },
03061                                           ! 804 };
03062                                           !BCC_EOS
03063                                           ! 805 static Bit8u palette0[63+1][3]=
03064                                           ! 806 {
03065                       00000A0C            _palette0:
03066                                           ! 807   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A0C                        00            .byte	0
03068 0A0D                        00            .byte	0
03069 0A0E                        00            .byte	0
03070 0A0F                        00            .byte	0
03071 0A10                        00            .byte	0
03072 0A11                        00            .byte	0
03073 0A12                        00            .byte	0
03074 0A13                        00            .byte	0
03075 0A14                        00            .byte	0
03076 0A15                        00            .byte	0
03077 0A16                        00            .byte	0
03078 0A17                        00            .byte	0
03079 0A18                        00            .byte	0
03080 0A19                        00            .byte	0
03081 0A1A                        00            .byte	0
03082 0A1B                        00            .byte	0
03083 0A1C                        00            .byte	0
03084 0A1D                        00            .byte	0
03085 0A1E                        00            .byte	0
03086 0A1F                        00            .byte	0
03087 0A20                        00            .byte	0
03088 0A21                        00            .byte	0
03089 0A22                        00            .byte	0
03090 0A23                        00            .byte	0
03091                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03092 0A24                        2A            .byte	$2A
03093 0A25                        2A            .byte	$2A
03094 0A26                        2A            .byte	$2A
03095 0A27                        2A            .byte	$2A
03096 0A28                        2A            .byte	$2A
03097 0A29                        2A            .byte	$2A
03098 0A2A                        2A            .byte	$2A
03099 0A2B                        2A            .byte	$2A
03100 0A2C                        2A            .byte	$2A
03101 0A2D                        2A            .byte	$2A
03102 0A2E                        2A            .byte	$2A
03103 0A2F                        2A            .byte	$2A
03104 0A30                        2A            .byte	$2A
03105 0A31                        2A            .byte	$2A
03106 0A32                        2A            .byte	$2A
03107 0A33                        2A            .byte	$2A
03108 0A34                        2A            .byte	$2A
03109 0A35                        2A            .byte	$2A
03110 0A36                        2A            .byte	$2A
03111 0A37                        2A            .byte	$2A
03112 0A38                        2A            .byte	$2A
03113 0A39                        2A            .byte	$2A
03114 0A3A                        2A            .byte	$2A
03115 0A3B                        2A            .byte	$2A
03116                                           ! 809   0x2a,0x2a,
03117 0A3C                        2A            .byte	$2A
03118                                           ! 809 0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03119 0A3D                        2A            .byte	$2A
03120 0A3E                        2A            .byte	$2A
03121 0A3F                        2A            .byte	$2A
03122 0A40                        2A            .byte	$2A
03123 0A41                        2A            .byte	$2A
03124 0A42                        2A            .byte	$2A
03125 0A43                        2A            .byte	$2A
03126 0A44                        2A            .byte	$2A
03127 0A45                        2A            .byte	$2A
03128 0A46                        2A            .byte	$2A
03129 0A47                        2A            .byte	$2A
03130 0A48                        2A            .byte	$2A
03131 0A49                        2A            .byte	$2A
03132 0A4A                        2A            .byte	$2A
03133 0A4B                        2A            .byte	$2A
03134 0A4C                        2A            .byte	$2A
03135 0A4D                        2A            .byte	$2A
03136 0A4E                        2A            .byte	$2A
03137 0A4F                        2A            .byte	$2A
03138 0A50                        2A            .byte	$2A
03139 0A51                        2A            .byte	$2A
03140 0A52                        2A            .byte	$2A
03141 0A53                        2A            .byte	$2A
03142                                           ! 810   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A54                        3F            .byte	$3F
03144 0A55                        3F            .byte	$3F
03145 0A56                        3F            .byte	$3F
03146 0A57                        3F            .byte	$3F
03147 0A58                        3F            .byte	$3F
03148 0A59                        3F            .byte	$3F
03149 0A5A                        3F            .byte	$3F
03150 0A5B                        3F            .byte	$3F
03151 0A5C                        3F            .byte	$3F
03152 0A5D                        3F            .byte	$3F
03153 0A5E                        3F            .byte	$3F
03154 0A5F                        3F            .byte	$3F
03155 0A60                        3F            .byte	$3F
03156 0A61                        3F            .byte	$3F
03157 0A62                        3F            .byte	$3F
03158 0A63                        3F            .byte	$3F
03159 0A64                        3F            .byte	$3F
03160 0A65                        3F            .byte	$3F
03161 0A66                        3F            .byte	$3F
03162 0A67                        3F            .byte	$3F
03163 0A68                        3F            .byte	$3F
03164 0A69                        3F            .byte	$3F
03165 0A6A                        3F            .byte	$3F
03166 0A6B                        3F            .byte	$3F
03167                                           ! 811   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A6C                        00            .byte	0
03169 0A6D                        00            .byte	0
03170 0A6E                        00            .byte	0
03171 0A6F                        00            .byte	0
03172 0A70                        00            .byte	0
03173 0A71                        00            .byte	0
03174 0A72                        00            .byte	0
03175 0A73                        00            .byte	0
03176 0A74                        00            .byte	0
03177 0A75                        00            .byte	0
03178 0A76                        00            .byte	0
03179 0A77                        00            .byte	0
03180 0A78                        00            .byte	0
03181 0A79                        00            .byte	0
03182 0A7A                        00            .byte	0
03183 0A7B                        00            .byte	0
03184 0A7C                        00            .byte	0
03185 0A7D                        00            .byte	0
03186 0A7E                        00            .byte	0
03187 0A7F                        00            .byte	0
03188 0A80                        00            .byte	0
03189 0A81                        00            .byte	0
03190 0A82                        00            .byte	0
03191 0A83                        00            .byte	0
03192                                           ! 812   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A84                        2A            .byte	$2A
03194 0A85                        2A            .byte	$2A
03195 0A86                        2A            .byte	$2A
03196 0A87                        2A            .byte	$2A
03197 0A88                        2A            .byte	$2A
03198 0A89                        2A            .byte	$2A
03199 0A8A                        2A            .byte	$2A
03200 0A8B                        2A            .byte	$2A
03201 0A8C                        2A            .byte	$2A
03202 0A8D                        2A            .byte	$2A
03203 0A8E                        2A            .byte	$2A
03204 0A8F                        2A            .byte	$2A
03205 0A90                        2A            .byte	$2A
03206 0A91                        2A            .byte	$2A
03207 0A92                        2A            .byte	$2A
03208 0A93                        2A            .byte	$2A
03209 0A94                        2A            .byte	$2A
03210 0A95                        2A            .byte	$2A
03211 0A96                        2A            .byte	$2A
03212 0A97                        2A            .byte	$2A
03213 0A98                        2A            .byte	$2A
03214 0A99                        2A            .byte	$2A
03215 0A9A                        2A            .byte	$2A
03216 0A9B                        2A            .byte	$2A
03217                                           ! 813   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0A9C                        2A            .byte	$2A
03219 0A9D                        2A            .byte	$2A
03220 0A9E                        2A            .byte	$2A
03221 0A9F                        2A            .byte	$2A
03222 0AA0                        2A            .byte	$2A
03223 0AA1                        2A            .byte	$2A
03224 0AA2                        2A            .byte	$2A
03225 0AA3                        2A            .byte	$2A
03226 0AA4                        2A            .byte	$2A
03227 0AA5                        2A            .byte	$2A
03228 0AA6                        2A            .byte	$2A
03229 0AA7                        2A            .byte	$2A
03230 0AA8                        2A            .byte	$2A
03231 0AA9                        2A            .byte	$2A
03232 0AAA                        2A            .byte	$2A
03233 0AAB                        2A            .byte	$2A
03234 0AAC                        2A            .byte	$2A
03235 0AAD                        2A            .byte	$2A
03236 0AAE                        2A            .byte	$2A
03237 0AAF                        2A            .byte	$2A
03238 0AB0                        2A            .byte	$2A
03239 0AB1                        2A            .byte	$2A
03240 0AB2                        2A            .byte	$2A
03241 0AB3                        2A            .byte	$2A
03242                                           ! 814   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AB4                        3F            .byte	$3F
03244 0AB5                        3F            .byte	$3F
03245 0AB6                        3F            .byte	$3F
03246 0AB7                        3F            .byte	$3F
03247 0AB8                        3F            .byte	$3F
03248 0AB9                        3F            .byte	$3F
03249 0ABA                        3F            .byte	$3F
03250 0ABB                        3F            .byte	$3F
03251 0ABC                        3F            .byte	$3F
03252 0ABD                        3F            .byte	$3F
03253 0ABE                        3F            .byte	$3F
03254 0ABF                        3F            .byte	$3F
03255 0AC0                        3F            .byte	$3F
03256 0AC1                        3F            .byte	$3F
03257 0AC2                        3F            .byte	$3F
03258 0AC3                        3F            .byte	$3F
03259 0AC4                        3F            .byte	$3F
03260 0AC5                        3F            .byte	$3F
03261 0AC6                        3F            .byte	$3F
03262 0AC7                        3F            .byte	$3F
03263 0AC8                        3F            .byte	$3F
03264 0AC9                        3F            .byte	$3F
03265 0ACA                        3F            .byte	$3F
03266                                           ! 815 };
03267 0ACB                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 816 static Bit8u palette1[63+1][3]=
03270                                           ! 817 {
03271                       00000ACC            _palette1:
03272                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0ACC                        00            .byte	0
03274 0ACD                        00            .byte	0
03275 0ACE                        00            .byte	0
03276 0ACF                        00            .byte	0
03277 0AD0                        00            .byte	0
03278 0AD1                        2A            .byte	$2A
03279 0AD2                        00            .byte	0
03280 0AD3                        2A            .byte	$2A
03281 0AD4                        00            .byte	0
03282 0AD5                        00            .byte	0
03283 0AD6                        2A            .byte	$2A
03284 0AD7                        2A            .byte	$2A
03285 0AD8                        2A            .byte	$2A
03286 0AD9                        00            .byte	0
03287 0ADA                        00            .byte	0
03288 0ADB                        2A            .byte	$2A
03289 0ADC                        00            .byte	0
03290 0ADD                        2A            .byte	$2A
03291 0ADE                        2A            .byte	$2A
03292 0ADF                        15            .byte	$15
03293 0AE0                        00            .byte	0
03294 0AE1                        2A            .byte	$2A
03295 0AE2                        2A            .byte	$2A
03296 0AE3                        2A            .byte	$2A
03297                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AE4                        00            .byte	0
03299 0AE5                        00            .byte	0
03300 0AE6                        00            .byte	0
03301 0AE7                        00            .byte	0
03302 0AE8                        00            .byte	0
03303 0AE9                        2A            .byte	$2A
03304 0AEA                        00            .byte	0
03305 0AEB                        2A            .byte	$2A
03306 0AEC                        00            .byte	0
03307 0AED                        00            .byte	0
03308 0AEE                        2A            .byte	$2A
03309 0AEF                        2A            .byte	$2A
03310 0AF0                        2A            .byte	$2A
03311 0AF1                        00            .byte	0
03312 0AF2                        00            .byte	0
03313 0AF3                        2A            .byte	$2A
03314 0AF4                        00            .byte	0
03315 0AF5                        2A            .byte	$2A
03316 0AF6                        2A            .byte	$2A
03317 0AF7                        15            .byte	$15
03318 0AF8                        00            .byte	0
03319 0AF9                        2A            .byte	$2A
03320 0AFA                        2A            .byte	$2A
03321 0AFB                        2A            .byte	$2A
03322                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0AFC                        15            .byte	$15
03324 0AFD                        15            .byte	$15
03325 0AFE                        15            .byte	$15
03326 0AFF                        15            .byte	$15
03327 0B00                        15            .byte	$15
03328 0B01                        3F            .byte	$3F
03329 0B02                        15            .byte	$15
03330 0B03                        3F            .byte	$3F
03331 0B04                        15            .byte	$15
03332 0B05                        15            .byte	$15
03333 0B06                        3F            .byte	$3F
03334 0B07                        3F            .byte	$3F
03335 0B08                        3F            .byte	$3F
03336 0B09                        15            .byte	$15
03337 0B0A                        15            .byte	$15
03338 0B0B                        3F            .byte	$3F
03339 0B0C                        15            .byte	$15
03340 0B0D                        3F            .byte	$3F
03341 0B0E                        3F            .byte	$3F
03342 0B0F                        3F            .byte	$3F
03343 0B10                        15            .byte	$15
03344 0B11                        3F            .byte	$3F
03345 0B12                        3F            .byte	$3F
03346 0B13                        3F            .byte	$3F
03347                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B14                        15            .byte	$15
03349 0B15                        15            .byte	$15
03350 0B16                        15            .byte	$15
03351 0B17                        15            .byte	$15
03352 0B18                        15            .byte	$15
03353 0B19                        3F            .byte	$3F
03354 0B1A                        15            .byte	$15
03355 0B1B                        3F            .byte	$3F
03356 0B1C                        15            .byte	$15
03357 0B1D                        15            .byte	$15
03358 0B1E                        3F            .byte	$3F
03359 0B1F                        3F            .byte	$3F
03360 0B20                        3F            .byte	$3F
03361 0B21                        15            .byte	$15
03362 0B22                        15            .byte	$15
03363 0B23                        3F            .byte	$3F
03364 0B24                        15            .byte	$15
03365 0B25                        3F            .byte	$3F
03366 0B26                        3F            .byte	$3F
03367 0B27                        3F            .byte	$3F
03368 0B28                        15            .byte	$15
03369 0B29                        3F            .byte	$3F
03370 0B2A                        3F            .byte	$3F
03371 0B2B                        3F            .byte	$3F
03372                                           ! 822   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B2C                        00            .byte	0
03374 0B2D                        00            .byte	0
03375 0B2E                        00            .byte	0
03376 0B2F                        00            .byte	0
03377 0B30                        00            .byte	0
03378 0B31                        2A            .byte	$2A
03379 0B32                        00            .byte	0
03380 0B33                        2A            .byte	$2A
03381 0B34                        00            .byte	0
03382 0B35                        00            .byte	0
03383 0B36                        2A            .byte	$2A
03384 0B37                        2A            .byte	$2A
03385 0B38                        2A            .byte	$2A
03386 0B39                        00            .byte	0
03387 0B3A                        00            .byte	0
03388 0B3B                        2A            .byte	$2A
03389 0B3C                        00            .byte	0
03390 0B3D                        2A            .byte	$2A
03391 0B3E                        2A            .byte	$2A
03392 0B3F                        15            .byte	$15
03393 0B40                        00            .byte	0
03394 0B41                        2A            .byte	$2A
03395 0B42                        2A            .byte	$2A
03396 0B43                        2A            .byte	$2A
03397                                           ! 823   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B44                        00            .byte	0
03399 0B45                        00            .byte	0
03400 0B46                        00            .byte	0
03401 0B47                        00            .byte	0
03402 0B48                        00            .byte	0
03403 0B49                        2A            .byte	$2A
03404 0B4A                        00            .byte	0
03405 0B4B                        2A            .byte	$2A
03406 0B4C                        00            .byte	0
03407 0B4D                        00            .byte	0
03408 0B4E                        2A            .byte	$2A
03409 0B4F                        2A            .byte	$2A
03410 0B50                        2A            .byte	$2A
03411 0B51                        00            .byte	0
03412 0B52                        00            .byte	0
03413 0B53                        2A            .byte	$2A
03414 0B54                        00            .byte	0
03415 0B55                        2A            .byte	$2A
03416 0B56                        2A            .byte	$2A
03417 0B57                        15            .byte	$15
03418 0B58                        00            .byte	0
03419 0B59                        2A            .byte	$2A
03420 0B5A                        2A            .byte	$2A
03421 0B5B                        2A            .byte	$2A
03422                                           ! 824   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B5C                        15            .byte	$15
03424 0B5D                        15            .byte	$15
03425 0B5E                        15            .byte	$15
03426 0B5F                        15            .byte	$15
03427 0B60                        15            .byte	$15
03428 0B61                        3F            .byte	$3F
03429 0B62                        15            .byte	$15
03430 0B63                        3F            .byte	$3F
03431 0B64                        15            .byte	$15
03432 0B65                        15            .byte	$15
03433 0B66                        3F            .byte	$3F
03434 0B67                        3F            .byte	$3F
03435 0B68                        3F            .byte	$3F
03436 0B69                        15            .byte	$15
03437 0B6A                        15            .byte	$15
03438 0B6B                        3F            .byte	$3F
03439 0B6C                        15            .byte	$15
03440 0B6D                        3F            .byte	$3F
03441 0B6E                        3F            .byte	$3F
03442 0B6F                        3F            .byte	$3F
03443 0B70                        15            .byte	$15
03444 0B71                        3F            .byte	$3F
03445 0B72                        3F            .byte	$3F
03446 0B73                        3F            .byte	$3F
03447                                           ! 825   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B74                        15            .byte	$15
03449 0B75                        15            .byte	$15
03450 0B76                        15            .byte	$15
03451 0B77                        15            .byte	$15
03452 0B78                        15            .byte	$15
03453 0B79                        3F            .byte	$3F
03454 0B7A                        15            .byte	$15
03455 0B7B                        3F            .byte	$3F
03456 0B7C                        15            .byte	$15
03457 0B7D                        15            .byte	$15
03458 0B7E                        3F            .byte	$3F
03459 0B7F                        3F            .byte	$3F
03460 0B80                        3F            .byte	$3F
03461 0B81                        15            .byte	$15
03462 0B82                        15            .byte	$15
03463 0B83                        3F            .byte	$3F
03464 0B84                        15            .byte	$15
03465 0B85                        3F            .byte	$3F
03466 0B86                        3F            .byte	$3F
03467 0B87                        3F            .byte	$3F
03468 0B88                        15            .byte	$15
03469 0B89                        3F            .byte	$3F
03470 0B8A                        3F            .byte	$3F
03471                                           ! 826 };
03472 0B8B                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 827 static Bit8u palette2[63+1][3]=
03475                                           ! 828 {
03476                       00000B8C            _palette2:
03477                                           ! 829   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03478 0B8C                        00            .byte	0
03479 0B8D                        00            .byte	0
03480 0B8E                        00            .byte	0
03481 0B8F                        00            .byte	0
03482 0B90                        00            .byte	0
03483 0B91                        2A            .byte	$2A
03484 0B92                        00            .byte	0
03485 0B93                        2A            .byte	$2A
03486 0B94                        00            .byte	0
03487 0B95                        00            .byte	0
03488 0B96                        2A            .byte	$2A
03489 0B97                        2A            .byte	$2A
03490 0B98                        2A            .byte	$2A
03491 0B99                        00            .byte	0
03492 0B9A                        00            .byte	0
03493 0B9B                        2A            .byte	$2A
03494 0B9C                        00            .byte	0
03495 0B9D                        2A            .byte	$2A
03496 0B9E                        2A            .byte	$2A
03497 0B9F                        2A            .byte	$2A
03498 0BA0                        00            .byte	0
03499 0BA1                        2A            .byte	$2A
03500 0BA2                        2A            .byte	$2A
03501 0BA3                        2A            .byte	$2A
03502                                           ! 830   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00
03503 0BA4                        00            .byte	0
03504 0BA5                        00            .byte	0
03505 0BA6                        15            .byte	$15
03506 0BA7                        00            .byte	0
03507 0BA8                        00            .byte	0
03508 0BA9                        3F            .byte	$3F
03509                                           ! 830 ,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03510 0BAA                        00            .byte	0
03511 0BAB                        2A            .byte	$2A
03512 0BAC                        15            .byte	$15
03513 0BAD                        00            .byte	0
03514 0BAE                        2A            .byte	$2A
03515 0BAF                        3F            .byte	$3F
03516 0BB0                        2A            .byte	$2A
03517 0BB1                        00            .byte	0
03518 0BB2                        15            .byte	$15
03519 0BB3                        2A            .byte	$2A
03520 0BB4                        00            .byte	0
03521 0BB5                        3F            .byte	$3F
03522 0BB6                        2A            .byte	$2A
03523 0BB7                        2A            .byte	$2A
03524 0BB8                        15            .byte	$15
03525 0BB9                        2A            .byte	$2A
03526 0BBA                        2A            .byte	$2A
03527 0BBB                        3F            .byte	$3F
03528                                           ! 831   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BBC                        00            .byte	0
03530 0BBD                        15            .byte	$15
03531 0BBE                        00            .byte	0
03532 0BBF                        00            .byte	0
03533 0BC0                        15            .byte	$15
03534 0BC1                        2A            .byte	$2A
03535 0BC2                        00            .byte	0
03536 0BC3                        3F            .byte	$3F
03537 0BC4                        00            .byte	0
03538 0BC5                        00            .byte	0
03539 0BC6                        3F            .byte	$3F
03540 0BC7                        2A            .byte	$2A
03541 0BC8                        2A            .byte	$2A
03542 0BC9                        15            .byte	$15
03543 0BCA                        00            .byte	0
03544 0BCB                        2A            .byte	$2A
03545 0BCC                        15            .byte	$15
03546 0BCD                        2A            .byte	$2A
03547 0BCE                        2A            .byte	$2A
03548 0BCF                        3F            .byte	$3F
03549 0BD0                        00            .byte	0
03550 0BD1                        2A            .byte	$2A
03551 0BD2                        3F            .byte	$3F
03552 0BD3                        2A            .byte	$2A
03553                                           ! 832   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BD4                        00            .byte	0
03555 0BD5                        15            .byte	$15
03556 0BD6                        15            .byte	$15
03557 0BD7                        00            .byte	0
03558 0BD8                        15            .byte	$15
03559 0BD9                        3F            .byte	$3F
03560 0BDA                        00            .byte	0
03561 0BDB                        3F            .byte	$3F
03562 0BDC                        15            .byte	$15
03563 0BDD                        00            .byte	0
03564 0BDE                        3F            .byte	$3F
03565 0BDF                        3F            .byte	$3F
03566 0BE0                        2A            .byte	$2A
03567 0BE1                        15            .byte	$15
03568 0BE2                        15            .byte	$15
03569 0BE3                        2A            .byte	$2A
03570 0BE4                        15            .byte	$15
03571 0BE5                        3F            .byte	$3F
03572 0BE6                        2A            .byte	$2A
03573 0BE7                        3F            .byte	$3F
03574 0BE8                        15            .byte	$15
03575 0BE9                        2A            .byte	$2A
03576 0BEA                        3F            .byte	$3F
03577 0BEB                        3F            .byte	$3F
03578                                           ! 833   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BEC                        15            .byte	$15
03580 0BED                        00            .byte	0
03581 0BEE                        00            .byte	0
03582 0BEF                        15            .byte	$15
03583 0BF0                        00            .byte	0
03584 0BF1                        2A            .byte	$2A
03585 0BF2                        15            .byte	$15
03586 0BF3                        2A            .byte	$2A
03587 0BF4                        00            .byte	0
03588 0BF5                        15            .byte	$15
03589 0BF6                        2A            .byte	$2A
03590 0BF7                        2A            .byte	$2A
03591 0BF8                        3F            .byte	$3F
03592 0BF9                        00            .byte	0
03593 0BFA                        00            .byte	0
03594 0BFB                        3F            .byte	$3F
03595 0BFC                        00            .byte	0
03596 0BFD                        2A            .byte	$2A
03597 0BFE                        3F            .byte	$3F
03598 0BFF                        2A            .byte	$2A
03599 0C00                        00            .byte	0
03600 0C01                        3F            .byte	$3F
03601 0C02                        2A            .byte	$2A
03602 0C03                        2A            .byte	$2A
03603                                           ! 834   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C04                        15            .byte	$15
03605 0C05                        00            .byte	0
03606 0C06                        15            .byte	$15
03607 0C07                        15            .byte	$15
03608 0C08                        00            .byte	0
03609 0C09                        3F            .byte	$3F
03610 0C0A                        15            .byte	$15
03611 0C0B                        2A            .byte	$2A
03612 0C0C                        15            .byte	$15
03613 0C0D                        15            .byte	$15
03614 0C0E                        2A            .byte	$2A
03615 0C0F                        3F            .byte	$3F
03616 0C10                        3F            .byte	$3F
03617 0C11                        00            .byte	0
03618 0C12                        15            .byte	$15
03619 0C13                        3F            .byte	$3F
03620 0C14                        00            .byte	0
03621 0C15                        3F            .byte	$3F
03622 0C16                        3F            .byte	$3F
03623 0C17                        2A            .byte	$2A
03624 0C18                        15            .byte	$15
03625 0C19                        3F            .byte	$3F
03626 0C1A                        2A            .byte	$2A
03627 0C1B                        3F            .byte	$3F
03628                                           ! 835   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C1C                        15            .byte	$15
03630 0C1D                        15            .byte	$15
03631 0C1E                        00            .byte	0
03632 0C1F                        15            .byte	$15
03633 0C20                        15            .byte	$15
03634 0C21                        2A            .byte	$2A
03635 0C22                        15            .byte	$15
03636 0C23                        3F            .byte	$3F
03637 0C24                        00            .byte	0
03638 0C25                        15            .byte	$15
03639 0C26                        3F            .byte	$3F
03640 0C27                        2A            .byte	$2A
03641 0C28                        3F            .byte	$3F
03642 0C29                        15            .byte	$15
03643 0C2A                        00            .byte	0
03644 0C2B                        3F            .byte	$3F
03645 0C2C                        15            .byte	$15
03646 0C2D                        2A            .byte	$2A
03647 0C2E                        3F            .byte	$3F
03648 0C2F                        3F            .byte	$3F
03649 0C30                        00            .byte	0
03650 0C31                        3F            .byte	$3F
03651 0C32                        3F            .byte	$3F
03652 0C33                        2A            .byte	$2A
03653                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C34                        15            .byte	$15
03655 0C35                        15            .byte	$15
03656 0C36                        15            .byte	$15
03657 0C37                        15            .byte	$15
03658 0C38                        15            .byte	$15
03659 0C39                        3F            .byte	$3F
03660 0C3A                        15            .byte	$15
03661 0C3B                        3F            .byte	$3F
03662 0C3C                        15            .byte	$15
03663 0C3D                        15            .byte	$15
03664 0C3E                        3F            .byte	$3F
03665 0C3F                        3F            .byte	$3F
03666 0C40                        3F            .byte	$3F
03667 0C41                        15            .byte	$15
03668 0C42                        15            .byte	$15
03669 0C43                        3F            .byte	$3F
03670 0C44                        15            .byte	$15
03671 0C45                        3F            .byte	$3F
03672 0C46                        3F            .byte	$3F
03673 0C47                        3F            .byte	$3F
03674 0C48                        15            .byte	$15
03675 0C49                        3F            .byte	$3F
03676 0C4A                        3F            .byte	$3F
03677                                           ! 837 };
03678 0C4B                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 838 static Bit8u palette3[256][3]=
03681                                           ! 839 {
03682                       00000C4C            _palette3:
03683                                           ! 840   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C4C                        00            .byte	0
03685 0C4D                        00            .byte	0
03686 0C4E                        00            .byte	0
03687 0C4F                        00            .byte	0
03688 0C50                        00            .byte	0
03689 0C51                        2A            .byte	$2A
03690 0C52                        00            .byte	0
03691 0C53                        2A            .byte	$2A
03692 0C54                        00            .byte	0
03693 0C55                        00            .byte	0
03694 0C56                        2A            .byte	$2A
03695 0C57                        2A            .byte	$2A
03696 0C58                        2A            .byte	$2A
03697 0C59                        00            .byte	0
03698 0C5A                        00            .byte	0
03699 0C5B                        2A            .byte	$2A
03700 0C5C                        00            .byte	0
03701 0C5D                        2A            .byte	$2A
03702 0C5E                        2A            .byte	$2A
03703 0C5F                        15            .byte	$15
03704 0C60                        00            .byte	0
03705 0C61                        2A            .byte	$2A
03706 0C62                        2A            .byte	$2A
03707 0C63                        2A            .byte	$2A
03708                                           ! 841   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C64                        15            .byte	$15
03710 0C65                        15            .byte	$15
03711 0C66                        15            .byte	$15
03712 0C67                        15            .byte	$15
03713 0C68                        15            .byte	$15
03714 0C69                        3F            .byte	$3F
03715 0C6A                        15            .byte	$15
03716 0C6B                        3F            .byte	$3F
03717 0C6C                        15            .byte	$15
03718 0C6D                        15            .byte	$15
03719 0C6E                        3F            .byte	$3F
03720 0C6F                        3F            .byte	$3F
03721 0C70                        3F            .byte	$3F
03722 0C71                        15            .byte	$15
03723 0C72                        15            .byte	$15
03724 0C73                        3F            .byte	$3F
03725 0C74                        15            .byte	$15
03726 0C75                        3F            .byte	$3F
03727 0C76                        3F            .byte	$3F
03728 0C77                        3F            .byte	$3F
03729 0C78                        15            .byte	$15
03730 0C79                        3F            .byte	$3F
03731 0C7A                        3F            .byte	$3F
03732 0C7B                        3F            .byte	$3F
03733                                           ! 842   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C7C                        00            .byte	0
03735 0C7D                        00            .byte	0
03736 0C7E                        00            .byte	0
03737 0C7F                        05            .byte	5
03738 0C80                        05            .byte	5
03739 0C81                        05            .byte	5
03740 0C82                        08            .byte	8
03741 0C83                        08            .byte	8
03742 0C84                        08            .byte	8
03743 0C85                        0B            .byte	$B
03744 0C86                        0B            .byte	$B
03745 0C87                        0B            .byte	$B
03746 0C88                        0E            .byte	$E
03747 0C89                        0E            .byte	$E
03748 0C8A                        0E            .byte	$E
03749 0C8B                        11            .byte	$11
03750 0C8C                        11            .byte	$11
03751 0C8D                        11            .byte	$11
03752 0C8E                        14            .byte	$14
03753 0C8F                        14            .byte	$14
03754 0C90                        14            .byte	$14
03755 0C91                        18            .byte	$18
03756 0C92                        18            .byte	$18
03757 0C93                        18            .byte	$18
03758                                           ! 843   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0C94                        1C            .byte	$1C
03760 0C95                        1C            .byte	$1C
03761 0C96                        1C            .byte	$1C
03762 0C97                        20            .byte	$20
03763 0C98                        20            .byte	$20
03764 0C99                        20            .byte	$20
03765 0C9A                        24            .byte	$24
03766 0C9B                        24            .byte	$24
03767 0C9C                        24            .byte	$24
03768 0C9D                        28            .byte	$28
03769 0C9E                        28            .byte	$28
03770 0C9F                        28            .byte	$28
03771 0CA0                        2D            .byte	$2D
03772 0CA1                        2D            .byte	$2D
03773 0CA2                        2D            .byte	$2D
03774 0CA3                        32            .byte	$32
03775 0CA4                        32            .byte	$32
03776 0CA5                        32            .byte	$32
03777 0CA6                        38            .byte	$38
03778 0CA7                        38            .byte	$38
03779 0CA8                        38            .byte	$38
03780 0CA9                        3F            .byte	$3F
03781 0CAA                        3F            .byte	$3F
03782 0CAB                        3F            .byte	$3F
03783                                           ! 844   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CAC                        00            .byte	0
03785 0CAD                        00            .byte	0
03786 0CAE                        3F            .byte	$3F
03787 0CAF                        10            .byte	$10
03788 0CB0                        00            .byte	0
03789 0CB1                        3F            .byte	$3F
03790 0CB2                        1F            .byte	$1F
03791 0CB3                        00            .byte	0
03792 0CB4                        3F            .byte	$3F
03793 0CB5                        2F            .byte	$2F
03794 0CB6                        00            .byte	0
03795 0CB7                        3F            .byte	$3F
03796 0CB8                        3F            .byte	$3F
03797 0CB9                        00            .byte	0
03798 0CBA                        3F            .byte	$3F
03799 0CBB                        3F            .byte	$3F
03800 0CBC                        00            .byte	0
03801 0CBD                        2F            .byte	$2F
03802 0CBE                        3F            .byte	$3F
03803 0CBF                        00            .byte	0
03804 0CC0                        1F            .byte	$1F
03805 0CC1                        3F            .byte	$3F
03806 0CC2                        00            .byte	0
03807 0CC3                        10            .byte	$10
03808                                           ! 845   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CC4                        3F            .byte	$3F
03810 0CC5                        00            .byte	0
03811 0CC6                        00            .byte	0
03812 0CC7                        3F            .byte	$3F
03813 0CC8                        10            .byte	$10
03814 0CC9                        00            .byte	0
03815 0CCA                        3F            .byte	$3F
03816 0CCB                        1F            .byte	$1F
03817 0CCC                        00            .byte	0
03818 0CCD                        3F            .byte	$3F
03819 0CCE                        2F            .byte	$2F
03820 0CCF                        00            .byte	0
03821 0CD0                        3F            .byte	$3F
03822 0CD1                        3F            .byte	$3F
03823 0CD2                        00            .byte	0
03824 0CD3                        2F            .byte	$2F
03825 0CD4                        3F            .byte	$3F
03826 0CD5                        00            .byte	0
03827 0CD6                        1F            .byte	$1F
03828 0CD7                        3F            .byte	$3F
03829 0CD8                        00            .byte	0
03830 0CD9                        10            .byte	$10
03831 0CDA                        3F            .byte	$3F
03832 0CDB                        00            .byte	0
03833                                           ! 846   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CDC                        00            .byte	0
03835 0CDD                        3F            .byte	$3F
03836 0CDE                        00            .byte	0
03837 0CDF                        00            .byte	0
03838 0CE0                        3F            .byte	$3F
03839 0CE1                        10            .byte	$10
03840 0CE2                        00            .byte	0
03841 0CE3                        3F            .byte	$3F
03842 0CE4                        1F            .byte	$1F
03843 0CE5                        00            .byte	0
03844 0CE6                        3F            .byte	$3F
03845 0CE7                        2F            .byte	$2F
03846 0CE8                        00            .byte	0
03847 0CE9                        3F            .byte	$3F
03848 0CEA                        3F            .byte	$3F
03849 0CEB                        00            .byte	0
03850 0CEC                        2F            .byte	$2F
03851 0CED                        3F            .byte	$3F
03852 0CEE                        00            .byte	0
03853 0CEF                        1F            .byte	$1F
03854 0CF0                        3F            .byte	$3F
03855 0CF1                        00            .byte	0
03856 0CF2                        10            .byte	$10
03857 0CF3                        3F            .byte	$3F
03858                                           ! 847   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0CF4                        1F            .byte	$1F
03860 0CF5                        1F            .byte	$1F
03861 0CF6                        3F            .byte	$3F
03862 0CF7                        27            .byte	$27
03863 0CF8                        1F            .byte	$1F
03864 0CF9                        3F            .byte	$3F
03865 0CFA                        2F            .byte	$2F
03866 0CFB                        1F            .byte	$1F
03867 0CFC                        3F            .byte	$3F
03868 0CFD                        37            .byte	$37
03869 0CFE                        1F            .byte	$1F
03870 0CFF                        3F            .byte	$3F
03871 0D00                        3F            .byte	$3F
03872 0D01                        1F            .byte	$1F
03873 0D02                        3F            .byte	$3F
03874 0D03                        3F            .byte	$3F
03875 0D04                        1F            .byte	$1F
03876 0D05                        37            .byte	$37
03877 0D06                        3F            .byte	$3F
03878 0D07                        1F            .byte	$1F
03879 0D08                        2F            .byte	$2F
03880 0D09                        3F            .byte	$3F
03881 0D0A                        1F            .byte	$1F
03882 0D0B                        27            .byte	$27
03883                                           ! 848   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2
03884 0D0C                        3F            .byte	$3F
03885 0D0D                        1F            .byte	$1F
03886 0D0E                        1F            .byte	$1F
03887 0D0F                        3F            .byte	$3F
03888 0D10                        27            .byte	$27
03889 0D11                        1F            .byte	$1F
03890 0D12                        3F            .byte	$3F
03891 0D13                        2F            .byte	$2F
03892 0D14                        1F            .byte	$1F
03893 0D15                        3F            .byte	$3F
03894 0D16                        37            .byte	$37
03895 0D17                        1F            .byte	$1F
03896 0D18                        3F            .byte	$3F
03897 0D19                        3F            .byte	$3F
03898 0D1A                        1F            .byte	$1F
03899 0D1B                        37            .byte	$37
03900 0D1C                        3F            .byte	$3F
03901 0D1D                        1F            .byte	$1F
03902                                           ! 848 f,0x3f,0x1f, 0x27,0x3f,0x1f,
03903 0D1E                        2F            .byte	$2F
03904 0D1F                        3F            .byte	$3F
03905 0D20                        1F            .byte	$1F
03906 0D21                        27            .byte	$27
03907 0D22                        3F            .byte	$3F
03908 0D23                        1F            .byte	$1F
03909                                           ! 849   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D24                        1F            .byte	$1F
03911 0D25                        3F            .byte	$3F
03912 0D26                        1F            .byte	$1F
03913 0D27                        1F            .byte	$1F
03914 0D28                        3F            .byte	$3F
03915 0D29                        27            .byte	$27
03916 0D2A                        1F            .byte	$1F
03917 0D2B                        3F            .byte	$3F
03918 0D2C                        2F            .byte	$2F
03919 0D2D                        1F            .byte	$1F
03920 0D2E                        3F            .byte	$3F
03921 0D2F                        37            .byte	$37
03922 0D30                        1F            .byte	$1F
03923 0D31                        3F            .byte	$3F
03924 0D32                        3F            .byte	$3F
03925 0D33                        1F            .byte	$1F
03926 0D34                        37            .byte	$37
03927 0D35                        3F            .byte	$3F
03928 0D36                        1F            .byte	$1F
03929 0D37                        2F            .byte	$2F
03930 0D38                        3F            .byte	$3F
03931 0D39                        1F            .byte	$1F
03932 0D3A                        27            .byte	$27
03933 0D3B                        3F            .byte	$3F
03934                                           ! 850   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D3C                        2D            .byte	$2D
03936 0D3D                        2D            .byte	$2D
03937 0D3E                        3F            .byte	$3F
03938 0D3F                        31            .byte	$31
03939 0D40                        2D            .byte	$2D
03940 0D41                        3F            .byte	$3F
03941 0D42                        36            .byte	$36
03942 0D43                        2D            .byte	$2D
03943 0D44                        3F            .byte	$3F
03944 0D45                        3A            .byte	$3A
03945 0D46                        2D            .byte	$2D
03946 0D47                        3F            .byte	$3F
03947 0D48                        3F            .byte	$3F
03948 0D49                        2D            .byte	$2D
03949 0D4A                        3F            .byte	$3F
03950 0D4B                        3F            .byte	$3F
03951 0D4C                        2D            .byte	$2D
03952 0D4D                        3A            .byte	$3A
03953 0D4E                        3F            .byte	$3F
03954 0D4F                        2D            .byte	$2D
03955 0D50                        36            .byte	$36
03956 0D51                        3F            .byte	$3F
03957 0D52                        2D            .byte	$2D
03958 0D53                        31            .byte	$31
03959                                           ! 851   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D54                        3F            .byte	$3F
03961 0D55                        2D            .byte	$2D
03962 0D56                        2D            .byte	$2D
03963 0D57                        3F            .byte	$3F
03964 0D58                        31            .byte	$31
03965 0D59                        2D            .byte	$2D
03966 0D5A                        3F            .byte	$3F
03967 0D5B                        36            .byte	$36
03968 0D5C                        2D            .byte	$2D
03969 0D5D                        3F            .byte	$3F
03970 0D5E                        3A            .byte	$3A
03971 0D5F                        2D            .byte	$2D
03972 0D60                        3F            .byte	$3F
03973 0D61                        3F            .byte	$3F
03974 0D62                        2D            .byte	$2D
03975 0D63                        3A            .byte	$3A
03976 0D64                        3F            .byte	$3F
03977 0D65                        2D            .byte	$2D
03978 0D66                        36            .byte	$36
03979 0D67                        3F            .byte	$3F
03980 0D68                        2D            .byte	$2D
03981 0D69                        31            .byte	$31
03982 0D6A                        3F            .byte	$3F
03983 0D6B                        2D            .byte	$2D
03984                                           ! 852   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D6C                        2D            .byte	$2D
03986 0D6D                        3F            .byte	$3F
03987 0D6E                        2D            .byte	$2D
03988 0D6F                        2D            .byte	$2D
03989 0D70                        3F            .byte	$3F
03990 0D71                        31            .byte	$31
03991 0D72                        2D            .byte	$2D
03992 0D73                        3F            .byte	$3F
03993 0D74                        36            .byte	$36
03994 0D75                        2D            .byte	$2D
03995 0D76                        3F            .byte	$3F
03996 0D77                        3A            .byte	$3A
03997 0D78                        2D            .byte	$2D
03998 0D79                        3F            .byte	$3F
03999 0D7A                        3F            .byte	$3F
04000 0D7B                        2D            .byte	$2D
04001 0D7C                        3A            .byte	$3A
04002 0D7D                        3F            .byte	$3F
04003 0D7E                        2D            .byte	$2D
04004 0D7F                        36            .byte	$36
04005 0D80                        3F            .byte	$3F
04006 0D81                        2D            .byte	$2D
04007 0D82                        31            .byte	$31
04008 0D83                        3F            .byte	$3F
04009                                           ! 853   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D84                        00            .byte	0
04011 0D85                        00            .byte	0
04012 0D86                        1C            .byte	$1C
04013 0D87                        07            .byte	7
04014 0D88                        00            .byte	0
04015 0D89                        1C            .byte	$1C
04016 0D8A                        0E            .byte	$E
04017 0D8B                        00            .byte	0
04018 0D8C                        1C            .byte	$1C
04019 0D8D                        15            .byte	$15
04020 0D8E                        00            .byte	0
04021 0D8F                        1C            .byte	$1C
04022 0D90                        1C            .byte	$1C
04023 0D91                        00            .byte	0
04024 0D92                        1C            .byte	$1C
04025 0D93                        1C            .byte	$1C
04026 0D94                        00            .byte	0
04027 0D95                        15            .byte	$15
04028 0D96                        1C            .byte	$1C
04029 0D97                        00            .byte	0
04030 0D98                        0E            .byte	$E
04031 0D99                        1C            .byte	$1C
04032 0D9A                        00            .byte	0
04033 0D9B                        07            .byte	7
04034                                           ! 854   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0D9C                        1C            .byte	$1C
04036 0D9D                        00            .byte	0
04037 0D9E                        00            .byte	0
04038 0D9F                        1C            .byte	$1C
04039 0DA0                        07            .byte	7
04040 0DA1                        00            .byte	0
04041 0DA2                        1C            .byte	$1C
04042 0DA3                        0E            .byte	$E
04043 0DA4                        00            .byte	0
04044 0DA5                        1C            .byte	$1C
04045 0DA6                        15            .byte	$15
04046 0DA7                        00            .byte	0
04047 0DA8                        1C            .byte	$1C
04048 0DA9                        1C            .byte	$1C
04049 0DAA                        00            .byte	0
04050 0DAB                        15            .byte	$15
04051 0DAC                        1C            .byte	$1C
04052 0DAD                        00            .byte	0
04053 0DAE                        0E            .byte	$E
04054 0DAF                        1C            .byte	$1C
04055 0DB0                        00            .byte	0
04056 0DB1                        07            .byte	7
04057 0DB2                        1C            .byte	$1C
04058 0DB3                        00            .byte	0
04059                                           ! 855   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DB4                        00            .byte	0
04061 0DB5                        1C            .byte	$1C
04062 0DB6                        00            .byte	0
04063 0DB7                        00            .byte	0
04064 0DB8                        1C            .byte	$1C
04065 0DB9                        07            .byte	7
04066 0DBA                        00            .byte	0
04067 0DBB                        1C            .byte	$1C
04068 0DBC                        0E            .byte	$E
04069 0DBD                        00            .byte	0
04070 0DBE                        1C            .byte	$1C
04071 0DBF                        15            .byte	$15
04072 0DC0                        00            .byte	0
04073 0DC1                        1C            .byte	$1C
04074 0DC2                        1C            .byte	$1C
04075 0DC3                        00            .byte	0
04076 0DC4                        15            .byte	$15
04077 0DC5                        1C            .byte	$1C
04078 0DC6                        00            .byte	0
04079 0DC7                        0E            .byte	$E
04080 0DC8                        1C            .byte	$1C
04081 0DC9                        00            .byte	0
04082 0DCA                        07            .byte	7
04083 0DCB                        1C            .byte	$1C
04084                                           ! 856   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DCC                        0E            .byte	$E
04086 0DCD                        0E            .byte	$E
04087 0DCE                        1C            .byte	$1C
04088 0DCF                        11            .byte	$11
04089 0DD0                        0E            .byte	$E
04090 0DD1                        1C            .byte	$1C
04091 0DD2                        15            .byte	$15
04092 0DD3                        0E            .byte	$E
04093 0DD4                        1C            .byte	$1C
04094 0DD5                        18            .byte	$18
04095 0DD6                        0E            .byte	$E
04096 0DD7                        1C            .byte	$1C
04097 0DD8                        1C            .byte	$1C
04098 0DD9                        0E            .byte	$E
04099 0DDA                        1C            .byte	$1C
04100 0DDB                        1C            .byte	$1C
04101 0DDC                        0E            .byte	$E
04102 0DDD                        18            .byte	$18
04103 0DDE                        1C            .byte	$1C
04104 0DDF                        0E            .byte	$E
04105 0DE0                        15            .byte	$15
04106 0DE1                        1C            .byte	$1C
04107 0DE2                        0E            .byte	$E
04108 0DE3                        11            .byte	$11
04109                                           ! 857   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DE4                        1C            .byte	$1C
04111 0DE5                        0E            .byte	$E
04112 0DE6                        0E            .byte	$E
04113 0DE7                        1C            .byte	$1C
04114 0DE8                        11            .byte	$11
04115 0DE9                        0E            .byte	$E
04116 0DEA                        1C            .byte	$1C
04117 0DEB                        15            .byte	$15
04118 0DEC                        0E            .byte	$E
04119 0DED                        1C            .byte	$1C
04120 0DEE                        18            .byte	$18
04121 0DEF                        0E            .byte	$E
04122 0DF0                        1C            .byte	$1C
04123 0DF1                        1C            .byte	$1C
04124 0DF2                        0E            .byte	$E
04125 0DF3                        18            .byte	$18
04126 0DF4                        1C            .byte	$1C
04127 0DF5                        0E            .byte	$E
04128 0DF6                        15            .byte	$15
04129 0DF7                        1C            .byte	$1C
04130 0DF8                        0E            .byte	$E
04131 0DF9                        11            .byte	$11
04132 0DFA                        1C            .byte	$1C
04133 0DFB                        0E            .byte	$E
04134                                           ! 858   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0DFC                        0E            .byte	$E
04136 0DFD                        1C            .byte	$1C
04137 0DFE                        0E            .byte	$E
04138 0DFF                        0E            .byte	$E
04139 0E00                        1C            .byte	$1C
04140 0E01                        11            .byte	$11
04141 0E02                        0E            .byte	$E
04142 0E03                        1C            .byte	$1C
04143 0E04                        15            .byte	$15
04144 0E05                        0E            .byte	$E
04145 0E06                        1C            .byte	$1C
04146 0E07                        18            .byte	$18
04147 0E08                        0E            .byte	$E
04148 0E09                        1C            .byte	$1C
04149 0E0A                        1C            .byte	$1C
04150 0E0B                        0E            .byte	$E
04151 0E0C                        18            .byte	$18
04152 0E0D                        1C            .byte	$1C
04153 0E0E                        0E            .byte	$E
04154 0E0F                        15            .byte	$15
04155 0E10                        1C            .byte	$1C
04156 0E11                        0E            .byte	$E
04157 0E12                        11            .byte	$11
04158 0E13                        1C            .byte	$1C
04159                                           ! 859   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E14                        14            .byte	$14
04161 0E15                        14            .byte	$14
04162 0E16                        1C            .byte	$1C
04163 0E17                        16            .byte	$16
04164 0E18                        14            .byte	$14
04165 0E19                        1C            .byte	$1C
04166 0E1A                        18            .byte	$18
04167 0E1B                        14            .byte	$14
04168 0E1C                        1C            .byte	$1C
04169 0E1D                        1A            .byte	$1A
04170 0E1E                        14            .byte	$14
04171 0E1F                        1C            .byte	$1C
04172 0E20                        1C            .byte	$1C
04173 0E21                        14            .byte	$14
04174 0E22                        1C            .byte	$1C
04175 0E23                        1C            .byte	$1C
04176 0E24                        14            .byte	$14
04177 0E25                        1A            .byte	$1A
04178 0E26                        1C            .byte	$1C
04179 0E27                        14            .byte	$14
04180 0E28                        18            .byte	$18
04181 0E29                        1C            .byte	$1C
04182 0E2A                        14            .byte	$14
04183 0E2B                        16            .byte	$16
04184                                           ! 860   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E2C                        1C            .byte	$1C
04186 0E2D                        14            .byte	$14
04187 0E2E                        14            .byte	$14
04188 0E2F                        1C            .byte	$1C
04189 0E30                        16            .byte	$16
04190 0E31                        14            .byte	$14
04191 0E32                        1C            .byte	$1C
04192 0E33                        18            .byte	$18
04193 0E34                        14            .byte	$14
04194 0E35                        1C            .byte	$1C
04195 0E36                        1A            .byte	$1A
04196 0E37                        14            .byte	$14
04197 0E38                        1C            .byte	$1C
04198 0E39                        1C            .byte	$1C
04199 0E3A                        14            .byte	$14
04200 0E3B                        1A            .byte	$1A
04201 0E3C                        1C            .byte	$1C
04202 0E3D                        14            .byte	$14
04203 0E3E                        18            .byte	$18
04204 0E3F                        1C            .byte	$1C
04205 0E40                        14            .byte	$14
04206 0E41                        16            .byte	$16
04207 0E42                        1C            .byte	$1C
04208 0E43                        14            .byte	$14
04209                                           ! 861   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E44                        14            .byte	$14
04211 0E45                        1C            .byte	$1C
04212 0E46                        14            .byte	$14
04213 0E47                        14            .byte	$14
04214 0E48                        1C            .byte	$1C
04215 0E49                        16            .byte	$16
04216 0E4A                        14            .byte	$14
04217 0E4B                        1C            .byte	$1C
04218 0E4C                        18            .byte	$18
04219 0E4D                        14            .byte	$14
04220 0E4E                        1C            .byte	$1C
04221 0E4F                        1A            .byte	$1A
04222 0E50                        14            .byte	$14
04223 0E51                        1C            .byte	$1C
04224 0E52                        1C            .byte	$1C
04225 0E53                        14            .byte	$14
04226 0E54                        1A            .byte	$1A
04227 0E55                        1C            .byte	$1C
04228 0E56                        14            .byte	$14
04229 0E57                        18            .byte	$18
04230 0E58                        1C            .byte	$1C
04231 0E59                        14            .byte	$14
04232 0E5A                        16            .byte	$16
04233 0E5B                        1C            .byte	$1C
04234                                           ! 862   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E5C                        00            .byte	0
04236 0E5D                        00            .byte	0
04237 0E5E                        10            .byte	$10
04238 0E5F                        04            .byte	4
04239 0E60                        00            .byte	0
04240 0E61                        10            .byte	$10
04241 0E62                        08            .byte	8
04242 0E63                        00            .byte	0
04243 0E64                        10            .byte	$10
04244 0E65                        0C            .byte	$C
04245 0E66                        00            .byte	0
04246 0E67                        10            .byte	$10
04247 0E68                        10            .byte	$10
04248 0E69                        00            .byte	0
04249 0E6A                        10            .byte	$10
04250 0E6B                        10            .byte	$10
04251 0E6C                        00            .byte	0
04252 0E6D                        0C            .byte	$C
04253 0E6E                        10            .byte	$10
04254 0E6F                        00            .byte	0
04255 0E70                        08            .byte	8
04256 0E71                        10            .byte	$10
04257 0E72                        00            .byte	0
04258 0E73                        04            .byte	4
04259                                           ! 863   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04260 0E74                        10            .byte	$10
04261 0E75                        00            .byte	0
04262 0E76                        00            .byte	0
04263 0E77                        10            .byte	$10
04264 0E78                        04            .byte	4
04265 0E79                        00            .byte	0
04266 0E7A                        10            .byte	$10
04267 0E7B                        08            .byte	8
04268 0E7C                        00            .byte	0
04269 0E7D                        10            .byte	$10
04270 0E7E                        0C            .byte	$C
04271 0E7F                        00            .byte	0
04272 0E80                        10            .byte	$10
04273 0E81                        10            .byte	$10
04274 0E82                        00            .byte	0
04275 0E83                        0C            .byte	$C
04276 0E84                        10            .byte	$10
04277 0E85                        00            .byte	0
04278 0E86                        08            .byte	8
04279 0E87                        10            .byte	$10
04280 0E88                        00            .byte	0
04281 0E89                        04            .byte	4
04282 0E8A                        10            .byte	$10
04283 0E8B                        00            .byte	0
04284                                           ! 864   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x0
04285 0E8C                        00            .byte	0
04286 0E8D                        10            .byte	$10
04287 0E8E                        00            .byte	0
04288 0E8F                        00            .byte	0
04289 0E90                        10            .byte	$10
04290 0E91                        04            .byte	4
04291 0E92                        00            .byte	0
04292 0E93                        10            .byte	$10
04293 0E94                        08            .byte	8
04294 0E95                        00            .byte	0
04295 0E96                        10            .byte	$10
04296 0E97                        0C            .byte	$C
04297                                           ! 864 0,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04298 0E98                        00            .byte	0
04299 0E99                        10            .byte	$10
04300 0E9A                        10            .byte	$10
04301 0E9B                        00            .byte	0
04302 0E9C                        0C            .byte	$C
04303 0E9D                        10            .byte	$10
04304 0E9E                        00            .byte	0
04305 0E9F                        08            .byte	8
04306 0EA0                        10            .byte	$10
04307 0EA1                        00            .byte	0
04308 0EA2                        04            .byte	4
04309 0EA3                        10            .byte	$10
04310                                           ! 865   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EA4                        08            .byte	8
04312 0EA5                        08            .byte	8
04313 0EA6                        10            .byte	$10
04314 0EA7                        0A            .byte	$A
04315 0EA8                        08            .byte	8
04316 0EA9                        10            .byte	$10
04317 0EAA                        0C            .byte	$C
04318 0EAB                        08            .byte	8
04319 0EAC                        10            .byte	$10
04320 0EAD                        0E            .byte	$E
04321 0EAE                        08            .byte	8
04322 0EAF                        10            .byte	$10
04323 0EB0                        10            .byte	$10
04324 0EB1                        08            .byte	8
04325 0EB2                        10            .byte	$10
04326 0EB3                        10            .byte	$10
04327 0EB4                        08            .byte	8
04328 0EB5                        0E            .byte	$E
04329 0EB6                        10            .byte	$10
04330 0EB7                        08            .byte	8
04331 0EB8                        0C            .byte	$C
04332 0EB9                        10            .byte	$10
04333 0EBA                        08            .byte	8
04334 0EBB                        0A            .byte	$A
04335                                           ! 866   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EBC                        10            .byte	$10
04337 0EBD                        08            .byte	8
04338 0EBE                        08            .byte	8
04339 0EBF                        10            .byte	$10
04340 0EC0                        0A            .byte	$A
04341 0EC1                        08            .byte	8
04342 0EC2                        10            .byte	$10
04343 0EC3                        0C            .byte	$C
04344 0EC4                        08            .byte	8
04345 0EC5                        10            .byte	$10
04346 0EC6                        0E            .byte	$E
04347 0EC7                        08            .byte	8
04348 0EC8                        10            .byte	$10
04349 0EC9                        10            .byte	$10
04350 0ECA                        08            .byte	8
04351 0ECB                        0E            .byte	$E
04352 0ECC                        10            .byte	$10
04353 0ECD                        08            .byte	8
04354 0ECE                        0C            .byte	$C
04355 0ECF                        10            .byte	$10
04356 0ED0                        08            .byte	8
04357 0ED1                        0A            .byte	$A
04358 0ED2                        10            .byte	$10
04359 0ED3                        08            .byte	8
04360                                           ! 867   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0ED4                        08            .byte	8
04362 0ED5                        10            .byte	$10
04363 0ED6                        08            .byte	8
04364 0ED7                        08            .byte	8
04365 0ED8                        10            .byte	$10
04366 0ED9                        0A            .byte	$A
04367 0EDA                        08            .byte	8
04368 0EDB                        10            .byte	$10
04369 0EDC                        0C            .byte	$C
04370 0EDD                        08            .byte	8
04371 0EDE                        10            .byte	$10
04372 0EDF                        0E            .byte	$E
04373 0EE0                        08            .byte	8
04374 0EE1                        10            .byte	$10
04375 0EE2                        10            .byte	$10
04376 0EE3                        08            .byte	8
04377 0EE4                        0E            .byte	$E
04378 0EE5                        10            .byte	$10
04379 0EE6                        08            .byte	8
04380 0EE7                        0C            .byte	$C
04381 0EE8                        10            .byte	$10
04382 0EE9                        08            .byte	8
04383 0EEA                        0A            .byte	$A
04384 0EEB                        10            .byte	$10
04385                                           ! 868   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EEC                        0B            .byte	$B
04387 0EED                        0B            .byte	$B
04388 0EEE                        10            .byte	$10
04389 0EEF                        0C            .byte	$C
04390 0EF0                        0B            .byte	$B
04391 0EF1                        10            .byte	$10
04392 0EF2                        0D            .byte	$D
04393 0EF3                        0B            .byte	$B
04394 0EF4                        10            .byte	$10
04395 0EF5                        0F            .byte	$F
04396 0EF6                        0B            .byte	$B
04397 0EF7                        10            .byte	$10
04398 0EF8                        10            .byte	$10
04399 0EF9                        0B            .byte	$B
04400 0EFA                        10            .byte	$10
04401 0EFB                        10            .byte	$10
04402 0EFC                        0B            .byte	$B
04403 0EFD                        0F            .byte	$F
04404 0EFE                        10            .byte	$10
04405 0EFF                        0B            .byte	$B
04406 0F00                        0D            .byte	$D
04407 0F01                        10            .byte	$10
04408 0F02                        0B            .byte	$B
04409 0F03                        0C            .byte	$C
04410                                           ! 869   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F04                        10            .byte	$10
04412 0F05                        0B            .byte	$B
04413 0F06                        0B            .byte	$B
04414 0F07                        10            .byte	$10
04415 0F08                        0C            .byte	$C
04416 0F09                        0B            .byte	$B
04417 0F0A                        10            .byte	$10
04418 0F0B                        0D            .byte	$D
04419 0F0C                        0B            .byte	$B
04420 0F0D                        10            .byte	$10
04421 0F0E                        0F            .byte	$F
04422 0F0F                        0B            .byte	$B
04423 0F10                        10            .byte	$10
04424 0F11                        10            .byte	$10
04425 0F12                        0B            .byte	$B
04426 0F13                        0F            .byte	$F
04427 0F14                        10            .byte	$10
04428 0F15                        0B            .byte	$B
04429 0F16                        0D            .byte	$D
04430 0F17                        10            .byte	$10
04431 0F18                        0B            .byte	$B
04432 0F19                        0C            .byte	$C
04433 0F1A                        10            .byte	$10
04434 0F1B                        0B            .byte	$B
04435                                           ! 870   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F1C                        0B            .byte	$B
04437 0F1D                        10            .byte	$10
04438 0F1E                        0B            .byte	$B
04439 0F1F                        0B            .byte	$B
04440 0F20                        10            .byte	$10
04441 0F21                        0C            .byte	$C
04442 0F22                        0B            .byte	$B
04443 0F23                        10            .byte	$10
04444 0F24                        0D            .byte	$D
04445 0F25                        0B            .byte	$B
04446 0F26                        10            .byte	$10
04447 0F27                        0F            .byte	$F
04448 0F28                        0B            .byte	$B
04449 0F29                        10            .byte	$10
04450 0F2A                        10            .byte	$10
04451 0F2B                        0B            .byte	$B
04452 0F2C                        0F            .byte	$F
04453 0F2D                        10            .byte	$10
04454 0F2E                        0B            .byte	$B
04455 0F2F                        0D            .byte	$D
04456 0F30                        10            .byte	$10
04457 0F31                        0B            .byte	$B
04458 0F32                        0C            .byte	$C
04459 0F33                        10            .byte	$10
04460                                           ! 871   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F34                        00            .byte	0
04462 0F35                        00            .byte	0
04463 0F36                        00            .byte	0
04464 0F37                        00            .byte	0
04465 0F38                        00            .byte	0
04466 0F39                        00            .byte	0
04467 0F3A                        00            .byte	0
04468 0F3B                        00            .byte	0
04469 0F3C                        00            .byte	0
04470 0F3D                        00            .byte	0
04471 0F3E                        00            .byte	0
04472 0F3F                        00            .byte	0
04473 0F40                        00            .byte	0
04474 0F41                        00            .byte	0
04475 0F42                        00            .byte	0
04476 0F43                        00            .byte	0
04477 0F44                        00            .byte	0
04478 0F45                        00            .byte	0
04479 0F46                        00            .byte	0
04480 0F47                        00            .byte	0
04481 0F48                        00            .byte	0
04482 0F49                        00            .byte	0
04483 0F4A                        00            .byte	0
04484                                           ! 872 };
04485 0F4B                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 873 static Bit8u static_functionality[0x10]=
04488                                           ! 874 {
04489                       00000F4C            _static_functionality:
04490                                           ! 875          0xff,
04491 0F4C                        FF            .byte	$FF
04492                                           ! 876          0xe0,
04493 0F4D                        E0            .byte	$E0
04494                                           ! 877          0x0f,
04495 0F4E                        0F            .byte	$F
04496                                           ! 878          0x00, 0x00, 0x00, 0x00,
04497 0F4F                        00            .byte	0
04498 0F50                        00            .byte	0
04499 0F51                        00            .byte	0
04500 0F52                        00            .byte	0
04501                                           ! 879          0x07,
04502 0F53                        07            .byte	7
04503                                           ! 880          0x02,
04504 0F54                        02            .byte	2
04505                                           ! 881          0x08,
04506 0F55                        08            .byte	8
04507                                           ! 882          0xe7,
04508 0F56                        E7            .byte	$E7
04509                                           ! 883          0x0c,
04510 0F57                        0C            .byte	$C
04511                                           ! 884          0x00,
04512 0F58                        00            .byte	0
04513                                           ! 885          0x00,
04514 0F59                        00            .byte	0
04515                                           ! 886          0x00,
04516 0F5A                        00            .byte	0
04517                                           ! 887          0x00
04518                                           ! 888 };
04519 0F5B                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 889 static Bit8u vgafont8[256*8]=
04522                                           ! 890 {
04523                       00000F5C            _vgafont8:
04524                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F5C                        00            .byte	0
04526 0F5D                        00            .byte	0
04527 0F5E                        00            .byte	0
04528 0F5F                        00            .byte	0
04529 0F60                        00            .byte	0
04530 0F61                        00            .byte	0
04531 0F62                        00            .byte	0
04532 0F63                        00            .byte	0
04533                                           ! 892  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F64                        7E            .byte	$7E
04535 0F65                        81            .byte	$81
04536 0F66                        A5            .byte	$A5
04537 0F67                        81            .byte	$81
04538 0F68                        BD            .byte	$BD
04539 0F69                        99            .byte	$99
04540 0F6A                        81            .byte	$81
04541 0F6B                        7E            .byte	$7E
04542                                           ! 893  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F6C                        7E            .byte	$7E
04544 0F6D                        FF            .byte	$FF
04545 0F6E                        DB            .byte	$DB
04546 0F6F                        FF            .byte	$FF
04547 0F70                        C3            .byte	$C3
04548 0F71                        E7            .byte	$E7
04549 0F72                        FF            .byte	$FF
04550 0F73                        7E            .byte	$7E
04551                                           ! 894  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F74                        6C            .byte	$6C
04553 0F75                        FE            .byte	$FE
04554 0F76                        FE            .byte	$FE
04555 0F77                        FE            .byte	$FE
04556 0F78                        7C            .byte	$7C
04557 0F79                        38            .byte	$38
04558 0F7A                        10            .byte	$10
04559 0F7B                        00            .byte	0
04560                                           ! 895  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F7C                        10            .byte	$10
04562 0F7D                        38            .byte	$38
04563 0F7E                        7C            .byte	$7C
04564 0F7F                        FE            .byte	$FE
04565 0F80                        7C            .byte	$7C
04566 0F81                        38            .byte	$38
04567 0F82                        10            .byte	$10
04568 0F83                        00            .byte	0
04569                                           ! 896  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F84                        38            .byte	$38
04571 0F85                        7C            .byte	$7C
04572 0F86                        38            .byte	$38
04573 0F87                        FE            .byte	$FE
04574 0F88                        FE            .byte	$FE
04575 0F89                        7C            .byte	$7C
04576 0F8A                        38            .byte	$38
04577 0F8B                        7C            .byte	$7C
04578                                           ! 897  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F8C                        10            .byte	$10
04580 0F8D                        10            .byte	$10
04581 0F8E                        38            .byte	$38
04582 0F8F                        7C            .byte	$7C
04583 0F90                        FE            .byte	$FE
04584 0F91                        7C            .byte	$7C
04585 0F92                        38            .byte	$38
04586 0F93                        7C            .byte	$7C
04587                                           ! 898  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0F94                        00            .byte	0
04589 0F95                        00            .byte	0
04590 0F96                        18            .byte	$18
04591 0F97                        3C            .byte	$3C
04592 0F98                        3C            .byte	$3C
04593 0F99                        18            .byte	$18
04594 0F9A                        00            .byte	0
04595 0F9B                        00            .byte	0
04596                                           ! 899  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0F9C                        FF            .byte	$FF
04598 0F9D                        FF            .byte	$FF
04599 0F9E                        E7            .byte	$E7
04600 0F9F                        C3            .byte	$C3
04601 0FA0                        C3            .byte	$C3
04602 0FA1                        E7            .byte	$E7
04603 0FA2                        FF            .byte	$FF
04604 0FA3                        FF            .byte	$FF
04605                                           ! 900  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FA4                        00            .byte	0
04607 0FA5                        3C            .byte	$3C
04608 0FA6                        66            .byte	$66
04609 0FA7                        42            .byte	$42
04610 0FA8                        42            .byte	$42
04611 0FA9                        66            .byte	$66
04612 0FAA                        3C            .byte	$3C
04613 0FAB                        00            .byte	0
04614                                           ! 901  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FAC                        FF            .byte	$FF
04616 0FAD                        C3            .byte	$C3
04617 0FAE                        99            .byte	$99
04618 0FAF                        BD            .byte	$BD
04619 0FB0                        BD            .byte	$BD
04620 0FB1                        99            .byte	$99
04621 0FB2                        C3            .byte	$C3
04622 0FB3                        FF            .byte	$FF
04623                                           ! 902  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FB4                        0F            .byte	$F
04625 0FB5                        07            .byte	7
04626 0FB6                        0F            .byte	$F
04627 0FB7                        7D            .byte	$7D
04628 0FB8                        CC            .byte	$CC
04629 0FB9                        CC            .byte	$CC
04630 0FBA                        CC            .byte	$CC
04631 0FBB                        78            .byte	$78
04632                                           ! 903  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FBC                        3C            .byte	$3C
04634 0FBD                        66            .byte	$66
04635 0FBE                        66            .byte	$66
04636 0FBF                        66            .byte	$66
04637 0FC0                        3C            .byte	$3C
04638 0FC1                        18            .byte	$18
04639 0FC2                        7E            .byte	$7E
04640 0FC3                        18            .byte	$18
04641                                           ! 904  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FC4                        3F            .byte	$3F
04643 0FC5                        33            .byte	$33
04644 0FC6                        3F            .byte	$3F
04645 0FC7                        30            .byte	$30
04646 0FC8                        30            .byte	$30
04647 0FC9                        70            .byte	$70
04648 0FCA                        F0            .byte	$F0
04649 0FCB                        E0            .byte	$E0
04650                                           ! 905  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04651 0FCC                        7F            .byte	$7F
04652 0FCD                        63            .byte	$63
04653 0FCE                        7F            .byte	$7F
04654 0FCF                        63            .byte	$63
04655 0FD0                        63            .byte	$63
04656 0FD1                        67            .byte	$67
04657 0FD2                        E6            .byte	$E6
04658 0FD3                        C0            .byte	$C0
04659                                           ! 906  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04660 0FD4                        99            .byte	$99
04661 0FD5                        5A            .byte	$5A
04662 0FD6                        3C            .byte	$3C
04663 0FD7                        E7            .byte	$E7
04664 0FD8                        E7            .byte	$E7
04665 0FD9                        3C            .byte	$3C
04666 0FDA                        5A            .byte	$5A
04667 0FDB                        99            .byte	$99
04668                                           ! 907  
04669                                           ! 907 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FDC                        80            .byte	$80
04671 0FDD                        E0            .byte	$E0
04672 0FDE                        F8            .byte	$F8
04673 0FDF                        FE            .byte	$FE
04674 0FE0                        F8            .byte	$F8
04675 0FE1                        E0            .byte	$E0
04676 0FE2                        80            .byte	$80
04677 0FE3                        00            .byte	0
04678                                           ! 908  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FE4                        02            .byte	2
04680 0FE5                        0E            .byte	$E
04681 0FE6                        3E            .byte	$3E
04682 0FE7                        FE            .byte	$FE
04683 0FE8                        3E            .byte	$3E
04684 0FE9                        0E            .byte	$E
04685 0FEA                        02            .byte	2
04686 0FEB                        00            .byte	0
04687                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FEC                        18            .byte	$18
04689 0FED                        3C            .byte	$3C
04690 0FEE                        7E            .byte	$7E
04691 0FEF                        18            .byte	$18
04692 0FF0                        18            .byte	$18
04693 0FF1                        7E            .byte	$7E
04694 0FF2                        3C            .byte	$3C
04695 0FF3                        18            .byte	$18
04696                                           ! 910  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 0FF4                        66            .byte	$66
04698 0FF5                        66            .byte	$66
04699 0FF6                        66            .byte	$66
04700 0FF7                        66            .byte	$66
04701 0FF8                        66            .byte	$66
04702 0FF9                        00            .byte	0
04703 0FFA                        66            .byte	$66
04704 0FFB                        00            .byte	0
04705                                           ! 911  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 0FFC                        7F            .byte	$7F
04707 0FFD                        DB            .byte	$DB
04708 0FFE                        DB            .byte	$DB
04709 0FFF                        7B            .byte	$7B
04710 1000                        1B            .byte	$1B
04711 1001                        1B            .byte	$1B
04712 1002                        1B            .byte	$1B
04713 1003                        00            .byte	0
04714                                           ! 912  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1004                        3E            .byte	$3E
04716 1005                        63            .byte	$63
04717 1006                        38            .byte	$38
04718 1007                        6C            .byte	$6C
04719 1008                        6C            .byte	$6C
04720 1009                        38            .byte	$38
04721 100A                        CC            .byte	$CC
04722 100B                        78            .byte	$78
04723                                           ! 913  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 100C                        00            .byte	0
04725 100D                        00            .byte	0
04726 100E                        00            .byte	0
04727 100F                        00            .byte	0
04728 1010                        7E            .byte	$7E
04729 1011                        7E            .byte	$7E
04730 1012                        7E            .byte	$7E
04731 1013                        00            .byte	0
04732                                           ! 914  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1014                        18            .byte	$18
04734 1015                        3C            .byte	$3C
04735 1016                        7E            .byte	$7E
04736 1017                        18            .byte	$18
04737 1018                        7E            .byte	$7E
04738 1019                        3C            .byte	$3C
04739 101A                        18            .byte	$18
04740 101B                        FF            .byte	$FF
04741                                           ! 915  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 101C                        18            .byte	$18
04743 101D                        3C            .byte	$3C
04744 101E                        7E            .byte	$7E
04745 101F                        18            .byte	$18
04746 1020                        18            .byte	$18
04747 1021                        18            .byte	$18
04748 1022                        18            .byte	$18
04749 1023                        00            .byte	0
04750                                           ! 916  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1024                        18            .byte	$18
04752 1025                        18            .byte	$18
04753 1026                        18            .byte	$18
04754 1027                        18            .byte	$18
04755 1028                        7E            .byte	$7E
04756 1029                        3C            .byte	$3C
04757 102A                        18            .byte	$18
04758 102B                        00            .byte	0
04759                                           ! 917  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 102C                        00            .byte	0
04761 102D                        18            .byte	$18
04762 102E                        0C            .byte	$C
04763 102F                        FE            .byte	$FE
04764 1030                        0C            .byte	$C
04765 1031                        18            .byte	$18
04766 1032                        00            .byte	0
04767 1033                        00            .byte	0
04768                                           ! 918  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1034                        00            .byte	0
04770 1035                        30            .byte	$30
04771 1036                        60            .byte	$60
04772 1037                        FE            .byte	$FE
04773 1038                        60            .byte	$60
04774 1039                        30            .byte	$30
04775 103A                        00            .byte	0
04776 103B                        00            .byte	0
04777                                           ! 919  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 103C                        00            .byte	0
04779 103D                        00            .byte	0
04780 103E                        C0            .byte	$C0
04781 103F                        C0            .byte	$C0
04782 1040                        C0            .byte	$C0
04783 1041                        FE            .byte	$FE
04784 1042                        00            .byte	0
04785 1043                        00            .byte	0
04786                                           ! 920  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1044                        00            .byte	0
04788 1045                        24            .byte	$24
04789 1046                        66            .byte	$66
04790 1047                        FF            .byte	$FF
04791 1048                        66            .byte	$66
04792 1049                        24            .byte	$24
04793 104A                        00            .byte	0
04794 104B                        00            .byte	0
04795                                           ! 921  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 104C                        00            .byte	0
04797 104D                        18            .byte	$18
04798 104E                        3C            .byte	$3C
04799 104F                        7E            .byte	$7E
04800 1050                        FF            .byte	$FF
04801 1051                        FF            .byte	$FF
04802 1052                        00            .byte	0
04803 1053                        00            .byte	0
04804                                           ! 922  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1054                        00            .byte	0
04806 1055                        FF            .byte	$FF
04807 1056                        FF            .byte	$FF
04808 1057                        7E            .byte	$7E
04809 1058                        3C            .byte	$3C
04810 1059                        18            .byte	$18
04811 105A                        00            .byte	0
04812 105B                        00            .byte	0
04813                                           ! 923  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 105C                        00            .byte	0
04815 105D                        00            .byte	0
04816 105E                        00            .byte	0
04817 105F                        00            .byte	0
04818 1060                        00            .byte	0
04819 1061                        00            .byte	0
04820 1062                        00            .byte	0
04821 1063                        00            .byte	0
04822                                           ! 924  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1064                        30            .byte	$30
04824 1065                        78            .byte	$78
04825 1066                        78            .byte	$78
04826 1067                        30            .byte	$30
04827 1068                        30            .byte	$30
04828 1069                        00            .byte	0
04829 106A                        30            .byte	$30
04830 106B                        00            .byte	0
04831                                           ! 925  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 106C                        6C            .byte	$6C
04833 106D                        6C            .byte	$6C
04834 106E                        6C            .byte	$6C
04835 106F                        00            .byte	0
04836 1070                        00            .byte	0
04837 1071                        00            .byte	0
04838 1072                        00            .byte	0
04839 1073                        00            .byte	0
04840                                           ! 926  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1074                        6C            .byte	$6C
04842 1075                        6C            .byte	$6C
04843 1076                        FE            .byte	$FE
04844 1077                        6C            .byte	$6C
04845 1078                        FE            .byte	$FE
04846 1079                        6C            .byte	$6C
04847 107A                        6C            .byte	$6C
04848 107B                        00            .byte	0
04849                                           ! 927  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 107C                        30            .byte	$30
04851 107D                        7C            .byte	$7C
04852 107E                        C0            .byte	$C0
04853 107F                        78            .byte	$78
04854 1080                        0C            .byte	$C
04855 1081                        F8            .byte	$F8
04856 1082                        30            .byte	$30
04857 1083                        00            .byte	0
04858                                           ! 928  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1084                        00            .byte	0
04860 1085                        C6            .byte	$C6
04861 1086                        CC            .byte	$CC
04862 1087                        18            .byte	$18
04863 1088                        30            .byte	$30
04864 1089                        66            .byte	$66
04865 108A                        C6            .byte	$C6
04866 108B                        00            .byte	0
04867                                           ! 929  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 108C                        38            .byte	$38
04869 108D                        6C            .byte	$6C
04870 108E                        38            .byte	$38
04871 108F                        76            .byte	$76
04872 1090                        DC            .byte	$DC
04873 1091                        CC            .byte	$CC
04874 1092                        76            .byte	$76
04875 1093                        00            .byte	0
04876                                           ! 930  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 1094                        60            .byte	$60
04878 1095                        60            .byte	$60
04879 1096                        C0            .byte	$C0
04880 1097                        00            .byte	0
04881 1098                        00            .byte	0
04882 1099                        00            .byte	0
04883 109A                        00            .byte	0
04884 109B                        00            .byte	0
04885                                           ! 931  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 109C                        18            .byte	$18
04887 109D                        30            .byte	$30
04888 109E                        60            .byte	$60
04889 109F                        60            .byte	$60
04890 10A0                        60            .byte	$60
04891 10A1                        30            .byte	$30
04892 10A2                        18            .byte	$18
04893 10A3                        00            .byte	0
04894                                           ! 932  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10A4                        60            .byte	$60
04896 10A5                        30            .byte	$30
04897 10A6                        18            .byte	$18
04898 10A7                        18            .byte	$18
04899 10A8                        18            .byte	$18
04900 10A9                        30            .byte	$30
04901 10AA                        60            .byte	$60
04902 10AB                        00            .byte	0
04903                                           ! 933  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10AC                        00            .byte	0
04905 10AD                        66            .byte	$66
04906 10AE                        3C            .byte	$3C
04907 10AF                        FF            .byte	$FF
04908 10B0                        3C            .byte	$3C
04909 10B1                        66            .byte	$66
04910 10B2                        00            .byte	0
04911 10B3                        00            .byte	0
04912                                           ! 934  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10B4                        00            .byte	0
04914 10B5                        30            .byte	$30
04915 10B6                        30            .byte	$30
04916 10B7                        FC            .byte	$FC
04917 10B8                        30            .byte	$30
04918 10B9                        30            .byte	$30
04919 10BA                        00            .byte	0
04920 10BB                        00            .byte	0
04921                                           ! 935  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10BC                        00            .byte	0
04923 10BD                        00            .byte	0
04924 10BE                        00            .byte	0
04925 10BF                        00            .byte	0
04926 10C0                        00            .byte	0
04927 10C1                        30            .byte	$30
04928 10C2                        30            .byte	$30
04929 10C3                        60            .byte	$60
04930                                           ! 936  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10C4                        00            .byte	0
04932 10C5                        00            .byte	0
04933 10C6                        00            .byte	0
04934 10C7                        FC            .byte	$FC
04935 10C8                        00            .byte	0
04936 10C9                        00            .byte	0
04937 10CA                        00            .byte	0
04938 10CB                        00            .byte	0
04939                                           ! 937  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10CC                        00            .byte	0
04941 10CD                        00            .byte	0
04942 10CE                        00            .byte	0
04943 10CF                        00            .byte	0
04944 10D0                        00            .byte	0
04945 10D1                        30            .byte	$30
04946 10D2                        30            .byte	$30
04947 10D3                        00            .byte	0
04948                                           ! 938  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10D4                        06            .byte	6
04950 10D5                        0C            .byte	$C
04951 10D6                        18            .byte	$18
04952 10D7                        30            .byte	$30
04953 10D8                        60            .byte	$60
04954 10D9                        C0            .byte	$C0
04955 10DA                        80            .byte	$80
04956 10DB                        00            .byte	0
04957                                           ! 939  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10DC                        7C            .byte	$7C
04959 10DD                        C6            .byte	$C6
04960 10DE                        CE            .byte	$CE
04961 10DF                        DE            .byte	$DE
04962 10E0                        F6            .byte	$F6
04963 10E1                        E6            .byte	$E6
04964 10E2                        7C            .byte	$7C
04965 10E3                        00            .byte	0
04966                                           ! 940  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10E4                        30            .byte	$30
04968 10E5                        70            .byte	$70
04969 10E6                        30            .byte	$30
04970 10E7                        30            .byte	$30
04971 10E8                        30            .byte	$30
04972 10E9                        30            .byte	$30
04973 10EA                        FC            .byte	$FC
04974 10EB                        00            .byte	0
04975                                           ! 941  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10EC                        78            .byte	$78
04977 10ED                        CC            .byte	$CC
04978 10EE                        0C            .byte	$C
04979 10EF                        38            .byte	$38
04980 10F0                        60            .byte	$60
04981 10F1                        CC            .byte	$CC
04982 10F2                        FC            .byte	$FC
04983 10F3                        00            .byte	0
04984                                           ! 942  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 10F4                        78            .byte	$78
04986 10F5                        CC            .byte	$CC
04987 10F6                        0C            .byte	$C
04988 10F7                        38            .byte	$38
04989 10F8                        0C            .byte	$C
04990 10F9                        CC            .byte	$CC
04991 10FA                        78            .byte	$78
04992 10FB                        00            .byte	0
04993                                           ! 943  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 10FC                        1C            .byte	$1C
04995 10FD                        3C            .byte	$3C
04996 10FE                        6C            .byte	$6C
04997 10FF                        CC            .byte	$CC
04998 1100                        FE            .byte	$FE
04999 1101                        0C            .byte	$C
05000 1102                        1E            .byte	$1E
05001 1103                        00            .byte	0
05002                                           ! 944  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1104                        FC            .byte	$FC
05004 1105                        C0            .byte	$C0
05005 1106                        F8            .byte	$F8
05006 1107                        0C            .byte	$C
05007 1108                        0C            .byte	$C
05008 1109                        CC            .byte	$CC
05009 110A                        78            .byte	$78
05010 110B                        00            .byte	0
05011                                           ! 945  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 110C                        38            .byte	$38
05013 110D                        60            .byte	$60
05014 110E                        C0            .byte	$C0
05015 110F                        F8            .byte	$F8
05016 1110                        CC            .byte	$CC
05017 1111                        CC            .byte	$CC
05018 1112                        78            .byte	$78
05019 1113                        00            .byte	0
05020                                           ! 946  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05021 1114                        FC            .byte	$FC
05022 1115                        CC            .byte	$CC
05023 1116                        0C            .byte	$C
05024 1117                        18            .byte	$18
05025 1118                        30            .byte	$30
05026 1119                        30            .byte	$30
05027 111A                        30            .byte	$30
05028 111B                        00            .byte	0
05029                                           ! 947  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05030 111C                        78            .byte	$78
05031 111D                        CC            .byte	$CC
05032 111E                        CC            .byte	$CC
05033 111F                        78            .byte	$78
05034 1120                        CC            .byte	$CC
05035 1121                        CC            .byte	$CC
05036 1122                        78            .byte	$78
05037 1123                        00            .byte	0
05038                                           ! 948  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x7
05039 1124                        78            .byte	$78
05040 1125                        CC            .byte	$CC
05041 1126                        CC            .byte	$CC
05042 1127                        7C            .byte	$7C
05043 1128                        0C            .byte	$C
05044 1129                        18            .byte	$18
05045                                           ! 948 0, 0x00,
05046 112A                        70            .byte	$70
05047 112B                        00            .byte	0
05048                                           ! 949  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 112C                        00            .byte	0
05050 112D                        30            .byte	$30
05051 112E                        30            .byte	$30
05052 112F                        00            .byte	0
05053 1130                        00            .byte	0
05054 1131                        30            .byte	$30
05055 1132                        30            .byte	$30
05056 1133                        00            .byte	0
05057                                           ! 950  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1134                        00            .byte	0
05059 1135                        30            .byte	$30
05060 1136                        30            .byte	$30
05061 1137                        00            .byte	0
05062 1138                        00            .byte	0
05063 1139                        30            .byte	$30
05064 113A                        30            .byte	$30
05065 113B                        60            .byte	$60
05066                                           ! 951  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 113C                        18            .byte	$18
05068 113D                        30            .byte	$30
05069 113E                        60            .byte	$60
05070 113F                        C0            .byte	$C0
05071 1140                        60            .byte	$60
05072 1141                        30            .byte	$30
05073 1142                        18            .byte	$18
05074 1143                        00            .byte	0
05075                                           ! 952  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1144                        00            .byte	0
05077 1145                        00            .byte	0
05078 1146                        FC            .byte	$FC
05079 1147                        00            .byte	0
05080 1148                        00            .byte	0
05081 1149                        FC            .byte	$FC
05082 114A                        00            .byte	0
05083 114B                        00            .byte	0
05084                                           ! 953  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 114C                        60            .byte	$60
05086 114D                        30            .byte	$30
05087 114E                        18            .byte	$18
05088 114F                        0C            .byte	$C
05089 1150                        18            .byte	$18
05090 1151                        30            .byte	$30
05091 1152                        60            .byte	$60
05092 1153                        00            .byte	0
05093                                           ! 954  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1154                        78            .byte	$78
05095 1155                        CC            .byte	$CC
05096 1156                        0C            .byte	$C
05097 1157                        18            .byte	$18
05098 1158                        30            .byte	$30
05099 1159                        00            .byte	0
05100 115A                        30            .byte	$30
05101 115B                        00            .byte	0
05102                                           ! 955  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 115C                        7C            .byte	$7C
05104 115D                        C6            .byte	$C6
05105 115E                        DE            .byte	$DE
05106 115F                        DE            .byte	$DE
05107 1160                        DE            .byte	$DE
05108 1161                        C0            .byte	$C0
05109 1162                        78            .byte	$78
05110 1163                        00            .byte	0
05111                                           ! 956  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1164                        30            .byte	$30
05113 1165                        78            .byte	$78
05114 1166                        CC            .byte	$CC
05115 1167                        CC            .byte	$CC
05116 1168                        FC            .byte	$FC
05117 1169                        CC            .byte	$CC
05118 116A                        CC            .byte	$CC
05119 116B                        00            .byte	0
05120                                           ! 957  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 116C                        FC            .byte	$FC
05122 116D                        66            .byte	$66
05123 116E                        66            .byte	$66
05124 116F                        7C            .byte	$7C
05125 1170                        66            .byte	$66
05126 1171                        66            .byte	$66
05127 1172                        FC            .byte	$FC
05128 1173                        00            .byte	0
05129                                           ! 958  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1174                        3C            .byte	$3C
05131 1175                        66            .byte	$66
05132 1176                        C0            .byte	$C0
05133 1177                        C0            .byte	$C0
05134 1178                        C0            .byte	$C0
05135 1179                        66            .byte	$66
05136 117A                        3C            .byte	$3C
05137 117B                        00            .byte	0
05138                                           ! 959  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 117C                        F8            .byte	$F8
05140 117D                        6C            .byte	$6C
05141 117E                        66            .byte	$66
05142 117F                        66            .byte	$66
05143 1180                        66            .byte	$66
05144 1181                        6C            .byte	$6C
05145 1182                        F8            .byte	$F8
05146 1183                        00            .byte	0
05147                                           ! 960  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1184                        FE            .byte	$FE
05149 1185                        62            .byte	$62
05150 1186                        68            .byte	$68
05151 1187                        78            .byte	$78
05152 1188                        68            .byte	$68
05153 1189                        62            .byte	$62
05154 118A                        FE            .byte	$FE
05155 118B                        00            .byte	0
05156                                           ! 961  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 118C                        FE            .byte	$FE
05158 118D                        62            .byte	$62
05159 118E                        68            .byte	$68
05160 118F                        78            .byte	$78
05161 1190                        68            .byte	$68
05162 1191                        60            .byte	$60
05163 1192                        F0            .byte	$F0
05164 1193                        00            .byte	0
05165                                           ! 962  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 1194                        3C            .byte	$3C
05167 1195                        66            .byte	$66
05168 1196                        C0            .byte	$C0
05169 1197                        C0            .byte	$C0
05170 1198                        CE            .byte	$CE
05171 1199                        66            .byte	$66
05172 119A                        3E            .byte	$3E
05173 119B                        00            .byte	0
05174                                           ! 963  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 119C                        CC            .byte	$CC
05176 119D                        CC            .byte	$CC
05177 119E                        CC            .byte	$CC
05178 119F                        FC            .byte	$FC
05179 11A0                        CC            .byte	$CC
05180 11A1                        CC            .byte	$CC
05181 11A2                        CC            .byte	$CC
05182 11A3                        00            .byte	0
05183                                           ! 964  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11A4                        78            .byte	$78
05185 11A5                        30            .byte	$30
05186 11A6                        30            .byte	$30
05187 11A7                        30            .byte	$30
05188 11A8                        30            .byte	$30
05189 11A9                        30            .byte	$30
05190 11AA                        78            .byte	$78
05191 11AB                        00            .byte	0
05192                                           ! 965  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11AC                        1E            .byte	$1E
05194 11AD                        0C            .byte	$C
05195 11AE                        0C            .byte	$C
05196 11AF                        0C            .byte	$C
05197 11B0                        CC            .byte	$CC
05198 11B1                        CC            .byte	$CC
05199 11B2                        78            .byte	$78
05200 11B3                        00            .byte	0
05201                                           ! 966  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11B4                        E6            .byte	$E6
05203 11B5                        66            .byte	$66
05204 11B6                        6C            .byte	$6C
05205 11B7                        78            .byte	$78
05206 11B8                        6C            .byte	$6C
05207 11B9                        66            .byte	$66
05208 11BA                        E6            .byte	$E6
05209 11BB                        00            .byte	0
05210                                           ! 967  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11BC                        F0            .byte	$F0
05212 11BD                        60            .byte	$60
05213 11BE                        60            .byte	$60
05214 11BF                        60            .byte	$60
05215 11C0                        62            .byte	$62
05216 11C1                        66            .byte	$66
05217 11C2                        FE            .byte	$FE
05218 11C3                        00            .byte	0
05219                                           ! 968  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11C4                        C6            .byte	$C6
05221 11C5                        EE            .byte	$EE
05222 11C6                        FE            .byte	$FE
05223 11C7                        FE            .byte	$FE
05224 11C8                        D6            .byte	$D6
05225 11C9                        C6            .byte	$C6
05226 11CA                        C6            .byte	$C6
05227 11CB                        00            .byte	0
05228                                           ! 969  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11CC                        C6            .byte	$C6
05230 11CD                        E6            .byte	$E6
05231 11CE                        F6            .byte	$F6
05232 11CF                        DE            .byte	$DE
05233 11D0                        CE            .byte	$CE
05234 11D1                        C6            .byte	$C6
05235 11D2                        C6            .byte	$C6
05236 11D3                        00            .byte	0
05237                                           ! 970  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11D4                        38            .byte	$38
05239 11D5                        6C            .byte	$6C
05240 11D6                        C6            .byte	$C6
05241 11D7                        C6            .byte	$C6
05242 11D8                        C6            .byte	$C6
05243 11D9                        6C            .byte	$6C
05244 11DA                        38            .byte	$38
05245 11DB                        00            .byte	0
05246                                           ! 971  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11DC                        FC            .byte	$FC
05248 11DD                        66            .byte	$66
05249 11DE                        66            .byte	$66
05250 11DF                        7C            .byte	$7C
05251 11E0                        60            .byte	$60
05252 11E1                        60            .byte	$60
05253 11E2                        F0            .byte	$F0
05254 11E3                        00            .byte	0
05255                                           ! 972  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11E4                        78            .byte	$78
05257 11E5                        CC            .byte	$CC
05258 11E6                        CC            .byte	$CC
05259 11E7                        CC            .byte	$CC
05260 11E8                        DC            .byte	$DC
05261 11E9                        78            .byte	$78
05262 11EA                        1C            .byte	$1C
05263 11EB                        00            .byte	0
05264                                           ! 973  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11EC                        FC            .byte	$FC
05266 11ED                        66            .byte	$66
05267 11EE                        66            .byte	$66
05268 11EF                        7C            .byte	$7C
05269 11F0                        6C            .byte	$6C
05270 11F1                        66            .byte	$66
05271 11F2                        E6            .byte	$E6
05272 11F3                        00            .byte	0
05273                                           ! 974  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 11F4                        78            .byte	$78
05275 11F5                        CC            .byte	$CC
05276 11F6                        E0            .byte	$E0
05277 11F7                        70            .byte	$70
05278 11F8                        1C            .byte	$1C
05279 11F9                        CC            .byte	$CC
05280 11FA                        78            .byte	$78
05281 11FB                        00            .byte	0
05282                                           ! 975  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 11FC                        FC            .byte	$FC
05284 11FD                        B4            .byte	$B4
05285 11FE                        30            .byte	$30
05286 11FF                        30            .byte	$30
05287 1200                        30            .byte	$30
05288 1201                        30            .byte	$30
05289 1202                        78            .byte	$78
05290 1203                        00            .byte	0
05291                                           ! 976  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1204                        CC            .byte	$CC
05293 1205                        CC            .byte	$CC
05294 1206                        CC            .byte	$CC
05295 1207                        CC            .byte	$CC
05296 1208                        CC            .byte	$CC
05297 1209                        CC            .byte	$CC
05298 120A                        FC            .byte	$FC
05299 120B                        00            .byte	0
05300                                           ! 977  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 120C                        CC            .byte	$CC
05302 120D                        CC            .byte	$CC
05303 120E                        CC            .byte	$CC
05304 120F                        CC            .byte	$CC
05305 1210                        CC            .byte	$CC
05306 1211                        78            .byte	$78
05307 1212                        30            .byte	$30
05308 1213                        00            .byte	0
05309                                           ! 978  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1214                        C6            .byte	$C6
05311 1215                        C6            .byte	$C6
05312 1216                        C6            .byte	$C6
05313 1217                        D6            .byte	$D6
05314 1218                        FE            .byte	$FE
05315 1219                        EE            .byte	$EE
05316 121A                        C6            .byte	$C6
05317 121B                        00            .byte	0
05318                                           ! 979  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 121C                        C6            .byte	$C6
05320 121D                        C6            .byte	$C6
05321 121E                        6C            .byte	$6C
05322 121F                        38            .byte	$38
05323 1220                        38            .byte	$38
05324 1221                        6C            .byte	$6C
05325 1222                        C6            .byte	$C6
05326 1223                        00            .byte	0
05327                                           ! 980  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1224                        CC            .byte	$CC
05329 1225                        CC            .byte	$CC
05330 1226                        CC            .byte	$CC
05331 1227                        78            .byte	$78
05332 1228                        30            .byte	$30
05333 1229                        30            .byte	$30
05334 122A                        78            .byte	$78
05335 122B                        00            .byte	0
05336                                           ! 981  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 122C                        FE            .byte	$FE
05338 122D                        C6            .byte	$C6
05339 122E                        8C            .byte	$8C
05340 122F                        18            .byte	$18
05341 1230                        32            .byte	$32
05342 1231                        66            .byte	$66
05343 1232                        FE            .byte	$FE
05344 1233                        00            .byte	0
05345                                           ! 982  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1234                        78            .byte	$78
05347 1235                        60            .byte	$60
05348 1236                        60            .byte	$60
05349 1237                        60            .byte	$60
05350 1238                        60            .byte	$60
05351 1239                        60            .byte	$60
05352 123A                        78            .byte	$78
05353 123B                        00            .byte	0
05354                                           ! 983  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 123C                        C0            .byte	$C0
05356 123D                        60            .byte	$60
05357 123E                        30            .byte	$30
05358 123F                        18            .byte	$18
05359 1240                        0C            .byte	$C
05360 1241                        06            .byte	6
05361 1242                        02            .byte	2
05362 1243                        00            .byte	0
05363                                           ! 984  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1244                        78            .byte	$78
05365 1245                        18            .byte	$18
05366 1246                        18            .byte	$18
05367 1247                        18            .byte	$18
05368 1248                        18            .byte	$18
05369 1249                        18            .byte	$18
05370 124A                        78            .byte	$78
05371 124B                        00            .byte	0
05372                                           ! 985  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 124C                        10            .byte	$10
05374 124D                        38            .byte	$38
05375 124E                        6C            .byte	$6C
05376 124F                        C6            .byte	$C6
05377 1250                        00            .byte	0
05378 1251                        00            .byte	0
05379 1252                        00            .byte	0
05380 1253                        00            .byte	0
05381                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1254                        00            .byte	0
05383 1255                        00            .byte	0
05384 1256                        00            .byte	0
05385 1257                        00            .byte	0
05386 1258                        00            .byte	0
05387 1259                        00            .byte	0
05388 125A                        00            .byte	0
05389 125B                        FF            .byte	$FF
05390                                           ! 987  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 125C                        30            .byte	$30
05392 125D                        30            .byte	$30
05393 125E                        18            .byte	$18
05394 125F                        00            .byte	0
05395 1260                        00            .byte	0
05396 1261                        00            .byte	0
05397 1262                        00            .byte	0
05398 1263                        00            .byte	0
05399                                           ! 988  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05400 1264                        00            .byte	0
05401 1265                        00            .byte	0
05402 1266                        78            .byte	$78
05403 1267                        0C            .byte	$C
05404 1268                        7C            .byte	$7C
05405 1269                        CC            .byte	$CC
05406 126A                        76            .byte	$76
05407 126B                        00            .byte	0
05408                                           ! 989  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05409 126C                        E0            .byte	$E0
05410 126D                        60            .byte	$60
05411 126E                        60            .byte	$60
05412 126F                        7C            .byte	$7C
05413 1270                        66            .byte	$66
05414 1271                        66            .byte	$66
05415 1272                        DC            .byte	$DC
05416 1273                        00            .byte	0
05417                                           ! 990  0x00, 0x00, 0x78, 0xcc, 0xc0,
05418 1274                        00            .byte	0
05419 1275                        00            .byte	0
05420 1276                        78            .byte	$78
05421 1277                        CC            .byte	$CC
05422                                           ! 990  0xcc, 0x78, 0x00,
05423 1278                        C0            .byte	$C0
05424 1279                        CC            .byte	$CC
05425 127A                        78            .byte	$78
05426 127B                        00            .byte	0
05427                                           ! 991  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 127C                        1C            .byte	$1C
05429 127D                        0C            .byte	$C
05430 127E                        0C            .byte	$C
05431 127F                        7C            .byte	$7C
05432 1280                        CC            .byte	$CC
05433 1281                        CC            .byte	$CC
05434 1282                        76            .byte	$76
05435 1283                        00            .byte	0
05436                                           ! 992  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1284                        00            .byte	0
05438 1285                        00            .byte	0
05439 1286                        78            .byte	$78
05440 1287                        CC            .byte	$CC
05441 1288                        FC            .byte	$FC
05442 1289                        C0            .byte	$C0
05443 128A                        78            .byte	$78
05444 128B                        00            .byte	0
05445                                           ! 993  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 128C                        38            .byte	$38
05447 128D                        6C            .byte	$6C
05448 128E                        60            .byte	$60
05449 128F                        F0            .byte	$F0
05450 1290                        60            .byte	$60
05451 1291                        60            .byte	$60
05452 1292                        F0            .byte	$F0
05453 1293                        00            .byte	0
05454                                           ! 994  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 1294                        00            .byte	0
05456 1295                        00            .byte	0
05457 1296                        76            .byte	$76
05458 1297                        CC            .byte	$CC
05459 1298                        CC            .byte	$CC
05460 1299                        7C            .byte	$7C
05461 129A                        0C            .byte	$C
05462 129B                        F8            .byte	$F8
05463                                           ! 995  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 129C                        E0            .byte	$E0
05465 129D                        60            .byte	$60
05466 129E                        6C            .byte	$6C
05467 129F                        76            .byte	$76
05468 12A0                        66            .byte	$66
05469 12A1                        66            .byte	$66
05470 12A2                        E6            .byte	$E6
05471 12A3                        00            .byte	0
05472                                           ! 996  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12A4                        30            .byte	$30
05474 12A5                        00            .byte	0
05475 12A6                        70            .byte	$70
05476 12A7                        30            .byte	$30
05477 12A8                        30            .byte	$30
05478 12A9                        30            .byte	$30
05479 12AA                        78            .byte	$78
05480 12AB                        00            .byte	0
05481                                           ! 997  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12AC                        0C            .byte	$C
05483 12AD                        00            .byte	0
05484 12AE                        0C            .byte	$C
05485 12AF                        0C            .byte	$C
05486 12B0                        0C            .byte	$C
05487 12B1                        CC            .byte	$CC
05488 12B2                        CC            .byte	$CC
05489 12B3                        78            .byte	$78
05490                                           ! 998  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12B4                        E0            .byte	$E0
05492 12B5                        60            .byte	$60
05493 12B6                        66            .byte	$66
05494 12B7                        6C            .byte	$6C
05495 12B8                        78            .byte	$78
05496 12B9                        6C            .byte	$6C
05497 12BA                        E6            .byte	$E6
05498 12BB                        00            .byte	0
05499                                           ! 999  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12BC                        70            .byte	$70
05501 12BD                        30            .byte	$30
05502 12BE                        30            .byte	$30
05503 12BF                        30            .byte	$30
05504 12C0                        30            .byte	$30
05505 12C1                        30            .byte	$30
05506 12C2                        78            .byte	$78
05507 12C3                        00            .byte	0
05508                                           ! 1000  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12C4                        00            .byte	0
05510 12C5                        00            .byte	0
05511 12C6                        CC            .byte	$CC
05512 12C7                        FE            .byte	$FE
05513 12C8                        FE            .byte	$FE
05514 12C9                        D6            .byte	$D6
05515 12CA                        C6            .byte	$C6
05516 12CB                        00            .byte	0
05517                                           ! 1001  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12CC                        00            .byte	0
05519 12CD                        00            .byte	0
05520 12CE                        F8            .byte	$F8
05521 12CF                        CC            .byte	$CC
05522 12D0                        CC            .byte	$CC
05523 12D1                        CC            .byte	$CC
05524 12D2                        CC            .byte	$CC
05525 12D3                        00            .byte	0
05526                                           ! 1002  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12D4                        00            .byte	0
05528 12D5                        00            .byte	0
05529 12D6                        78            .byte	$78
05530 12D7                        CC            .byte	$CC
05531 12D8                        CC            .byte	$CC
05532 12D9                        CC            .byte	$CC
05533 12DA                        78            .byte	$78
05534 12DB                        00            .byte	0
05535                                           ! 1003  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12DC                        00            .byte	0
05537 12DD                        00            .byte	0
05538 12DE                        DC            .byte	$DC
05539 12DF                        66            .byte	$66
05540 12E0                        66            .byte	$66
05541 12E1                        7C            .byte	$7C
05542 12E2                        60            .byte	$60
05543 12E3                        F0            .byte	$F0
05544                                           ! 1004  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12E4                        00            .byte	0
05546 12E5                        00            .byte	0
05547 12E6                        76            .byte	$76
05548 12E7                        CC            .byte	$CC
05549 12E8                        CC            .byte	$CC
05550 12E9                        7C            .byte	$7C
05551 12EA                        0C            .byte	$C
05552 12EB                        1E            .byte	$1E
05553                                           ! 1005  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12EC                        00            .byte	0
05555 12ED                        00            .byte	0
05556 12EE                        DC            .byte	$DC
05557 12EF                        76            .byte	$76
05558 12F0                        66            .byte	$66
05559 12F1                        60            .byte	$60
05560 12F2                        F0            .byte	$F0
05561 12F3                        00            .byte	0
05562                                           ! 1006  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 12F4                        00            .byte	0
05564 12F5                        00            .byte	0
05565 12F6                        7C            .byte	$7C
05566 12F7                        C0            .byte	$C0
05567 12F8                        78            .byte	$78
05568 12F9                        0C            .byte	$C
05569 12FA                        F8            .byte	$F8
05570 12FB                        00            .byte	0
05571                                           ! 1007  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 12FC                        10            .byte	$10
05573 12FD                        30            .byte	$30
05574 12FE                        7C            .byte	$7C
05575 12FF                        30            .byte	$30
05576 1300                        30            .byte	$30
05577 1301                        34            .byte	$34
05578 1302                        18            .byte	$18
05579 1303                        00            .byte	0
05580                                           ! 1008  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1304                        00            .byte	0
05582 1305                        00            .byte	0
05583 1306                        CC            .byte	$CC
05584 1307                        CC            .byte	$CC
05585 1308                        CC            .byte	$CC
05586 1309                        CC            .byte	$CC
05587 130A                        76            .byte	$76
05588 130B                        00            .byte	0
05589                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 130C                        00            .byte	0
05591 130D                        00            .byte	0
05592 130E                        CC            .byte	$CC
05593 130F                        CC            .byte	$CC
05594 1310                        CC            .byte	$CC
05595 1311                        78            .byte	$78
05596 1312                        30            .byte	$30
05597 1313                        00            .byte	0
05598                                           ! 1010  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1314                        00            .byte	0
05600 1315                        00            .byte	0
05601 1316                        C6            .byte	$C6
05602 1317                        D6            .byte	$D6
05603 1318                        FE            .byte	$FE
05604 1319                        FE            .byte	$FE
05605 131A                        6C            .byte	$6C
05606 131B                        00            .byte	0
05607                                           ! 1011  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 131C                        00            .byte	0
05609 131D                        00            .byte	0
05610 131E                        C6            .byte	$C6
05611 131F                        6C            .byte	$6C
05612 1320                        38            .byte	$38
05613 1321                        6C            .byte	$6C
05614 1322                        C6            .byte	$C6
05615 1323                        00            .byte	0
05616                                           ! 1012  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1324                        00            .byte	0
05618 1325                        00            .byte	0
05619 1326                        CC            .byte	$CC
05620 1327                        CC            .byte	$CC
05621 1328                        CC            .byte	$CC
05622 1329                        7C            .byte	$7C
05623 132A                        0C            .byte	$C
05624 132B                        F8            .byte	$F8
05625                                           ! 1013  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 132C                        00            .byte	0
05627 132D                        00            .byte	0
05628 132E                        FC            .byte	$FC
05629 132F                        98            .byte	$98
05630 1330                        30            .byte	$30
05631 1331                        64            .byte	$64
05632 1332                        FC            .byte	$FC
05633 1333                        00            .byte	0
05634                                           ! 1014  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1334                        1C            .byte	$1C
05636 1335                        30            .byte	$30
05637 1336                        30            .byte	$30
05638 1337                        E0            .byte	$E0
05639 1338                        30            .byte	$30
05640 1339                        30            .byte	$30
05641 133A                        1C            .byte	$1C
05642 133B                        00            .byte	0
05643                                           ! 1015  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 133C                        18            .byte	$18
05645 133D                        18            .byte	$18
05646 133E                        18            .byte	$18
05647 133F                        00            .byte	0
05648 1340                        18            .byte	$18
05649 1341                        18            .byte	$18
05650 1342                        18            .byte	$18
05651 1343                        00            .byte	0
05652                                           ! 1016  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1344                        E0            .byte	$E0
05654 1345                        30            .byte	$30
05655 1346                        30            .byte	$30
05656 1347                        1C            .byte	$1C
05657 1348                        30            .byte	$30
05658 1349                        30            .byte	$30
05659 134A                        E0            .byte	$E0
05660 134B                        00            .byte	0
05661                                           ! 1017  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 134C                        76            .byte	$76
05663 134D                        DC            .byte	$DC
05664 134E                        00            .byte	0
05665 134F                        00            .byte	0
05666 1350                        00            .byte	0
05667 1351                        00            .byte	0
05668 1352                        00            .byte	0
05669 1353                        00            .byte	0
05670                                           ! 1018  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1354                        00            .byte	0
05672 1355                        10            .byte	$10
05673 1356                        38            .byte	$38
05674 1357                        6C            .byte	$6C
05675 1358                        C6            .byte	$C6
05676 1359                        C6            .byte	$C6
05677 135A                        FE            .byte	$FE
05678 135B                        00            .byte	0
05679                                           ! 1019  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 135C                        78            .byte	$78
05681 135D                        CC            .byte	$CC
05682 135E                        C0            .byte	$C0
05683 135F                        CC            .byte	$CC
05684 1360                        78            .byte	$78
05685 1361                        18            .byte	$18
05686 1362                        0C            .byte	$C
05687 1363                        78            .byte	$78
05688                                           ! 1020  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1364                        00            .byte	0
05690 1365                        CC            .byte	$CC
05691 1366                        00            .byte	0
05692 1367                        CC            .byte	$CC
05693 1368                        CC            .byte	$CC
05694 1369                        CC            .byte	$CC
05695 136A                        7E            .byte	$7E
05696 136B                        00            .byte	0
05697                                           ! 1021  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 136C                        1C            .byte	$1C
05699 136D                        00            .byte	0
05700 136E                        78            .byte	$78
05701 136F                        CC            .byte	$CC
05702 1370                        FC            .byte	$FC
05703 1371                        C0            .byte	$C0
05704 1372                        78            .byte	$78
05705 1373                        00            .byte	0
05706                                           ! 1022  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1374                        7E            .byte	$7E
05708 1375                        C3            .byte	$C3
05709 1376                        3C            .byte	$3C
05710 1377                        06            .byte	6
05711 1378                        3E            .byte	$3E
05712 1379                        66            .byte	$66
05713 137A                        3F            .byte	$3F
05714 137B                        00            .byte	0
05715                                           ! 1023  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 137C                        CC            .byte	$CC
05717 137D                        00            .byte	0
05718 137E                        78            .byte	$78
05719 137F                        0C            .byte	$C
05720 1380                        7C            .byte	$7C
05721 1381                        CC            .byte	$CC
05722 1382                        7E            .byte	$7E
05723 1383                        00            .byte	0
05724                                           ! 1024  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1384                        E0            .byte	$E0
05726 1385                        00            .byte	0
05727 1386                        78            .byte	$78
05728 1387                        0C            .byte	$C
05729 1388                        7C            .byte	$7C
05730 1389                        CC            .byte	$CC
05731 138A                        7E            .byte	$7E
05732 138B                        00            .byte	0
05733                                           ! 1025  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 138C                        30            .byte	$30
05735 138D                        30            .byte	$30
05736 138E                        78            .byte	$78
05737 138F                        0C            .byte	$C
05738 1390                        7C            .byte	$7C
05739 1391                        CC            .byte	$CC
05740 1392                        7E            .byte	$7E
05741 1393                        00            .byte	0
05742                                           ! 1026  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 1394                        00            .byte	0
05744 1395                        00            .byte	0
05745 1396                        78            .byte	$78
05746 1397                        C0            .byte	$C0
05747 1398                        C0            .byte	$C0
05748 1399                        78            .byte	$78
05749 139A                        0C            .byte	$C
05750 139B                        38            .byte	$38
05751                                           ! 1027  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 139C                        7E            .byte	$7E
05753 139D                        C3            .byte	$C3
05754 139E                        3C            .byte	$3C
05755 139F                        66            .byte	$66
05756 13A0                        7E            .byte	$7E
05757 13A1                        60            .byte	$60
05758 13A2                        3C            .byte	$3C
05759 13A3                        00            .byte	0
05760                                           ! 1028  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13A4                        CC            .byte	$CC
05762 13A5                        00            .byte	0
05763 13A6                        78            .byte	$78
05764 13A7                        CC            .byte	$CC
05765 13A8                        FC            .byte	$FC
05766 13A9                        C0            .byte	$C0
05767 13AA                        78            .byte	$78
05768 13AB                        00            .byte	0
05769                                           ! 1029  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13AC                        E0            .byte	$E0
05771 13AD                        00            .byte	0
05772 13AE                        78            .byte	$78
05773 13AF                        CC            .byte	$CC
05774 13B0                        FC            .byte	$FC
05775 13B1                        C0            .byte	$C0
05776 13B2                        78            .byte	$78
05777 13B3                        00            .byte	0
05778                                           ! 1030  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05779 13B4                        CC            .byte	$CC
05780 13B5                        00            .byte	0
05781 13B6                        70            .byte	$70
05782 13B7                        30            .byte	$30
05783 13B8                        30            .byte	$30
05784 13B9                        30            .byte	$30
05785 13BA                        78            .byte	$78
05786 13BB                        00            .byte	0
05787                                           ! 1031  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05788 13BC                        7C            .byte	$7C
05789 13BD                        C6            .byte	$C6
05790 13BE                        38            .byte	$38
05791 13BF                        18            .byte	$18
05792 13C0                        18            .byte	$18
05793 13C1                        18            .byte	$18
05794 13C2                        3C            .byte	$3C
05795 13C3                        00            .byte	0
05796                                           ! 1032  0xe0, 0x00, 0x70, 0
05797 13C4                        E0            .byte	$E0
05798 13C5                        00            .byte	0
05799 13C6                        70            .byte	$70
05800                                           ! 1032 x30, 0x30, 0x30, 0x78, 0x00,
05801 13C7                        30            .byte	$30
05802 13C8                        30            .byte	$30
05803 13C9                        30            .byte	$30
05804 13CA                        78            .byte	$78
05805 13CB                        00            .byte	0
05806                                           ! 1033  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13CC                        C6            .byte	$C6
05808 13CD                        38            .byte	$38
05809 13CE                        6C            .byte	$6C
05810 13CF                        C6            .byte	$C6
05811 13D0                        FE            .byte	$FE
05812 13D1                        C6            .byte	$C6
05813 13D2                        C6            .byte	$C6
05814 13D3                        00            .byte	0
05815                                           ! 1034  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13D4                        30            .byte	$30
05817 13D5                        30            .byte	$30
05818 13D6                        00            .byte	0
05819 13D7                        78            .byte	$78
05820 13D8                        CC            .byte	$CC
05821 13D9                        FC            .byte	$FC
05822 13DA                        CC            .byte	$CC
05823 13DB                        00            .byte	0
05824                                           ! 1035  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13DC                        1C            .byte	$1C
05826 13DD                        00            .byte	0
05827 13DE                        FC            .byte	$FC
05828 13DF                        60            .byte	$60
05829 13E0                        78            .byte	$78
05830 13E1                        60            .byte	$60
05831 13E2                        FC            .byte	$FC
05832 13E3                        00            .byte	0
05833                                           ! 1036  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13E4                        00            .byte	0
05835 13E5                        00            .byte	0
05836 13E6                        7F            .byte	$7F
05837 13E7                        0C            .byte	$C
05838 13E8                        7F            .byte	$7F
05839 13E9                        CC            .byte	$CC
05840 13EA                        7F            .byte	$7F
05841 13EB                        00            .byte	0
05842                                           ! 1037  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13EC                        3E            .byte	$3E
05844 13ED                        6C            .byte	$6C
05845 13EE                        CC            .byte	$CC
05846 13EF                        FE            .byte	$FE
05847 13F0                        CC            .byte	$CC
05848 13F1                        CC            .byte	$CC
05849 13F2                        CE            .byte	$CE
05850 13F3                        00            .byte	0
05851                                           ! 1038  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 13F4                        78            .byte	$78
05853 13F5                        CC            .byte	$CC
05854 13F6                        00            .byte	0
05855 13F7                        78            .byte	$78
05856 13F8                        CC            .byte	$CC
05857 13F9                        CC            .byte	$CC
05858 13FA                        78            .byte	$78
05859 13FB                        00            .byte	0
05860                                           ! 1039  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 13FC                        00            .byte	0
05862 13FD                        CC            .byte	$CC
05863 13FE                        00            .byte	0
05864 13FF                        78            .byte	$78
05865 1400                        CC            .byte	$CC
05866 1401                        CC            .byte	$CC
05867 1402                        78            .byte	$78
05868 1403                        00            .byte	0
05869                                           ! 1040  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1404                        00            .byte	0
05871 1405                        E0            .byte	$E0
05872 1406                        00            .byte	0
05873 1407                        78            .byte	$78
05874 1408                        CC            .byte	$CC
05875 1409                        CC            .byte	$CC
05876 140A                        78            .byte	$78
05877 140B                        00            .byte	0
05878                                           ! 1041  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 140C                        78            .byte	$78
05880 140D                        CC            .byte	$CC
05881 140E                        00            .byte	0
05882 140F                        CC            .byte	$CC
05883 1410                        CC            .byte	$CC
05884 1411                        CC            .byte	$CC
05885 1412                        7E            .byte	$7E
05886 1413                        00            .byte	0
05887                                           ! 1042  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1414                        00            .byte	0
05889 1415                        E0            .byte	$E0
05890 1416                        00            .byte	0
05891 1417                        CC            .byte	$CC
05892 1418                        CC            .byte	$CC
05893 1419                        CC            .byte	$CC
05894 141A                        7E            .byte	$7E
05895 141B                        00            .byte	0
05896                                           ! 1043  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 141C                        00            .byte	0
05898 141D                        CC            .byte	$CC
05899 141E                        00            .byte	0
05900 141F                        CC            .byte	$CC
05901 1420                        CC            .byte	$CC
05902 1421                        7C            .byte	$7C
05903 1422                        0C            .byte	$C
05904 1423                        F8            .byte	$F8
05905                                           ! 1044  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1424                        C3            .byte	$C3
05907 1425                        18            .byte	$18
05908 1426                        3C            .byte	$3C
05909 1427                        66            .byte	$66
05910 1428                        66            .byte	$66
05911 1429                        3C            .byte	$3C
05912 142A                        18            .byte	$18
05913 142B                        00            .byte	0
05914                                           ! 1045  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 142C                        CC            .byte	$CC
05916 142D                        00            .byte	0
05917 142E                        CC            .byte	$CC
05918 142F                        CC            .byte	$CC
05919 1430                        CC            .byte	$CC
05920 1431                        CC            .byte	$CC
05921 1432                        78            .byte	$78
05922 1433                        00            .byte	0
05923                                           ! 1046  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1434                        18            .byte	$18
05925 1435                        18            .byte	$18
05926 1436                        7E            .byte	$7E
05927 1437                        C0            .byte	$C0
05928 1438                        C0            .byte	$C0
05929 1439                        7E            .byte	$7E
05930 143A                        18            .byte	$18
05931 143B                        18            .byte	$18
05932                                           ! 1047  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 143C                        38            .byte	$38
05934 143D                        6C            .byte	$6C
05935 143E                        64            .byte	$64
05936 143F                        F0            .byte	$F0
05937 1440                        60            .byte	$60
05938 1441                        E6            .byte	$E6
05939 1442                        FC            .byte	$FC
05940 1443                        00            .byte	0
05941                                           ! 1048  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1444                        CC            .byte	$CC
05943 1445                        CC            .byte	$CC
05944 1446                        78            .byte	$78
05945 1447                        FC            .byte	$FC
05946 1448                        30            .byte	$30
05947 1449                        FC            .byte	$FC
05948 144A                        30            .byte	$30
05949 144B                        30            .byte	$30
05950                                           ! 1049  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 144C                        F8            .byte	$F8
05952 144D                        CC            .byte	$CC
05953 144E                        CC            .byte	$CC
05954 144F                        FA            .byte	$FA
05955 1450                        C6            .byte	$C6
05956 1451                        CF            .byte	$CF
05957 1452                        C6            .byte	$C6
05958 1453                        C7            .byte	$C7
05959                                           ! 1050  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1454                        0E            .byte	$E
05961 1455                        1B            .byte	$1B
05962 1456                        18            .byte	$18
05963 1457                        3C            .byte	$3C
05964 1458                        18            .byte	$18
05965 1459                        18            .byte	$18
05966 145A                        D8            .byte	$D8
05967 145B                        70            .byte	$70
05968                                           ! 1051  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 145C                        1C            .byte	$1C
05970 145D                        00            .byte	0
05971 145E                        78            .byte	$78
05972 145F                        0C            .byte	$C
05973 1460                        7C            .byte	$7C
05974 1461                        CC            .byte	$CC
05975 1462                        7E            .byte	$7E
05976 1463                        00            .byte	0
05977                                           ! 1052  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1464                        38            .byte	$38
05979 1465                        00            .byte	0
05980 1466                        70            .byte	$70
05981 1467                        30            .byte	$30
05982 1468                        30            .byte	$30
05983 1469                        30            .byte	$30
05984 146A                        78            .byte	$78
05985 146B                        00            .byte	0
05986                                           ! 1053  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 146C                        00            .byte	0
05988 146D                        1C            .byte	$1C
05989 146E                        00            .byte	0
05990 146F                        78            .byte	$78
05991 1470                        CC            .byte	$CC
05992 1471                        CC            .byte	$CC
05993 1472                        78            .byte	$78
05994 1473                        00            .byte	0
05995                                           ! 1054  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1474                        00            .byte	0
05997 1475                        1C            .byte	$1C
05998 1476                        00            .byte	0
05999 1477                        CC            .byte	$CC
06000 1478                        CC            .byte	$CC
06001 1479                        CC            .byte	$CC
06002 147A                        7E            .byte	$7E
06003 147B                        00            .byte	0
06004                                           ! 1055  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 147C                        00            .byte	0
06006 147D                        F8            .byte	$F8
06007 147E                        00            .byte	0
06008 147F                        F8            .byte	$F8
06009 1480                        CC            .byte	$CC
06010 1481                        CC            .byte	$CC
06011 1482                        CC            .byte	$CC
06012 1483                        00            .byte	0
06013                                           ! 1056  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1484                        FC            .byte	$FC
06015 1485                        00            .byte	0
06016 1486                        CC            .byte	$CC
06017 1487                        EC            .byte	$EC
06018 1488                        FC            .byte	$FC
06019 1489                        DC            .byte	$DC
06020 148A                        CC            .byte	$CC
06021 148B                        00            .byte	0
06022                                           ! 1057  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 148C                        3C            .byte	$3C
06024 148D                        6C            .byte	$6C
06025 148E                        6C            .byte	$6C
06026 148F                        3E            .byte	$3E
06027 1490                        00            .byte	0
06028 1491                        7E            .byte	$7E
06029 1492                        00            .byte	0
06030 1493                        00            .byte	0
06031                                           ! 1058  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 1494                        38            .byte	$38
06033 1495                        6C            .byte	$6C
06034 1496                        6C            .byte	$6C
06035 1497                        38            .byte	$38
06036 1498                        00            .byte	0
06037 1499                        7C            .byte	$7C
06038 149A                        00            .byte	0
06039 149B                        00            .byte	0
06040                                           ! 1059  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 149C                        30            .byte	$30
06042 149D                        00            .byte	0
06043 149E                        30            .byte	$30
06044 149F                        60            .byte	$60
06045 14A0                        C0            .byte	$C0
06046 14A1                        CC            .byte	$CC
06047 14A2                        78            .byte	$78
06048 14A3                        00            .byte	0
06049                                           ! 1060  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14A4                        00            .byte	0
06051 14A5                        00            .byte	0
06052 14A6                        00            .byte	0
06053 14A7                        FC            .byte	$FC
06054 14A8                        C0            .byte	$C0
06055 14A9                        C0            .byte	$C0
06056 14AA                        00            .byte	0
06057 14AB                        00            .byte	0
06058                                           ! 1061  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14AC                        00            .byte	0
06060 14AD                        00            .byte	0
06061 14AE                        00            .byte	0
06062 14AF                        FC            .byte	$FC
06063 14B0                        0C            .byte	$C
06064 14B1                        0C            .byte	$C
06065 14B2                        00            .byte	0
06066 14B3                        00            .byte	0
06067                                           ! 1062  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14B4                        C3            .byte	$C3
06069 14B5                        C6            .byte	$C6
06070 14B6                        CC            .byte	$CC
06071 14B7                        DE            .byte	$DE
06072 14B8                        33            .byte	$33
06073 14B9                        66            .byte	$66
06074 14BA                        CC            .byte	$CC
06075 14BB                        0F            .byte	$F
06076                                           ! 1063  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14BC                        C3            .byte	$C3
06078 14BD                        C6            .byte	$C6
06079 14BE                        CC            .byte	$CC
06080 14BF                        DB            .byte	$DB
06081 14C0                        37            .byte	$37
06082 14C1                        6F            .byte	$6F
06083 14C2                        CF            .byte	$CF
06084 14C3                        03            .byte	3
06085                                           ! 1064  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14C4                        18            .byte	$18
06087 14C5                        18            .byte	$18
06088 14C6                        00            .byte	0
06089 14C7                        18            .byte	$18
06090 14C8                        18            .byte	$18
06091 14C9                        18            .byte	$18
06092 14CA                        18            .byte	$18
06093 14CB                        00            .byte	0
06094                                           ! 1065  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14CC                        00            .byte	0
06096 14CD                        33            .byte	$33
06097 14CE                        66            .byte	$66
06098 14CF                        CC            .byte	$CC
06099 14D0                        66            .byte	$66
06100 14D1                        33            .byte	$33
06101 14D2                        00            .byte	0
06102 14D3                        00            .byte	0
06103                                           ! 1066  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14D4                        00            .byte	0
06105 14D5                        CC            .byte	$CC
06106 14D6                        66            .byte	$66
06107 14D7                        33            .byte	$33
06108 14D8                        66            .byte	$66
06109 14D9                        CC            .byte	$CC
06110 14DA                        00            .byte	0
06111 14DB                        00            .byte	0
06112                                           ! 1067  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14DC                        22            .byte	$22
06114 14DD                        88            .byte	$88
06115 14DE                        22            .byte	$22
06116 14DF                        88            .byte	$88
06117 14E0                        22            .byte	$22
06118 14E1                        88            .byte	$88
06119 14E2                        22            .byte	$22
06120 14E3                        88            .byte	$88
06121                                           ! 1068  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14E4                        55            .byte	$55
06123 14E5                        AA            .byte	$AA
06124 14E6                        55            .byte	$55
06125 14E7                        AA            .byte	$AA
06126 14E8                        55            .byte	$55
06127 14E9                        AA            .byte	$AA
06128 14EA                        55            .byte	$55
06129 14EB                        AA            .byte	$AA
06130                                           ! 1069  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14EC                        DB            .byte	$DB
06132 14ED                        77            .byte	$77
06133 14EE                        DB            .byte	$DB
06134 14EF                        EE            .byte	$EE
06135 14F0                        DB            .byte	$DB
06136 14F1                        77            .byte	$77
06137 14F2                        DB            .byte	$DB
06138 14F3                        EE            .byte	$EE
06139                                           ! 1070  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 14F4                        18            .byte	$18
06141 14F5                        18            .byte	$18
06142 14F6                        18            .byte	$18
06143 14F7                        18            .byte	$18
06144 14F8                        18            .byte	$18
06145 14F9                        18            .byte	$18
06146 14FA                        18            .byte	$18
06147 14FB                        18            .byte	$18
06148                                           ! 1071  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 14FC                        18            .byte	$18
06150 14FD                        18            .byte	$18
06151 14FE                        18            .byte	$18
06152 14FF                        18            .byte	$18
06153 1500                        F8            .byte	$F8
06154 1501                        18            .byte	$18
06155 1502                        18            .byte	$18
06156 1503                        18            .byte	$18
06157                                           ! 1072  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06158 1504                        18            .byte	$18
06159 1505                        18            .byte	$18
06160 1506                        F8            .byte	$F8
06161 1507                        18            .byte	$18
06162 1508                        F8            .byte	$F8
06163 1509                        18            .byte	$18
06164 150A                        18            .byte	$18
06165 150B                        18            .byte	$18
06166                                           ! 1073  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06167 150C                        36            .byte	$36
06168 150D                        36            .byte	$36
06169 150E                        36            .byte	$36
06170 150F                        36            .byte	$36
06171 1510                        F6            .byte	$F6
06172 1511                        36            .byte	$36
06173 1512                        36            .byte	$36
06174 1513                        36            .byte	$36
06175                                           ! 1074  0x00, 0x0
06176 1514                        00            .byte	0
06177                                           ! 1074 0, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06178 1515                        00            .byte	0
06179 1516                        00            .byte	0
06180 1517                        00            .byte	0
06181 1518                        FE            .byte	$FE
06182 1519                        36            .byte	$36
06183 151A                        36            .byte	$36
06184 151B                        36            .byte	$36
06185                                           ! 1075  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 151C                        00            .byte	0
06187 151D                        00            .byte	0
06188 151E                        F8            .byte	$F8
06189 151F                        18            .byte	$18
06190 1520                        F8            .byte	$F8
06191 1521                        18            .byte	$18
06192 1522                        18            .byte	$18
06193 1523                        18            .byte	$18
06194                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1524                        36            .byte	$36
06196 1525                        36            .byte	$36
06197 1526                        F6            .byte	$F6
06198 1527                        06            .byte	6
06199 1528                        F6            .byte	$F6
06200 1529                        36            .byte	$36
06201 152A                        36            .byte	$36
06202 152B                        36            .byte	$36
06203                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 152C                        36            .byte	$36
06205 152D                        36            .byte	$36
06206 152E                        36            .byte	$36
06207 152F                        36            .byte	$36
06208 1530                        36            .byte	$36
06209 1531                        36            .byte	$36
06210 1532                        36            .byte	$36
06211 1533                        36            .byte	$36
06212                                           ! 1078  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1534                        00            .byte	0
06214 1535                        00            .byte	0
06215 1536                        FE            .byte	$FE
06216 1537                        06            .byte	6
06217 1538                        F6            .byte	$F6
06218 1539                        36            .byte	$36
06219 153A                        36            .byte	$36
06220 153B                        36            .byte	$36
06221                                           ! 1079  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 153C                        36            .byte	$36
06223 153D                        36            .byte	$36
06224 153E                        F6            .byte	$F6
06225 153F                        06            .byte	6
06226 1540                        FE            .byte	$FE
06227 1541                        00            .byte	0
06228 1542                        00            .byte	0
06229 1543                        00            .byte	0
06230                                           ! 1080  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1544                        36            .byte	$36
06232 1545                        36            .byte	$36
06233 1546                        36            .byte	$36
06234 1547                        36            .byte	$36
06235 1548                        FE            .byte	$FE
06236 1549                        00            .byte	0
06237 154A                        00            .byte	0
06238 154B                        00            .byte	0
06239                                           ! 1081  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 154C                        18            .byte	$18
06241 154D                        18            .byte	$18
06242 154E                        F8            .byte	$F8
06243 154F                        18            .byte	$18
06244 1550                        F8            .byte	$F8
06245 1551                        00            .byte	0
06246 1552                        00            .byte	0
06247 1553                        00            .byte	0
06248                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1554                        00            .byte	0
06250 1555                        00            .byte	0
06251 1556                        00            .byte	0
06252 1557                        00            .byte	0
06253 1558                        F8            .byte	$F8
06254 1559                        18            .byte	$18
06255 155A                        18            .byte	$18
06256 155B                        18            .byte	$18
06257                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 155C                        18            .byte	$18
06259 155D                        18            .byte	$18
06260 155E                        18            .byte	$18
06261 155F                        18            .byte	$18
06262 1560                        1F            .byte	$1F
06263 1561                        00            .byte	0
06264 1562                        00            .byte	0
06265 1563                        00            .byte	0
06266                                           ! 1084  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1564                        18            .byte	$18
06268 1565                        18            .byte	$18
06269 1566                        18            .byte	$18
06270 1567                        18            .byte	$18
06271 1568                        FF            .byte	$FF
06272 1569                        00            .byte	0
06273 156A                        00            .byte	0
06274 156B                        00            .byte	0
06275                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 156C                        00            .byte	0
06277 156D                        00            .byte	0
06278 156E                        00            .byte	0
06279 156F                        00            .byte	0
06280 1570                        FF            .byte	$FF
06281 1571                        18            .byte	$18
06282 1572                        18            .byte	$18
06283 1573                        18            .byte	$18
06284                                           ! 1086  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1574                        18            .byte	$18
06286 1575                        18            .byte	$18
06287 1576                        18            .byte	$18
06288 1577                        18            .byte	$18
06289 1578                        1F            .byte	$1F
06290 1579                        18            .byte	$18
06291 157A                        18            .byte	$18
06292 157B                        18            .byte	$18
06293                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 157C                        00            .byte	0
06295 157D                        00            .byte	0
06296 157E                        00            .byte	0
06297 157F                        00            .byte	0
06298 1580                        FF            .byte	$FF
06299 1581                        00            .byte	0
06300 1582                        00            .byte	0
06301 1583                        00            .byte	0
06302                                           ! 1088  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1584                        18            .byte	$18
06304 1585                        18            .byte	$18
06305 1586                        18            .byte	$18
06306 1587                        18            .byte	$18
06307 1588                        FF            .byte	$FF
06308 1589                        18            .byte	$18
06309 158A                        18            .byte	$18
06310 158B                        18            .byte	$18
06311                                           ! 1089  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 158C                        18            .byte	$18
06313 158D                        18            .byte	$18
06314 158E                        1F            .byte	$1F
06315 158F                        18            .byte	$18
06316 1590                        1F            .byte	$1F
06317 1591                        18            .byte	$18
06318 1592                        18            .byte	$18
06319 1593                        18            .byte	$18
06320                                           ! 1090  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 1594                        36            .byte	$36
06322 1595                        36            .byte	$36
06323 1596                        36            .byte	$36
06324 1597                        36            .byte	$36
06325 1598                        37            .byte	$37
06326 1599                        36            .byte	$36
06327 159A                        36            .byte	$36
06328 159B                        36            .byte	$36
06329                                           ! 1091  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 159C                        36            .byte	$36
06331 159D                        36            .byte	$36
06332 159E                        37            .byte	$37
06333 159F                        30            .byte	$30
06334 15A0                        3F            .byte	$3F
06335 15A1                        00            .byte	0
06336 15A2                        00            .byte	0
06337 15A3                        00            .byte	0
06338                                           ! 1092  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15A4                        00            .byte	0
06340 15A5                        00            .byte	0
06341 15A6                        3F            .byte	$3F
06342 15A7                        30            .byte	$30
06343 15A8                        37            .byte	$37
06344 15A9                        36            .byte	$36
06345 15AA                        36            .byte	$36
06346 15AB                        36            .byte	$36
06347                                           ! 1093  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15AC                        36            .byte	$36
06349 15AD                        36            .byte	$36
06350 15AE                        F7            .byte	$F7
06351 15AF                        00            .byte	0
06352 15B0                        FF            .byte	$FF
06353 15B1                        00            .byte	0
06354 15B2                        00            .byte	0
06355 15B3                        00            .byte	0
06356                                           ! 1094  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15B4                        00            .byte	0
06358 15B5                        00            .byte	0
06359 15B6                        FF            .byte	$FF
06360 15B7                        00            .byte	0
06361 15B8                        F7            .byte	$F7
06362 15B9                        36            .byte	$36
06363 15BA                        36            .byte	$36
06364 15BB                        36            .byte	$36
06365                                           ! 1095  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15BC                        36            .byte	$36
06367 15BD                        36            .byte	$36
06368 15BE                        37            .byte	$37
06369 15BF                        30            .byte	$30
06370 15C0                        37            .byte	$37
06371 15C1                        36            .byte	$36
06372 15C2                        36            .byte	$36
06373 15C3                        36            .byte	$36
06374                                           ! 1096  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15C4                        00            .byte	0
06376 15C5                        00            .byte	0
06377 15C6                        FF            .byte	$FF
06378 15C7                        00            .byte	0
06379 15C8                        FF            .byte	$FF
06380 15C9                        00            .byte	0
06381 15CA                        00            .byte	0
06382 15CB                        00            .byte	0
06383                                           ! 1097  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15CC                        36            .byte	$36
06385 15CD                        36            .byte	$36
06386 15CE                        F7            .byte	$F7
06387 15CF                        00            .byte	0
06388 15D0                        F7            .byte	$F7
06389 15D1                        36            .byte	$36
06390 15D2                        36            .byte	$36
06391 15D3                        36            .byte	$36
06392                                           ! 1098  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15D4                        18            .byte	$18
06394 15D5                        18            .byte	$18
06395 15D6                        FF            .byte	$FF
06396 15D7                        00            .byte	0
06397 15D8                        FF            .byte	$FF
06398 15D9                        00            .byte	0
06399 15DA                        00            .byte	0
06400 15DB                        00            .byte	0
06401                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15DC                        36            .byte	$36
06403 15DD                        36            .byte	$36
06404 15DE                        36            .byte	$36
06405 15DF                        36            .byte	$36
06406 15E0                        FF            .byte	$FF
06407 15E1                        00            .byte	0
06408 15E2                        00            .byte	0
06409 15E3                        00            .byte	0
06410                                           ! 1100  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15E4                        00            .byte	0
06412 15E5                        00            .byte	0
06413 15E6                        FF            .byte	$FF
06414 15E7                        00            .byte	0
06415 15E8                        FF            .byte	$FF
06416 15E9                        18            .byte	$18
06417 15EA                        18            .byte	$18
06418 15EB                        18            .byte	$18
06419                                           ! 1101  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15EC                        00            .byte	0
06421 15ED                        00            .byte	0
06422 15EE                        00            .byte	0
06423 15EF                        00            .byte	0
06424 15F0                        FF            .byte	$FF
06425 15F1                        36            .byte	$36
06426 15F2                        36            .byte	$36
06427 15F3                        36            .byte	$36
06428                                           ! 1102  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 15F4                        36            .byte	$36
06430 15F5                        36            .byte	$36
06431 15F6                        36            .byte	$36
06432 15F7                        36            .byte	$36
06433 15F8                        3F            .byte	$3F
06434 15F9                        00            .byte	0
06435 15FA                        00            .byte	0
06436 15FB                        00            .byte	0
06437                                           ! 1103  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 15FC                        18            .byte	$18
06439 15FD                        18            .byte	$18
06440 15FE                        1F            .byte	$1F
06441 15FF                        18            .byte	$18
06442 1600                        1F            .byte	$1F
06443 1601                        00            .byte	0
06444 1602                        00            .byte	0
06445 1603                        00            .byte	0
06446                                           ! 1104  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1604                        00            .byte	0
06448 1605                        00            .byte	0
06449 1606                        1F            .byte	$1F
06450 1607                        18            .byte	$18
06451 1608                        1F            .byte	$1F
06452 1609                        18            .byte	$18
06453 160A                        18            .byte	$18
06454 160B                        18            .byte	$18
06455                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 160C                        00            .byte	0
06457 160D                        00            .byte	0
06458 160E                        00            .byte	0
06459 160F                        00            .byte	0
06460 1610                        3F            .byte	$3F
06461 1611                        36            .byte	$36
06462 1612                        36            .byte	$36
06463 1613                        36            .byte	$36
06464                                           ! 1106  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1614                        36            .byte	$36
06466 1615                        36            .byte	$36
06467 1616                        36            .byte	$36
06468 1617                        36            .byte	$36
06469 1618                        FF            .byte	$FF
06470 1619                        36            .byte	$36
06471 161A                        36            .byte	$36
06472 161B                        36            .byte	$36
06473                                           ! 1107  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 161C                        18            .byte	$18
06475 161D                        18            .byte	$18
06476 161E                        FF            .byte	$FF
06477 161F                        18            .byte	$18
06478 1620                        FF            .byte	$FF
06479 1621                        18            .byte	$18
06480 1622                        18            .byte	$18
06481 1623                        18            .byte	$18
06482                                           ! 1108  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1624                        18            .byte	$18
06484 1625                        18            .byte	$18
06485 1626                        18            .byte	$18
06486 1627                        18            .byte	$18
06487 1628                        F8            .byte	$F8
06488 1629                        00            .byte	0
06489 162A                        00            .byte	0
06490 162B                        00            .byte	0
06491                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 162C                        00            .byte	0
06493 162D                        00            .byte	0
06494 162E                        00            .byte	0
06495 162F                        00            .byte	0
06496 1630                        1F            .byte	$1F
06497 1631                        18            .byte	$18
06498 1632                        18            .byte	$18
06499 1633                        18            .byte	$18
06500                                           ! 1110  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1634                        FF            .byte	$FF
06502 1635                        FF            .byte	$FF
06503 1636                        FF            .byte	$FF
06504 1637                        FF            .byte	$FF
06505 1638                        FF            .byte	$FF
06506 1639                        FF            .byte	$FF
06507 163A                        FF            .byte	$FF
06508 163B                        FF            .byte	$FF
06509                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 163C                        00            .byte	0
06511 163D                        00            .byte	0
06512 163E                        00            .byte	0
06513 163F                        00            .byte	0
06514 1640                        FF            .byte	$FF
06515 1641                        FF            .byte	$FF
06516 1642                        FF            .byte	$FF
06517 1643                        FF            .byte	$FF
06518                                           ! 1112  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1644                        F0            .byte	$F0
06520 1645                        F0            .byte	$F0
06521 1646                        F0            .byte	$F0
06522 1647                        F0            .byte	$F0
06523 1648                        F0            .byte	$F0
06524 1649                        F0            .byte	$F0
06525 164A                        F0            .byte	$F0
06526 164B                        F0            .byte	$F0
06527                                           ! 1113  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 164C                        0F            .byte	$F
06529 164D                        0F            .byte	$F
06530 164E                        0F            .byte	$F
06531 164F                        0F            .byte	$F
06532 1650                        0F            .byte	$F
06533 1651                        0F            .byte	$F
06534 1652                        0F            .byte	$F
06535 1653                        0F            .byte	$F
06536                                           ! 1114  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06537 1654                        FF            .byte	$FF
06538 1655                        FF            .byte	$FF
06539 1656                        FF            .byte	$FF
06540 1657                        FF            .byte	$FF
06541 1658                        00            .byte	0
06542 1659                        00            .byte	0
06543 165A                        00            .byte	0
06544 165B                        00            .byte	0
06545                                           ! 1115  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06546 165C                        00            .byte	0
06547 165D                        00            .byte	0
06548 165E                        76            .byte	$76
06549 165F                        DC            .byte	$DC
06550 1660                        C8            .byte	$C8
06551 1661                        DC            .byte	$DC
06552 1662                        76            .byte	$76
06553 1663                        00            .byte	0
06554                                           ! 1116 
06555                                           ! 1116  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1664                        00            .byte	0
06557 1665                        78            .byte	$78
06558 1666                        CC            .byte	$CC
06559 1667                        F8            .byte	$F8
06560 1668                        CC            .byte	$CC
06561 1669                        F8            .byte	$F8
06562 166A                        C0            .byte	$C0
06563 166B                        C0            .byte	$C0
06564                                           ! 1117  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 166C                        00            .byte	0
06566 166D                        FC            .byte	$FC
06567 166E                        CC            .byte	$CC
06568 166F                        C0            .byte	$C0
06569 1670                        C0            .byte	$C0
06570 1671                        C0            .byte	$C0
06571 1672                        C0            .byte	$C0
06572 1673                        00            .byte	0
06573                                           ! 1118  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1674                        00            .byte	0
06575 1675                        FE            .byte	$FE
06576 1676                        6C            .byte	$6C
06577 1677                        6C            .byte	$6C
06578 1678                        6C            .byte	$6C
06579 1679                        6C            .byte	$6C
06580 167A                        6C            .byte	$6C
06581 167B                        00            .byte	0
06582                                           ! 1119  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 167C                        FC            .byte	$FC
06584 167D                        CC            .byte	$CC
06585 167E                        60            .byte	$60
06586 167F                        30            .byte	$30
06587 1680                        60            .byte	$60
06588 1681                        CC            .byte	$CC
06589 1682                        FC            .byte	$FC
06590 1683                        00            .byte	0
06591                                           ! 1120  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1684                        00            .byte	0
06593 1685                        00            .byte	0
06594 1686                        7E            .byte	$7E
06595 1687                        D8            .byte	$D8
06596 1688                        D8            .byte	$D8
06597 1689                        D8            .byte	$D8
06598 168A                        70            .byte	$70
06599 168B                        00            .byte	0
06600                                           ! 1121  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 168C                        00            .byte	0
06602 168D                        66            .byte	$66
06603 168E                        66            .byte	$66
06604 168F                        66            .byte	$66
06605 1690                        66            .byte	$66
06606 1691                        7C            .byte	$7C
06607 1692                        60            .byte	$60
06608 1693                        C0            .byte	$C0
06609                                           ! 1122  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 1694                        00            .byte	0
06611 1695                        76            .byte	$76
06612 1696                        DC            .byte	$DC
06613 1697                        18            .byte	$18
06614 1698                        18            .byte	$18
06615 1699                        18            .byte	$18
06616 169A                        18            .byte	$18
06617 169B                        00            .byte	0
06618                                           ! 1123  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 169C                        FC            .byte	$FC
06620 169D                        30            .byte	$30
06621 169E                        78            .byte	$78
06622 169F                        CC            .byte	$CC
06623 16A0                        CC            .byte	$CC
06624 16A1                        78            .byte	$78
06625 16A2                        30            .byte	$30
06626 16A3                        FC            .byte	$FC
06627                                           ! 1124  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16A4                        38            .byte	$38
06629 16A5                        6C            .byte	$6C
06630 16A6                        C6            .byte	$C6
06631 16A7                        FE            .byte	$FE
06632 16A8                        C6            .byte	$C6
06633 16A9                        6C            .byte	$6C
06634 16AA                        38            .byte	$38
06635 16AB                        00            .byte	0
06636                                           ! 1125  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16AC                        38            .byte	$38
06638 16AD                        6C            .byte	$6C
06639 16AE                        C6            .byte	$C6
06640 16AF                        C6            .byte	$C6
06641 16B0                        6C            .byte	$6C
06642 16B1                        6C            .byte	$6C
06643 16B2                        EE            .byte	$EE
06644 16B3                        00            .byte	0
06645                                           ! 1126  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16B4                        1C            .byte	$1C
06647 16B5                        30            .byte	$30
06648 16B6                        18            .byte	$18
06649 16B7                        7C            .byte	$7C
06650 16B8                        CC            .byte	$CC
06651 16B9                        CC            .byte	$CC
06652 16BA                        78            .byte	$78
06653 16BB                        00            .byte	0
06654                                           ! 1127  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16BC                        00            .byte	0
06656 16BD                        00            .byte	0
06657 16BE                        7E            .byte	$7E
06658 16BF                        DB            .byte	$DB
06659 16C0                        DB            .byte	$DB
06660 16C1                        7E            .byte	$7E
06661 16C2                        00            .byte	0
06662 16C3                        00            .byte	0
06663                                           ! 1128  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16C4                        06            .byte	6
06665 16C5                        0C            .byte	$C
06666 16C6                        7E            .byte	$7E
06667 16C7                        DB            .byte	$DB
06668 16C8                        DB            .byte	$DB
06669 16C9                        7E            .byte	$7E
06670 16CA                        60            .byte	$60
06671 16CB                        C0            .byte	$C0
06672                                           ! 1129  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16CC                        38            .byte	$38
06674 16CD                        60            .byte	$60
06675 16CE                        C0            .byte	$C0
06676 16CF                        F8            .byte	$F8
06677 16D0                        C0            .byte	$C0
06678 16D1                        60            .byte	$60
06679 16D2                        38            .byte	$38
06680 16D3                        00            .byte	0
06681                                           ! 1130  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16D4                        78            .byte	$78
06683 16D5                        CC            .byte	$CC
06684 16D6                        CC            .byte	$CC
06685 16D7                        CC            .byte	$CC
06686 16D8                        CC            .byte	$CC
06687 16D9                        CC            .byte	$CC
06688 16DA                        CC            .byte	$CC
06689 16DB                        00            .byte	0
06690                                           ! 1131  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16DC                        00            .byte	0
06692 16DD                        FC            .byte	$FC
06693 16DE                        00            .byte	0
06694 16DF                        FC            .byte	$FC
06695 16E0                        00            .byte	0
06696 16E1                        FC            .byte	$FC
06697 16E2                        00            .byte	0
06698 16E3                        00            .byte	0
06699                                           ! 1132  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16E4                        30            .byte	$30
06701 16E5                        30            .byte	$30
06702 16E6                        FC            .byte	$FC
06703 16E7                        30            .byte	$30
06704 16E8                        30            .byte	$30
06705 16E9                        00            .byte	0
06706 16EA                        FC            .byte	$FC
06707 16EB                        00            .byte	0
06708                                           ! 1133  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16EC                        60            .byte	$60
06710 16ED                        30            .byte	$30
06711 16EE                        18            .byte	$18
06712 16EF                        30            .byte	$30
06713 16F0                        60            .byte	$60
06714 16F1                        00            .byte	0
06715 16F2                        FC            .byte	$FC
06716 16F3                        00            .byte	0
06717                                           ! 1134  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 16F4                        18            .byte	$18
06719 16F5                        30            .byte	$30
06720 16F6                        60            .byte	$60
06721 16F7                        30            .byte	$30
06722 16F8                        18            .byte	$18
06723 16F9                        00            .byte	0
06724 16FA                        FC            .byte	$FC
06725 16FB                        00            .byte	0
06726                                           ! 1135  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 16FC                        0E            .byte	$E
06728 16FD                        1B            .byte	$1B
06729 16FE                        1B            .byte	$1B
06730 16FF                        18            .byte	$18
06731 1700                        18            .byte	$18
06732 1701                        18            .byte	$18
06733 1702                        18            .byte	$18
06734 1703                        18            .byte	$18
06735                                           ! 1136  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1704                        18            .byte	$18
06737 1705                        18            .byte	$18
06738 1706                        18            .byte	$18
06739 1707                        18            .byte	$18
06740 1708                        18            .byte	$18
06741 1709                        D8            .byte	$D8
06742 170A                        D8            .byte	$D8
06743 170B                        70            .byte	$70
06744                                           ! 1137  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 170C                        30            .byte	$30
06746 170D                        30            .byte	$30
06747 170E                        00            .byte	0
06748 170F                        FC            .byte	$FC
06749 1710                        00            .byte	0
06750 1711                        30            .byte	$30
06751 1712                        30            .byte	$30
06752 1713                        00            .byte	0
06753                                           ! 1138  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1714                        00            .byte	0
06755 1715                        76            .byte	$76
06756 1716                        DC            .byte	$DC
06757 1717                        00            .byte	0
06758 1718                        76            .byte	$76
06759 1719                        DC            .byte	$DC
06760 171A                        00            .byte	0
06761 171B                        00            .byte	0
06762                                           ! 1139  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 171C                        38            .byte	$38
06764 171D                        6C            .byte	$6C
06765 171E                        6C            .byte	$6C
06766 171F                        38            .byte	$38
06767 1720                        00            .byte	0
06768 1721                        00            .byte	0
06769 1722                        00            .byte	0
06770 1723                        00            .byte	0
06771                                           ! 1140  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1724                        00            .byte	0
06773 1725                        00            .byte	0
06774 1726                        00            .byte	0
06775 1727                        18            .byte	$18
06776 1728                        18            .byte	$18
06777 1729                        00            .byte	0
06778 172A                        00            .byte	0
06779 172B                        00            .byte	0
06780                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 172C                        00            .byte	0
06782 172D                        00            .byte	0
06783 172E                        00            .byte	0
06784 172F                        00            .byte	0
06785 1730                        18            .byte	$18
06786 1731                        00            .byte	0
06787 1732                        00            .byte	0
06788 1733                        00            .byte	0
06789                                           ! 1142  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1734                        0F            .byte	$F
06791 1735                        0C            .byte	$C
06792 1736                        0C            .byte	$C
06793 1737                        0C            .byte	$C
06794 1738                        EC            .byte	$EC
06795 1739                        6C            .byte	$6C
06796 173A                        3C            .byte	$3C
06797 173B                        1C            .byte	$1C
06798                                           ! 1143  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 173C                        78            .byte	$78
06800 173D                        6C            .byte	$6C
06801 173E                        6C            .byte	$6C
06802 173F                        6C            .byte	$6C
06803 1740                        6C            .byte	$6C
06804 1741                        00            .byte	0
06805 1742                        00            .byte	0
06806 1743                        00            .byte	0
06807                                           ! 1144  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1744                        70            .byte	$70
06809 1745                        18            .byte	$18
06810 1746                        30            .byte	$30
06811 1747                        60            .byte	$60
06812 1748                        78            .byte	$78
06813 1749                        00            .byte	0
06814 174A                        00            .byte	0
06815 174B                        00            .byte	0
06816                                           ! 1145  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 174C                        00            .byte	0
06818 174D                        00            .byte	0
06819 174E                        3C            .byte	$3C
06820 174F                        3C            .byte	$3C
06821 1750                        3C            .byte	$3C
06822 1751                        3C            .byte	$3C
06823 1752                        00            .byte	0
06824 1753                        00            .byte	0
06825                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1754                        00            .byte	0
06827 1755                        00            .byte	0
06828 1756                        00            .byte	0
06829 1757                        00            .byte	0
06830 1758                        00            .byte	0
06831 1759                        00            .byte	0
06832 175A                        00            .byte	0
06833                                           ! 1147 };
06834 175B                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1148 static Bit8u vgafont14[256*14]=
06837                                           ! 1149 {
06838                       0000175C            _vgafont14:
06839                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 175C                        00            .byte	0
06841 175D                        00            .byte	0
06842 175E                        00            .byte	0
06843 175F                        00            .byte	0
06844 1760                        00            .byte	0
06845 1761                        00            .byte	0
06846 1762                        00            .byte	0
06847 1763                        00            .byte	0
06848 1764                        00            .byte	0
06849 1765                        00            .byte	0
06850 1766                        00            .byte	0
06851 1767                        00            .byte	0
06852 1768                        00            .byte	0
06853 1769                        00            .byte	0
06854                                           ! 1151  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 176A                        00            .byte	0
06856 176B                        00            .byte	0
06857 176C                        7E            .byte	$7E
06858 176D                        81            .byte	$81
06859 176E                        A5            .byte	$A5
06860 176F                        81            .byte	$81
06861 1770                        81            .byte	$81
06862 1771                        BD            .byte	$BD
06863 1772                        99            .byte	$99
06864 1773                        81            .byte	$81
06865 1774                        7E            .byte	$7E
06866 1775                        00            .byte	0
06867 1776                        00            .byte	0
06868 1777                        00            .byte	0
06869                                           ! 1152  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 1778                        00            .byte	0
06871 1779                        00            .byte	0
06872 177A                        7E            .byte	$7E
06873 177B                        FF            .byte	$FF
06874 177C                        DB            .byte	$DB
06875 177D                        FF            .byte	$FF
06876 177E                        FF            .byte	$FF
06877 177F                        C3            .byte	$C3
06878 1780                        E7            .byte	$E7
06879 1781                        FF            .byte	$FF
06880 1782                        7E            .byte	$7E
06881 1783                        00            .byte	0
06882 1784                        00            .byte	0
06883 1785                        00            .byte	0
06884                                           ! 1153  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 1786                        00            .byte	0
06886 1787                        00            .byte	0
06887 1788                        00            .byte	0
06888 1789                        6C            .byte	$6C
06889 178A                        FE            .byte	$FE
06890 178B                        FE            .byte	$FE
06891 178C                        FE            .byte	$FE
06892 178D                        FE            .byte	$FE
06893 178E                        7C            .byte	$7C
06894 178F                        38            .byte	$38
06895 1790                        10            .byte	$10
06896 1791                        00            .byte	0
06897 1792                        00            .byte	0
06898 1793                        00            .byte	0
06899                                           ! 1154  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06900 1794                        00            .byte	0
06901 1795                        00            .byte	0
06902 1796                        00            .byte	0
06903 1797                        10            .byte	$10
06904 1798                        38            .byte	$38
06905 1799                        7C            .byte	$7C
06906 179A                        FE            .byte	$FE
06907 179B                        7C            .byte	$7C
06908 179C                        38            .byte	$38
06909 179D                        10            .byte	$10
06910 179E                        00            .byte	0
06911 179F                        00            .byte	0
06912 17A0                        00            .byte	0
06913 17A1                        00            .byte	0
06914                                           ! 1155  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0
06915 17A2                        00            .byte	0
06916 17A3                        00            .byte	0
06917 17A4                        18            .byte	$18
06918 17A5                        3C            .byte	$3C
06919 17A6                        3C            .byte	$3C
06920 17A7                        E7            .byte	$E7
06921 17A8                        E7            .byte	$E7
06922 17A9                        E7            .byte	$E7
06923 17AA                        18            .byte	$18
06924 17AB                        18            .byte	$18
06925 17AC                        3C            .byte	$3C
06926                                           ! 1155 x00, 0x00, 0x00,
06927 17AD                        00            .byte	0
06928 17AE                        00            .byte	0
06929 17AF                        00            .byte	0
06930                                           ! 1156  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17B0                        00            .byte	0
06932 17B1                        00            .byte	0
06933 17B2                        18            .byte	$18
06934 17B3                        3C            .byte	$3C
06935 17B4                        7E            .byte	$7E
06936 17B5                        FF            .byte	$FF
06937 17B6                        FF            .byte	$FF
06938 17B7                        7E            .byte	$7E
06939 17B8                        18            .byte	$18
06940 17B9                        18            .byte	$18
06941 17BA                        3C            .byte	$3C
06942 17BB                        00            .byte	0
06943 17BC                        00            .byte	0
06944 17BD                        00            .byte	0
06945                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17BE                        00            .byte	0
06947 17BF                        00            .byte	0
06948 17C0                        00            .byte	0
06949 17C1                        00            .byte	0
06950 17C2                        00            .byte	0
06951 17C3                        18            .byte	$18
06952 17C4                        3C            .byte	$3C
06953 17C5                        3C            .byte	$3C
06954 17C6                        18            .byte	$18
06955 17C7                        00            .byte	0
06956 17C8                        00            .byte	0
06957 17C9                        00            .byte	0
06958 17CA                        00            .byte	0
06959 17CB                        00            .byte	0
06960                                           ! 1158  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17CC                        FF            .byte	$FF
06962 17CD                        FF            .byte	$FF
06963 17CE                        FF            .byte	$FF
06964 17CF                        FF            .byte	$FF
06965 17D0                        FF            .byte	$FF
06966 17D1                        E7            .byte	$E7
06967 17D2                        C3            .byte	$C3
06968 17D3                        C3            .byte	$C3
06969 17D4                        E7            .byte	$E7
06970 17D5                        FF            .byte	$FF
06971 17D6                        FF            .byte	$FF
06972 17D7                        FF            .byte	$FF
06973 17D8                        FF            .byte	$FF
06974 17D9                        FF            .byte	$FF
06975                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17DA                        00            .byte	0
06977 17DB                        00            .byte	0
06978 17DC                        00            .byte	0
06979 17DD                        00            .byte	0
06980 17DE                        3C            .byte	$3C
06981 17DF                        66            .byte	$66
06982 17E0                        42            .byte	$42
06983 17E1                        42            .byte	$42
06984 17E2                        66            .byte	$66
06985 17E3                        3C            .byte	$3C
06986 17E4                        00            .byte	0
06987 17E5                        00            .byte	0
06988 17E6                        00            .byte	0
06989 17E7                        00            .byte	0
06990                                           ! 1160  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17E8                        FF            .byte	$FF
06992 17E9                        FF            .byte	$FF
06993 17EA                        FF            .byte	$FF
06994 17EB                        FF            .byte	$FF
06995 17EC                        C3            .byte	$C3
06996 17ED                        99            .byte	$99
06997 17EE                        BD            .byte	$BD
06998 17EF                        BD            .byte	$BD
06999 17F0                        99            .byte	$99
07000 17F1                        C3            .byte	$C3
07001 17F2                        FF            .byte	$FF
07002 17F3                        FF            .byte	$FF
07003 17F4                        FF            .byte	$FF
07004 17F5                        FF            .byte	$FF
07005                                           ! 1161  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 17F6                        00            .byte	0
07007 17F7                        00            .byte	0
07008 17F8                        1E            .byte	$1E
07009 17F9                        0E            .byte	$E
07010 17FA                        1A            .byte	$1A
07011 17FB                        32            .byte	$32
07012 17FC                        78            .byte	$78
07013 17FD                        CC            .byte	$CC
07014 17FE                        CC            .byte	$CC
07015 17FF                        CC            .byte	$CC
07016 1800                        78            .byte	$78
07017 1801                        00            .byte	0
07018 1802                        00            .byte	0
07019 1803                        00            .byte	0
07020                                           ! 1162  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1804                        00            .byte	0
07022 1805                        00            .byte	0
07023 1806                        3C            .byte	$3C
07024 1807                        66            .byte	$66
07025 1808                        66            .byte	$66
07026 1809                        66            .byte	$66
07027 180A                        3C            .byte	$3C
07028 180B                        18            .byte	$18
07029 180C                        7E            .byte	$7E
07030 180D                        18            .byte	$18
07031 180E                        18            .byte	$18
07032 180F                        00            .byte	0
07033 1810                        00            .byte	0
07034 1811                        00            .byte	0
07035                                           ! 1163  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1812                        00            .byte	0
07037 1813                        00            .byte	0
07038 1814                        3F            .byte	$3F
07039 1815                        33            .byte	$33
07040 1816                        3F            .byte	$3F
07041 1817                        30            .byte	$30
07042 1818                        30            .byte	$30
07043 1819                        30            .byte	$30
07044 181A                        70            .byte	$70
07045 181B                        F0            .byte	$F0
07046 181C                        E0            .byte	$E0
07047 181D                        00            .byte	0
07048 181E                        00            .byte	0
07049 181F                        00            .byte	0
07050                                           ! 1164  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 1820                        00            .byte	0
07052 1821                        00            .byte	0
07053 1822                        7F            .byte	$7F
07054 1823                        63            .byte	$63
07055 1824                        7F            .byte	$7F
07056 1825                        63            .byte	$63
07057 1826                        63            .byte	$63
07058 1827                        63            .byte	$63
07059 1828                        67            .byte	$67
07060 1829                        E7            .byte	$E7
07061 182A                        E6            .byte	$E6
07062 182B                        C0            .byte	$C0
07063 182C                        00            .byte	0
07064 182D                        00            .byte	0
07065                                           ! 1165  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 182E                        00            .byte	0
07067 182F                        00            .byte	0
07068 1830                        18            .byte	$18
07069 1831                        18            .byte	$18
07070 1832                        DB            .byte	$DB
07071 1833                        3C            .byte	$3C
07072 1834                        E7            .byte	$E7
07073 1835                        3C            .byte	$3C
07074 1836                        DB            .byte	$DB
07075 1837                        18            .byte	$18
07076 1838                        18            .byte	$18
07077 1839                        00            .byte	0
07078 183A                        00            .byte	0
07079 183B                        00            .byte	0
07080                                           ! 1166  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 183C                        00            .byte	0
07082 183D                        00            .byte	0
07083 183E                        80            .byte	$80
07084 183F                        C0            .byte	$C0
07085 1840                        E0            .byte	$E0
07086 1841                        F8            .byte	$F8
07087 1842                        FE            .byte	$FE
07088 1843                        F8            .byte	$F8
07089 1844                        E0            .byte	$E0
07090 1845                        C0            .byte	$C0
07091 1846                        80            .byte	$80
07092 1847                        00            .byte	0
07093 1848                        00            .byte	0
07094 1849                        00            .byte	0
07095                                           ! 1167  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 184A                        00            .byte	0
07097 184B                        00            .byte	0
07098 184C                        02            .byte	2
07099 184D                        06            .byte	6
07100 184E                        0E            .byte	$E
07101 184F                        3E            .byte	$3E
07102 1850                        FE            .byte	$FE
07103 1851                        3E            .byte	$3E
07104 1852                        0E            .byte	$E
07105 1853                        06            .byte	6
07106 1854                        02            .byte	2
07107 1855                        00            .byte	0
07108 1856                        00            .byte	0
07109 1857                        00            .byte	0
07110                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 1858                        00            .byte	0
07112 1859                        00            .byte	0
07113 185A                        18            .byte	$18
07114 185B                        3C            .byte	$3C
07115 185C                        7E            .byte	$7E
07116 185D                        18            .byte	$18
07117 185E                        18            .byte	$18
07118 185F                        18            .byte	$18
07119 1860                        7E            .byte	$7E
07120 1861                        3C            .byte	$3C
07121 1862                        18            .byte	$18
07122 1863                        00            .byte	0
07123 1864                        00            .byte	0
07124 1865                        00            .byte	0
07125                                           ! 1169  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 1866                        00            .byte	0
07127 1867                        00            .byte	0
07128 1868                        66            .byte	$66
07129 1869                        66            .byte	$66
07130 186A                        66            .byte	$66
07131 186B                        66            .byte	$66
07132 186C                        66            .byte	$66
07133 186D                        66            .byte	$66
07134 186E                        00            .byte	0
07135 186F                        66            .byte	$66
07136 1870                        66            .byte	$66
07137 1871                        00            .byte	0
07138 1872                        00            .byte	0
07139 1873                        00            .byte	0
07140                                           ! 1170  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1874                        00            .byte	0
07142 1875                        00            .byte	0
07143 1876                        7F            .byte	$7F
07144 1877                        DB            .byte	$DB
07145 1878                        DB            .byte	$DB
07146 1879                        DB            .byte	$DB
07147 187A                        7B            .byte	$7B
07148 187B                        1B            .byte	$1B
07149 187C                        1B            .byte	$1B
07150 187D                        1B            .byte	$1B
07151 187E                        1B            .byte	$1B
07152 187F                        00            .byte	0
07153 1880                        00            .byte	0
07154 1881                        00            .byte	0
07155                                           ! 1171  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1882                        00            .byte	0
07157 1883                        7C            .byte	$7C
07158 1884                        C6            .byte	$C6
07159 1885                        60            .byte	$60
07160 1886                        38            .byte	$38
07161 1887                        6C            .byte	$6C
07162 1888                        C6            .byte	$C6
07163 1889                        C6            .byte	$C6
07164 188A                        6C            .byte	$6C
07165 188B                        38            .byte	$38
07166 188C                        0C            .byte	$C
07167 188D                        C6            .byte	$C6
07168 188E                        7C            .byte	$7C
07169 188F                        00            .byte	0
07170                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 1890                        00            .byte	0
07172 1891                        00            .byte	0
07173 1892                        00            .byte	0
07174 1893                        00            .byte	0
07175 1894                        00            .byte	0
07176 1895                        00            .byte	0
07177 1896                        00            .byte	0
07178 1897                        00            .byte	0
07179 1898                        FE            .byte	$FE
07180 1899                        FE            .byte	$FE
07181 189A                        FE            .byte	$FE
07182 189B                        00            .byte	0
07183 189C                        00            .byte	0
07184 189D                        00            .byte	0
07185                                           ! 1173  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 189E                        00            .byte	0
07187 189F                        00            .byte	0
07188 18A0                        18            .byte	$18
07189 18A1                        3C            .byte	$3C
07190 18A2                        7E            .byte	$7E
07191 18A3                        18            .byte	$18
07192 18A4                        18            .byte	$18
07193 18A5                        18            .byte	$18
07194 18A6                        7E            .byte	$7E
07195 18A7                        3C            .byte	$3C
07196 18A8                        18            .byte	$18
07197 18A9                        7E            .byte	$7E
07198 18AA                        00            .byte	0
07199 18AB                        00            .byte	0
07200                                           ! 1174  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18AC                        00            .byte	0
07202 18AD                        00            .byte	0
07203 18AE                        18            .byte	$18
07204 18AF                        3C            .byte	$3C
07205 18B0                        7E            .byte	$7E
07206 18B1                        18            .byte	$18
07207 18B2                        18            .byte	$18
07208 18B3                        18            .byte	$18
07209 18B4                        18            .byte	$18
07210 18B5                        18            .byte	$18
07211 18B6                        18            .byte	$18
07212 18B7                        00            .byte	0
07213 18B8                        00            .byte	0
07214 18B9                        00            .byte	0
07215                                           ! 1175  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18BA                        00            .byte	0
07217 18BB                        00            .byte	0
07218 18BC                        18            .byte	$18
07219 18BD                        18            .byte	$18
07220 18BE                        18            .byte	$18
07221 18BF                        18            .byte	$18
07222 18C0                        18            .byte	$18
07223 18C1                        18            .byte	$18
07224 18C2                        7E            .byte	$7E
07225 18C3                        3C            .byte	$3C
07226 18C4                        18            .byte	$18
07227 18C5                        00            .byte	0
07228 18C6                        00            .byte	0
07229 18C7                        00            .byte	0
07230                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18C8                        00            .byte	0
07232 18C9                        00            .byte	0
07233 18CA                        00            .byte	0
07234 18CB                        00            .byte	0
07235 18CC                        18            .byte	$18
07236 18CD                        0C            .byte	$C
07237 18CE                        FE            .byte	$FE
07238 18CF                        0C            .byte	$C
07239 18D0                        18            .byte	$18
07240 18D1                        00            .byte	0
07241 18D2                        00            .byte	0
07242 18D3                        00            .byte	0
07243 18D4                        00            .byte	0
07244 18D5                        00            .byte	0
07245                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18D6                        00            .byte	0
07247 18D7                        00            .byte	0
07248 18D8                        00            .byte	0
07249 18D9                        00            .byte	0
07250 18DA                        30            .byte	$30
07251 18DB                        60            .byte	$60
07252 18DC                        FE            .byte	$FE
07253 18DD                        60            .byte	$60
07254 18DE                        30            .byte	$30
07255 18DF                        00            .byte	0
07256 18E0                        00            .byte	0
07257 18E1                        00            .byte	0
07258 18E2                        00            .byte	0
07259 18E3                        00            .byte	0
07260                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07261 18E4                        00            .byte	0
07262 18E5                        00            .byte	0
07263 18E6                        00            .byte	0
07264 18E7                        00            .byte	0
07265 18E8                        00            .byte	0
07266 18E9                        C0            .byte	$C0
07267 18EA                        C0            .byte	$C0
07268 18EB                        C0            .byte	$C0
07269 18EC                        FE            .byte	$FE
07270 18ED                        00            .byte	0
07271 18EE                        00            .byte	0
07272 18EF                        00            .byte	0
07273 18F0                        00            .byte	0
07274 18F1                        00            .byte	0
07275                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x0
07276 18F2                        00            .byte	0
07277 18F3                        00            .byte	0
07278 18F4                        00            .byte	0
07279 18F5                        00            .byte	0
07280 18F6                        28            .byte	$28
07281 18F7                        6C            .byte	$6C
07282 18F8                        FE            .byte	$FE
07283 18F9                        6C            .byte	$6C
07284 18FA                        28            .byte	$28
07285 18FB                        00            .byte	0
07286 18FC                        00            .byte	0
07287 18FD                        00            .byte	0
07288                                           ! 1179 0, 0x00,
07289 18FE                        00            .byte	0
07290 18FF                        00            .byte	0
07291                                           ! 1180  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 1900                        00            .byte	0
07293 1901                        00            .byte	0
07294 1902                        00            .byte	0
07295 1903                        10            .byte	$10
07296 1904                        38            .byte	$38
07297 1905                        38            .byte	$38
07298 1906                        7C            .byte	$7C
07299 1907                        7C            .byte	$7C
07300 1908                        FE            .byte	$FE
07301 1909                        FE            .byte	$FE
07302 190A                        00            .byte	0
07303 190B                        00            .byte	0
07304 190C                        00            .byte	0
07305 190D                        00            .byte	0
07306                                           ! 1181  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 190E                        00            .byte	0
07308 190F                        00            .byte	0
07309 1910                        00            .byte	0
07310 1911                        FE            .byte	$FE
07311 1912                        FE            .byte	$FE
07312 1913                        7C            .byte	$7C
07313 1914                        7C            .byte	$7C
07314 1915                        38            .byte	$38
07315 1916                        38            .byte	$38
07316 1917                        10            .byte	$10
07317 1918                        00            .byte	0
07318 1919                        00            .byte	0
07319 191A                        00            .byte	0
07320 191B                        00            .byte	0
07321                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 191C                        00            .byte	0
07323 191D                        00            .byte	0
07324 191E                        00            .byte	0
07325 191F                        00            .byte	0
07326 1920                        00            .byte	0
07327 1921                        00            .byte	0
07328 1922                        00            .byte	0
07329 1923                        00            .byte	0
07330 1924                        00            .byte	0
07331 1925                        00            .byte	0
07332 1926                        00            .byte	0
07333 1927                        00            .byte	0
07334 1928                        00            .byte	0
07335 1929                        00            .byte	0
07336                                           ! 1183  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 192A                        00            .byte	0
07338 192B                        00            .byte	0
07339 192C                        18            .byte	$18
07340 192D                        3C            .byte	$3C
07341 192E                        3C            .byte	$3C
07342 192F                        3C            .byte	$3C
07343 1930                        18            .byte	$18
07344 1931                        18            .byte	$18
07345 1932                        00            .byte	0
07346 1933                        18            .byte	$18
07347 1934                        18            .byte	$18
07348 1935                        00            .byte	0
07349 1936                        00            .byte	0
07350 1937                        00            .byte	0
07351                                           ! 1184  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 1938                        00            .byte	0
07353 1939                        66            .byte	$66
07354 193A                        66            .byte	$66
07355 193B                        66            .byte	$66
07356 193C                        24            .byte	$24
07357 193D                        00            .byte	0
07358 193E                        00            .byte	0
07359 193F                        00            .byte	0
07360 1940                        00            .byte	0
07361 1941                        00            .byte	0
07362 1942                        00            .byte	0
07363 1943                        00            .byte	0
07364 1944                        00            .byte	0
07365 1945                        00            .byte	0
07366                                           ! 1185  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 1946                        00            .byte	0
07368 1947                        00            .byte	0
07369 1948                        6C            .byte	$6C
07370 1949                        6C            .byte	$6C
07371 194A                        FE            .byte	$FE
07372 194B                        6C            .byte	$6C
07373 194C                        6C            .byte	$6C
07374 194D                        6C            .byte	$6C
07375 194E                        FE            .byte	$FE
07376 194F                        6C            .byte	$6C
07377 1950                        6C            .byte	$6C
07378 1951                        00            .byte	0
07379 1952                        00            .byte	0
07380 1953                        00            .byte	0
07381                                           ! 1186  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1954                        18            .byte	$18
07383 1955                        18            .byte	$18
07384 1956                        7C            .byte	$7C
07385 1957                        C6            .byte	$C6
07386 1958                        C2            .byte	$C2
07387 1959                        C0            .byte	$C0
07388 195A                        7C            .byte	$7C
07389 195B                        06            .byte	6
07390 195C                        86            .byte	$86
07391 195D                        C6            .byte	$C6
07392 195E                        7C            .byte	$7C
07393 195F                        18            .byte	$18
07394 1960                        18            .byte	$18
07395 1961                        00            .byte	0
07396                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1962                        00            .byte	0
07398 1963                        00            .byte	0
07399 1964                        00            .byte	0
07400 1965                        00            .byte	0
07401 1966                        C2            .byte	$C2
07402 1967                        C6            .byte	$C6
07403 1968                        0C            .byte	$C
07404 1969                        18            .byte	$18
07405 196A                        30            .byte	$30
07406 196B                        66            .byte	$66
07407 196C                        C6            .byte	$C6
07408 196D                        00            .byte	0
07409 196E                        00            .byte	0
07410 196F                        00            .byte	0
07411                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 1970                        00            .byte	0
07413 1971                        00            .byte	0
07414 1972                        38            .byte	$38
07415 1973                        6C            .byte	$6C
07416 1974                        6C            .byte	$6C
07417 1975                        38            .byte	$38
07418 1976                        76            .byte	$76
07419 1977                        DC            .byte	$DC
07420 1978                        CC            .byte	$CC
07421 1979                        CC            .byte	$CC
07422 197A                        76            .byte	$76
07423 197B                        00            .byte	0
07424 197C                        00            .byte	0
07425 197D                        00            .byte	0
07426                                           ! 1189  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 197E                        00            .byte	0
07428 197F                        30            .byte	$30
07429 1980                        30            .byte	$30
07430 1981                        30            .byte	$30
07431 1982                        60            .byte	$60
07432 1983                        00            .byte	0
07433 1984                        00            .byte	0
07434 1985                        00            .byte	0
07435 1986                        00            .byte	0
07436 1987                        00            .byte	0
07437 1988                        00            .byte	0
07438 1989                        00            .byte	0
07439 198A                        00            .byte	0
07440 198B                        00            .byte	0
07441                                           ! 1190  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 198C                        00            .byte	0
07443 198D                        00            .byte	0
07444 198E                        0C            .byte	$C
07445 198F                        18            .byte	$18
07446 1990                        30            .byte	$30
07447 1991                        30            .byte	$30
07448 1992                        30            .byte	$30
07449 1993                        30            .byte	$30
07450 1994                        30            .byte	$30
07451 1995                        18            .byte	$18
07452 1996                        0C            .byte	$C
07453 1997                        00            .byte	0
07454 1998                        00            .byte	0
07455 1999                        00            .byte	0
07456                                           ! 1191  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 199A                        00            .byte	0
07458 199B                        00            .byte	0
07459 199C                        30            .byte	$30
07460 199D                        18            .byte	$18
07461 199E                        0C            .byte	$C
07462 199F                        0C            .byte	$C
07463 19A0                        0C            .byte	$C
07464 19A1                        0C            .byte	$C
07465 19A2                        0C            .byte	$C
07466 19A3                        18            .byte	$18
07467 19A4                        30            .byte	$30
07468 19A5                        00            .byte	0
07469 19A6                        00            .byte	0
07470 19A7                        00            .byte	0
07471                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19A8                        00            .byte	0
07473 19A9                        00            .byte	0
07474 19AA                        00            .byte	0
07475 19AB                        00            .byte	0
07476 19AC                        66            .byte	$66
07477 19AD                        3C            .byte	$3C
07478 19AE                        FF            .byte	$FF
07479 19AF                        3C            .byte	$3C
07480 19B0                        66            .byte	$66
07481 19B1                        00            .byte	0
07482 19B2                        00            .byte	0
07483 19B3                        00            .byte	0
07484 19B4                        00            .byte	0
07485 19B5                        00            .byte	0
07486                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19B6                        00            .byte	0
07488 19B7                        00            .byte	0
07489 19B8                        00            .byte	0
07490 19B9                        00            .byte	0
07491 19BA                        18            .byte	$18
07492 19BB                        18            .byte	$18
07493 19BC                        7E            .byte	$7E
07494 19BD                        18            .byte	$18
07495 19BE                        18            .byte	$18
07496 19BF                        00            .byte	0
07497 19C0                        00            .byte	0
07498 19C1                        00            .byte	0
07499 19C2                        00            .byte	0
07500 19C3                        00            .byte	0
07501                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19C4                        00            .byte	0
07503 19C5                        00            .byte	0
07504 19C6                        00            .byte	0
07505 19C7                        00            .byte	0
07506 19C8                        00            .byte	0
07507 19C9                        00            .byte	0
07508 19CA                        00            .byte	0
07509 19CB                        00            .byte	0
07510 19CC                        18            .byte	$18
07511 19CD                        18            .byte	$18
07512 19CE                        18            .byte	$18
07513 19CF                        30            .byte	$30
07514 19D0                        00            .byte	0
07515 19D1                        00            .byte	0
07516                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19D2                        00            .byte	0
07518 19D3                        00            .byte	0
07519 19D4                        00            .byte	0
07520 19D5                        00            .byte	0
07521 19D6                        00            .byte	0
07522 19D7                        00            .byte	0
07523 19D8                        FE            .byte	$FE
07524 19D9                        00            .byte	0
07525 19DA                        00            .byte	0
07526 19DB                        00            .byte	0
07527 19DC                        00            .byte	0
07528 19DD                        00            .byte	0
07529 19DE                        00            .byte	0
07530 19DF                        00            .byte	0
07531                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19E0                        00            .byte	0
07533 19E1                        00            .byte	0
07534 19E2                        00            .byte	0
07535 19E3                        00            .byte	0
07536 19E4                        00            .byte	0
07537 19E5                        00            .byte	0
07538 19E6                        00            .byte	0
07539 19E7                        00            .byte	0
07540 19E8                        00            .byte	0
07541 19E9                        18            .byte	$18
07542 19EA                        18            .byte	$18
07543 19EB                        00            .byte	0
07544 19EC                        00            .byte	0
07545 19ED                        00            .byte	0
07546                                           ! 1197  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19EE                        00            .byte	0
07548 19EF                        00            .byte	0
07549 19F0                        02            .byte	2
07550 19F1                        06            .byte	6
07551 19F2                        0C            .byte	$C
07552 19F3                        18            .byte	$18
07553 19F4                        30            .byte	$30
07554 19F5                        60            .byte	$60
07555 19F6                        C0            .byte	$C0
07556 19F7                        80            .byte	$80
07557 19F8                        00            .byte	0
07558 19F9                        00            .byte	0
07559 19FA                        00            .byte	0
07560 19FB                        00            .byte	0
07561                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 19FC                        00            .byte	0
07563 19FD                        00            .byte	0
07564 19FE                        7C            .byte	$7C
07565 19FF                        C6            .byte	$C6
07566 1A00                        CE            .byte	$CE
07567 1A01                        DE            .byte	$DE
07568 1A02                        F6            .byte	$F6
07569 1A03                        E6            .byte	$E6
07570 1A04                        C6            .byte	$C6
07571 1A05                        C6            .byte	$C6
07572 1A06                        7C            .byte	$7C
07573 1A07                        00            .byte	0
07574 1A08                        00            .byte	0
07575 1A09                        00            .byte	0
07576                                           ! 1199  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A0A                        00            .byte	0
07578 1A0B                        00            .byte	0
07579 1A0C                        18            .byte	$18
07580 1A0D                        38            .byte	$38
07581 1A0E                        78            .byte	$78
07582 1A0F                        18            .byte	$18
07583 1A10                        18            .byte	$18
07584 1A11                        18            .byte	$18
07585 1A12                        18            .byte	$18
07586 1A13                        18            .byte	$18
07587 1A14                        7E            .byte	$7E
07588 1A15                        00            .byte	0
07589 1A16                        00            .byte	0
07590 1A17                        00            .byte	0
07591                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A18                        00            .byte	0
07593 1A19                        00            .byte	0
07594 1A1A                        7C            .byte	$7C
07595 1A1B                        C6            .byte	$C6
07596 1A1C                        06            .byte	6
07597 1A1D                        0C            .byte	$C
07598 1A1E                        18            .byte	$18
07599 1A1F                        30            .byte	$30
07600 1A20                        60            .byte	$60
07601 1A21                        C6            .byte	$C6
07602 1A22                        FE            .byte	$FE
07603 1A23                        00            .byte	0
07604 1A24                        00            .byte	0
07605 1A25                        00            .byte	0
07606                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A26                        00            .byte	0
07608 1A27                        00            .byte	0
07609 1A28                        7C            .byte	$7C
07610 1A29                        C6            .byte	$C6
07611 1A2A                        06            .byte	6
07612 1A2B                        06            .byte	6
07613 1A2C                        3C            .byte	$3C
07614 1A2D                        06            .byte	6
07615 1A2E                        06            .byte	6
07616 1A2F                        C6            .byte	$C6
07617 1A30                        7C            .byte	$7C
07618 1A31                        00            .byte	0
07619 1A32                        00            .byte	0
07620 1A33                        00            .byte	0
07621                                           ! 1202  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07622 1A34                        00            .byte	0
07623 1A35                        00            .byte	0
07624 1A36                        0C            .byte	$C
07625 1A37                        1C            .byte	$1C
07626 1A38                        3C            .byte	$3C
07627 1A39                        6C            .byte	$6C
07628 1A3A                        CC            .byte	$CC
07629 1A3B                        FE            .byte	$FE
07630 1A3C                        0C            .byte	$C
07631 1A3D                        0C            .byte	$C
07632 1A3E                        1E            .byte	$1E
07633 1A3F                        00            .byte	0
07634 1A40                        00            .byte	0
07635 1A41                        00            .byte	0
07636                                           ! 1203  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07637 1A42                        00            .byte	0
07638 1A43                        00            .byte	0
07639 1A44                        FE            .byte	$FE
07640 1A45                        C0            .byte	$C0
07641 1A46                        C0            .byte	$C0
07642 1A47                        C0            .byte	$C0
07643 1A48                        FC            .byte	$FC
07644 1A49                        06            .byte	6
07645 1A4A                        06            .byte	6
07646 1A4B                        C6            .byte	$C6
07647 1A4C                        7C            .byte	$7C
07648 1A4D                        00            .byte	0
07649 1A4E                        00            .byte	0
07650                                           ! 1203 
07651 1A4F                        00            .byte	0
07652                                           ! 1204  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A50                        00            .byte	0
07654 1A51                        00            .byte	0
07655 1A52                        38            .byte	$38
07656 1A53                        60            .byte	$60
07657 1A54                        C0            .byte	$C0
07658 1A55                        C0            .byte	$C0
07659 1A56                        FC            .byte	$FC
07660 1A57                        C6            .byte	$C6
07661 1A58                        C6            .byte	$C6
07662 1A59                        C6            .byte	$C6
07663 1A5A                        7C            .byte	$7C
07664 1A5B                        00            .byte	0
07665 1A5C                        00            .byte	0
07666 1A5D                        00            .byte	0
07667                                           ! 1205  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A5E                        00            .byte	0
07669 1A5F                        00            .byte	0
07670 1A60                        FE            .byte	$FE
07671 1A61                        C6            .byte	$C6
07672 1A62                        06            .byte	6
07673 1A63                        0C            .byte	$C
07674 1A64                        18            .byte	$18
07675 1A65                        30            .byte	$30
07676 1A66                        30            .byte	$30
07677 1A67                        30            .byte	$30
07678 1A68                        30            .byte	$30
07679 1A69                        00            .byte	0
07680 1A6A                        00            .byte	0
07681 1A6B                        00            .byte	0
07682                                           ! 1206  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A6C                        00            .byte	0
07684 1A6D                        00            .byte	0
07685 1A6E                        7C            .byte	$7C
07686 1A6F                        C6            .byte	$C6
07687 1A70                        C6            .byte	$C6
07688 1A71                        C6            .byte	$C6
07689 1A72                        7C            .byte	$7C
07690 1A73                        C6            .byte	$C6
07691 1A74                        C6            .byte	$C6
07692 1A75                        C6            .byte	$C6
07693 1A76                        7C            .byte	$7C
07694 1A77                        00            .byte	0
07695 1A78                        00            .byte	0
07696 1A79                        00            .byte	0
07697                                           ! 1207  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A7A                        00            .byte	0
07699 1A7B                        00            .byte	0
07700 1A7C                        7C            .byte	$7C
07701 1A7D                        C6            .byte	$C6
07702 1A7E                        C6            .byte	$C6
07703 1A7F                        C6            .byte	$C6
07704 1A80                        7E            .byte	$7E
07705 1A81                        06            .byte	6
07706 1A82                        06            .byte	6
07707 1A83                        0C            .byte	$C
07708 1A84                        78            .byte	$78
07709 1A85                        00            .byte	0
07710 1A86                        00            .byte	0
07711 1A87                        00            .byte	0
07712                                           ! 1208  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A88                        00            .byte	0
07714 1A89                        00            .byte	0
07715 1A8A                        00            .byte	0
07716 1A8B                        18            .byte	$18
07717 1A8C                        18            .byte	$18
07718 1A8D                        00            .byte	0
07719 1A8E                        00            .byte	0
07720 1A8F                        00            .byte	0
07721 1A90                        18            .byte	$18
07722 1A91                        18            .byte	$18
07723 1A92                        00            .byte	0
07724 1A93                        00            .byte	0
07725 1A94                        00            .byte	0
07726 1A95                        00            .byte	0
07727                                           ! 1209  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1A96                        00            .byte	0
07729 1A97                        00            .byte	0
07730 1A98                        00            .byte	0
07731 1A99                        18            .byte	$18
07732 1A9A                        18            .byte	$18
07733 1A9B                        00            .byte	0
07734 1A9C                        00            .byte	0
07735 1A9D                        00            .byte	0
07736 1A9E                        18            .byte	$18
07737 1A9F                        18            .byte	$18
07738 1AA0                        30            .byte	$30
07739 1AA1                        00            .byte	0
07740 1AA2                        00            .byte	0
07741 1AA3                        00            .byte	0
07742                                           ! 1210  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AA4                        00            .byte	0
07744 1AA5                        00            .byte	0
07745 1AA6                        06            .byte	6
07746 1AA7                        0C            .byte	$C
07747 1AA8                        18            .byte	$18
07748 1AA9                        30            .byte	$30
07749 1AAA                        60            .byte	$60
07750 1AAB                        30            .byte	$30
07751 1AAC                        18            .byte	$18
07752 1AAD                        0C            .byte	$C
07753 1AAE                        06            .byte	6
07754 1AAF                        00            .byte	0
07755 1AB0                        00            .byte	0
07756 1AB1                        00            .byte	0
07757                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AB2                        00            .byte	0
07759 1AB3                        00            .byte	0
07760 1AB4                        00            .byte	0
07761 1AB5                        00            .byte	0
07762 1AB6                        00            .byte	0
07763 1AB7                        7E            .byte	$7E
07764 1AB8                        00            .byte	0
07765 1AB9                        00            .byte	0
07766 1ABA                        7E            .byte	$7E
07767 1ABB                        00            .byte	0
07768 1ABC                        00            .byte	0
07769 1ABD                        00            .byte	0
07770 1ABE                        00            .byte	0
07771 1ABF                        00            .byte	0
07772                                           ! 1212  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1AC0                        00            .byte	0
07774 1AC1                        00            .byte	0
07775 1AC2                        60            .byte	$60
07776 1AC3                        30            .byte	$30
07777 1AC4                        18            .byte	$18
07778 1AC5                        0C            .byte	$C
07779 1AC6                        06            .byte	6
07780 1AC7                        0C            .byte	$C
07781 1AC8                        18            .byte	$18
07782 1AC9                        30            .byte	$30
07783 1ACA                        60            .byte	$60
07784 1ACB                        00            .byte	0
07785 1ACC                        00            .byte	0
07786 1ACD                        00            .byte	0
07787                                           ! 1213  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1ACE                        00            .byte	0
07789 1ACF                        00            .byte	0
07790 1AD0                        7C            .byte	$7C
07791 1AD1                        C6            .byte	$C6
07792 1AD2                        C6            .byte	$C6
07793 1AD3                        0C            .byte	$C
07794 1AD4                        18            .byte	$18
07795 1AD5                        18            .byte	$18
07796 1AD6                        00            .byte	0
07797 1AD7                        18            .byte	$18
07798 1AD8                        18            .byte	$18
07799 1AD9                        00            .byte	0
07800 1ADA                        00            .byte	0
07801 1ADB                        00            .byte	0
07802                                           ! 1214  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1ADC                        00            .byte	0
07804 1ADD                        00            .byte	0
07805 1ADE                        7C            .byte	$7C
07806 1ADF                        C6            .byte	$C6
07807 1AE0                        C6            .byte	$C6
07808 1AE1                        DE            .byte	$DE
07809 1AE2                        DE            .byte	$DE
07810 1AE3                        DE            .byte	$DE
07811 1AE4                        DC            .byte	$DC
07812 1AE5                        C0            .byte	$C0
07813 1AE6                        7C            .byte	$7C
07814 1AE7                        00            .byte	0
07815 1AE8                        00            .byte	0
07816 1AE9                        00            .byte	0
07817                                           ! 1215  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AEA                        00            .byte	0
07819 1AEB                        00            .byte	0
07820 1AEC                        10            .byte	$10
07821 1AED                        38            .byte	$38
07822 1AEE                        6C            .byte	$6C
07823 1AEF                        C6            .byte	$C6
07824 1AF0                        C6            .byte	$C6
07825 1AF1                        FE            .byte	$FE
07826 1AF2                        C6            .byte	$C6
07827 1AF3                        C6            .byte	$C6
07828 1AF4                        C6            .byte	$C6
07829 1AF5                        00            .byte	0
07830 1AF6                        00            .byte	0
07831 1AF7                        00            .byte	0
07832                                           ! 1216  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1AF8                        00            .byte	0
07834 1AF9                        00            .byte	0
07835 1AFA                        FC            .byte	$FC
07836 1AFB                        66            .byte	$66
07837 1AFC                        66            .byte	$66
07838 1AFD                        66            .byte	$66
07839 1AFE                        7C            .byte	$7C
07840 1AFF                        66            .byte	$66
07841 1B00                        66            .byte	$66
07842 1B01                        66            .byte	$66
07843 1B02                        FC            .byte	$FC
07844 1B03                        00            .byte	0
07845 1B04                        00            .byte	0
07846 1B05                        00            .byte	0
07847                                           ! 1217  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B06                        00            .byte	0
07849 1B07                        00            .byte	0
07850 1B08                        3C            .byte	$3C
07851 1B09                        66            .byte	$66
07852 1B0A                        C2            .byte	$C2
07853 1B0B                        C0            .byte	$C0
07854 1B0C                        C0            .byte	$C0
07855 1B0D                        C0            .byte	$C0
07856 1B0E                        C2            .byte	$C2
07857 1B0F                        66            .byte	$66
07858 1B10                        3C            .byte	$3C
07859 1B11                        00            .byte	0
07860 1B12                        00            .byte	0
07861 1B13                        00            .byte	0
07862                                           ! 1218  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B14                        00            .byte	0
07864 1B15                        00            .byte	0
07865 1B16                        F8            .byte	$F8
07866 1B17                        6C            .byte	$6C
07867 1B18                        66            .byte	$66
07868 1B19                        66            .byte	$66
07869 1B1A                        66            .byte	$66
07870 1B1B                        66            .byte	$66
07871 1B1C                        66            .byte	$66
07872 1B1D                        6C            .byte	$6C
07873 1B1E                        F8            .byte	$F8
07874 1B1F                        00            .byte	0
07875 1B20                        00            .byte	0
07876 1B21                        00            .byte	0
07877                                           ! 1219  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B22                        00            .byte	0
07879 1B23                        00            .byte	0
07880 1B24                        FE            .byte	$FE
07881 1B25                        66            .byte	$66
07882 1B26                        62            .byte	$62
07883 1B27                        68            .byte	$68
07884 1B28                        78            .byte	$78
07885 1B29                        68            .byte	$68
07886 1B2A                        62            .byte	$62
07887 1B2B                        66            .byte	$66
07888 1B2C                        FE            .byte	$FE
07889 1B2D                        00            .byte	0
07890 1B2E                        00            .byte	0
07891 1B2F                        00            .byte	0
07892                                           ! 1220  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B30                        00            .byte	0
07894 1B31                        00            .byte	0
07895 1B32                        FE            .byte	$FE
07896 1B33                        66            .byte	$66
07897 1B34                        62            .byte	$62
07898 1B35                        68            .byte	$68
07899 1B36                        78            .byte	$78
07900 1B37                        68            .byte	$68
07901 1B38                        60            .byte	$60
07902 1B39                        60            .byte	$60
07903 1B3A                        F0            .byte	$F0
07904 1B3B                        00            .byte	0
07905 1B3C                        00            .byte	0
07906 1B3D                        00            .byte	0
07907                                           ! 1221  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B3E                        00            .byte	0
07909 1B3F                        00            .byte	0
07910 1B40                        3C            .byte	$3C
07911 1B41                        66            .byte	$66
07912 1B42                        C2            .byte	$C2
07913 1B43                        C0            .byte	$C0
07914 1B44                        C0            .byte	$C0
07915 1B45                        DE            .byte	$DE
07916 1B46                        C6            .byte	$C6
07917 1B47                        66            .byte	$66
07918 1B48                        3A            .byte	$3A
07919 1B49                        00            .byte	0
07920 1B4A                        00            .byte	0
07921 1B4B                        00            .byte	0
07922                                           ! 1222  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B4C                        00            .byte	0
07924 1B4D                        00            .byte	0
07925 1B4E                        C6            .byte	$C6
07926 1B4F                        C6            .byte	$C6
07927 1B50                        C6            .byte	$C6
07928 1B51                        C6            .byte	$C6
07929 1B52                        FE            .byte	$FE
07930 1B53                        C6            .byte	$C6
07931 1B54                        C6            .byte	$C6
07932 1B55                        C6            .byte	$C6
07933 1B56                        C6            .byte	$C6
07934 1B57                        00            .byte	0
07935 1B58                        00            .byte	0
07936 1B59                        00            .byte	0
07937                                           ! 1223  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B5A                        00            .byte	0
07939 1B5B                        00            .byte	0
07940 1B5C                        3C            .byte	$3C
07941 1B5D                        18            .byte	$18
07942 1B5E                        18            .byte	$18
07943 1B5F                        18            .byte	$18
07944 1B60                        18            .byte	$18
07945 1B61                        18            .byte	$18
07946 1B62                        18            .byte	$18
07947 1B63                        18            .byte	$18
07948 1B64                        3C            .byte	$3C
07949 1B65                        00            .byte	0
07950 1B66                        00            .byte	0
07951 1B67                        00            .byte	0
07952                                           ! 1224  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B68                        00            .byte	0
07954 1B69                        00            .byte	0
07955 1B6A                        1E            .byte	$1E
07956 1B6B                        0C            .byte	$C
07957 1B6C                        0C            .byte	$C
07958 1B6D                        0C            .byte	$C
07959 1B6E                        0C            .byte	$C
07960 1B6F                        0C            .byte	$C
07961 1B70                        CC            .byte	$CC
07962 1B71                        CC            .byte	$CC
07963 1B72                        78            .byte	$78
07964 1B73                        00            .byte	0
07965 1B74                        00            .byte	0
07966 1B75                        00            .byte	0
07967                                           ! 1225  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B76                        00            .byte	0
07969 1B77                        00            .byte	0
07970 1B78                        E6            .byte	$E6
07971 1B79                        66            .byte	$66
07972 1B7A                        6C            .byte	$6C
07973 1B7B                        6C            .byte	$6C
07974 1B7C                        78            .byte	$78
07975 1B7D                        6C            .byte	$6C
07976 1B7E                        6C            .byte	$6C
07977 1B7F                        66            .byte	$66
07978 1B80                        E6            .byte	$E6
07979 1B81                        00            .byte	0
07980 1B82                        00            .byte	0
07981 1B83                        00            .byte	0
07982                                           ! 1226  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07983 1B84                        00            .byte	0
07984 1B85                        00            .byte	0
07985 1B86                        F0            .byte	$F0
07986 1B87                        60            .byte	$60
07987 1B88                        60            .byte	$60
07988 1B89                        60            .byte	$60
07989 1B8A                        60            .byte	$60
07990 1B8B                        60            .byte	$60
07991 1B8C                        62            .byte	$62
07992 1B8D                        66            .byte	$66
07993 1B8E                        FE            .byte	$FE
07994 1B8F                        00            .byte	0
07995 1B90                        00            .byte	0
07996 1B91                        00            .byte	0
07997                                           ! 1227  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07998 1B92                        00            .byte	0
07999 1B93                        00            .byte	0
08000 1B94                        C6            .byte	$C6
08001 1B95                        EE            .byte	$EE
08002 1B96                        FE            .byte	$FE
08003 1B97                        FE            .byte	$FE
08004 1B98                        D6            .byte	$D6
08005 1B99                        C6            .byte	$C6
08006 1B9A                        C6            .byte	$C6
08007 1B9B                        C6            .byte	$C6
08008 1B9C                        C6            .byte	$C6
08009 1B9D                        00            .byte	0
08010 1B9E                        00            .byte	0
08011 1B9F                        00            .byte	0
08012                                           ! 1228  0x00, 
08013 1BA0                        00            .byte	0
08014                                           ! 1228 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08015 1BA1                        00            .byte	0
08016 1BA2                        C6            .byte	$C6
08017 1BA3                        E6            .byte	$E6
08018 1BA4                        F6            .byte	$F6
08019 1BA5                        FE            .byte	$FE
08020 1BA6                        DE            .byte	$DE
08021 1BA7                        CE            .byte	$CE
08022 1BA8                        C6            .byte	$C6
08023 1BA9                        C6            .byte	$C6
08024 1BAA                        C6            .byte	$C6
08025 1BAB                        00            .byte	0
08026 1BAC                        00            .byte	0
08027 1BAD                        00            .byte	0
08028                                           ! 1229  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BAE                        00            .byte	0
08030 1BAF                        00            .byte	0
08031 1BB0                        38            .byte	$38
08032 1BB1                        6C            .byte	$6C
08033 1BB2                        C6            .byte	$C6
08034 1BB3                        C6            .byte	$C6
08035 1BB4                        C6            .byte	$C6
08036 1BB5                        C6            .byte	$C6
08037 1BB6                        C6            .byte	$C6
08038 1BB7                        6C            .byte	$6C
08039 1BB8                        38            .byte	$38
08040 1BB9                        00            .byte	0
08041 1BBA                        00            .byte	0
08042 1BBB                        00            .byte	0
08043                                           ! 1230  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BBC                        00            .byte	0
08045 1BBD                        00            .byte	0
08046 1BBE                        FC            .byte	$FC
08047 1BBF                        66            .byte	$66
08048 1BC0                        66            .byte	$66
08049 1BC1                        66            .byte	$66
08050 1BC2                        7C            .byte	$7C
08051 1BC3                        60            .byte	$60
08052 1BC4                        60            .byte	$60
08053 1BC5                        60            .byte	$60
08054 1BC6                        F0            .byte	$F0
08055 1BC7                        00            .byte	0
08056 1BC8                        00            .byte	0
08057 1BC9                        00            .byte	0
08058                                           ! 1231  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BCA                        00            .byte	0
08060 1BCB                        00            .byte	0
08061 1BCC                        7C            .byte	$7C
08062 1BCD                        C6            .byte	$C6
08063 1BCE                        C6            .byte	$C6
08064 1BCF                        C6            .byte	$C6
08065 1BD0                        C6            .byte	$C6
08066 1BD1                        D6            .byte	$D6
08067 1BD2                        DE            .byte	$DE
08068 1BD3                        7C            .byte	$7C
08069 1BD4                        0C            .byte	$C
08070 1BD5                        0E            .byte	$E
08071 1BD6                        00            .byte	0
08072 1BD7                        00            .byte	0
08073                                           ! 1232  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BD8                        00            .byte	0
08075 1BD9                        00            .byte	0
08076 1BDA                        FC            .byte	$FC
08077 1BDB                        66            .byte	$66
08078 1BDC                        66            .byte	$66
08079 1BDD                        66            .byte	$66
08080 1BDE                        7C            .byte	$7C
08081 1BDF                        6C            .byte	$6C
08082 1BE0                        66            .byte	$66
08083 1BE1                        66            .byte	$66
08084 1BE2                        E6            .byte	$E6
08085 1BE3                        00            .byte	0
08086 1BE4                        00            .byte	0
08087 1BE5                        00            .byte	0
08088                                           ! 1233  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BE6                        00            .byte	0
08090 1BE7                        00            .byte	0
08091 1BE8                        7C            .byte	$7C
08092 1BE9                        C6            .byte	$C6
08093 1BEA                        C6            .byte	$C6
08094 1BEB                        60            .byte	$60
08095 1BEC                        38            .byte	$38
08096 1BED                        0C            .byte	$C
08097 1BEE                        C6            .byte	$C6
08098 1BEF                        C6            .byte	$C6
08099 1BF0                        7C            .byte	$7C
08100 1BF1                        00            .byte	0
08101 1BF2                        00            .byte	0
08102 1BF3                        00            .byte	0
08103                                           ! 1234  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1BF4                        00            .byte	0
08105 1BF5                        00            .byte	0
08106 1BF6                        7E            .byte	$7E
08107 1BF7                        7E            .byte	$7E
08108 1BF8                        5A            .byte	$5A
08109 1BF9                        18            .byte	$18
08110 1BFA                        18            .byte	$18
08111 1BFB                        18            .byte	$18
08112 1BFC                        18            .byte	$18
08113 1BFD                        18            .byte	$18
08114 1BFE                        3C            .byte	$3C
08115 1BFF                        00            .byte	0
08116 1C00                        00            .byte	0
08117 1C01                        00            .byte	0
08118                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C02                        00            .byte	0
08120 1C03                        00            .byte	0
08121 1C04                        C6            .byte	$C6
08122 1C05                        C6            .byte	$C6
08123 1C06                        C6            .byte	$C6
08124 1C07                        C6            .byte	$C6
08125 1C08                        C6            .byte	$C6
08126 1C09                        C6            .byte	$C6
08127 1C0A                        C6            .byte	$C6
08128 1C0B                        C6            .byte	$C6
08129 1C0C                        7C            .byte	$7C
08130 1C0D                        00            .byte	0
08131 1C0E                        00            .byte	0
08132 1C0F                        00            .byte	0
08133                                           ! 1236  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C10                        00            .byte	0
08135 1C11                        00            .byte	0
08136 1C12                        C6            .byte	$C6
08137 1C13                        C6            .byte	$C6
08138 1C14                        C6            .byte	$C6
08139 1C15                        C6            .byte	$C6
08140 1C16                        C6            .byte	$C6
08141 1C17                        C6            .byte	$C6
08142 1C18                        6C            .byte	$6C
08143 1C19                        38            .byte	$38
08144 1C1A                        10            .byte	$10
08145 1C1B                        00            .byte	0
08146 1C1C                        00            .byte	0
08147 1C1D                        00            .byte	0
08148                                           ! 1237  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C1E                        00            .byte	0
08150 1C1F                        00            .byte	0
08151 1C20                        C6            .byte	$C6
08152 1C21                        C6            .byte	$C6
08153 1C22                        C6            .byte	$C6
08154 1C23                        C6            .byte	$C6
08155 1C24                        D6            .byte	$D6
08156 1C25                        D6            .byte	$D6
08157 1C26                        FE            .byte	$FE
08158 1C27                        7C            .byte	$7C
08159 1C28                        6C            .byte	$6C
08160 1C29                        00            .byte	0
08161 1C2A                        00            .byte	0
08162 1C2B                        00            .byte	0
08163                                           ! 1238  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C2C                        00            .byte	0
08165 1C2D                        00            .byte	0
08166 1C2E                        C6            .byte	$C6
08167 1C2F                        C6            .byte	$C6
08168 1C30                        6C            .byte	$6C
08169 1C31                        38            .byte	$38
08170 1C32                        38            .byte	$38
08171 1C33                        38            .byte	$38
08172 1C34                        6C            .byte	$6C
08173 1C35                        C6            .byte	$C6
08174 1C36                        C6            .byte	$C6
08175 1C37                        00            .byte	0
08176 1C38                        00            .byte	0
08177 1C39                        00            .byte	0
08178                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C3A                        00            .byte	0
08180 1C3B                        00            .byte	0
08181 1C3C                        66            .byte	$66
08182 1C3D                        66            .byte	$66
08183 1C3E                        66            .byte	$66
08184 1C3F                        66            .byte	$66
08185 1C40                        3C            .byte	$3C
08186 1C41                        18            .byte	$18
08187 1C42                        18            .byte	$18
08188 1C43                        18            .byte	$18
08189 1C44                        3C            .byte	$3C
08190 1C45                        00            .byte	0
08191 1C46                        00            .byte	0
08192 1C47                        00            .byte	0
08193                                           ! 1240  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C48                        00            .byte	0
08195 1C49                        00            .byte	0
08196 1C4A                        FE            .byte	$FE
08197 1C4B                        C6            .byte	$C6
08198 1C4C                        8C            .byte	$8C
08199 1C4D                        18            .byte	$18
08200 1C4E                        30            .byte	$30
08201 1C4F                        60            .byte	$60
08202 1C50                        C2            .byte	$C2
08203 1C51                        C6            .byte	$C6
08204 1C52                        FE            .byte	$FE
08205 1C53                        00            .byte	0
08206 1C54                        00            .byte	0
08207 1C55                        00            .byte	0
08208                                           ! 1241  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C56                        00            .byte	0
08210 1C57                        00            .byte	0
08211 1C58                        3C            .byte	$3C
08212 1C59                        30            .byte	$30
08213 1C5A                        30            .byte	$30
08214 1C5B                        30            .byte	$30
08215 1C5C                        30            .byte	$30
08216 1C5D                        30            .byte	$30
08217 1C5E                        30            .byte	$30
08218 1C5F                        30            .byte	$30
08219 1C60                        3C            .byte	$3C
08220 1C61                        00            .byte	0
08221 1C62                        00            .byte	0
08222 1C63                        00            .byte	0
08223                                           ! 1242  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C64                        00            .byte	0
08225 1C65                        00            .byte	0
08226 1C66                        80            .byte	$80
08227 1C67                        C0            .byte	$C0
08228 1C68                        E0            .byte	$E0
08229 1C69                        70            .byte	$70
08230 1C6A                        38            .byte	$38
08231 1C6B                        1C            .byte	$1C
08232 1C6C                        0E            .byte	$E
08233 1C6D                        06            .byte	6
08234 1C6E                        02            .byte	2
08235 1C6F                        00            .byte	0
08236 1C70                        00            .byte	0
08237 1C71                        00            .byte	0
08238                                           ! 1243  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C72                        00            .byte	0
08240 1C73                        00            .byte	0
08241 1C74                        3C            .byte	$3C
08242 1C75                        0C            .byte	$C
08243 1C76                        0C            .byte	$C
08244 1C77                        0C            .byte	$C
08245 1C78                        0C            .byte	$C
08246 1C79                        0C            .byte	$C
08247 1C7A                        0C            .byte	$C
08248 1C7B                        0C            .byte	$C
08249 1C7C                        3C            .byte	$3C
08250 1C7D                        00            .byte	0
08251 1C7E                        00            .byte	0
08252 1C7F                        00            .byte	0
08253                                           ! 1244  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C80                        10            .byte	$10
08255 1C81                        38            .byte	$38
08256 1C82                        6C            .byte	$6C
08257 1C83                        C6            .byte	$C6
08258 1C84                        00            .byte	0
08259 1C85                        00            .byte	0
08260 1C86                        00            .byte	0
08261 1C87                        00            .byte	0
08262 1C88                        00            .byte	0
08263 1C89                        00            .byte	0
08264 1C8A                        00            .byte	0
08265 1C8B                        00            .byte	0
08266 1C8C                        00            .byte	0
08267 1C8D                        00            .byte	0
08268                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C8E                        00            .byte	0
08270 1C8F                        00            .byte	0
08271 1C90                        00            .byte	0
08272 1C91                        00            .byte	0
08273 1C92                        00            .byte	0
08274 1C93                        00            .byte	0
08275 1C94                        00            .byte	0
08276 1C95                        00            .byte	0
08277 1C96                        00            .byte	0
08278 1C97                        00            .byte	0
08279 1C98                        00            .byte	0
08280 1C99                        00            .byte	0
08281 1C9A                        FF            .byte	$FF
08282 1C9B                        00            .byte	0
08283                                           ! 1246  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1C9C                        30            .byte	$30
08285 1C9D                        30            .byte	$30
08286 1C9E                        18            .byte	$18
08287 1C9F                        00            .byte	0
08288 1CA0                        00            .byte	0
08289 1CA1                        00            .byte	0
08290 1CA2                        00            .byte	0
08291 1CA3                        00            .byte	0
08292 1CA4                        00            .byte	0
08293 1CA5                        00            .byte	0
08294 1CA6                        00            .byte	0
08295 1CA7                        00            .byte	0
08296 1CA8                        00            .byte	0
08297 1CA9                        00            .byte	0
08298                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CAA                        00            .byte	0
08300 1CAB                        00            .byte	0
08301 1CAC                        00            .byte	0
08302 1CAD                        00            .byte	0
08303 1CAE                        00            .byte	0
08304 1CAF                        78            .byte	$78
08305 1CB0                        0C            .byte	$C
08306 1CB1                        7C            .byte	$7C
08307 1CB2                        CC            .byte	$CC
08308 1CB3                        CC            .byte	$CC
08309 1CB4                        76            .byte	$76
08310 1CB5                        00            .byte	0
08311 1CB6                        00            .byte	0
08312 1CB7                        00            .byte	0
08313                                           ! 1248  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CB8                        00            .byte	0
08315 1CB9                        00            .byte	0
08316 1CBA                        E0            .byte	$E0
08317 1CBB                        60            .byte	$60
08318 1CBC                        60            .byte	$60
08319 1CBD                        78            .byte	$78
08320 1CBE                        6C            .byte	$6C
08321 1CBF                        66            .byte	$66
08322 1CC0                        66            .byte	$66
08323 1CC1                        66            .byte	$66
08324 1CC2                        7C            .byte	$7C
08325 1CC3                        00            .byte	0
08326 1CC4                        00            .byte	0
08327 1CC5                        00            .byte	0
08328                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CC6                        00            .byte	0
08330 1CC7                        00            .byte	0
08331 1CC8                        00            .byte	0
08332 1CC9                        00            .byte	0
08333 1CCA                        00            .byte	0
08334 1CCB                        7C            .byte	$7C
08335 1CCC                        C6            .byte	$C6
08336 1CCD                        C0            .byte	$C0
08337 1CCE                        C0            .byte	$C0
08338 1CCF                        C6            .byte	$C6
08339 1CD0                        7C            .byte	$7C
08340 1CD1                        00            .byte	0
08341 1CD2                        00            .byte	0
08342 1CD3                        00            .byte	0
08343                                           ! 1250  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CD4                        00            .byte	0
08345 1CD5                        00            .byte	0
08346 1CD6                        1C            .byte	$1C
08347 1CD7                        0C            .byte	$C
08348 1CD8                        0C            .byte	$C
08349 1CD9                        3C            .byte	$3C
08350 1CDA                        6C            .byte	$6C
08351 1CDB                        CC            .byte	$CC
08352 1CDC                        CC            .byte	$CC
08353 1CDD                        CC            .byte	$CC
08354 1CDE                        76            .byte	$76
08355 1CDF                        00            .byte	0
08356 1CE0                        00            .byte	0
08357 1CE1                        00            .byte	0
08358                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08359 1CE2                        00            .byte	0
08360 1CE3                        00            .byte	0
08361 1CE4                        00            .byte	0
08362 1CE5                        00            .byte	0
08363 1CE6                        00            .byte	0
08364 1CE7                        7C            .byte	$7C
08365 1CE8                        C6            .byte	$C6
08366 1CE9                        FE            .byte	$FE
08367 1CEA                        C0            .byte	$C0
08368 1CEB                        C6            .byte	$C6
08369 1CEC                        7C            .byte	$7C
08370 1CED                        00            .byte	0
08371 1CEE                        00            .byte	0
08372 1CEF                        00            .byte	0
08373                                           ! 1252  0x00, 0x00, 0x
08374 1CF0                        00            .byte	0
08375 1CF1                        00            .byte	0
08376                                           ! 1252 38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08377 1CF2                        38            .byte	$38
08378 1CF3                        6C            .byte	$6C
08379 1CF4                        64            .byte	$64
08380 1CF5                        60            .byte	$60
08381 1CF6                        F0            .byte	$F0
08382 1CF7                        60            .byte	$60
08383 1CF8                        60            .byte	$60
08384 1CF9                        60            .byte	$60
08385 1CFA                        F0            .byte	$F0
08386 1CFB                        00            .byte	0
08387 1CFC                        00            .byte	0
08388 1CFD                        00            .byte	0
08389                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1CFE                        00            .byte	0
08391 1CFF                        00            .byte	0
08392 1D00                        00            .byte	0
08393 1D01                        00            .byte	0
08394 1D02                        00            .byte	0
08395 1D03                        76            .byte	$76
08396 1D04                        CC            .byte	$CC
08397 1D05                        CC            .byte	$CC
08398 1D06                        CC            .byte	$CC
08399 1D07                        7C            .byte	$7C
08400 1D08                        0C            .byte	$C
08401 1D09                        CC            .byte	$CC
08402 1D0A                        78            .byte	$78
08403 1D0B                        00            .byte	0
08404                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D0C                        00            .byte	0
08406 1D0D                        00            .byte	0
08407 1D0E                        E0            .byte	$E0
08408 1D0F                        60            .byte	$60
08409 1D10                        60            .byte	$60
08410 1D11                        6C            .byte	$6C
08411 1D12                        76            .byte	$76
08412 1D13                        66            .byte	$66
08413 1D14                        66            .byte	$66
08414 1D15                        66            .byte	$66
08415 1D16                        E6            .byte	$E6
08416 1D17                        00            .byte	0
08417 1D18                        00            .byte	0
08418 1D19                        00            .byte	0
08419                                           ! 1255  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D1A                        00            .byte	0
08421 1D1B                        00            .byte	0
08422 1D1C                        18            .byte	$18
08423 1D1D                        18            .byte	$18
08424 1D1E                        00            .byte	0
08425 1D1F                        38            .byte	$38
08426 1D20                        18            .byte	$18
08427 1D21                        18            .byte	$18
08428 1D22                        18            .byte	$18
08429 1D23                        18            .byte	$18
08430 1D24                        3C            .byte	$3C
08431 1D25                        00            .byte	0
08432 1D26                        00            .byte	0
08433 1D27                        00            .byte	0
08434                                           ! 1256  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D28                        00            .byte	0
08436 1D29                        00            .byte	0
08437 1D2A                        06            .byte	6
08438 1D2B                        06            .byte	6
08439 1D2C                        00            .byte	0
08440 1D2D                        0E            .byte	$E
08441 1D2E                        06            .byte	6
08442 1D2F                        06            .byte	6
08443 1D30                        06            .byte	6
08444 1D31                        06            .byte	6
08445 1D32                        66            .byte	$66
08446 1D33                        66            .byte	$66
08447 1D34                        3C            .byte	$3C
08448 1D35                        00            .byte	0
08449                                           ! 1257  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D36                        00            .byte	0
08451 1D37                        00            .byte	0
08452 1D38                        E0            .byte	$E0
08453 1D39                        60            .byte	$60
08454 1D3A                        60            .byte	$60
08455 1D3B                        66            .byte	$66
08456 1D3C                        6C            .byte	$6C
08457 1D3D                        78            .byte	$78
08458 1D3E                        6C            .byte	$6C
08459 1D3F                        66            .byte	$66
08460 1D40                        E6            .byte	$E6
08461 1D41                        00            .byte	0
08462 1D42                        00            .byte	0
08463 1D43                        00            .byte	0
08464                                           ! 1258  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D44                        00            .byte	0
08466 1D45                        00            .byte	0
08467 1D46                        38            .byte	$38
08468 1D47                        18            .byte	$18
08469 1D48                        18            .byte	$18
08470 1D49                        18            .byte	$18
08471 1D4A                        18            .byte	$18
08472 1D4B                        18            .byte	$18
08473 1D4C                        18            .byte	$18
08474 1D4D                        18            .byte	$18
08475 1D4E                        3C            .byte	$3C
08476 1D4F                        00            .byte	0
08477 1D50                        00            .byte	0
08478 1D51                        00            .byte	0
08479                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D52                        00            .byte	0
08481 1D53                        00            .byte	0
08482 1D54                        00            .byte	0
08483 1D55                        00            .byte	0
08484 1D56                        00            .byte	0
08485 1D57                        EC            .byte	$EC
08486 1D58                        FE            .byte	$FE
08487 1D59                        D6            .byte	$D6
08488 1D5A                        D6            .byte	$D6
08489 1D5B                        D6            .byte	$D6
08490 1D5C                        C6            .byte	$C6
08491 1D5D                        00            .byte	0
08492 1D5E                        00            .byte	0
08493 1D5F                        00            .byte	0
08494                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D60                        00            .byte	0
08496 1D61                        00            .byte	0
08497 1D62                        00            .byte	0
08498 1D63                        00            .byte	0
08499 1D64                        00            .byte	0
08500 1D65                        DC            .byte	$DC
08501 1D66                        66            .byte	$66
08502 1D67                        66            .byte	$66
08503 1D68                        66            .byte	$66
08504 1D69                        66            .byte	$66
08505 1D6A                        66            .byte	$66
08506 1D6B                        00            .byte	0
08507 1D6C                        00            .byte	0
08508 1D6D                        00            .byte	0
08509                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D6E                        00            .byte	0
08511 1D6F                        00            .byte	0
08512 1D70                        00            .byte	0
08513 1D71                        00            .byte	0
08514 1D72                        00            .byte	0
08515 1D73                        7C            .byte	$7C
08516 1D74                        C6            .byte	$C6
08517 1D75                        C6            .byte	$C6
08518 1D76                        C6            .byte	$C6
08519 1D77                        C6            .byte	$C6
08520 1D78                        7C            .byte	$7C
08521 1D79                        00            .byte	0
08522 1D7A                        00            .byte	0
08523 1D7B                        00            .byte	0
08524                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D7C                        00            .byte	0
08526 1D7D                        00            .byte	0
08527 1D7E                        00            .byte	0
08528 1D7F                        00            .byte	0
08529 1D80                        00            .byte	0
08530 1D81                        DC            .byte	$DC
08531 1D82                        66            .byte	$66
08532 1D83                        66            .byte	$66
08533 1D84                        66            .byte	$66
08534 1D85                        7C            .byte	$7C
08535 1D86                        60            .byte	$60
08536 1D87                        60            .byte	$60
08537 1D88                        F0            .byte	$F0
08538 1D89                        00            .byte	0
08539                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D8A                        00            .byte	0
08541 1D8B                        00            .byte	0
08542 1D8C                        00            .byte	0
08543 1D8D                        00            .byte	0
08544 1D8E                        00            .byte	0
08545 1D8F                        76            .byte	$76
08546 1D90                        CC            .byte	$CC
08547 1D91                        CC            .byte	$CC
08548 1D92                        CC            .byte	$CC
08549 1D93                        7C            .byte	$7C
08550 1D94                        0C            .byte	$C
08551 1D95                        0C            .byte	$C
08552 1D96                        1E            .byte	$1E
08553 1D97                        00            .byte	0
08554                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1D98                        00            .byte	0
08556 1D99                        00            .byte	0
08557 1D9A                        00            .byte	0
08558 1D9B                        00            .byte	0
08559 1D9C                        00            .byte	0
08560 1D9D                        DC            .byte	$DC
08561 1D9E                        76            .byte	$76
08562 1D9F                        66            .byte	$66
08563 1DA0                        60            .byte	$60
08564 1DA1                        60            .byte	$60
08565 1DA2                        F0            .byte	$F0
08566 1DA3                        00            .byte	0
08567 1DA4                        00            .byte	0
08568 1DA5                        00            .byte	0
08569                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DA6                        00            .byte	0
08571 1DA7                        00            .byte	0
08572 1DA8                        00            .byte	0
08573 1DA9                        00            .byte	0
08574 1DAA                        00            .byte	0
08575 1DAB                        7C            .byte	$7C
08576 1DAC                        C6            .byte	$C6
08577 1DAD                        70            .byte	$70
08578 1DAE                        1C            .byte	$1C
08579 1DAF                        C6            .byte	$C6
08580 1DB0                        7C            .byte	$7C
08581 1DB1                        00            .byte	0
08582 1DB2                        00            .byte	0
08583 1DB3                        00            .byte	0
08584                                           ! 1266  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DB4                        00            .byte	0
08586 1DB5                        00            .byte	0
08587 1DB6                        10            .byte	$10
08588 1DB7                        30            .byte	$30
08589 1DB8                        30            .byte	$30
08590 1DB9                        FC            .byte	$FC
08591 1DBA                        30            .byte	$30
08592 1DBB                        30            .byte	$30
08593 1DBC                        30            .byte	$30
08594 1DBD                        36            .byte	$36
08595 1DBE                        1C            .byte	$1C
08596 1DBF                        00            .byte	0
08597 1DC0                        00            .byte	0
08598 1DC1                        00            .byte	0
08599                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DC2                        00            .byte	0
08601 1DC3                        00            .byte	0
08602 1DC4                        00            .byte	0
08603 1DC5                        00            .byte	0
08604 1DC6                        00            .byte	0
08605 1DC7                        CC            .byte	$CC
08606 1DC8                        CC            .byte	$CC
08607 1DC9                        CC            .byte	$CC
08608 1DCA                        CC            .byte	$CC
08609 1DCB                        CC            .byte	$CC
08610 1DCC                        76            .byte	$76
08611 1DCD                        00            .byte	0
08612 1DCE                        00            .byte	0
08613 1DCF                        00            .byte	0
08614                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DD0                        00            .byte	0
08616 1DD1                        00            .byte	0
08617 1DD2                        00            .byte	0
08618 1DD3                        00            .byte	0
08619 1DD4                        00            .byte	0
08620 1DD5                        66            .byte	$66
08621 1DD6                        66            .byte	$66
08622 1DD7                        66            .byte	$66
08623 1DD8                        66            .byte	$66
08624 1DD9                        3C            .byte	$3C
08625 1DDA                        18            .byte	$18
08626 1DDB                        00            .byte	0
08627 1DDC                        00            .byte	0
08628 1DDD                        00            .byte	0
08629                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DDE                        00            .byte	0
08631 1DDF                        00            .byte	0
08632 1DE0                        00            .byte	0
08633 1DE1                        00            .byte	0
08634 1DE2                        00            .byte	0
08635 1DE3                        C6            .byte	$C6
08636 1DE4                        C6            .byte	$C6
08637 1DE5                        D6            .byte	$D6
08638 1DE6                        D6            .byte	$D6
08639 1DE7                        FE            .byte	$FE
08640 1DE8                        6C            .byte	$6C
08641 1DE9                        00            .byte	0
08642 1DEA                        00            .byte	0
08643 1DEB                        00            .byte	0
08644                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DEC                        00            .byte	0
08646 1DED                        00            .byte	0
08647 1DEE                        00            .byte	0
08648 1DEF                        00            .byte	0
08649 1DF0                        00            .byte	0
08650 1DF1                        C6            .byte	$C6
08651 1DF2                        6C            .byte	$6C
08652 1DF3                        38            .byte	$38
08653 1DF4                        38            .byte	$38
08654 1DF5                        6C            .byte	$6C
08655 1DF6                        C6            .byte	$C6
08656 1DF7                        00            .byte	0
08657 1DF8                        00            .byte	0
08658 1DF9                        00            .byte	0
08659                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1DFA                        00            .byte	0
08661 1DFB                        00            .byte	0
08662 1DFC                        00            .byte	0
08663 1DFD                        00            .byte	0
08664 1DFE                        00            .byte	0
08665 1DFF                        C6            .byte	$C6
08666 1E00                        C6            .byte	$C6
08667 1E01                        C6            .byte	$C6
08668 1E02                        C6            .byte	$C6
08669 1E03                        7E            .byte	$7E
08670 1E04                        06            .byte	6
08671 1E05                        0C            .byte	$C
08672 1E06                        F8            .byte	$F8
08673 1E07                        00            .byte	0
08674                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E08                        00            .byte	0
08676 1E09                        00            .byte	0
08677 1E0A                        00            .byte	0
08678 1E0B                        00            .byte	0
08679 1E0C                        00            .byte	0
08680 1E0D                        FE            .byte	$FE
08681 1E0E                        CC            .byte	$CC
08682 1E0F                        18            .byte	$18
08683 1E10                        30            .byte	$30
08684 1E11                        66            .byte	$66
08685 1E12                        FE            .byte	$FE
08686 1E13                        00            .byte	0
08687 1E14                        00            .byte	0
08688 1E15                        00            .byte	0
08689                                           ! 1273  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E16                        00            .byte	0
08691 1E17                        00            .byte	0
08692 1E18                        0E            .byte	$E
08693 1E19                        18            .byte	$18
08694 1E1A                        18            .byte	$18
08695 1E1B                        18            .byte	$18
08696 1E1C                        70            .byte	$70
08697 1E1D                        18            .byte	$18
08698 1E1E                        18            .byte	$18
08699 1E1F                        18            .byte	$18
08700 1E20                        0E            .byte	$E
08701 1E21                        00            .byte	0
08702 1E22                        00            .byte	0
08703 1E23                        00            .byte	0
08704                                           ! 1274  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E24                        00            .byte	0
08706 1E25                        00            .byte	0
08707 1E26                        18            .byte	$18
08708 1E27                        18            .byte	$18
08709 1E28                        18            .byte	$18
08710 1E29                        18            .byte	$18
08711 1E2A                        00            .byte	0
08712 1E2B                        18            .byte	$18
08713 1E2C                        18            .byte	$18
08714 1E2D                        18            .byte	$18
08715 1E2E                        18            .byte	$18
08716 1E2F                        00            .byte	0
08717 1E30                        00            .byte	0
08718 1E31                        00            .byte	0
08719                                           ! 1275  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08720 1E32                        00            .byte	0
08721 1E33                        00            .byte	0
08722 1E34                        70            .byte	$70
08723 1E35                        18            .byte	$18
08724 1E36                        18            .byte	$18
08725 1E37                        18            .byte	$18
08726 1E38                        0E            .byte	$E
08727 1E39                        18            .byte	$18
08728 1E3A                        18            .byte	$18
08729 1E3B                        18            .byte	$18
08730 1E3C                        70            .byte	$70
08731 1E3D                        00            .byte	0
08732 1E3E                        00            .byte	0
08733 1E3F                        00            .byte	0
08734                                           ! 1276  0x00, 0x00, 0x76, 0xdc
08735 1E40                        00            .byte	0
08736 1E41                        00            .byte	0
08737 1E42                        76            .byte	$76
08738                                           ! 1276 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08739 1E43                        DC            .byte	$DC
08740 1E44                        00            .byte	0
08741 1E45                        00            .byte	0
08742 1E46                        00            .byte	0
08743 1E47                        00            .byte	0
08744 1E48                        00            .byte	0
08745 1E49                        00            .byte	0
08746 1E4A                        00            .byte	0
08747 1E4B                        00            .byte	0
08748 1E4C                        00            .byte	0
08749 1E4D                        00            .byte	0
08750                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E4E                        00            .byte	0
08752 1E4F                        00            .byte	0
08753 1E50                        00            .byte	0
08754 1E51                        00            .byte	0
08755 1E52                        10            .byte	$10
08756 1E53                        38            .byte	$38
08757 1E54                        6C            .byte	$6C
08758 1E55                        C6            .byte	$C6
08759 1E56                        C6            .byte	$C6
08760 1E57                        FE            .byte	$FE
08761 1E58                        00            .byte	0
08762 1E59                        00            .byte	0
08763 1E5A                        00            .byte	0
08764 1E5B                        00            .byte	0
08765                                           ! 1278  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E5C                        00            .byte	0
08767 1E5D                        00            .byte	0
08768 1E5E                        3C            .byte	$3C
08769 1E5F                        66            .byte	$66
08770 1E60                        C2            .byte	$C2
08771 1E61                        C0            .byte	$C0
08772 1E62                        C0            .byte	$C0
08773 1E63                        C2            .byte	$C2
08774 1E64                        66            .byte	$66
08775 1E65                        3C            .byte	$3C
08776 1E66                        0C            .byte	$C
08777 1E67                        06            .byte	6
08778 1E68                        7C            .byte	$7C
08779 1E69                        00            .byte	0
08780                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E6A                        00            .byte	0
08782 1E6B                        00            .byte	0
08783 1E6C                        CC            .byte	$CC
08784 1E6D                        CC            .byte	$CC
08785 1E6E                        00            .byte	0
08786 1E6F                        CC            .byte	$CC
08787 1E70                        CC            .byte	$CC
08788 1E71                        CC            .byte	$CC
08789 1E72                        CC            .byte	$CC
08790 1E73                        CC            .byte	$CC
08791 1E74                        76            .byte	$76
08792 1E75                        00            .byte	0
08793 1E76                        00            .byte	0
08794 1E77                        00            .byte	0
08795                                           ! 1280  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E78                        00            .byte	0
08797 1E79                        0C            .byte	$C
08798 1E7A                        18            .byte	$18
08799 1E7B                        30            .byte	$30
08800 1E7C                        00            .byte	0
08801 1E7D                        7C            .byte	$7C
08802 1E7E                        C6            .byte	$C6
08803 1E7F                        FE            .byte	$FE
08804 1E80                        C0            .byte	$C0
08805 1E81                        C6            .byte	$C6
08806 1E82                        7C            .byte	$7C
08807 1E83                        00            .byte	0
08808 1E84                        00            .byte	0
08809 1E85                        00            .byte	0
08810                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E86                        00            .byte	0
08812 1E87                        10            .byte	$10
08813 1E88                        38            .byte	$38
08814 1E89                        6C            .byte	$6C
08815 1E8A                        00            .byte	0
08816 1E8B                        78            .byte	$78
08817 1E8C                        0C            .byte	$C
08818 1E8D                        7C            .byte	$7C
08819 1E8E                        CC            .byte	$CC
08820 1E8F                        CC            .byte	$CC
08821 1E90                        76            .byte	$76
08822 1E91                        00            .byte	0
08823 1E92                        00            .byte	0
08824 1E93                        00            .byte	0
08825                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1E94                        00            .byte	0
08827 1E95                        00            .byte	0
08828 1E96                        CC            .byte	$CC
08829 1E97                        CC            .byte	$CC
08830 1E98                        00            .byte	0
08831 1E99                        78            .byte	$78
08832 1E9A                        0C            .byte	$C
08833 1E9B                        7C            .byte	$7C
08834 1E9C                        CC            .byte	$CC
08835 1E9D                        CC            .byte	$CC
08836 1E9E                        76            .byte	$76
08837 1E9F                        00            .byte	0
08838 1EA0                        00            .byte	0
08839 1EA1                        00            .byte	0
08840                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EA2                        00            .byte	0
08842 1EA3                        60            .byte	$60
08843 1EA4                        30            .byte	$30
08844 1EA5                        18            .byte	$18
08845 1EA6                        00            .byte	0
08846 1EA7                        78            .byte	$78
08847 1EA8                        0C            .byte	$C
08848 1EA9                        7C            .byte	$7C
08849 1EAA                        CC            .byte	$CC
08850 1EAB                        CC            .byte	$CC
08851 1EAC                        76            .byte	$76
08852 1EAD                        00            .byte	0
08853 1EAE                        00            .byte	0
08854 1EAF                        00            .byte	0
08855                                           ! 1284  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EB0                        00            .byte	0
08857 1EB1                        38            .byte	$38
08858 1EB2                        6C            .byte	$6C
08859 1EB3                        38            .byte	$38
08860 1EB4                        00            .byte	0
08861 1EB5                        78            .byte	$78
08862 1EB6                        0C            .byte	$C
08863 1EB7                        7C            .byte	$7C
08864 1EB8                        CC            .byte	$CC
08865 1EB9                        CC            .byte	$CC
08866 1EBA                        76            .byte	$76
08867 1EBB                        00            .byte	0
08868 1EBC                        00            .byte	0
08869 1EBD                        00            .byte	0
08870                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1EBE                        00            .byte	0
08872 1EBF                        00            .byte	0
08873 1EC0                        00            .byte	0
08874 1EC1                        00            .byte	0
08875 1EC2                        3C            .byte	$3C
08876 1EC3                        66            .byte	$66
08877 1EC4                        60            .byte	$60
08878 1EC5                        66            .byte	$66
08879 1EC6                        3C            .byte	$3C
08880 1EC7                        0C            .byte	$C
08881 1EC8                        06            .byte	6
08882 1EC9                        3C            .byte	$3C
08883 1ECA                        00            .byte	0
08884 1ECB                        00            .byte	0
08885                                           ! 1286  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ECC                        00            .byte	0
08887 1ECD                        10            .byte	$10
08888 1ECE                        38            .byte	$38
08889 1ECF                        6C            .byte	$6C
08890 1ED0                        00            .byte	0
08891 1ED1                        7C            .byte	$7C
08892 1ED2                        C6            .byte	$C6
08893 1ED3                        FE            .byte	$FE
08894 1ED4                        C0            .byte	$C0
08895 1ED5                        C6            .byte	$C6
08896 1ED6                        7C            .byte	$7C
08897 1ED7                        00            .byte	0
08898 1ED8                        00            .byte	0
08899 1ED9                        00            .byte	0
08900                                           ! 1287  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EDA                        00            .byte	0
08902 1EDB                        00            .byte	0
08903 1EDC                        CC            .byte	$CC
08904 1EDD                        CC            .byte	$CC
08905 1EDE                        00            .byte	0
08906 1EDF                        7C            .byte	$7C
08907 1EE0                        C6            .byte	$C6
08908 1EE1                        FE            .byte	$FE
08909 1EE2                        C0            .byte	$C0
08910 1EE3                        C6            .byte	$C6
08911 1EE4                        7C            .byte	$7C
08912 1EE5                        00            .byte	0
08913 1EE6                        00            .byte	0
08914 1EE7                        00            .byte	0
08915                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EE8                        00            .byte	0
08917 1EE9                        60            .byte	$60
08918 1EEA                        30            .byte	$30
08919 1EEB                        18            .byte	$18
08920 1EEC                        00            .byte	0
08921 1EED                        7C            .byte	$7C
08922 1EEE                        C6            .byte	$C6
08923 1EEF                        FE            .byte	$FE
08924 1EF0                        C0            .byte	$C0
08925 1EF1                        C6            .byte	$C6
08926 1EF2                        7C            .byte	$7C
08927 1EF3                        00            .byte	0
08928 1EF4                        00            .byte	0
08929 1EF5                        00            .byte	0
08930                                           ! 1289  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1EF6                        00            .byte	0
08932 1EF7                        00            .byte	0
08933 1EF8                        66            .byte	$66
08934 1EF9                        66            .byte	$66
08935 1EFA                        00            .byte	0
08936 1EFB                        38            .byte	$38
08937 1EFC                        18            .byte	$18
08938 1EFD                        18            .byte	$18
08939 1EFE                        18            .byte	$18
08940 1EFF                        18            .byte	$18
08941 1F00                        3C            .byte	$3C
08942 1F01                        00            .byte	0
08943 1F02                        00            .byte	0
08944 1F03                        00            .byte	0
08945                                           ! 1290  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F04                        00            .byte	0
08947 1F05                        18            .byte	$18
08948 1F06                        3C            .byte	$3C
08949 1F07                        66            .byte	$66
08950 1F08                        00            .byte	0
08951 1F09                        38            .byte	$38
08952 1F0A                        18            .byte	$18
08953 1F0B                        18            .byte	$18
08954 1F0C                        18            .byte	$18
08955 1F0D                        18            .byte	$18
08956 1F0E                        3C            .byte	$3C
08957 1F0F                        00            .byte	0
08958 1F10                        00            .byte	0
08959 1F11                        00            .byte	0
08960                                           ! 1291  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F12                        00            .byte	0
08962 1F13                        60            .byte	$60
08963 1F14                        30            .byte	$30
08964 1F15                        18            .byte	$18
08965 1F16                        00            .byte	0
08966 1F17                        38            .byte	$38
08967 1F18                        18            .byte	$18
08968 1F19                        18            .byte	$18
08969 1F1A                        18            .byte	$18
08970 1F1B                        18            .byte	$18
08971 1F1C                        3C            .byte	$3C
08972 1F1D                        00            .byte	0
08973 1F1E                        00            .byte	0
08974 1F1F                        00            .byte	0
08975                                           ! 1292  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F20                        00            .byte	0
08977 1F21                        C6            .byte	$C6
08978 1F22                        C6            .byte	$C6
08979 1F23                        10            .byte	$10
08980 1F24                        38            .byte	$38
08981 1F25                        6C            .byte	$6C
08982 1F26                        C6            .byte	$C6
08983 1F27                        C6            .byte	$C6
08984 1F28                        FE            .byte	$FE
08985 1F29                        C6            .byte	$C6
08986 1F2A                        C6            .byte	$C6
08987 1F2B                        00            .byte	0
08988 1F2C                        00            .byte	0
08989 1F2D                        00            .byte	0
08990                                           ! 1293  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F2E                        38            .byte	$38
08992 1F2F                        6C            .byte	$6C
08993 1F30                        38            .byte	$38
08994 1F31                        00            .byte	0
08995 1F32                        38            .byte	$38
08996 1F33                        6C            .byte	$6C
08997 1F34                        C6            .byte	$C6
08998 1F35                        C6            .byte	$C6
08999 1F36                        FE            .byte	$FE
09000 1F37                        C6            .byte	$C6
09001 1F38                        C6            .byte	$C6
09002 1F39                        00            .byte	0
09003 1F3A                        00            .byte	0
09004 1F3B                        00            .byte	0
09005                                           ! 1294  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F3C                        18            .byte	$18
09007 1F3D                        30            .byte	$30
09008 1F3E                        60            .byte	$60
09009 1F3F                        00            .byte	0
09010 1F40                        FE            .byte	$FE
09011 1F41                        66            .byte	$66
09012 1F42                        60            .byte	$60
09013 1F43                        7C            .byte	$7C
09014 1F44                        60            .byte	$60
09015 1F45                        66            .byte	$66
09016 1F46                        FE            .byte	$FE
09017 1F47                        00            .byte	0
09018 1F48                        00            .byte	0
09019 1F49                        00            .byte	0
09020                                           ! 1295  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F4A                        00            .byte	0
09022 1F4B                        00            .byte	0
09023 1F4C                        00            .byte	0
09024 1F4D                        00            .byte	0
09025 1F4E                        CC            .byte	$CC
09026 1F4F                        76            .byte	$76
09027 1F50                        36            .byte	$36
09028 1F51                        7E            .byte	$7E
09029 1F52                        D8            .byte	$D8
09030 1F53                        D8            .byte	$D8
09031 1F54                        6E            .byte	$6E
09032 1F55                        00            .byte	0
09033 1F56                        00            .byte	0
09034 1F57                        00            .byte	0
09035                                           ! 1296  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F58                        00            .byte	0
09037 1F59                        00            .byte	0
09038 1F5A                        3E            .byte	$3E
09039 1F5B                        6C            .byte	$6C
09040 1F5C                        CC            .byte	$CC
09041 1F5D                        CC            .byte	$CC
09042 1F5E                        FE            .byte	$FE
09043 1F5F                        CC            .byte	$CC
09044 1F60                        CC            .byte	$CC
09045 1F61                        CC            .byte	$CC
09046 1F62                        CE            .byte	$CE
09047 1F63                        00            .byte	0
09048 1F64                        00            .byte	0
09049 1F65                        00            .byte	0
09050                                           ! 1297  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F66                        00            .byte	0
09052 1F67                        10            .byte	$10
09053 1F68                        38            .byte	$38
09054 1F69                        6C            .byte	$6C
09055 1F6A                        00            .byte	0
09056 1F6B                        7C            .byte	$7C
09057 1F6C                        C6            .byte	$C6
09058 1F6D                        C6            .byte	$C6
09059 1F6E                        C6            .byte	$C6
09060 1F6F                        C6            .byte	$C6
09061 1F70                        7C            .byte	$7C
09062 1F71                        00            .byte	0
09063 1F72                        00            .byte	0
09064 1F73                        00            .byte	0
09065                                           ! 1298  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F74                        00            .byte	0
09067 1F75                        00            .byte	0
09068 1F76                        C6            .byte	$C6
09069 1F77                        C6            .byte	$C6
09070 1F78                        00            .byte	0
09071 1F79                        7C            .byte	$7C
09072 1F7A                        C6            .byte	$C6
09073 1F7B                        C6            .byte	$C6
09074 1F7C                        C6            .byte	$C6
09075 1F7D                        C6            .byte	$C6
09076 1F7E                        7C            .byte	$7C
09077 1F7F                        00            .byte	0
09078 1F80                        00            .byte	0
09079 1F81                        00            .byte	0
09080                                           ! 1299  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09081 1F82                        00            .byte	0
09082 1F83                        60            .byte	$60
09083 1F84                        30            .byte	$30
09084 1F85                        18            .byte	$18
09085 1F86                        00            .byte	0
09086 1F87                        7C            .byte	$7C
09087 1F88                        C6            .byte	$C6
09088 1F89                        C6            .byte	$C6
09089 1F8A                        C6            .byte	$C6
09090 1F8B                        C6            .byte	$C6
09091 1F8C                        7C            .byte	$7C
09092 1F8D                        00            .byte	0
09093 1F8E                        00            .byte	0
09094 1F8F                        00            .byte	0
09095                                           ! 1300  0x00, 0x30, 0x78, 0xcc, 0x00, 
09096 1F90                        00            .byte	0
09097 1F91                        30            .byte	$30
09098 1F92                        78            .byte	$78
09099 1F93                        CC            .byte	$CC
09100 1F94                        00            .byte	0
09101                                           ! 1300 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09102 1F95                        CC            .byte	$CC
09103 1F96                        CC            .byte	$CC
09104 1F97                        CC            .byte	$CC
09105 1F98                        CC            .byte	$CC
09106 1F99                        CC            .byte	$CC
09107 1F9A                        76            .byte	$76
09108 1F9B                        00            .byte	0
09109 1F9C                        00            .byte	0
09110 1F9D                        00            .byte	0
09111                                           ! 1301  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1F9E                        00            .byte	0
09113 1F9F                        60            .byte	$60
09114 1FA0                        30            .byte	$30
09115 1FA1                        18            .byte	$18
09116 1FA2                        00            .byte	0
09117 1FA3                        CC            .byte	$CC
09118 1FA4                        CC            .byte	$CC
09119 1FA5                        CC            .byte	$CC
09120 1FA6                        CC            .byte	$CC
09121 1FA7                        CC            .byte	$CC
09122 1FA8                        76            .byte	$76
09123 1FA9                        00            .byte	0
09124 1FAA                        00            .byte	0
09125 1FAB                        00            .byte	0
09126                                           ! 1302  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FAC                        00            .byte	0
09128 1FAD                        00            .byte	0
09129 1FAE                        C6            .byte	$C6
09130 1FAF                        C6            .byte	$C6
09131 1FB0                        00            .byte	0
09132 1FB1                        C6            .byte	$C6
09133 1FB2                        C6            .byte	$C6
09134 1FB3                        C6            .byte	$C6
09135 1FB4                        C6            .byte	$C6
09136 1FB5                        7E            .byte	$7E
09137 1FB6                        06            .byte	6
09138 1FB7                        0C            .byte	$C
09139 1FB8                        78            .byte	$78
09140 1FB9                        00            .byte	0
09141                                           ! 1303  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FBA                        00            .byte	0
09143 1FBB                        C6            .byte	$C6
09144 1FBC                        C6            .byte	$C6
09145 1FBD                        38            .byte	$38
09146 1FBE                        6C            .byte	$6C
09147 1FBF                        C6            .byte	$C6
09148 1FC0                        C6            .byte	$C6
09149 1FC1                        C6            .byte	$C6
09150 1FC2                        C6            .byte	$C6
09151 1FC3                        6C            .byte	$6C
09152 1FC4                        38            .byte	$38
09153 1FC5                        00            .byte	0
09154 1FC6                        00            .byte	0
09155 1FC7                        00            .byte	0
09156                                           ! 1304  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FC8                        00            .byte	0
09158 1FC9                        C6            .byte	$C6
09159 1FCA                        C6            .byte	$C6
09160 1FCB                        00            .byte	0
09161 1FCC                        C6            .byte	$C6
09162 1FCD                        C6            .byte	$C6
09163 1FCE                        C6            .byte	$C6
09164 1FCF                        C6            .byte	$C6
09165 1FD0                        C6            .byte	$C6
09166 1FD1                        C6            .byte	$C6
09167 1FD2                        7C            .byte	$7C
09168 1FD3                        00            .byte	0
09169 1FD4                        00            .byte	0
09170 1FD5                        00            .byte	0
09171                                           ! 1305  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FD6                        00            .byte	0
09173 1FD7                        18            .byte	$18
09174 1FD8                        18            .byte	$18
09175 1FD9                        3C            .byte	$3C
09176 1FDA                        66            .byte	$66
09177 1FDB                        60            .byte	$60
09178 1FDC                        60            .byte	$60
09179 1FDD                        66            .byte	$66
09180 1FDE                        3C            .byte	$3C
09181 1FDF                        18            .byte	$18
09182 1FE0                        18            .byte	$18
09183 1FE1                        00            .byte	0
09184 1FE2                        00            .byte	0
09185 1FE3                        00            .byte	0
09186                                           ! 1306  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FE4                        00            .byte	0
09188 1FE5                        38            .byte	$38
09189 1FE6                        6C            .byte	$6C
09190 1FE7                        64            .byte	$64
09191 1FE8                        60            .byte	$60
09192 1FE9                        F0            .byte	$F0
09193 1FEA                        60            .byte	$60
09194 1FEB                        60            .byte	$60
09195 1FEC                        60            .byte	$60
09196 1FED                        E6            .byte	$E6
09197 1FEE                        FC            .byte	$FC
09198 1FEF                        00            .byte	0
09199 1FF0                        00            .byte	0
09200 1FF1                        00            .byte	0
09201                                           ! 1307  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FF2                        00            .byte	0
09203 1FF3                        00            .byte	0
09204 1FF4                        66            .byte	$66
09205 1FF5                        66            .byte	$66
09206 1FF6                        3C            .byte	$3C
09207 1FF7                        18            .byte	$18
09208 1FF8                        7E            .byte	$7E
09209 1FF9                        18            .byte	$18
09210 1FFA                        7E            .byte	$7E
09211 1FFB                        18            .byte	$18
09212 1FFC                        18            .byte	$18
09213 1FFD                        00            .byte	0
09214 1FFE                        00            .byte	0
09215 1FFF                        00            .byte	0
09216                                           ! 1308  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 2000                        00            .byte	0
09218 2001                        F8            .byte	$F8
09219 2002                        CC            .byte	$CC
09220 2003                        CC            .byte	$CC
09221 2004                        F8            .byte	$F8
09222 2005                        C4            .byte	$C4
09223 2006                        CC            .byte	$CC
09224 2007                        DE            .byte	$DE
09225 2008                        CC            .byte	$CC
09226 2009                        CC            .byte	$CC
09227 200A                        C6            .byte	$C6
09228 200B                        00            .byte	0
09229 200C                        00            .byte	0
09230 200D                        00            .byte	0
09231                                           ! 1309  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 200E                        00            .byte	0
09233 200F                        0E            .byte	$E
09234 2010                        1B            .byte	$1B
09235 2011                        18            .byte	$18
09236 2012                        18            .byte	$18
09237 2013                        18            .byte	$18
09238 2014                        7E            .byte	$7E
09239 2015                        18            .byte	$18
09240 2016                        18            .byte	$18
09241 2017                        18            .byte	$18
09242 2018                        18            .byte	$18
09243 2019                        D8            .byte	$D8
09244 201A                        70            .byte	$70
09245 201B                        00            .byte	0
09246                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 201C                        00            .byte	0
09248 201D                        18            .byte	$18
09249 201E                        30            .byte	$30
09250 201F                        60            .byte	$60
09251 2020                        00            .byte	0
09252 2021                        78            .byte	$78
09253 2022                        0C            .byte	$C
09254 2023                        7C            .byte	$7C
09255 2024                        CC            .byte	$CC
09256 2025                        CC            .byte	$CC
09257 2026                        76            .byte	$76
09258 2027                        00            .byte	0
09259 2028                        00            .byte	0
09260 2029                        00            .byte	0
09261                                           ! 1311  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 202A                        00            .byte	0
09263 202B                        0C            .byte	$C
09264 202C                        18            .byte	$18
09265 202D                        30            .byte	$30
09266 202E                        00            .byte	0
09267 202F                        38            .byte	$38
09268 2030                        18            .byte	$18
09269 2031                        18            .byte	$18
09270 2032                        18            .byte	$18
09271 2033                        18            .byte	$18
09272 2034                        3C            .byte	$3C
09273 2035                        00            .byte	0
09274 2036                        00            .byte	0
09275 2037                        00            .byte	0
09276                                           ! 1312  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 2038                        00            .byte	0
09278 2039                        18            .byte	$18
09279 203A                        30            .byte	$30
09280 203B                        60            .byte	$60
09281 203C                        00            .byte	0
09282 203D                        7C            .byte	$7C
09283 203E                        C6            .byte	$C6
09284 203F                        C6            .byte	$C6
09285 2040                        C6            .byte	$C6
09286 2041                        C6            .byte	$C6
09287 2042                        7C            .byte	$7C
09288 2043                        00            .byte	0
09289 2044                        00            .byte	0
09290 2045                        00            .byte	0
09291                                           ! 1313  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 2046                        00            .byte	0
09293 2047                        18            .byte	$18
09294 2048                        30            .byte	$30
09295 2049                        60            .byte	$60
09296 204A                        00            .byte	0
09297 204B                        CC            .byte	$CC
09298 204C                        CC            .byte	$CC
09299 204D                        CC            .byte	$CC
09300 204E                        CC            .byte	$CC
09301 204F                        CC            .byte	$CC
09302 2050                        76            .byte	$76
09303 2051                        00            .byte	0
09304 2052                        00            .byte	0
09305 2053                        00            .byte	0
09306                                           ! 1314  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2054                        00            .byte	0
09308 2055                        00            .byte	0
09309 2056                        76            .byte	$76
09310 2057                        DC            .byte	$DC
09311 2058                        00            .byte	0
09312 2059                        DC            .byte	$DC
09313 205A                        66            .byte	$66
09314 205B                        66            .byte	$66
09315 205C                        66            .byte	$66
09316 205D                        66            .byte	$66
09317 205E                        66            .byte	$66
09318 205F                        00            .byte	0
09319 2060                        00            .byte	0
09320 2061                        00            .byte	0
09321                                           ! 1315  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2062                        76            .byte	$76
09323 2063                        DC            .byte	$DC
09324 2064                        00            .byte	0
09325 2065                        C6            .byte	$C6
09326 2066                        E6            .byte	$E6
09327 2067                        F6            .byte	$F6
09328 2068                        FE            .byte	$FE
09329 2069                        DE            .byte	$DE
09330 206A                        CE            .byte	$CE
09331 206B                        C6            .byte	$C6
09332 206C                        C6            .byte	$C6
09333 206D                        00            .byte	0
09334 206E                        00            .byte	0
09335 206F                        00            .byte	0
09336                                           ! 1316  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 2070                        00            .byte	0
09338 2071                        3C            .byte	$3C
09339 2072                        6C            .byte	$6C
09340 2073                        6C            .byte	$6C
09341 2074                        3E            .byte	$3E
09342 2075                        00            .byte	0
09343 2076                        7E            .byte	$7E
09344 2077                        00            .byte	0
09345 2078                        00            .byte	0
09346 2079                        00            .byte	0
09347 207A                        00            .byte	0
09348 207B                        00            .byte	0
09349 207C                        00            .byte	0
09350 207D                        00            .byte	0
09351                                           ! 1317  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 207E                        00            .byte	0
09353 207F                        38            .byte	$38
09354 2080                        6C            .byte	$6C
09355 2081                        6C            .byte	$6C
09356 2082                        38            .byte	$38
09357 2083                        00            .byte	0
09358 2084                        7C            .byte	$7C
09359 2085                        00            .byte	0
09360 2086                        00            .byte	0
09361 2087                        00            .byte	0
09362 2088                        00            .byte	0
09363 2089                        00            .byte	0
09364 208A                        00            .byte	0
09365 208B                        00            .byte	0
09366                                           ! 1318  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 208C                        00            .byte	0
09368 208D                        00            .byte	0
09369 208E                        30            .byte	$30
09370 208F                        30            .byte	$30
09371 2090                        00            .byte	0
09372 2091                        30            .byte	$30
09373 2092                        30            .byte	$30
09374 2093                        60            .byte	$60
09375 2094                        C6            .byte	$C6
09376 2095                        C6            .byte	$C6
09377 2096                        7C            .byte	$7C
09378 2097                        00            .byte	0
09379 2098                        00            .byte	0
09380 2099                        00            .byte	0
09381                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 209A                        00            .byte	0
09383 209B                        00            .byte	0
09384 209C                        00            .byte	0
09385 209D                        00            .byte	0
09386 209E                        00            .byte	0
09387 209F                        00            .byte	0
09388 20A0                        FE            .byte	$FE
09389 20A1                        C0            .byte	$C0
09390 20A2                        C0            .byte	$C0
09391 20A3                        C0            .byte	$C0
09392 20A4                        00            .byte	0
09393 20A5                        00            .byte	0
09394 20A6                        00            .byte	0
09395 20A7                        00            .byte	0
09396                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20A8                        00            .byte	0
09398 20A9                        00            .byte	0
09399 20AA                        00            .byte	0
09400 20AB                        00            .byte	0
09401 20AC                        00            .byte	0
09402 20AD                        00            .byte	0
09403 20AE                        FE            .byte	$FE
09404 20AF                        06            .byte	6
09405 20B0                        06            .byte	6
09406 20B1                        06            .byte	6
09407 20B2                        00            .byte	0
09408 20B3                        00            .byte	0
09409 20B4                        00            .byte	0
09410 20B5                        00            .byte	0
09411                                           ! 1321  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20B6                        00            .byte	0
09413 20B7                        C0            .byte	$C0
09414 20B8                        C0            .byte	$C0
09415 20B9                        C6            .byte	$C6
09416 20BA                        CC            .byte	$CC
09417 20BB                        D8            .byte	$D8
09418 20BC                        30            .byte	$30
09419 20BD                        60            .byte	$60
09420 20BE                        DC            .byte	$DC
09421 20BF                        86            .byte	$86
09422 20C0                        0C            .byte	$C
09423 20C1                        18            .byte	$18
09424 20C2                        3E            .byte	$3E
09425 20C3                        00            .byte	0
09426                                           ! 1322  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20C4                        00            .byte	0
09428 20C5                        C0            .byte	$C0
09429 20C6                        C0            .byte	$C0
09430 20C7                        C6            .byte	$C6
09431 20C8                        CC            .byte	$CC
09432 20C9                        D8            .byte	$D8
09433 20CA                        30            .byte	$30
09434 20CB                        66            .byte	$66
09435 20CC                        CE            .byte	$CE
09436 20CD                        9E            .byte	$9E
09437 20CE                        3E            .byte	$3E
09438 20CF                        06            .byte	6
09439 20D0                        06            .byte	6
09440 20D1                        00            .byte	0
09441                                           ! 1323  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09442 20D2                        00            .byte	0
09443 20D3                        00            .byte	0
09444 20D4                        18            .byte	$18
09445 20D5                        18            .byte	$18
09446 20D6                        00            .byte	0
09447 20D7                        18            .byte	$18
09448 20D8                        18            .byte	$18
09449 20D9                        3C            .byte	$3C
09450 20DA                        3C            .byte	$3C
09451 20DB                        3C            .byte	$3C
09452 20DC                        18            .byte	$18
09453 20DD                        00            .byte	0
09454 20DE                        00            .byte	0
09455 20DF                        00            .byte	0
09456                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0x
09457 20E0                        00            .byte	0
09458 20E1                        00            .byte	0
09459 20E2                        00            .byte	0
09460 20E3                        00            .byte	0
09461 20E4                        36            .byte	$36
09462 20E5                        6C            .byte	$6C
09463                                           ! 1324 d8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09464 20E6                        D8            .byte	$D8
09465 20E7                        6C            .byte	$6C
09466 20E8                        36            .byte	$36
09467 20E9                        00            .byte	0
09468 20EA                        00            .byte	0
09469 20EB                        00            .byte	0
09470 20EC                        00            .byte	0
09471 20ED                        00            .byte	0
09472                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20EE                        00            .byte	0
09474 20EF                        00            .byte	0
09475 20F0                        00            .byte	0
09476 20F1                        00            .byte	0
09477 20F2                        D8            .byte	$D8
09478 20F3                        6C            .byte	$6C
09479 20F4                        36            .byte	$36
09480 20F5                        6C            .byte	$6C
09481 20F6                        D8            .byte	$D8
09482 20F7                        00            .byte	0
09483 20F8                        00            .byte	0
09484 20F9                        00            .byte	0
09485 20FA                        00            .byte	0
09486 20FB                        00            .byte	0
09487                                           ! 1326  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 20FC                        11            .byte	$11
09489 20FD                        44            .byte	$44
09490 20FE                        11            .byte	$11
09491 20FF                        44            .byte	$44
09492 2100                        11            .byte	$11
09493 2101                        44            .byte	$44
09494 2102                        11            .byte	$11
09495 2103                        44            .byte	$44
09496 2104                        11            .byte	$11
09497 2105                        44            .byte	$44
09498 2106                        11            .byte	$11
09499 2107                        44            .byte	$44
09500 2108                        11            .byte	$11
09501 2109                        44            .byte	$44
09502                                           ! 1327  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 210A                        55            .byte	$55
09504 210B                        AA            .byte	$AA
09505 210C                        55            .byte	$55
09506 210D                        AA            .byte	$AA
09507 210E                        55            .byte	$55
09508 210F                        AA            .byte	$AA
09509 2110                        55            .byte	$55
09510 2111                        AA            .byte	$AA
09511 2112                        55            .byte	$55
09512 2113                        AA            .byte	$AA
09513 2114                        55            .byte	$55
09514 2115                        AA            .byte	$AA
09515 2116                        55            .byte	$55
09516 2117                        AA            .byte	$AA
09517                                           ! 1328  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 2118                        DD            .byte	$DD
09519 2119                        77            .byte	$77
09520 211A                        DD            .byte	$DD
09521 211B                        77            .byte	$77
09522 211C                        DD            .byte	$DD
09523 211D                        77            .byte	$77
09524 211E                        DD            .byte	$DD
09525 211F                        77            .byte	$77
09526 2120                        DD            .byte	$DD
09527 2121                        77            .byte	$77
09528 2122                        DD            .byte	$DD
09529 2123                        77            .byte	$77
09530 2124                        DD            .byte	$DD
09531 2125                        77            .byte	$77
09532                                           ! 1329  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2126                        18            .byte	$18
09534 2127                        18            .byte	$18
09535 2128                        18            .byte	$18
09536 2129                        18            .byte	$18
09537 212A                        18            .byte	$18
09538 212B                        18            .byte	$18
09539 212C                        18            .byte	$18
09540 212D                        18            .byte	$18
09541 212E                        18            .byte	$18
09542 212F                        18            .byte	$18
09543 2130                        18            .byte	$18
09544 2131                        18            .byte	$18
09545 2132                        18            .byte	$18
09546 2133                        18            .byte	$18
09547                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2134                        18            .byte	$18
09549 2135                        18            .byte	$18
09550 2136                        18            .byte	$18
09551 2137                        18            .byte	$18
09552 2138                        18            .byte	$18
09553 2139                        18            .byte	$18
09554 213A                        18            .byte	$18
09555 213B                        F8            .byte	$F8
09556 213C                        18            .byte	$18
09557 213D                        18            .byte	$18
09558 213E                        18            .byte	$18
09559 213F                        18            .byte	$18
09560 2140                        18            .byte	$18
09561 2141                        18            .byte	$18
09562                                           ! 1331  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2142                        18            .byte	$18
09564 2143                        18            .byte	$18
09565 2144                        18            .byte	$18
09566 2145                        18            .byte	$18
09567 2146                        18            .byte	$18
09568 2147                        F8            .byte	$F8
09569 2148                        18            .byte	$18
09570 2149                        F8            .byte	$F8
09571 214A                        18            .byte	$18
09572 214B                        18            .byte	$18
09573 214C                        18            .byte	$18
09574 214D                        18            .byte	$18
09575 214E                        18            .byte	$18
09576 214F                        18            .byte	$18
09577                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2150                        36            .byte	$36
09579 2151                        36            .byte	$36
09580 2152                        36            .byte	$36
09581 2153                        36            .byte	$36
09582 2154                        36            .byte	$36
09583 2155                        36            .byte	$36
09584 2156                        36            .byte	$36
09585 2157                        F6            .byte	$F6
09586 2158                        36            .byte	$36
09587 2159                        36            .byte	$36
09588 215A                        36            .byte	$36
09589 215B                        36            .byte	$36
09590 215C                        36            .byte	$36
09591 215D                        36            .byte	$36
09592                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 215E                        00            .byte	0
09594 215F                        00            .byte	0
09595 2160                        00            .byte	0
09596 2161                        00            .byte	0
09597 2162                        00            .byte	0
09598 2163                        00            .byte	0
09599 2164                        00            .byte	0
09600 2165                        FE            .byte	$FE
09601 2166                        36            .byte	$36
09602 2167                        36            .byte	$36
09603 2168                        36            .byte	$36
09604 2169                        36            .byte	$36
09605 216A                        36            .byte	$36
09606 216B                        36            .byte	$36
09607                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 216C                        00            .byte	0
09609 216D                        00            .byte	0
09610 216E                        00            .byte	0
09611 216F                        00            .byte	0
09612 2170                        00            .byte	0
09613 2171                        F8            .byte	$F8
09614 2172                        18            .byte	$18
09615 2173                        F8            .byte	$F8
09616 2174                        18            .byte	$18
09617 2175                        18            .byte	$18
09618 2176                        18            .byte	$18
09619 2177                        18            .byte	$18
09620 2178                        18            .byte	$18
09621 2179                        18            .byte	$18
09622                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 217A                        36            .byte	$36
09624 217B                        36            .byte	$36
09625 217C                        36            .byte	$36
09626 217D                        36            .byte	$36
09627 217E                        36            .byte	$36
09628 217F                        F6            .byte	$F6
09629 2180                        06            .byte	6
09630 2181                        F6            .byte	$F6
09631 2182                        36            .byte	$36
09632 2183                        36            .byte	$36
09633 2184                        36            .byte	$36
09634 2185                        36            .byte	$36
09635 2186                        36            .byte	$36
09636 2187                        36            .byte	$36
09637                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 2188                        36            .byte	$36
09639 2189                        36            .byte	$36
09640 218A                        36            .byte	$36
09641 218B                        36            .byte	$36
09642 218C                        36            .byte	$36
09643 218D                        36            .byte	$36
09644 218E                        36            .byte	$36
09645 218F                        36            .byte	$36
09646 2190                        36            .byte	$36
09647 2191                        36            .byte	$36
09648 2192                        36            .byte	$36
09649 2193                        36            .byte	$36
09650 2194                        36            .byte	$36
09651 2195                        36            .byte	$36
09652                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 2196                        00            .byte	0
09654 2197                        00            .byte	0
09655 2198                        00            .byte	0
09656 2199                        00            .byte	0
09657 219A                        00            .byte	0
09658 219B                        FE            .byte	$FE
09659 219C                        06            .byte	6
09660 219D                        F6            .byte	$F6
09661 219E                        36            .byte	$36
09662 219F                        36            .byte	$36
09663 21A0                        36            .byte	$36
09664 21A1                        36            .byte	$36
09665 21A2                        36            .byte	$36
09666 21A3                        36            .byte	$36
09667                                           ! 1338  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21A4                        36            .byte	$36
09669 21A5                        36            .byte	$36
09670 21A6                        36            .byte	$36
09671 21A7                        36            .byte	$36
09672 21A8                        36            .byte	$36
09673 21A9                        F6            .byte	$F6
09674 21AA                        06            .byte	6
09675 21AB                        FE            .byte	$FE
09676 21AC                        00            .byte	0
09677 21AD                        00            .byte	0
09678 21AE                        00            .byte	0
09679 21AF                        00            .byte	0
09680 21B0                        00            .byte	0
09681 21B1                        00            .byte	0
09682                                           ! 1339  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21B2                        36            .byte	$36
09684 21B3                        36            .byte	$36
09685 21B4                        36            .byte	$36
09686 21B5                        36            .byte	$36
09687 21B6                        36            .byte	$36
09688 21B7                        36            .byte	$36
09689 21B8                        36            .byte	$36
09690 21B9                        FE            .byte	$FE
09691 21BA                        00            .byte	0
09692 21BB                        00            .byte	0
09693 21BC                        00            .byte	0
09694 21BD                        00            .byte	0
09695 21BE                        00            .byte	0
09696 21BF                        00            .byte	0
09697                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21C0                        18            .byte	$18
09699 21C1                        18            .byte	$18
09700 21C2                        18            .byte	$18
09701 21C3                        18            .byte	$18
09702 21C4                        18            .byte	$18
09703 21C5                        F8            .byte	$F8
09704 21C6                        18            .byte	$18
09705 21C7                        F8            .byte	$F8
09706 21C8                        00            .byte	0
09707 21C9                        00            .byte	0
09708 21CA                        00            .byte	0
09709 21CB                        00            .byte	0
09710 21CC                        00            .byte	0
09711 21CD                        00            .byte	0
09712                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21CE                        00            .byte	0
09714 21CF                        00            .byte	0
09715 21D0                        00            .byte	0
09716 21D1                        00            .byte	0
09717 21D2                        00            .byte	0
09718 21D3                        00            .byte	0
09719 21D4                        00            .byte	0
09720 21D5                        F8            .byte	$F8
09721 21D6                        18            .byte	$18
09722 21D7                        18            .byte	$18
09723 21D8                        18            .byte	$18
09724 21D9                        18            .byte	$18
09725 21DA                        18            .byte	$18
09726 21DB                        18            .byte	$18
09727                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21DC                        18            .byte	$18
09729 21DD                        18            .byte	$18
09730 21DE                        18            .byte	$18
09731 21DF                        18            .byte	$18
09732 21E0                        18            .byte	$18
09733 21E1                        18            .byte	$18
09734 21E2                        18            .byte	$18
09735 21E3                        1F            .byte	$1F
09736 21E4                        00            .byte	0
09737 21E5                        00            .byte	0
09738 21E6                        00            .byte	0
09739 21E7                        00            .byte	0
09740 21E8                        00            .byte	0
09741 21E9                        00            .byte	0
09742                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21EA                        18            .byte	$18
09744 21EB                        18            .byte	$18
09745 21EC                        18            .byte	$18
09746 21ED                        18            .byte	$18
09747 21EE                        18            .byte	$18
09748 21EF                        18            .byte	$18
09749 21F0                        18            .byte	$18
09750 21F1                        FF            .byte	$FF
09751 21F2                        00            .byte	0
09752 21F3                        00            .byte	0
09753 21F4                        00            .byte	0
09754 21F5                        00            .byte	0
09755 21F6                        00            .byte	0
09756 21F7                        00            .byte	0
09757                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 21F8                        00            .byte	0
09759 21F9                        00            .byte	0
09760 21FA                        00            .byte	0
09761 21FB                        00            .byte	0
09762 21FC                        00            .byte	0
09763 21FD                        00            .byte	0
09764 21FE                        00            .byte	0
09765 21FF                        FF            .byte	$FF
09766 2200                        18            .byte	$18
09767 2201                        18            .byte	$18
09768 2202                        18            .byte	$18
09769 2203                        18            .byte	$18
09770 2204                        18            .byte	$18
09771 2205                        18            .byte	$18
09772                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2206                        18            .byte	$18
09774 2207                        18            .byte	$18
09775 2208                        18            .byte	$18
09776 2209                        18            .byte	$18
09777 220A                        18            .byte	$18
09778 220B                        18            .byte	$18
09779 220C                        18            .byte	$18
09780 220D                        1F            .byte	$1F
09781 220E                        18            .byte	$18
09782 220F                        18            .byte	$18
09783 2210                        18            .byte	$18
09784 2211                        18            .byte	$18
09785 2212                        18            .byte	$18
09786 2213                        18            .byte	$18
09787                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2214                        00            .byte	0
09789 2215                        00            .byte	0
09790 2216                        00            .byte	0
09791 2217                        00            .byte	0
09792 2218                        00            .byte	0
09793 2219                        00            .byte	0
09794 221A                        00            .byte	0
09795 221B                        FF            .byte	$FF
09796 221C                        00            .byte	0
09797 221D                        00            .byte	0
09798 221E                        00            .byte	0
09799 221F                        00            .byte	0
09800 2220                        00            .byte	0
09801 2221                        00            .byte	0
09802                                           ! 1347  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2222                        18            .byte	$18
09804 2223                        18            .byte	$18
09805 2224                        18            .byte	$18
09806 2225                        18            .byte	$18
09807 2226                        18            .byte	$18
09808 2227                        18            .byte	$18
09809 2228                        18            .byte	$18
09810 2229                        FF            .byte	$FF
09811 222A                        18            .byte	$18
09812 222B                        18            .byte	$18
09813 222C                        18            .byte	$18
09814 222D                        18            .byte	$18
09815 222E                        18            .byte	$18
09816 222F                        18            .byte	$18
09817                                           ! 1348  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f
09818 2230                        18            .byte	$18
09819 2231                        18            .byte	$18
09820 2232                        18            .byte	$18
09821 2233                        18            .byte	$18
09822 2234                        18            .byte	$18
09823 2235                        1F            .byte	$1F
09824 2236                        18            .byte	$18
09825                                           ! 1348 , 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09826 2237                        1F            .byte	$1F
09827 2238                        18            .byte	$18
09828 2239                        18            .byte	$18
09829 223A                        18            .byte	$18
09830 223B                        18            .byte	$18
09831 223C                        18            .byte	$18
09832 223D                        18            .byte	$18
09833                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 223E                        36            .byte	$36
09835 223F                        36            .byte	$36
09836 2240                        36            .byte	$36
09837 2241                        36            .byte	$36
09838 2242                        36            .byte	$36
09839 2243                        36            .byte	$36
09840 2244                        36            .byte	$36
09841 2245                        37            .byte	$37
09842 2246                        36            .byte	$36
09843 2247                        36            .byte	$36
09844 2248                        36            .byte	$36
09845 2249                        36            .byte	$36
09846 224A                        36            .byte	$36
09847 224B                        36            .byte	$36
09848                                           ! 1350  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 224C                        36            .byte	$36
09850 224D                        36            .byte	$36
09851 224E                        36            .byte	$36
09852 224F                        36            .byte	$36
09853 2250                        36            .byte	$36
09854 2251                        37            .byte	$37
09855 2252                        30            .byte	$30
09856 2253                        3F            .byte	$3F
09857 2254                        00            .byte	0
09858 2255                        00            .byte	0
09859 2256                        00            .byte	0
09860 2257                        00            .byte	0
09861 2258                        00            .byte	0
09862 2259                        00            .byte	0
09863                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 225A                        00            .byte	0
09865 225B                        00            .byte	0
09866 225C                        00            .byte	0
09867 225D                        00            .byte	0
09868 225E                        00            .byte	0
09869 225F                        3F            .byte	$3F
09870 2260                        30            .byte	$30
09871 2261                        37            .byte	$37
09872 2262                        36            .byte	$36
09873 2263                        36            .byte	$36
09874 2264                        36            .byte	$36
09875 2265                        36            .byte	$36
09876 2266                        36            .byte	$36
09877 2267                        36            .byte	$36
09878                                           ! 1352  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 2268                        36            .byte	$36
09880 2269                        36            .byte	$36
09881 226A                        36            .byte	$36
09882 226B                        36            .byte	$36
09883 226C                        36            .byte	$36
09884 226D                        F7            .byte	$F7
09885 226E                        00            .byte	0
09886 226F                        FF            .byte	$FF
09887 2270                        00            .byte	0
09888 2271                        00            .byte	0
09889 2272                        00            .byte	0
09890 2273                        00            .byte	0
09891 2274                        00            .byte	0
09892 2275                        00            .byte	0
09893                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 2276                        00            .byte	0
09895 2277                        00            .byte	0
09896 2278                        00            .byte	0
09897 2279                        00            .byte	0
09898 227A                        00            .byte	0
09899 227B                        FF            .byte	$FF
09900 227C                        00            .byte	0
09901 227D                        F7            .byte	$F7
09902 227E                        36            .byte	$36
09903 227F                        36            .byte	$36
09904 2280                        36            .byte	$36
09905 2281                        36            .byte	$36
09906 2282                        36            .byte	$36
09907 2283                        36            .byte	$36
09908                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2284                        36            .byte	$36
09910 2285                        36            .byte	$36
09911 2286                        36            .byte	$36
09912 2287                        36            .byte	$36
09913 2288                        36            .byte	$36
09914 2289                        37            .byte	$37
09915 228A                        30            .byte	$30
09916 228B                        37            .byte	$37
09917 228C                        36            .byte	$36
09918 228D                        36            .byte	$36
09919 228E                        36            .byte	$36
09920 228F                        36            .byte	$36
09921 2290                        36            .byte	$36
09922 2291                        36            .byte	$36
09923                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 2292                        00            .byte	0
09925 2293                        00            .byte	0
09926 2294                        00            .byte	0
09927 2295                        00            .byte	0
09928 2296                        00            .byte	0
09929 2297                        FF            .byte	$FF
09930 2298                        00            .byte	0
09931 2299                        FF            .byte	$FF
09932 229A                        00            .byte	0
09933 229B                        00            .byte	0
09934 229C                        00            .byte	0
09935 229D                        00            .byte	0
09936 229E                        00            .byte	0
09937 229F                        00            .byte	0
09938                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22A0                        36            .byte	$36
09940 22A1                        36            .byte	$36
09941 22A2                        36            .byte	$36
09942 22A3                        36            .byte	$36
09943 22A4                        36            .byte	$36
09944 22A5                        F7            .byte	$F7
09945 22A6                        00            .byte	0
09946 22A7                        F7            .byte	$F7
09947 22A8                        36            .byte	$36
09948 22A9                        36            .byte	$36
09949 22AA                        36            .byte	$36
09950 22AB                        36            .byte	$36
09951 22AC                        36            .byte	$36
09952 22AD                        36            .byte	$36
09953                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22AE                        18            .byte	$18
09955 22AF                        18            .byte	$18
09956 22B0                        18            .byte	$18
09957 22B1                        18            .byte	$18
09958 22B2                        18            .byte	$18
09959 22B3                        FF            .byte	$FF
09960 22B4                        00            .byte	0
09961 22B5                        FF            .byte	$FF
09962 22B6                        00            .byte	0
09963 22B7                        00            .byte	0
09964 22B8                        00            .byte	0
09965 22B9                        00            .byte	0
09966 22BA                        00            .byte	0
09967 22BB                        00            .byte	0
09968                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22BC                        36            .byte	$36
09970 22BD                        36            .byte	$36
09971 22BE                        36            .byte	$36
09972 22BF                        36            .byte	$36
09973 22C0                        36            .byte	$36
09974 22C1                        36            .byte	$36
09975 22C2                        36            .byte	$36
09976 22C3                        FF            .byte	$FF
09977 22C4                        00            .byte	0
09978 22C5                        00            .byte	0
09979 22C6                        00            .byte	0
09980 22C7                        00            .byte	0
09981 22C8                        00            .byte	0
09982 22C9                        00            .byte	0
09983                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22CA                        00            .byte	0
09985 22CB                        00            .byte	0
09986 22CC                        00            .byte	0
09987 22CD                        00            .byte	0
09988 22CE                        00            .byte	0
09989 22CF                        FF            .byte	$FF
09990 22D0                        00            .byte	0
09991 22D1                        FF            .byte	$FF
09992 22D2                        18            .byte	$18
09993 22D3                        18            .byte	$18
09994 22D4                        18            .byte	$18
09995 22D5                        18            .byte	$18
09996 22D6                        18            .byte	$18
09997 22D7                        18            .byte	$18
09998                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22D8                        00            .byte	0
10000 22D9                        00            .byte	0
10001 22DA                        00            .byte	0
10002 22DB                        00            .byte	0
10003 22DC                        00            .byte	0
10004 22DD                        00            .byte	0
10005 22DE                        00            .byte	0
10006 22DF                        FF            .byte	$FF
10007 22E0                        36            .byte	$36
10008 22E1                        36            .byte	$36
10009 22E2                        36            .byte	$36
10010 22E3                        36            .byte	$36
10011 22E4                        36            .byte	$36
10012 22E5                        36            .byte	$36
10013                                           ! 1361  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22E6                        36            .byte	$36
10015 22E7                        36            .byte	$36
10016 22E8                        36            .byte	$36
10017 22E9                        36            .byte	$36
10018 22EA                        36            .byte	$36
10019 22EB                        36            .byte	$36
10020 22EC                        36            .byte	$36
10021 22ED                        3F            .byte	$3F
10022 22EE                        00            .byte	0
10023 22EF                        00            .byte	0
10024 22F0                        00            .byte	0
10025 22F1                        00            .byte	0
10026 22F2                        00            .byte	0
10027 22F3                        00            .byte	0
10028                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 22F4                        18            .byte	$18
10030 22F5                        18            .byte	$18
10031 22F6                        18            .byte	$18
10032 22F7                        18            .byte	$18
10033 22F8                        18            .byte	$18
10034 22F9                        1F            .byte	$1F
10035 22FA                        18            .byte	$18
10036 22FB                        1F            .byte	$1F
10037 22FC                        00            .byte	0
10038 22FD                        00            .byte	0
10039 22FE                        00            .byte	0
10040 22FF                        00            .byte	0
10041 2300                        00            .byte	0
10042 2301                        00            .byte	0
10043                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2302                        00            .byte	0
10045 2303                        00            .byte	0
10046 2304                        00            .byte	0
10047 2305                        00            .byte	0
10048 2306                        00            .byte	0
10049 2307                        1F            .byte	$1F
10050 2308                        18            .byte	$18
10051 2309                        1F            .byte	$1F
10052 230A                        18            .byte	$18
10053 230B                        18            .byte	$18
10054 230C                        18            .byte	$18
10055 230D                        18            .byte	$18
10056 230E                        18            .byte	$18
10057 230F                        18            .byte	$18
10058                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 2310                        00            .byte	0
10060 2311                        00            .byte	0
10061 2312                        00            .byte	0
10062 2313                        00            .byte	0
10063 2314                        00            .byte	0
10064 2315                        00            .byte	0
10065 2316                        00            .byte	0
10066 2317                        3F            .byte	$3F
10067 2318                        36            .byte	$36
10068 2319                        36            .byte	$36
10069 231A                        36            .byte	$36
10070 231B                        36            .byte	$36
10071 231C                        36            .byte	$36
10072 231D                        36            .byte	$36
10073                                           ! 1365  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 231E                        36            .byte	$36
10075 231F                        36            .byte	$36
10076 2320                        36            .byte	$36
10077 2321                        36            .byte	$36
10078 2322                        36            .byte	$36
10079 2323                        36            .byte	$36
10080 2324                        36            .byte	$36
10081 2325                        FF            .byte	$FF
10082 2326                        36            .byte	$36
10083 2327                        36            .byte	$36
10084 2328                        36            .byte	$36
10085 2329                        36            .byte	$36
10086 232A                        36            .byte	$36
10087 232B                        36            .byte	$36
10088                                           ! 1366  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 232C                        18            .byte	$18
10090 232D                        18            .byte	$18
10091 232E                        18            .byte	$18
10092 232F                        18            .byte	$18
10093 2330                        18            .byte	$18
10094 2331                        FF            .byte	$FF
10095 2332                        18            .byte	$18
10096 2333                        FF            .byte	$FF
10097 2334                        18            .byte	$18
10098 2335                        18            .byte	$18
10099 2336                        18            .byte	$18
10100 2337                        18            .byte	$18
10101 2338                        18            .byte	$18
10102 2339                        18            .byte	$18
10103                                           ! 1367  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 233A                        18            .byte	$18
10105 233B                        18            .byte	$18
10106 233C                        18            .byte	$18
10107 233D                        18            .byte	$18
10108 233E                        18            .byte	$18
10109 233F                        18            .byte	$18
10110 2340                        18            .byte	$18
10111 2341                        F8            .byte	$F8
10112 2342                        00            .byte	0
10113 2343                        00            .byte	0
10114 2344                        00            .byte	0
10115 2345                        00            .byte	0
10116 2346                        00            .byte	0
10117 2347                        00            .byte	0
10118                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 2348                        00            .byte	0
10120 2349                        00            .byte	0
10121 234A                        00            .byte	0
10122 234B                        00            .byte	0
10123 234C                        00            .byte	0
10124 234D                        00            .byte	0
10125 234E                        00            .byte	0
10126 234F                        1F            .byte	$1F
10127 2350                        18            .byte	$18
10128 2351                        18            .byte	$18
10129 2352                        18            .byte	$18
10130 2353                        18            .byte	$18
10131 2354                        18            .byte	$18
10132 2355                        18            .byte	$18
10133                                           ! 1369  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 2356                        FF            .byte	$FF
10135 2357                        FF            .byte	$FF
10136 2358                        FF            .byte	$FF
10137 2359                        FF            .byte	$FF
10138 235A                        FF            .byte	$FF
10139 235B                        FF            .byte	$FF
10140 235C                        FF            .byte	$FF
10141 235D                        FF            .byte	$FF
10142 235E                        FF            .byte	$FF
10143 235F                        FF            .byte	$FF
10144 2360                        FF            .byte	$FF
10145 2361                        FF            .byte	$FF
10146 2362                        FF            .byte	$FF
10147 2363                        FF            .byte	$FF
10148                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2364                        00            .byte	0
10150 2365                        00            .byte	0
10151 2366                        00            .byte	0
10152 2367                        00            .byte	0
10153 2368                        00            .byte	0
10154 2369                        00            .byte	0
10155 236A                        00            .byte	0
10156 236B                        FF            .byte	$FF
10157 236C                        FF            .byte	$FF
10158 236D                        FF            .byte	$FF
10159 236E                        FF            .byte	$FF
10160 236F                        FF            .byte	$FF
10161 2370                        FF            .byte	$FF
10162 2371                        FF            .byte	$FF
10163                                           ! 1371  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2372                        F0            .byte	$F0
10165 2373                        F0            .byte	$F0
10166 2374                        F0            .byte	$F0
10167 2375                        F0            .byte	$F0
10168 2376                        F0            .byte	$F0
10169 2377                        F0            .byte	$F0
10170 2378                        F0            .byte	$F0
10171 2379                        F0            .byte	$F0
10172 237A                        F0            .byte	$F0
10173 237B                        F0            .byte	$F0
10174 237C                        F0            .byte	$F0
10175 237D                        F0            .byte	$F0
10176 237E                        F0            .byte	$F0
10177 237F                        F0            .byte	$F0
10178                                           ! 1372  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
10179 2380                        0F            .byte	$F
10180 2381                        0F            .byte	$F
10181 2382                        0F            .byte	$F
10182 2383                        0F            .byte	$F
10183 2384                        0F            .byte	$F
10184 2385                        0F            .byte	$F
10185 2386                        0F            .byte	$F
10186 2387                        0F            .byte	$F
10187 2388                        0F            .byte	$F
10188                                           ! 1372 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10189 2389                        0F            .byte	$F
10190 238A                        0F            .byte	$F
10191 238B                        0F            .byte	$F
10192 238C                        0F            .byte	$F
10193 238D                        0F            .byte	$F
10194                                           ! 1373  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 238E                        FF            .byte	$FF
10196 238F                        FF            .byte	$FF
10197 2390                        FF            .byte	$FF
10198 2391                        FF            .byte	$FF
10199 2392                        FF            .byte	$FF
10200 2393                        FF            .byte	$FF
10201 2394                        FF            .byte	$FF
10202 2395                        00            .byte	0
10203 2396                        00            .byte	0
10204 2397                        00            .byte	0
10205 2398                        00            .byte	0
10206 2399                        00            .byte	0
10207 239A                        00            .byte	0
10208 239B                        00            .byte	0
10209                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 239C                        00            .byte	0
10211 239D                        00            .byte	0
10212 239E                        00            .byte	0
10213 239F                        00            .byte	0
10214 23A0                        00            .byte	0
10215 23A1                        76            .byte	$76
10216 23A2                        DC            .byte	$DC
10217 23A3                        D8            .byte	$D8
10218 23A4                        D8            .byte	$D8
10219 23A5                        DC            .byte	$DC
10220 23A6                        76            .byte	$76
10221 23A7                        00            .byte	0
10222 23A8                        00            .byte	0
10223 23A9                        00            .byte	0
10224                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23AA                        00            .byte	0
10226 23AB                        00            .byte	0
10227 23AC                        00            .byte	0
10228 23AD                        00            .byte	0
10229 23AE                        7C            .byte	$7C
10230 23AF                        C6            .byte	$C6
10231 23B0                        FC            .byte	$FC
10232 23B1                        C6            .byte	$C6
10233 23B2                        C6            .byte	$C6
10234 23B3                        FC            .byte	$FC
10235 23B4                        C0            .byte	$C0
10236 23B5                        C0            .byte	$C0
10237 23B6                        40            .byte	$40
10238 23B7                        00            .byte	0
10239                                           ! 1376  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23B8                        00            .byte	0
10241 23B9                        00            .byte	0
10242 23BA                        FE            .byte	$FE
10243 23BB                        C6            .byte	$C6
10244 23BC                        C6            .byte	$C6
10245 23BD                        C0            .byte	$C0
10246 23BE                        C0            .byte	$C0
10247 23BF                        C0            .byte	$C0
10248 23C0                        C0            .byte	$C0
10249 23C1                        C0            .byte	$C0
10250 23C2                        C0            .byte	$C0
10251 23C3                        00            .byte	0
10252 23C4                        00            .byte	0
10253 23C5                        00            .byte	0
10254                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23C6                        00            .byte	0
10256 23C7                        00            .byte	0
10257 23C8                        00            .byte	0
10258 23C9                        00            .byte	0
10259 23CA                        FE            .byte	$FE
10260 23CB                        6C            .byte	$6C
10261 23CC                        6C            .byte	$6C
10262 23CD                        6C            .byte	$6C
10263 23CE                        6C            .byte	$6C
10264 23CF                        6C            .byte	$6C
10265 23D0                        6C            .byte	$6C
10266 23D1                        00            .byte	0
10267 23D2                        00            .byte	0
10268 23D3                        00            .byte	0
10269                                           ! 1378  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23D4                        00            .byte	0
10271 23D5                        00            .byte	0
10272 23D6                        FE            .byte	$FE
10273 23D7                        C6            .byte	$C6
10274 23D8                        60            .byte	$60
10275 23D9                        30            .byte	$30
10276 23DA                        18            .byte	$18
10277 23DB                        30            .byte	$30
10278 23DC                        60            .byte	$60
10279 23DD                        C6            .byte	$C6
10280 23DE                        FE            .byte	$FE
10281 23DF                        00            .byte	0
10282 23E0                        00            .byte	0
10283 23E1                        00            .byte	0
10284                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23E2                        00            .byte	0
10286 23E3                        00            .byte	0
10287 23E4                        00            .byte	0
10288 23E5                        00            .byte	0
10289 23E6                        00            .byte	0
10290 23E7                        7E            .byte	$7E
10291 23E8                        D8            .byte	$D8
10292 23E9                        D8            .byte	$D8
10293 23EA                        D8            .byte	$D8
10294 23EB                        D8            .byte	$D8
10295 23EC                        70            .byte	$70
10296 23ED                        00            .byte	0
10297 23EE                        00            .byte	0
10298 23EF                        00            .byte	0
10299                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23F0                        00            .byte	0
10301 23F1                        00            .byte	0
10302 23F2                        00            .byte	0
10303 23F3                        00            .byte	0
10304 23F4                        66            .byte	$66
10305 23F5                        66            .byte	$66
10306 23F6                        66            .byte	$66
10307 23F7                        66            .byte	$66
10308 23F8                        7C            .byte	$7C
10309 23F9                        60            .byte	$60
10310 23FA                        60            .byte	$60
10311 23FB                        C0            .byte	$C0
10312 23FC                        00            .byte	0
10313 23FD                        00            .byte	0
10314                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 23FE                        00            .byte	0
10316 23FF                        00            .byte	0
10317 2400                        00            .byte	0
10318 2401                        00            .byte	0
10319 2402                        76            .byte	$76
10320 2403                        DC            .byte	$DC
10321 2404                        18            .byte	$18
10322 2405                        18            .byte	$18
10323 2406                        18            .byte	$18
10324 2407                        18            .byte	$18
10325 2408                        18            .byte	$18
10326 2409                        00            .byte	0
10327 240A                        00            .byte	0
10328 240B                        00            .byte	0
10329                                           ! 1382  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 240C                        00            .byte	0
10331 240D                        00            .byte	0
10332 240E                        7E            .byte	$7E
10333 240F                        18            .byte	$18
10334 2410                        3C            .byte	$3C
10335 2411                        66            .byte	$66
10336 2412                        66            .byte	$66
10337 2413                        66            .byte	$66
10338 2414                        3C            .byte	$3C
10339 2415                        18            .byte	$18
10340 2416                        7E            .byte	$7E
10341 2417                        00            .byte	0
10342 2418                        00            .byte	0
10343 2419                        00            .byte	0
10344                                           ! 1383  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 241A                        00            .byte	0
10346 241B                        00            .byte	0
10347 241C                        38            .byte	$38
10348 241D                        6C            .byte	$6C
10349 241E                        C6            .byte	$C6
10350 241F                        C6            .byte	$C6
10351 2420                        FE            .byte	$FE
10352 2421                        C6            .byte	$C6
10353 2422                        C6            .byte	$C6
10354 2423                        6C            .byte	$6C
10355 2424                        38            .byte	$38
10356 2425                        00            .byte	0
10357 2426                        00            .byte	0
10358 2427                        00            .byte	0
10359                                           ! 1384  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 2428                        00            .byte	0
10361 2429                        00            .byte	0
10362 242A                        38            .byte	$38
10363 242B                        6C            .byte	$6C
10364 242C                        C6            .byte	$C6
10365 242D                        C6            .byte	$C6
10366 242E                        C6            .byte	$C6
10367 242F                        6C            .byte	$6C
10368 2430                        6C            .byte	$6C
10369 2431                        6C            .byte	$6C
10370 2432                        EE            .byte	$EE
10371 2433                        00            .byte	0
10372 2434                        00            .byte	0
10373 2435                        00            .byte	0
10374                                           ! 1385  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 2436                        00            .byte	0
10376 2437                        00            .byte	0
10377 2438                        1E            .byte	$1E
10378 2439                        30            .byte	$30
10379 243A                        18            .byte	$18
10380 243B                        0C            .byte	$C
10381 243C                        3E            .byte	$3E
10382 243D                        66            .byte	$66
10383 243E                        66            .byte	$66
10384 243F                        66            .byte	$66
10385 2440                        3C            .byte	$3C
10386 2441                        00            .byte	0
10387 2442                        00            .byte	0
10388 2443                        00            .byte	0
10389                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2444                        00            .byte	0
10391 2445                        00            .byte	0
10392 2446                        00            .byte	0
10393 2447                        00            .byte	0
10394 2448                        00            .byte	0
10395 2449                        7E            .byte	$7E
10396 244A                        DB            .byte	$DB
10397 244B                        DB            .byte	$DB
10398 244C                        7E            .byte	$7E
10399 244D                        00            .byte	0
10400 244E                        00            .byte	0
10401 244F                        00            .byte	0
10402 2450                        00            .byte	0
10403 2451                        00            .byte	0
10404                                           ! 1387  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2452                        00            .byte	0
10406 2453                        00            .byte	0
10407 2454                        03            .byte	3
10408 2455                        06            .byte	6
10409 2456                        7E            .byte	$7E
10410 2457                        DB            .byte	$DB
10411 2458                        DB            .byte	$DB
10412 2459                        F3            .byte	$F3
10413 245A                        7E            .byte	$7E
10414 245B                        60            .byte	$60
10415 245C                        C0            .byte	$C0
10416 245D                        00            .byte	0
10417 245E                        00            .byte	0
10418 245F                        00            .byte	0
10419                                           ! 1388  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 2460                        00            .byte	0
10421 2461                        00            .byte	0
10422 2462                        1C            .byte	$1C
10423 2463                        30            .byte	$30
10424 2464                        60            .byte	$60
10425 2465                        60            .byte	$60
10426 2466                        7C            .byte	$7C
10427 2467                        60            .byte	$60
10428 2468                        60            .byte	$60
10429 2469                        30            .byte	$30
10430 246A                        1C            .byte	$1C
10431 246B                        00            .byte	0
10432 246C                        00            .byte	0
10433 246D                        00            .byte	0
10434                                           ! 1389  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 246E                        00            .byte	0
10436 246F                        00            .byte	0
10437 2470                        00            .byte	0
10438 2471                        7C            .byte	$7C
10439 2472                        C6            .byte	$C6
10440 2473                        C6            .byte	$C6
10441 2474                        C6            .byte	$C6
10442 2475                        C6            .byte	$C6
10443 2476                        C6            .byte	$C6
10444 2477                        C6            .byte	$C6
10445 2478                        C6            .byte	$C6
10446 2479                        00            .byte	0
10447 247A                        00            .byte	0
10448 247B                        00            .byte	0
10449                                           ! 1390  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 247C                        00            .byte	0
10451 247D                        00            .byte	0
10452 247E                        00            .byte	0
10453 247F                        FE            .byte	$FE
10454 2480                        00            .byte	0
10455 2481                        00            .byte	0
10456 2482                        FE            .byte	$FE
10457 2483                        00            .byte	0
10458 2484                        00            .byte	0
10459 2485                        FE            .byte	$FE
10460 2486                        00            .byte	0
10461 2487                        00            .byte	0
10462 2488                        00            .byte	0
10463 2489                        00            .byte	0
10464                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 248A                        00            .byte	0
10466 248B                        00            .byte	0
10467 248C                        00            .byte	0
10468 248D                        18            .byte	$18
10469 248E                        18            .byte	$18
10470 248F                        7E            .byte	$7E
10471 2490                        18            .byte	$18
10472 2491                        18            .byte	$18
10473 2492                        00            .byte	0
10474 2493                        00            .byte	0
10475 2494                        FF            .byte	$FF
10476 2495                        00            .byte	0
10477 2496                        00            .byte	0
10478 2497                        00            .byte	0
10479                                           ! 1392  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 2498                        00            .byte	0
10481 2499                        00            .byte	0
10482 249A                        30            .byte	$30
10483 249B                        18            .byte	$18
10484 249C                        0C            .byte	$C
10485 249D                        06            .byte	6
10486 249E                        0C            .byte	$C
10487 249F                        18            .byte	$18
10488 24A0                        30            .byte	$30
10489 24A1                        00            .byte	0
10490 24A2                        7E            .byte	$7E
10491 24A3                        00            .byte	0
10492 24A4                        00            .byte	0
10493 24A5                        00            .byte	0
10494                                           ! 1393  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24A6                        00            .byte	0
10496 24A7                        00            .byte	0
10497 24A8                        0C            .byte	$C
10498 24A9                        18            .byte	$18
10499 24AA                        30            .byte	$30
10500 24AB                        60            .byte	$60
10501 24AC                        30            .byte	$30
10502 24AD                        18            .byte	$18
10503 24AE                        0C            .byte	$C
10504 24AF                        00            .byte	0
10505 24B0                        7E            .byte	$7E
10506 24B1                        00            .byte	0
10507 24B2                        00            .byte	0
10508 24B3                        00            .byte	0
10509                                           ! 1394  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24B4                        00            .byte	0
10511 24B5                        00            .byte	0
10512 24B6                        0E            .byte	$E
10513 24B7                        1B            .byte	$1B
10514 24B8                        1B            .byte	$1B
10515 24B9                        18            .byte	$18
10516 24BA                        18            .byte	$18
10517 24BB                        18            .byte	$18
10518 24BC                        18            .byte	$18
10519 24BD                        18            .byte	$18
10520 24BE                        18            .byte	$18
10521 24BF                        18            .byte	$18
10522 24C0                        18            .byte	$18
10523 24C1                        18            .byte	$18
10524                                           ! 1395  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10525 24C2                        18            .byte	$18
10526 24C3                        18            .byte	$18
10527 24C4                        18            .byte	$18
10528 24C5                        18            .byte	$18
10529 24C6                        18            .byte	$18
10530 24C7                        18            .byte	$18
10531 24C8                        18            .byte	$18
10532 24C9                        18            .byte	$18
10533 24CA                        D8            .byte	$D8
10534 24CB                        D8            .byte	$D8
10535 24CC                        70            .byte	$70
10536 24CD                        00            .byte	0
10537 24CE                        00            .byte	0
10538 24CF                        00            .byte	0
10539                                           ! 1396  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x
10540 24D0                        00            .byte	0
10541 24D1                        00            .byte	0
10542 24D2                        00            .byte	0
10543 24D3                        18            .byte	$18
10544 24D4                        18            .byte	$18
10545 24D5                        00            .byte	0
10546 24D6                        7E            .byte	$7E
10547 24D7                        00            .byte	0
10548 24D8                        18            .byte	$18
10549 24D9                        18            .byte	$18
10550                                           ! 1396 00, 0x00, 0x00, 0x00,
10551 24DA                        00            .byte	0
10552 24DB                        00            .byte	0
10553 24DC                        00            .byte	0
10554 24DD                        00            .byte	0
10555                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24DE                        00            .byte	0
10557 24DF                        00            .byte	0
10558 24E0                        00            .byte	0
10559 24E1                        00            .byte	0
10560 24E2                        76            .byte	$76
10561 24E3                        DC            .byte	$DC
10562 24E4                        00            .byte	0
10563 24E5                        76            .byte	$76
10564 24E6                        DC            .byte	$DC
10565 24E7                        00            .byte	0
10566 24E8                        00            .byte	0
10567 24E9                        00            .byte	0
10568 24EA                        00            .byte	0
10569 24EB                        00            .byte	0
10570                                           ! 1398  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24EC                        00            .byte	0
10572 24ED                        38            .byte	$38
10573 24EE                        6C            .byte	$6C
10574 24EF                        6C            .byte	$6C
10575 24F0                        38            .byte	$38
10576 24F1                        00            .byte	0
10577 24F2                        00            .byte	0
10578 24F3                        00            .byte	0
10579 24F4                        00            .byte	0
10580 24F5                        00            .byte	0
10581 24F6                        00            .byte	0
10582 24F7                        00            .byte	0
10583 24F8                        00            .byte	0
10584 24F9                        00            .byte	0
10585                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 24FA                        00            .byte	0
10587 24FB                        00            .byte	0
10588 24FC                        00            .byte	0
10589 24FD                        00            .byte	0
10590 24FE                        00            .byte	0
10591 24FF                        00            .byte	0
10592 2500                        18            .byte	$18
10593 2501                        18            .byte	$18
10594 2502                        00            .byte	0
10595 2503                        00            .byte	0
10596 2504                        00            .byte	0
10597 2505                        00            .byte	0
10598 2506                        00            .byte	0
10599 2507                        00            .byte	0
10600                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 2508                        00            .byte	0
10602 2509                        00            .byte	0
10603 250A                        00            .byte	0
10604 250B                        00            .byte	0
10605 250C                        00            .byte	0
10606 250D                        00            .byte	0
10607 250E                        00            .byte	0
10608 250F                        18            .byte	$18
10609 2510                        00            .byte	0
10610 2511                        00            .byte	0
10611 2512                        00            .byte	0
10612 2513                        00            .byte	0
10613 2514                        00            .byte	0
10614 2515                        00            .byte	0
10615                                           ! 1401  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 2516                        00            .byte	0
10617 2517                        0F            .byte	$F
10618 2518                        0C            .byte	$C
10619 2519                        0C            .byte	$C
10620 251A                        0C            .byte	$C
10621 251B                        0C            .byte	$C
10622 251C                        0C            .byte	$C
10623 251D                        EC            .byte	$EC
10624 251E                        6C            .byte	$6C
10625 251F                        3C            .byte	$3C
10626 2520                        1C            .byte	$1C
10627 2521                        00            .byte	0
10628 2522                        00            .byte	0
10629 2523                        00            .byte	0
10630                                           ! 1402  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2524                        00            .byte	0
10632 2525                        D8            .byte	$D8
10633 2526                        6C            .byte	$6C
10634 2527                        6C            .byte	$6C
10635 2528                        6C            .byte	$6C
10636 2529                        6C            .byte	$6C
10637 252A                        6C            .byte	$6C
10638 252B                        00            .byte	0
10639 252C                        00            .byte	0
10640 252D                        00            .byte	0
10641 252E                        00            .byte	0
10642 252F                        00            .byte	0
10643 2530                        00            .byte	0
10644 2531                        00            .byte	0
10645                                           ! 1403  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2532                        00            .byte	0
10647 2533                        70            .byte	$70
10648 2534                        D8            .byte	$D8
10649 2535                        30            .byte	$30
10650 2536                        60            .byte	$60
10651 2537                        C8            .byte	$C8
10652 2538                        F8            .byte	$F8
10653 2539                        00            .byte	0
10654 253A                        00            .byte	0
10655 253B                        00            .byte	0
10656 253C                        00            .byte	0
10657 253D                        00            .byte	0
10658 253E                        00            .byte	0
10659 253F                        00            .byte	0
10660                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 2540                        00            .byte	0
10662 2541                        00            .byte	0
10663 2542                        00            .byte	0
10664 2543                        00            .byte	0
10665 2544                        7C            .byte	$7C
10666 2545                        7C            .byte	$7C
10667 2546                        7C            .byte	$7C
10668 2547                        7C            .byte	$7C
10669 2548                        7C            .byte	$7C
10670 2549                        7C            .byte	$7C
10671 254A                        00            .byte	0
10672 254B                        00            .byte	0
10673 254C                        00            .byte	0
10674 254D                        00            .byte	0
10675                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 254E                        00            .byte	0
10677 254F                        00            .byte	0
10678 2550                        00            .byte	0
10679 2551                        00            .byte	0
10680 2552                        00            .byte	0
10681 2553                        00            .byte	0
10682 2554                        00            .byte	0
10683 2555                        00            .byte	0
10684 2556                        00            .byte	0
10685 2557                        00            .byte	0
10686 2558                        00            .byte	0
10687 2559                        00            .byte	0
10688 255A                        00            .byte	0
10689                                           ! 1406 };
10690 255B                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1407 static Bit8u vgafont16[256*16]=
10693                                           ! 1408 {
10694                       0000255C            _vgafont16:
10695                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 255C                        00            .byte	0
10697 255D                        00            .byte	0
10698 255E                        00            .byte	0
10699 255F                        00            .byte	0
10700 2560                        00            .byte	0
10701 2561                        00            .byte	0
10702 2562                        00            .byte	0
10703 2563                        00            .byte	0
10704 2564                        00            .byte	0
10705 2565                        00            .byte	0
10706 2566                        00            .byte	0
10707 2567                        00            .byte	0
10708 2568                        00            .byte	0
10709 2569                        00            .byte	0
10710 256A                        00            .byte	0
10711 256B                        00            .byte	0
10712                                           ! 1410  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 256C                        00            .byte	0
10714 256D                        00            .byte	0
10715 256E                        7E            .byte	$7E
10716 256F                        81            .byte	$81
10717 2570                        A5            .byte	$A5
10718 2571                        81            .byte	$81
10719 2572                        81            .byte	$81
10720 2573                        BD            .byte	$BD
10721 2574                        99            .byte	$99
10722 2575                        81            .byte	$81
10723 2576                        81            .byte	$81
10724 2577                        7E            .byte	$7E
10725 2578                        00            .byte	0
10726 2579                        00            .byte	0
10727 257A                        00            .byte	0
10728 257B                        00            .byte	0
10729                                           ! 1411  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 257C                        00            .byte	0
10731 257D                        00            .byte	0
10732 257E                        7E            .byte	$7E
10733 257F                        FF            .byte	$FF
10734 2580                        DB            .byte	$DB
10735 2581                        FF            .byte	$FF
10736 2582                        FF            .byte	$FF
10737 2583                        C3            .byte	$C3
10738 2584                        E7            .byte	$E7
10739 2585                        FF            .byte	$FF
10740 2586                        FF            .byte	$FF
10741 2587                        7E            .byte	$7E
10742 2588                        00            .byte	0
10743 2589                        00            .byte	0
10744 258A                        00            .byte	0
10745 258B                        00            .byte	0
10746                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 258C                        00            .byte	0
10748 258D                        00            .byte	0
10749 258E                        00            .byte	0
10750 258F                        00            .byte	0
10751 2590                        6C            .byte	$6C
10752 2591                        FE            .byte	$FE
10753 2592                        FE            .byte	$FE
10754 2593                        FE            .byte	$FE
10755 2594                        FE            .byte	$FE
10756 2595                        7C            .byte	$7C
10757 2596                        38            .byte	$38
10758 2597                        10            .byte	$10
10759 2598                        00            .byte	0
10760 2599                        00            .byte	0
10761 259A                        00            .byte	0
10762 259B                        00            .byte	0
10763                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 259C                        00            .byte	0
10765 259D                        00            .byte	0
10766 259E                        00            .byte	0
10767 259F                        00            .byte	0
10768 25A0                        10            .byte	$10
10769 25A1                        38            .byte	$38
10770 25A2                        7C            .byte	$7C
10771 25A3                        FE            .byte	$FE
10772 25A4                        7C            .byte	$7C
10773 25A5                        38            .byte	$38
10774 25A6                        10            .byte	$10
10775 25A7                        00            .byte	0
10776 25A8                        00            .byte	0
10777 25A9                        00            .byte	0
10778 25AA                        00            .byte	0
10779 25AB                        00            .byte	0
10780                                           ! 1414  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25AC                        00            .byte	0
10782 25AD                        00            .byte	0
10783 25AE                        00            .byte	0
10784 25AF                        18            .byte	$18
10785 25B0                        3C            .byte	$3C
10786 25B1                        3C            .byte	$3C
10787 25B2                        E7            .byte	$E7
10788 25B3                        E7            .byte	$E7
10789 25B4                        E7            .byte	$E7
10790 25B5                        18            .byte	$18
10791 25B6                        18            .byte	$18
10792 25B7                        3C            .byte	$3C
10793 25B8                        00            .byte	0
10794 25B9                        00            .byte	0
10795 25BA                        00            .byte	0
10796 25BB                        00            .byte	0
10797                                           ! 1415  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25BC                        00            .byte	0
10799 25BD                        00            .byte	0
10800 25BE                        00            .byte	0
10801 25BF                        18            .byte	$18
10802 25C0                        3C            .byte	$3C
10803 25C1                        7E            .byte	$7E
10804 25C2                        FF            .byte	$FF
10805 25C3                        FF            .byte	$FF
10806 25C4                        7E            .byte	$7E
10807 25C5                        18            .byte	$18
10808 25C6                        18            .byte	$18
10809 25C7                        3C            .byte	$3C
10810 25C8                        00            .byte	0
10811 25C9                        00            .byte	0
10812 25CA                        00            .byte	0
10813 25CB                        00            .byte	0
10814                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25CC                        00            .byte	0
10816 25CD                        00            .byte	0
10817 25CE                        00            .byte	0
10818 25CF                        00            .byte	0
10819 25D0                        00            .byte	0
10820 25D1                        00            .byte	0
10821 25D2                        18            .byte	$18
10822 25D3                        3C            .byte	$3C
10823 25D4                        3C            .byte	$3C
10824 25D5                        18            .byte	$18
10825 25D6                        00            .byte	0
10826 25D7                        00            .byte	0
10827 25D8                        00            .byte	0
10828 25D9                        00            .byte	0
10829 25DA                        00            .byte	0
10830 25DB                        00            .byte	0
10831                                           ! 1417  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25DC                        FF            .byte	$FF
10833 25DD                        FF            .byte	$FF
10834 25DE                        FF            .byte	$FF
10835 25DF                        FF            .byte	$FF
10836 25E0                        FF            .byte	$FF
10837 25E1                        FF            .byte	$FF
10838 25E2                        E7            .byte	$E7
10839 25E3                        C3            .byte	$C3
10840 25E4                        C3            .byte	$C3
10841 25E5                        E7            .byte	$E7
10842 25E6                        FF            .byte	$FF
10843 25E7                        FF            .byte	$FF
10844 25E8                        FF            .byte	$FF
10845 25E9                        FF            .byte	$FF
10846 25EA                        FF            .byte	$FF
10847 25EB                        FF            .byte	$FF
10848                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25EC                        00            .byte	0
10850 25ED                        00            .byte	0
10851 25EE                        00            .byte	0
10852 25EF                        00            .byte	0
10853 25F0                        00            .byte	0
10854 25F1                        3C            .byte	$3C
10855 25F2                        66            .byte	$66
10856 25F3                        42            .byte	$42
10857 25F4                        42            .byte	$42
10858 25F5                        66            .byte	$66
10859 25F6                        3C            .byte	$3C
10860 25F7                        00            .byte	0
10861 25F8                        00            .byte	0
10862 25F9                        00            .byte	0
10863 25FA                        00            .byte	0
10864 25FB                        00            .byte	0
10865                                           ! 1419  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 25FC                        FF            .byte	$FF
10867 25FD                        FF            .byte	$FF
10868 25FE                        FF            .byte	$FF
10869 25FF                        FF            .byte	$FF
10870 2600                        FF            .byte	$FF
10871 2601                        C3            .byte	$C3
10872 2602                        99            .byte	$99
10873 2603                        BD            .byte	$BD
10874 2604                        BD            .byte	$BD
10875 2605                        99            .byte	$99
10876 2606                        C3            .byte	$C3
10877 2607                        FF            .byte	$FF
10878 2608                        FF            .byte	$FF
10879 2609                        FF            .byte	$FF
10880 260A                        FF            .byte	$FF
10881 260B                        FF            .byte	$FF
10882                                           ! 1420  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10883 260C                        00            .byte	0
10884 260D                        00            .byte	0
10885 260E                        1E            .byte	$1E
10886 260F                        0E            .byte	$E
10887 2610                        1A            .byte	$1A
10888 2611                        32            .byte	$32
10889 2612                        78            .byte	$78
10890 2613                        CC            .byte	$CC
10891 2614                        CC            .byte	$CC
10892 2615                        CC            .byte	$CC
10893 2616                        CC            .byte	$CC
10894 2617                        78            .byte	$78
10895 2618                        00            .byte	0
10896 2619                        00            .byte	0
10897 261A                        00            .byte	0
10898 261B                        00            .byte	0
10899                                           ! 1421  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 
10900 261C                        00            .byte	0
10901 261D                        00            .byte	0
10902 261E                        3C            .byte	$3C
10903 261F                        66            .byte	$66
10904 2620                        66            .byte	$66
10905 2621                        66            .byte	$66
10906 2622                        66            .byte	$66
10907 2623                        3C            .byte	$3C
10908 2624                        18            .byte	$18
10909 2625                        7E            .byte	$7E
10910                                           ! 1421 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10911 2626                        18            .byte	$18
10912 2627                        18            .byte	$18
10913 2628                        00            .byte	0
10914 2629                        00            .byte	0
10915 262A                        00            .byte	0
10916 262B                        00            .byte	0
10917                                           ! 1422  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 262C                        00            .byte	0
10919 262D                        00            .byte	0
10920 262E                        3F            .byte	$3F
10921 262F                        33            .byte	$33
10922 2630                        3F            .byte	$3F
10923 2631                        30            .byte	$30
10924 2632                        30            .byte	$30
10925 2633                        30            .byte	$30
10926 2634                        30            .byte	$30
10927 2635                        70            .byte	$70
10928 2636                        F0            .byte	$F0
10929 2637                        E0            .byte	$E0
10930 2638                        00            .byte	0
10931 2639                        00            .byte	0
10932 263A                        00            .byte	0
10933 263B                        00            .byte	0
10934                                           ! 1423  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 263C                        00            .byte	0
10936 263D                        00            .byte	0
10937 263E                        7F            .byte	$7F
10938 263F                        63            .byte	$63
10939 2640                        7F            .byte	$7F
10940 2641                        63            .byte	$63
10941 2642                        63            .byte	$63
10942 2643                        63            .byte	$63
10943 2644                        63            .byte	$63
10944 2645                        67            .byte	$67
10945 2646                        E7            .byte	$E7
10946 2647                        E6            .byte	$E6
10947 2648                        C0            .byte	$C0
10948 2649                        00            .byte	0
10949 264A                        00            .byte	0
10950 264B                        00            .byte	0
10951                                           ! 1424  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 264C                        00            .byte	0
10953 264D                        00            .byte	0
10954 264E                        00            .byte	0
10955 264F                        18            .byte	$18
10956 2650                        18            .byte	$18
10957 2651                        DB            .byte	$DB
10958 2652                        3C            .byte	$3C
10959 2653                        E7            .byte	$E7
10960 2654                        3C            .byte	$3C
10961 2655                        DB            .byte	$DB
10962 2656                        18            .byte	$18
10963 2657                        18            .byte	$18
10964 2658                        00            .byte	0
10965 2659                        00            .byte	0
10966 265A                        00            .byte	0
10967 265B                        00            .byte	0
10968                                           ! 1425  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 265C                        00            .byte	0
10970 265D                        80            .byte	$80
10971 265E                        C0            .byte	$C0
10972 265F                        E0            .byte	$E0
10973 2660                        F0            .byte	$F0
10974 2661                        F8            .byte	$F8
10975 2662                        FE            .byte	$FE
10976 2663                        F8            .byte	$F8
10977 2664                        F0            .byte	$F0
10978 2665                        E0            .byte	$E0
10979 2666                        C0            .byte	$C0
10980 2667                        80            .byte	$80
10981 2668                        00            .byte	0
10982 2669                        00            .byte	0
10983 266A                        00            .byte	0
10984 266B                        00            .byte	0
10985                                           ! 1426  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 266C                        00            .byte	0
10987 266D                        02            .byte	2
10988 266E                        06            .byte	6
10989 266F                        0E            .byte	$E
10990 2670                        1E            .byte	$1E
10991 2671                        3E            .byte	$3E
10992 2672                        FE            .byte	$FE
10993 2673                        3E            .byte	$3E
10994 2674                        1E            .byte	$1E
10995 2675                        0E            .byte	$E
10996 2676                        06            .byte	6
10997 2677                        02            .byte	2
10998 2678                        00            .byte	0
10999 2679                        00            .byte	0
11000 267A                        00            .byte	0
11001 267B                        00            .byte	0
11002                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 267C                        00            .byte	0
11004 267D                        00            .byte	0
11005 267E                        18            .byte	$18
11006 267F                        3C            .byte	$3C
11007 2680                        7E            .byte	$7E
11008 2681                        18            .byte	$18
11009 2682                        18            .byte	$18
11010 2683                        18            .byte	$18
11011 2684                        7E            .byte	$7E
11012 2685                        3C            .byte	$3C
11013 2686                        18            .byte	$18
11014 2687                        00            .byte	0
11015 2688                        00            .byte	0
11016 2689                        00            .byte	0
11017 268A                        00            .byte	0
11018 268B                        00            .byte	0
11019                                           ! 1428  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 268C                        00            .byte	0
11021 268D                        00            .byte	0
11022 268E                        66            .byte	$66
11023 268F                        66            .byte	$66
11024 2690                        66            .byte	$66
11025 2691                        66            .byte	$66
11026 2692                        66            .byte	$66
11027 2693                        66            .byte	$66
11028 2694                        66            .byte	$66
11029 2695                        00            .byte	0
11030 2696                        66            .byte	$66
11031 2697                        66            .byte	$66
11032 2698                        00            .byte	0
11033 2699                        00            .byte	0
11034 269A                        00            .byte	0
11035 269B                        00            .byte	0
11036                                           ! 1429  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 269C                        00            .byte	0
11038 269D                        00            .byte	0
11039 269E                        7F            .byte	$7F
11040 269F                        DB            .byte	$DB
11041 26A0                        DB            .byte	$DB
11042 26A1                        DB            .byte	$DB
11043 26A2                        7B            .byte	$7B
11044 26A3                        1B            .byte	$1B
11045 26A4                        1B            .byte	$1B
11046 26A5                        1B            .byte	$1B
11047 26A6                        1B            .byte	$1B
11048 26A7                        1B            .byte	$1B
11049 26A8                        00            .byte	0
11050 26A9                        00            .byte	0
11051 26AA                        00            .byte	0
11052 26AB                        00            .byte	0
11053                                           ! 1430  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26AC                        00            .byte	0
11055 26AD                        7C            .byte	$7C
11056 26AE                        C6            .byte	$C6
11057 26AF                        60            .byte	$60
11058 26B0                        38            .byte	$38
11059 26B1                        6C            .byte	$6C
11060 26B2                        C6            .byte	$C6
11061 26B3                        C6            .byte	$C6
11062 26B4                        6C            .byte	$6C
11063 26B5                        38            .byte	$38
11064 26B6                        0C            .byte	$C
11065 26B7                        C6            .byte	$C6
11066 26B8                        7C            .byte	$7C
11067 26B9                        00            .byte	0
11068 26BA                        00            .byte	0
11069 26BB                        00            .byte	0
11070                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26BC                        00            .byte	0
11072 26BD                        00            .byte	0
11073 26BE                        00            .byte	0
11074 26BF                        00            .byte	0
11075 26C0                        00            .byte	0
11076 26C1                        00            .byte	0
11077 26C2                        00            .byte	0
11078 26C3                        00            .byte	0
11079 26C4                        FE            .byte	$FE
11080 26C5                        FE            .byte	$FE
11081 26C6                        FE            .byte	$FE
11082 26C7                        FE            .byte	$FE
11083 26C8                        00            .byte	0
11084 26C9                        00            .byte	0
11085 26CA                        00            .byte	0
11086 26CB                        00            .byte	0
11087                                           ! 1432  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26CC                        00            .byte	0
11089 26CD                        00            .byte	0
11090 26CE                        18            .byte	$18
11091 26CF                        3C            .byte	$3C
11092 26D0                        7E            .byte	$7E
11093 26D1                        18            .byte	$18
11094 26D2                        18            .byte	$18
11095 26D3                        18            .byte	$18
11096 26D4                        7E            .byte	$7E
11097 26D5                        3C            .byte	$3C
11098 26D6                        18            .byte	$18
11099 26D7                        7E            .byte	$7E
11100 26D8                        00            .byte	0
11101 26D9                        00            .byte	0
11102 26DA                        00            .byte	0
11103 26DB                        00            .byte	0
11104                                           ! 1433  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26DC                        00            .byte	0
11106 26DD                        00            .byte	0
11107 26DE                        18            .byte	$18
11108 26DF                        3C            .byte	$3C
11109 26E0                        7E            .byte	$7E
11110 26E1                        18            .byte	$18
11111 26E2                        18            .byte	$18
11112 26E3                        18            .byte	$18
11113 26E4                        18            .byte	$18
11114 26E5                        18            .byte	$18
11115 26E6                        18            .byte	$18
11116 26E7                        18            .byte	$18
11117 26E8                        00            .byte	0
11118 26E9                        00            .byte	0
11119 26EA                        00            .byte	0
11120 26EB                        00            .byte	0
11121                                           ! 1434  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26EC                        00            .byte	0
11123 26ED                        00            .byte	0
11124 26EE                        18            .byte	$18
11125 26EF                        18            .byte	$18
11126 26F0                        18            .byte	$18
11127 26F1                        18            .byte	$18
11128 26F2                        18            .byte	$18
11129 26F3                        18            .byte	$18
11130 26F4                        18            .byte	$18
11131 26F5                        7E            .byte	$7E
11132 26F6                        3C            .byte	$3C
11133 26F7                        18            .byte	$18
11134 26F8                        00            .byte	0
11135 26F9                        00            .byte	0
11136 26FA                        00            .byte	0
11137 26FB                        00            .byte	0
11138                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 26FC                        00            .byte	0
11140 26FD                        00            .byte	0
11141 26FE                        00            .byte	0
11142 26FF                        00            .byte	0
11143 2700                        00            .byte	0
11144 2701                        18            .byte	$18
11145 2702                        0C            .byte	$C
11146 2703                        FE            .byte	$FE
11147 2704                        0C            .byte	$C
11148 2705                        18            .byte	$18
11149 2706                        00            .byte	0
11150 2707                        00            .byte	0
11151 2708                        00            .byte	0
11152 2709                        00            .byte	0
11153 270A                        00            .byte	0
11154 270B                        00            .byte	0
11155                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 270C                        00            .byte	0
11157 270D                        00            .byte	0
11158 270E                        00            .byte	0
11159 270F                        00            .byte	0
11160 2710                        00            .byte	0
11161 2711                        30            .byte	$30
11162 2712                        60            .byte	$60
11163 2713                        FE            .byte	$FE
11164 2714                        60            .byte	$60
11165 2715                        30            .byte	$30
11166 2716                        00            .byte	0
11167 2717                        00            .byte	0
11168 2718                        00            .byte	0
11169 2719                        00            .byte	0
11170 271A                        00            .byte	0
11171 271B                        00            .byte	0
11172                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 271C                        00            .byte	0
11174 271D                        00            .byte	0
11175 271E                        00            .byte	0
11176 271F                        00            .byte	0
11177 2720                        00            .byte	0
11178 2721                        00            .byte	0
11179 2722                        C0            .byte	$C0
11180 2723                        C0            .byte	$C0
11181 2724                        C0            .byte	$C0
11182 2725                        FE            .byte	$FE
11183 2726                        00            .byte	0
11184 2727                        00            .byte	0
11185 2728                        00            .byte	0
11186 2729                        00            .byte	0
11187 272A                        00            .byte	0
11188 272B                        00            .byte	0
11189                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 272C                        00            .byte	0
11191 272D                        00            .byte	0
11192 272E                        00            .byte	0
11193 272F                        00            .byte	0
11194 2730                        00            .byte	0
11195 2731                        24            .byte	$24
11196 2732                        66            .byte	$66
11197 2733                        FF            .byte	$FF
11198 2734                        66            .byte	$66
11199 2735                        24            .byte	$24
11200 2736                        00            .byte	0
11201 2737                        00            .byte	0
11202 2738                        00            .byte	0
11203 2739                        00            .byte	0
11204 273A                        00            .byte	0
11205 273B                        00            .byte	0
11206                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 273C                        00            .byte	0
11208 273D                        00            .byte	0
11209 273E                        00            .byte	0
11210 273F                        00            .byte	0
11211 2740                        10            .byte	$10
11212 2741                        38            .byte	$38
11213 2742                        38            .byte	$38
11214 2743                        7C            .byte	$7C
11215 2744                        7C            .byte	$7C
11216 2745                        FE            .byte	$FE
11217 2746                        FE            .byte	$FE
11218 2747                        00            .byte	0
11219 2748                        00            .byte	0
11220 2749                        00            .byte	0
11221 274A                        00            .byte	0
11222 274B                        00            .byte	0
11223                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 274C                        00            .byte	0
11225 274D                        00            .byte	0
11226 274E                        00            .byte	0
11227 274F                        00            .byte	0
11228 2750                        FE            .byte	$FE
11229 2751                        FE            .byte	$FE
11230 2752                        7C            .byte	$7C
11231 2753                        7C            .byte	$7C
11232 2754                        38            .byte	$38
11233 2755                        38            .byte	$38
11234 2756                        10            .byte	$10
11235 2757                        00            .byte	0
11236 2758                        00            .byte	0
11237 2759                        00            .byte	0
11238 275A                        00            .byte	0
11239 275B                        00            .byte	0
11240                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 275C                        00            .byte	0
11242 275D                        00            .byte	0
11243 275E                        00            .byte	0
11244 275F                        00            .byte	0
11245 2760                        00            .byte	0
11246 2761                        00            .byte	0
11247 2762                        00            .byte	0
11248 2763                        00            .byte	0
11249 2764                        00            .byte	0
11250 2765                        00            .byte	0
11251 2766                        00            .byte	0
11252 2767                        00            .byte	0
11253 2768                        00            .byte	0
11254 2769                        00            .byte	0
11255 276A                        00            .byte	0
11256 276B                        00            .byte	0
11257                                           ! 1442  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18,
11258 276C                        00            .byte	0
11259 276D                        00            .byte	0
11260 276E                        18            .byte	$18
11261 276F                        3C            .byte	$3C
11262 2770                        3C            .byte	$3C
11263 2771                        3C            .byte	$3C
11264 2772                        18            .byte	$18
11265 2773                        18            .byte	$18
11266 2774                        18            .byte	$18
11267 2775                        00            .byte	0
11268 2776                        18            .byte	$18
11269                                           ! 1442  0x00, 0x00, 0x00, 0x00,
11270 2777                        18            .byte	$18
11271 2778                        00            .byte	0
11272 2779                        00            .byte	0
11273 277A                        00            .byte	0
11274 277B                        00            .byte	0
11275                                           ! 1443  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 277C                        00            .byte	0
11277 277D                        66            .byte	$66
11278 277E                        66            .byte	$66
11279 277F                        66            .byte	$66
11280 2780                        24            .byte	$24
11281 2781                        00            .byte	0
11282 2782                        00            .byte	0
11283 2783                        00            .byte	0
11284 2784                        00            .byte	0
11285 2785                        00            .byte	0
11286 2786                        00            .byte	0
11287 2787                        00            .byte	0
11288 2788                        00            .byte	0
11289 2789                        00            .byte	0
11290 278A                        00            .byte	0
11291 278B                        00            .byte	0
11292                                           ! 1444  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 278C                        00            .byte	0
11294 278D                        00            .byte	0
11295 278E                        00            .byte	0
11296 278F                        6C            .byte	$6C
11297 2790                        6C            .byte	$6C
11298 2791                        FE            .byte	$FE
11299 2792                        6C            .byte	$6C
11300 2793                        6C            .byte	$6C
11301 2794                        6C            .byte	$6C
11302 2795                        FE            .byte	$FE
11303 2796                        6C            .byte	$6C
11304 2797                        6C            .byte	$6C
11305 2798                        00            .byte	0
11306 2799                        00            .byte	0
11307 279A                        00            .byte	0
11308 279B                        00            .byte	0
11309                                           ! 1445  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 279C                        18            .byte	$18
11311 279D                        18            .byte	$18
11312 279E                        7C            .byte	$7C
11313 279F                        C6            .byte	$C6
11314 27A0                        C2            .byte	$C2
11315 27A1                        C0            .byte	$C0
11316 27A2                        7C            .byte	$7C
11317 27A3                        06            .byte	6
11318 27A4                        06            .byte	6
11319 27A5                        86            .byte	$86
11320 27A6                        C6            .byte	$C6
11321 27A7                        7C            .byte	$7C
11322 27A8                        18            .byte	$18
11323 27A9                        18            .byte	$18
11324 27AA                        00            .byte	0
11325 27AB                        00            .byte	0
11326                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27AC                        00            .byte	0
11328 27AD                        00            .byte	0
11329 27AE                        00            .byte	0
11330 27AF                        00            .byte	0
11331 27B0                        C2            .byte	$C2
11332 27B1                        C6            .byte	$C6
11333 27B2                        0C            .byte	$C
11334 27B3                        18            .byte	$18
11335 27B4                        30            .byte	$30
11336 27B5                        60            .byte	$60
11337 27B6                        C6            .byte	$C6
11338 27B7                        86            .byte	$86
11339 27B8                        00            .byte	0
11340 27B9                        00            .byte	0
11341 27BA                        00            .byte	0
11342 27BB                        00            .byte	0
11343                                           ! 1447  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27BC                        00            .byte	0
11345 27BD                        00            .byte	0
11346 27BE                        38            .byte	$38
11347 27BF                        6C            .byte	$6C
11348 27C0                        6C            .byte	$6C
11349 27C1                        38            .byte	$38
11350 27C2                        76            .byte	$76
11351 27C3                        DC            .byte	$DC
11352 27C4                        CC            .byte	$CC
11353 27C5                        CC            .byte	$CC
11354 27C6                        CC            .byte	$CC
11355 27C7                        76            .byte	$76
11356 27C8                        00            .byte	0
11357 27C9                        00            .byte	0
11358 27CA                        00            .byte	0
11359 27CB                        00            .byte	0
11360                                           ! 1448  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27CC                        00            .byte	0
11362 27CD                        30            .byte	$30
11363 27CE                        30            .byte	$30
11364 27CF                        30            .byte	$30
11365 27D0                        60            .byte	$60
11366 27D1                        00            .byte	0
11367 27D2                        00            .byte	0
11368 27D3                        00            .byte	0
11369 27D4                        00            .byte	0
11370 27D5                        00            .byte	0
11371 27D6                        00            .byte	0
11372 27D7                        00            .byte	0
11373 27D8                        00            .byte	0
11374 27D9                        00            .byte	0
11375 27DA                        00            .byte	0
11376 27DB                        00            .byte	0
11377                                           ! 1449  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27DC                        00            .byte	0
11379 27DD                        00            .byte	0
11380 27DE                        0C            .byte	$C
11381 27DF                        18            .byte	$18
11382 27E0                        30            .byte	$30
11383 27E1                        30            .byte	$30
11384 27E2                        30            .byte	$30
11385 27E3                        30            .byte	$30
11386 27E4                        30            .byte	$30
11387 27E5                        30            .byte	$30
11388 27E6                        18            .byte	$18
11389 27E7                        0C            .byte	$C
11390 27E8                        00            .byte	0
11391 27E9                        00            .byte	0
11392 27EA                        00            .byte	0
11393 27EB                        00            .byte	0
11394                                           ! 1450  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27EC                        00            .byte	0
11396 27ED                        00            .byte	0
11397 27EE                        30            .byte	$30
11398 27EF                        18            .byte	$18
11399 27F0                        0C            .byte	$C
11400 27F1                        0C            .byte	$C
11401 27F2                        0C            .byte	$C
11402 27F3                        0C            .byte	$C
11403 27F4                        0C            .byte	$C
11404 27F5                        0C            .byte	$C
11405 27F6                        18            .byte	$18
11406 27F7                        30            .byte	$30
11407 27F8                        00            .byte	0
11408 27F9                        00            .byte	0
11409 27FA                        00            .byte	0
11410 27FB                        00            .byte	0
11411                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 27FC                        00            .byte	0
11413 27FD                        00            .byte	0
11414 27FE                        00            .byte	0
11415 27FF                        00            .byte	0
11416 2800                        00            .byte	0
11417 2801                        66            .byte	$66
11418 2802                        3C            .byte	$3C
11419 2803                        FF            .byte	$FF
11420 2804                        3C            .byte	$3C
11421 2805                        66            .byte	$66
11422 2806                        00            .byte	0
11423 2807                        00            .byte	0
11424 2808                        00            .byte	0
11425 2809                        00            .byte	0
11426 280A                        00            .byte	0
11427 280B                        00            .byte	0
11428                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 280C                        00            .byte	0
11430 280D                        00            .byte	0
11431 280E                        00            .byte	0
11432 280F                        00            .byte	0
11433 2810                        00            .byte	0
11434 2811                        18            .byte	$18
11435 2812                        18            .byte	$18
11436 2813                        7E            .byte	$7E
11437 2814                        18            .byte	$18
11438 2815                        18            .byte	$18
11439 2816                        00            .byte	0
11440 2817                        00            .byte	0
11441 2818                        00            .byte	0
11442 2819                        00            .byte	0
11443 281A                        00            .byte	0
11444 281B                        00            .byte	0
11445                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 281C                        00            .byte	0
11447 281D                        00            .byte	0
11448 281E                        00            .byte	0
11449 281F                        00            .byte	0
11450 2820                        00            .byte	0
11451 2821                        00            .byte	0
11452 2822                        00            .byte	0
11453 2823                        00            .byte	0
11454 2824                        00            .byte	0
11455 2825                        18            .byte	$18
11456 2826                        18            .byte	$18
11457 2827                        18            .byte	$18
11458 2828                        30            .byte	$30
11459 2829                        00            .byte	0
11460 282A                        00            .byte	0
11461 282B                        00            .byte	0
11462                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 282C                        00            .byte	0
11464 282D                        00            .byte	0
11465 282E                        00            .byte	0
11466 282F                        00            .byte	0
11467 2830                        00            .byte	0
11468 2831                        00            .byte	0
11469 2832                        00            .byte	0
11470 2833                        FE            .byte	$FE
11471 2834                        00            .byte	0
11472 2835                        00            .byte	0
11473 2836                        00            .byte	0
11474 2837                        00            .byte	0
11475 2838                        00            .byte	0
11476 2839                        00            .byte	0
11477 283A                        00            .byte	0
11478 283B                        00            .byte	0
11479                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 283C                        00            .byte	0
11481 283D                        00            .byte	0
11482 283E                        00            .byte	0
11483 283F                        00            .byte	0
11484 2840                        00            .byte	0
11485 2841                        00            .byte	0
11486 2842                        00            .byte	0
11487 2843                        00            .byte	0
11488 2844                        00            .byte	0
11489 2845                        00            .byte	0
11490 2846                        18            .byte	$18
11491 2847                        18            .byte	$18
11492 2848                        00            .byte	0
11493 2849                        00            .byte	0
11494 284A                        00            .byte	0
11495 284B                        00            .byte	0
11496                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 284C                        00            .byte	0
11498 284D                        00            .byte	0
11499 284E                        00            .byte	0
11500 284F                        00            .byte	0
11501 2850                        02            .byte	2
11502 2851                        06            .byte	6
11503 2852                        0C            .byte	$C
11504 2853                        18            .byte	$18
11505 2854                        30            .byte	$30
11506 2855                        60            .byte	$60
11507 2856                        C0            .byte	$C0
11508 2857                        80            .byte	$80
11509 2858                        00            .byte	0
11510 2859                        00            .byte	0
11511 285A                        00            .byte	0
11512 285B                        00            .byte	0
11513                                           ! 1457  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 285C                        00            .byte	0
11515 285D                        00            .byte	0
11516 285E                        3C            .byte	$3C
11517 285F                        66            .byte	$66
11518 2860                        C3            .byte	$C3
11519 2861                        C3            .byte	$C3
11520 2862                        DB            .byte	$DB
11521 2863                        DB            .byte	$DB
11522 2864                        C3            .byte	$C3
11523 2865                        C3            .byte	$C3
11524 2866                        66            .byte	$66
11525 2867                        3C            .byte	$3C
11526 2868                        00            .byte	0
11527 2869                        00            .byte	0
11528 286A                        00            .byte	0
11529 286B                        00            .byte	0
11530                                           ! 1458  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 286C                        00            .byte	0
11532 286D                        00            .byte	0
11533 286E                        18            .byte	$18
11534 286F                        38            .byte	$38
11535 2870                        78            .byte	$78
11536 2871                        18            .byte	$18
11537 2872                        18            .byte	$18
11538 2873                        18            .byte	$18
11539 2874                        18            .byte	$18
11540 2875                        18            .byte	$18
11541 2876                        18            .byte	$18
11542 2877                        7E            .byte	$7E
11543 2878                        00            .byte	0
11544 2879                        00            .byte	0
11545 287A                        00            .byte	0
11546 287B                        00            .byte	0
11547                                           ! 1459  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 287C                        00            .byte	0
11549 287D                        00            .byte	0
11550 287E                        7C            .byte	$7C
11551 287F                        C6            .byte	$C6
11552 2880                        06            .byte	6
11553 2881                        0C            .byte	$C
11554 2882                        18            .byte	$18
11555 2883                        30            .byte	$30
11556 2884                        60            .byte	$60
11557 2885                        C0            .byte	$C0
11558 2886                        C6            .byte	$C6
11559 2887                        FE            .byte	$FE
11560 2888                        00            .byte	0
11561 2889                        00            .byte	0
11562 288A                        00            .byte	0
11563 288B                        00            .byte	0
11564                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 288C                        00            .byte	0
11566 288D                        00            .byte	0
11567 288E                        7C            .byte	$7C
11568 288F                        C6            .byte	$C6
11569 2890                        06            .byte	6
11570 2891                        06            .byte	6
11571 2892                        3C            .byte	$3C
11572 2893                        06            .byte	6
11573 2894                        06            .byte	6
11574 2895                        06            .byte	6
11575 2896                        C6            .byte	$C6
11576 2897                        7C            .byte	$7C
11577 2898                        00            .byte	0
11578 2899                        00            .byte	0
11579 289A                        00            .byte	0
11580 289B                        00            .byte	0
11581                                           ! 1461  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 289C                        00            .byte	0
11583 289D                        00            .byte	0
11584 289E                        0C            .byte	$C
11585 289F                        1C            .byte	$1C
11586 28A0                        3C            .byte	$3C
11587 28A1                        6C            .byte	$6C
11588 28A2                        CC            .byte	$CC
11589 28A3                        FE            .byte	$FE
11590 28A4                        0C            .byte	$C
11591 28A5                        0C            .byte	$C
11592 28A6                        0C            .byte	$C
11593 28A7                        1E            .byte	$1E
11594 28A8                        00            .byte	0
11595 28A9                        00            .byte	0
11596 28AA                        00            .byte	0
11597 28AB                        00            .byte	0
11598                                           ! 1462  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11599 28AC                        00            .byte	0
11600 28AD                        00            .byte	0
11601 28AE                        FE            .byte	$FE
11602 28AF                        C0            .byte	$C0
11603 28B0                        C0            .byte	$C0
11604 28B1                        C0            .byte	$C0
11605 28B2                        FC            .byte	$FC
11606 28B3                        06            .byte	6
11607 28B4                        06            .byte	6
11608 28B5                        06            .byte	6
11609 28B6                        C6            .byte	$C6
11610 28B7                        7C            .byte	$7C
11611 28B8                        00            .byte	0
11612 28B9                        00            .byte	0
11613 28BA                        00            .byte	0
11614 28BB                        00            .byte	0
11615                                           ! 1463  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00
11616 28BC                        00            .byte	0
11617 28BD                        00            .byte	0
11618 28BE                        38            .byte	$38
11619 28BF                        60            .byte	$60
11620 28C0                        C0            .byte	$C0
11621 28C1                        C0            .byte	$C0
11622 28C2                        FC            .byte	$FC
11623 28C3                        C6            .byte	$C6
11624 28C4                        C6            .byte	$C6
11625 28C5                        C6            .byte	$C6
11626 28C6                        C6            .byte	$C6
11627 28C7                        7C            .byte	$7C
11628 28C8                        00            .byte	0
11629                                           ! 1463 , 0x00, 0x00,
11630 28C9                        00            .byte	0
11631 28CA                        00            .byte	0
11632 28CB                        00            .byte	0
11633                                           ! 1464  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28CC                        00            .byte	0
11635 28CD                        00            .byte	0
11636 28CE                        FE            .byte	$FE
11637 28CF                        C6            .byte	$C6
11638 28D0                        06            .byte	6
11639 28D1                        06            .byte	6
11640 28D2                        0C            .byte	$C
11641 28D3                        18            .byte	$18
11642 28D4                        30            .byte	$30
11643 28D5                        30            .byte	$30
11644 28D6                        30            .byte	$30
11645 28D7                        30            .byte	$30
11646 28D8                        00            .byte	0
11647 28D9                        00            .byte	0
11648 28DA                        00            .byte	0
11649 28DB                        00            .byte	0
11650                                           ! 1465  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28DC                        00            .byte	0
11652 28DD                        00            .byte	0
11653 28DE                        7C            .byte	$7C
11654 28DF                        C6            .byte	$C6
11655 28E0                        C6            .byte	$C6
11656 28E1                        C6            .byte	$C6
11657 28E2                        7C            .byte	$7C
11658 28E3                        C6            .byte	$C6
11659 28E4                        C6            .byte	$C6
11660 28E5                        C6            .byte	$C6
11661 28E6                        C6            .byte	$C6
11662 28E7                        7C            .byte	$7C
11663 28E8                        00            .byte	0
11664 28E9                        00            .byte	0
11665 28EA                        00            .byte	0
11666 28EB                        00            .byte	0
11667                                           ! 1466  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28EC                        00            .byte	0
11669 28ED                        00            .byte	0
11670 28EE                        7C            .byte	$7C
11671 28EF                        C6            .byte	$C6
11672 28F0                        C6            .byte	$C6
11673 28F1                        C6            .byte	$C6
11674 28F2                        7E            .byte	$7E
11675 28F3                        06            .byte	6
11676 28F4                        06            .byte	6
11677 28F5                        06            .byte	6
11678 28F6                        0C            .byte	$C
11679 28F7                        78            .byte	$78
11680 28F8                        00            .byte	0
11681 28F9                        00            .byte	0
11682 28FA                        00            .byte	0
11683 28FB                        00            .byte	0
11684                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 28FC                        00            .byte	0
11686 28FD                        00            .byte	0
11687 28FE                        00            .byte	0
11688 28FF                        00            .byte	0
11689 2900                        18            .byte	$18
11690 2901                        18            .byte	$18
11691 2902                        00            .byte	0
11692 2903                        00            .byte	0
11693 2904                        00            .byte	0
11694 2905                        18            .byte	$18
11695 2906                        18            .byte	$18
11696 2907                        00            .byte	0
11697 2908                        00            .byte	0
11698 2909                        00            .byte	0
11699 290A                        00            .byte	0
11700 290B                        00            .byte	0
11701                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 290C                        00            .byte	0
11703 290D                        00            .byte	0
11704 290E                        00            .byte	0
11705 290F                        00            .byte	0
11706 2910                        18            .byte	$18
11707 2911                        18            .byte	$18
11708 2912                        00            .byte	0
11709 2913                        00            .byte	0
11710 2914                        00            .byte	0
11711 2915                        18            .byte	$18
11712 2916                        18            .byte	$18
11713 2917                        30            .byte	$30
11714 2918                        00            .byte	0
11715 2919                        00            .byte	0
11716 291A                        00            .byte	0
11717 291B                        00            .byte	0
11718                                           ! 1469  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 291C                        00            .byte	0
11720 291D                        00            .byte	0
11721 291E                        00            .byte	0
11722 291F                        06            .byte	6
11723 2920                        0C            .byte	$C
11724 2921                        18            .byte	$18
11725 2922                        30            .byte	$30
11726 2923                        60            .byte	$60
11727 2924                        30            .byte	$30
11728 2925                        18            .byte	$18
11729 2926                        0C            .byte	$C
11730 2927                        06            .byte	6
11731 2928                        00            .byte	0
11732 2929                        00            .byte	0
11733 292A                        00            .byte	0
11734 292B                        00            .byte	0
11735                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 292C                        00            .byte	0
11737 292D                        00            .byte	0
11738 292E                        00            .byte	0
11739 292F                        00            .byte	0
11740 2930                        00            .byte	0
11741 2931                        7E            .byte	$7E
11742 2932                        00            .byte	0
11743 2933                        00            .byte	0
11744 2934                        7E            .byte	$7E
11745 2935                        00            .byte	0
11746 2936                        00            .byte	0
11747 2937                        00            .byte	0
11748 2938                        00            .byte	0
11749 2939                        00            .byte	0
11750 293A                        00            .byte	0
11751 293B                        00            .byte	0
11752                                           ! 1471  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 293C                        00            .byte	0
11754 293D                        00            .byte	0
11755 293E                        00            .byte	0
11756 293F                        60            .byte	$60
11757 2940                        30            .byte	$30
11758 2941                        18            .byte	$18
11759 2942                        0C            .byte	$C
11760 2943                        06            .byte	6
11761 2944                        0C            .byte	$C
11762 2945                        18            .byte	$18
11763 2946                        30            .byte	$30
11764 2947                        60            .byte	$60
11765 2948                        00            .byte	0
11766 2949                        00            .byte	0
11767 294A                        00            .byte	0
11768 294B                        00            .byte	0
11769                                           ! 1472  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 294C                        00            .byte	0
11771 294D                        00            .byte	0
11772 294E                        7C            .byte	$7C
11773 294F                        C6            .byte	$C6
11774 2950                        C6            .byte	$C6
11775 2951                        0C            .byte	$C
11776 2952                        18            .byte	$18
11777 2953                        18            .byte	$18
11778 2954                        18            .byte	$18
11779 2955                        00            .byte	0
11780 2956                        18            .byte	$18
11781 2957                        18            .byte	$18
11782 2958                        00            .byte	0
11783 2959                        00            .byte	0
11784 295A                        00            .byte	0
11785 295B                        00            .byte	0
11786                                           ! 1473  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 295C                        00            .byte	0
11788 295D                        00            .byte	0
11789 295E                        00            .byte	0
11790 295F                        7C            .byte	$7C
11791 2960                        C6            .byte	$C6
11792 2961                        C6            .byte	$C6
11793 2962                        DE            .byte	$DE
11794 2963                        DE            .byte	$DE
11795 2964                        DE            .byte	$DE
11796 2965                        DC            .byte	$DC
11797 2966                        C0            .byte	$C0
11798 2967                        7C            .byte	$7C
11799 2968                        00            .byte	0
11800 2969                        00            .byte	0
11801 296A                        00            .byte	0
11802 296B                        00            .byte	0
11803                                           ! 1474  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 296C                        00            .byte	0
11805 296D                        00            .byte	0
11806 296E                        10            .byte	$10
11807 296F                        38            .byte	$38
11808 2970                        6C            .byte	$6C
11809 2971                        C6            .byte	$C6
11810 2972                        C6            .byte	$C6
11811 2973                        FE            .byte	$FE
11812 2974                        C6            .byte	$C6
11813 2975                        C6            .byte	$C6
11814 2976                        C6            .byte	$C6
11815 2977                        C6            .byte	$C6
11816 2978                        00            .byte	0
11817 2979                        00            .byte	0
11818 297A                        00            .byte	0
11819 297B                        00            .byte	0
11820                                           ! 1475  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 297C                        00            .byte	0
11822 297D                        00            .byte	0
11823 297E                        FC            .byte	$FC
11824 297F                        66            .byte	$66
11825 2980                        66            .byte	$66
11826 2981                        66            .byte	$66
11827 2982                        7C            .byte	$7C
11828 2983                        66            .byte	$66
11829 2984                        66            .byte	$66
11830 2985                        66            .byte	$66
11831 2986                        66            .byte	$66
11832 2987                        FC            .byte	$FC
11833 2988                        00            .byte	0
11834 2989                        00            .byte	0
11835 298A                        00            .byte	0
11836 298B                        00            .byte	0
11837                                           ! 1476  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 298C                        00            .byte	0
11839 298D                        00            .byte	0
11840 298E                        3C            .byte	$3C
11841 298F                        66            .byte	$66
11842 2990                        C2            .byte	$C2
11843 2991                        C0            .byte	$C0
11844 2992                        C0            .byte	$C0
11845 2993                        C0            .byte	$C0
11846 2994                        C0            .byte	$C0
11847 2995                        C2            .byte	$C2
11848 2996                        66            .byte	$66
11849 2997                        3C            .byte	$3C
11850 2998                        00            .byte	0
11851 2999                        00            .byte	0
11852 299A                        00            .byte	0
11853 299B                        00            .byte	0
11854                                           ! 1477  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 299C                        00            .byte	0
11856 299D                        00            .byte	0
11857 299E                        F8            .byte	$F8
11858 299F                        6C            .byte	$6C
11859 29A0                        66            .byte	$66
11860 29A1                        66            .byte	$66
11861 29A2                        66            .byte	$66
11862 29A3                        66            .byte	$66
11863 29A4                        66            .byte	$66
11864 29A5                        66            .byte	$66
11865 29A6                        6C            .byte	$6C
11866 29A7                        F8            .byte	$F8
11867 29A8                        00            .byte	0
11868 29A9                        00            .byte	0
11869 29AA                        00            .byte	0
11870 29AB                        00            .byte	0
11871                                           ! 1478  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29AC                        00            .byte	0
11873 29AD                        00            .byte	0
11874 29AE                        FE            .byte	$FE
11875 29AF                        66            .byte	$66
11876 29B0                        62            .byte	$62
11877 29B1                        68            .byte	$68
11878 29B2                        78            .byte	$78
11879 29B3                        68            .byte	$68
11880 29B4                        60            .byte	$60
11881 29B5                        62            .byte	$62
11882 29B6                        66            .byte	$66
11883 29B7                        FE            .byte	$FE
11884 29B8                        00            .byte	0
11885 29B9                        00            .byte	0
11886 29BA                        00            .byte	0
11887 29BB                        00            .byte	0
11888                                           ! 1479  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29BC                        00            .byte	0
11890 29BD                        00            .byte	0
11891 29BE                        FE            .byte	$FE
11892 29BF                        66            .byte	$66
11893 29C0                        62            .byte	$62
11894 29C1                        68            .byte	$68
11895 29C2                        78            .byte	$78
11896 29C3                        68            .byte	$68
11897 29C4                        60            .byte	$60
11898 29C5                        60            .byte	$60
11899 29C6                        60            .byte	$60
11900 29C7                        F0            .byte	$F0
11901 29C8                        00            .byte	0
11902 29C9                        00            .byte	0
11903 29CA                        00            .byte	0
11904 29CB                        00            .byte	0
11905                                           ! 1480  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29CC                        00            .byte	0
11907 29CD                        00            .byte	0
11908 29CE                        3C            .byte	$3C
11909 29CF                        66            .byte	$66
11910 29D0                        C2            .byte	$C2
11911 29D1                        C0            .byte	$C0
11912 29D2                        C0            .byte	$C0
11913 29D3                        DE            .byte	$DE
11914 29D4                        C6            .byte	$C6
11915 29D5                        C6            .byte	$C6
11916 29D6                        66            .byte	$66
11917 29D7                        3A            .byte	$3A
11918 29D8                        00            .byte	0
11919 29D9                        00            .byte	0
11920 29DA                        00            .byte	0
11921 29DB                        00            .byte	0
11922                                           ! 1481  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29DC                        00            .byte	0
11924 29DD                        00            .byte	0
11925 29DE                        C6            .byte	$C6
11926 29DF                        C6            .byte	$C6
11927 29E0                        C6            .byte	$C6
11928 29E1                        C6            .byte	$C6
11929 29E2                        FE            .byte	$FE
11930 29E3                        C6            .byte	$C6
11931 29E4                        C6            .byte	$C6
11932 29E5                        C6            .byte	$C6
11933 29E6                        C6            .byte	$C6
11934 29E7                        C6            .byte	$C6
11935 29E8                        00            .byte	0
11936 29E9                        00            .byte	0
11937 29EA                        00            .byte	0
11938 29EB                        00            .byte	0
11939                                           ! 1482  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29EC                        00            .byte	0
11941 29ED                        00            .byte	0
11942 29EE                        3C            .byte	$3C
11943 29EF                        18            .byte	$18
11944 29F0                        18            .byte	$18
11945 29F1                        18            .byte	$18
11946 29F2                        18            .byte	$18
11947 29F3                        18            .byte	$18
11948 29F4                        18            .byte	$18
11949 29F5                        18            .byte	$18
11950 29F6                        18            .byte	$18
11951 29F7                        3C            .byte	$3C
11952 29F8                        00            .byte	0
11953 29F9                        00            .byte	0
11954 29FA                        00            .byte	0
11955 29FB                        00            .byte	0
11956                                           ! 1483  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11957 29FC                        00            .byte	0
11958 29FD                        00            .byte	0
11959 29FE                        1E            .byte	$1E
11960 29FF                        0C            .byte	$C
11961 2A00                        0C            .byte	$C
11962 2A01                        0C            .byte	$C
11963 2A02                        0C            .byte	$C
11964 2A03                        0C            .byte	$C
11965 2A04                        CC            .byte	$CC
11966 2A05                        CC            .byte	$CC
11967 2A06                        CC            .byte	$CC
11968 2A07                        78            .byte	$78
11969 2A08                        00            .byte	0
11970 2A09                        00            .byte	0
11971 2A0A                        00            .byte	0
11972 2A0B                        00            .byte	0
11973                                           ! 1484  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x0
11974 2A0C                        00            .byte	0
11975 2A0D                        00            .byte	0
11976 2A0E                        E6            .byte	$E6
11977 2A0F                        66            .byte	$66
11978 2A10                        66            .byte	$66
11979 2A11                        6C            .byte	$6C
11980 2A12                        78            .byte	$78
11981 2A13                        78            .byte	$78
11982 2A14                        6C            .byte	$6C
11983 2A15                        66            .byte	$66
11984 2A16                        66            .byte	$66
11985 2A17                        E6            .byte	$E6
11986 2A18                        00            .byte	0
11987 2A19                        00            .byte	0
11988 2A1A                        00            .byte	0
11989                                           ! 1484 0,
11990 2A1B                        00            .byte	0
11991                                           ! 1485  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A1C                        00            .byte	0
11993 2A1D                        00            .byte	0
11994 2A1E                        F0            .byte	$F0
11995 2A1F                        60            .byte	$60
11996 2A20                        60            .byte	$60
11997 2A21                        60            .byte	$60
11998 2A22                        60            .byte	$60
11999 2A23                        60            .byte	$60
12000 2A24                        60            .byte	$60
12001 2A25                        62            .byte	$62
12002 2A26                        66            .byte	$66
12003 2A27                        FE            .byte	$FE
12004 2A28                        00            .byte	0
12005 2A29                        00            .byte	0
12006 2A2A                        00            .byte	0
12007 2A2B                        00            .byte	0
12008                                           ! 1486  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A2C                        00            .byte	0
12010 2A2D                        00            .byte	0
12011 2A2E                        C3            .byte	$C3
12012 2A2F                        E7            .byte	$E7
12013 2A30                        FF            .byte	$FF
12014 2A31                        FF            .byte	$FF
12015 2A32                        DB            .byte	$DB
12016 2A33                        C3            .byte	$C3
12017 2A34                        C3            .byte	$C3
12018 2A35                        C3            .byte	$C3
12019 2A36                        C3            .byte	$C3
12020 2A37                        C3            .byte	$C3
12021 2A38                        00            .byte	0
12022 2A39                        00            .byte	0
12023 2A3A                        00            .byte	0
12024 2A3B                        00            .byte	0
12025                                           ! 1487  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A3C                        00            .byte	0
12027 2A3D                        00            .byte	0
12028 2A3E                        C6            .byte	$C6
12029 2A3F                        E6            .byte	$E6
12030 2A40                        F6            .byte	$F6
12031 2A41                        FE            .byte	$FE
12032 2A42                        DE            .byte	$DE
12033 2A43                        CE            .byte	$CE
12034 2A44                        C6            .byte	$C6
12035 2A45                        C6            .byte	$C6
12036 2A46                        C6            .byte	$C6
12037 2A47                        C6            .byte	$C6
12038 2A48                        00            .byte	0
12039 2A49                        00            .byte	0
12040 2A4A                        00            .byte	0
12041 2A4B                        00            .byte	0
12042                                           ! 1488  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A4C                        00            .byte	0
12044 2A4D                        00            .byte	0
12045 2A4E                        7C            .byte	$7C
12046 2A4F                        C6            .byte	$C6
12047 2A50                        C6            .byte	$C6
12048 2A51                        C6            .byte	$C6
12049 2A52                        C6            .byte	$C6
12050 2A53                        C6            .byte	$C6
12051 2A54                        C6            .byte	$C6
12052 2A55                        C6            .byte	$C6
12053 2A56                        C6            .byte	$C6
12054 2A57                        7C            .byte	$7C
12055 2A58                        00            .byte	0
12056 2A59                        00            .byte	0
12057 2A5A                        00            .byte	0
12058 2A5B                        00            .byte	0
12059                                           ! 1489  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A5C                        00            .byte	0
12061 2A5D                        00            .byte	0
12062 2A5E                        FC            .byte	$FC
12063 2A5F                        66            .byte	$66
12064 2A60                        66            .byte	$66
12065 2A61                        66            .byte	$66
12066 2A62                        7C            .byte	$7C
12067 2A63                        60            .byte	$60
12068 2A64                        60            .byte	$60
12069 2A65                        60            .byte	$60
12070 2A66                        60            .byte	$60
12071 2A67                        F0            .byte	$F0
12072 2A68                        00            .byte	0
12073 2A69                        00            .byte	0
12074 2A6A                        00            .byte	0
12075 2A6B                        00            .byte	0
12076                                           ! 1490  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A6C                        00            .byte	0
12078 2A6D                        00            .byte	0
12079 2A6E                        7C            .byte	$7C
12080 2A6F                        C6            .byte	$C6
12081 2A70                        C6            .byte	$C6
12082 2A71                        C6            .byte	$C6
12083 2A72                        C6            .byte	$C6
12084 2A73                        C6            .byte	$C6
12085 2A74                        C6            .byte	$C6
12086 2A75                        D6            .byte	$D6
12087 2A76                        DE            .byte	$DE
12088 2A77                        7C            .byte	$7C
12089 2A78                        0C            .byte	$C
12090 2A79                        0E            .byte	$E
12091 2A7A                        00            .byte	0
12092 2A7B                        00            .byte	0
12093                                           ! 1491  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A7C                        00            .byte	0
12095 2A7D                        00            .byte	0
12096 2A7E                        FC            .byte	$FC
12097 2A7F                        66            .byte	$66
12098 2A80                        66            .byte	$66
12099 2A81                        66            .byte	$66
12100 2A82                        7C            .byte	$7C
12101 2A83                        6C            .byte	$6C
12102 2A84                        66            .byte	$66
12103 2A85                        66            .byte	$66
12104 2A86                        66            .byte	$66
12105 2A87                        E6            .byte	$E6
12106 2A88                        00            .byte	0
12107 2A89                        00            .byte	0
12108 2A8A                        00            .byte	0
12109 2A8B                        00            .byte	0
12110                                           ! 1492  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A8C                        00            .byte	0
12112 2A8D                        00            .byte	0
12113 2A8E                        7C            .byte	$7C
12114 2A8F                        C6            .byte	$C6
12115 2A90                        C6            .byte	$C6
12116 2A91                        60            .byte	$60
12117 2A92                        38            .byte	$38
12118 2A93                        0C            .byte	$C
12119 2A94                        06            .byte	6
12120 2A95                        C6            .byte	$C6
12121 2A96                        C6            .byte	$C6
12122 2A97                        7C            .byte	$7C
12123 2A98                        00            .byte	0
12124 2A99                        00            .byte	0
12125 2A9A                        00            .byte	0
12126 2A9B                        00            .byte	0
12127                                           ! 1493  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2A9C                        00            .byte	0
12129 2A9D                        00            .byte	0
12130 2A9E                        FF            .byte	$FF
12131 2A9F                        DB            .byte	$DB
12132 2AA0                        99            .byte	$99
12133 2AA1                        18            .byte	$18
12134 2AA2                        18            .byte	$18
12135 2AA3                        18            .byte	$18
12136 2AA4                        18            .byte	$18
12137 2AA5                        18            .byte	$18
12138 2AA6                        18            .byte	$18
12139 2AA7                        3C            .byte	$3C
12140 2AA8                        00            .byte	0
12141 2AA9                        00            .byte	0
12142 2AAA                        00            .byte	0
12143 2AAB                        00            .byte	0
12144                                           ! 1494  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AAC                        00            .byte	0
12146 2AAD                        00            .byte	0
12147 2AAE                        C6            .byte	$C6
12148 2AAF                        C6            .byte	$C6
12149 2AB0                        C6            .byte	$C6
12150 2AB1                        C6            .byte	$C6
12151 2AB2                        C6            .byte	$C6
12152 2AB3                        C6            .byte	$C6
12153 2AB4                        C6            .byte	$C6
12154 2AB5                        C6            .byte	$C6
12155 2AB6                        C6            .byte	$C6
12156 2AB7                        7C            .byte	$7C
12157 2AB8                        00            .byte	0
12158 2AB9                        00            .byte	0
12159 2ABA                        00            .byte	0
12160 2ABB                        00            .byte	0
12161                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2ABC                        00            .byte	0
12163 2ABD                        00            .byte	0
12164 2ABE                        C3            .byte	$C3
12165 2ABF                        C3            .byte	$C3
12166 2AC0                        C3            .byte	$C3
12167 2AC1                        C3            .byte	$C3
12168 2AC2                        C3            .byte	$C3
12169 2AC3                        C3            .byte	$C3
12170 2AC4                        C3            .byte	$C3
12171 2AC5                        66            .byte	$66
12172 2AC6                        3C            .byte	$3C
12173 2AC7                        18            .byte	$18
12174 2AC8                        00            .byte	0
12175 2AC9                        00            .byte	0
12176 2ACA                        00            .byte	0
12177 2ACB                        00            .byte	0
12178                                           ! 1496  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2ACC                        00            .byte	0
12180 2ACD                        00            .byte	0
12181 2ACE                        C3            .byte	$C3
12182 2ACF                        C3            .byte	$C3
12183 2AD0                        C3            .byte	$C3
12184 2AD1                        C3            .byte	$C3
12185 2AD2                        C3            .byte	$C3
12186 2AD3                        DB            .byte	$DB
12187 2AD4                        DB            .byte	$DB
12188 2AD5                        FF            .byte	$FF
12189 2AD6                        66            .byte	$66
12190 2AD7                        66            .byte	$66
12191 2AD8                        00            .byte	0
12192 2AD9                        00            .byte	0
12193 2ADA                        00            .byte	0
12194 2ADB                        00            .byte	0
12195                                           ! 1497  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2ADC                        00            .byte	0
12197 2ADD                        00            .byte	0
12198 2ADE                        C3            .byte	$C3
12199 2ADF                        C3            .byte	$C3
12200 2AE0                        66            .byte	$66
12201 2AE1                        3C            .byte	$3C
12202 2AE2                        18            .byte	$18
12203 2AE3                        18            .byte	$18
12204 2AE4                        3C            .byte	$3C
12205 2AE5                        66            .byte	$66
12206 2AE6                        C3            .byte	$C3
12207 2AE7                        C3            .byte	$C3
12208 2AE8                        00            .byte	0
12209 2AE9                        00            .byte	0
12210 2AEA                        00            .byte	0
12211 2AEB                        00            .byte	0
12212                                           ! 1498  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AEC                        00            .byte	0
12214 2AED                        00            .byte	0
12215 2AEE                        C3            .byte	$C3
12216 2AEF                        C3            .byte	$C3
12217 2AF0                        C3            .byte	$C3
12218 2AF1                        66            .byte	$66
12219 2AF2                        3C            .byte	$3C
12220 2AF3                        18            .byte	$18
12221 2AF4                        18            .byte	$18
12222 2AF5                        18            .byte	$18
12223 2AF6                        18            .byte	$18
12224 2AF7                        3C            .byte	$3C
12225 2AF8                        00            .byte	0
12226 2AF9                        00            .byte	0
12227 2AFA                        00            .byte	0
12228 2AFB                        00            .byte	0
12229                                           ! 1499  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2AFC                        00            .byte	0
12231 2AFD                        00            .byte	0
12232 2AFE                        FF            .byte	$FF
12233 2AFF                        C3            .byte	$C3
12234 2B00                        86            .byte	$86
12235 2B01                        0C            .byte	$C
12236 2B02                        18            .byte	$18
12237 2B03                        30            .byte	$30
12238 2B04                        60            .byte	$60
12239 2B05                        C1            .byte	$C1
12240 2B06                        C3            .byte	$C3
12241 2B07                        FF            .byte	$FF
12242 2B08                        00            .byte	0
12243 2B09                        00            .byte	0
12244 2B0A                        00            .byte	0
12245 2B0B                        00            .byte	0
12246                                           ! 1500  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B0C                        00            .byte	0
12248 2B0D                        00            .byte	0
12249 2B0E                        3C            .byte	$3C
12250 2B0F                        30            .byte	$30
12251 2B10                        30            .byte	$30
12252 2B11                        30            .byte	$30
12253 2B12                        30            .byte	$30
12254 2B13                        30            .byte	$30
12255 2B14                        30            .byte	$30
12256 2B15                        30            .byte	$30
12257 2B16                        30            .byte	$30
12258 2B17                        3C            .byte	$3C
12259 2B18                        00            .byte	0
12260 2B19                        00            .byte	0
12261 2B1A                        00            .byte	0
12262 2B1B                        00            .byte	0
12263                                           ! 1501  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B1C                        00            .byte	0
12265 2B1D                        00            .byte	0
12266 2B1E                        00            .byte	0
12267 2B1F                        80            .byte	$80
12268 2B20                        C0            .byte	$C0
12269 2B21                        E0            .byte	$E0
12270 2B22                        70            .byte	$70
12271 2B23                        38            .byte	$38
12272 2B24                        1C            .byte	$1C
12273 2B25                        0E            .byte	$E
12274 2B26                        06            .byte	6
12275 2B27                        02            .byte	2
12276 2B28                        00            .byte	0
12277 2B29                        00            .byte	0
12278 2B2A                        00            .byte	0
12279 2B2B                        00            .byte	0
12280                                           ! 1502  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B2C                        00            .byte	0
12282 2B2D                        00            .byte	0
12283 2B2E                        3C            .byte	$3C
12284 2B2F                        0C            .byte	$C
12285 2B30                        0C            .byte	$C
12286 2B31                        0C            .byte	$C
12287 2B32                        0C            .byte	$C
12288 2B33                        0C            .byte	$C
12289 2B34                        0C            .byte	$C
12290 2B35                        0C            .byte	$C
12291 2B36                        0C            .byte	$C
12292 2B37                        3C            .byte	$3C
12293 2B38                        00            .byte	0
12294 2B39                        00            .byte	0
12295 2B3A                        00            .byte	0
12296 2B3B                        00            .byte	0
12297                                           ! 1503  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B3C                        10            .byte	$10
12299 2B3D                        38            .byte	$38
12300 2B3E                        6C            .byte	$6C
12301 2B3F                        C6            .byte	$C6
12302 2B40                        00            .byte	0
12303 2B41                        00            .byte	0
12304 2B42                        00            .byte	0
12305 2B43                        00            .byte	0
12306 2B44                        00            .byte	0
12307 2B45                        00            .byte	0
12308 2B46                        00            .byte	0
12309 2B47                        00            .byte	0
12310 2B48                        00            .byte	0
12311 2B49                        00            .byte	0
12312 2B4A                        00            .byte	0
12313 2B4B                        00            .byte	0
12314                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B4C                        00            .byte	0
12316 2B4D                        00            .byte	0
12317 2B4E                        00            .byte	0
12318 2B4F                        00            .byte	0
12319 2B50                        00            .byte	0
12320 2B51                        00            .byte	0
12321 2B52                        00            .byte	0
12322 2B53                        00            .byte	0
12323 2B54                        00            .byte	0
12324 2B55                        00            .byte	0
12325 2B56                        00            .byte	0
12326 2B57                        00            .byte	0
12327 2B58                        00            .byte	0
12328 2B59                        FF            .byte	$FF
12329 2B5A                        00            .byte	0
12330 2B5B                        00            .byte	0
12331                                           ! 1505  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12332 2B5C                        30            .byte	$30
12333 2B5D                        30            .byte	$30
12334 2B5E                        18            .byte	$18
12335 2B5F                        00            .byte	0
12336 2B60                        00            .byte	0
12337 2B61                        00            .byte	0
12338 2B62                        00            .byte	0
12339 2B63                        00            .byte	0
12340 2B64                        00            .byte	0
12341 2B65                        00            .byte	0
12342 2B66                        00            .byte	0
12343 2B67                        00            .byte	0
12344 2B68                        00            .byte	0
12345 2B69                        00            .byte	0
12346 2B6A                        00            .byte	0
12347 2B6B                        00            .byte	0
12348                                           ! 1506  0x00, 0
12349 2B6C                        00            .byte	0
12350                                           ! 1506 x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12351 2B6D                        00            .byte	0
12352 2B6E                        00            .byte	0
12353 2B6F                        00            .byte	0
12354 2B70                        00            .byte	0
12355 2B71                        78            .byte	$78
12356 2B72                        0C            .byte	$C
12357 2B73                        7C            .byte	$7C
12358 2B74                        CC            .byte	$CC
12359 2B75                        CC            .byte	$CC
12360 2B76                        CC            .byte	$CC
12361 2B77                        76            .byte	$76
12362 2B78                        00            .byte	0
12363 2B79                        00            .byte	0
12364 2B7A                        00            .byte	0
12365 2B7B                        00            .byte	0
12366                                           ! 1507  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B7C                        00            .byte	0
12368 2B7D                        00            .byte	0
12369 2B7E                        E0            .byte	$E0
12370 2B7F                        60            .byte	$60
12371 2B80                        60            .byte	$60
12372 2B81                        78            .byte	$78
12373 2B82                        6C            .byte	$6C
12374 2B83                        66            .byte	$66
12375 2B84                        66            .byte	$66
12376 2B85                        66            .byte	$66
12377 2B86                        66            .byte	$66
12378 2B87                        7C            .byte	$7C
12379 2B88                        00            .byte	0
12380 2B89                        00            .byte	0
12381 2B8A                        00            .byte	0
12382 2B8B                        00            .byte	0
12383                                           ! 1508  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B8C                        00            .byte	0
12385 2B8D                        00            .byte	0
12386 2B8E                        00            .byte	0
12387 2B8F                        00            .byte	0
12388 2B90                        00            .byte	0
12389 2B91                        7C            .byte	$7C
12390 2B92                        C6            .byte	$C6
12391 2B93                        C0            .byte	$C0
12392 2B94                        C0            .byte	$C0
12393 2B95                        C0            .byte	$C0
12394 2B96                        C6            .byte	$C6
12395 2B97                        7C            .byte	$7C
12396 2B98                        00            .byte	0
12397 2B99                        00            .byte	0
12398 2B9A                        00            .byte	0
12399 2B9B                        00            .byte	0
12400                                           ! 1509  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2B9C                        00            .byte	0
12402 2B9D                        00            .byte	0
12403 2B9E                        1C            .byte	$1C
12404 2B9F                        0C            .byte	$C
12405 2BA0                        0C            .byte	$C
12406 2BA1                        3C            .byte	$3C
12407 2BA2                        6C            .byte	$6C
12408 2BA3                        CC            .byte	$CC
12409 2BA4                        CC            .byte	$CC
12410 2BA5                        CC            .byte	$CC
12411 2BA6                        CC            .byte	$CC
12412 2BA7                        76            .byte	$76
12413 2BA8                        00            .byte	0
12414 2BA9                        00            .byte	0
12415 2BAA                        00            .byte	0
12416 2BAB                        00            .byte	0
12417                                           ! 1510  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BAC                        00            .byte	0
12419 2BAD                        00            .byte	0
12420 2BAE                        00            .byte	0
12421 2BAF                        00            .byte	0
12422 2BB0                        00            .byte	0
12423 2BB1                        7C            .byte	$7C
12424 2BB2                        C6            .byte	$C6
12425 2BB3                        FE            .byte	$FE
12426 2BB4                        C0            .byte	$C0
12427 2BB5                        C0            .byte	$C0
12428 2BB6                        C6            .byte	$C6
12429 2BB7                        7C            .byte	$7C
12430 2BB8                        00            .byte	0
12431 2BB9                        00            .byte	0
12432 2BBA                        00            .byte	0
12433 2BBB                        00            .byte	0
12434                                           ! 1511  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BBC                        00            .byte	0
12436 2BBD                        00            .byte	0
12437 2BBE                        38            .byte	$38
12438 2BBF                        6C            .byte	$6C
12439 2BC0                        64            .byte	$64
12440 2BC1                        60            .byte	$60
12441 2BC2                        F0            .byte	$F0
12442 2BC3                        60            .byte	$60
12443 2BC4                        60            .byte	$60
12444 2BC5                        60            .byte	$60
12445 2BC6                        60            .byte	$60
12446 2BC7                        F0            .byte	$F0
12447 2BC8                        00            .byte	0
12448 2BC9                        00            .byte	0
12449 2BCA                        00            .byte	0
12450 2BCB                        00            .byte	0
12451                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BCC                        00            .byte	0
12453 2BCD                        00            .byte	0
12454 2BCE                        00            .byte	0
12455 2BCF                        00            .byte	0
12456 2BD0                        00            .byte	0
12457 2BD1                        76            .byte	$76
12458 2BD2                        CC            .byte	$CC
12459 2BD3                        CC            .byte	$CC
12460 2BD4                        CC            .byte	$CC
12461 2BD5                        CC            .byte	$CC
12462 2BD6                        CC            .byte	$CC
12463 2BD7                        7C            .byte	$7C
12464 2BD8                        0C            .byte	$C
12465 2BD9                        CC            .byte	$CC
12466 2BDA                        78            .byte	$78
12467 2BDB                        00            .byte	0
12468                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BDC                        00            .byte	0
12470 2BDD                        00            .byte	0
12471 2BDE                        E0            .byte	$E0
12472 2BDF                        60            .byte	$60
12473 2BE0                        60            .byte	$60
12474 2BE1                        6C            .byte	$6C
12475 2BE2                        76            .byte	$76
12476 2BE3                        66            .byte	$66
12477 2BE4                        66            .byte	$66
12478 2BE5                        66            .byte	$66
12479 2BE6                        66            .byte	$66
12480 2BE7                        E6            .byte	$E6
12481 2BE8                        00            .byte	0
12482 2BE9                        00            .byte	0
12483 2BEA                        00            .byte	0
12484 2BEB                        00            .byte	0
12485                                           ! 1514  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BEC                        00            .byte	0
12487 2BED                        00            .byte	0
12488 2BEE                        18            .byte	$18
12489 2BEF                        18            .byte	$18
12490 2BF0                        00            .byte	0
12491 2BF1                        38            .byte	$38
12492 2BF2                        18            .byte	$18
12493 2BF3                        18            .byte	$18
12494 2BF4                        18            .byte	$18
12495 2BF5                        18            .byte	$18
12496 2BF6                        18            .byte	$18
12497 2BF7                        3C            .byte	$3C
12498 2BF8                        00            .byte	0
12499 2BF9                        00            .byte	0
12500 2BFA                        00            .byte	0
12501 2BFB                        00            .byte	0
12502                                           ! 1515  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2BFC                        00            .byte	0
12504 2BFD                        00            .byte	0
12505 2BFE                        06            .byte	6
12506 2BFF                        06            .byte	6
12507 2C00                        00            .byte	0
12508 2C01                        0E            .byte	$E
12509 2C02                        06            .byte	6
12510 2C03                        06            .byte	6
12511 2C04                        06            .byte	6
12512 2C05                        06            .byte	6
12513 2C06                        06            .byte	6
12514 2C07                        06            .byte	6
12515 2C08                        66            .byte	$66
12516 2C09                        66            .byte	$66
12517 2C0A                        3C            .byte	$3C
12518 2C0B                        00            .byte	0
12519                                           ! 1516  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C0C                        00            .byte	0
12521 2C0D                        00            .byte	0
12522 2C0E                        E0            .byte	$E0
12523 2C0F                        60            .byte	$60
12524 2C10                        60            .byte	$60
12525 2C11                        66            .byte	$66
12526 2C12                        6C            .byte	$6C
12527 2C13                        78            .byte	$78
12528 2C14                        78            .byte	$78
12529 2C15                        6C            .byte	$6C
12530 2C16                        66            .byte	$66
12531 2C17                        E6            .byte	$E6
12532 2C18                        00            .byte	0
12533 2C19                        00            .byte	0
12534 2C1A                        00            .byte	0
12535 2C1B                        00            .byte	0
12536                                           ! 1517  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C1C                        00            .byte	0
12538 2C1D                        00            .byte	0
12539 2C1E                        38            .byte	$38
12540 2C1F                        18            .byte	$18
12541 2C20                        18            .byte	$18
12542 2C21                        18            .byte	$18
12543 2C22                        18            .byte	$18
12544 2C23                        18            .byte	$18
12545 2C24                        18            .byte	$18
12546 2C25                        18            .byte	$18
12547 2C26                        18            .byte	$18
12548 2C27                        3C            .byte	$3C
12549 2C28                        00            .byte	0
12550 2C29                        00            .byte	0
12551 2C2A                        00            .byte	0
12552 2C2B                        00            .byte	0
12553                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C2C                        00            .byte	0
12555 2C2D                        00            .byte	0
12556 2C2E                        00            .byte	0
12557 2C2F                        00            .byte	0
12558 2C30                        00            .byte	0
12559 2C31                        E6            .byte	$E6
12560 2C32                        FF            .byte	$FF
12561 2C33                        DB            .byte	$DB
12562 2C34                        DB            .byte	$DB
12563 2C35                        DB            .byte	$DB
12564 2C36                        DB            .byte	$DB
12565 2C37                        DB            .byte	$DB
12566 2C38                        00            .byte	0
12567 2C39                        00            .byte	0
12568 2C3A                        00            .byte	0
12569 2C3B                        00            .byte	0
12570                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C3C                        00            .byte	0
12572 2C3D                        00            .byte	0
12573 2C3E                        00            .byte	0
12574 2C3F                        00            .byte	0
12575 2C40                        00            .byte	0
12576 2C41                        DC            .byte	$DC
12577 2C42                        66            .byte	$66
12578 2C43                        66            .byte	$66
12579 2C44                        66            .byte	$66
12580 2C45                        66            .byte	$66
12581 2C46                        66            .byte	$66
12582 2C47                        66            .byte	$66
12583 2C48                        00            .byte	0
12584 2C49                        00            .byte	0
12585 2C4A                        00            .byte	0
12586 2C4B                        00            .byte	0
12587                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C4C                        00            .byte	0
12589 2C4D                        00            .byte	0
12590 2C4E                        00            .byte	0
12591 2C4F                        00            .byte	0
12592 2C50                        00            .byte	0
12593 2C51                        7C            .byte	$7C
12594 2C52                        C6            .byte	$C6
12595 2C53                        C6            .byte	$C6
12596 2C54                        C6            .byte	$C6
12597 2C55                        C6            .byte	$C6
12598 2C56                        C6            .byte	$C6
12599 2C57                        7C            .byte	$7C
12600 2C58                        00            .byte	0
12601 2C59                        00            .byte	0
12602 2C5A                        00            .byte	0
12603 2C5B                        00            .byte	0
12604                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C5C                        00            .byte	0
12606 2C5D                        00            .byte	0
12607 2C5E                        00            .byte	0
12608 2C5F                        00            .byte	0
12609 2C60                        00            .byte	0
12610 2C61                        DC            .byte	$DC
12611 2C62                        66            .byte	$66
12612 2C63                        66            .byte	$66
12613 2C64                        66            .byte	$66
12614 2C65                        66            .byte	$66
12615 2C66                        66            .byte	$66
12616 2C67                        7C            .byte	$7C
12617 2C68                        60            .byte	$60
12618 2C69                        60            .byte	$60
12619 2C6A                        F0            .byte	$F0
12620 2C6B                        00            .byte	0
12621                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C6C                        00            .byte	0
12623 2C6D                        00            .byte	0
12624 2C6E                        00            .byte	0
12625 2C6F                        00            .byte	0
12626 2C70                        00            .byte	0
12627 2C71                        76            .byte	$76
12628 2C72                        CC            .byte	$CC
12629 2C73                        CC            .byte	$CC
12630 2C74                        CC            .byte	$CC
12631 2C75                        CC            .byte	$CC
12632 2C76                        CC            .byte	$CC
12633 2C77                        7C            .byte	$7C
12634 2C78                        0C            .byte	$C
12635 2C79                        0C            .byte	$C
12636 2C7A                        1E            .byte	$1E
12637 2C7B                        00            .byte	0
12638                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C7C                        00            .byte	0
12640 2C7D                        00            .byte	0
12641 2C7E                        00            .byte	0
12642 2C7F                        00            .byte	0
12643 2C80                        00            .byte	0
12644 2C81                        DC            .byte	$DC
12645 2C82                        76            .byte	$76
12646 2C83                        66            .byte	$66
12647 2C84                        60            .byte	$60
12648 2C85                        60            .byte	$60
12649 2C86                        60            .byte	$60
12650 2C87                        F0            .byte	$F0
12651 2C88                        00            .byte	0
12652 2C89                        00            .byte	0
12653 2C8A                        00            .byte	0
12654 2C8B                        00            .byte	0
12655                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C8C                        00            .byte	0
12657 2C8D                        00            .byte	0
12658 2C8E                        00            .byte	0
12659 2C8F                        00            .byte	0
12660 2C90                        00            .byte	0
12661 2C91                        7C            .byte	$7C
12662 2C92                        C6            .byte	$C6
12663 2C93                        60            .byte	$60
12664 2C94                        38            .byte	$38
12665 2C95                        0C            .byte	$C
12666 2C96                        C6            .byte	$C6
12667 2C97                        7C            .byte	$7C
12668 2C98                        00            .byte	0
12669 2C99                        00            .byte	0
12670 2C9A                        00            .byte	0
12671 2C9B                        00            .byte	0
12672                                           ! 1525  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2C9C                        00            .byte	0
12674 2C9D                        00            .byte	0
12675 2C9E                        10            .byte	$10
12676 2C9F                        30            .byte	$30
12677 2CA0                        30            .byte	$30
12678 2CA1                        FC            .byte	$FC
12679 2CA2                        30            .byte	$30
12680 2CA3                        30            .byte	$30
12681 2CA4                        30            .byte	$30
12682 2CA5                        30            .byte	$30
12683 2CA6                        36            .byte	$36
12684 2CA7                        1C            .byte	$1C
12685 2CA8                        00            .byte	0
12686 2CA9                        00            .byte	0
12687 2CAA                        00            .byte	0
12688 2CAB                        00            .byte	0
12689                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12690 2CAC                        00            .byte	0
12691 2CAD                        00            .byte	0
12692 2CAE                        00            .byte	0
12693 2CAF                        00            .byte	0
12694 2CB0                        00            .byte	0
12695 2CB1                        CC            .byte	$CC
12696 2CB2                        CC            .byte	$CC
12697 2CB3                        CC            .byte	$CC
12698 2CB4                        CC            .byte	$CC
12699 2CB5                        CC            .byte	$CC
12700 2CB6                        CC            .byte	$CC
12701 2CB7                        76            .byte	$76
12702 2CB8                        00            .byte	0
12703 2CB9                        00            .byte	0
12704 2CBA                        00            .byte	0
12705 2CBB                        00            .byte	0
12706                                           ! 1527  0x00, 0x00, 0x00, 
12707 2CBC                        00            .byte	0
12708 2CBD                        00            .byte	0
12709 2CBE                        00            .byte	0
12710                                           ! 1527 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12711 2CBF                        00            .byte	0
12712 2CC0                        00            .byte	0
12713 2CC1                        C3            .byte	$C3
12714 2CC2                        C3            .byte	$C3
12715 2CC3                        C3            .byte	$C3
12716 2CC4                        C3            .byte	$C3
12717 2CC5                        66            .byte	$66
12718 2CC6                        3C            .byte	$3C
12719 2CC7                        18            .byte	$18
12720 2CC8                        00            .byte	0
12721 2CC9                        00            .byte	0
12722 2CCA                        00            .byte	0
12723 2CCB                        00            .byte	0
12724                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CCC                        00            .byte	0
12726 2CCD                        00            .byte	0
12727 2CCE                        00            .byte	0
12728 2CCF                        00            .byte	0
12729 2CD0                        00            .byte	0
12730 2CD1                        C3            .byte	$C3
12731 2CD2                        C3            .byte	$C3
12732 2CD3                        C3            .byte	$C3
12733 2CD4                        DB            .byte	$DB
12734 2CD5                        DB            .byte	$DB
12735 2CD6                        FF            .byte	$FF
12736 2CD7                        66            .byte	$66
12737 2CD8                        00            .byte	0
12738 2CD9                        00            .byte	0
12739 2CDA                        00            .byte	0
12740 2CDB                        00            .byte	0
12741                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CDC                        00            .byte	0
12743 2CDD                        00            .byte	0
12744 2CDE                        00            .byte	0
12745 2CDF                        00            .byte	0
12746 2CE0                        00            .byte	0
12747 2CE1                        C3            .byte	$C3
12748 2CE2                        66            .byte	$66
12749 2CE3                        3C            .byte	$3C
12750 2CE4                        18            .byte	$18
12751 2CE5                        3C            .byte	$3C
12752 2CE6                        66            .byte	$66
12753 2CE7                        C3            .byte	$C3
12754 2CE8                        00            .byte	0
12755 2CE9                        00            .byte	0
12756 2CEA                        00            .byte	0
12757 2CEB                        00            .byte	0
12758                                           ! 1530  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CEC                        00            .byte	0
12760 2CED                        00            .byte	0
12761 2CEE                        00            .byte	0
12762 2CEF                        00            .byte	0
12763 2CF0                        00            .byte	0
12764 2CF1                        C6            .byte	$C6
12765 2CF2                        C6            .byte	$C6
12766 2CF3                        C6            .byte	$C6
12767 2CF4                        C6            .byte	$C6
12768 2CF5                        C6            .byte	$C6
12769 2CF6                        C6            .byte	$C6
12770 2CF7                        7E            .byte	$7E
12771 2CF8                        06            .byte	6
12772 2CF9                        0C            .byte	$C
12773 2CFA                        F8            .byte	$F8
12774 2CFB                        00            .byte	0
12775                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2CFC                        00            .byte	0
12777 2CFD                        00            .byte	0
12778 2CFE                        00            .byte	0
12779 2CFF                        00            .byte	0
12780 2D00                        00            .byte	0
12781 2D01                        FE            .byte	$FE
12782 2D02                        CC            .byte	$CC
12783 2D03                        18            .byte	$18
12784 2D04                        30            .byte	$30
12785 2D05                        60            .byte	$60
12786 2D06                        C6            .byte	$C6
12787 2D07                        FE            .byte	$FE
12788 2D08                        00            .byte	0
12789 2D09                        00            .byte	0
12790 2D0A                        00            .byte	0
12791 2D0B                        00            .byte	0
12792                                           ! 1532  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D0C                        00            .byte	0
12794 2D0D                        00            .byte	0
12795 2D0E                        0E            .byte	$E
12796 2D0F                        18            .byte	$18
12797 2D10                        18            .byte	$18
12798 2D11                        18            .byte	$18
12799 2D12                        70            .byte	$70
12800 2D13                        18            .byte	$18
12801 2D14                        18            .byte	$18
12802 2D15                        18            .byte	$18
12803 2D16                        18            .byte	$18
12804 2D17                        0E            .byte	$E
12805 2D18                        00            .byte	0
12806 2D19                        00            .byte	0
12807 2D1A                        00            .byte	0
12808 2D1B                        00            .byte	0
12809                                           ! 1533  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D1C                        00            .byte	0
12811 2D1D                        00            .byte	0
12812 2D1E                        18            .byte	$18
12813 2D1F                        18            .byte	$18
12814 2D20                        18            .byte	$18
12815 2D21                        18            .byte	$18
12816 2D22                        00            .byte	0
12817 2D23                        18            .byte	$18
12818 2D24                        18            .byte	$18
12819 2D25                        18            .byte	$18
12820 2D26                        18            .byte	$18
12821 2D27                        18            .byte	$18
12822 2D28                        00            .byte	0
12823 2D29                        00            .byte	0
12824 2D2A                        00            .byte	0
12825 2D2B                        00            .byte	0
12826                                           ! 1534  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D2C                        00            .byte	0
12828 2D2D                        00            .byte	0
12829 2D2E                        70            .byte	$70
12830 2D2F                        18            .byte	$18
12831 2D30                        18            .byte	$18
12832 2D31                        18            .byte	$18
12833 2D32                        0E            .byte	$E
12834 2D33                        18            .byte	$18
12835 2D34                        18            .byte	$18
12836 2D35                        18            .byte	$18
12837 2D36                        18            .byte	$18
12838 2D37                        70            .byte	$70
12839 2D38                        00            .byte	0
12840 2D39                        00            .byte	0
12841 2D3A                        00            .byte	0
12842 2D3B                        00            .byte	0
12843                                           ! 1535  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D3C                        00            .byte	0
12845 2D3D                        00            .byte	0
12846 2D3E                        76            .byte	$76
12847 2D3F                        DC            .byte	$DC
12848 2D40                        00            .byte	0
12849 2D41                        00            .byte	0
12850 2D42                        00            .byte	0
12851 2D43                        00            .byte	0
12852 2D44                        00            .byte	0
12853 2D45                        00            .byte	0
12854 2D46                        00            .byte	0
12855 2D47                        00            .byte	0
12856 2D48                        00            .byte	0
12857 2D49                        00            .byte	0
12858 2D4A                        00            .byte	0
12859 2D4B                        00            .byte	0
12860                                           ! 1536  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D4C                        00            .byte	0
12862 2D4D                        00            .byte	0
12863 2D4E                        00            .byte	0
12864 2D4F                        00            .byte	0
12865 2D50                        10            .byte	$10
12866 2D51                        38            .byte	$38
12867 2D52                        6C            .byte	$6C
12868 2D53                        C6            .byte	$C6
12869 2D54                        C6            .byte	$C6
12870 2D55                        C6            .byte	$C6
12871 2D56                        FE            .byte	$FE
12872 2D57                        00            .byte	0
12873 2D58                        00            .byte	0
12874 2D59                        00            .byte	0
12875 2D5A                        00            .byte	0
12876 2D5B                        00            .byte	0
12877                                           ! 1537  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D5C                        00            .byte	0
12879 2D5D                        00            .byte	0
12880 2D5E                        3C            .byte	$3C
12881 2D5F                        66            .byte	$66
12882 2D60                        C2            .byte	$C2
12883 2D61                        C0            .byte	$C0
12884 2D62                        C0            .byte	$C0
12885 2D63                        C0            .byte	$C0
12886 2D64                        C2            .byte	$C2
12887 2D65                        66            .byte	$66
12888 2D66                        3C            .byte	$3C
12889 2D67                        0C            .byte	$C
12890 2D68                        06            .byte	6
12891 2D69                        7C            .byte	$7C
12892 2D6A                        00            .byte	0
12893 2D6B                        00            .byte	0
12894                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D6C                        00            .byte	0
12896 2D6D                        00            .byte	0
12897 2D6E                        CC            .byte	$CC
12898 2D6F                        00            .byte	0
12899 2D70                        00            .byte	0
12900 2D71                        CC            .byte	$CC
12901 2D72                        CC            .byte	$CC
12902 2D73                        CC            .byte	$CC
12903 2D74                        CC            .byte	$CC
12904 2D75                        CC            .byte	$CC
12905 2D76                        CC            .byte	$CC
12906 2D77                        76            .byte	$76
12907 2D78                        00            .byte	0
12908 2D79                        00            .byte	0
12909 2D7A                        00            .byte	0
12910 2D7B                        00            .byte	0
12911                                           ! 1539  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D7C                        00            .byte	0
12913 2D7D                        0C            .byte	$C
12914 2D7E                        18            .byte	$18
12915 2D7F                        30            .byte	$30
12916 2D80                        00            .byte	0
12917 2D81                        7C            .byte	$7C
12918 2D82                        C6            .byte	$C6
12919 2D83                        FE            .byte	$FE
12920 2D84                        C0            .byte	$C0
12921 2D85                        C0            .byte	$C0
12922 2D86                        C6            .byte	$C6
12923 2D87                        7C            .byte	$7C
12924 2D88                        00            .byte	0
12925 2D89                        00            .byte	0
12926 2D8A                        00            .byte	0
12927 2D8B                        00            .byte	0
12928                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D8C                        00            .byte	0
12930 2D8D                        10            .byte	$10
12931 2D8E                        38            .byte	$38
12932 2D8F                        6C            .byte	$6C
12933 2D90                        00            .byte	0
12934 2D91                        78            .byte	$78
12935 2D92                        0C            .byte	$C
12936 2D93                        7C            .byte	$7C
12937 2D94                        CC            .byte	$CC
12938 2D95                        CC            .byte	$CC
12939 2D96                        CC            .byte	$CC
12940 2D97                        76            .byte	$76
12941 2D98                        00            .byte	0
12942 2D99                        00            .byte	0
12943 2D9A                        00            .byte	0
12944 2D9B                        00            .byte	0
12945                                           ! 1541  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2D9C                        00            .byte	0
12947 2D9D                        00            .byte	0
12948 2D9E                        CC            .byte	$CC
12949 2D9F                        00            .byte	0
12950 2DA0                        00            .byte	0
12951 2DA1                        78            .byte	$78
12952 2DA2                        0C            .byte	$C
12953 2DA3                        7C            .byte	$7C
12954 2DA4                        CC            .byte	$CC
12955 2DA5                        CC            .byte	$CC
12956 2DA6                        CC            .byte	$CC
12957 2DA7                        76            .byte	$76
12958 2DA8                        00            .byte	0
12959 2DA9                        00            .byte	0
12960 2DAA                        00            .byte	0
12961 2DAB                        00            .byte	0
12962                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DAC                        00            .byte	0
12964 2DAD                        60            .byte	$60
12965 2DAE                        30            .byte	$30
12966 2DAF                        18            .byte	$18
12967 2DB0                        00            .byte	0
12968 2DB1                        78            .byte	$78
12969 2DB2                        0C            .byte	$C
12970 2DB3                        7C            .byte	$7C
12971 2DB4                        CC            .byte	$CC
12972 2DB5                        CC            .byte	$CC
12973 2DB6                        CC            .byte	$CC
12974 2DB7                        76            .byte	$76
12975 2DB8                        00            .byte	0
12976 2DB9                        00            .byte	0
12977 2DBA                        00            .byte	0
12978 2DBB                        00            .byte	0
12979                                           ! 1543  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DBC                        00            .byte	0
12981 2DBD                        38            .byte	$38
12982 2DBE                        6C            .byte	$6C
12983 2DBF                        38            .byte	$38
12984 2DC0                        00            .byte	0
12985 2DC1                        78            .byte	$78
12986 2DC2                        0C            .byte	$C
12987 2DC3                        7C            .byte	$7C
12988 2DC4                        CC            .byte	$CC
12989 2DC5                        CC            .byte	$CC
12990 2DC6                        CC            .byte	$CC
12991 2DC7                        76            .byte	$76
12992 2DC8                        00            .byte	0
12993 2DC9                        00            .byte	0
12994 2DCA                        00            .byte	0
12995 2DCB                        00            .byte	0
12996                                           ! 1544  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DCC                        00            .byte	0
12998 2DCD                        00            .byte	0
12999 2DCE                        00            .byte	0
13000 2DCF                        00            .byte	0
13001 2DD0                        3C            .byte	$3C
13002 2DD1                        66            .byte	$66
13003 2DD2                        60            .byte	$60
13004 2DD3                        60            .byte	$60
13005 2DD4                        66            .byte	$66
13006 2DD5                        3C            .byte	$3C
13007 2DD6                        0C            .byte	$C
13008 2DD7                        06            .byte	6
13009 2DD8                        3C            .byte	$3C
13010 2DD9                        00            .byte	0
13011 2DDA                        00            .byte	0
13012 2DDB                        00            .byte	0
13013                                           ! 1545  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DDC                        00            .byte	0
13015 2DDD                        10            .byte	$10
13016 2DDE                        38            .byte	$38
13017 2DDF                        6C            .byte	$6C
13018 2DE0                        00            .byte	0
13019 2DE1                        7C            .byte	$7C
13020 2DE2                        C6            .byte	$C6
13021 2DE3                        FE            .byte	$FE
13022 2DE4                        C0            .byte	$C0
13023 2DE5                        C0            .byte	$C0
13024 2DE6                        C6            .byte	$C6
13025 2DE7                        7C            .byte	$7C
13026 2DE8                        00            .byte	0
13027 2DE9                        00            .byte	0
13028 2DEA                        00            .byte	0
13029 2DEB                        00            .byte	0
13030                                           ! 1546  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DEC                        00            .byte	0
13032 2DED                        00            .byte	0
13033 2DEE                        C6            .byte	$C6
13034 2DEF                        00            .byte	0
13035 2DF0                        00            .byte	0
13036 2DF1                        7C            .byte	$7C
13037 2DF2                        C6            .byte	$C6
13038 2DF3                        FE            .byte	$FE
13039 2DF4                        C0            .byte	$C0
13040 2DF5                        C0            .byte	$C0
13041 2DF6                        C6            .byte	$C6
13042 2DF7                        7C            .byte	$7C
13043 2DF8                        00            .byte	0
13044 2DF9                        00            .byte	0
13045 2DFA                        00            .byte	0
13046 2DFB                        00            .byte	0
13047                                           ! 1547  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13048 2DFC                        00            .byte	0
13049 2DFD                        60            .byte	$60
13050 2DFE                        30            .byte	$30
13051 2DFF                        18            .byte	$18
13052 2E00                        00            .byte	0
13053 2E01                        7C            .byte	$7C
13054 2E02                        C6            .byte	$C6
13055 2E03                        FE            .byte	$FE
13056 2E04                        C0            .byte	$C0
13057 2E05                        C0            .byte	$C0
13058 2E06                        C6            .byte	$C6
13059 2E07                        7C            .byte	$7C
13060 2E08                        00            .byte	0
13061 2E09                        00            .byte	0
13062 2E0A                        00            .byte	0
13063 2E0B                        00            .byte	0
13064                                           ! 1548  0x00, 0x00, 0x66, 0x00, 0x00,
13065 2E0C                        00            .byte	0
13066 2E0D                        00            .byte	0
13067 2E0E                        66            .byte	$66
13068 2E0F                        00            .byte	0
13069                                           ! 1548  0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E10                        00            .byte	0
13071 2E11                        38            .byte	$38
13072 2E12                        18            .byte	$18
13073 2E13                        18            .byte	$18
13074 2E14                        18            .byte	$18
13075 2E15                        18            .byte	$18
13076 2E16                        18            .byte	$18
13077 2E17                        3C            .byte	$3C
13078 2E18                        00            .byte	0
13079 2E19                        00            .byte	0
13080 2E1A                        00            .byte	0
13081 2E1B                        00            .byte	0
13082                                           ! 1549  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E1C                        00            .byte	0
13084 2E1D                        18            .byte	$18
13085 2E1E                        3C            .byte	$3C
13086 2E1F                        66            .byte	$66
13087 2E20                        00            .byte	0
13088 2E21                        38            .byte	$38
13089 2E22                        18            .byte	$18
13090 2E23                        18            .byte	$18
13091 2E24                        18            .byte	$18
13092 2E25                        18            .byte	$18
13093 2E26                        18            .byte	$18
13094 2E27                        3C            .byte	$3C
13095 2E28                        00            .byte	0
13096 2E29                        00            .byte	0
13097 2E2A                        00            .byte	0
13098 2E2B                        00            .byte	0
13099                                           ! 1550  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E2C                        00            .byte	0
13101 2E2D                        60            .byte	$60
13102 2E2E                        30            .byte	$30
13103 2E2F                        18            .byte	$18
13104 2E30                        00            .byte	0
13105 2E31                        38            .byte	$38
13106 2E32                        18            .byte	$18
13107 2E33                        18            .byte	$18
13108 2E34                        18            .byte	$18
13109 2E35                        18            .byte	$18
13110 2E36                        18            .byte	$18
13111 2E37                        3C            .byte	$3C
13112 2E38                        00            .byte	0
13113 2E39                        00            .byte	0
13114 2E3A                        00            .byte	0
13115 2E3B                        00            .byte	0
13116                                           ! 1551  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E3C                        00            .byte	0
13118 2E3D                        C6            .byte	$C6
13119 2E3E                        00            .byte	0
13120 2E3F                        10            .byte	$10
13121 2E40                        38            .byte	$38
13122 2E41                        6C            .byte	$6C
13123 2E42                        C6            .byte	$C6
13124 2E43                        C6            .byte	$C6
13125 2E44                        FE            .byte	$FE
13126 2E45                        C6            .byte	$C6
13127 2E46                        C6            .byte	$C6
13128 2E47                        C6            .byte	$C6
13129 2E48                        00            .byte	0
13130 2E49                        00            .byte	0
13131 2E4A                        00            .byte	0
13132 2E4B                        00            .byte	0
13133                                           ! 1552  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E4C                        38            .byte	$38
13135 2E4D                        6C            .byte	$6C
13136 2E4E                        38            .byte	$38
13137 2E4F                        00            .byte	0
13138 2E50                        38            .byte	$38
13139 2E51                        6C            .byte	$6C
13140 2E52                        C6            .byte	$C6
13141 2E53                        C6            .byte	$C6
13142 2E54                        FE            .byte	$FE
13143 2E55                        C6            .byte	$C6
13144 2E56                        C6            .byte	$C6
13145 2E57                        C6            .byte	$C6
13146 2E58                        00            .byte	0
13147 2E59                        00            .byte	0
13148 2E5A                        00            .byte	0
13149 2E5B                        00            .byte	0
13150                                           ! 1553  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E5C                        18            .byte	$18
13152 2E5D                        30            .byte	$30
13153 2E5E                        60            .byte	$60
13154 2E5F                        00            .byte	0
13155 2E60                        FE            .byte	$FE
13156 2E61                        66            .byte	$66
13157 2E62                        60            .byte	$60
13158 2E63                        7C            .byte	$7C
13159 2E64                        60            .byte	$60
13160 2E65                        60            .byte	$60
13161 2E66                        66            .byte	$66
13162 2E67                        FE            .byte	$FE
13163 2E68                        00            .byte	0
13164 2E69                        00            .byte	0
13165 2E6A                        00            .byte	0
13166 2E6B                        00            .byte	0
13167                                           ! 1554  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E6C                        00            .byte	0
13169 2E6D                        00            .byte	0
13170 2E6E                        00            .byte	0
13171 2E6F                        00            .byte	0
13172 2E70                        00            .byte	0
13173 2E71                        6E            .byte	$6E
13174 2E72                        3B            .byte	$3B
13175 2E73                        1B            .byte	$1B
13176 2E74                        7E            .byte	$7E
13177 2E75                        D8            .byte	$D8
13178 2E76                        DC            .byte	$DC
13179 2E77                        77            .byte	$77
13180 2E78                        00            .byte	0
13181 2E79                        00            .byte	0
13182 2E7A                        00            .byte	0
13183 2E7B                        00            .byte	0
13184                                           ! 1555  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E7C                        00            .byte	0
13186 2E7D                        00            .byte	0
13187 2E7E                        3E            .byte	$3E
13188 2E7F                        6C            .byte	$6C
13189 2E80                        CC            .byte	$CC
13190 2E81                        CC            .byte	$CC
13191 2E82                        FE            .byte	$FE
13192 2E83                        CC            .byte	$CC
13193 2E84                        CC            .byte	$CC
13194 2E85                        CC            .byte	$CC
13195 2E86                        CC            .byte	$CC
13196 2E87                        CE            .byte	$CE
13197 2E88                        00            .byte	0
13198 2E89                        00            .byte	0
13199 2E8A                        00            .byte	0
13200 2E8B                        00            .byte	0
13201                                           ! 1556  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E8C                        00            .byte	0
13203 2E8D                        10            .byte	$10
13204 2E8E                        38            .byte	$38
13205 2E8F                        6C            .byte	$6C
13206 2E90                        00            .byte	0
13207 2E91                        7C            .byte	$7C
13208 2E92                        C6            .byte	$C6
13209 2E93                        C6            .byte	$C6
13210 2E94                        C6            .byte	$C6
13211 2E95                        C6            .byte	$C6
13212 2E96                        C6            .byte	$C6
13213 2E97                        7C            .byte	$7C
13214 2E98                        00            .byte	0
13215 2E99                        00            .byte	0
13216 2E9A                        00            .byte	0
13217 2E9B                        00            .byte	0
13218                                           ! 1557  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2E9C                        00            .byte	0
13220 2E9D                        00            .byte	0
13221 2E9E                        C6            .byte	$C6
13222 2E9F                        00            .byte	0
13223 2EA0                        00            .byte	0
13224 2EA1                        7C            .byte	$7C
13225 2EA2                        C6            .byte	$C6
13226 2EA3                        C6            .byte	$C6
13227 2EA4                        C6            .byte	$C6
13228 2EA5                        C6            .byte	$C6
13229 2EA6                        C6            .byte	$C6
13230 2EA7                        7C            .byte	$7C
13231 2EA8                        00            .byte	0
13232 2EA9                        00            .byte	0
13233 2EAA                        00            .byte	0
13234 2EAB                        00            .byte	0
13235                                           ! 1558  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EAC                        00            .byte	0
13237 2EAD                        60            .byte	$60
13238 2EAE                        30            .byte	$30
13239 2EAF                        18            .byte	$18
13240 2EB0                        00            .byte	0
13241 2EB1                        7C            .byte	$7C
13242 2EB2                        C6            .byte	$C6
13243 2EB3                        C6            .byte	$C6
13244 2EB4                        C6            .byte	$C6
13245 2EB5                        C6            .byte	$C6
13246 2EB6                        C6            .byte	$C6
13247 2EB7                        7C            .byte	$7C
13248 2EB8                        00            .byte	0
13249 2EB9                        00            .byte	0
13250 2EBA                        00            .byte	0
13251 2EBB                        00            .byte	0
13252                                           ! 1559  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EBC                        00            .byte	0
13254 2EBD                        30            .byte	$30
13255 2EBE                        78            .byte	$78
13256 2EBF                        CC            .byte	$CC
13257 2EC0                        00            .byte	0
13258 2EC1                        CC            .byte	$CC
13259 2EC2                        CC            .byte	$CC
13260 2EC3                        CC            .byte	$CC
13261 2EC4                        CC            .byte	$CC
13262 2EC5                        CC            .byte	$CC
13263 2EC6                        CC            .byte	$CC
13264 2EC7                        76            .byte	$76
13265 2EC8                        00            .byte	0
13266 2EC9                        00            .byte	0
13267 2ECA                        00            .byte	0
13268 2ECB                        00            .byte	0
13269                                           ! 1560  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ECC                        00            .byte	0
13271 2ECD                        60            .byte	$60
13272 2ECE                        30            .byte	$30
13273 2ECF                        18            .byte	$18
13274 2ED0                        00            .byte	0
13275 2ED1                        CC            .byte	$CC
13276 2ED2                        CC            .byte	$CC
13277 2ED3                        CC            .byte	$CC
13278 2ED4                        CC            .byte	$CC
13279 2ED5                        CC            .byte	$CC
13280 2ED6                        CC            .byte	$CC
13281 2ED7                        76            .byte	$76
13282 2ED8                        00            .byte	0
13283 2ED9                        00            .byte	0
13284 2EDA                        00            .byte	0
13285 2EDB                        00            .byte	0
13286                                           ! 1561  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EDC                        00            .byte	0
13288 2EDD                        00            .byte	0
13289 2EDE                        C6            .byte	$C6
13290 2EDF                        00            .byte	0
13291 2EE0                        00            .byte	0
13292 2EE1                        C6            .byte	$C6
13293 2EE2                        C6            .byte	$C6
13294 2EE3                        C6            .byte	$C6
13295 2EE4                        C6            .byte	$C6
13296 2EE5                        C6            .byte	$C6
13297 2EE6                        C6            .byte	$C6
13298 2EE7                        7E            .byte	$7E
13299 2EE8                        06            .byte	6
13300 2EE9                        0C            .byte	$C
13301 2EEA                        78            .byte	$78
13302 2EEB                        00            .byte	0
13303                                           ! 1562  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EEC                        00            .byte	0
13305 2EED                        C6            .byte	$C6
13306 2EEE                        00            .byte	0
13307 2EEF                        7C            .byte	$7C
13308 2EF0                        C6            .byte	$C6
13309 2EF1                        C6            .byte	$C6
13310 2EF2                        C6            .byte	$C6
13311 2EF3                        C6            .byte	$C6
13312 2EF4                        C6            .byte	$C6
13313 2EF5                        C6            .byte	$C6
13314 2EF6                        C6            .byte	$C6
13315 2EF7                        7C            .byte	$7C
13316 2EF8                        00            .byte	0
13317 2EF9                        00            .byte	0
13318 2EFA                        00            .byte	0
13319 2EFB                        00            .byte	0
13320                                           ! 1563  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2EFC                        00            .byte	0
13322 2EFD                        C6            .byte	$C6
13323 2EFE                        00            .byte	0
13324 2EFF                        C6            .byte	$C6
13325 2F00                        C6            .byte	$C6
13326 2F01                        C6            .byte	$C6
13327 2F02                        C6            .byte	$C6
13328 2F03                        C6            .byte	$C6
13329 2F04                        C6            .byte	$C6
13330 2F05                        C6            .byte	$C6
13331 2F06                        C6            .byte	$C6
13332 2F07                        7C            .byte	$7C
13333 2F08                        00            .byte	0
13334 2F09                        00            .byte	0
13335 2F0A                        00            .byte	0
13336 2F0B                        00            .byte	0
13337                                           ! 1564  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F0C                        00            .byte	0
13339 2F0D                        18            .byte	$18
13340 2F0E                        18            .byte	$18
13341 2F0F                        7E            .byte	$7E
13342 2F10                        C3            .byte	$C3
13343 2F11                        C0            .byte	$C0
13344 2F12                        C0            .byte	$C0
13345 2F13                        C0            .byte	$C0
13346 2F14                        C3            .byte	$C3
13347 2F15                        7E            .byte	$7E
13348 2F16                        18            .byte	$18
13349 2F17                        18            .byte	$18
13350 2F18                        00            .byte	0
13351 2F19                        00            .byte	0
13352 2F1A                        00            .byte	0
13353 2F1B                        00            .byte	0
13354                                           ! 1565  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F1C                        00            .byte	0
13356 2F1D                        38            .byte	$38
13357 2F1E                        6C            .byte	$6C
13358 2F1F                        64            .byte	$64
13359 2F20                        60            .byte	$60
13360 2F21                        F0            .byte	$F0
13361 2F22                        60            .byte	$60
13362 2F23                        60            .byte	$60
13363 2F24                        60            .byte	$60
13364 2F25                        60            .byte	$60
13365 2F26                        E6            .byte	$E6
13366 2F27                        FC            .byte	$FC
13367 2F28                        00            .byte	0
13368 2F29                        00            .byte	0
13369 2F2A                        00            .byte	0
13370 2F2B                        00            .byte	0
13371                                           ! 1566  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F2C                        00            .byte	0
13373 2F2D                        00            .byte	0
13374 2F2E                        C3            .byte	$C3
13375 2F2F                        66            .byte	$66
13376 2F30                        3C            .byte	$3C
13377 2F31                        18            .byte	$18
13378 2F32                        FF            .byte	$FF
13379 2F33                        18            .byte	$18
13380 2F34                        FF            .byte	$FF
13381 2F35                        18            .byte	$18
13382 2F36                        18            .byte	$18
13383 2F37                        18            .byte	$18
13384 2F38                        00            .byte	0
13385 2F39                        00            .byte	0
13386 2F3A                        00            .byte	0
13387 2F3B                        00            .byte	0
13388                                           ! 1567  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F3C                        00            .byte	0
13390 2F3D                        FC            .byte	$FC
13391 2F3E                        66            .byte	$66
13392 2F3F                        66            .byte	$66
13393 2F40                        7C            .byte	$7C
13394 2F41                        62            .byte	$62
13395 2F42                        66            .byte	$66
13396 2F43                        6F            .byte	$6F
13397 2F44                        66            .byte	$66
13398 2F45                        66            .byte	$66
13399 2F46                        66            .byte	$66
13400 2F47                        F3            .byte	$F3
13401 2F48                        00            .byte	0
13402 2F49                        00            .byte	0
13403 2F4A                        00            .byte	0
13404 2F4B                        00            .byte	0
13405                                           ! 1568  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13406 2F4C                        00            .byte	0
13407 2F4D                        0E            .byte	$E
13408 2F4E                        1B            .byte	$1B
13409 2F4F                        18            .byte	$18
13410 2F50                        18            .byte	$18
13411 2F51                        18            .byte	$18
13412 2F52                        7E            .byte	$7E
13413 2F53                        18            .byte	$18
13414 2F54                        18            .byte	$18
13415 2F55                        18            .byte	$18
13416 2F56                        18            .byte	$18
13417 2F57                        18            .byte	$18
13418 2F58                        D8            .byte	$D8
13419 2F59                        70            .byte	$70
13420 2F5A                        00            .byte	0
13421 2F5B                        00            .byte	0
13422                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c
13423 2F5C                        00            .byte	0
13424 2F5D                        18            .byte	$18
13425 2F5E                        30            .byte	$30
13426 2F5F                        60            .byte	$60
13427 2F60                        00            .byte	0
13428 2F61                        78            .byte	$78
13429                                           ! 1569 , 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13430 2F62                        0C            .byte	$C
13431 2F63                        7C            .byte	$7C
13432 2F64                        CC            .byte	$CC
13433 2F65                        CC            .byte	$CC
13434 2F66                        CC            .byte	$CC
13435 2F67                        76            .byte	$76
13436 2F68                        00            .byte	0
13437 2F69                        00            .byte	0
13438 2F6A                        00            .byte	0
13439 2F6B                        00            .byte	0
13440                                           ! 1570  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F6C                        00            .byte	0
13442 2F6D                        0C            .byte	$C
13443 2F6E                        18            .byte	$18
13444 2F6F                        30            .byte	$30
13445 2F70                        00            .byte	0
13446 2F71                        38            .byte	$38
13447 2F72                        18            .byte	$18
13448 2F73                        18            .byte	$18
13449 2F74                        18            .byte	$18
13450 2F75                        18            .byte	$18
13451 2F76                        18            .byte	$18
13452 2F77                        3C            .byte	$3C
13453 2F78                        00            .byte	0
13454 2F79                        00            .byte	0
13455 2F7A                        00            .byte	0
13456 2F7B                        00            .byte	0
13457                                           ! 1571  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F7C                        00            .byte	0
13459 2F7D                        18            .byte	$18
13460 2F7E                        30            .byte	$30
13461 2F7F                        60            .byte	$60
13462 2F80                        00            .byte	0
13463 2F81                        7C            .byte	$7C
13464 2F82                        C6            .byte	$C6
13465 2F83                        C6            .byte	$C6
13466 2F84                        C6            .byte	$C6
13467 2F85                        C6            .byte	$C6
13468 2F86                        C6            .byte	$C6
13469 2F87                        7C            .byte	$7C
13470 2F88                        00            .byte	0
13471 2F89                        00            .byte	0
13472 2F8A                        00            .byte	0
13473 2F8B                        00            .byte	0
13474                                           ! 1572  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F8C                        00            .byte	0
13476 2F8D                        18            .byte	$18
13477 2F8E                        30            .byte	$30
13478 2F8F                        60            .byte	$60
13479 2F90                        00            .byte	0
13480 2F91                        CC            .byte	$CC
13481 2F92                        CC            .byte	$CC
13482 2F93                        CC            .byte	$CC
13483 2F94                        CC            .byte	$CC
13484 2F95                        CC            .byte	$CC
13485 2F96                        CC            .byte	$CC
13486 2F97                        76            .byte	$76
13487 2F98                        00            .byte	0
13488 2F99                        00            .byte	0
13489 2F9A                        00            .byte	0
13490 2F9B                        00            .byte	0
13491                                           ! 1573  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2F9C                        00            .byte	0
13493 2F9D                        00            .byte	0
13494 2F9E                        76            .byte	$76
13495 2F9F                        DC            .byte	$DC
13496 2FA0                        00            .byte	0
13497 2FA1                        DC            .byte	$DC
13498 2FA2                        66            .byte	$66
13499 2FA3                        66            .byte	$66
13500 2FA4                        66            .byte	$66
13501 2FA5                        66            .byte	$66
13502 2FA6                        66            .byte	$66
13503 2FA7                        66            .byte	$66
13504 2FA8                        00            .byte	0
13505 2FA9                        00            .byte	0
13506 2FAA                        00            .byte	0
13507 2FAB                        00            .byte	0
13508                                           ! 1574  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FAC                        76            .byte	$76
13510 2FAD                        DC            .byte	$DC
13511 2FAE                        00            .byte	0
13512 2FAF                        C6            .byte	$C6
13513 2FB0                        E6            .byte	$E6
13514 2FB1                        F6            .byte	$F6
13515 2FB2                        FE            .byte	$FE
13516 2FB3                        DE            .byte	$DE
13517 2FB4                        CE            .byte	$CE
13518 2FB5                        C6            .byte	$C6
13519 2FB6                        C6            .byte	$C6
13520 2FB7                        C6            .byte	$C6
13521 2FB8                        00            .byte	0
13522 2FB9                        00            .byte	0
13523 2FBA                        00            .byte	0
13524 2FBB                        00            .byte	0
13525                                           ! 1575  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FBC                        00            .byte	0
13527 2FBD                        3C            .byte	$3C
13528 2FBE                        6C            .byte	$6C
13529 2FBF                        6C            .byte	$6C
13530 2FC0                        3E            .byte	$3E
13531 2FC1                        00            .byte	0
13532 2FC2                        7E            .byte	$7E
13533 2FC3                        00            .byte	0
13534 2FC4                        00            .byte	0
13535 2FC5                        00            .byte	0
13536 2FC6                        00            .byte	0
13537 2FC7                        00            .byte	0
13538 2FC8                        00            .byte	0
13539 2FC9                        00            .byte	0
13540 2FCA                        00            .byte	0
13541 2FCB                        00            .byte	0
13542                                           ! 1576  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FCC                        00            .byte	0
13544 2FCD                        38            .byte	$38
13545 2FCE                        6C            .byte	$6C
13546 2FCF                        6C            .byte	$6C
13547 2FD0                        38            .byte	$38
13548 2FD1                        00            .byte	0
13549 2FD2                        7C            .byte	$7C
13550 2FD3                        00            .byte	0
13551 2FD4                        00            .byte	0
13552 2FD5                        00            .byte	0
13553 2FD6                        00            .byte	0
13554 2FD7                        00            .byte	0
13555 2FD8                        00            .byte	0
13556 2FD9                        00            .byte	0
13557 2FDA                        00            .byte	0
13558 2FDB                        00            .byte	0
13559                                           ! 1577  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FDC                        00            .byte	0
13561 2FDD                        00            .byte	0
13562 2FDE                        30            .byte	$30
13563 2FDF                        30            .byte	$30
13564 2FE0                        00            .byte	0
13565 2FE1                        30            .byte	$30
13566 2FE2                        30            .byte	$30
13567 2FE3                        60            .byte	$60
13568 2FE4                        C0            .byte	$C0
13569 2FE5                        C6            .byte	$C6
13570 2FE6                        C6            .byte	$C6
13571 2FE7                        7C            .byte	$7C
13572 2FE8                        00            .byte	0
13573 2FE9                        00            .byte	0
13574 2FEA                        00            .byte	0
13575 2FEB                        00            .byte	0
13576                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FEC                        00            .byte	0
13578 2FED                        00            .byte	0
13579 2FEE                        00            .byte	0
13580 2FEF                        00            .byte	0
13581 2FF0                        00            .byte	0
13582 2FF1                        00            .byte	0
13583 2FF2                        FE            .byte	$FE
13584 2FF3                        C0            .byte	$C0
13585 2FF4                        C0            .byte	$C0
13586 2FF5                        C0            .byte	$C0
13587 2FF6                        C0            .byte	$C0
13588 2FF7                        00            .byte	0
13589 2FF8                        00            .byte	0
13590 2FF9                        00            .byte	0
13591 2FFA                        00            .byte	0
13592 2FFB                        00            .byte	0
13593                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 2FFC                        00            .byte	0
13595 2FFD                        00            .byte	0
13596 2FFE                        00            .byte	0
13597 2FFF                        00            .byte	0
13598 3000                        00            .byte	0
13599 3001                        00            .byte	0
13600 3002                        FE            .byte	$FE
13601 3003                        06            .byte	6
13602 3004                        06            .byte	6
13603 3005                        06            .byte	6
13604 3006                        06            .byte	6
13605 3007                        00            .byte	0
13606 3008                        00            .byte	0
13607 3009                        00            .byte	0
13608 300A                        00            .byte	0
13609 300B                        00            .byte	0
13610                                           ! 1580  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 300C                        00            .byte	0
13612 300D                        C0            .byte	$C0
13613 300E                        C0            .byte	$C0
13614 300F                        C2            .byte	$C2
13615 3010                        C6            .byte	$C6
13616 3011                        CC            .byte	$CC
13617 3012                        18            .byte	$18
13618 3013                        30            .byte	$30
13619 3014                        60            .byte	$60
13620 3015                        CE            .byte	$CE
13621 3016                        9B            .byte	$9B
13622 3017                        06            .byte	6
13623 3018                        0C            .byte	$C
13624 3019                        1F            .byte	$1F
13625 301A                        00            .byte	0
13626 301B                        00            .byte	0
13627                                           ! 1581  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 301C                        00            .byte	0
13629 301D                        C0            .byte	$C0
13630 301E                        C0            .byte	$C0
13631 301F                        C2            .byte	$C2
13632 3020                        C6            .byte	$C6
13633 3021                        CC            .byte	$CC
13634 3022                        18            .byte	$18
13635 3023                        30            .byte	$30
13636 3024                        66            .byte	$66
13637 3025                        CE            .byte	$CE
13638 3026                        96            .byte	$96
13639 3027                        3E            .byte	$3E
13640 3028                        06            .byte	6
13641 3029                        06            .byte	6
13642 302A                        00            .byte	0
13643 302B                        00            .byte	0
13644                                           ! 1582  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 302C                        00            .byte	0
13646 302D                        00            .byte	0
13647 302E                        18            .byte	$18
13648 302F                        18            .byte	$18
13649 3030                        00            .byte	0
13650 3031                        18            .byte	$18
13651 3032                        18            .byte	$18
13652 3033                        18            .byte	$18
13653 3034                        3C            .byte	$3C
13654 3035                        3C            .byte	$3C
13655 3036                        3C            .byte	$3C
13656 3037                        18            .byte	$18
13657 3038                        00            .byte	0
13658 3039                        00            .byte	0
13659 303A                        00            .byte	0
13660 303B                        00            .byte	0
13661                                           ! 1583  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 303C                        00            .byte	0
13663 303D                        00            .byte	0
13664 303E                        00            .byte	0
13665 303F                        00            .byte	0
13666 3040                        00            .byte	0
13667 3041                        36            .byte	$36
13668 3042                        6C            .byte	$6C
13669 3043                        D8            .byte	$D8
13670 3044                        6C            .byte	$6C
13671 3045                        36            .byte	$36
13672 3046                        00            .byte	0
13673 3047                        00            .byte	0
13674 3048                        00            .byte	0
13675 3049                        00            .byte	0
13676 304A                        00            .byte	0
13677 304B                        00            .byte	0
13678                                           ! 1584  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 304C                        00            .byte	0
13680 304D                        00            .byte	0
13681 304E                        00            .byte	0
13682 304F                        00            .byte	0
13683 3050                        00            .byte	0
13684 3051                        D8            .byte	$D8
13685 3052                        6C            .byte	$6C
13686 3053                        36            .byte	$36
13687 3054                        6C            .byte	$6C
13688 3055                        D8            .byte	$D8
13689 3056                        00            .byte	0
13690 3057                        00            .byte	0
13691 3058                        00            .byte	0
13692 3059                        00            .byte	0
13693 305A                        00            .byte	0
13694 305B                        00            .byte	0
13695                                           ! 1585  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 305C                        11            .byte	$11
13697 305D                        44            .byte	$44
13698 305E                        11            .byte	$11
13699 305F                        44            .byte	$44
13700 3060                        11            .byte	$11
13701 3061                        44            .byte	$44
13702 3062                        11            .byte	$11
13703 3063                        44            .byte	$44
13704 3064                        11            .byte	$11
13705 3065                        44            .byte	$44
13706 3066                        11            .byte	$11
13707 3067                        44            .byte	$44
13708 3068                        11            .byte	$11
13709 3069                        44            .byte	$44
13710 306A                        11            .byte	$11
13711 306B                        44            .byte	$44
13712                                           ! 1586  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 306C                        55            .byte	$55
13714 306D                        AA            .byte	$AA
13715 306E                        55            .byte	$55
13716 306F                        AA            .byte	$AA
13717 3070                        55            .byte	$55
13718 3071                        AA            .byte	$AA
13719 3072                        55            .byte	$55
13720 3073                        AA            .byte	$AA
13721 3074                        55            .byte	$55
13722 3075                        AA            .byte	$AA
13723 3076                        55            .byte	$55
13724 3077                        AA            .byte	$AA
13725 3078                        55            .byte	$55
13726 3079                        AA            .byte	$AA
13727 307A                        55            .byte	$55
13728 307B                        AA            .byte	$AA
13729                                           ! 1587  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 307C                        DD            .byte	$DD
13731 307D                        77            .byte	$77
13732 307E                        DD            .byte	$DD
13733 307F                        77            .byte	$77
13734 3080                        DD            .byte	$DD
13735 3081                        77            .byte	$77
13736 3082                        DD            .byte	$DD
13737 3083                        77            .byte	$77
13738 3084                        DD            .byte	$DD
13739 3085                        77            .byte	$77
13740 3086                        DD            .byte	$DD
13741 3087                        77            .byte	$77
13742 3088                        DD            .byte	$DD
13743 3089                        77            .byte	$77
13744 308A                        DD            .byte	$DD
13745 308B                        77            .byte	$77
13746                                           ! 1588  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 308C                        18            .byte	$18
13748 308D                        18            .byte	$18
13749 308E                        18            .byte	$18
13750 308F                        18            .byte	$18
13751 3090                        18            .byte	$18
13752 3091                        18            .byte	$18
13753 3092                        18            .byte	$18
13754 3093                        18            .byte	$18
13755 3094                        18            .byte	$18
13756 3095                        18            .byte	$18
13757 3096                        18            .byte	$18
13758 3097                        18            .byte	$18
13759 3098                        18            .byte	$18
13760 3099                        18            .byte	$18
13761 309A                        18            .byte	$18
13762 309B                        18            .byte	$18
13763                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 309C                        18            .byte	$18
13765 309D                        18            .byte	$18
13766 309E                        18            .byte	$18
13767 309F                        18            .byte	$18
13768 30A0                        18            .byte	$18
13769 30A1                        18            .byte	$18
13770 30A2                        18            .byte	$18
13771 30A3                        F8            .byte	$F8
13772 30A4                        18            .byte	$18
13773 30A5                        18            .byte	$18
13774 30A6                        18            .byte	$18
13775 30A7                        18            .byte	$18
13776 30A8                        18            .byte	$18
13777 30A9                        18            .byte	$18
13778 30AA                        18            .byte	$18
13779 30AB                        18            .byte	$18
13780                                           ! 1590  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x1
13781 30AC                        18            .byte	$18
13782 30AD                        18            .byte	$18
13783 30AE                        18            .byte	$18
13784 30AF                        18            .byte	$18
13785 30B0                        18            .byte	$18
13786 30B1                        F8            .byte	$F8
13787 30B2                        18            .byte	$18
13788 30B3                        F8            .byte	$F8
13789                                           ! 1590 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13790 30B4                        18            .byte	$18
13791 30B5                        18            .byte	$18
13792 30B6                        18            .byte	$18
13793 30B7                        18            .byte	$18
13794 30B8                        18            .byte	$18
13795 30B9                        18            .byte	$18
13796 30BA                        18            .byte	$18
13797 30BB                        18            .byte	$18
13798                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30BC                        36            .byte	$36
13800 30BD                        36            .byte	$36
13801 30BE                        36            .byte	$36
13802 30BF                        36            .byte	$36
13803 30C0                        36            .byte	$36
13804 30C1                        36            .byte	$36
13805 30C2                        36            .byte	$36
13806 30C3                        F6            .byte	$F6
13807 30C4                        36            .byte	$36
13808 30C5                        36            .byte	$36
13809 30C6                        36            .byte	$36
13810 30C7                        36            .byte	$36
13811 30C8                        36            .byte	$36
13812 30C9                        36            .byte	$36
13813 30CA                        36            .byte	$36
13814 30CB                        36            .byte	$36
13815                                           ! 1592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30CC                        00            .byte	0
13817 30CD                        00            .byte	0
13818 30CE                        00            .byte	0
13819 30CF                        00            .byte	0
13820 30D0                        00            .byte	0
13821 30D1                        00            .byte	0
13822 30D2                        00            .byte	0
13823 30D3                        FE            .byte	$FE
13824 30D4                        36            .byte	$36
13825 30D5                        36            .byte	$36
13826 30D6                        36            .byte	$36
13827 30D7                        36            .byte	$36
13828 30D8                        36            .byte	$36
13829 30D9                        36            .byte	$36
13830 30DA                        36            .byte	$36
13831 30DB                        36            .byte	$36
13832                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30DC                        00            .byte	0
13834 30DD                        00            .byte	0
13835 30DE                        00            .byte	0
13836 30DF                        00            .byte	0
13837 30E0                        00            .byte	0
13838 30E1                        F8            .byte	$F8
13839 30E2                        18            .byte	$18
13840 30E3                        F8            .byte	$F8
13841 30E4                        18            .byte	$18
13842 30E5                        18            .byte	$18
13843 30E6                        18            .byte	$18
13844 30E7                        18            .byte	$18
13845 30E8                        18            .byte	$18
13846 30E9                        18            .byte	$18
13847 30EA                        18            .byte	$18
13848 30EB                        18            .byte	$18
13849                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30EC                        36            .byte	$36
13851 30ED                        36            .byte	$36
13852 30EE                        36            .byte	$36
13853 30EF                        36            .byte	$36
13854 30F0                        36            .byte	$36
13855 30F1                        F6            .byte	$F6
13856 30F2                        06            .byte	6
13857 30F3                        F6            .byte	$F6
13858 30F4                        36            .byte	$36
13859 30F5                        36            .byte	$36
13860 30F6                        36            .byte	$36
13861 30F7                        36            .byte	$36
13862 30F8                        36            .byte	$36
13863 30F9                        36            .byte	$36
13864 30FA                        36            .byte	$36
13865 30FB                        36            .byte	$36
13866                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 30FC                        36            .byte	$36
13868 30FD                        36            .byte	$36
13869 30FE                        36            .byte	$36
13870 30FF                        36            .byte	$36
13871 3100                        36            .byte	$36
13872 3101                        36            .byte	$36
13873 3102                        36            .byte	$36
13874 3103                        36            .byte	$36
13875 3104                        36            .byte	$36
13876 3105                        36            .byte	$36
13877 3106                        36            .byte	$36
13878 3107                        36            .byte	$36
13879 3108                        36            .byte	$36
13880 3109                        36            .byte	$36
13881 310A                        36            .byte	$36
13882 310B                        36            .byte	$36
13883                                           ! 1596  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 310C                        00            .byte	0
13885 310D                        00            .byte	0
13886 310E                        00            .byte	0
13887 310F                        00            .byte	0
13888 3110                        00            .byte	0
13889 3111                        FE            .byte	$FE
13890 3112                        06            .byte	6
13891 3113                        F6            .byte	$F6
13892 3114                        36            .byte	$36
13893 3115                        36            .byte	$36
13894 3116                        36            .byte	$36
13895 3117                        36            .byte	$36
13896 3118                        36            .byte	$36
13897 3119                        36            .byte	$36
13898 311A                        36            .byte	$36
13899 311B                        36            .byte	$36
13900                                           ! 1597  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 311C                        36            .byte	$36
13902 311D                        36            .byte	$36
13903 311E                        36            .byte	$36
13904 311F                        36            .byte	$36
13905 3120                        36            .byte	$36
13906 3121                        F6            .byte	$F6
13907 3122                        06            .byte	6
13908 3123                        FE            .byte	$FE
13909 3124                        00            .byte	0
13910 3125                        00            .byte	0
13911 3126                        00            .byte	0
13912 3127                        00            .byte	0
13913 3128                        00            .byte	0
13914 3129                        00            .byte	0
13915 312A                        00            .byte	0
13916 312B                        00            .byte	0
13917                                           ! 1598  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 312C                        36            .byte	$36
13919 312D                        36            .byte	$36
13920 312E                        36            .byte	$36
13921 312F                        36            .byte	$36
13922 3130                        36            .byte	$36
13923 3131                        36            .byte	$36
13924 3132                        36            .byte	$36
13925 3133                        FE            .byte	$FE
13926 3134                        00            .byte	0
13927 3135                        00            .byte	0
13928 3136                        00            .byte	0
13929 3137                        00            .byte	0
13930 3138                        00            .byte	0
13931 3139                        00            .byte	0
13932 313A                        00            .byte	0
13933 313B                        00            .byte	0
13934                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 313C                        18            .byte	$18
13936 313D                        18            .byte	$18
13937 313E                        18            .byte	$18
13938 313F                        18            .byte	$18
13939 3140                        18            .byte	$18
13940 3141                        F8            .byte	$F8
13941 3142                        18            .byte	$18
13942 3143                        F8            .byte	$F8
13943 3144                        00            .byte	0
13944 3145                        00            .byte	0
13945 3146                        00            .byte	0
13946 3147                        00            .byte	0
13947 3148                        00            .byte	0
13948 3149                        00            .byte	0
13949 314A                        00            .byte	0
13950 314B                        00            .byte	0
13951                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 314C                        00            .byte	0
13953 314D                        00            .byte	0
13954 314E                        00            .byte	0
13955 314F                        00            .byte	0
13956 3150                        00            .byte	0
13957 3151                        00            .byte	0
13958 3152                        00            .byte	0
13959 3153                        F8            .byte	$F8
13960 3154                        18            .byte	$18
13961 3155                        18            .byte	$18
13962 3156                        18            .byte	$18
13963 3157                        18            .byte	$18
13964 3158                        18            .byte	$18
13965 3159                        18            .byte	$18
13966 315A                        18            .byte	$18
13967 315B                        18            .byte	$18
13968                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 315C                        18            .byte	$18
13970 315D                        18            .byte	$18
13971 315E                        18            .byte	$18
13972 315F                        18            .byte	$18
13973 3160                        18            .byte	$18
13974 3161                        18            .byte	$18
13975 3162                        18            .byte	$18
13976 3163                        1F            .byte	$1F
13977 3164                        00            .byte	0
13978 3165                        00            .byte	0
13979 3166                        00            .byte	0
13980 3167                        00            .byte	0
13981 3168                        00            .byte	0
13982 3169                        00            .byte	0
13983 316A                        00            .byte	0
13984 316B                        00            .byte	0
13985                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 316C                        18            .byte	$18
13987 316D                        18            .byte	$18
13988 316E                        18            .byte	$18
13989 316F                        18            .byte	$18
13990 3170                        18            .byte	$18
13991 3171                        18            .byte	$18
13992 3172                        18            .byte	$18
13993 3173                        FF            .byte	$FF
13994 3174                        00            .byte	0
13995 3175                        00            .byte	0
13996 3176                        00            .byte	0
13997 3177                        00            .byte	0
13998 3178                        00            .byte	0
13999 3179                        00            .byte	0
14000 317A                        00            .byte	0
14001 317B                        00            .byte	0
14002                                           ! 1603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 317C                        00            .byte	0
14004 317D                        00            .byte	0
14005 317E                        00            .byte	0
14006 317F                        00            .byte	0
14007 3180                        00            .byte	0
14008 3181                        00            .byte	0
14009 3182                        00            .byte	0
14010 3183                        FF            .byte	$FF
14011 3184                        18            .byte	$18
14012 3185                        18            .byte	$18
14013 3186                        18            .byte	$18
14014 3187                        18            .byte	$18
14015 3188                        18            .byte	$18
14016 3189                        18            .byte	$18
14017 318A                        18            .byte	$18
14018 318B                        18            .byte	$18
14019                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 318C                        18            .byte	$18
14021 318D                        18            .byte	$18
14022 318E                        18            .byte	$18
14023 318F                        18            .byte	$18
14024 3190                        18            .byte	$18
14025 3191                        18            .byte	$18
14026 3192                        18            .byte	$18
14027 3193                        1F            .byte	$1F
14028 3194                        18            .byte	$18
14029 3195                        18            .byte	$18
14030 3196                        18            .byte	$18
14031 3197                        18            .byte	$18
14032 3198                        18            .byte	$18
14033 3199                        18            .byte	$18
14034 319A                        18            .byte	$18
14035 319B                        18            .byte	$18
14036                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 319C                        00            .byte	0
14038 319D                        00            .byte	0
14039 319E                        00            .byte	0
14040 319F                        00            .byte	0
14041 31A0                        00            .byte	0
14042 31A1                        00            .byte	0
14043 31A2                        00            .byte	0
14044 31A3                        FF            .byte	$FF
14045 31A4                        00            .byte	0
14046 31A5                        00            .byte	0
14047 31A6                        00            .byte	0
14048 31A7                        00            .byte	0
14049 31A8                        00            .byte	0
14050 31A9                        00            .byte	0
14051 31AA                        00            .byte	0
14052 31AB                        00            .byte	0
14053                                           ! 1606  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31AC                        18            .byte	$18
14055 31AD                        18            .byte	$18
14056 31AE                        18            .byte	$18
14057 31AF                        18            .byte	$18
14058 31B0                        18            .byte	$18
14059 31B1                        18            .byte	$18
14060 31B2                        18            .byte	$18
14061 31B3                        FF            .byte	$FF
14062 31B4                        18            .byte	$18
14063 31B5                        18            .byte	$18
14064 31B6                        18            .byte	$18
14065 31B7                        18            .byte	$18
14066 31B8                        18            .byte	$18
14067 31B9                        18            .byte	$18
14068 31BA                        18            .byte	$18
14069 31BB                        18            .byte	$18
14070                                           ! 1607  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31BC                        18            .byte	$18
14072 31BD                        18            .byte	$18
14073 31BE                        18            .byte	$18
14074 31BF                        18            .byte	$18
14075 31C0                        18            .byte	$18
14076 31C1                        1F            .byte	$1F
14077 31C2                        18            .byte	$18
14078 31C3                        1F            .byte	$1F
14079 31C4                        18            .byte	$18
14080 31C5                        18            .byte	$18
14081 31C6                        18            .byte	$18
14082 31C7                        18            .byte	$18
14083 31C8                        18            .byte	$18
14084 31C9                        18            .byte	$18
14085 31CA                        18            .byte	$18
14086 31CB                        18            .byte	$18
14087                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31CC                        36            .byte	$36
14089 31CD                        36            .byte	$36
14090 31CE                        36            .byte	$36
14091 31CF                        36            .byte	$36
14092 31D0                        36            .byte	$36
14093 31D1                        36            .byte	$36
14094 31D2                        36            .byte	$36
14095 31D3                        37            .byte	$37
14096 31D4                        36            .byte	$36
14097 31D5                        36            .byte	$36
14098 31D6                        36            .byte	$36
14099 31D7                        36            .byte	$36
14100 31D8                        36            .byte	$36
14101 31D9                        36            .byte	$36
14102 31DA                        36            .byte	$36
14103 31DB                        36            .byte	$36
14104                                           ! 1609  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31DC                        36            .byte	$36
14106 31DD                        36            .byte	$36
14107 31DE                        36            .byte	$36
14108 31DF                        36            .byte	$36
14109 31E0                        36            .byte	$36
14110 31E1                        37            .byte	$37
14111 31E2                        30            .byte	$30
14112 31E3                        3F            .byte	$3F
14113 31E4                        00            .byte	0
14114 31E5                        00            .byte	0
14115 31E6                        00            .byte	0
14116 31E7                        00            .byte	0
14117 31E8                        00            .byte	0
14118 31E9                        00            .byte	0
14119 31EA                        00            .byte	0
14120 31EB                        00            .byte	0
14121                                           ! 1610  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14122 31EC                        00            .byte	0
14123 31ED                        00            .byte	0
14124 31EE                        00            .byte	0
14125 31EF                        00            .byte	0
14126 31F0                        00            .byte	0
14127 31F1                        3F            .byte	$3F
14128 31F2                        30            .byte	$30
14129 31F3                        37            .byte	$37
14130 31F4                        36            .byte	$36
14131 31F5                        36            .byte	$36
14132 31F6                        36            .byte	$36
14133 31F7                        36            .byte	$36
14134 31F8                        36            .byte	$36
14135 31F9                        36            .byte	$36
14136 31FA                        36            .byte	$36
14137 31FB                        36            .byte	$36
14138                                           ! 1611  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x
14139 31FC                        36            .byte	$36
14140 31FD                        36            .byte	$36
14141 31FE                        36            .byte	$36
14142 31FF                        36            .byte	$36
14143 3200                        36            .byte	$36
14144 3201                        F7            .byte	$F7
14145 3202                        00            .byte	0
14146 3203                        FF            .byte	$FF
14147 3204                        00            .byte	0
14148 3205                        00            .byte	0
14149                                           ! 1611 00, 0x00, 0x00, 0x00, 0x00, 0x00,
14150 3206                        00            .byte	0
14151 3207                        00            .byte	0
14152 3208                        00            .byte	0
14153 3209                        00            .byte	0
14154 320A                        00            .byte	0
14155 320B                        00            .byte	0
14156                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 320C                        00            .byte	0
14158 320D                        00            .byte	0
14159 320E                        00            .byte	0
14160 320F                        00            .byte	0
14161 3210                        00            .byte	0
14162 3211                        FF            .byte	$FF
14163 3212                        00            .byte	0
14164 3213                        F7            .byte	$F7
14165 3214                        36            .byte	$36
14166 3215                        36            .byte	$36
14167 3216                        36            .byte	$36
14168 3217                        36            .byte	$36
14169 3218                        36            .byte	$36
14170 3219                        36            .byte	$36
14171 321A                        36            .byte	$36
14172 321B                        36            .byte	$36
14173                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 321C                        36            .byte	$36
14175 321D                        36            .byte	$36
14176 321E                        36            .byte	$36
14177 321F                        36            .byte	$36
14178 3220                        36            .byte	$36
14179 3221                        37            .byte	$37
14180 3222                        30            .byte	$30
14181 3223                        37            .byte	$37
14182 3224                        36            .byte	$36
14183 3225                        36            .byte	$36
14184 3226                        36            .byte	$36
14185 3227                        36            .byte	$36
14186 3228                        36            .byte	$36
14187 3229                        36            .byte	$36
14188 322A                        36            .byte	$36
14189 322B                        36            .byte	$36
14190                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 322C                        00            .byte	0
14192 322D                        00            .byte	0
14193 322E                        00            .byte	0
14194 322F                        00            .byte	0
14195 3230                        00            .byte	0
14196 3231                        FF            .byte	$FF
14197 3232                        00            .byte	0
14198 3233                        FF            .byte	$FF
14199 3234                        00            .byte	0
14200 3235                        00            .byte	0
14201 3236                        00            .byte	0
14202 3237                        00            .byte	0
14203 3238                        00            .byte	0
14204 3239                        00            .byte	0
14205 323A                        00            .byte	0
14206 323B                        00            .byte	0
14207                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 323C                        36            .byte	$36
14209 323D                        36            .byte	$36
14210 323E                        36            .byte	$36
14211 323F                        36            .byte	$36
14212 3240                        36            .byte	$36
14213 3241                        F7            .byte	$F7
14214 3242                        00            .byte	0
14215 3243                        F7            .byte	$F7
14216 3244                        36            .byte	$36
14217 3245                        36            .byte	$36
14218 3246                        36            .byte	$36
14219 3247                        36            .byte	$36
14220 3248                        36            .byte	$36
14221 3249                        36            .byte	$36
14222 324A                        36            .byte	$36
14223 324B                        36            .byte	$36
14224                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 324C                        18            .byte	$18
14226 324D                        18            .byte	$18
14227 324E                        18            .byte	$18
14228 324F                        18            .byte	$18
14229 3250                        18            .byte	$18
14230 3251                        FF            .byte	$FF
14231 3252                        00            .byte	0
14232 3253                        FF            .byte	$FF
14233 3254                        00            .byte	0
14234 3255                        00            .byte	0
14235 3256                        00            .byte	0
14236 3257                        00            .byte	0
14237 3258                        00            .byte	0
14238 3259                        00            .byte	0
14239 325A                        00            .byte	0
14240 325B                        00            .byte	0
14241                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 325C                        36            .byte	$36
14243 325D                        36            .byte	$36
14244 325E                        36            .byte	$36
14245 325F                        36            .byte	$36
14246 3260                        36            .byte	$36
14247 3261                        36            .byte	$36
14248 3262                        36            .byte	$36
14249 3263                        FF            .byte	$FF
14250 3264                        00            .byte	0
14251 3265                        00            .byte	0
14252 3266                        00            .byte	0
14253 3267                        00            .byte	0
14254 3268                        00            .byte	0
14255 3269                        00            .byte	0
14256 326A                        00            .byte	0
14257 326B                        00            .byte	0
14258                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 326C                        00            .byte	0
14260 326D                        00            .byte	0
14261 326E                        00            .byte	0
14262 326F                        00            .byte	0
14263 3270                        00            .byte	0
14264 3271                        FF            .byte	$FF
14265 3272                        00            .byte	0
14266 3273                        FF            .byte	$FF
14267 3274                        18            .byte	$18
14268 3275                        18            .byte	$18
14269 3276                        18            .byte	$18
14270 3277                        18            .byte	$18
14271 3278                        18            .byte	$18
14272 3279                        18            .byte	$18
14273 327A                        18            .byte	$18
14274 327B                        18            .byte	$18
14275                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 327C                        00            .byte	0
14277 327D                        00            .byte	0
14278 327E                        00            .byte	0
14279 327F                        00            .byte	0
14280 3280                        00            .byte	0
14281 3281                        00            .byte	0
14282 3282                        00            .byte	0
14283 3283                        FF            .byte	$FF
14284 3284                        36            .byte	$36
14285 3285                        36            .byte	$36
14286 3286                        36            .byte	$36
14287 3287                        36            .byte	$36
14288 3288                        36            .byte	$36
14289 3289                        36            .byte	$36
14290 328A                        36            .byte	$36
14291 328B                        36            .byte	$36
14292                                           ! 1620  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 328C                        36            .byte	$36
14294 328D                        36            .byte	$36
14295 328E                        36            .byte	$36
14296 328F                        36            .byte	$36
14297 3290                        36            .byte	$36
14298 3291                        36            .byte	$36
14299 3292                        36            .byte	$36
14300 3293                        3F            .byte	$3F
14301 3294                        00            .byte	0
14302 3295                        00            .byte	0
14303 3296                        00            .byte	0
14304 3297                        00            .byte	0
14305 3298                        00            .byte	0
14306 3299                        00            .byte	0
14307 329A                        00            .byte	0
14308 329B                        00            .byte	0
14309                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 329C                        18            .byte	$18
14311 329D                        18            .byte	$18
14312 329E                        18            .byte	$18
14313 329F                        18            .byte	$18
14314 32A0                        18            .byte	$18
14315 32A1                        1F            .byte	$1F
14316 32A2                        18            .byte	$18
14317 32A3                        1F            .byte	$1F
14318 32A4                        00            .byte	0
14319 32A5                        00            .byte	0
14320 32A6                        00            .byte	0
14321 32A7                        00            .byte	0
14322 32A8                        00            .byte	0
14323 32A9                        00            .byte	0
14324 32AA                        00            .byte	0
14325 32AB                        00            .byte	0
14326                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32AC                        00            .byte	0
14328 32AD                        00            .byte	0
14329 32AE                        00            .byte	0
14330 32AF                        00            .byte	0
14331 32B0                        00            .byte	0
14332 32B1                        1F            .byte	$1F
14333 32B2                        18            .byte	$18
14334 32B3                        1F            .byte	$1F
14335 32B4                        18            .byte	$18
14336 32B5                        18            .byte	$18
14337 32B6                        18            .byte	$18
14338 32B7                        18            .byte	$18
14339 32B8                        18            .byte	$18
14340 32B9                        18            .byte	$18
14341 32BA                        18            .byte	$18
14342 32BB                        18            .byte	$18
14343                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32BC                        00            .byte	0
14345 32BD                        00            .byte	0
14346 32BE                        00            .byte	0
14347 32BF                        00            .byte	0
14348 32C0                        00            .byte	0
14349 32C1                        00            .byte	0
14350 32C2                        00            .byte	0
14351 32C3                        3F            .byte	$3F
14352 32C4                        36            .byte	$36
14353 32C5                        36            .byte	$36
14354 32C6                        36            .byte	$36
14355 32C7                        36            .byte	$36
14356 32C8                        36            .byte	$36
14357 32C9                        36            .byte	$36
14358 32CA                        36            .byte	$36
14359 32CB                        36            .byte	$36
14360                                           ! 1624  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32CC                        36            .byte	$36
14362 32CD                        36            .byte	$36
14363 32CE                        36            .byte	$36
14364 32CF                        36            .byte	$36
14365 32D0                        36            .byte	$36
14366 32D1                        36            .byte	$36
14367 32D2                        36            .byte	$36
14368 32D3                        FF            .byte	$FF
14369 32D4                        36            .byte	$36
14370 32D5                        36            .byte	$36
14371 32D6                        36            .byte	$36
14372 32D7                        36            .byte	$36
14373 32D8                        36            .byte	$36
14374 32D9                        36            .byte	$36
14375 32DA                        36            .byte	$36
14376 32DB                        36            .byte	$36
14377                                           ! 1625  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32DC                        18            .byte	$18
14379 32DD                        18            .byte	$18
14380 32DE                        18            .byte	$18
14381 32DF                        18            .byte	$18
14382 32E0                        18            .byte	$18
14383 32E1                        FF            .byte	$FF
14384 32E2                        18            .byte	$18
14385 32E3                        FF            .byte	$FF
14386 32E4                        18            .byte	$18
14387 32E5                        18            .byte	$18
14388 32E6                        18            .byte	$18
14389 32E7                        18            .byte	$18
14390 32E8                        18            .byte	$18
14391 32E9                        18            .byte	$18
14392 32EA                        18            .byte	$18
14393 32EB                        18            .byte	$18
14394                                           ! 1626  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32EC                        18            .byte	$18
14396 32ED                        18            .byte	$18
14397 32EE                        18            .byte	$18
14398 32EF                        18            .byte	$18
14399 32F0                        18            .byte	$18
14400 32F1                        18            .byte	$18
14401 32F2                        18            .byte	$18
14402 32F3                        F8            .byte	$F8
14403 32F4                        00            .byte	0
14404 32F5                        00            .byte	0
14405 32F6                        00            .byte	0
14406 32F7                        00            .byte	0
14407 32F8                        00            .byte	0
14408 32F9                        00            .byte	0
14409 32FA                        00            .byte	0
14410 32FB                        00            .byte	0
14411                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 32FC                        00            .byte	0
14413 32FD                        00            .byte	0
14414 32FE                        00            .byte	0
14415 32FF                        00            .byte	0
14416 3300                        00            .byte	0
14417 3301                        00            .byte	0
14418 3302                        00            .byte	0
14419 3303                        1F            .byte	$1F
14420 3304                        18            .byte	$18
14421 3305                        18            .byte	$18
14422 3306                        18            .byte	$18
14423 3307                        18            .byte	$18
14424 3308                        18            .byte	$18
14425 3309                        18            .byte	$18
14426 330A                        18            .byte	$18
14427 330B                        18            .byte	$18
14428                                           ! 1628  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 330C                        FF            .byte	$FF
14430 330D                        FF            .byte	$FF
14431 330E                        FF            .byte	$FF
14432 330F                        FF            .byte	$FF
14433 3310                        FF            .byte	$FF
14434 3311                        FF            .byte	$FF
14435 3312                        FF            .byte	$FF
14436 3313                        FF            .byte	$FF
14437 3314                        FF            .byte	$FF
14438 3315                        FF            .byte	$FF
14439 3316                        FF            .byte	$FF
14440 3317                        FF            .byte	$FF
14441 3318                        FF            .byte	$FF
14442 3319                        FF            .byte	$FF
14443 331A                        FF            .byte	$FF
14444 331B                        FF            .byte	$FF
14445                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 331C                        00            .byte	0
14447 331D                        00            .byte	0
14448 331E                        00            .byte	0
14449 331F                        00            .byte	0
14450 3320                        00            .byte	0
14451 3321                        00            .byte	0
14452 3322                        00            .byte	0
14453 3323                        FF            .byte	$FF
14454 3324                        FF            .byte	$FF
14455 3325                        FF            .byte	$FF
14456 3326                        FF            .byte	$FF
14457 3327                        FF            .byte	$FF
14458 3328                        FF            .byte	$FF
14459 3329                        FF            .byte	$FF
14460 332A                        FF            .byte	$FF
14461 332B                        FF            .byte	$FF
14462                                           ! 1630  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 332C                        F0            .byte	$F0
14464 332D                        F0            .byte	$F0
14465 332E                        F0            .byte	$F0
14466 332F                        F0            .byte	$F0
14467 3330                        F0            .byte	$F0
14468 3331                        F0            .byte	$F0
14469 3332                        F0            .byte	$F0
14470 3333                        F0            .byte	$F0
14471 3334                        F0            .byte	$F0
14472 3335                        F0            .byte	$F0
14473 3336                        F0            .byte	$F0
14474 3337                        F0            .byte	$F0
14475 3338                        F0            .byte	$F0
14476 3339                        F0            .byte	$F0
14477 333A                        F0            .byte	$F0
14478 333B                        F0            .byte	$F0
14479                                           ! 1631  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14480 333C                        0F            .byte	$F
14481 333D                        0F            .byte	$F
14482 333E                        0F            .byte	$F
14483 333F                        0F            .byte	$F
14484 3340                        0F            .byte	$F
14485 3341                        0F            .byte	$F
14486 3342                        0F            .byte	$F
14487 3343                        0F            .byte	$F
14488 3344                        0F            .byte	$F
14489 3345                        0F            .byte	$F
14490 3346                        0F            .byte	$F
14491 3347                        0F            .byte	$F
14492 3348                        0F            .byte	$F
14493 3349                        0F            .byte	$F
14494 334A                        0F            .byte	$F
14495 334B                        0F            .byte	$F
14496                                           ! 1632  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0
14497 334C                        FF            .byte	$FF
14498 334D                        FF            .byte	$FF
14499 334E                        FF            .byte	$FF
14500 334F                        FF            .byte	$FF
14501 3350                        FF            .byte	$FF
14502 3351                        FF            .byte	$FF
14503 3352                        FF            .byte	$FF
14504 3353                        00            .byte	0
14505 3354                        00            .byte	0
14506 3355                        00            .byte	0
14507 3356                        00            .byte	0
14508 3357                        00            .byte	0
14509                                           ! 1632 x00, 0x00, 0x00, 0x00,
14510 3358                        00            .byte	0
14511 3359                        00            .byte	0
14512 335A                        00            .byte	0
14513 335B                        00            .byte	0
14514                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 335C                        00            .byte	0
14516 335D                        00            .byte	0
14517 335E                        00            .byte	0
14518 335F                        00            .byte	0
14519 3360                        00            .byte	0
14520 3361                        76            .byte	$76
14521 3362                        DC            .byte	$DC
14522 3363                        D8            .byte	$D8
14523 3364                        D8            .byte	$D8
14524 3365                        D8            .byte	$D8
14525 3366                        DC            .byte	$DC
14526 3367                        76            .byte	$76
14527 3368                        00            .byte	0
14528 3369                        00            .byte	0
14529 336A                        00            .byte	0
14530 336B                        00            .byte	0
14531                                           ! 1634  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 336C                        00            .byte	0
14533 336D                        00            .byte	0
14534 336E                        78            .byte	$78
14535 336F                        CC            .byte	$CC
14536 3370                        CC            .byte	$CC
14537 3371                        CC            .byte	$CC
14538 3372                        D8            .byte	$D8
14539 3373                        CC            .byte	$CC
14540 3374                        C6            .byte	$C6
14541 3375                        C6            .byte	$C6
14542 3376                        C6            .byte	$C6
14543 3377                        CC            .byte	$CC
14544 3378                        00            .byte	0
14545 3379                        00            .byte	0
14546 337A                        00            .byte	0
14547 337B                        00            .byte	0
14548                                           ! 1635  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 337C                        00            .byte	0
14550 337D                        00            .byte	0
14551 337E                        FE            .byte	$FE
14552 337F                        C6            .byte	$C6
14553 3380                        C6            .byte	$C6
14554 3381                        C0            .byte	$C0
14555 3382                        C0            .byte	$C0
14556 3383                        C0            .byte	$C0
14557 3384                        C0            .byte	$C0
14558 3385                        C0            .byte	$C0
14559 3386                        C0            .byte	$C0
14560 3387                        C0            .byte	$C0
14561 3388                        00            .byte	0
14562 3389                        00            .byte	0
14563 338A                        00            .byte	0
14564 338B                        00            .byte	0
14565                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 338C                        00            .byte	0
14567 338D                        00            .byte	0
14568 338E                        00            .byte	0
14569 338F                        00            .byte	0
14570 3390                        FE            .byte	$FE
14571 3391                        6C            .byte	$6C
14572 3392                        6C            .byte	$6C
14573 3393                        6C            .byte	$6C
14574 3394                        6C            .byte	$6C
14575 3395                        6C            .byte	$6C
14576 3396                        6C            .byte	$6C
14577 3397                        6C            .byte	$6C
14578 3398                        00            .byte	0
14579 3399                        00            .byte	0
14580 339A                        00            .byte	0
14581 339B                        00            .byte	0
14582                                           ! 1637  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 339C                        00            .byte	0
14584 339D                        00            .byte	0
14585 339E                        00            .byte	0
14586 339F                        FE            .byte	$FE
14587 33A0                        C6            .byte	$C6
14588 33A1                        60            .byte	$60
14589 33A2                        30            .byte	$30
14590 33A3                        18            .byte	$18
14591 33A4                        30            .byte	$30
14592 33A5                        60            .byte	$60
14593 33A6                        C6            .byte	$C6
14594 33A7                        FE            .byte	$FE
14595 33A8                        00            .byte	0
14596 33A9                        00            .byte	0
14597 33AA                        00            .byte	0
14598 33AB                        00            .byte	0
14599                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33AC                        00            .byte	0
14601 33AD                        00            .byte	0
14602 33AE                        00            .byte	0
14603 33AF                        00            .byte	0
14604 33B0                        00            .byte	0
14605 33B1                        7E            .byte	$7E
14606 33B2                        D8            .byte	$D8
14607 33B3                        D8            .byte	$D8
14608 33B4                        D8            .byte	$D8
14609 33B5                        D8            .byte	$D8
14610 33B6                        D8            .byte	$D8
14611 33B7                        70            .byte	$70
14612 33B8                        00            .byte	0
14613 33B9                        00            .byte	0
14614 33BA                        00            .byte	0
14615 33BB                        00            .byte	0
14616                                           ! 1639  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33BC                        00            .byte	0
14618 33BD                        00            .byte	0
14619 33BE                        00            .byte	0
14620 33BF                        00            .byte	0
14621 33C0                        66            .byte	$66
14622 33C1                        66            .byte	$66
14623 33C2                        66            .byte	$66
14624 33C3                        66            .byte	$66
14625 33C4                        66            .byte	$66
14626 33C5                        7C            .byte	$7C
14627 33C6                        60            .byte	$60
14628 33C7                        60            .byte	$60
14629 33C8                        C0            .byte	$C0
14630 33C9                        00            .byte	0
14631 33CA                        00            .byte	0
14632 33CB                        00            .byte	0
14633                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33CC                        00            .byte	0
14635 33CD                        00            .byte	0
14636 33CE                        00            .byte	0
14637 33CF                        00            .byte	0
14638 33D0                        76            .byte	$76
14639 33D1                        DC            .byte	$DC
14640 33D2                        18            .byte	$18
14641 33D3                        18            .byte	$18
14642 33D4                        18            .byte	$18
14643 33D5                        18            .byte	$18
14644 33D6                        18            .byte	$18
14645 33D7                        18            .byte	$18
14646 33D8                        00            .byte	0
14647 33D9                        00            .byte	0
14648 33DA                        00            .byte	0
14649 33DB                        00            .byte	0
14650                                           ! 1641  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33DC                        00            .byte	0
14652 33DD                        00            .byte	0
14653 33DE                        00            .byte	0
14654 33DF                        7E            .byte	$7E
14655 33E0                        18            .byte	$18
14656 33E1                        3C            .byte	$3C
14657 33E2                        66            .byte	$66
14658 33E3                        66            .byte	$66
14659 33E4                        66            .byte	$66
14660 33E5                        3C            .byte	$3C
14661 33E6                        18            .byte	$18
14662 33E7                        7E            .byte	$7E
14663 33E8                        00            .byte	0
14664 33E9                        00            .byte	0
14665 33EA                        00            .byte	0
14666 33EB                        00            .byte	0
14667                                           ! 1642  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33EC                        00            .byte	0
14669 33ED                        00            .byte	0
14670 33EE                        00            .byte	0
14671 33EF                        38            .byte	$38
14672 33F0                        6C            .byte	$6C
14673 33F1                        C6            .byte	$C6
14674 33F2                        C6            .byte	$C6
14675 33F3                        FE            .byte	$FE
14676 33F4                        C6            .byte	$C6
14677 33F5                        C6            .byte	$C6
14678 33F6                        6C            .byte	$6C
14679 33F7                        38            .byte	$38
14680 33F8                        00            .byte	0
14681 33F9                        00            .byte	0
14682 33FA                        00            .byte	0
14683 33FB                        00            .byte	0
14684                                           ! 1643  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 33FC                        00            .byte	0
14686 33FD                        00            .byte	0
14687 33FE                        38            .byte	$38
14688 33FF                        6C            .byte	$6C
14689 3400                        C6            .byte	$C6
14690 3401                        C6            .byte	$C6
14691 3402                        C6            .byte	$C6
14692 3403                        6C            .byte	$6C
14693 3404                        6C            .byte	$6C
14694 3405                        6C            .byte	$6C
14695 3406                        6C            .byte	$6C
14696 3407                        EE            .byte	$EE
14697 3408                        00            .byte	0
14698 3409                        00            .byte	0
14699 340A                        00            .byte	0
14700 340B                        00            .byte	0
14701                                           ! 1644  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 340C                        00            .byte	0
14703 340D                        00            .byte	0
14704 340E                        1E            .byte	$1E
14705 340F                        30            .byte	$30
14706 3410                        18            .byte	$18
14707 3411                        0C            .byte	$C
14708 3412                        3E            .byte	$3E
14709 3413                        66            .byte	$66
14710 3414                        66            .byte	$66
14711 3415                        66            .byte	$66
14712 3416                        66            .byte	$66
14713 3417                        3C            .byte	$3C
14714 3418                        00            .byte	0
14715 3419                        00            .byte	0
14716 341A                        00            .byte	0
14717 341B                        00            .byte	0
14718                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 341C                        00            .byte	0
14720 341D                        00            .byte	0
14721 341E                        00            .byte	0
14722 341F                        00            .byte	0
14723 3420                        00            .byte	0
14724 3421                        7E            .byte	$7E
14725 3422                        DB            .byte	$DB
14726 3423                        DB            .byte	$DB
14727 3424                        DB            .byte	$DB
14728 3425                        7E            .byte	$7E
14729 3426                        00            .byte	0
14730 3427                        00            .byte	0
14731 3428                        00            .byte	0
14732 3429                        00            .byte	0
14733 342A                        00            .byte	0
14734 342B                        00            .byte	0
14735                                           ! 1646  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 342C                        00            .byte	0
14737 342D                        00            .byte	0
14738 342E                        00            .byte	0
14739 342F                        03            .byte	3
14740 3430                        06            .byte	6
14741 3431                        7E            .byte	$7E
14742 3432                        DB            .byte	$DB
14743 3433                        DB            .byte	$DB
14744 3434                        F3            .byte	$F3
14745 3435                        7E            .byte	$7E
14746 3436                        60            .byte	$60
14747 3437                        C0            .byte	$C0
14748 3438                        00            .byte	0
14749 3439                        00            .byte	0
14750 343A                        00            .byte	0
14751 343B                        00            .byte	0
14752                                           ! 1647  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 343C                        00            .byte	0
14754 343D                        00            .byte	0
14755 343E                        1C            .byte	$1C
14756 343F                        30            .byte	$30
14757 3440                        60            .byte	$60
14758 3441                        60            .byte	$60
14759 3442                        7C            .byte	$7C
14760 3443                        60            .byte	$60
14761 3444                        60            .byte	$60
14762 3445                        60            .byte	$60
14763 3446                        30            .byte	$30
14764 3447                        1C            .byte	$1C
14765 3448                        00            .byte	0
14766 3449                        00            .byte	0
14767 344A                        00            .byte	0
14768 344B                        00            .byte	0
14769                                           ! 1648  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 344C                        00            .byte	0
14771 344D                        00            .byte	0
14772 344E                        00            .byte	0
14773 344F                        7C            .byte	$7C
14774 3450                        C6            .byte	$C6
14775 3451                        C6            .byte	$C6
14776 3452                        C6            .byte	$C6
14777 3453                        C6            .byte	$C6
14778 3454                        C6            .byte	$C6
14779 3455                        C6            .byte	$C6
14780 3456                        C6            .byte	$C6
14781 3457                        C6            .byte	$C6
14782 3458                        00            .byte	0
14783 3459                        00            .byte	0
14784 345A                        00            .byte	0
14785 345B                        00            .byte	0
14786                                           ! 1649  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 345C                        00            .byte	0
14788 345D                        00            .byte	0
14789 345E                        00            .byte	0
14790 345F                        00            .byte	0
14791 3460                        FE            .byte	$FE
14792 3461                        00            .byte	0
14793 3462                        00            .byte	0
14794 3463                        FE            .byte	$FE
14795 3464                        00            .byte	0
14796 3465                        00            .byte	0
14797 3466                        FE            .byte	$FE
14798 3467                        00            .byte	0
14799 3468                        00            .byte	0
14800 3469                        00            .byte	0
14801 346A                        00            .byte	0
14802 346B                        00            .byte	0
14803                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 346C                        00            .byte	0
14805 346D                        00            .byte	0
14806 346E                        00            .byte	0
14807 346F                        00            .byte	0
14808 3470                        18            .byte	$18
14809 3471                        18            .byte	$18
14810 3472                        7E            .byte	$7E
14811 3473                        18            .byte	$18
14812 3474                        18            .byte	$18
14813 3475                        00            .byte	0
14814 3476                        00            .byte	0
14815 3477                        FF            .byte	$FF
14816 3478                        00            .byte	0
14817 3479                        00            .byte	0
14818 347A                        00            .byte	0
14819 347B                        00            .byte	0
14820                                           ! 1651  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 347C                        00            .byte	0
14822 347D                        00            .byte	0
14823 347E                        00            .byte	0
14824 347F                        30            .byte	$30
14825 3480                        18            .byte	$18
14826 3481                        0C            .byte	$C
14827 3482                        06            .byte	6
14828 3483                        0C            .byte	$C
14829 3484                        18            .byte	$18
14830 3485                        30            .byte	$30
14831 3486                        00            .byte	0
14832 3487                        7E            .byte	$7E
14833 3488                        00            .byte	0
14834 3489                        00            .byte	0
14835 348A                        00            .byte	0
14836 348B                        00            .byte	0
14837                                           ! 1652  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14838 348C                        00            .byte	0
14839 348D                        00            .byte	0
14840 348E                        00            .byte	0
14841 348F                        0C            .byte	$C
14842 3490                        18            .byte	$18
14843 3491                        30            .byte	$30
14844 3492                        60            .byte	$60
14845 3493                        30            .byte	$30
14846 3494                        18            .byte	$18
14847 3495                        0C            .byte	$C
14848 3496                        00            .byte	0
14849 3497                        7E            .byte	$7E
14850 3498                        00            .byte	0
14851 3499                        00            .byte	0
14852 349A                        00            .byte	0
14853 349B                        00            .byte	0
14854                                           ! 1653  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
14855 349C                        00            .byte	0
14856 349D                        00            .byte	0
14857 349E                        0E            .byte	$E
14858 349F                        1B            .byte	$1B
14859 34A0                        1B            .byte	$1B
14860 34A1                        18            .byte	$18
14861 34A2                        18            .byte	$18
14862 34A3                        18            .byte	$18
14863 34A4                        18            .byte	$18
14864 34A5                        18            .byte	$18
14865 34A6                        18            .byte	$18
14866 34A7                        18            .byte	$18
14867 34A8                        18            .byte	$18
14868 34A9                        18            .byte	$18
14869                                           ! 1653 0x18, 0x18,
14870 34AA                        18            .byte	$18
14871 34AB                        18            .byte	$18
14872                                           ! 1654  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34AC                        18            .byte	$18
14874 34AD                        18            .byte	$18
14875 34AE                        18            .byte	$18
14876 34AF                        18            .byte	$18
14877 34B0                        18            .byte	$18
14878 34B1                        18            .byte	$18
14879 34B2                        18            .byte	$18
14880 34B3                        18            .byte	$18
14881 34B4                        D8            .byte	$D8
14882 34B5                        D8            .byte	$D8
14883 34B6                        D8            .byte	$D8
14884 34B7                        70            .byte	$70
14885 34B8                        00            .byte	0
14886 34B9                        00            .byte	0
14887 34BA                        00            .byte	0
14888 34BB                        00            .byte	0
14889                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34BC                        00            .byte	0
14891 34BD                        00            .byte	0
14892 34BE                        00            .byte	0
14893 34BF                        00            .byte	0
14894 34C0                        18            .byte	$18
14895 34C1                        18            .byte	$18
14896 34C2                        00            .byte	0
14897 34C3                        7E            .byte	$7E
14898 34C4                        00            .byte	0
14899 34C5                        18            .byte	$18
14900 34C6                        18            .byte	$18
14901 34C7                        00            .byte	0
14902 34C8                        00            .byte	0
14903 34C9                        00            .byte	0
14904 34CA                        00            .byte	0
14905 34CB                        00            .byte	0
14906                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34CC                        00            .byte	0
14908 34CD                        00            .byte	0
14909 34CE                        00            .byte	0
14910 34CF                        00            .byte	0
14911 34D0                        00            .byte	0
14912 34D1                        76            .byte	$76
14913 34D2                        DC            .byte	$DC
14914 34D3                        00            .byte	0
14915 34D4                        76            .byte	$76
14916 34D5                        DC            .byte	$DC
14917 34D6                        00            .byte	0
14918 34D7                        00            .byte	0
14919 34D8                        00            .byte	0
14920 34D9                        00            .byte	0
14921 34DA                        00            .byte	0
14922 34DB                        00            .byte	0
14923                                           ! 1657  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34DC                        00            .byte	0
14925 34DD                        38            .byte	$38
14926 34DE                        6C            .byte	$6C
14927 34DF                        6C            .byte	$6C
14928 34E0                        38            .byte	$38
14929 34E1                        00            .byte	0
14930 34E2                        00            .byte	0
14931 34E3                        00            .byte	0
14932 34E4                        00            .byte	0
14933 34E5                        00            .byte	0
14934 34E6                        00            .byte	0
14935 34E7                        00            .byte	0
14936 34E8                        00            .byte	0
14937 34E9                        00            .byte	0
14938 34EA                        00            .byte	0
14939 34EB                        00            .byte	0
14940                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34EC                        00            .byte	0
14942 34ED                        00            .byte	0
14943 34EE                        00            .byte	0
14944 34EF                        00            .byte	0
14945 34F0                        00            .byte	0
14946 34F1                        00            .byte	0
14947 34F2                        00            .byte	0
14948 34F3                        18            .byte	$18
14949 34F4                        18            .byte	$18
14950 34F5                        00            .byte	0
14951 34F6                        00            .byte	0
14952 34F7                        00            .byte	0
14953 34F8                        00            .byte	0
14954 34F9                        00            .byte	0
14955 34FA                        00            .byte	0
14956 34FB                        00            .byte	0
14957                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 34FC                        00            .byte	0
14959 34FD                        00            .byte	0
14960 34FE                        00            .byte	0
14961 34FF                        00            .byte	0
14962 3500                        00            .byte	0
14963 3501                        00            .byte	0
14964 3502                        00            .byte	0
14965 3503                        00            .byte	0
14966 3504                        18            .byte	$18
14967 3505                        00            .byte	0
14968 3506                        00            .byte	0
14969 3507                        00            .byte	0
14970 3508                        00            .byte	0
14971 3509                        00            .byte	0
14972 350A                        00            .byte	0
14973 350B                        00            .byte	0
14974                                           ! 1660  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 350C                        00            .byte	0
14976 350D                        0F            .byte	$F
14977 350E                        0C            .byte	$C
14978 350F                        0C            .byte	$C
14979 3510                        0C            .byte	$C
14980 3511                        0C            .byte	$C
14981 3512                        0C            .byte	$C
14982 3513                        EC            .byte	$EC
14983 3514                        6C            .byte	$6C
14984 3515                        6C            .byte	$6C
14985 3516                        3C            .byte	$3C
14986 3517                        1C            .byte	$1C
14987 3518                        00            .byte	0
14988 3519                        00            .byte	0
14989 351A                        00            .byte	0
14990 351B                        00            .byte	0
14991                                           ! 1661  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 351C                        00            .byte	0
14993 351D                        D8            .byte	$D8
14994 351E                        6C            .byte	$6C
14995 351F                        6C            .byte	$6C
14996 3520                        6C            .byte	$6C
14997 3521                        6C            .byte	$6C
14998 3522                        6C            .byte	$6C
14999 3523                        00            .byte	0
15000 3524                        00            .byte	0
15001 3525                        00            .byte	0
15002 3526                        00            .byte	0
15003 3527                        00            .byte	0
15004 3528                        00            .byte	0
15005 3529                        00            .byte	0
15006 352A                        00            .byte	0
15007 352B                        00            .byte	0
15008                                           ! 1662  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 352C                        00            .byte	0
15010 352D                        70            .byte	$70
15011 352E                        D8            .byte	$D8
15012 352F                        30            .byte	$30
15013 3530                        60            .byte	$60
15014 3531                        C8            .byte	$C8
15015 3532                        F8            .byte	$F8
15016 3533                        00            .byte	0
15017 3534                        00            .byte	0
15018 3535                        00            .byte	0
15019 3536                        00            .byte	0
15020 3537                        00            .byte	0
15021 3538                        00            .byte	0
15022 3539                        00            .byte	0
15023 353A                        00            .byte	0
15024 353B                        00            .byte	0
15025                                           ! 1663  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 353C                        00            .byte	0
15027 353D                        00            .byte	0
15028 353E                        00            .byte	0
15029 353F                        00            .byte	0
15030 3540                        7C            .byte	$7C
15031 3541                        7C            .byte	$7C
15032 3542                        7C            .byte	$7C
15033 3543                        7C            .byte	$7C
15034 3544                        7C            .byte	$7C
15035 3545                        7C            .byte	$7C
15036 3546                        7C            .byte	$7C
15037 3547                        00            .byte	0
15038 3548                        00            .byte	0
15039 3549                        00            .byte	0
15040 354A                        00            .byte	0
15041 354B                        00            .byte	0
15042                                           ! 1664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 354C                        00            .byte	0
15044 354D                        00            .byte	0
15045 354E                        00            .byte	0
15046 354F                        00            .byte	0
15047 3550                        00            .byte	0
15048 3551                        00            .byte	0
15049 3552                        00            .byte	0
15050 3553                        00            .byte	0
15051 3554                        00            .byte	0
15052 3555                        00            .byte	0
15053 3556                        00            .byte	0
15054 3557                        00            .byte	0
15055 3558                        00            .byte	0
15056 3559                        00            .byte	0
15057 355A                        00            .byte	0
15058                                           ! 1665 };
15059 355B                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1666 static Bit8u vgafont14alt[1]={0x00};
15062                       0000355C            _vgafont14alt:
15063 355C                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1667 static Bit8u vgafont16alt[1]={0x00};
15066                       0000355D            _vgafont16alt:
15067 355D                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1668 #asm
15070                                           !BCC_ASM
15071                       0000355E            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 355E           BA                   03C2    mov dx, #0x3C2
15074 3561           B0                     C3    mov al, #0xC3
15075 3563           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3564           BA                   03C4    mov dx, #0x3C4
15078 3567           B0                     04    mov al, #0x04
15079 3569           EE                           outb dx,al
15080 356A           BA                   03C5    mov dx, #0x3C5
15081 356D           B0                     02    mov al, #0x02
15082 356F           EE                           outb dx,al
15083 3570           BB                   357A    mov bx, #msg_vga_init
15084 3573           53                           push bx
15085 3574           E8         46C6              call _printf
15086 3577           44                           inc sp
15087 3578           44                           inc sp
15088 3579           C3                           ret
15089                       0000357A            msg_vga_init:
15090 357A                        56            .ascii "VGABios $Id$"
15091 3586                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1690 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1691 #asm
15095                                           !BCC_ASM
15096                       00003589            init_bios_area:
15097 3589           1E                           push ds
15098 358A           B8                   0040    mov ax, # 0x40
15099 358D           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 358F           BB                   0010    mov bx, # 0x10
15102 3592           8B07                         mov ax, [bx]
15103 3594           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 3597           0D                   0020    or ax, #0x0020
15106 359A           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 359C           BB                   0085    mov bx, # 0x85
15110 359F           B0                     10    mov al, #0x10
15111 35A1           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35A3           BB                   0087    mov bx, # 0x87
15114 35A6           B0                     60    mov al, #0x60
15115 35A8           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35AA           BB                   0088    mov bx, # 0x88
15118 35AD           B0                     F9    mov al, #0xf9
15119 35AF           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35B1           BB                   0089    mov bx, # 0x89
15122 35B4           B0                     51    mov al, #0x51
15123 35B6           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35B8           BB                   0065    mov bx, # 0x65
15126 35BB           B0                     09    mov al, #0x09
15127 35BD           8807                         mov [bx], al
15128 35BF           1F                           pop ds
15129 35C0           C3                           ret
15130                       000035C1            _video_save_pointer_table:
15131 35C1                      028C              .word _video_param_table
15132 35C3                      C000              .word 0xc000
15133 35C5                      0000              .word 0
15134 35C7                      0000              .word 0
15135 35C9                      0000              .word 0
15136 35CB                      0000              .word 0
15137 35CD                      0000              .word 0
15138 35CF                      0000              .word 0
15139 35D1                      0000              .word 0
15140 35D3                      0000              .word 0
15141 35D5                      0000              .word 0
15142 35D7                      0000              .word 0
15143 35D9                      0000              .word 0
15144 35DB                      0000              .word 0
15145                                           ! 1741 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1742 static void display_splash_screen()
15148                                           ! 1743 {
15149                                           
15150                       000035DD            _display_splash_screen:
15151                                           ! 1744 }
15152 35DD           C3                         ret
15153                                           ! 1745 static void display_info()
15154                                           ! 1746 {
15155                       000035DE            _display_info:
15156                                           ! 1747 #asm
15157                                           !BCC_ASM
15158 35DE           B8                   C000   mov ax,#0xc000
15159 35E1           8ED8                        mov ds,ax
15160 35E3           BE                   0022   mov si,#vgabios_name
15161 35E6           E8         0013             call _display_string
15162 35E9           BE                   0038   mov si,#vgabios_version
15163 35EC           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 35EF           BE                   0079   mov si,#vgabios_license
15169 35F2           E8         0007             call _display_string
15170 35F5           BE                   00AE   mov si,#vgabios_website
15171 35F8           E8         0001             call _display_string
15172                                           ! 1762 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1763 }
15175 35FB           C3                         ret
15176                                           ! 1764 static void display_string()
15177                                           ! 1765 {
15178                       000035FC            _display_string:
15179                                           ! 1766 #asm
15180                                           !BCC_ASM
15181 35FC           8CD8                        mov ax,ds
15182 35FE           8EC0                        mov es,ax
15183 3600           89F7                        mov di,si
15184 3602           31C9                        xor cx,cx
15185 3604           F7D1                        not cx
15186 3606           30C0                        xor al,al
15187 3608           FC                          cld
15188 3609           F2                          repne
15189 360A           AE                           scasb
15190 360B           F7D1                        not cx
15191 360D           49                          dec cx
15192 360E           51                          push cx
15193 360F           B8                   0300   mov ax,#0x0300
15194 3612           BB                   0000   mov bx,#0x0000
15195 3615           CD                     10   int #0x10
15196 3617           59                          pop cx
15197 3618           B8                   1301   mov ax,#0x1301
15198 361B           BB                   000B   mov bx,#0x000b
15199 361E           89F5                        mov bp,si
15200 3620           CD                     10   int #0x10
15201                                           ! 1787 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1788 }
15204 3622           C3                         ret
15205                                           ! 1789 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1790   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       00003623            _int10_func:
15208                                           !BCC_EOS
15209                                           ! 1791 {
15210                                           ! 1792  switch(( AX >> 8 ))
15211 3623           55                         push	bp
15212 3624           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 3626           8B46         12            mov	ax,$12[bp]
15215 3629           88E0                       mov	al,ah
15216 362B           30E4                       xor	ah,ah
15217                                           ! 1793   {
15218 362D           E9         04D7            br 	.3
15219                                           ! 1794    case 0x00:
15220                                           ! 1795      biosfn_set_video_mode(( AX & 0x00ff ));
15221                       00003630            .4:
15222                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15223 3630           8A46         12            mov	al,$12[bp]
15224                                           ! Debug: list unsigned char = al+0 (used reg = )
15225 3633           30E4                       xor	ah,ah
15226 3635           50                         push	ax
15227                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15228 3636           E8         0524            call	_biosfn_set_video_mode
15229 3639           44                         inc	sp
15230 363A           44                         inc	sp
15231                                           !BCC_EOS
15232                                           ! 1796      switch(( AX & 0x00ff )&0x7F)
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15234 363B           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15236 363E           24                     7F  and	al,*$7F
15237                                           ! 1797       {case 6:
15238 3640           EB           24            jmp .7
15239                                           ! 1798         AX = ((AX & 0xff00) | (0x3F));
15240                       00003642            .8:
15241                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15242 3642           8B46         12            mov	ax,$12[bp]
15243 3645           30C0                       xor	al,al
15244                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15245 3647           0C                     3F  or	al,*$3F
15246                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15247 3649           8946         12            mov	$12[bp],ax
15248                                           !BCC_EOS
15249                                           ! 1799         break;
15250 364C           EB           3D            jmp .5
15251                                           !BCC_EOS
15252                                           ! 1800        case 0:
15253                                           ! 1801        case 1:
15254                       0000364E            .9:
15255                                           ! 1802        case 2:
15256                       0000364E            .A:
15257                                           ! 1803        case 3:
15258                       0000364E            .B:
15259                                           ! 1804        case 4:
15260                       0000364E            .C:
15261                                           ! 1805        case 5:
15262                       0000364E            .D:
15263                                           ! 1806        case 7:
15264                       0000364E            .E:
15265                                           ! 1807         AX = ((AX & 0xff00) | (0x30));
15266                       0000364E            .F:
15267                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15268 364E           8B46         12            mov	ax,$12[bp]
15269 3651           30C0                       xor	al,al
15270                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15271 3653           0C                     30  or	al,*$30
15272                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15273 3655           8946         12            mov	$12[bp],ax
15274                                           !BCC_EOS
15275                                           ! 1808         break;
15276 3658           EB           31            jmp .5
15277                                           !BCC_EOS
15278                                           ! 1809       default:
15279                                           ! 1810         AX = ((AX & 0xff00) | (0x20));
15280                       0000365A            .10:
15281                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15282 365A           8B46         12            mov	ax,$12[bp]
15283 365D           30C0                       xor	al,al
15284                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15285 365F           0C                     20  or	al,*$20
15286                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15287 3661           8946         12            mov	$12[bp],ax
15288                                           !BCC_EOS
15289                                           ! 1811       }
15290                                           ! 1812      break;
15291 3664           EB           25            jmp .5
15292                       00003666            .7:
15293 3666           2C                     00  sub	al,*0
15294 3668           72           F0            jb 	.10
15295 366A           3C                     07  cmp	al,*7
15296 366C           77           1B            ja  	.11
15297 366E           30E4                       xor	ah,ah
15298 3670           D1E0                       shl	ax,*1
15299 3672           89C3                       mov	bx,ax
15300 3674           2E                         seg	cs
15301 3675           FFA7       3679            br	.12[bx]
15302                       00003679            .12:
15303 3679                      364E            .word	.9
15304 367B                      364E            .word	.A
15305 367D                      364E            .word	.B
15306 367F                      364E            .word	.C
15307 3681                      364E            .word	.D
15308 3683                      364E            .word	.E
15309 3685                      3642            .word	.8
15310 3687                      364E            .word	.F
15311                       00003689            .11:
15312 3689           EB           CF            jmp	.10
15313                       0000368B            .5:
15314 368B           E9         04CD            br 	.1
15315                                           !BCC_EOS
15316                                           ! 1813    case 0x01:
15317                                           ! 1814      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15318                       0000368E            .13:
15319                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15320 368E           8A46         10            mov	al,$10[bp]
15321                                           ! Debug: list unsigned char = al+0 (used reg = )
15322 3691           30E4                       xor	ah,ah
15323 3693           50                         push	ax
15324                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15325 3694           8B46         10            mov	ax,$10[bp]
15326 3697           88E0                       mov	al,ah
15327 3699           30E4                       xor	ah,ah
15328                                           ! Debug: list unsigned int = ax+0 (used reg = )
15329 369B           50                         push	ax
15330                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15331 369C           E8         0B56            call	_biosfn_set_cursor_shape
15332 369F           83C4                   04  add	sp,*4
15333                                           !BCC_EOS
15334                                           ! 1815      break;
15335 36A2           E9         04B6            br 	.1
15336                                           !BCC_EOS
15337                                           ! 1816    case 0x02:
15338                                           ! 1817      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15339                       000036A5            .14:
15340                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15341 36A5           FF76         0E            push	$E[bp]
15342                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15343 36A8           8B46         0C            mov	ax,$C[bp]
15344 36AB           88E0                       mov	al,ah
15345 36AD           30E4                       xor	ah,ah
15346                                           ! Debug: list unsigned int = ax+0 (used reg = )
15347 36AF           50                         push	ax
15348                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15349 36B0           E8         0C5D            call	_biosfn_set_cursor_pos
15350 36B3           83C4                   04  add	sp,*4
15351                                           !BCC_EOS
15352                                           ! 1818      break;
15353 36B6           E9         04A2            br 	.1
15354                                           !BCC_EOS
15355                                           ! 1819    case 0x03:
15356                                           ! 1820      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15357                       000036B9            .15:
15358                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15359 36B9           8D5E         0E            lea	bx,$E[bp]
15360 36BC           53                         push	bx
15361                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15362 36BD           8D5E         10            lea	bx,$10[bp]
15363 36C0           53                         push	bx
15364                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15365 36C1           8B46         0C            mov	ax,$C[bp]
15366 36C4           88E0                       mov	al,ah
15367 36C6           30E4                       xor	ah,ah
15368                                           ! Debug: list unsigned int = ax+0 (used reg = )
15369 36C8           50                         push	ax
15370                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15371 36C9           E8         0D44            call	_biosfn_get_cursor_pos
15372 36CC           83C4                   06  add	sp,*6
15373                                           !BCC_EOS
15374                                           ! 1821      break;
15375 36CF           E9         0489            br 	.1
15376                                           !BCC_EOS
15377                                           ! 1822    case 0x04:
15378                                           ! 1823      AX=0x00;
15379                       000036D2            .16:
15380                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15381 36D2           31C0                       xor	ax,ax
15382 36D4           8946         12            mov	$12[bp],ax
15383                                           !BCC_EOS
15384                                           ! 1824      BX=0x00;
15385                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15386 36D7           31C0                       xor	ax,ax
15387 36D9           8946         0C            mov	$C[bp],ax
15388                                           !BCC_EOS
15389                                           ! 1825      CX=0x00;
15390                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15391 36DC           31C0                       xor	ax,ax
15392 36DE           8946         10            mov	$10[bp],ax
15393                                           !BCC_EOS
15394                                           ! 1826      DX=0x00;
15395                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15396 36E1           31C0                       xor	ax,ax
15397 36E3           8946         0E            mov	$E[bp],ax
15398                                           !BCC_EOS
15399                                           ! 1827      break;
15400 36E6           E9         0472            br 	.1
15401                                           !BCC_EOS
15402                                           ! 1828    case 0x05:
15403                                           ! 1829      biosfn_set_active_page(( AX & 0x00ff ));
15404                       000036E9            .17:
15405                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15406 36E9           8A46         12            mov	al,$12[bp]
15407                                           ! Debug: list unsigned char = al+0 (used reg = )
15408 36EC           30E4                       xor	ah,ah
15409 36EE           50                         push	ax
15410                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15411 36EF           E8         0D93            call	_biosfn_set_active_page
15412 36F2           44                         inc	sp
15413 36F3           44                         inc	sp
15414                                           !BCC_EOS
15415                                           ! 1830      break;
15416 36F4           E9         0464            br 	.1
15417                                           !BCC_EOS
15418                                           ! 1831    case 0x06:
15419                                           ! 1832      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,
15420                       000036F7            .18:
15421                                           ! 1832 1);
15422                                           ! Debug: list int = const 1 (used reg = )
15423 36F7           B8                   0001  mov	ax,*1
15424 36FA           50                         push	ax
15425                                           ! Debug: list int = const $FF (used reg = )
15426 36FB           B8                   00FF  mov	ax,#$FF
15427 36FE           50                         push	ax
15428                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15429 36FF           8A46         0E            mov	al,$E[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 3702           30E4                       xor	ah,ah
15432 3704           50                         push	ax
15433                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15434 3705           8B46         0E            mov	ax,$E[bp]
15435 3708           88E0                       mov	al,ah
15436 370A           30E4                       xor	ah,ah
15437                                           ! Debug: list unsigned int = ax+0 (used reg = )
15438 370C           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15440 370D           8A46         10            mov	al,$10[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3710           30E4                       xor	ah,ah
15443 3712           50                         push	ax
15444                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15445 3713           8B46         10            mov	ax,$10[bp]
15446 3716           88E0                       mov	al,ah
15447 3718           30E4                       xor	ah,ah
15448                                           ! Debug: list unsigned int = ax+0 (used reg = )
15449 371A           50                         push	ax
15450                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15451 371B           8B46         0C            mov	ax,$C[bp]
15452 371E           88E0                       mov	al,ah
15453 3720           30E4                       xor	ah,ah
15454                                           ! Debug: list unsigned int = ax+0 (used reg = )
15455 3722           50                         push	ax
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15457 3723           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 3726           30E4                       xor	ah,ah
15460 3728           50                         push	ax
15461                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15462 3729           E8         11DC            call	_biosfn_scroll
15463 372C           83C4                   10  add	sp,*$10
15464                                           !BCC_EOS
15465                                           ! 1833      break;
15466 372F           E9         0429            br 	.1
15467                                           !BCC_EOS
15468                                           ! 1834    case 0x07:
15469                                           ! 1835      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15470                       00003732            .19:
15471                                           ! Debug: list int = const 0 (used reg = )
15472 3732           31C0                       xor	ax,ax
15473 3734           50                         push	ax
15474                                           ! Debug: list int = const $FF (used reg = )
15475 3735           B8                   00FF  mov	ax,#$FF
15476 3738           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15478 3739           8A46         0E            mov	al,$E[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 373C           30E4                       xor	ah,ah
15481 373E           50                         push	ax
15482                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15483 373F           8B46         0E            mov	ax,$E[bp]
15484 3742           88E0                       mov	al,ah
15485 3744           30E4                       xor	ah,ah
15486                                           ! Debug: list unsigned int = ax+0 (used reg = )
15487 3746           50                         push	ax
15488                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15489 3747           8A46         10            mov	al,$10[bp]
15490                                           ! Debug: list unsigned char = al+0 (used reg = )
15491 374A           30E4                       xor	ah,ah
15492 374C           50                         push	ax
15493                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15494 374D           8B46         10            mov	ax,$10[bp]
15495 3750           88E0                       mov	al,ah
15496 3752           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 3754           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15500 3755           8B46         0C            mov	ax,$C[bp]
15501 3758           88E0                       mov	al,ah
15502 375A           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 375C           50                         push	ax
15505                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15506 375D           8A46         12            mov	al,$12[bp]
15507                                           ! Debug: list unsigned char = al+0 (used reg = )
15508 3760           30E4                       xor	ah,ah
15509 3762           50                         push	ax
15510                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15511 3763           E8         11A2            call	_biosfn_scroll
15512 3766           83C4                   10  add	sp,*$10
15513                                           !BCC_EOS
15514                                           ! 1836      break;
15515 3769           E9         03EF            br 	.1
15516                                           !BCC_EOS
15517                                           ! 1837    case 0x08:
15518                                           ! 1838      biosfn_read_char_attr(( BX >> 8 ),&AX);
15519                       0000376C            .1A:
15520                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15521 376C           8D5E         12            lea	bx,$12[bp]
15522 376F           53                         push	bx
15523                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15524 3770           8B46         0C            mov	ax,$C[bp]
15525 3773           88E0                       mov	al,ah
15526 3775           30E4                       xor	ah,ah
15527                                           ! Debug: list unsigned int = ax+0 (used reg = )
15528 3777           50                         push	ax
15529                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15530 3778           E8         1893            call	_biosfn_read_char_attr
15531 377B           83C4                   04  add	sp,*4
15532                                           !BCC_EOS
15533                                           ! 1839      break;
15534 377E           E9         03DA            br 	.1
15535                                           !BCC_EOS
15536                                           ! 1840    case 0x09:
15537                                           ! 1841      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15538                       00003781            .1B:
15539                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15540 3781           FF76         10            push	$10[bp]
15541                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15542 3784           8A46         0C            mov	al,$C[bp]
15543                                           ! Debug: list unsigned char = al+0 (used reg = )
15544 3787           30E4                       xor	ah,ah
15545 3789           50                         push	ax
15546                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15547 378A           8B46         0C            mov	ax,$C[bp]
15548 378D           88E0                       mov	al,ah
15549 378F           30E4                       xor	ah,ah
15550                                           ! Debug: list unsigned int = ax+0 (used reg = )
15551 3791           50                         push	ax
15552                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15553 3792           8A46         12            mov	al,$12[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 3795           30E4                       xor	ah,ah
15556 3797           50                         push	ax
15557                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15558 3798           E8         1DB8            call	_biosfn_write_char_attr
15559 379B           83C4                   08  add	sp,*8
15560                                           !BCC_EOS
15561                                           ! 1842      break;
15562 379E           E9         03BA            br 	.1
15563                                           !BCC_EOS
15564                                           ! 1843    case 0x0A:
15565                                           ! 1844      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15566                       000037A1            .1C:
15567                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15568 37A1           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15570 37A4           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37A7           30E4                       xor	ah,ah
15573 37A9           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15575 37AA           8B46         0C            mov	ax,$C[bp]
15576 37AD           88E0                       mov	al,ah
15577 37AF           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 37B1           50                         push	ax
15580                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15581 37B2           8A46         12            mov	al,$12[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 37B5           30E4                       xor	ah,ah
15584 37B7           50                         push	ax
15585                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15586 37B8           E8         1F8C            call	_biosfn_write_char_only
15587 37BB           83C4                   08  add	sp,*8
15588                                           !BCC_EOS
15589                                           ! 1845      break;
15590 37BE           E9         039A            br 	.1
15591                                           !BCC_EOS
15592                                           ! 1846    case 0x0C:
15593                                           ! 1847      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15594                       000037C1            .1D:
15595                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15596 37C1           FF76         0E            push	$E[bp]
15597                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15598 37C4           FF76         10            push	$10[bp]
15599                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15600 37C7           8A46         12            mov	al,$12[bp]
15601                                           ! Debug: list unsigned char = al+0 (used reg = )
15602 37CA           30E4                       xor	ah,ah
15603 37CC           50                         push	ax
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15605 37CD           8B46         0C            mov	ax,$C[bp]
15606 37D0           88E0                       mov	al,ah
15607 37D2           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 37D4           50                         push	ax
15610                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15611 37D5           E8         21DD            call	_biosfn_write_pixel
15612 37D8           83C4                   08  add	sp,*8
15613                                           !BCC_EOS
15614                                           ! 1848      break;
15615 37DB           E9         037D            br 	.1
15616                                           !BCC_EOS
15617                                           ! 1849    case 0x0D:
15618                                           ! 1850      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15619                       000037DE            .1E:
15620                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15621 37DE           8D5E         12            lea	bx,$12[bp]
15622 37E1           53                         push	bx
15623                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15624 37E2           FF76         0E            push	$E[bp]
15625                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15626 37E5           FF76         10            push	$10[bp]
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15628 37E8           8B46         0C            mov	ax,$C[bp]
15629 37EB           88E0                       mov	al,ah
15630 37ED           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 37EF           50                         push	ax
15633                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15634 37F0           E8         245E            call	_biosfn_read_pixel
15635 37F3           83C4                   08  add	sp,*8
15636                                           !BCC_EOS
15637                                           ! 1851      break;
15638 37F6           E9         0362            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1852    case 0x0E:
15641                                           ! 1853      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15642                       000037F9            .1F:
15643                                           ! Debug: list int = const 2 (used reg = )
15644 37F9           B8                   0002  mov	ax,*2
15645 37FC           50                         push	ax
15646                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15647 37FD           8A46         0C            mov	al,$C[bp]
15648                                           ! Debug: list unsigned char = al+0 (used reg = )
15649 3800           30E4                       xor	ah,ah
15650 3802           50                         push	ax
15651                                           ! Debug: list int = const $FF (used reg = )
15652 3803           B8                   00FF  mov	ax,#$FF
15653 3806           50                         push	ax
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15655 3807           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 380A           30E4                       xor	ah,ah
15658 380C           50                         push	ax
15659                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15660 380D           E8         2647            call	_biosfn_write_teletype
15661 3810           83C4                   08  add	sp,*8
15662                                           !BCC_EOS
15663                                           ! 1854      break;
15664 3813           E9         0345            br 	.1
15665                                           !BCC_EOS
15666                                           ! 1855    case 0x10:
15667                                           ! 1856      biosfn_perform_gray_scale_summing(BX,CX);
15668                       00003816            .20:
15669                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15670 3816           FF76         10            push	$10[bp]
15671                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15672 3819           FF76         0C            push	$C[bp]
15673                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15674 381C           E8         2C88            call	_biosfn_perform_gray_scale_summing
15675 381F           83C4                   04  add	sp,*4
15676                                           !BCC_EOS
15677                                           ! 1857      break;
15678 3822           E9         0336            br 	.1
15679                                           !BCC_EOS
15680                                           ! 1858    case 0x11:
15681                                           ! 1859      switch(( AX & 0x00ff ))
15682                       00003825            .21:
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15684 3825           8A46         12            mov	al,$12[bp]
15685                                           ! 1860       {
15686 3828           E9         00E1            br 	.24
15687                                           ! 1861        case 0x00:
15688                                           ! 1862        case 0x10:
15689                       0000382B            .25:
15690                                           ! 1863         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15691                       0000382B            .26:
15692                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15693 382B           8B46         0C            mov	ax,$C[bp]
15694 382E           88E0                       mov	al,ah
15695 3830           30E4                       xor	ah,ah
15696                                           ! Debug: list unsigned int = ax+0 (used reg = )
15697 3832           50                         push	ax
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15699 3833           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 3836           30E4                       xor	ah,ah
15702 3838           50                         push	ax
15703                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15704 3839           FF76         0E            push	$E[bp]
15705                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15706 383C           FF76         10            push	$10[bp]
15707                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15708 383F           FF76         08            push	8[bp]
15709                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15710 3842           FF76         16            push	$16[bp]
15711                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15712 3845           8A46         12            mov	al,$12[bp]
15713                                           ! Debug: list unsigned char = al+0 (used reg = )
15714 3848           30E4                       xor	ah,ah
15715 384A           50                         push	ax
15716                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15717 384B           E8         2F00            call	_biosfn_load_text_user_pat
15718 384E           83C4                   0E  add	sp,*$E
15719                                           !BCC_EOS
15720                                           ! 1864         break;
15721 3851           E9         010C            br 	.22
15722                                           !BCC_EOS
15723                                           ! 1865        case 0x01:
15724                                           ! 1866        case 0x11:
15725                       00003854            .27:
15726                                           ! 1867         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15727                       00003854            .28:
15728                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15729 3854           8A46         0C            mov	al,$C[bp]
15730                                           ! Debug: list unsigned char = al+0 (used reg = )
15731 3857           30E4                       xor	ah,ah
15732 3859           50                         push	ax
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15734 385A           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 385D           30E4                       xor	ah,ah
15737 385F           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15739 3860           E8         2F87            call	_biosfn_load_text_8_14_pat
15740 3863           83C4                   04  add	sp,*4
15741                                           !BCC_EOS
15742                                           ! 1868         break;
15743 3866           E9         00F7            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1869        case 0x02:
15746                                           ! 1870        case 0x12:
15747                       00003869            .29:
15748                                           ! 1871         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       00003869            .2A:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 3869           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 386C           30E4                       xor	ah,ah
15754 386E           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 386F           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 3872           30E4                       xor	ah,ah
15759 3874           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15761 3875           E8         3009            call	_biosfn_load_text_8_8_pat
15762 3878           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1872         break;
15765 387B           E9         00E2            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1873        case 0x04:
15768                                           ! 1874        case 0x14:
15769                       0000387E            .2B:
15770                                           ! 1875         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       0000387E            .2C:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 387E           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 3881           30E4                       xor	ah,ah
15776 3883           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 3884           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 3887           30E4                       xor	ah,ah
15781 3889           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15783 388A           E8         3092            call	_biosfn_load_text_8_16_pat
15784 388D           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1876         break;
15787 3890           E9         00CD            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1877        case 0x20:
15790                                           ! 1878         biosfn_load_gfx_8_8_chars(ES,BP);
15791                       00003893            .2D:
15792                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15793 3893           FF76         08            push	8[bp]
15794                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15795 3896           FF76         16            push	$16[bp]
15796                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15797 3899           E8         3114            call	_biosfn_load_gfx_8_8_chars
15798 389C           83C4                   04  add	sp,*4
15799                                           !BCC_EOS
15800                                           ! 1879         break;
15801 389F           E9         00BE            br 	.22
15802                                           !BCC_EOS
15803                                           ! 1880        case 0x21:
15804                                           ! 1881         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15805                       000038A2            .2E:
15806                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15807 38A2           8A46         0E            mov	al,$E[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 38A5           30E4                       xor	ah,ah
15810 38A7           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15812 38A8           8A46         0C            mov	al,$C[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 38AB           30E4                       xor	ah,ah
15815 38AD           50                         push	ax
15816                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15817 38AE           FF76         10            push	$10[bp]
15818                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15819 38B1           FF76         08            push	8[bp]
15820                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15821 38B4           FF76         16            push	$16[bp]
15822                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15823 38B7           E8         30F7            call	_biosfn_load_gfx_user_chars
15824 38BA           83C4                   0A  add	sp,*$A
15825                                           !BCC_EOS
15826                                           ! 1882         break;
15827 38BD           E9         00A0            br 	.22
15828                                           !BCC_EOS
15829                                           ! 1883        case 0x22:
15830                                           ! 1884         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15831                       000038C0            .2F:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 38C0           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38C3           30E4                       xor	ah,ah
15836 38C5           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15838 38C6           E8         30E9            call	_biosfn_load_gfx_8_14_chars
15839 38C9           44                         inc	sp
15840 38CA           44                         inc	sp
15841                                           !BCC_EOS
15842                                           ! 1885         break;
15843 38CB           E9         0092            br 	.22
15844                                           !BCC_EOS
15845                                           ! 1886        case 0x23:
15846                                           ! 1887         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15847                       000038CE            .30:
15848                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15849 38CE           8A46         0C            mov	al,$C[bp]
15850                                           ! Debug: list unsigned char = al+0 (used reg = )
15851 38D1           30E4                       xor	ah,ah
15852 38D3           50                         push	ax
15853                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15854 38D4           E8         30DC            call	_biosfn_load_gfx_8_8_dd_chars
15855 38D7           44                         inc	sp
15856 38D8           44                         inc	sp
15857                                           !BCC_EOS
15858                                           ! 1888         break;
15859 38D9           E9         0084            br 	.22
15860                                           !BCC_EOS
15861                                           ! 1889        case 0x24:
15862                                           ! 1890         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15863                       000038DC            .31:
15864                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15865 38DC           8A46         0C            mov	al,$C[bp]
15866                                           ! Debug: list unsigned char = al+0 (used reg = )
15867 38DF           30E4                       xor	ah,ah
15868 38E1           50                         push	ax
15869                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15870 38E2           E8         30CF            call	_biosfn_load_gfx_8_16_chars
15871 38E5           44                         inc	sp
15872 38E6           44                         inc	sp
15873                                           !BCC_EOS
15874                                           ! 1891         break;
15875 38E7           E9         0076            br 	.22
15876                                           !BCC_EOS
15877                                           ! 1892        case 0x30:
15878                                           ! 1893         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15879                       000038EA            .32:
15880                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15881 38EA           8D5E         0E            lea	bx,$E[bp]
15882 38ED           53                         push	bx
15883                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15884 38EE           8D5E         10            lea	bx,$10[bp]
15885 38F1           53                         push	bx
15886                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15887 38F2           8D5E         08            lea	bx,8[bp]
15888 38F5           53                         push	bx
15889                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15890 38F6           8D5E         16            lea	bx,$16[bp]
15891 38F9           53                         push	bx
15892                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15893 38FA           8B46         0C            mov	ax,$C[bp]
15894 38FD           88E0                       mov	al,ah
15895 38FF           30E4                       xor	ah,ah
15896                                           ! Debug: list unsigned int = ax+0 (used reg = )
15897 3901           50                         push	ax
15898                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15899 3902           E8         30B0            call	_biosfn_get_font_info
15900 3905           83C4                   0A  add	sp,*$A
15901                                           !BCC_EOS
15902                                           ! 1894         break;
15903 3908           EB           56            jmp .22
15904                                           !BCC_EOS
15905                                           ! 1895       }
15906                                           ! 1896      break;
15907 390A           EB           54            jmp .22
15908                       0000390C            .24:
15909 390C           2C                     00  sub	al,*0
15910 390E         0F84         FF19            beq 	.25
15911 3912           2C                     01  sub	al,*1
15912 3914         0F84         FF3C            beq 	.27
15913 3918           2C                     01  sub	al,*1
15914 391A         0F84         FF4B            beq 	.29
15915 391E           2C                     02  sub	al,*2
15916 3920         0F84         FF5A            beq 	.2B
15917 3924           2C                     0C  sub	al,*$C
15918 3926         0F84         FF01            beq 	.26
15919 392A           2C                     01  sub	al,*1
15920 392C         0F84         FF24            beq 	.28
15921 3930           2C                     01  sub	al,*1
15922 3932         0F84         FF33            beq 	.2A
15923 3936           2C                     02  sub	al,*2
15924 3938         0F84         FF42            beq 	.2C
15925 393C           2C                     0C  sub	al,*$C
15926 393E         0F84         FF51            beq 	.2D
15927 3942           2C                     01  sub	al,*1
15928 3944         0F84         FF5A            beq 	.2E
15929 3948           2C                     01  sub	al,*1
15930 394A         0F84         FF72            beq 	.2F
15931 394E           2C                     01  sub	al,*1
15932 3950         0F84         FF7A            beq 	.30
15933 3954           2C                     01  sub	al,*1
15934 3956         0F84         FF82            beq 	.31
15935 395A           2C                     0C  sub	al,*$C
15936 395C         0F84         FF8A            beq 	.32
15937                       00003960            .22:
15938 3960           E9         01F8            br 	.1
15939                                           !BCC_EOS
15940                                           ! 1897    case 0x12:
15941                                           ! 1898      switch(( BX & 0x00ff ))
15942                       00003963            .33:
15943                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15944 3963           8A46         0C            mov	al,$C[bp]
15945                                           ! 1899       {
15946 3966           EB           3C            jmp .36
15947                                           ! 1900        case 0x20:
15948                                           ! 1901         biosfn_alternate_prtsc();
15949                       00003968            .37:
15950                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15951 3968           E8         3224            call	_biosfn_alternate_prtsc
15952                                           !BCC_EOS
15953                                           ! 1902         break;
15954 396B           EB           43            jmp .34
15955                                           !BCC_EOS
15956                                           ! 1903        case 0x35:
15957                                           ! 1904         biosfn_switch_video_interface(( AX & 0x
15958                       0000396D            .38:
15959                                           ! 1904 00ff ),ES,DX);
15960                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15961 396D           FF76         0E            push	$E[bp]
15962                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15963 3970           FF76         16            push	$16[bp]
15964                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15965 3973           8A46         12            mov	al,$12[bp]
15966                                           ! Debug: list unsigned char = al+0 (used reg = )
15967 3976           30E4                       xor	ah,ah
15968 3978           50                         push	ax
15969                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15970 3979           E8         32ED            call	_biosfn_switch_video_interface
15971 397C           83C4                   06  add	sp,*6
15972                                           !BCC_EOS
15973                                           ! 1905         AX = ((AX & 0xff00) | (0x12));
15974                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15975 397F           8B46         12            mov	ax,$12[bp]
15976 3982           30C0                       xor	al,al
15977                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15978 3984           0C                     12  or	al,*$12
15979                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15980 3986           8946         12            mov	$12[bp],ax
15981                                           !BCC_EOS
15982                                           ! 1906         break;
15983 3989           EB           25            jmp .34
15984                                           !BCC_EOS
15985                                           ! 1907        case 0x36:
15986                                           ! 1908         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15987                       0000398B            .39:
15988                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15989 398B           8A46         12            mov	al,$12[bp]
15990                                           ! Debug: list unsigned char = al+0 (used reg = )
15991 398E           30E4                       xor	ah,ah
15992 3990           50                         push	ax
15993                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15994 3991           E8         32D6            call	_biosfn_enable_video_refresh_control
15995 3994           44                         inc	sp
15996 3995           44                         inc	sp
15997                                           !BCC_EOS
15998                                           ! 1909         AX = ((AX & 0xff00) | (0x12));
15999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16000 3996           8B46         12            mov	ax,$12[bp]
16001 3999           30C0                       xor	al,al
16002                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16003 399B           0C                     12  or	al,*$12
16004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16005 399D           8946         12            mov	$12[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1910         break;
16008 39A0           EB           0E            jmp .34
16009                                           !BCC_EOS
16010                                           ! 1911       }
16011                                           ! 1912      break;
16012 39A2           EB           0C            jmp .34
16013                       000039A4            .36:
16014 39A4           2C                     20  sub	al,*$20
16015 39A6           74           C0            je 	.37
16016 39A8           2C                     15  sub	al,*$15
16017 39AA           74           C1            je 	.38
16018 39AC           2C                     01  sub	al,*1
16019 39AE           74           DB            je 	.39
16020                       000039B0            .34:
16021 39B0           E9         01A8            br 	.1
16022                                           !BCC_EOS
16023                                           ! 1913    case 0x13:
16024                                           ! 1914      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16025                       000039B3            .3A:
16026                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16027 39B3           FF76         08            push	8[bp]
16028                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16029 39B6           FF76         16            push	$16[bp]
16030                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16031 39B9           8A46         0E            mov	al,$E[bp]
16032                                           ! Debug: list unsigned char = al+0 (used reg = )
16033 39BC           30E4                       xor	ah,ah
16034 39BE           50                         push	ax
16035                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16036 39BF           8B46         0E            mov	ax,$E[bp]
16037 39C2           88E0                       mov	al,ah
16038 39C4           30E4                       xor	ah,ah
16039                                           ! Debug: list unsigned int = ax+0 (used reg = )
16040 39C6           50                         push	ax
16041                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16042 39C7           FF76         10            push	$10[bp]
16043                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16044 39CA           8A46         0C            mov	al,$C[bp]
16045                                           ! Debug: list unsigned char = al+0 (used reg = )
16046 39CD           30E4                       xor	ah,ah
16047 39CF           50                         push	ax
16048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16049 39D0           8B46         0C            mov	ax,$C[bp]
16050 39D3           88E0                       mov	al,ah
16051 39D5           30E4                       xor	ah,ah
16052                                           ! Debug: list unsigned int = ax+0 (used reg = )
16053 39D7           50                         push	ax
16054                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16055 39D8           8A46         12            mov	al,$12[bp]
16056                                           ! Debug: list unsigned char = al+0 (used reg = )
16057 39DB           30E4                       xor	ah,ah
16058 39DD           50                         push	ax
16059                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16060 39DE           E8         328A            call	_biosfn_write_string
16061 39E1           83C4                   10  add	sp,*$10
16062                                           !BCC_EOS
16063                                           ! 1915      break;
16064 39E4           E9         0174            br 	.1
16065                                           !BCC_EOS
16066                                           ! 1916    case 0x1B:
16067                                           ! 1917      biosfn_read_state_info(BX,ES,DI);
16068                       000039E7            .3B:
16069                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16070 39E7           FF76         04            push	4[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 39EA           FF76         16            push	$16[bp]
16073                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16074 39ED           FF76         0C            push	$C[bp]
16075                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16076 39F0           E8         3384            call	_biosfn_read_state_info
16077 39F3           83C4                   06  add	sp,*6
16078                                           !BCC_EOS
16079                                           ! 1918      AX = ((AX & 0xff00) | (0x1B));
16080                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16081 39F6           8B46         12            mov	ax,$12[bp]
16082 39F9           30C0                       xor	al,al
16083                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16084 39FB           0C                     1B  or	al,*$1B
16085                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16086 39FD           8946         12            mov	$12[bp],ax
16087                                           !BCC_EOS
16088                                           ! 1919      break;
16089 3A00           E9         0158            br 	.1
16090                                           !BCC_EOS
16091                                           ! 1920    case 0x1C:
16092                                           ! 1921      switch(( AX & 0x00ff ))
16093                       00003A03            .3C:
16094                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16095 3A03           8A46         12            mov	al,$12[bp]
16096                                           ! 1922       {
16097 3A06           EB           33            jmp .3F
16098                                           ! 1923        case 0x00:
16099                                           ! 1924         biosfn_read_video_state_size(CX,&BX);
16100                       00003A08            .40:
16101                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16102 3A08           8D5E         0C            lea	bx,$C[bp]
16103 3A0B           53                         push	bx
16104                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16105 3A0C           FF76         10            push	$10[bp]
16106                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16107 3A0F           E8         34E4            call	_biosfn_read_video_state_size
16108 3A12           83C4                   04  add	sp,*4
16109                                           !BCC_EOS
16110                                           ! 1925         break;
16111 3A15           EB           30            jmp .3D
16112                                           !BCC_EOS
16113                                           ! 1926        case 0x01:
16114                                           ! 1927         biosfn_save_video_state(CX,ES,BX);
16115                       00003A17            .41:
16116                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16117 3A17           FF76         0C            push	$C[bp]
16118                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16119 3A1A           FF76         16            push	$16[bp]
16120                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16121 3A1D           FF76         10            push	$10[bp]
16122                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16123 3A20           E8         34F7            call	_biosfn_save_video_state
16124 3A23           83C4                   06  add	sp,*6
16125                                           !BCC_EOS
16126                                           ! 1928         break;
16127 3A26           EB           1F            jmp .3D
16128                                           !BCC_EOS
16129                                           ! 1929        case 0x02:
16130                                           ! 1930         biosfn_restore_video_state(CX,ES,BX);
16131                       00003A28            .42:
16132                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16133 3A28           FF76         0C            push	$C[bp]
16134                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16135 3A2B           FF76         16            push	$16[bp]
16136                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16137 3A2E           FF76         10            push	$10[bp]
16138                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16139 3A31           E8         3AB0            call	_biosfn_restore_video_state
16140 3A34           83C4                   06  add	sp,*6
16141                                           !BCC_EOS
16142                                           ! 1931         break;
16143 3A37           EB           0E            jmp .3D
16144                                           !BCC_EOS
16145                                           ! 1932       }
16146                                           ! 1933      AX = ((AX & 0xff00) | (0x1C));
16147 3A39           EB           0C            jmp .3D
16148                       00003A3B            .3F:
16149 3A3B           2C                     00  sub	al,*0
16150 3A3D           74           C9            je 	.40
16151 3A3F           2C                     01  sub	al,*1
16152 3A41           74           D4            je 	.41
16153 3A43           2C                     01  sub	al,*1
16154 3A45           74           E1            je 	.42
16155                       00003A47            .3D:
16156                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16157 3A47           8B46         12            mov	ax,$12[bp]
16158 3A4A           30C0                       xor	al,al
16159                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16160 3A4C           0C                     1C  or	al,*$1C
16161                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16162 3A4E           8946         12            mov	$12[bp],ax
16163                                           !BCC_EOS
16164                                           ! 1934      break;
16165 3A51           E9         0107            br 	.1
16166                                           !BCC_EOS
16167                                           ! 1935    case 0x4f:
16168                                           ! 1936      if (vbe_has_vbe_display()) {
16169                       00003A54            .43:
16170                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16171 3A54           E8         5D9F            call	_vbe_has_vbe_display
16172 3A57           85C0                       test	ax,ax
16173 3A59         0F84         00A0            beq 	.44
16174                       00003A5D            .45:
16175                                           ! 1937        switch(( AX & 0x00ff ))
16176                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16177 3A5D           8A46         12            mov	al,$12[bp]
16178                                           ! 1938        {
16179 3A60           EB           6E            jmp .48
16180                                           ! 1939          case 0x00:
16181                                           ! 1940           vbe_biosfn_return_controller_information(&AX,ES,DI);
16182                       00003A62            .49:
16183                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16184 3A62           FF76         04            push	4[bp]
16185                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16186 3A65           FF76         16            push	$16[bp]
16187                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16188 3A68           8D5E         12            lea	bx,$12[bp]
16189 3A6B           53                         push	bx
16190                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16191 3A6C           E8         5DFE            call	_vbe_biosfn_return_controller_information
16192 3A6F           83C4                   06  add	sp,*6
16193                                           !BCC_EOS
16194                                           ! 1941           break;
16195 3A72           E9         0086            br 	.46
16196                                           !BCC_EOS
16197                                           ! 1942          case 0x01:
16198                                           ! 1943           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16199                       00003A75            .4A:
16200                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16201 3A75           FF76         04            push	4[bp]
16202                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16203 3A78           FF76         16            push	$16[bp]
16204                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16205 3A7B           FF76         10            push	$10[bp]
16206                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16207 3A7E           8D5E         12            lea	bx,$12[bp]
16208 3A81           53                         push	bx
16209                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16210 3A82           E8         6040            call	_vbe_biosfn_return_mode_information
16211 3A85           83C4                   08  add	sp,*8
16212                                           !BCC_EOS
16213                                           ! 1944           break;
16214 3A88           EB           71            jmp .46
16215                                           !BCC_EOS
16216                                           ! 1945          case 0x02:
16217                                           ! 1946           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16218                       00003A8A            .4B:
16219                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16220 3A8A           FF76         04            push	4[bp]
16221                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16222 3A8D           FF76         16            push	$16[bp]
16223                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16224 3A90           FF76         0C            push	$C[bp]
16225                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16226 3A93           8D5E         12            lea	bx,$12[bp]
16227 3A96           53                         push	bx
16228                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16229 3A97           E8         6147            call	_vbe_biosfn_set_mode
16230 3A9A           83C4                   08  add	sp,*8
16231                                           !BCC_EOS
16232                                           ! 1947           break;
16233 3A9D           EB           5C            jmp .46
16234                                           !BCC_EOS
16235                                           ! 1948          case 0x04:
16236                                           ! 1949           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16237                       00003A9F            .4C:
16238                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16239 3A9F           8D5E         0C            lea	bx,$C[bp]
16240 3AA2           53                         push	bx
16241                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16242 3AA3           FF76         16            push	$16[bp]
16243                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16244 3AA6           FF76         0E            push	$E[bp]
16245                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16246 3AA9           FF76         10            push	$10[bp]
16247                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16248 3AAC           8D5E         12            lea	bx,$12[bp]
16249 3AAF           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16251 3AB0           E8         6462            call	_vbe_biosfn_save_restore_state
16252 3AB3           83C4                   0A  add	sp,*$A
16253                                           !BCC_EOS
16254                                           ! 1950           break;
16255 3AB6           EB           43            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1951          case 0x09:
16258                                           ! 1952           AX=0x100;
16259                       00003AB8            .4D:
16260                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16261 3AB8           B8                   0100  mov	ax,#$100
16262 3ABB           8946         12            mov	$12[bp],ax
16263                                           !BCC_EOS
16264                                           ! 1953           break;
16265 3ABE           EB           3B            jmp .46
16266                                           !BCC_EOS
16267                                           ! 1954          case 0x0A:
16268                                           ! 1955           AX=0x100;
16269                       00003AC0            .4E:
16270                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16271 3AC0           B8                   0100  mov	ax,#$100
16272 3AC3           8946         12            mov	$12[bp],ax
16273                                           !BCC_EOS
16274                                           ! 1956           break;
16275 3AC6           EB           33            jmp .46
16276                                           !BCC_EOS
16277                                           ! 1957          default:
16278                                           ! 1958           AX=0x100;
16279                       00003AC8            .4F:
16280                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16281 3AC8           B8                   0100  mov	ax,#$100
16282 3ACB           8946         12            mov	$12[bp],ax
16283                                           !BCC_EOS
16284                                           ! 1959           }
16285                                           ! 1960         }
16286 3ACE           EB           2B            jmp .46
16287                       00003AD0            .48:
16288 3AD0           2C                     00  sub	al,*0
16289 3AD2           72           F4            jb 	.4F
16290 3AD4           3C                     0A  cmp	al,*$A
16291 3AD6           77           21            ja  	.50
16292 3AD8           30E4                       xor	ah,ah
16293 3ADA           D1E0                       shl	ax,*1
16294 3ADC           89C3                       mov	bx,ax
16295 3ADE           2E                         seg	cs
16296 3ADF           FFA7       3AE3            br	.51[bx]
16297                       00003AE3            .51:
16298 3AE3                      3A62            .word	.49
16299 3AE5                      3A75            .word	.4A
16300 3AE7                      3A8A            .word	.4B
16301 3AE9                      3AC8            .word	.4F
16302 3AEB                      3A9F            .word	.4C
16303 3AED                      3AC8            .word	.4F
16304 3AEF                      3AC8            .word	.4F
16305 3AF1                      3AC8            .word	.4F
16306 3AF3                      3AC8            .word	.4F
16307 3AF5                      3AB8            .word	.4D
16308 3AF7                      3AC0            .word	.4E
16309                       00003AF9            .50:
16310 3AF9           EB           CD            jmp	.4F
16311                       00003AFB            .46:
16312                                           ! 1961         else {
16313 3AFB           EB           06            jmp .52
16314                       00003AFD            .44:
16315                                           ! 1962           AX=0x0100;
16316                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16317 3AFD           B8                   0100  mov	ax,#$100
16318 3B00           8946         12            mov	$12[bp],ax
16319                                           !BCC_EOS
16320                                           ! 1963           }
16321                                           ! 1964         break;
16322                       00003B03            .52:
16323 3B03           EB           56            jmp .1
16324                                           !BCC_EOS
16325                                           ! 1965   }
16326                                           ! 1966 }
16327 3B05           EB           54            jmp .1
16328                       00003B07            .3:
16329 3B07           2D                   0000  sub	ax,*0
16330 3B0A           7C           4F            jl  	.1
16331 3B0C           3D                   001C  cmp	ax,*$1C
16332 3B0F           77           43            ja  	.53
16333 3B11           D1E0                       shl	ax,*1
16334 3B13           89C3                       mov	bx,ax
16335 3B15           2E                         seg	cs
16336 3B16           FFA7       3B1A            br	.54[bx]
16337                       00003B1A            .54:
16338 3B1A                      3630            .word	.4
16339 3B1C                      368E            .word	.13
16340 3B1E                      36A5            .word	.14
16341 3B20                      36B9            .word	.15
16342 3B22                      36D2            .word	.16
16343 3B24                      36E9            .word	.17
16344 3B26                      36F7            .word	.18
16345 3B28                      3732            .word	.19
16346 3B2A                      376C            .word	.1A
16347 3B2C                      3781            .word	.1B
16348 3B2E                      37A1            .word	.1C
16349 3B30                      3B5B            .word	.1
16350 3B32                      37C1            .word	.1D
16351 3B34                      37DE            .word	.1E
16352 3B36                      37F9            .word	.1F
16353 3B38                      3B5B            .word	.1
16354 3B3A                      3816            .word	.20
16355 3B3C                      3825            .word	.21
16356 3B3E                      3963            .word	.33
16357 3B40                      39B3            .word	.3A
16358 3B42                      3B5B            .word	.1
16359 3B44                      3B5B            .word	.1
16360 3B46                      3B5B            .word	.1
16361 3B48                      3B5B            .word	.1
16362 3B4A                      3B5B            .word	.1
16363 3B4C                      3B5B            .word	.1
16364 3B4E                      3B5B            .word	.1
16365 3B50                      39E7            .word	.3B
16366 3B52                      3A03            .word	.3C
16367                       00003B54            .53:
16368 3B54           2D                   004F  sub	ax,*$4F
16369 3B57         0F84         FEF9            beq 	.43
16370                       00003B5B            .1:
16371                       FFFFFFFE            ..FFFF	=	-2
16372 3B5B           5D                         pop	bp
16373 3B5C           C3                         ret
16374                                           ! 1967 static void biosfn_set_video_mode(mode) Bit8u mode;
16375                                           ! Register BX used in function int10_func
16376                       00003B5D            _biosfn_set_video_mode:
16377                                           !BCC_EOS
16378                                           ! 1968 {
16379                                           ! 1969  Bit8u noclearmem=mode&0x80;
16380 3B5D           55                         push	bp
16381 3B5E           89E5                       mov	bp,sp
16382 3B60           4C                         dec	sp
16383                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16384 3B61           8A46         04            mov	al,4[bp]
16385 3B64           24                     80  and	al,#$80
16386                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16387 3B66           8846         FF            mov	-1[bp],al
16388                                           !BCC_EOS
16389                                           ! 1970  Bit8u line,mmask,*palette,vpti;
16390                                           !BCC_EOS
16391                                           ! 1971  Bit16u i,twidth,theightm1,cheight;
16392                                           !BCC_EOS
16393                                           ! 1972  Bit8u modeset_ctl,video_ctl,vga_switches;
16394                                           !BCC_EOS
16395                                           ! 1973  Bit16u crtc_addr;
16396                                           !BCC_EOS
16397                                           ! 1974  if (vbe_has_vbe_display()) {
16398 3B69           83C4                   EB  add	sp,*-$15
16399                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16400 3B6C           E8         5C87            call	_vbe_has_vbe_display
16401 3B6F           85C0                       test	ax,ax
16402 3B71           74           08            je  	.55
16403                       00003B73            .56:
16404                                           ! 1975    dispi_set_enable(0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3B73           31C0                       xor	ax,ax
16407 3B75           50                         push	ax
16408                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16409 3B76           E8         5A4A            call	_dispi_set_enable
16410 3B79           44                         inc	sp
16411 3B7A           44                         inc	sp
16412                                           !BCC_EOS
16413                                           ! 1976   }
16414                                           ! 1977  mode=mode&0x7f;
16415                       00003B7B            .55:
16416                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16417 3B7B           8A46         04            mov	al,4[bp]
16418 3B7E           24                     7F  and	al,*$7F
16419                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16420 3B80           8846         04            mov	4[bp],al
16421                                           !BCC_EOS
16422                                           ! 1978  line=find_vga_entry(mode);
16423                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16424 3B83           8A46         04            mov	al,4[bp]
16425 3B86           30E4                       xor	ah,ah
16426 3B88           50                         push	ax
16427                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16428 3B89           E8         3F36            call	_find_vga_entry
16429 3B8C           44                         inc	sp
16430 3B8D           44                         inc	sp
16431                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16432 3B8E           8846         FE            mov	-2[bp],al
16433                                           !BCC_EOS
16434                                           ! 1979  if(line==0xFF)
16435                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16436 3B91           8A46         FE            mov	al,-2[bp]
16437 3B94           3C                     FF  cmp	al,#$FF
16438 3B96           75           04            jne 	.57
16439                       00003B98            .58:
16440                                           ! 1980   return;
16441 3B98           89EC                       mov	sp,bp
16442 3B9A           5D                         pop	bp
16443 3B9B           C3                         ret
16444                                           !BCC_EOS
16445                                           ! 1981  vpti=line_to_vpti[line];
16446                       00003B9C            .57:
16447                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16448 3B9C           8A46         FE            mov	al,-2[bp]
16449 3B9F           30E4                       xor	ah,ah
16450 3BA1           89C3                       mov	bx,ax
16451                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16452 3BA3           8A87       0278            mov	al,_line_to_vpti[bx]
16453 3BA7           8846         F9            mov	-7[bp],al
16454                                           !BCC_EOS
16455                                           ! 1982  twidth=video_param_table[vpti].twidth;
16456                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16457 3BAA           8A46         F9            mov	al,-7[bp]
16458 3BAD           30E4                       xor	ah,ah
16459 3BAF           B1                     06  mov	cl,*6
16460 3BB1           D3E0                       shl	ax,cl
16461 3BB3           89C3                       mov	bx,ax
16462                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16463 3BB5           8A87       028C            mov	al,_video_param_table[bx]
16464 3BB9           30E4                       xor	ah,ah
16465 3BBB           8946         F4            mov	-$C[bp],ax
16466                                           !BCC_EOS
16467                                           ! 1983  theightm1=video_param_table[vpti].theightm1;
16468                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16469 3BBE           8A46         F9            mov	al,-7[bp]
16470 3BC1           30E4                       xor	ah,ah
16471 3BC3           B1                     06  mov	cl,*6
16472 3BC5           D3E0                       shl	ax,cl
16473 3BC7           89C3                       mov	bx,ax
16474 3BC9           81C3                 028C  add	bx,#_video_param_table
16475                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16476 3BCD           8A47         01            mov	al,1[bx]
16477 3BD0           30E4                       xor	ah,ah
16478 3BD2           8946         F2            mov	-$E[bp],ax
16479                                           !BCC_EOS
16480                                           ! 1984  cheight=video_param_table[vpti].cheight;
16481                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16482 3BD5           8A46         F9            mov	al,-7[bp]
16483 3BD8           30E4                       xor	ah,ah
16484 3BDA           B1                     06  mov	cl,*6
16485 3BDC           D3E0                       shl	ax,cl
16486 3BDE           89C3                       mov	bx,ax
16487 3BE0           81C3                 028C  add	bx,#_video_param_table
16488                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16489 3BE4           8A47         02            mov	al,2[bx]
16490 3BE7           30E4                       xor	ah,ah
16491 3BE9           8946         F0            mov	-$10[bp],ax
16492                                           !BCC_EOS
16493                                           ! 1985  video_ctl=read_byte(0x40,0x87);
16494                                           ! Debug: list int = const $87 (used reg = )
16495 3BEC           B8                   0087  mov	ax,#$87
16496 3BEF           50                         push	ax
16497                                           ! Debug: list int = const $40 (used reg = )
16498 3BF0           B8                   0040  mov	ax,*$40
16499 3BF3           50                         push	ax
16500                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16501 3BF4           E8         3FB7            call	_read_byte
16502 3BF7           83C4                   04  add	sp,*4
16503                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16504 3BFA           8846         EE            mov	-$12[bp],al
16505                                           !BCC_EOS
16506                                           ! 1986  vga_s
16507                                           ! 1986 witches=read_byte(0x40,0x88);
16508                                           ! Debug: list int = const $88 (used reg = )
16509 3BFD           B8                   0088  mov	ax,#$88
16510 3C00           50                         push	ax
16511                                           ! Debug: list int = const $40 (used reg = )
16512 3C01           B8                   0040  mov	ax,*$40
16513 3C04           50                         push	ax
16514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16515 3C05           E8         3FA6            call	_read_byte
16516 3C08           83C4                   04  add	sp,*4
16517                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16518 3C0B           8846         ED            mov	-$13[bp],al
16519                                           !BCC_EOS
16520                                           ! 1987  modeset_ctl=read_byte(0x40,0x89);
16521                                           ! Debug: list int = const $89 (used reg = )
16522 3C0E           B8                   0089  mov	ax,#$89
16523 3C11           50                         push	ax
16524                                           ! Debug: list int = const $40 (used reg = )
16525 3C12           B8                   0040  mov	ax,*$40
16526 3C15           50                         push	ax
16527                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16528 3C16           E8         3F95            call	_read_byte
16529 3C19           83C4                   04  add	sp,*4
16530                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16531 3C1C           8846         EF            mov	-$11[bp],al
16532                                           !BCC_EOS
16533                                           ! 1988  if((modeset_ctl&0x08)==0)
16534                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16535 3C1F           8A46         EF            mov	al,-$11[bp]
16536 3C22           24                     08  and	al,*8
16537                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16538 3C24           84C0                       test	al,al
16539 3C26         0F85         0145            bne 	.59
16540                       00003C2A            .5A:
16541                                           ! 1989   {
16542                                           ! 1990    outb(0x3c6,vga_modes[line].pelmask);
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C2A           8A46         FE            mov	al,-2[bp]
16545 3C2D           30E4                       xor	ah,ah
16546 3C2F           B1                     03  mov	cl,*3
16547 3C31           D3E0                       shl	ax,cl
16548 3C33           89C3                       mov	bx,ax
16549 3C35           81C3                 01F8  add	bx,#_vga_modes
16550                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16551 3C39           8A47         06            mov	al,6[bx]
16552 3C3C           30E4                       xor	ah,ah
16553 3C3E           50                         push	ax
16554                                           ! Debug: list int = const $3C6 (used reg = )
16555 3C3F           B8                   03C6  mov	ax,#$3C6
16556 3C42           50                         push	ax
16557                                           ! Debug: func () void = outb+0 (used reg = )
16558 3C43           E8         3FD4            call	_outb
16559 3C46           83C4                   04  add	sp,*4
16560                                           !BCC_EOS
16561                                           ! 1991    outb(0x3c8,0x00);
16562                                           ! Debug: list int = const 0 (used reg = )
16563 3C49           31C0                       xor	ax,ax
16564 3C4B           50                         push	ax
16565                                           ! Debug: list int = const $3C8 (used reg = )
16566 3C4C           B8                   03C8  mov	ax,#$3C8
16567 3C4F           50                         push	ax
16568                                           ! Debug: func () void = outb+0 (used reg = )
16569 3C50           E8         3FC7            call	_outb
16570 3C53           83C4                   04  add	sp,*4
16571                                           !BCC_EOS
16572                                           ! 1992    switch(vga_modes[line].dacmodel)
16573                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16574 3C56           8A46         FE            mov	al,-2[bp]
16575 3C59           30E4                       xor	ah,ah
16576 3C5B           B1                     03  mov	cl,*3
16577 3C5D           D3E0                       shl	ax,cl
16578 3C5F           89C3                       mov	bx,ax
16579 3C61           81C3                 01F8  add	bx,#_vga_modes
16580 3C65           8A47         07            mov	al,7[bx]
16581                                           ! 1993     {case 0:
16582 3C68           EB           22            jmp .5D
16583                                           ! 1994       palette=&palette0;
16584                       00003C6A            .5E:
16585                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3C6A           BB                   0A0C  mov	bx,#_palette0
16587 3C6D           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1995       break;
16590 3C70           EB           2A            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1996      case 1:
16593                                           ! 1997       palette=&palette1;
16594                       00003C72            .5F:
16595                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16596 3C72           BB                   0ACC  mov	bx,#_palette1
16597 3C75           895E         FA            mov	-6[bp],bx
16598                                           !BCC_EOS
16599                                           ! 1998       break;
16600 3C78           EB           22            jmp .5B
16601                                           !BCC_EOS
16602                                           ! 1999      case 2:
16603                                           ! 2000       palette=&palette2;
16604                       00003C7A            .60:
16605                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16606 3C7A           BB                   0B8C  mov	bx,#_palette2
16607 3C7D           895E         FA            mov	-6[bp],bx
16608                                           !BCC_EOS
16609                                           ! 2001       break;
16610 3C80           EB           1A            jmp .5B
16611                                           !BCC_EOS
16612                                           ! 2002      case 3:
16613                                           ! 2003       palette=&palette3;
16614                       00003C82            .61:
16615                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16616 3C82           BB                   0C4C  mov	bx,#_palette3
16617 3C85           895E         FA            mov	-6[bp],bx
16618                                           !BCC_EOS
16619                                           ! 2004       break;
16620 3C88           EB           12            jmp .5B
16621                                           !BCC_EOS
16622                                           ! 2005     }
16623                                           ! 2006    for(i=0;i<0x0100;i++)
16624 3C8A           EB           10            jmp .5B
16625                       00003C8C            .5D:
16626 3C8C           2C                     00  sub	al,*0
16627 3C8E           74           DA            je 	.5E
16628 3C90           2C                     01  sub	al,*1
16629 3C92           74           DE            je 	.5F
16630 3C94           2C                     01  sub	al,*1
16631 3C96           74           E2            je 	.60
16632 3C98           2C                     01  sub	al,*1
16633 3C9A           74           E6            je 	.61
16634                       00003C9C            .5B:
16635                       FFFFFFE8            ..FFFE	=	-$18
16636                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16637 3C9C           31C0                       xor	ax,ax
16638 3C9E           8946         F6            mov	-$A[bp],ax
16639                                           !BCC_EOS
16640                                           !BCC_EOS
16641                                           ! 2007     {if(i<=dac_regs[vga_modes[line].dacmodel])
16642 3CA1           E9         00AB            br 	.64
16643                       00003CA4            .65:
16644                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16645 3CA4           8A46         FE            mov	al,-2[bp]
16646 3CA7           30E4                       xor	ah,ah
16647 3CA9           B1                     03  mov	cl,*3
16648 3CAB           D3E0                       shl	ax,cl
16649 3CAD           89C3                       mov	bx,ax
16650 3CAF           81C3                 01F8  add	bx,#_vga_modes
16651                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16652 3CB3           8A47         07            mov	al,7[bx]
16653 3CB6           30E4                       xor	ah,ah
16654 3CB8           89C3                       mov	bx,ax
16655                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16656 3CBA           8A87       0288            mov	al,_dac_regs[bx]
16657 3CBE           30E4                       xor	ah,ah
16658 3CC0           3B46         F6            cmp	ax,-$A[bp]
16659 3CC3           72           5C            jb  	.66
16660                       00003CC5            .67:
16661                                           ! 2008       {outb(0x3c9,palette[(i*3)+0]);
16662                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16663 3CC5           8B46         F6            mov	ax,-$A[bp]
16664 3CC8           89C2                       mov	dx,ax
16665 3CCA           D1E0                       shl	ax,*1
16666 3CCC           01D0                       add	ax,dx
16667                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16668                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16669 3CCE           0346         FA            add	ax,-6[bp]
16670 3CD1           89C3                       mov	bx,ax
16671                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16672 3CD3           8A07                       mov	al,[bx]
16673 3CD5           30E4                       xor	ah,ah
16674 3CD7           50                         push	ax
16675                                           ! Debug: list int = const $3C9 (used reg = )
16676 3CD8           B8                   03C9  mov	ax,#$3C9
16677 3CDB           50                         push	ax
16678                                           ! Debug: func () void = outb+0 (used reg = )
16679 3CDC           E8         3F3B            call	_outb
16680 3CDF           83C4                   04  add	sp,*4
16681                                           !BCC_EOS
16682                                           ! 2009        outb(0x3c9,palette[(i*3)+1]);
16683                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16684 3CE2           8B46         F6            mov	ax,-$A[bp]
16685 3CE5           89C2                       mov	dx,ax
16686 3CE7           D1E0                       shl	ax,*1
16687 3CE9           01D0                       add	ax,dx
16688                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16689                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16690 3CEB           40                         inc	ax
16691 3CEC           0346         FA            add	ax,-6[bp]
16692 3CEF           89C3                       mov	bx,ax
16693                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16694 3CF1           8A07                       mov	al,[bx]
16695 3CF3           30E4                       xor	ah,ah
16696 3CF5           50                         push	ax
16697                                           ! Debug: list int = const $3C9 (used reg = )
16698 3CF6           B8                   03C9  mov	ax,#$3C9
16699 3CF9           50                         push	ax
16700                                           ! Debug: func () void = outb+0 (used reg = )
16701 3CFA           E8         3F1D            call	_outb
16702 3CFD           83C4                   04  add	sp,*4
16703                                           !BCC_EOS
16704                                           ! 2010        outb(0x3c9,palette[(i*3)+2]);
16705                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16706 3D00           8B46         F6            mov	ax,-$A[bp]
16707 3D03           89C2                       mov	dx,ax
16708 3D05           D1E0                       shl	ax,*1
16709 3D07           01D0                       add	ax,dx
16710                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16711                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D09           40                         inc	ax
16713 3D0A           40                         inc	ax
16714 3D0B           0346         FA            add	ax,-6[bp]
16715 3D0E           89C3                       mov	bx,ax
16716                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16717 3D10           8A07                       mov	al,[bx]
16718 3D12           30E4                       xor	ah,ah
16719 3D14           50                         push	ax
16720                                           ! Debug: list int = const $3C9 (used reg = )
16721 3D15           B8                   03C9  mov	ax,#$3C9
16722 3D18           50                         push	ax
16723                                           ! Debug: func () void = outb+0 (used reg = )
16724 3D19           E8         3EFE            call	_outb
16725 3D1C           83C4                   04  add	sp,*4
16726                                           !BCC_EOS
16727                                           ! 2011       }
16728                                           ! 2012      else
16729                                           ! 2013       {outb(0x3c9,0);
16730 3D1F           EB           27            jmp .68
16731                       00003D21            .66:
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3D21           31C0                       xor	ax,ax
16734 3D23           50                         push	ax
16735                                           ! Debug: list int = const $3C9 (used reg = )
16736 3D24           B8                   03C9  mov	ax,#$3C9
16737 3D27           50                         push	ax
16738                                           ! Debug: func () void = outb+0 (used reg = )
16739 3D28           E8         3EEF            call	_outb
16740 3D2B           83C4                   04  add	sp,*4
16741                                           !BCC_EOS
16742                                           ! 2014        outb(0x3c9,0);
16743                                           ! Debug: list int = const 0 (used reg = )
16744 3D2E           31C0                       xor	ax,ax
16745 3D30           50                         push	ax
16746                                           ! Debug: list int = const $3C9 (used reg = )
16747 3D31           B8                   03C9  mov	ax,#$3C9
16748 3D34           50                         push	ax
16749                                           ! Debug: func () void = outb+0 (used reg = )
16750 3D35           E8         3EE2            call	_outb
16751 3D38           83C4                   04  add	sp,*4
16752                                           !BCC_EOS
16753                                           ! 2015        outb(0x3c9,0);
16754                                           ! Debug: list int = const 0 (used reg = )
16755 3D3B           31C0                       xor	ax,ax
16756 3D3D           50                         push	ax
16757                                           ! Debug: list int = const $3C9 (used reg = )
16758 3D3E           B8                   03C9  mov	ax,#$3C9
16759 3D41           50                         push	ax
16760                                           ! Debug: func () void = outb+0 (used reg = )
16761 3D42           E8         3ED5            call	_outb
16762 3D45           83C4                   04  add	sp,*4
16763                                           !BCC_EOS
16764                                           ! 2016       }
16765                                           ! 2017     }
16766                       00003D48            .68:
16767                                           ! 2018    if((modeset_ctl&0x02)==0x02)
16768                       00003D48            .63:
16769                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16770 3D48           8B46         F6            mov	ax,-$A[bp]
16771 3D4B           40                         inc	ax
16772 3D4C           8946         F6            mov	-$A[bp],ax
16773                       00003D4F            .64:
16774                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16775 3D4F           8B46         F6            mov	ax,-$A[bp]
16776 3D52           3D                   0100  cmp	ax,#$100
16777 3D55         0F82         FF4B            blo 	.65
16778                       00003D59            .69:
16779                       00003D59            .62:
16780                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D59           8A46         EF            mov	al,-$11[bp]
16782 3D5C           24                     02  and	al,*2
16783                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16784 3D5E           3C                     02  cmp	al,*2
16785 3D60           75           0D            jne 	.6A
16786                       00003D62            .6B:
16787                                           ! 2019     {
16788                                           ! 2020      biosfn_perform_gray_scale_summing(0x00, 0x100);
16789                                           ! Debug: list int = const $100 (used reg = )
16790 3D62           B8                   0100  mov	ax,#$100
16791 3D65           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3D66           31C0                       xor	ax,ax
16794 3D68           50                         push	ax
16795                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16796 3D69           E8         273B            call	_biosfn_perform_gray_scale_summing
16797 3D6C           83C4                   04  add	sp,*4
16798                                           !BCC_EOS
16799                                           ! 2021     }
16800                                           ! 2022   }
16801                       00003D6F            .6A:
16802                                           ! 2023  inb(0x3da);
16803                       00003D6F            .59:
16804                                           ! Debug: list int = const $3DA (used reg = )
16805 3D6F           B8                   03DA  mov	ax,#$3DA
16806 3D72           50                         push	ax
16807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16808 3D73           E8         3E8E            call	_inb
16809 3D76           44                         inc	sp
16810 3D77           44                         inc	sp
16811                                           !BCC_EOS
16812                                           ! 2024  for(i=0;i<=0x13;i++)
16813                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16814 3D78           31C0                       xor	ax,ax
16815 3D7A           8946         F6            mov	-$A[bp],ax
16816                                           !BCC_EOS
16817                                           !BCC_EOS
16818                                           ! 2025   {outb(0x3c0,i);
16819 3D7D           EB           38            jmp .6E
16820                       00003D7F            .6F:
16821                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16822 3D7F           FF76         F6            push	-$A[bp]
16823                                           ! Debug: list int = const $3C0 (used reg = )
16824 3D82           B8                   03C0  mov	ax,#$3C0
16825 3D85           50                         push	ax
16826                                           ! Debug: func () void = outb+0 (used reg = )
16827 3D86           E8         3E91            call	_outb
16828 3D89           83C4                   04  add	sp,*4
16829                                           !BCC_EOS
16830                                           ! 2026    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16831                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16832 3D8C           8A46         F9            mov	al,-7[bp]
16833 3D8F           30E4                       xor	ah,ah
16834 3D91           B1                     06  mov	cl,*6
16835 3D93           D3E0                       shl	ax,cl
16836 3D95           89C3                       mov	bx,ax
16837 3D97           81C3                 028C  add	bx,#_video_param_table
16838                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16839 3D9B           8B46         F6            mov	ax,-$A[bp]
16840 3D9E           01C3                       add	bx,ax
16841                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16842 3DA0           8A47         23            mov	al,$23[bx]
16843 3DA3           30E4                       xor	ah,ah
16844 3DA5           50                         push	ax
16845                                           ! Debug: list int = const $3C0 (used reg = )
16846 3DA6           B8                   03C0  mov	ax,#$3C0
16847 3DA9           50                         push	ax
16848                                           ! Debug: func () void = outb+0 (used reg = )
16849 3DAA           E8         3E6D            call	_outb
16850 3DAD           83C4                   04  add	sp,*4
16851                                           !BCC_EOS
16852                                           ! 2027   }
16853                                           ! 2028  outb(0x3c0,0x14);
16854                       00003DB0            .6D:
16855                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16856 3DB0           8B46         F6            mov	ax,-$A[bp]
16857 3DB3           40                         inc	ax
16858 3DB4           8946         F6            mov	-$A[bp],ax
16859                       00003DB7            .6E:
16860                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16861 3DB7           8B46         F6            mov	ax,-$A[bp]
16862 3DBA           3D                   0013  cmp	ax,*$13
16863 3DBD           76           C0            jbe	.6F
16864                       00003DBF            .70:
16865                       00003DBF            .6C:
16866                                           ! Debug: list int = const $14 (used reg = )
16867 3DBF           B8                   0014  mov	ax,*$14
16868 3DC2           50                         push	ax
16869                                           ! Debug: list int = const $3C0 (used reg = )
16870 3DC3           B8                   03C0  mov	ax,#$3C0
16871 3DC6           50                         push	ax
16872                                           ! Debug: func () void = outb+0 (used reg = )
16873 3DC7           E8         3E50            call	_outb
16874 3DCA           83C4                   04  add	sp,*4
16875                                           !BCC_EOS
16876                                           ! 2029  outb(0x3c0,0x00);
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3DCD           31C0                       xor	ax,ax
16879 3DCF           50                         push	ax
16880                                           ! Debug: list int = const $3C0 (used reg = )
16881 3DD0           B8                   03C0  mov	ax,#$3C0
16882 3DD3           50                         push	ax
16883                                           ! Debug: func () void = outb+0 (used reg = )
16884 3DD4           E8         3E43            call	_outb
16885 3DD7           83C4                   04  add	sp,*4
16886                                           !BCC_EOS
16887                                           ! 2030  outb(0x3c4,0);
16888                                           ! Debug: list int = const 0 (used reg = )
16889 3DDA           31C0                       xor	ax,ax
16890 3DDC           50                         push	ax
16891                                           ! Debug: list int = const $3C4 (used reg = )
16892 3DDD           B8                   03C4  mov	ax,#$3C4
16893 3DE0           50                         push	ax
16894                                           ! Debug: func () void = outb+0 (used reg = )
16895 3DE1           E8         3E36            call	_outb
16896 3DE4           83C4                   04  add	sp,*4
16897                                           !BCC_EOS
16898                                           ! 2031  outb(0x3c5,0x03);
16899                                           ! Debug: list int = const 3 (used reg = )
16900 3DE7           B8                   0003  mov	ax,*3
16901 3DEA           50                         push	ax
16902                                           ! Debug: list int = const $3C5 (used reg = )
16903 3DEB           B8                   03C5  mov	ax,#$3C5
16904 3DEE           50                         push	ax
16905                                           ! Debug: func () void = outb+0 (used reg = )
16906 3DEF           E8         3E28            call	_outb
16907 3DF2           83C4                   04  add	sp,*4
16908                                           !BCC_EOS
16909                                           ! 2032  for(i=1;i<=4;i++)
16910                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16911 3DF5           B8                   0001  mov	ax,*1
16912 3DF8           8946         F6            mov	-$A[bp],ax
16913                                           !BCC_EOS
16914                                           !BCC_EOS
16915                                           ! 2033   {outb(0x3c4,i);
16916 3DFB           EB           3F            jmp .73
16917                       00003DFD            .74:
16918                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16919 3DFD           FF76         F6            push	-$A[bp]
16920                                           ! Debug: list int = const $3C4 (used reg = )
16921 3E00           B8                   03C4  mov	ax,#$3C4
16922 3E03           50                         push	ax
16923                                           ! Debug: func () void = outb+0 (used reg = )
16924 3E04           E8         3E13            call	_outb
16925 3E07           83C4                   04  add	sp,*4
16926                                           !BCC_EOS
16927                                           ! 2034    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16928                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16929 3E0A           8B46         F6            mov	ax,-$A[bp]
16930 3E0D           48                         dec	ax
16931 3E0E           50                         push	ax
16932                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16933 3E0F           8A46         F9            mov	al,-7[bp]
16934 3E12           30E4                       xor	ah,ah
16935 3E14           B1                     06  mov	cl,*6
16936 3E16           D3E0                       shl	ax,cl
16937 3E18           89C3                       mov	bx,ax
16938 3E1A           81C3                 028C  add	bx,#_video_param_table
16939                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16940 3E1E           8B46         E8            mov	ax,-$18[bp]
16941 3E21           01C3                       add	bx,ax
16942 3E23           44                         inc	sp
16943 3E24           44                         inc	sp
16944                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16945 3E25           8A47         05            mov	al,5[bx]
16946 3E28           30E4                       xor	ah,ah
16947 3E2A           50                         push	ax
16948                                           ! Debug: list int = const $3C5 (used reg = )
16949 3E2B           B8                   03C5  mov	ax,#$3C5
16950 3E2E           50                         push	ax
16951                                           ! Debug: func () void = outb+0 (used reg = )
16952 3E2F           E8         3DE8            call	_outb
16953 3E32           83C4                   04  add	sp,*4
16954                                           !BCC_EOS
16955                                           ! 2035   }
16956                                           ! 2036  for(i=0;i<=8;i++)
16957                       00003E35            .72:
16958                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16959 3E35           8B46         F6            mov	ax,-$A[bp]
16960 3E38           40                         inc	ax
16961 3E39           8946         F6            mov	-$A[bp],ax
16962                       00003E3C            .73:
16963                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16964 3E3C           8B46         F6            mov	ax,-$A[bp]
16965 3E3F           3D                   0004  cmp	ax,*4
16966 3E42           76           B9            jbe	.74
16967                       00003E44            .75:
16968                       00003E44            .71:
16969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16970 3E44           31C0                       xor	ax,ax
16971 3E46           8946         F6            mov	-$A[bp],ax
16972                                           !BCC_EOS
16973                                           !BCC_EOS
16974                                           ! 2037   {outb(0x3ce,i);
16975 3E49           EB           38            jmp .78
16976                       00003E4B            .79:
16977                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16978 3E4B           FF76         F6            push	-$A[bp]
16979                                           ! Debug: list int = const $3CE (used reg = )
16980 3E4E           B8                   03CE  mov	ax,#$3CE
16981 3E51           50                         push	ax
16982                                           ! Debug: func () void = outb+0 (used reg = )
16983 3E52           E8         3DC5            call	_outb
16984 3E55           83C4                   04  add	sp,*4
16985                                           !BCC_EOS
16986                                           ! 2038    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16987                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16988 3E58           8A46         F9            mov	al,-7[bp]
16989 3E5B           30E4                       xor	ah,ah
16990 3E5D           B1                     06  mov	cl,*6
16991 3E5F           D3E0                       shl	ax,cl
16992 3E61           89C3                       mov	bx,ax
16993 3E63           81C3                 028C  add	bx,#_video_param_table
16994                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16995 3E67           8B46         F6            mov	ax,-$A[bp]
16996 3E6A           01C3                       add	bx,ax
16997                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16998 3E6C           8A47         37            mov	al,$37[bx]
16999 3E6F           30E4                       xor	ah,ah
17000 3E71           50                         push	ax
17001                                           ! Debug: list int = const $3CF (used reg = )
17002 3E72           B8                   03CF  mov	ax,#$3CF
17003 3E75           50                         push	ax
17004                                           ! Debug: func () void = outb+0 (used reg = )
17005 3E76           E8         3DA1            call	_outb
17006 3E79           83C4                   04  add	sp,*4
17007                                           !BCC_EOS
17008                                           ! 2039   }
17009                                           ! 2040  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17010                       00003E7C            .77:
17011                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17012 3E7C           8B46         F6            mov	ax,-$A[bp]
17013 3E7F           40                         inc	ax
17014 3E80           8946         F6            mov	-$A[bp],ax
17015                       00003E83            .78:
17016                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17017 3E83           8B46         F6            mov	ax,-$A[bp]
17018 3E86           3D                   0008  cmp	ax,*8
17019 3E89           76           C0            jbe	.79
17020                       00003E8B            .7A:
17021                       00003E8B            .76:
17022                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17023 3E8B           8A46         FE            mov	al,-2[bp]
17024 3E8E           30E4                       xor	ah,ah
17025 3E90           B1                     03  mov	cl,*3
17026 3E92           D3E0                       shl	ax,cl
17027 3E94           89C3                       mov	bx,ax
17028 3E96           81C3                 01F8  add	bx,#_vga_modes
17029                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17030 3E9A           8A47         02            mov	al,2[bx]
17031 3E9D           3C                     01  cmp	al,*1
17032 3E9F           75           05            jne 	.7B
17033                       00003EA1            .7C:
17034 3EA1           B8                   03B4  mov	ax,#$3B4
17035 3EA4           EB           03            jmp .7D
17036                       00003EA6            .7B:
17037 3EA6           B8                   03D4  mov	ax,#$3D4
17038                       00003EA9            .7D:
17039                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17040 3EA9           8946         EA            mov	-$16[bp],ax
17041                                           !BCC_EOS
17042                                           ! 2041  outw(crtc_addr,0x0011);
17043                                           ! Debug: list int = const $11 (used reg = )
17044 3EAC           B8                   0011  mov	ax,*$11
17045 3EAF           50                         push	ax
17046                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17047 3EB0           FF76         EA            push	-$16[bp]
17048                                           ! Debug: func () void = outw+0 (used reg = )
17049 3EB3           E8         3D74            call	_outw
17050 3EB6           83C4                   04  add	sp,*4
17051                                           !BCC_EOS
17052                                           ! 2042  for(i=0;i<=0x18;i++)
17053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17054 3EB9           31C0                       xor	ax,ax
17055 3EBB           8946         F6            mov	-$A[bp],ax
17056                                           !BCC_EOS
17057                                           !BCC_EOS
17058                                           ! 2043   {outb(crtc_addr,i);
17059 3EBE           EB           38            jmp .80
17060                       00003EC0            .81:
17061                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17062 3EC0           FF76         F6            push	-$A[bp]
17063                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17064 3EC3           FF76         EA            push	-$16[bp]
17065                                           ! Debug: func () void = outb+0 (used reg = )
17066 3EC6           E8         3D51            call	_outb
17067 3EC9           83C4                   04  add	sp,*4
17068                                           !BCC_EOS
17069                                           ! 2044    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17070                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17071 3ECC           8A46         F9            mov	al,-7[bp]
17072 3ECF           30E4                       xor	ah,ah
17073 3ED1           B1                     06  mov	cl,*6
17074 3ED3           D3E0                       shl	ax,cl
17075 3ED5           89C3                       mov	bx,ax
17076 3ED7           81C3                 028C  add	bx,#_video_param_table
17077                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17078 3EDB           8B46         F6            mov	ax,-$A[bp]
17079 3EDE           01C3                       add	bx,ax
17080                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17081 3EE0           8A47         0A            mov	al,$A[bx]
17082 3EE3           30E4                       xor	ah,ah
17083 3EE5           50                         push	ax
17084                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17085 3EE6           8B46         EA            mov	ax,-$16[bp]
17086                                           ! Debug: list unsigned int = ax+1 (used reg = )
17087 3EE9           40                         inc	ax
17088 3EEA           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3EEB           E8         3D2C            call	_outb
17091 3EEE           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2045   }
17094                                           ! 2046  outb(0x3c2,video_param_table[vpti].miscreg);
17095                       00003EF1            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3EF1           8B46         F6            mov	ax,-$A[bp]
17098 3EF4           40                         inc	ax
17099 3EF5           8946         F6            mov	-$A[bp],ax
17100                       00003EF8            .80:
17101                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17102 3EF8           8B46         F6            mov	ax,-$A[bp]
17103 3EFB           3D                   0018  cmp	ax,*$18
17104 3EFE           76           C0            jbe	.81
17105                       00003F00            .82:
17106                       00003F00            .7E:
17107                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17108 3F00           8A46         F9            mov	al,-7[bp]
17109 3F03           30E4                       xor	ah,ah
17110 3F05           B1                     06  mov	cl,*6
17111 3F07           D3E0                       shl	ax,cl
17112 3F09           89C3                       mov	bx,ax
17113 3F0B           81C3                 028C  add	bx,#_video_param_table
17114                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17115 3F0F           8A47         09            mov	al,9[bx]
17116 3F12           30E4                       xor	ah,ah
17117 3F14           50                         push	ax
17118                                           ! Debug: list int = const $3C2 (used reg = )
17119 3F15           B8                   03C2  mov	ax,#$3C2
17120 3F18           50                         push	ax
17121                                           ! Debug: func () void = outb+0 (used reg = )
17122 3F19           E8         3CFE            call	_outb
17123 3F1C           83C4                   04  add	sp,*4
17124                                           !BCC_EOS
17125                                           ! 2047  outb(0x3c0,0x20);
17126                                           ! Debug: list int = const $20 (used reg = )
17127 3F1F           B8                   0020  mov	ax,*$20
17128 3F22           50                         push	ax
17129                                           ! Debug: list int = const $3C0 (used reg = )
17130 3F23           B8                   03C0  mov	ax,#$3C0
17131 3F26           50                         push	ax
17132                                           ! Debug: func () void = outb+0 (used reg = )
17133 3F27           E8         3CF0            call	_outb
17134 3F2A           83C4                   04  add	sp,*4
17135                                           !BCC_EOS
17136                                           ! 2048  inb(0x3da);
17137                                           ! Debug: list int = const $3DA (used reg = )
17138 3F2D           B8                   03DA  mov	ax,#$3DA
17139 3F30           50                         push	ax
17140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17141 3F31           E8         3CD0            call	_inb
17142 3F34           44                         inc	sp
17143 3F35           44                         inc	sp
17144                                           !BCC_EOS
17145                                           ! 2049  if(noclearmem==0x00)
17146                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17147 3F36           8A46         FF            mov	al,-1[bp]
17148 3F39           84C0                       test	al,al
17149 3F3B         0F85         00C1            bne 	.83
17150                       00003F3F            .84:
17151                                           ! 2050   {
17152                                           ! 2051    if(vga_modes[line].class==0x00)
17153                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17154 3F3F           8A46         FE            mov	al,-2[bp]
17155 3F42           30E4                       xor	ah,ah
17156 3F44           B1                     03  mov	cl,*3
17157 3F46           D3E0                       shl	ax,cl
17158 3F48           89C3                       mov	bx,ax
17159 3F4A           81C3                 01F8  add	bx,#_vga_modes
17160                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17161 3F4E           8A47         01            mov	al,1[bx]
17162 3F51           84C0                       test	al,al
17163 3F53           75           26            jne 	.85
17164                       00003F55            .86:
17165                                           ! 2052     {
17166                                           ! 2053      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17167                                           ! Debug: list int = const $4000 (used reg = )
17168 3F55           B8                   4000  mov	ax,#$4000
17169 3F58           50                         push	ax
17170                                           ! Debug: list int = const $720 (used reg = )
17171 3F59           B8                   0720  mov	ax,#$720
17172 3F5C           50                         push	ax
17173                                           ! Debug: list int = const 0 (used reg = )
17174 3F5D           31C0                       xor	ax,ax
17175 3F5F           50                         push	ax
17176                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17177 3F60           8A46         FE            mov	al,-2[bp]
17178 3F63           30E4                       xor	ah,ah
17179 3F65           B1                     03  mov	cl,*3
17180 3F67           D3E0                       shl	ax,cl
17181 3F69           89C3                       mov	bx,ax
17182 3F6B           81C3                 01F8  add	bx,#_vga_modes
17183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17184 3F6F           FF77         04            push	4[bx]
17185                                           ! Debug: func () void = memsetw+0 (used reg = )
17186 3F72           E8         3BB4            call	_memsetw
17187 3F75           83C4                   08  add	sp,*8
17188                                           !BCC_EOS
17189                                           ! 2054     }
17190                                           ! 2055    else
17191                                           ! 2056     {
17192 3F78           E9         0085            br 	.87
17193                       00003F7B            .85:
17194                                           ! 2057      if(mode<0x0d)
17195                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17196 3F7B           8A46         04            mov	al,4[bp]
17197 3F7E           3C                     0D  cmp	al,*$D
17198 3F80           73           24            jae 	.88
17199                       00003F82            .89:
17200                                           ! 2058       {
17201                                           ! 2059        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17202                                           ! Debug: list int = const $4000 (used reg = )
17203 3F82           B8                   4000  mov	ax,#$4000
17204 3F85           50                         push	ax
17205                                           ! Debug: list int = const 0 (used reg = )
17206 3F86           31C0                       xor	ax,ax
17207 3F88           50                         push	ax
17208                                           ! Debug: list int = const 0 (used reg = )
17209 3F89           31C0                       xor	ax,ax
17210 3F8B           50                         push	ax
17211                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17212 3F8C           8A46         FE            mov	al,-2[bp]
17213 3F8F           30E4                       xor	ah,ah
17214 3F91           B1                     03  mov	cl,*3
17215 3F93           D3E0                       shl	ax,cl
17216 3F95           89C3                       mov	bx,ax
17217 3F97           81C3                 01F8  add	bx,#_vga_modes
17218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17219 3F9B           FF77         04            push	4[bx]
17220                                           ! Debug: func () void = memsetw+0 (used reg = )
17221 3F9E           E8         3B88            call	_memsetw
17222 3FA1           83C4                   08  add	sp,*8
17223                                           !BCC_EOS
17224                                           ! 2060       }
17225                                           ! 2061      else
17226                                           ! 2062       {
17227 3FA4           EB           5A            jmp .8A
17228                       00003FA6            .88:
17229                                           ! 2063        outb( 0x3c4, 0x02 );
17230                                           ! Debug: list int = const 2 (used reg = )
17231 3FA6           B8                   0002  mov	ax,*2
17232 3FA9           50                         push	ax
17233                                           ! Debug: list int = const $3C4 (used reg = )
17234 3FAA           B8                   03C4  mov	ax,#$3C4
17235 3FAD           50                         push	ax
17236                                           ! Debug: func () void = outb+0 (used reg = )
17237 3FAE           E8         3C69            call	_outb
17238 3FB1           83C4                   04  add	sp,*4
17239                                           !BCC_EOS
17240                                           ! 2064        mmask = inb( 0x3c5 );
17241                                           ! Debug: list int = const $3C5 (used reg = )
17242 3FB4           B8                   03C5  mov	ax,#$3C5
17243 3FB7           50                         push	ax
17244                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17245 3FB8           E8         3C49            call	_inb
17246 3FBB           44                         inc	sp
17247 3FBC           44                         inc	sp
17248                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17249 3FBD           8846         FD            mov	-3[bp],al
17250                                           !BCC_EOS
17251                                           ! 2065        outb( 0x3c5, 0x0f );
17252                                           ! Debug: list int = const $F (used reg = )
17253 3FC0           B8                   000F  mov	ax,*$F
17254 3FC3           50                         push	ax
17255                                           ! Debug: list int = const $3C5 (used reg = )
17256 3FC4           B8                   03C5  mov	ax,#$3C5
17257 3FC7           50                         push	ax
17258                                           ! Debug: func () void = outb+0 (used reg = )
17259 3FC8           E8         3C4F            call	_outb
17260 3FCB           83C4                   04  add	sp,*4
17261                                           !BCC_EOS
17262                                           ! 2066        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17263                                           ! Debug: list unsigned int = const $8000 (used reg = )
17264 3FCE           B8                   8000  mov	ax,#$8000
17265 3FD1           50                         push	ax
17266                                           ! Debug: list int = const 0 (used reg = )
17267 3FD2           31C0                       xor	ax,ax
17268 3FD4           50                         push	ax
17269                                           ! Debug: list int = const 0 (used reg = )
17270 3FD5           31C0                       xor	ax,ax
17271 3FD7           50                         push	ax
17272                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17273 3FD8           8A46         FE            mov	al,-2[bp]
17274 3FDB           30E4                       xor	ah,ah
17275 3FDD           B1                     03  mov	cl,*3
17276 3FDF           D3E0                       shl	ax,cl
17277 3FE1           89C3                       mov	bx,ax
17278 3FE3           81C3                 01F8  add	bx,#_vga_modes
17279                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17280 3FE7           FF77         04            push	4[bx]
17281                                           ! Debug: func () void = memsetw+0 (used reg = )
17282 3FEA           E8         3B3C            call	_memsetw
17283 3FED           83C4                   08  add	sp,*8
17284                                           !BCC_EOS
17285                                           ! 2067        outb( 0x3c5, mmask );
17286                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17287 3FF0           8A46         FD            mov	al,-3[bp]
17288 3FF3           30E4                       xor	ah,ah
17289 3FF5           50                         push	ax
17290                                           ! Debug: list int = const $3C5 (used reg = )
17291 3FF6           B8                   03C5  mov	ax,#$3C5
17292 3FF9           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 3FFA           E8         3C1D            call	_outb
17295 3FFD           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2068       }
17298                                           ! 2069     }
17299                       00004000            .8A:
17300                                           ! 2070   }
17301                       00004000            .87:
17302                                           ! 2071  write_byte(0x40,0x49,mode);
17303                       00004000            .83:
17304                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17305 4000           8A46         04            mov	al,4[bp]
17306 4003           30E4                       xor	ah,ah
17307 4005           50                         push	ax
17308                                           ! Debug: list int = const $49 (used reg = )
17309 4006           B8                   0049  mov	ax,*$49
17310 4009           50                         push	ax
17311                                           ! Debug: list int = const $40 (used reg = )
17312 400A           B8                   0040  mov	ax,*$40
17313 400D           50                         push	ax
17314                                           ! Debug: func () void = write_byte+0 (used reg = )
17315 400E           E8         3BC3            call	_write_byte
17316 4011           83C4                   06  add	sp,*6
17317                                           !BCC_EOS
17318                                           ! 2072  write_word(0x40,0x4A,twidth);
17319                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17320 4014           FF76         F4            push	-$C[bp]
17321                                           ! Debug: list int = const $4A (used reg = )
17322 4017           B8                   004A  mov	ax,*$4A
17323 401A           50                         push	ax
17324                                           ! Debug: list int = const $40 (used reg = )
17325 401B           B8                   0040  mov	ax,*$40
17326 401E           50                         push	ax
17327                                           ! Debug: func () void = write_word+0 (used reg = )
17328 401F           E8         3BCA            call	_write_word
17329 4022           83C4                   06  add	sp,*6
17330                                           !BCC_EOS
17331                                           ! 2073  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17332                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17333 4025           8A46         F9            mov	al,-7[bp]
17334 4028           30E4                       xor	ah,ah
17335 402A           B1                     06  mov	cl,*6
17336 402C           D3E0                       shl	ax,cl
17337 402E           89C3                       mov	bx,ax
17338 4030           81C3                 028C  add	bx,#_video_param_table
17339                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17340                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17341                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17342 4034           FF77         03            push	3[bx]
17343                                           ! Debug: list int = const $4C (used reg = )
17344 4037           B8                   004C  mov	ax,*$4C
17345 403A           50                         push	ax
17346                                           ! Debug: list int = const $40 (used reg = )
17347 403B           B8                   0040  mov	ax,*$40
17348 403E           50                         push	ax
17349                                           ! Debug: func () void = write_word+0 (used reg = )
17350 403F           E8         3BAA            call	_write_word
17351 4042           83C4                   06  add	sp,*6
17352                                           !BCC_EOS
17353                                           ! 2074  write_word(0x40,0x63,crtc_addr);
17354                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17355 4045           FF76         EA            push	-$16[bp]
17356                                           ! Debug: list int = const $63 (used reg = )
17357 4048           B8                   0063  mov	ax,*$63
17358 404B           50                         push	ax
17359                                           ! Debug: list int = const $40 (used reg = )
17360 404C           B8                   0040  mov	ax,*$40
17361 404F           50                         push	ax
17362                                           ! Debug: func () void = write_word+0 (used reg = )
17363 4050           E8         3B99            call	_write_word
17364 4053           83C4                   06  add	sp,*6
17365                                           !BCC_EOS
17366                                           ! 2075  write_byte(0x40,0x84
17367                                           ! 2075 ,theightm1);
17368                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17369 4056           FF76         F2            push	-$E[bp]
17370                                           ! Debug: list int = const $84 (used reg = )
17371 4059           B8                   0084  mov	ax,#$84
17372 405C           50                         push	ax
17373                                           ! Debug: list int = const $40 (used reg = )
17374 405D           B8                   0040  mov	ax,*$40
17375 4060           50                         push	ax
17376                                           ! Debug: func () void = write_byte+0 (used reg = )
17377 4061           E8         3B70            call	_write_byte
17378 4064           83C4                   06  add	sp,*6
17379                                           !BCC_EOS
17380                                           ! 2076  write_word(0x40,0x85,cheight);
17381                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17382 4067           FF76         F0            push	-$10[bp]
17383                                           ! Debug: list int = const $85 (used reg = )
17384 406A           B8                   0085  mov	ax,#$85
17385 406D           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 406E           B8                   0040  mov	ax,*$40
17388 4071           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 4072           E8         3B77            call	_write_word
17391 4075           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 2077  write_byte(0x40,0x87,(0x60|noclearmem));
17394                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17395                                           ! Debug: expression subtree swapping
17396 4078           8A46         FF            mov	al,-1[bp]
17397 407B           0C                     60  or	al,*$60
17398                                           ! Debug: list unsigned char = al+0 (used reg = )
17399 407D           30E4                       xor	ah,ah
17400 407F           50                         push	ax
17401                                           ! Debug: list int = const $87 (used reg = )
17402 4080           B8                   0087  mov	ax,#$87
17403 4083           50                         push	ax
17404                                           ! Debug: list int = const $40 (used reg = )
17405 4084           B8                   0040  mov	ax,*$40
17406 4087           50                         push	ax
17407                                           ! Debug: func () void = write_byte+0 (used reg = )
17408 4088           E8         3B49            call	_write_byte
17409 408B           83C4                   06  add	sp,*6
17410                                           !BCC_EOS
17411                                           ! 2078  write_byte(0x40,0x88,0xF9);
17412                                           ! Debug: list int = const $F9 (used reg = )
17413 408E           B8                   00F9  mov	ax,#$F9
17414 4091           50                         push	ax
17415                                           ! Debug: list int = const $88 (used reg = )
17416 4092           B8                   0088  mov	ax,#$88
17417 4095           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 4096           B8                   0040  mov	ax,*$40
17420 4099           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 409A           E8         3B37            call	_write_byte
17423 409D           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2079  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17426                                           ! Debug: list int = const $89 (used reg = )
17427 40A0           B8                   0089  mov	ax,#$89
17428 40A3           50                         push	ax
17429                                           ! Debug: list int = const $40 (used reg = )
17430 40A4           B8                   0040  mov	ax,*$40
17431 40A7           50                         push	ax
17432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17433 40A8           E8         3B03            call	_read_byte
17434 40AB           83C4                   04  add	sp,*4
17435                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17436 40AE           24                     7F  and	al,*$7F
17437                                           ! Debug: list unsigned char = al+0 (used reg = )
17438 40B0           30E4                       xor	ah,ah
17439 40B2           50                         push	ax
17440                                           ! Debug: list int = const $89 (used reg = )
17441 40B3           B8                   0089  mov	ax,#$89
17442 40B6           50                         push	ax
17443                                           ! Debug: list int = const $40 (used reg = )
17444 40B7           B8                   0040  mov	ax,*$40
17445 40BA           50                         push	ax
17446                                           ! Debug: func () void = write_byte+0 (used reg = )
17447 40BB           E8         3B16            call	_write_byte
17448 40BE           83C4                   06  add	sp,*6
17449                                           !BCC_EOS
17450                                           ! 2080  write_byte(0x40,0x8A,0x08);
17451                                           ! Debug: list int = const 8 (used reg = )
17452 40C1           B8                   0008  mov	ax,*8
17453 40C4           50                         push	ax
17454                                           ! Debug: list int = const $8A (used reg = )
17455 40C5           B8                   008A  mov	ax,#$8A
17456 40C8           50                         push	ax
17457                                           ! Debug: list int = const $40 (used reg = )
17458 40C9           B8                   0040  mov	ax,*$40
17459 40CC           50                         push	ax
17460                                           ! Debug: func () void = write_byte+0 (used reg = )
17461 40CD           E8         3B04            call	_write_byte
17462 40D0           83C4                   06  add	sp,*6
17463                                           !BCC_EOS
17464                                           ! 2081  write_word(0x40,0xA8, video_save_pointer_table);
17465                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17466 40D3           BB                   35C1  mov	bx,#_video_save_pointer_table
17467 40D6           53                         push	bx
17468                                           ! Debug: list int = const $A8 (used reg = )
17469 40D7           B8                   00A8  mov	ax,#$A8
17470 40DA           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 40DB           B8                   0040  mov	ax,*$40
17473 40DE           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 40DF           E8         3B0A            call	_write_word
17476 40E2           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2082  write_word(0x40,0xA8 +2, 0xc000);
17479                                           ! Debug: list unsigned int = const $C000 (used reg = )
17480 40E5           B8                   C000  mov	ax,#$C000
17481 40E8           50                         push	ax
17482                                           ! Debug: list int = const $AA (used reg = )
17483 40E9           B8                   00AA  mov	ax,#$AA
17484 40EC           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 40ED           B8                   0040  mov	ax,*$40
17487 40F0           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 40F1           E8         3AF8            call	_write_word
17490 40F4           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2083  write_byte(0x40,0x65,0x00);
17493                                           ! Debug: list int = const 0 (used reg = )
17494 40F7           31C0                       xor	ax,ax
17495 40F9           50                         push	ax
17496                                           ! Debug: list int = const $65 (used reg = )
17497 40FA           B8                   0065  mov	ax,*$65
17498 40FD           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 40FE           B8                   0040  mov	ax,*$40
17501 4101           50                         push	ax
17502                                           ! Debug: func () void = write_byte+0 (used reg = )
17503 4102           E8         3ACF            call	_write_byte
17504 4105           83C4                   06  add	sp,*6
17505                                           !BCC_EOS
17506                                           ! 2084  write_byte(0x40,0x66,0x00);
17507                                           ! Debug: list int = const 0 (used reg = )
17508 4108           31C0                       xor	ax,ax
17509 410A           50                         push	ax
17510                                           ! Debug: list int = const $66 (used reg = )
17511 410B           B8                   0066  mov	ax,*$66
17512 410E           50                         push	ax
17513                                           ! Debug: list int = const $40 (used reg = )
17514 410F           B8                   0040  mov	ax,*$40
17515 4112           50                         push	ax
17516                                           ! Debug: func () void = write_byte+0 (used reg = )
17517 4113           E8         3ABE            call	_write_byte
17518 4116           83C4                   06  add	sp,*6
17519                                           !BCC_EOS
17520                                           ! 2085  if(vga_modes[line].class==0x00)
17521                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17522 4119           8A46         FE            mov	al,-2[bp]
17523 411C           30E4                       xor	ah,ah
17524 411E           B1                     03  mov	cl,*3
17525 4120           D3E0                       shl	ax,cl
17526 4122           89C3                       mov	bx,ax
17527 4124           81C3                 01F8  add	bx,#_vga_modes
17528                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17529 4128           8A47         01            mov	al,1[bx]
17530 412B           84C0                       test	al,al
17531 412D           75           0E            jne 	.8B
17532                       0000412F            .8C:
17533                                           ! 2086   {
17534                                           ! 2087    biosfn_set_cursor_shape(0x06,0x07);
17535                                           ! Debug: list int = const 7 (used reg = )
17536 412F           B8                   0007  mov	ax,*7
17537 4132           50                         push	ax
17538                                           ! Debug: list int = const 6 (used reg = )
17539 4133           B8                   0006  mov	ax,*6
17540 4136           50                         push	ax
17541                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17542 4137           E8         00BB            call	_biosfn_set_cursor_shape
17543 413A           83C4                   04  add	sp,*4
17544                                           !BCC_EOS
17545                                           ! 2088   }
17546                                           ! 2089  for(i=0;i<8;i++)
17547                       0000413D            .8B:
17548                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17549 413D           31C0                       xor	ax,ax
17550 413F           8946         F6            mov	-$A[bp],ax
17551                                           !BCC_EOS
17552                                           !BCC_EOS
17553                                           ! 2090   biosfn_set_cursor_pos(i,0x0000);
17554 4142           EB           13            jmp .8F
17555                       00004144            .90:
17556                                           ! Debug: list int = const 0 (used reg = )
17557 4144           31C0                       xor	ax,ax
17558 4146           50                         push	ax
17559                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17560 4147           FF76         F6            push	-$A[bp]
17561                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17562 414A           E8         01C3            call	_biosfn_set_cursor_pos
17563 414D           83C4                   04  add	sp,*4
17564                                           !BCC_EOS
17565                                           ! 2091  biosfn_set_active_page(0x00);
17566                       00004150            .8E:
17567                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17568 4150           8B46         F6            mov	ax,-$A[bp]
17569 4153           40                         inc	ax
17570 4154           8946         F6            mov	-$A[bp],ax
17571                       00004157            .8F:
17572                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17573 4157           8B46         F6            mov	ax,-$A[bp]
17574 415A           3D                   0008  cmp	ax,*8
17575 415D           72           E5            jb 	.90
17576                       0000415F            .91:
17577                       0000415F            .8D:
17578                                           ! Debug: list int = const 0 (used reg = )
17579 415F           31C0                       xor	ax,ax
17580 4161           50                         push	ax
17581                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17582 4162           E8         0320            call	_biosfn_set_active_page
17583 4165           44                         inc	sp
17584 4166           44                         inc	sp
17585                                           !BCC_EOS
17586                                           ! 2092  if(vga_modes[line].class==0x00)
17587                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17588 4167           8A46         FE            mov	al,-2[bp]
17589 416A           30E4                       xor	ah,ah
17590 416C           B1                     03  mov	cl,*3
17591 416E           D3E0                       shl	ax,cl
17592 4170           89C3                       mov	bx,ax
17593 4172           81C3                 01F8  add	bx,#_vga_modes
17594                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17595 4176           8A47         01            mov	al,1[bx]
17596 4179           84C0                       test	al,al
17597 417B           75           0E            jne 	.92
17598                       0000417D            .93:
17599                                           ! 2093   {
17600                                           ! 2094 #asm
17601                                           !BCC_EOS
17602                                           !BCC_ASM
17603                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17604                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17605                       00000008            _biosfn_set_video_mode.theightm1	set	8
17606                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17607                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17608                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17609                       00000014            _biosfn_set_video_mode.line	set	$14
17610                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17611                       00000006            _biosfn_set_video_mode.cheight	set	6
17612                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17613                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17614                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17615                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17616                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17617                       0000000C            _biosfn_set_video_mode.i	set	$C
17618                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17619                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17620                       00000004            .biosfn_set_video_mode.mode	set	4
17621                       00000010            _biosfn_set_video_mode.palette	set	$10
17622                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17623                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17624                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17625                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17626                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17627                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17628                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17629                       00000013            _biosfn_set_video_mode.mmask	set	$13
17630                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17631                                             ;; copy and activate 8x16 font
17632 417D           B8                   1104    mov ax, #0x1104
17633 4180           B3                     00    mov bl, #0x00
17634 4182           CD                     10    int #0x10
17635 4184           B8                   1103    mov ax, #0x1103
17636 4187           B3                     00    mov bl, #0x00
17637 4189           CD                     10    int #0x10
17638                                           ! 2102 endasm
17639                                           !BCC_ENDASM
17640                                           !BCC_EOS
17641                                           ! 2103   }
17642                                           ! 2104 #asm
17643                       0000418B            .92:
17644                                           !BCC_EOS
17645                                           !BCC_ASM
17646                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17647                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17648                       00000008            _biosfn_set_video_mode.theightm1	set	8
17649                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17650                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17651                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17652                       00000014            _biosfn_set_video_mode.line	set	$14
17653                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17654                       00000006            _biosfn_set_video_mode.cheight	set	6
17655                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17656                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17657                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17658                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17659                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17660                       0000000C            _biosfn_set_video_mode.i	set	$C
17661                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17662                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17663                       00000004            .biosfn_set_video_mode.mode	set	4
17664                       00000010            _biosfn_set_video_mode.palette	set	$10
17665                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17666                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17667                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17668                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17669                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17670                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17671                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17672                       00000013            _biosfn_set_video_mode.mmask	set	$13
17673                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17674                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   418B           1E                           push ds
 +a   418C           31C0                         xor ax, ax
 +a   418E           8ED8                         mov ds, ax
 +a   4190           B8                   135C    mov ax,  #_vgafont8+128*8
 +a   4193           A3         007C              mov 0x1f*4, ax
 +a   4196           B8                   C000    mov ax,  #0xC000
 +a   4199           A3         007E              mov 0x1f*4+2, ax
 +a   419C           1F                           pop ds
17675                                           ! 2106 endasm
17676                                           !BCC_ENDASM
17677                                           !BCC_EOS
17678                                           ! 2107   switch(cheight)
17679 419D           8B46         F0            mov	ax,-$10[bp]
17680                                           ! 2108    {case 8:
17681 41A0           E9         003F            br 	.96
17682                                           ! 2109 #asm
17683                       000041A3            .97:
17684                                           !BCC_EOS
17685                                           !BCC_ASM
17686                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17687                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17688                       00000008            _biosfn_set_video_mode.theightm1	set	8
17689                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17690                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17691                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17692                       00000014            _biosfn_set_video_mode.line	set	$14
17693                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17694                       00000006            _biosfn_set_video_mode.cheight	set	6
17695                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17696                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17697                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17698                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17699                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17700                       0000000C            _biosfn_set_video_mode.i	set	$C
17701                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17702                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17703                       00000004            .biosfn_set_video_mode.mode	set	4
17704                       00000010            _biosfn_set_video_mode.palette	set	$10
17705                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17706                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17707                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17708                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17709                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17710                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17711                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17712                       00000013            _biosfn_set_video_mode.mmask	set	$13
17713                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17714                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41A3           1E                           push ds
 +a   41A4           31C0                         xor ax, ax
 +a   41A6           8ED8                         mov ds, ax
 +a   41A8           B8                   0F5C    mov ax,  #_vgafont8
 +a   41AB           A3         010C              mov 0x43*4, ax
 +a   41AE           B8                   C000    mov ax,  #0xC000
 +a   41B1           A3         010E              mov 0x43*4+2, ax
 +a   41B4           1F                           pop ds
17715                                           ! 2111 endasm
17716                                           !BCC_ENDASM
17717                                           !BCC_EOS
17718                                           ! 2112      break;
17719 41B5           E9         0039            br 	.94
17720                                           !BCC_EOS
17721                                           ! 2113     case 14:
17722                                           ! 2114 #asm
17723                       000041B8            .98:
17724                                           !BCC_EOS
17725                                           !BCC_ASM
17726                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17727                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17728                       00000008            _biosfn_set_video_mode.theightm1	set	8
17729                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17730                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17731                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17732                       00000014            _biosfn_set_video_mode.line	set	$14
17733                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17734                       00000006            _biosfn_set_video_mode.cheight	set	6
17735                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17736                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17737                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17738                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17739                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17740                       0000000C            _biosfn_set_video_mode.i	set	$C
17741                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17742                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17743                       00000004            .biosfn_set_video_mode.mode	set	4
17744                       00000010            _biosfn_set_video_mode.palette	set	$10
17745                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17746                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17747                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17748                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17749                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17750                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17751                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17752                       00000013            _biosfn_set_video_mode.mmask	set	$13
17753                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17754                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41B8           1E                           push ds
 +a   41B9           31C0                         xor ax, ax
 +a   41BB           8ED8                         mov ds, ax
 +a   41BD           B8                   175C    mov ax,  #_vgafont14
 +a   41C0           A3         010C              mov 0x43*4, ax
 +a   41C3           B8                   C000    mov ax,  #0xC000
 +a   41C6           A3         010E              mov 0x43*4+2, ax
 +a   41C9           1F                           pop ds
17755                                           ! 2116 endasm
17756                                           !BCC_ENDASM
17757                                           !BCC_EOS
17758                                           ! 2117      break;
17759 41CA           EB           25            jmp .94
17760                                           !BCC_EOS
17761                                           ! 2118     case 16:
17762                                           ! 2119 #asm
17763                       000041CC            .99:
17764                                           !BCC_EOS
17765                                           !BCC_ASM
17766                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17767                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17768                       00000008            _biosfn_set_video_mode.theightm1	set	8
17769                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17770                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17771                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17772                       00000014            _biosfn_set_video_mode.line	set	$14
17773                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17774                       00000006            _biosfn_set_video_mode.cheight	set	6
17775                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17776                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17777                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17778                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17779                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17780                       0000000C            _biosfn_set_video_mode.i	set	$C
17781                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17782                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17783                       00000004            .biosfn_set_video_mode.mode	set	4
17784                       00000010            _biosfn_set_video_mode.palette	set	$10
17785                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17786                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17787                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17788                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17789                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17790                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17791                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17792                       00000013            _biosfn_set_video_mode.mmask	set	$13
17793                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17794                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   41CC           1E                           push ds
 +a   41CD           31C0                         xor ax, ax
 +a   41CF           8ED8                         mov ds, ax
 +a   41D1           B8                   255C    mov ax,  #_vgafont16
 +a   41D4           A3         010C              mov 0x43*4, ax
 +a   41D7           B8                   C000    mov ax,  #0xC000
 +a   41DA           A3         010E              mov 0x43*4+2, ax
 +a   41DD           1F                           pop ds
17795                                           ! 2121 endasm
17796                                           !BCC_ENDASM
17797                                           !BCC_EOS
17798                                           ! 2122      break;
17799 41DE           EB           11            jmp .94
17800                                           !BCC_EOS
17801                                           ! 2123    }
17802                                           ! 2124 }
17803 41E0           EB           0F            jmp .94
17804                       000041E2            .96:
17805 41E2           2D                   0008  sub	ax,*8
17806 41E5           74           BC            je 	.97
17807 41E7           2D                   0006  sub	ax,*6
17808 41EA           74           CC            je 	.98
17809 41EC           2D                   0002  sub	ax,*2
17810 41EF           74           DB            je 	.99
17811                       000041F1            .94:
17812                       FFFFFFE8            ..FFFD	=	-$18
17813 41F1           89EC                       mov	sp,bp
17814 41F3           5D                         pop	bp
17815 41F4           C3                         ret
17816                                           ! 2125 static void biosfn_set_cursor_shape (CH,CL)
17817                                           ! Register BX used in function biosfn_set_video_mode
17818                                           ! 2126 Bit8u CH;Bit8u CL;
17819                       000041F5            _biosfn_set_cursor_shape:
17820                                           !BCC_EOS
17821                                           !BCC_EOS
17822                                           ! 2127 {Bit16u cheight,curs,crtc_addr;
17823                                           !BCC_EOS
17824                                           ! 2128  Bit8u modeset_ctl;
17825                                           !BCC_EOS
17826                                           ! 2129  CH&=0x3f;
17827 41F5           55                         push	bp
17828 41F6           89E5                       mov	bp,sp
17829 41F8           83C4                   F8  add	sp,*-8
17830                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17831 41FB           8A46         04            mov	al,4[bp]
17832 41FE           24                     3F  and	al,*$3F
17833 4200           8846         04            mov	4[bp],al
17834                                           !BCC_EOS
17835                                           ! 2130  CL&=0x1f;
17836                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17837 4203           8A46         06            mov	al,6[bp]
17838 4206           24                     1F  and	al,*$1F
17839 4208           8846         06            mov	6[bp],al
17840                                           !BCC_EOS
17841                                           ! 2131  curs=(CH<<8)+CL;
17842                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17843 420B           8A46         04            mov	al,4[bp]
17844 420E           30E4                       xor	ah,ah
17845 4210           88C4                       mov	ah,al
17846 4212           30C0                       xor	al,al
17847                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17848 4214           0246         06            add	al,6[bp]
17849 4217           80D4                   00  adc	ah,*0
17850                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17851 421A           8946         FC            mov	-4[bp],ax
17852                                           !BCC_EOS
17853                                           ! 2132  write_word(0x40,0x60,curs);
17854                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17855 421D           FF76         FC            push	-4[bp]
17856                                           ! Debug: list int = const $60 (used reg = )
17857 4220           B8                   0060  mov	ax,*$60
17858 4223           50                         push	ax
17859                                           ! Debug: list int = const $40 (used reg = )
17860 4224           B8                   0040  mov	ax,*$40
17861 4227           50                         push	ax
17862                                           ! Debug: func () void = write_word+0 (used reg = )
17863 4228           E8         39C1            call	_write_word
17864 422B           83C4                   06  add	sp,*6
17865                                           !BCC_EOS
17866                                           ! 2133  modeset_ctl=read_byte(0x40,0x89);
17867                                           ! Debug: list int = const $89 (used reg = )
17868 422E           B8                   0089  mov	ax,#$89
17869 4231           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 4232           B8                   0040  mov	ax,*$40
17872 4235           50                         push	ax
17873                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17874 4236           E8         3975            call	_read_byte
17875 4239           83C4                   04  add	sp,*4
17876                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17877 423C           8846         F9            mov	-7[bp],al
17878                                           !BCC_EOS
17879                                           ! 2134  cheight = read_word(0x40,0x85);
17880                                           ! Debug: list int = const $85 (used reg = )
17881 423F           B8                   0085  mov	ax,#$85
17882 4242           50                         push	ax
17883                                           ! Debug: list int = const $40 (used reg = )
17884 4243           B8                   0040  mov	ax,*$40
17885 4246           50                         push	ax
17886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17887 4247           E8         3977            call	_read_word
17888 424A           83C4                   04  add	sp,*4
17889                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17890 424D           8946         FE            mov	-2[bp],ax
17891                                           !BCC_EOS
17892                                           ! 2135  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17893                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17894 4250           8A46         F9            mov	al,-7[bp]
17895 4253           24                     01  and	al,*1
17896 4255           84C0                       test	al,al
17897 4257           74           66            je  	.9A
17898                       00004259            .9E:
17899                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17900 4259           8B46         FE            mov	ax,-2[bp]
17901 425C           3D                   0008  cmp	ax,*8
17902 425F           76           5E            jbe 	.9A
17903                       00004261            .9D:
17904                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17905 4261           8A46         06            mov	al,6[bp]
17906 4264           3C                     08  cmp	al,*8
17907 4266           73           57            jae 	.9A
17908                       00004268            .9C:
17909                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17910 4268           8A46         04            mov	al,4[bp]
17911 426B           3C                     20  cmp	al,*$20
17912 426D           73           50            jae 	.9A
17913                       0000426F            .9B:
17914                                           ! 2136   {
17915                                           ! 2137    if(CL!=(CH+1))
17916                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17917 426F           8A46         04            mov	al,4[bp]
17918 4272           30E4                       xor	ah,ah
17919                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17920                                           ! Debug: expression subtree swapping
17921 4274           40                         inc	ax
17922 4275           50                         push	ax
17923 4276           8A46         06            mov	al,6[bp]
17924 4279           30E4                       xor	ah,ah
17925 427B           3B46         F6            cmp	ax,-$A[bp]
17926 427E           8D66         F8            lea	sp,-8[bp]
17927 4281           74           15            je  	.9F
17928                       00004283            .A0:
17929                                           ! 2138     {
17930                                           ! 2139      CH = ((CH+1) * cheight / 8) -1;
17931                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17932 4283           8A46         04            mov	al,4[bp]
17933 4286           30E4                       xor	ah,ah
17934                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17935 4288           40                         inc	ax
17936 4289           8B4E         FE            mov	cx,-2[bp]
17937 428C           F7E9                       imul	cx
17938                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17939 428E           B1                     03  mov	cl,*3
17940 4290           D3E8                       shr	ax,cl
17941                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17942                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17943 4292           48                         dec	ax
17944 4293           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2140     }
17947                                           ! 2141    else
17948                                           ! 2142     {
17949 4296           EB           14            jmp .A1
17950                       00004298            .9F:
17951                                           ! 2143      CH = ((CL+1) * cheight / 8) - 2;
17952                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17953 4298           8A46         06            mov	al,6[bp]
17954 429B           30E4                       xor	ah,ah
17955                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17956 429D           40                         inc	ax
17957 429E           8B4E         FE            mov	cx,-2[bp]
17958 42A1           F7E9                       imul	cx
17959                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17960 42A3           B1                     03  mov	cl,*3
17961 42A5           D3E8                       shr	ax,cl
17962                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17963                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17964 42A7           48                         dec	ax
17965 42A8           48                         dec	ax
17966 42A9           8846         04            mov	4[bp],al
17967                                           !BCC_EOS
17968                                           ! 2144     }
17969                                           ! 2145    CL = ((CL+1) * cheight / 8) - 1;
17970                       000042AC            .A1:
17971                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17972 42AC           8A46         06            mov	al,6[bp]
17973 42AF           30E4                       xor	ah,ah
17974                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17975 42B1           40                         inc	ax
17976 42B2           8B4E         FE            mov	cx,-2[bp]
17977 42B5           F7E9                       imul	cx
17978                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17979 42B7           B1                     03  mov	cl,*3
17980 42B9           D3E8                       shr	ax,cl
17981                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17982                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17983 42BB           48                         dec	ax
17984 42BC           8846         06            mov	6[bp],al
17985                                           !BCC_EOS
17986                                           ! 2146   }
17987                                           ! 2147  crtc_addr=read_word(0x40,0x63);
17988                       000042BF            .9A:
17989                                           ! Debug: list int = const $63 (used reg = )
17990 42BF           B8                   0063  mov	ax,*$63
17991 42C2           50                         push	ax
17992                                           ! Debug: list int = const $40 (used reg = )
17993 42C3           B8                   0040  mov	ax,*$40
17994 42C6           50                         push	ax
17995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17996 42C7           E8         38F7            call	_read_word
17997 42CA           83C4                   04  add	sp,*4
17998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17999 42CD           8946         FA            mov	-6[bp],ax
18000                                           !BCC_EOS
18001                                           ! 2148  outb(crtc_addr,0x0a);
18002                                           ! Debug: list int = const $A (used reg = )
18003 42D0           B8                   000A  mov	ax,*$A
18004 42D3           50                         push	ax
18005                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18006 42D4           FF76         FA            push	-6[bp]
18007                                           ! Debug: func () void = outb+0 (used reg = )
18008 42D7           E8         3940            call	_outb
18009 42DA           83C4                   04  add	sp,*4
18010                                           !BCC_EOS
18011                                           ! 2149  outb(crtc_addr+1,CH);
18012                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18013 42DD           8A46         04            mov	al,4[bp]
18014 42E0           30E4                       xor	ah,ah
18015 42E2           50                         push	ax
18016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18017 42E3           8B46         FA            mov	ax,-6[bp]
18018                                           ! Debug: list unsigned int = ax+1 (used reg = )
18019 42E6           40                         inc	ax
18020 42E7           50                         push	ax
18021                                           ! Debug: func () void = outb+0 (used reg = )
18022 42E8           E8         392F            call	_outb
18023 42EB           83C4                   04  add	sp,*4
18024                                           !BCC_EOS
18025                                           ! 2150  outb(crtc_addr,0x0b);
18026                                           ! Debug: list int = const $B (used reg = )
18027 42EE           B8                   000B  mov	ax,*$B
18028 42F1           50                         push	ax
18029                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18030 42F2           FF76         FA            push	-6[bp]
18031                                           ! Debug: func () void = outb+0 (used reg = )
18032 42F5           E8         3922            call	_outb
18033 42F8           83C4                   04  add	sp,*4
18034                                           !BCC_EOS
18035                                           ! 2151  outb(crtc_addr+1,CL);
18036                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18037 42FB           8A46         06            mov	al,6[bp]
18038 42FE           30E4                       xor	ah,ah
18039 4300           50                         push	ax
18040                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18041 4301           8B46         FA            mov	ax,-6[bp]
18042                                           ! Debug: list unsigned int = ax+1 (used reg = )
18043 4304           40                         inc	ax
18044 4305           50                         push	ax
18045                                           ! Debug: func () void = outb+0 (used reg = )
18046 4306           E8         3911            call	_outb
18047 4309           83C4                   04  add	sp,*4
18048                                           !BCC_EOS
18049                                           ! 2152 }
18050 430C           89EC                       mov	sp,bp
18051 430E           5D                         pop	bp
18052 430F           C3                         ret
18053                                           ! 2153 static void biosfn_set_cursor_pos (page, cursor)
18054                                           ! 2154 Bit8u page;Bit16u cursor;
18055                       00004310            _biosfn_set_cursor_pos:
18056                                           !BCC_EOS
18057                                           !BCC_EOS
18058                                           ! 2155 {
18059                                           ! 2156  Bit8u xcurs,ycurs,current;
18060                                           !BCC_EOS
18061                                           ! 2157  Bit16u nbcols,nbrows,address,crtc_addr;
18062                                           !BCC_EOS
18063                                           ! 2158  if(page>7)return;
18064 4310           55                         push	bp
18065 4311           89E5                       mov	bp,sp
18066 4313           83C4                   F4  add	sp,*-$C
18067                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18068 4316           8A46         04            mov	al,4[bp]
18069 4319           3C                     07  cmp	al,*7
18070 431B           76           04            jbe 	.A2
18071                       0000431D            .A3:
18072 431D           89EC                       mov	sp,bp
18073 431F           5D                         pop	bp
18074 4320           C3                         ret
18075                                           !BCC_EOS
18076                                           ! 2159  write_word(0x40, 0x50 +2*page, cursor);
18077                       00004321            .A2:
18078                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18079 4321           FF76         06            push	6[bp]
18080                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18081                                           ! Debug: expression subtree swapping
18082 4324           8A46         04            mov	al,4[bp]
18083 4327           30E4                       xor	ah,ah
18084 4329           D1E0                       shl	ax,*1
18085                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18086                                           ! Debug: expression subtree swapping
18087                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18088 432B           05                   0050  add	ax,*$50
18089 432E           50                         push	ax
18090                                           ! Debug: list int = const $40 (used reg = )
18091 432F           B8                   0040  mov	ax,*$40
18092 4332           50                         push	ax
18093                                           ! Debug: func () void = write_word+0 (used reg = )
18094 4333           E8         38B6            call	_write_word
18095 4336           83C4                   06  add	sp,*6
18096                                           !BCC_EOS
18097                                           ! 2160  current=read_byte(0x40,0x62);
18098                                           ! Debug: list int = const $62 (used reg = )
18099 4339           B8                   0062  mov	ax,*$62
18100 433C           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 433D           B8                   0040  mov	ax,*$40
18103 4340           50                         push	ax
18104                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18105 4341           E8         386A            call	_read_byte
18106 4344           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18108 4347           8846         FD            mov	-3[bp],al
18109                                           !BCC_EOS
18110                                           ! 2161  if(page==current)
18111                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18112 434A           8A46         04            mov	al,4[bp]
18113 434D           3A46         FD            cmp	al,-3[bp]
18114 4350         0F85         00B8            bne 	.A4
18115                       00004354            .A5:
18116                                           ! 2162   {
18117                                           ! 2163    nbcols=read_word(0x40,0x4A);
18118                                           ! Debug: list int = const $4A (used reg = )
18119 4354           B8                   004A  mov	ax,*$4A
18120 4357           50                         push	ax
18121                                           ! Debug: list int = const $40 (used reg = )
18122 4358           B8                   0040  mov	ax,*$40
18123 435B           50                         push	ax
18124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18125 435C           E8         3862            call	_read_word
18126 435F           83C4                   04  add	sp,*4
18127                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18128 4362           8946         FA            mov	-6[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2164    nbrows=read_byte(0x40,0x84)+1;
18131                                           ! Debug: list int = const $84 (used reg = )
18132 4365           B8                   0084  mov	ax,#$84
18133 4368           50                         push	ax
18134                                           ! Debug: list int = const $40 (used reg = )
18135 4369           B8                   0040  mov	ax,*$40
18136 436C           50                         push	ax
18137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18138 436D           E8         383E            call	_read_byte
18139 4370           83C4                   04  add	sp,*4
18140                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18141 4373           30E4                       xor	ah,ah
18142                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18143 4375           40                         inc	ax
18144 4376           8946         F8            mov	-8[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2165    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18147                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18148 4379           8A46         06            mov	al,6[bp]
18149                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18150 437C           8846         FF            mov	-1[bp],al
18151                                           !BCC_EOS
18152                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18153 437F           8B46         06            mov	ax,6[bp]
18154 4382           30C0                       xor	al,al
18155                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18156 4384           88E0                       mov	al,ah
18157 4386           30E4                       xor	ah,ah
18158                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18159 4388           8846         FE            mov	-2[bp],al
18160                                           !BCC_EOS
18161                                           ! 2166    address=((((nbcols*nbrows)|0x00ff)+1
18162                                           ! 2166 )*page)+xcurs+ycurs*nbcols;
18163                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18164 438B           8A46         FE            mov	al,-2[bp]
18165 438E           30E4                       xor	ah,ah
18166 4390           8B4E         FA            mov	cx,-6[bp]
18167 4393           F7E9                       imul	cx
18168 4395           50                         push	ax
18169                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18170 4396           8B46         FA            mov	ax,-6[bp]
18171 4399           8B4E         F8            mov	cx,-8[bp]
18172 439C           F7E9                       imul	cx
18173                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18174 439E           0C                     FF  or	al,#$FF
18175                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18176                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18177 43A0           89C3                       mov	bx,ax
18178 43A2           8A46         04            mov	al,4[bp]
18179 43A5           30E4                       xor	ah,ah
18180 43A7           93                         xchg	ax,bx
18181 43A8           40                         inc	ax
18182 43A9           89D9                       mov	cx,bx
18183 43AB           F7E9                       imul	cx
18184                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18185 43AD           0246         FF            add	al,-1[bp]
18186 43B0           80D4                   00  adc	ah,*0
18187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18188 43B3           0346         F2            add	ax,-$E[bp]
18189 43B6           44                         inc	sp
18190 43B7           44                         inc	sp
18191                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18192 43B8           8946         F6            mov	-$A[bp],ax
18193                                           !BCC_EOS
18194                                           ! 2167    crtc_addr=read_word(0x40,0x63);
18195                                           ! Debug: list int = const $63 (used reg = )
18196 43BB           B8                   0063  mov	ax,*$63
18197 43BE           50                         push	ax
18198                                           ! Debug: list int = const $40 (used reg = )
18199 43BF           B8                   0040  mov	ax,*$40
18200 43C2           50                         push	ax
18201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18202 43C3           E8         37FB            call	_read_word
18203 43C6           83C4                   04  add	sp,*4
18204                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18205 43C9           8946         F4            mov	-$C[bp],ax
18206                                           !BCC_EOS
18207                                           ! 2168    outb(crtc_addr,0x0e);
18208                                           ! Debug: list int = const $E (used reg = )
18209 43CC           B8                   000E  mov	ax,*$E
18210 43CF           50                         push	ax
18211                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18212 43D0           FF76         F4            push	-$C[bp]
18213                                           ! Debug: func () void = outb+0 (used reg = )
18214 43D3           E8         3844            call	_outb
18215 43D6           83C4                   04  add	sp,*4
18216                                           !BCC_EOS
18217                                           ! 2169    outb(crtc_addr+1,(address&0xff00)>>8);
18218                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18219 43D9           8B46         F6            mov	ax,-$A[bp]
18220 43DC           30C0                       xor	al,al
18221                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18222 43DE           88E0                       mov	al,ah
18223 43E0           30E4                       xor	ah,ah
18224                                           ! Debug: list unsigned int = ax+0 (used reg = )
18225 43E2           50                         push	ax
18226                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18227 43E3           8B46         F4            mov	ax,-$C[bp]
18228                                           ! Debug: list unsigned int = ax+1 (used reg = )
18229 43E6           40                         inc	ax
18230 43E7           50                         push	ax
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 43E8           E8         382F            call	_outb
18233 43EB           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2170    outb(crtc_addr,0x0f);
18236                                           ! Debug: list int = const $F (used reg = )
18237 43EE           B8                   000F  mov	ax,*$F
18238 43F1           50                         push	ax
18239                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18240 43F2           FF76         F4            push	-$C[bp]
18241                                           ! Debug: func () void = outb+0 (used reg = )
18242 43F5           E8         3822            call	_outb
18243 43F8           83C4                   04  add	sp,*4
18244                                           !BCC_EOS
18245                                           ! 2171    outb(crtc_addr+1,address&0x00ff);
18246                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18247 43FB           8A46         F6            mov	al,-$A[bp]
18248                                           ! Debug: list unsigned char = al+0 (used reg = )
18249 43FE           30E4                       xor	ah,ah
18250 4400           50                         push	ax
18251                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18252 4401           8B46         F4            mov	ax,-$C[bp]
18253                                           ! Debug: list unsigned int = ax+1 (used reg = )
18254 4404           40                         inc	ax
18255 4405           50                         push	ax
18256                                           ! Debug: func () void = outb+0 (used reg = )
18257 4406           E8         3811            call	_outb
18258 4409           83C4                   04  add	sp,*4
18259                                           !BCC_EOS
18260                                           ! 2172   }
18261                                           ! 2173 }
18262                       0000440C            .A4:
18263 440C           89EC                       mov	sp,bp
18264 440E           5D                         pop	bp
18265 440F           C3                         ret
18266                                           ! 2174 static void biosfn_get_cursor_pos (page,shape, pos)
18267                                           ! Register BX used in function biosfn_set_cursor_pos
18268                                           ! 2175 Bit8u page;Bit16u *shape;Bit16u *pos;
18269                       00004410            _biosfn_get_cursor_pos:
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           !BCC_EOS
18273                                           ! 2176 {
18274                                           ! 2177  Bit16u ss=get_SS();
18275 4410           55                         push	bp
18276 4411           89E5                       mov	bp,sp
18277 4413           4C                         dec	sp
18278 4414           4C                         dec	sp
18279                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18280 4415           E8         3822            call	_get_SS
18281                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18282 4418           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2178  write_word(ss, shape, 0);
18285                                           ! Debug: list int = const 0 (used reg = )
18286 441B           31C0                       xor	ax,ax
18287 441D           50                         push	ax
18288                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18289 441E           FF76         06            push	6[bp]
18290                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18291 4421           FF76         FE            push	-2[bp]
18292                                           ! Debug: func () void = write_word+0 (used reg = )
18293 4424           E8         37C5            call	_write_word
18294 4427           83C4                   06  add	sp,*6
18295                                           !BCC_EOS
18296                                           ! 2179  write_word(ss, pos, 0);
18297                                           ! Debug: list int = const 0 (used reg = )
18298 442A           31C0                       xor	ax,ax
18299 442C           50                         push	ax
18300                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18301 442D           FF76         08            push	8[bp]
18302                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18303 4430           FF76         FE            push	-2[bp]
18304                                           ! Debug: func () void = write_word+0 (used reg = )
18305 4433           E8         37B6            call	_write_word
18306 4436           83C4                   06  add	sp,*6
18307                                           !BCC_EOS
18308                                           ! 2180  if(page>7)return;
18309                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18310 4439           8A46         04            mov	al,4[bp]
18311 443C           3C                     07  cmp	al,*7
18312 443E           76           04            jbe 	.A6
18313                       00004440            .A7:
18314 4440           89EC                       mov	sp,bp
18315 4442           5D                         pop	bp
18316 4443           C3                         ret
18317                                           !BCC_EOS
18318                                           ! 2181  write_word(ss,shape,read_word(0x40,0x60));
18319                       00004444            .A6:
18320                                           ! Debug: list int = const $60 (used reg = )
18321 4444           B8                   0060  mov	ax,*$60
18322 4447           50                         push	ax
18323                                           ! Debug: list int = const $40 (used reg = )
18324 4448           B8                   0040  mov	ax,*$40
18325 444B           50                         push	ax
18326                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18327 444C           E8         3772            call	_read_word
18328 444F           83C4                   04  add	sp,*4
18329                                           ! Debug: list unsigned short = ax+0 (used reg = )
18330 4452           50                         push	ax
18331                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18332 4453           FF76         06            push	6[bp]
18333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18334 4456           FF76         FE            push	-2[bp]
18335                                           ! Debug: func () void = write_word+0 (used reg = )
18336 4459           E8         3790            call	_write_word
18337 445C           83C4                   06  add	sp,*6
18338                                           !BCC_EOS
18339                                           ! 2182  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18340                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18341 445F           8A46         04            mov	al,4[bp]
18342 4462           30E4                       xor	ah,ah
18343 4464           D1E0                       shl	ax,*1
18344                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18345                                           ! Debug: expression subtree swapping
18346                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18347 4466           05                   0050  add	ax,*$50
18348 4469           50                         push	ax
18349                                           ! Debug: list int = const $40 (used reg = )
18350 446A           B8                   0040  mov	ax,*$40
18351 446D           50                         push	ax
18352                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18353 446E           E8         3750            call	_read_word
18354 4471           83C4                   04  add	sp,*4
18355                                           ! Debug: list unsigned short = ax+0 (used reg = )
18356 4474           50                         push	ax
18357                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18358 4475           FF76         08            push	8[bp]
18359                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18360 4478           FF76         FE            push	-2[bp]
18361                                           ! Debug: func () void = write_word+0 (used reg = )
18362 447B           E8         376E            call	_write_word
18363 447E           83C4                   06  add	sp,*6
18364                                           !BCC_EOS
18365                                           ! 2183 }
18366 4481           89EC                       mov	sp,bp
18367 4483           5D                         pop	bp
18368 4484           C3                         ret
18369                                           ! 2184 static void biosfn_set_active_page (page)
18370                                           ! 2185 Bit8u page;
18371                       00004485            _biosfn_set_active_page:
18372                                           !BCC_EOS
18373                                           ! 2186 {
18374                                           ! 2187  Bit16u cursor,dummy,crtc_addr;
18375                                           !BCC_EOS
18376                                           ! 2188  Bit16u nbcols,nbrows,address;
18377                                           !BCC_EOS
18378                                           ! 2189  Bit8u mode,line;
18379                                           !BCC_EOS
18380                                           ! 2190  if(page>7)return;
18381 4485           55                         push	bp
18382 4486           89E5                       mov	bp,sp
18383 4488           83C4                   F2  add	sp,*-$E
18384                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18385 448B           8A46         04            mov	al,4[bp]
18386 448E           3C                     07  cmp	al,*7
18387 4490           76           04            jbe 	.A8
18388                       00004492            .A9:
18389 4492           89EC                       mov	sp,bp
18390 4494           5D                         pop	bp
18391 4495           C3                         ret
18392                                           !BCC_EOS
18393                                           ! 2191  mode=read_byte(0x40,0x49);
18394                       00004496            .A8:
18395                                           ! Debug: list int = const $49 (used reg = )
18396 4496           B8                   0049  mov	ax,*$49
18397 4499           50                         push	ax
18398                                           ! Debug: list int = const $40 (used reg = )
18399 449A           B8                   0040  mov	ax,*$40
18400 449D           50                         push	ax
18401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18402 449E           E8         370D            call	_read_byte
18403 44A1           83C4                   04  add	sp,*4
18404                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18405 44A4           8846         F3            mov	-$D[bp],al
18406                                           !BCC_EOS
18407                                           ! 2192  line=find_vga_entry(mode);
18408                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18409 44A7           8A46         F3            mov	al,-$D[bp]
18410 44AA           30E4                       xor	ah,ah
18411 44AC           50                         push	ax
18412                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18413 44AD           E8         3612            call	_find_vga_entry
18414 44B0           44                         inc	sp
18415 44B1           44                         inc	sp
18416                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18417 44B2           8846         F2            mov	-$E[bp],al
18418                                           !BCC_EOS
18419                                           ! 2193  if(line==0xFF)return;
18420                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18421 44B5           8A46         F2            mov	al,-$E[bp]
18422 44B8           3C                     FF  cmp	al,#$FF
18423 44BA           75           04            jne 	.AA
18424                       000044BC            .AB:
18425 44BC           89EC                       mov	sp,bp
18426 44BE           5D                         pop	bp
18427 44BF           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2194  biosfn_get_cursor_pos(page,&dummy,&cursor);
18430                       000044C0            .AA:
18431                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18432 44C0           8D5E         FE            lea	bx,-2[bp]
18433 44C3           53                         push	bx
18434                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18435 44C4           8D5E         FC            lea	bx,-4[bp]
18436 44C7           53                         push	bx
18437                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18438 44C8           8A46         04            mov	al,4[bp]
18439 44CB           30E4                       xor	ah,ah
18440 44CD           50                         push	ax
18441                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18442 44CE           E8         FF3F            call	_biosfn_get_cursor_pos
18443 44D1           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2195  if(vga_modes[line].class==0x00)
18446                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18447 44D4           8A46         F2            mov	al,-$E[bp]
18448 44D7           30E4                       xor	ah,ah
18449 44D9           B1                     03  mov	cl,*3
18450 44DB           D3E0                       shl	ax,cl
18451 44DD           89C3                       mov	bx,ax
18452 44DF           81C3                 01F8  add	bx,#_vga_modes
18453                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18454 44E3           8A47         01            mov	al,1[bx]
18455 44E6           84C0                       test	al,al
18456 44E8           75           6E            jne 	.AC
18457                       000044EA            .AD:
18458                                           ! 2196   {
18459                                           ! 2197    nbcols=read_word(0x40,0x4A);
18460                                           ! Debug: list int = const $4A (used reg = )
18461 44EA           B8                   004A  mov	ax,*$4A
18462 44ED           50                         push	ax
18463                                           ! Debug: list int = const $40 (used reg = )
18464 44EE           B8                   0040  mov	ax,*$40
18465 44F1           50                         push	ax
18466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18467 44F2           E8         36CC            call	_read_word
18468 44F5           83C4                   04  add	sp,*4
18469                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18470 44F8           8946         F8            mov	-8[bp],ax
18471                                           !BCC_EOS
18472                                           ! 2198    nbrows=read_byte(0x40,0x84)+1;
18473                                           ! Debug: list int = const $84 (used reg = )
18474 44FB           B8                   0084  mov	ax,#$84
18475 44FE           50                         push	ax
18476                                           ! Debug: list int = const $40 (used reg = )
18477 44FF           B8                   0040  mov	ax,*$40
18478 4502           50                         push	ax
18479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18480 4503           E8         36A8            call	_read_byte
18481 4506           83C4                   04  add	sp,*4
18482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18483 4509           30E4                       xor	ah,ah
18484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18485 450B           40                         inc	ax
18486 450C           8946         F6            mov	-$A[bp],ax
18487                                           !BCC_EOS
18488                                           ! 2199    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18489                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18490 450F           8B46         F8            mov	ax,-8[bp]
18491 4512           8B4E         F6            mov	cx,-$A[bp]
18492 4515           F7E9                       imul	cx
18493                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18494 4517           D1E0                       shl	ax,*1
18495                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18496 4519           0C                     FF  or	al,#$FF
18497                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18498                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18499 451B           89C3                       mov	bx,ax
18500 451D           8A46         04            mov	al,4[bp]
18501 4520           30E4                       xor	ah,ah
18502 4522           93                         xchg	ax,bx
18503 4523           40                         inc	ax
18504 4524           89D9                       mov	cx,bx
18505 4526           F7E9                       imul	cx
18506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18507 4528           8946         F4            mov	-$C[bp],ax
18508                                           !BCC_EOS
18509                                           ! 2200    write_word(0x40,0x4E,address);
18510                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18511 452B           FF76         F4            push	-$C[bp]
18512                                           ! Debug: list int = const $4E (used reg = )
18513 452E           B8                   004E  mov	ax,*$4E
18514 4531           50                         push	ax
18515                                           ! Debug: list int = const $40 (used reg = )
18516 4532           B8                   0040  mov	ax,*$40
18517 4535           50                         push	ax
18518                                           ! Debug: func () void = write_word+0 (used reg = )
18519 4536           E8         36B3            call	_write_word
18520 4539           83C4                   06  add	sp,*6
18521                                           !BCC_EOS
18522                                           ! 2201    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18523                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18524 453C           8B46         F8            mov	ax,-8[bp]
18525 453F           8B4E         F6            mov	cx,-$A[bp]
18526 4542           F7E9                       imul	cx
18527                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18528 4544           0C                     FF  or	al,#$FF
18529                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18530                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18531 4546           89C3                       mov	bx,ax
18532 4548           8A46         04            mov	al,4[bp]
18533 454B           30E4                       xor	ah,ah
18534 454D           93                         xchg	ax,bx
18535 454E           40                         inc	ax
18536 454F           89D9                       mov	cx,bx
18537 4551           F7E9                       imul	cx
18538                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18539 4553           8946         F4            mov	-$C[bp],ax
18540                                           !BCC_EOS
18541                                           ! 2202   }
18542                                           ! 2203  else
18543                                           ! 2204   {
18544 4556           EB           24            jmp .AE
18545                       00004558            .AC:
18546                                           ! 2205    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18547                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18548 4558           8A46         F2            mov	al,-$E[bp]
18549 455B           30E4                       xor	ah,ah
18550 455D           89C3                       mov	bx,ax
18551                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18552 455F           8A87       0278            mov	al,_line_to_vpti[bx]
18553 4563           30E4                       xor	ah,ah
18554 4565           B1                     06  mov	cl,*6
18555 4567           D3E0                       shl	ax,cl
18556 4569           89C3                       mov	bx,ax
18557 456B           81C3                 028C  add	bx,#_video_param_table
18558                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18559                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18560                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18561 456F           8A46         04            mov	al,4[bp]
18562 4572           30E4                       xor	ah,ah
18563 4574           8B4F         03            mov	cx,3[bx]
18564 4577           F7E9                       imul	cx
18565                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18566 4579           8946         F4            mov	-$C[bp],ax
18567                                           !BCC_EOS
18568                                           ! 2206   }
18569                                           ! 2207  crtc_addr=read_word(0x40,0x63);
18570                       0000457C            .AE:
18571                                           ! Debug: list int = const $63 (used reg = )
18572 457C           B8                   0063  mov	ax,*$63
18573 457F           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 4580           B8                   0040  mov	ax,*$40
18576 4583           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 4584           E8         363A            call	_read_word
18579 4587           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18581 458A           8946         FA            mov	-6[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2208  outb(crtc_addr,0x0c);
18584                                           ! Debug: list int = const $C (used reg = )
18585 458D           B8                   000C  mov	ax,*$C
18586 4590           50                         push	ax
18587                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18588 4591           FF76         FA            push	-6[bp]
18589                                           ! Debug: func () void = outb+0 (used reg = )
18590 4594           E8         3683            call	_outb
18591 4597           83C4                   04  add	sp,*4
18592                                           !BCC_EOS
18593                                           ! 2209  outb(crtc_addr+1,(address&0xff00)>>8);
18594                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18595 459A           8B46         F4            mov	ax,-$C[bp]
18596 459D           30C0                       xor	al,al
18597                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18598 459F           88E0                       mov	al,ah
18599 45A1           30E4                       xor	ah,ah
18600                                           ! Debug: list unsigned int = ax+0 (used reg = )
18601 45A3           50                         push	ax
18602                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18603 45A4           8B46         FA            mov	ax,-6[bp]
18604                                           ! Debug: list unsigned int = ax+1 (used reg = )
18605 45A7           40                         inc	ax
18606 45A8           50                         push	ax
18607                                           ! Debug: func () void = outb+0 (used reg = )
18608 45A9           E8         366E            call	_outb
18609 45AC           83C4                   04  add	sp,*4
18610                                           !BCC_EOS
18611                                           ! 2210  outb(crtc_addr,0x0d);
18612                                           ! Debug: list int = const $D (used reg = )
18613 45AF           B8                   000D  mov	ax,*$D
18614 45B2           50                         push	ax
18615                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18616 45B3           FF76         FA            push	-6[bp]
18617                                           ! Debug: func () void = outb+0 (used reg = )
18618 45B6           E8         3661            call	_outb
18619 45B9           83C4                   04  add	sp,*4
18620                                           !BCC_EOS
18621                                           ! 2211  outb(crtc_addr+1,address&0x00ff);
18622                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18623 45BC           8A46         F4            mov	al,-$C[bp]
18624                                           ! Debug: list unsigned char = al+0 (used reg = )
18625 45BF           30E4                       xor	ah,ah
18626 45C1           50                         push	ax
18627                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18628 45C2           8B46         FA            mov	ax,-6[bp]
18629                                           ! Debug: list unsigned int = ax+1 (used reg = )
18630 45C5           40                         inc	ax
18631 45C6           50                         push	ax
18632                                           ! Debug: func () void = outb+0 (used reg = )
18633 45C7           E8         3650            call	_outb
18634 45CA           83C4                   04  add	sp,*4
18635                                           !BCC_EOS
18636                                           ! 2212  write_byte(0x40,0x62,page);
18637                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18638 45CD           8A46         04            mov	al,4[bp]
18639 45D0           30E4                       xor	ah,ah
18640 45D2           50                         push	ax
18641                                           ! Debug: list int = const $62 (used reg = )
18642 45D3           B8                   0062  mov	ax,*$62
18643 45D6           50                         push	ax
18644                                           ! Debug: list int = const $40 (used reg = )
18645 45D7           B8                   0040  mov	ax,*$40
18646 45DA           50                         push	ax
18647                                           ! Debug: func () void = write_byte+0 (used reg = )
18648 45DB           E8         35F6            call	_write_byte
18649 45DE           83C4                   06  add	sp,*6
18650                                           !BCC_EOS
18651                                           ! 2213  biosfn_set_cursor_pos(page,cursor);
18652                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18653 45E1           FF76         FE            push	-2[bp]
18654                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18655 45E4           8A46         04            mov	al,4[bp]
18656 45E7           30E4                       xor	ah,ah
18657 45E9           50                         push	ax
18658                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18659 45EA           E8         FD23            call	_biosfn_set_cursor_pos
18660 45ED           83C4                   04  add	sp,*4
18661                                           !BCC_EOS
18662                                           ! 2214 }
18663 45F0           89EC                       mov	sp,bp
18664 45F2           5D                         pop	bp
18665 45F3           C3                         ret
18666                                           ! 2215 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18667                                           ! Register BX used in function biosfn_set_active_page
18668                                           ! 2216 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18669                       000045F4            _vgamem_copy_pl4:
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           ! 2217 {
18677                                           ! 2218  Bit16u src,dest;
18678                                           !BCC_EOS
18679                                           ! 2219  Bit8u i;
18680                                           !BCC_EOS
18681                                           ! 2220  src=ysrc*cheight*nbcols+xstart;
18682 45F4           55                         push	bp
18683 45F5           89E5                       mov	bp,sp
18684 45F7           83C4                   FA  add	sp,*-6
18685                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18686 45FA           8A46         0E            mov	al,$E[bp]
18687 45FD           30E4                       xor	ah,ah
18688 45FF           89C3                       mov	bx,ax
18689 4601           8A46         06            mov	al,6[bp]
18690 4604           30E4                       xor	ah,ah
18691 4606           89D9                       mov	cx,bx
18692 4608           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18694 460A           89C3                       mov	bx,ax
18695 460C           8A46         0C            mov	al,$C[bp]
18696 460F           30E4                       xor	ah,ah
18697 4611           93                         xchg	ax,bx
18698 4612           89D9                       mov	cx,bx
18699 4614           F7E9                       imul	cx
18700                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18701 4616           0246         04            add	al,4[bp]
18702 4619           80D4                   00  adc	ah,*0
18703                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18704 461C           8946         FE            mov	-2[bp],ax
18705                                           !BCC_EOS
18706                                           ! 2221  dest=ydest*cheight*nbcols+xstart;
18707                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18708 461F           8A46         0E            mov	al,$E[bp]
18709 4622           30E4                       xor	ah,ah
18710 4624           89C3                       mov	bx,ax
18711 4626           8A46         08            mov	al,8[bp]
18712 4629           30E4                       xor	ah,ah
18713 462B           89D9                       mov	cx,bx
18714 462D           F7E9                       imul	cx
18715                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18716 462F           89C3                       mov	bx,ax
18717 4631           8A46         0C            mov	al,$C[bp]
18718 4634           30E4                       xor	ah,ah
18719 4636           93                         xchg	ax,bx
18720 4637           89D9                       mov	cx,bx
18721 4639           F7E9                       imul	cx
18722                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18723 463B           0246         04            add	al,4[bp]
18724 463E           80D4                   00  adc	ah,*0
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18726 4641           8946         FC            mov	-4[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2222  outw(0x3ce, 0x0105);
18729                                           ! Debug: list int = const $105 (used reg = )
18730 4644           B8                   0105  mov	ax,#$105
18731 4647           50                         push	ax
18732                                           ! Debug: list int = const $3CE (used reg = )
18733 4648           B8                   03CE  mov	ax,#$3CE
18734 464B           50                         push	ax
18735                                           ! Debug: func () void = outw+0 (used reg = )
18736 464C           E8         35DB            call	_outw
18737 464F           83C4                   04  add	sp,*4
18738                                           !BCC_EOS
18739                                           ! 2223  for(i=0;i<cheight;i++)
18740                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18741 4652           30C0                       xor	al,al
18742 4654           8846         FB            mov	-5[bp],al
18743                                           !BCC_EOS
18744                                           !BCC_EOS
18745                                           ! 2224   {
18746 4657           EB           43            jmp .B1
18747                       00004659            .B2:
18748                                           ! 2225    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18749                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18750 4659           8A46         0A            mov	al,$A[bp]
18751 465C           30E4                       xor	ah,ah
18752 465E           50                         push	ax
18753                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18754 465F           8A46         0C            mov	al,$C[bp]
18755 4662           30E4                       xor	ah,ah
18756 4664           89C3                       mov	bx,ax
18757 4666           8A46         FB            mov	al,-5[bp]
18758 4669           30E4                       xor	ah,ah
18759 466B           89D9                       mov	cx,bx
18760 466D           F7E9                       imul	cx
18761                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18762                                           ! Debug: expression subtree swapping
18763 466F           0346         FE            add	ax,-2[bp]
18764                                           ! Debug: list unsigned int = ax+0 (used reg = )
18765 4672           50                         push	ax
18766                                           ! Debug: list unsigned int = const $A000 (used reg = )
18767 4673           B8                   A000  mov	ax,#$A000
18768 4676           50                         push	ax
18769                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18770 4677           8A46         0C            mov	al,$C[bp]
18771 467A           30E4                       xor	ah,ah
18772 467C           89C3                       mov	bx,ax
18773 467E           8A46         FB            mov	al,-5[bp]
18774 4681           30E4                       xor	ah,ah
18775 4683           89D9                       mov	cx,bx
18776 4685           F7E9                       imul	cx
18777                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18778                                           ! Debug: expression subtree swapping
18779 4687           0346         FC            add	ax,-4[bp]
18780                                           ! Debug: list unsigned int = ax+0 (used reg = )
18781 468A           50                         push	ax
18782                                           ! Debug: list unsigned int = const $A000 (used reg = )
18783 468B           B8                   A000  mov	ax,#$A000
18784 468E           50                         push	ax
18785                                           ! Debug: func () void = memcpyb+0 (used reg = )
18786 468F           E8         34BC            call	_memcpyb
18787 4692           83C4                   0A  add	sp,*$A
18788                                           !BCC_EOS
18789                                           ! 2226   }
18790                                           ! 2227  outw(0x3ce, 0x0005);
18791                       00004695            .B0:
18792                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18793 4695           8A46         FB            mov	al,-5[bp]
18794 4698           40                         inc	ax
18795 4699           8846         FB            mov	-5[bp],al
18796                       0000469C            .B1:
18797                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18798 469C           8A46         FB            mov	al,-5[bp]
18799 469F           3A46         0E            cmp	al,$E[bp]
18800 46A2           72           B5            jb 	.B2
18801                       000046A4            .B3:
18802                       000046A4            .AF:
18803                                           ! Debug: list int = const 5 (used reg = )
18804 46A4           B8                   0005  mov	ax,*5
18805 46A7           50                         push	ax
18806                                           ! Debug: list int = const $3CE (used reg = )
18807 46A8           B8                   03CE  mov	ax,#$3CE
18808 46AB           50                         push	ax
18809                                           ! Debug: func () void = outw+0 (used reg = )
18810 46AC           E8         357B            call	_outw
18811 46AF           83C4                   04  add	sp,*4
18812                                           !BCC_EOS
18813                                           ! 2228 }
18814 46B2           89EC                       mov	sp,bp
18815 46B4           5D                         pop	bp
18816 46B5           C3                         ret
18817                                           ! 2229 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18818                                           ! Register BX used in function vgamem_copy_pl4
18819                                           ! 2230 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18820                       000046B6            _vgamem_fill_pl4:
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2231 {
18828                                           ! 2232  Bit16u dest;
18829                                           !BCC_EOS
18830                                           ! 2233  Bit8u i;
18831                                           !BCC_EOS
18832                                           ! 2234  dest=ystart*cheight*nbcols+xstart;
18833 46B6           55                         push	bp
18834 46B7           89E5                       mov	bp,sp
18835 46B9           83C4                   FC  add	sp,*-4
18836                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18837 46BC           8A46         0C            mov	al,$C[bp]
18838 46BF           30E4                       xor	ah,ah
18839 46C1           89C3                       mov	bx,ax
18840 46C3           8A46         06            mov	al,6[bp]
18841 46C6           30E4                       xor	ah,ah
18842 46C8           89D9                       mov	cx,bx
18843 46CA           F7E9                       imul	cx
18844                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18845 46CC           89C3                       mov	bx,ax
18846 46CE           8A46         0A            mov	al,$A[bp]
18847 46D1           30E4                       xor	ah,ah
18848 46D3           93                         xchg	ax,bx
18849 46D4           89D9                       mov	cx,bx
18850 46D6           F7E9                       imul	cx
18851                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18852 46D8           0246         04            add	al,4[bp]
18853 46DB           80D4                   00  adc	ah,*0
18854                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18855 46DE           8946         FE            mov	-2[bp],ax
18856                                           !BCC_EOS
18857                                           ! 2235  outw(0x3ce, 0x0205);
18858                                           ! Debug: list int = const $205 (used reg = )
18859 46E1           B8                   0205  mov	ax,#$205
18860 46E4           50                         push	ax
18861                                           ! Debug: list int = const $3CE (used reg = )
18862 46E5           B8                   03CE  mov	ax,#$3CE
18863 46E8           50                         push	ax
18864                                           ! Debug: func () void = outw+0 (used reg = )
18865 46E9           E8         353E            call	_outw
18866 46EC           83C4                   04  add	sp,*4
18867                                           !BCC_EOS
18868                                           ! 2236  for(i=0;i<cheight;i++)
18869                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18870 46EF           30C0                       xor	al,al
18871 46F1           8846         FD            mov	-3[bp],al
18872                                           !BCC_EOS
18873                                           !BCC_EOS
18874                                           ! 2237   {
18875 46F4           EB           31            jmp .B6
18876                       000046F6            .B7:
18877                                           ! 2238    memsetb(0xa000,dest+i*nbcols,attr,cols);
18878                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18879 46F6           8A46         08            mov	al,8[bp]
18880 46F9           30E4                       xor	ah,ah
18881 46FB           50                         push	ax
18882                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18883 46FC           8A46         0E            mov	al,$E[bp]
18884 46FF           30E4                       xor	ah,ah
18885 4701           50                         push	ax
18886                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18887 4702           8A46         0A            mov	al,$A[bp]
18888 4705           30E4                       xor	ah,ah
18889 4707           89C3                       mov	bx,ax
18890 4709           8A46         FD            mov	al,-3[bp]
18891 470C           30E4                       xor	ah,ah
18892 470E           89D9                       mov	cx,bx
18893 4710           F7E9                       imul	cx
18894                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18895                                           ! Debug: expression subtree swapping
18896 4712           0346         FE            add	ax,-2[bp]
18897                                           ! Debug: list unsigned int = ax+0 (used reg = )
18898 4715           50                         push	ax
18899                                           ! Debug: list unsigned int = const $A000 (used reg = )
18900 4716           B8                   A000  mov	ax,#$A000
18901 4719           50                         push	ax
18902                                           ! Debug: func () void = memsetb+0 (used reg = )
18903 471A           E8         33E7            call	_memsetb
18904 471D           83C4                   08  add	sp,*8
18905                                           !BCC_EOS
18906                                           ! 2239   }
18907                                           ! 2240  outw(0x3ce, 0x0005);
18908                       00004720            .B5:
18909                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18910 4720           8A46         FD            mov	al,-3[bp]
18911 4723           40                         inc	ax
18912 4724           8846         FD            mov	-3[bp],al
18913                       00004727            .B6:
18914                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18915 4727           8A46         FD            mov	al,-3[bp]
18916 472A           3A46         0C            cmp	al,$C[bp]
18917 472D           72           C7            jb 	.B7
18918                       0000472F            .B8:
18919                       0000472F            .B4:
18920                                           ! Debug: list int = const 5 (used reg = )
18921 472F           B8                   0005  mov	ax,*5
18922 4732           50                         push	ax
18923                                           ! Debug: list int = const $3CE (used reg = )
18924 4733           B8                   03CE  mov	ax,#$3CE
18925 4736           50                         push	ax
18926                                           ! Debug: func () void = outw+0 (used reg = )
18927 4737           E8         34F0            call	_outw
18928 473A           83C4                   04  add	sp,*4
18929                                           !BCC_EOS
18930                                           ! 2241 }
18931 473D           89EC                       mov	sp,bp
18932 473F           5D                         pop	bp
18933 4740           C3                         ret
18934                                           ! 2242 static void vgamem_copy_cga
18935                                           ! Register BX used in function vgamem_fill_pl4
18936                                           ! 2242 (xstart,ysrc,ydest,cols,nbcols,cheight)
18937                                           ! 2243 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18938                       00004741            _vgamem_copy_cga:
18939                                           !BCC_EOS
18940                                           !BCC_EOS
18941                                           !BCC_EOS
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           ! 2244 {
18946                                           ! 2245  Bit16u src,dest;
18947                                           !BCC_EOS
18948                                           ! 2246  Bit8u i;
18949                                           !BCC_EOS
18950                                           ! 2247  src=((ysrc*cheight*nbcols)>>1)+xstart;
18951 4741           55                         push	bp
18952 4742           89E5                       mov	bp,sp
18953 4744           83C4                   FA  add	sp,*-6
18954                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18955 4747           8A46         0E            mov	al,$E[bp]
18956 474A           30E4                       xor	ah,ah
18957 474C           89C3                       mov	bx,ax
18958 474E           8A46         06            mov	al,6[bp]
18959 4751           30E4                       xor	ah,ah
18960 4753           89D9                       mov	cx,bx
18961 4755           F7E9                       imul	cx
18962                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18963 4757           89C3                       mov	bx,ax
18964 4759           8A46         0C            mov	al,$C[bp]
18965 475C           30E4                       xor	ah,ah
18966 475E           93                         xchg	ax,bx
18967 475F           89D9                       mov	cx,bx
18968 4761           F7E9                       imul	cx
18969                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18970 4763           D1E8                       shr	ax,*1
18971                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18972 4765           0246         04            add	al,4[bp]
18973 4768           80D4                   00  adc	ah,*0
18974                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18975 476B           8946         FE            mov	-2[bp],ax
18976                                           !BCC_EOS
18977                                           ! 2248  dest=((ydest*cheight*nbcols)>>1)+xstart;
18978                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18979 476E           8A46         0E            mov	al,$E[bp]
18980 4771           30E4                       xor	ah,ah
18981 4773           89C3                       mov	bx,ax
18982 4775           8A46         08            mov	al,8[bp]
18983 4778           30E4                       xor	ah,ah
18984 477A           89D9                       mov	cx,bx
18985 477C           F7E9                       imul	cx
18986                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18987 477E           89C3                       mov	bx,ax
18988 4780           8A46         0C            mov	al,$C[bp]
18989 4783           30E4                       xor	ah,ah
18990 4785           93                         xchg	ax,bx
18991 4786           89D9                       mov	cx,bx
18992 4788           F7E9                       imul	cx
18993                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18994 478A           D1E8                       shr	ax,*1
18995                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18996 478C           0246         04            add	al,4[bp]
18997 478F           80D4                   00  adc	ah,*0
18998                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18999 4792           8946         FC            mov	-4[bp],ax
19000                                           !BCC_EOS
19001                                           ! 2249  for(i=0;i<cheight;i++)
19002                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19003 4795           30C0                       xor	al,al
19004 4797           8846         FB            mov	-5[bp],al
19005                                           !BCC_EOS
19006                                           !BCC_EOS
19007                                           ! 2250   {
19008 479A           E9         00A8            br 	.BB
19009                       0000479D            .BC:
19010                                           ! 2251    if (i & 1)
19011                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19012 479D           8A46         FB            mov	al,-5[bp]
19013 47A0           24                     01  and	al,*1
19014 47A2           84C0                       test	al,al
19015 47A4           74           56            je  	.BD
19016                       000047A6            .BE:
19017                                           ! 2252      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19018                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19019 47A6           8A46         0A            mov	al,$A[bp]
19020 47A9           30E4                       xor	ah,ah
19021 47AB           50                         push	ax
19022                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19023 47AC           8A46         FB            mov	al,-5[bp]
19024 47AF           30E4                       xor	ah,ah
19025 47B1           D1E8                       shr	ax,*1
19026                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19027 47B3           89C3                       mov	bx,ax
19028 47B5           8A46         0C            mov	al,$C[bp]
19029 47B8           30E4                       xor	ah,ah
19030 47BA           93                         xchg	ax,bx
19031 47BB           89D9                       mov	cx,bx
19032 47BD           F7E9                       imul	cx
19033 47BF           50                         push	ax
19034                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19035                                           ! Debug: expression subtree swapping
19036 47C0           8B46         FE            mov	ax,-2[bp]
19037                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19038 47C3           05                   2000  add	ax,#$2000
19039 47C6           0346         F6            add	ax,-$A[bp]
19040 47C9           44                         inc	sp
19041 47CA           44                         inc	sp
19042                                           ! Debug: list unsigned int = ax+0 (used reg = )
19043 47CB           50                         push	ax
19044                                           ! Debug: list unsigned int = const $B800 (used reg = )
19045 47CC           B8                   B800  mov	ax,#$B800
19046 47CF           50                         push	ax
19047                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19048 47D0           8A46         FB            mov	al,-5[bp]
19049 47D3           30E4                       xor	ah,ah
19050 47D5           D1E8                       shr	ax,*1
19051                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19052 47D7           89C3                       mov	bx,ax
19053 47D9           8A46         0C            mov	al,$C[bp]
19054 47DC           30E4                       xor	ah,ah
19055 47DE           93                         xchg	ax,bx
19056 47DF           89D9                       mov	cx,bx
19057 47E1           F7E9                       imul	cx
19058 47E3           50                         push	ax
19059                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19060                                           ! Debug: expression subtree swapping
19061 47E4           8B46         FC            mov	ax,-4[bp]
19062                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19063 47E7           05                   2000  add	ax,#$2000
19064 47EA           0346         F2            add	ax,-$E[bp]
19065 47ED           44                         inc	sp
19066 47EE           44                         inc	sp
19067                                           ! Debug: list unsigned int = ax+0 (used reg = )
19068 47EF           50                         push	ax
19069                                           ! Debug: list unsigned int = const $B800 (used reg = )
19070 47F0           B8                   B800  mov	ax,#$B800
19071 47F3           50                         push	ax
19072                                           ! Debug: func () void = memcpyb+0 (used reg = )
19073 47F4           E8         3357            call	_memcpyb
19074 47F7           83C4                   0A  add	sp,*$A
19075                                           !BCC_EOS
19076                                           ! 2253    else
19077                                           ! 2254      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19078 47FA           EB           42            jmp .BF
19079                       000047FC            .BD:
19080                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19081 47FC           8A46         0A            mov	al,$A[bp]
19082 47FF           30E4                       xor	ah,ah
19083 4801           50                         push	ax
19084                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19085 4802           8A46         FB            mov	al,-5[bp]
19086 4805           30E4                       xor	ah,ah
19087 4807           D1E8                       shr	ax,*1
19088                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19089 4809           89C3                       mov	bx,ax
19090 480B           8A46         0C            mov	al,$C[bp]
19091 480E           30E4                       xor	ah,ah
19092 4810           93                         xchg	ax,bx
19093 4811           89D9                       mov	cx,bx
19094 4813           F7E9                       imul	cx
19095                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19096                                           ! Debug: expression subtree swapping
19097 4815           0346         FE            add	ax,-2[bp]
19098                                           ! Debug: list unsigned int = ax+0 (used reg = )
19099 4818           50                         push	ax
19100                                           ! Debug: list unsigned int = const $B800 (used reg = )
19101 4819           B8                   B800  mov	ax,#$B800
19102 481C           50                         push	ax
19103                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19104 481D           8A46         FB            mov	al,-5[bp]
19105 4820           30E4                       xor	ah,ah
19106 4822           D1E8                       shr	ax,*1
19107                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19108 4824           89C3                       mov	bx,ax
19109 4826           8A46         0C            mov	al,$C[bp]
19110 4829           30E4                       xor	ah,ah
19111 482B           93                         xchg	ax,bx
19112 482C           89D9                       mov	cx,bx
19113 482E           F7E9                       imul	cx
19114                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19115                                           ! Debug: expression subtree swapping
19116 4830           0346         FC            add	ax,-4[bp]
19117                                           ! Debug: list unsigned int = ax+0 (used reg = )
19118 4833           50                         push	ax
19119                                           ! Debug: list unsigned int = const $B800 (used reg = )
19120 4834           B8                   B800  mov	ax,#$B800
19121 4837           50                         push	ax
19122                                           ! Debug: func () void = memcpyb+0 (used reg = )
19123 4838           E8         3313            call	_memcpyb
19124 483B           83C4                   0A  add	sp,*$A
19125                                           !BCC_EOS
19126                                           ! 2255   }
19127                       0000483E            .BF:
19128                                           ! 2256 }
19129                       0000483E            .BA:
19130                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19131 483E           8A46         FB            mov	al,-5[bp]
19132 4841           40                         inc	ax
19133 4842           8846         FB            mov	-5[bp],al
19134                       00004845            .BB:
19135                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19136 4845           8A46         FB            mov	al,-5[bp]
19137 4848           3A46         0E            cmp	al,$E[bp]
19138 484B         0F82         FF4E            blo 	.BC
19139                       0000484F            .C0:
19140                       0000484F            .B9:
19141 484F           89EC                       mov	sp,bp
19142 4851           5D                         pop	bp
19143 4852           C3                         ret
19144                                           ! 2257 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19145                                           ! Register BX used in function vgamem_copy_cga
19146                                           ! 2258 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19147                       00004853            _vgamem_fill_cga:
19148                                           !BCC_EOS
19149                                           !BCC_EOS
19150                                           !BCC_EOS
19151                                           !BCC_EOS
19152                                           !BCC_EOS
19153                                           !BCC_EOS
19154                                           ! 2259 {
19155                                           ! 2260  Bit16u dest;
19156                                           !BCC_EOS
19157                                           ! 2261  Bit8u i;
19158                                           !BCC_EOS
19159                                           ! 2262  dest=((ystart*cheight*nbcols)>>1)+xstart;
19160 4853           55                         push	bp
19161 4854           89E5                       mov	bp,sp
19162 4856           83C4                   FC  add	sp,*-4
19163                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19164 4859           8A46         0C            mov	al,$C[bp]
19165 485C           30E4                       xor	ah,ah
19166 485E           89C3                       mov	bx,ax
19167 4860           8A46         06            mov	al,6[bp]
19168 4863           30E4                       xor	ah,ah
19169 4865           89D9                       mov	cx,bx
19170 4867           F7E9                       imul	cx
19171                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19172 4869           89C3                       mov	bx,ax
19173 486B           8A46         0A            mov	al,$A[bp]
19174 486E           30E4                       xor	ah,ah
19175 4870           93                         xchg	ax,bx
19176 4871           89D9                       mov	cx,bx
19177 4873           F7E9                       imul	cx
19178                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19179 4875           D1E8                       shr	ax,*1
19180                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19181 4877           0246         04            add	al,4[bp]
19182 487A           80D4                   00  adc	ah,*0
19183                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19184 487D           8946         FE            mov	-2[bp],ax
19185                                           !BCC_EOS
19186                                           ! 2263  for(i=0;i<cheight;i++)
19187                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19188 4880           30C0                       xor	al,al
19189 4882           8846         FD            mov	-3[bp],al
19190                                           !BCC_EOS
19191                                           !BCC_EOS
19192                                           ! 2264   {
19193 4885           EB           75            jmp .C3
19194                       00004887            .C4:
19195                                           ! 2265    if (i & 1)
19196                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19197 4887           8A46         FD            mov	al,-3[bp]
19198 488A           24                     01  and	al,*1
19199 488C           84C0                       test	al,al
19200 488E           74           38            je  	.C5
19201                       00004890            .C6:
19202                                           ! 2266      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19203                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19204 4890           8A46         08            mov	al,8[bp]
19205 4893           30E4                       xor	ah,ah
19206 4895           50                         push	ax
19207                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19208 4896           8A46         0E            mov	al,$E[bp]
19209 4899           30E4                       xor	ah,ah
19210 489B           50                         push	ax
19211                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19212 489C           8A46         FD            mov	al,-3[bp]
19213 489F           30E4                       xor	ah,ah
19214 48A1           D1E8                       shr	ax,*1
19215                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19216 48A3           89C3                       mov	bx,ax
19217 48A5           8A46         0A            mov	al,$A[bp]
19218 48A8           30E4                       xor	ah,ah
19219 48AA           93                         xchg	ax,bx
19220 48AB           89D9                       mov	cx,bx
19221 48AD           F7E9                       imul	cx
19222 48AF           50                         push	ax
19223                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19224                                           ! Debug: expression subtree swapping
19225 48B0           8B46         FE            mov	ax,-2[bp]
19226                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19227 48B3           05                   2000  add	ax,#$2000
19228 48B6           0346         F6            add	ax,-$A[bp]
19229 48B9           44                         inc	sp
19230 48BA           44                         inc	sp
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 48BB           50                         push	ax
19233                                           ! Debug: list unsigned int = const $B800 (used reg = )
19234 48BC           B8                   B800  mov	ax,#$B800
19235 48BF           50                         push	ax
19236                                           ! Debug: func () void = memsetb+0 (used reg = )
19237 48C0           E8         3241            call	_memsetb
19238 48C3           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2267    else
19241                                           ! 2268      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19242 48C6           EB           2D            jmp .C7
19243                       000048C8            .C5:
19244                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19245 48C8           8A46         08            mov	al,8[bp]
19246 48CB           30E4                       xor	ah,ah
19247 48CD           50                         push	ax
19248                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19249 48CE           8A46         0E            mov	al,$E[bp]
19250 48D1           30E4                       xor	ah,ah
19251 48D3           50                         push	ax
19252                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19253 48D4           8A46         FD            mov	al,-3[bp]
19254 48D7           30E4                       xor	ah,ah
19255 48D9           D1E8                       shr	ax,*1
19256                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19257 48DB           89C3                       mov	bx,ax
19258 48DD           8A46         0A            mov	al,$A[bp]
19259 48E0           30E4                       xor	ah,ah
19260 48E2           93                         xchg	ax,bx
19261 48E3           89D9                       mov	cx,bx
19262 48E5           F7E9                       imul	cx
19263                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19264                                           ! Debug: expression subtree swapping
19265 48E7           0346         FE            add	ax,-2[bp]
19266                                           ! Debug: list unsigned int = ax+0 (used reg = )
19267 48EA           50                         push	ax
19268                                           ! Debug: list unsigned int = const $B800 (used reg = )
19269 48EB           B8                   B800  mov	ax,#$B800
19270 48EE           50                         push	ax
19271                                           ! Debug: func () void = memsetb+0 (used reg = )
19272 48EF           E8         3212            call	_memsetb
19273 48F2           83C4                   08  add	sp,*8
19274                                           !BCC_EOS
19275                                           ! 2269   }
19276                       000048F5            .C7:
19277                                           ! 2270 }
19278                       000048F5            .C2:
19279                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19280 48F5           8A46         FD            mov	al,-3[bp]
19281 48F8           40                         inc	ax
19282 48F9           8846         FD            mov	-3[bp],al
19283                       000048FC            .C3:
19284                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19285 48FC           8A46         FD            mov	al,-3[bp]
19286 48FF           3A46         0C            cmp	al,$C[bp]
19287 4902           72           83            jb 	.C4
19288                       00004904            .C8:
19289                       00004904            .C1:
19290 4904           89EC                       mov	sp,bp
19291 4906           5D                         pop	bp
19292 4907           C3                         ret
19293                                           ! 2271 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19294                                           ! Register BX used in function vgamem_fill_cga
19295                                           ! 2272 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19296                       00004908            _biosfn_scroll:
19297                                           !BCC_EOS
19298                                           !BCC_EOS
19299                                           !BCC_EOS
19300                                           !BCC_EOS
19301                                           !BCC_EOS
19302                                           !BCC_EOS
19303                                           !BCC_EOS
19304                                           !BCC_EOS
19305                                           ! 2273 {
19306                                           ! 2274  Bit8u mode,line,cheight,bpp,cols;
19307                                           !BCC_EOS
19308                                           ! 2275  Bit16u nbcols,nbrows,i;
19309                                           !BCC_EOS
19310                                           ! 2276  Bit16u address;
19311                                           !BCC_EOS
19312                                           ! 2277  if(rul>rlr)return;
19313 4908           55                         push	bp
19314 4909           89E5                       mov	bp,sp
19315 490B           83C4                   F2  add	sp,*-$E
19316                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19317 490E           8A46         08            mov	al,8[bp]
19318 4911           3A46         0C            cmp	al,$C[bp]
19319 4914           76           04            jbe 	.C9
19320                       00004916            .CA:
19321 4916           89EC                       mov	sp,bp
19322 4918           5D                         pop	bp
19323 4919           C3                         ret
19324                                           !BCC_EOS
19325                                           ! 2278  if(cul>clr)return;
19326                       0000491A            .C9:
19327                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19328 491A           8A46         0A            mov	al,$A[bp]
19329 491D           3A46         0E            cmp	al,$E[bp]
19330 4920           76           04            jbe 	.CB
19331                       00004922            .CC:
19332 4922           89EC                       mov	sp,bp
19333 4924           5D                         pop	bp
19334 4925           C3                         ret
19335                                           !BCC_EOS
19336                                           ! 2279  mode=read_byte(0x40,0x49);
19337                       00004926            .CB:
19338                                           ! Debug: list int = const $49 (used reg = )
19339 4926           B8                   0049  mov	ax,*$49
19340 4929           50                         push	ax
19341                                           ! Debug: list int = const $40 (used reg = )
19342 492A           B8                   0040  mov	ax,*$40
19343 492D           50                         push	ax
19344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19345 492E           E8         327D            call	_read_byte
19346 4931           83C4                   04  add	sp,*4
19347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19348 4934           8846         FF            mov	-1[bp],al
19349                                           !BCC_EOS
19350                                           ! 2280  line=find_vga_entry(mode);
19351                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19352 4937           8A46         FF            mov	al,-1[bp]
19353 493A           30E4                       xor	ah,ah
19354 493C           50                         push	ax
19355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19356 493D           E8         3182            call	_find_vga_entry
19357 4940           44                         inc	sp
19358 4941           44                         inc	sp
19359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19360 4942           8846         FE            mov	-2[bp],al
19361                                           !BCC_EOS
19362                                           ! 2281  if(line==0xFF)return;
19363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19364 4945           8A46         FE            mov	al,-2[bp]
19365 4948           3C                     FF  cmp	al,#$FF
19366 494A           75           04            jne 	.CD
19367                       0000494C            .CE:
19368 494C           89EC                       mov	sp,bp
19369 494E           5D                         pop	bp
19370 494F           C3                         ret
19371                                           !BCC_EOS
19372                                           ! 2282  nbrows=read_byte(0x40,0x84)+1;
19373                       00004950            .CD:
19374                                           ! Debug: list int = const $84 (used reg = )
19375 4950           B8                   0084  mov	ax,#$84
19376 4953           50                         push	ax
19377                                           ! Debug: list int = const $40 (used reg = )
19378 4954           B8                   0040  mov	ax,*$40
19379 4957           50                         push	ax
19380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19381 4958           E8         3253            call	_read_byte
19382 495B           83C4                   04  add	sp,*4
19383                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19384 495E           30E4                       xor	ah,ah
19385                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19386 4960           40                         inc	ax
19387 4961           8946         F6            mov	-$A[bp],ax
19388                                           !BCC_EOS
19389                                           ! 2283  nbcols=read_word(0x40,0x4A);
19390                                           ! Debug: list int = const $4A (used reg = )
19391 4964           B8                   004A  mov	ax,*$4A
19392 4967           50                         push	ax
19393                                           ! Debug: list int = const $40 (used reg = )
19394 4968           B8                   0040  mov	ax,*$40
19395 496B           50                         push	ax
19396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19397 496C           E8         3252            call	_read_word
19398 496F           83C4                   04  add	sp,*4
19399                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19400 4972           8946         F8            mov	-8[bp],ax
19401                                           !BCC_EOS
19402                                           ! 2284  if(page==0xFF)
19403                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19404 4975           8A46         10            mov	al,$10[bp]
19405 4978           3C                     FF  cmp	al,#$FF
19406 497A           75           11            jne 	.CF
19407                       0000497C            .D0:
19408                                           ! 2285   page=read_byte(0x40,0x62);
19409                                           ! Debug: list int = const $62 (used reg = )
19410 497C           B8                   0062  mov	ax,*$62
19411 497F           50                         push	ax
19412                                           ! Debug: list int = const $40 (used reg = )
19413 4980           B8                   0040  mov	ax,*$40
19414 4983           50                         push	ax
19415                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19416 4984           E8         3227            call	_read_byte
19417 4987           83C4                   04  add	sp,*4
19418                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19419 498A           8846         10            mov	$10[bp],al
19420                                           !BCC_EOS
19421                                           ! 2286  if(rlr>=nbrows)rlr=nbrows-1;
19422                       0000498D            .CF:
19423                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19424 498D           8A46         0C            mov	al,$C[bp]
19425 4990           30E4                       xor	ah,ah
19426 4992           3B46         F6            cmp	ax,-$A[bp]
19427 4995           72           07            jb  	.D1
19428                       00004997            .D2:
19429                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19430 4997           8B46         F6            mov	ax,-$A[bp]
19431                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19432 499A           48                         dec	ax
19433 499B           8846         0C            mov	$C[bp],al
19434                                           !BCC_EOS
19435                                           ! 2287  if(clr>=nbcols)clr=nbcols-1;
19436                       0000499E            .D1:
19437                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19438 499E           8A46         0E            mov	al,$E[bp]
19439 49A1           30E4                       xor	ah,ah
19440 49A3           3B46         F8            cmp	ax,-8[bp]
19441 49A6           72           07            jb  	.D3
19442                       000049A8            .D4:
19443                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19444 49A8           8B46         F8            mov	ax,-8[bp]
19445                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19446 49AB           48                         dec	ax
19447 49AC           8846         0E            mov	$E[bp],al
19448                                           !BCC_EOS
19449                                           ! 2288  if(nblines>nbrows)nblines=0;
19450                       000049AF            .D3:
19451                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19452 49AF           8A46         04            mov	al,4[bp]
19453 49B2           30E4                       xor	ah,ah
19454 49B4           3B46         F6            cmp	ax,-$A[bp]
19455 49B7           76           05            jbe 	.D5
19456                       000049B9            .D6:
19457                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 49B9           30C0                       xor	al,al
19459 49BB           8846         04            mov	4[bp],al
19460                                           !BCC_EOS
19461                                           ! 2289  cols=clr-cul+1;
19462                       000049BE            .D5:
19463                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19464 49BE           8A46         0E            mov	al,$E[bp]
19465 49C1           30E4                       xor	ah,ah
19466 49C3           2A46         0A            sub	al,$A[bp]
19467 49C6           80DC                   00  sbb	ah,*0
19468                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19469                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19470 49C9           40                         inc	ax
19471 49CA           8846         FB            mov	-5[bp],al
19472                                           !BCC_EOS
19473                                           ! 2290  if(vga_modes[line].class==0x00)
19474                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19475 49CD           8A46         FE            mov	al,-2[bp]
19476 49D0           30E4                       xor	ah,ah
19477 49D2           B1                     03  mov	cl,*3
19478 49D4           D3E0                       shl	ax,cl
19479 49D6           89C3                       mov	bx,ax
19480 49D8           81C3                 01F8  add	bx,#_vga_modes
19481                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19482 49DC           8A47         01            mov	al,1[bx]
19483 49DF           84C0                       test	al,al
19484 49E1         0F85         0250            bne 	.D7
19485                       000049E5            .D8:
19486                                           ! 2291   {
19487                                           ! 2292    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19488                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 49E5           8B46         F8            mov	ax,-8[bp]
19490 49E8           8B4E         F6            mov	cx,-$A[bp]
19491 49EB           F7E9                       imul	cx
19492                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19493 49ED           D1E0                       shl	ax,*1
19494                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19495 49EF           0C                     FF  or	al,#$FF
19496                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19497                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19498 49F1           89C3                       mov	bx,ax
19499 49F3           8A46         10            mov	al,$10[bp]
19500 49F6           30E4                       xor	ah,ah
19501 49F8           93                         xchg	ax,bx
19502 49F9           40                         inc	ax
19503 49FA           89D9                       mov	cx,bx
19504 49FC           F7E9                       imul	cx
19505                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19506 49FE           8946         F2            mov	-$E[bp],ax
19507                                           !BCC_EOS
19508                                           ! 2293    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19509                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19510 4A01           8A46         04            mov	al,4[bp]
19511 4A04           84C0                       test	al,al
19512 4A06           75           67            jne 	.D9
19513                       00004A08            .DE:
19514                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19515 4A08           8A46         08            mov	al,8[bp]
19516 4A0B           84C0                       test	al,al
19517 4A0D           75           60            jne 	.D9
19518                       00004A0F            .DD:
19519                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19520 4A0F           8A46         0A            mov	al,$A[bp]
19521 4A12           84C0                       test	al,al
19522 4A14           75           59            jne 	.D9
19523                       00004A16            .DC:
19524                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19525 4A16           8B46         F6            mov	ax,-$A[bp]
19526                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19527                                           ! Debug: expression subtree swapping
19528 4A19           48                         dec	ax
19529 4A1A           50                         push	ax
19530 4A1B           8A46         0C            mov	al,$C[bp]
19531 4A1E           30E4                       xor	ah,ah
19532 4A20           3B46         F0            cmp	ax,-$10[bp]
19533 4A23           8D66         F2            lea	sp,-$E[bp]
19534 4A26           75           47            jne 	.D9
19535                       00004A28            .DB:
19536                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19537 4A28           8B46         F8            mov	ax,-8[bp]
19538                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19539                                           ! Debug: expression subtree swapping
19540 4A2B           48                         dec	ax
19541 4A2C           50                         push	ax
19542 4A2D           8A46         0E            mov	al,$E[bp]
19543 4A30           30E4                       xor	ah,ah
19544 4A32           3B46         F0            cmp	ax,-$10[bp]
19545 4A35           8D66         F2            lea	sp,-$E[bp]
19546 4A38           75           35            jne 	.D9
19547                       00004A3A            .DA:
19548                                           ! 2294     {
19549                                           ! 2295      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19550                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A3A           8B46         F6            mov	ax,-$A[bp]
19552 4A3D           8B4E         F8            mov	cx,-8[bp]
19553 4A40           F7E9                       imul	cx
19554                                           ! Debug: list unsigned int = ax+0 (used reg = )
19555 4A42           50                         push	ax
19556                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19557 4A43           8A46         06            mov	al,6[bp]
19558 4A46           30E4                       xor	ah,ah
19559                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19560 4A48           B9                   0100  mov	cx,#$100
19561 4A4B           F7E9                       imul	cx
19562                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19563                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19564 4A4D           05                   0020  add	ax,*$20
19565 4A50           50                         push	ax
19566                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19567 4A51           FF76         F2            push	-$E[bp]
19568                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19569 4A54           8A46         FE            mov	al,-2[bp]
19570 4A57           30E4                       xor	ah,ah
19571 4A59           B1                     03  mov	cl,*3
19572 4A5B           D3E0                       shl	ax,cl
19573 4A5D           89C3                       mov	bx,ax
19574 4A5F           81C3                 01F8  add	bx,#_vga_modes
19575                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19576 4A63           FF77         04            push	4[bx]
19577                                           ! Debug: func () void = memsetw+0 (used reg = )
19578 4A66           E8         30C0            call	_memsetw
19579 4A69           83C4                   08  add	sp,*8
19580                                           !BCC_EOS
19581                                           ! 2296     }
19582                                           ! 2297    else
19583                                           ! 2298     {
19584 4A6C           E9         01C3            br 	.DF
19585                       00004A6F            .D9:
19586                                           ! 2299      if(dir==1)
19587                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19588 4A6F           8A46         12            mov	al,$12[bp]
19589 4A72           3C                     01  cmp	al,*1
19590 4A74         0F85         00DC            bne 	.E0
19591                       00004A78            .E1:
19592                                           ! 2300       {for(i=rul;i<=rlr;i++)
19593                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19594 4A78           8A46         08            mov	al,8[bp]
19595 4A7B           30E4                       xor	ah,ah
19596 4A7D           8946         F4            mov	-$C[bp],ax
19597                                           !BCC_EOS
19598                                           !BCC_EOS
19599                                           ! 2301         {
19600 4A80           E9         00C2            br 	.E4
19601                       00004A83            .E5:
19602                                           ! 2302          if((i+nblines>rlr)||(nblines==0))
19603                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19604 4A83           8B46         F4            mov	ax,-$C[bp]
19605 4A86           0246         04            add	al,4[bp]
19606 4A89           80D4                   00  adc	ah,*0
19607                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19608 4A8C           50                         push	ax
19609 4A8D           8A46         0C            mov	al,$C[bp]
19610 4A90           30E4                       xor	ah,ah
19611 4A92           3B46         F0            cmp	ax,-$10[bp]
19612 4A95           8D66         F2            lea	sp,-$E[bp]
19613 4A98           72           07            jb  	.E7
19614                       00004A9A            .E8:
19615                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19616 4A9A           8A46         04            mov	al,4[bp]
19617 4A9D           84C0                       test	al,al
19618 4A9F           75           42            jne 	.E6
19619                       00004AA1            .E7:
19620                                           ! 2303           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19621                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19622 4AA1           8A46         FB            mov	al,-5[bp]
19623 4AA4           30E4                       xor	ah,ah
19624 4AA6           50                         push	ax
19625                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19626 4AA7           8A46         06            mov	al,6[bp]
19627 4AAA           30E4                       xor	ah,ah
19628                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19629 4AAC           B9                   0100  mov	cx,#$100
19630 4AAF           F7E9                       imul	cx
19631                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19632                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19633 4AB1           05                   0020  add	ax,*$20
19634 4AB4           50                         push	ax
19635                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19636 4AB5           8B46         F4            mov	ax,-$C[bp]
19637 4AB8           8B4E         F8            mov	cx,-8[bp]
19638 4ABB           F7E9                       imul	cx
19639                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19640 4ABD           0246         0A            add	al,$A[bp]
19641 4AC0           80D4                   00  adc	ah,*0
19642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19643 4AC3           D1E0                       shl	ax,*1
19644                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AC5           0346         F2            add	ax,-$E[bp]
19647                                           ! Debug: list unsigned int = ax+0 (used reg = )
19648 4AC8           50                         push	ax
19649                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19650 4AC9           8A46         FE            mov	al,-2[bp]
19651 4ACC           30E4                       xor	ah,ah
19652 4ACE           B1                     03  mov	cl,*3
19653 4AD0           D3E0                       shl	ax,cl
19654 4AD2           89C3                       mov	bx,ax
19655 4AD4           81C3                 01F8  add	bx,#_vga_modes
19656                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19657 4AD8           FF77         04            push	4[bx]
19658                                           ! Debug: func () void = memsetw+0 (used reg = )
19659 4ADB           E8         304B            call	_memsetw
19660 4ADE           83C4                   08  add	sp,*8
19661                                           !BCC_EOS
19662                                           ! 2304          else
19663                                           ! 2305           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19664 4AE1           EB           5B            jmp .E9
19665                       00004AE3            .E6:
19666                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19667 4AE3           8A46         FB            mov	al,-5[bp]
19668 4AE6           30E4                       xor	ah,ah
19669 4AE8           50                         push	ax
19670                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19671 4AE9           8B46         F4            mov	ax,-$C[bp]
19672 4AEC           0246         04            add	al,4[bp]
19673 4AEF           80D4                   00  adc	ah,*0
19674                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19675 4AF2           8B4E         F8            mov	cx,-8[bp]
19676 4AF5           F7E9                       imul	cx
19677                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19678 4AF7           0246         0A            add	al,$A[bp]
19679 4AFA           80D4                   00  adc	ah,*0
19680                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19681 4AFD           D1E0                       shl	ax,*1
19682                                           ! Debug: list unsigned int = ax+0 (used reg = )
19683 4AFF           50                         push	ax
19684                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19685 4B00           8A46         FE            mov	al,-2[bp]
19686 4B03           30E4                       xor	ah,ah
19687 4B05           B1                     03  mov	cl,*3
19688 4B07           D3E0                       shl	ax,cl
19689 4B09           89C3                       mov	bx,ax
19690 4B0B           81C3                 01F8  add	bx,#_vga_modes
19691                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19692 4B0F           FF77         04            push	4[bx]
19693                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19694 4B12           8B46         F4            mov	ax,-$C[bp]
19695 4B15           8B4E         F8            mov	cx,-8[bp]
19696 4B18           F7E9                       imul	cx
19697                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19698 4B1A           0246         0A            add	al,$A[bp]
19699 4B1D           80D4                   00  adc	ah,*0
19700                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19701 4B20           D1E0                       shl	ax,*1
19702                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19703                                           ! Debug: expression subtree swapping
19704 4B22           0346         F2            add	ax,-$E[bp]
19705                                           ! Debug: list unsigned int = ax+0 (used reg = )
19706 4B25           50                         push	ax
19707                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B26           8A46         FE            mov	al,-2[bp]
19709 4B29           30E4                       xor	ah,ah
19710 4B2B           B1                     03  mov	cl,*3
19711 4B2D           D3E0                       shl	ax,cl
19712 4B2F           89C3                       mov	bx,ax
19713 4B31           81C3                 01F8  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B35           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memcpyw+0 (used reg = )
19717 4B38           E8         3043            call	_memcpyw
19718 4B3B           83C4                   0A  add	sp,*$A
19719                                           !BCC_EOS
19720                                           ! 2306         }
19721                       00004B3E            .E9:
19722                                           ! 2307       }
19723                       00004B3E            .E3:
19724                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19725 4B3E           8B46         F4            mov	ax,-$C[bp]
19726 4B41           40                         inc	ax
19727 4B42           8946         F4            mov	-$C[bp],ax
19728                       00004B45            .E4:
19729                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4B45           8A46         0C            mov	al,$C[bp]
19731 4B48           30E4                       xor	ah,ah
19732 4B4A           3B46         F4            cmp	ax,-$C[bp]
19733 4B4D         0F83         FF32            bhis	.E5
19734                       00004B51            .EA:
19735                       00004B51            .E2:
19736                                           ! 2308      else
19737                                           ! 2309       {for(i=rlr;i>=rul;i--)
19738 4B51           E9         00DE            br 	.EB
19739                       00004B54            .E0:
19740                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19741 4B54           8A46         0C            mov	al,$C[bp]
19742 4B57           30E4                       xor	ah,ah
19743 4B59           8946         F4            mov	-$C[bp],ax
19744                                           !BCC_EOS
19745                                           !BCC_EOS
19746                                           ! 2310         {
19747 4B5C           E9         00C7            br 	.EE
19748                       00004B5F            .EF:
19749                                           ! 2311         
19750                                           ! 2311  if((i<rul+nblines)||(nblines==0))
19751                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19752 4B5F           8A46         08            mov	al,8[bp]
19753 4B62           30E4                       xor	ah,ah
19754 4B64           0246         04            add	al,4[bp]
19755 4B67           80D4                   00  adc	ah,*0
19756                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19757 4B6A           3B46         F4            cmp	ax,-$C[bp]
19758 4B6D           77           07            ja  	.F1
19759                       00004B6F            .F2:
19760                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19761 4B6F           8A46         04            mov	al,4[bp]
19762 4B72           84C0                       test	al,al
19763 4B74           75           42            jne 	.F0
19764                       00004B76            .F1:
19765                                           ! 2312           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19766                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19767 4B76           8A46         FB            mov	al,-5[bp]
19768 4B79           30E4                       xor	ah,ah
19769 4B7B           50                         push	ax
19770                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19771 4B7C           8A46         06            mov	al,6[bp]
19772 4B7F           30E4                       xor	ah,ah
19773                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19774 4B81           B9                   0100  mov	cx,#$100
19775 4B84           F7E9                       imul	cx
19776                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19777                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19778 4B86           05                   0020  add	ax,*$20
19779 4B89           50                         push	ax
19780                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19781 4B8A           8B46         F4            mov	ax,-$C[bp]
19782 4B8D           8B4E         F8            mov	cx,-8[bp]
19783 4B90           F7E9                       imul	cx
19784                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19785 4B92           0246         0A            add	al,$A[bp]
19786 4B95           80D4                   00  adc	ah,*0
19787                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19788 4B98           D1E0                       shl	ax,*1
19789                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19790                                           ! Debug: expression subtree swapping
19791 4B9A           0346         F2            add	ax,-$E[bp]
19792                                           ! Debug: list unsigned int = ax+0 (used reg = )
19793 4B9D           50                         push	ax
19794                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19795 4B9E           8A46         FE            mov	al,-2[bp]
19796 4BA1           30E4                       xor	ah,ah
19797 4BA3           B1                     03  mov	cl,*3
19798 4BA5           D3E0                       shl	ax,cl
19799 4BA7           89C3                       mov	bx,ax
19800 4BA9           81C3                 01F8  add	bx,#_vga_modes
19801                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19802 4BAD           FF77         04            push	4[bx]
19803                                           ! Debug: func () void = memsetw+0 (used reg = )
19804 4BB0           E8         2F76            call	_memsetw
19805 4BB3           83C4                   08  add	sp,*8
19806                                           !BCC_EOS
19807                                           ! 2313          else
19808                                           ! 2314           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19809 4BB6           EB           5B            jmp .F3
19810                       00004BB8            .F0:
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BB8           8A46         FB            mov	al,-5[bp]
19813 4BBB           30E4                       xor	ah,ah
19814 4BBD           50                         push	ax
19815                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19816 4BBE           8B46         F4            mov	ax,-$C[bp]
19817 4BC1           2A46         04            sub	al,4[bp]
19818 4BC4           80DC                   00  sbb	ah,*0
19819                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19820 4BC7           8B4E         F8            mov	cx,-8[bp]
19821 4BCA           F7E9                       imul	cx
19822                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19823 4BCC           0246         0A            add	al,$A[bp]
19824 4BCF           80D4                   00  adc	ah,*0
19825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19826 4BD2           D1E0                       shl	ax,*1
19827                                           ! Debug: list unsigned int = ax+0 (used reg = )
19828 4BD4           50                         push	ax
19829                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19830 4BD5           8A46         FE            mov	al,-2[bp]
19831 4BD8           30E4                       xor	ah,ah
19832 4BDA           B1                     03  mov	cl,*3
19833 4BDC           D3E0                       shl	ax,cl
19834 4BDE           89C3                       mov	bx,ax
19835 4BE0           81C3                 01F8  add	bx,#_vga_modes
19836                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19837 4BE4           FF77         04            push	4[bx]
19838                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19839 4BE7           8B46         F4            mov	ax,-$C[bp]
19840 4BEA           8B4E         F8            mov	cx,-8[bp]
19841 4BED           F7E9                       imul	cx
19842                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19843 4BEF           0246         0A            add	al,$A[bp]
19844 4BF2           80D4                   00  adc	ah,*0
19845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19846 4BF5           D1E0                       shl	ax,*1
19847                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19848                                           ! Debug: expression subtree swapping
19849 4BF7           0346         F2            add	ax,-$E[bp]
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4BFA           50                         push	ax
19852                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19853 4BFB           8A46         FE            mov	al,-2[bp]
19854 4BFE           30E4                       xor	ah,ah
19855 4C00           B1                     03  mov	cl,*3
19856 4C02           D3E0                       shl	ax,cl
19857 4C04           89C3                       mov	bx,ax
19858 4C06           81C3                 01F8  add	bx,#_vga_modes
19859                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19860 4C0A           FF77         04            push	4[bx]
19861                                           ! Debug: func () void = memcpyw+0 (used reg = )
19862 4C0D           E8         2F6E            call	_memcpyw
19863 4C10           83C4                   0A  add	sp,*$A
19864                                           !BCC_EOS
19865                                           ! 2315          if (i>rlr) break;
19866                       00004C13            .F3:
19867                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19868 4C13           8A46         0C            mov	al,$C[bp]
19869 4C16           30E4                       xor	ah,ah
19870 4C18           3B46         F4            cmp	ax,-$C[bp]
19871 4C1B           73           02            jae 	.F4
19872                       00004C1D            .F5:
19873 4C1D           EB           13            jmp .EC
19874                                           !BCC_EOS
19875                                           ! 2316         }
19876                       00004C1F            .F4:
19877                                           ! 2317       }
19878                       00004C1F            .ED:
19879                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19880 4C1F           8B46         F4            mov	ax,-$C[bp]
19881 4C22           48                         dec	ax
19882 4C23           8946         F4            mov	-$C[bp],ax
19883                       00004C26            .EE:
19884                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19885 4C26           8A46         08            mov	al,8[bp]
19886 4C29           30E4                       xor	ah,ah
19887 4C2B           3B46         F4            cmp	ax,-$C[bp]
19888 4C2E         0F86         FF2D            blos	.EF
19889                       00004C32            .F6:
19890                       00004C32            .EC:
19891                                           ! 2318     }
19892                       00004C32            .EB:
19893                                           ! 2319   }
19894                       00004C32            .DF:
19895                                           ! 2320  else
19896                                           ! 2321   {
19897 4C32           E9         03D5            br 	.F7
19898                       00004C35            .D7:
19899                                           ! 2322    cheight=video_param_table[line_to_vpti[line]].cheight;
19900                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19901 4C35           8A46         FE            mov	al,-2[bp]
19902 4C38           30E4                       xor	ah,ah
19903 4C3A           89C3                       mov	bx,ax
19904                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19905 4C3C           8A87       0278            mov	al,_line_to_vpti[bx]
19906 4C40           30E4                       xor	ah,ah
19907 4C42           B1                     06  mov	cl,*6
19908 4C44           D3E0                       shl	ax,cl
19909 4C46           89C3                       mov	bx,ax
19910 4C48           81C3                 028C  add	bx,#_video_param_table
19911                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19912 4C4C           8A47         02            mov	al,2[bx]
19913 4C4F           8846         FD            mov	-3[bp],al
19914                                           !BCC_EOS
19915                                           ! 2323    switch(vga_modes[line].memmodel)
19916                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19917 4C52           8A46         FE            mov	al,-2[bp]
19918 4C55           30E4                       xor	ah,ah
19919 4C57           B1                     03  mov	cl,*3
19920 4C59           D3E0                       shl	ax,cl
19921 4C5B           89C3                       mov	bx,ax
19922 4C5D           81C3                 01F8  add	bx,#_vga_modes
19923 4C61           8A47         02            mov	al,2[bx]
19924                                           ! 2324     {
19925 4C64           E9         0391            br 	.FA
19926                                           ! 2325      case 0x04:
19927                                           ! 2326      case 0x03:
19928                       00004C67            .FB:
19929                                           ! 2327        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19930                       00004C67            .FC:
19931                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19932 4C67           8A46         04            mov	al,4[bp]
19933 4C6A           84C0                       test	al,al
19934 4C6C         0F85         0089            bne 	.FD
19935                       00004C70            .102:
19936                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19937 4C70           8A46         08            mov	al,8[bp]
19938 4C73           84C0                       test	al,al
19939 4C75         0F85         0080            bne 	.FD
19940                       00004C79            .101:
19941                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19942 4C79           8A46         0A            mov	al,$A[bp]
19943 4C7C           84C0                       test	al,al
19944 4C7E           75           79            jne 	.FD
19945                       00004C80            .100:
19946                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19947 4C80           8B46         F6            mov	ax,-$A[bp]
19948                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19949                                           ! Debug: expression subtree swapping
19950 4C83           48                         dec	ax
19951 4C84           50                         push	ax
19952 4C85           8A46         0C            mov	al,$C[bp]
19953 4C88           30E4                       xor	ah,ah
19954 4C8A           3B46         F0            cmp	ax,0+..FFFC[bp]
19955 4C8D           8D66         F2            lea	sp,2+..FFFC[bp]
19956 4C90           75           67            jne 	.FD
19957                       00004C92            .FF:
19958                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19959 4C92           8B46         F8            mov	ax,-8[bp]
19960                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19961                                           ! Debug: expression subtree swapping
19962 4C95           48                         dec	ax
19963 4C96           50                         push	ax
19964 4C97           8A46         0E            mov	al,$E[bp]
19965 4C9A           30E4                       xor	ah,ah
19966 4C9C           3B46         F0            cmp	ax,0+..FFFC[bp]
19967 4C9F           8D66         F2            lea	sp,2+..FFFC[bp]
19968 4CA2           75           55            jne 	.FD
19969                       00004CA4            .FE:
19970                                           ! 2328         {
19971                                           ! 2329          outw(0x3ce, 0x0205);
19972                                           ! Debug: list int = const $205 (used reg = )
19973 4CA4           B8                   0205  mov	ax,#$205
19974 4CA7           50                         push	ax
19975                                           ! Debug: list int = const $3CE (used reg = )
19976 4CA8           B8                   03CE  mov	ax,#$3CE
19977 4CAB           50                         push	ax
19978                                           ! Debug: func () void = outw+0 (used reg = )
19979 4CAC           E8         2F7B            call	_outw
19980 4CAF           83C4                   04  add	sp,*4
19981                                           !BCC_EOS
19982                                           ! 2330          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19983                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19984 4CB2           8B46         F6            mov	ax,-$A[bp]
19985 4CB5           8B4E         F8            mov	cx,-8[bp]
19986 4CB8           F7E9                       imul	cx
19987                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19988 4CBA           89C3                       mov	bx,ax
19989 4CBC           8A46         FD            mov	al,-3[bp]
19990 4CBF           30E4                       xor	ah,ah
19991 4CC1           93                         xchg	ax,bx
19992 4CC2           89D9                       mov	cx,bx
19993 4CC4           F7E9                       imul	cx
19994                                           ! Debug: list unsigned int = ax+0 (used reg = )
19995 4CC6           50                         push	ax
19996                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19997 4CC7           8A46         06            mov	al,6[bp]
19998 4CCA           30E4                       xor	ah,ah
19999 4CCC           50                         push	ax
20000                                           ! Debug: list int = const 0 (used reg = )
20001 4CCD           31C0                       xor	ax,ax
20002 4CCF           50                         push	ax
20003                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20004 4CD0           8A46         FE            mov	al,-2[bp]
20005 4CD3           30E4                       xor	ah,ah
20006 4CD5           B1                     03  mov	cl,*3
20007 4CD7           D3E0                       shl	ax,cl
20008 4CD9           89C3                       mov	bx,ax
20009 4CDB           81C3                 01F8  add	bx,#_vga_modes
20010                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20011 4CDF           FF77         04            push	4[bx]
20012                                           ! Debug: func () void = memsetb+0 (used reg = )
20013 4CE2           E8         2E1F            call	_memsetb
20014 4CE5           83C4                   08  add	sp,*8
20015                                           !BCC_EOS
20016                                           ! 2331          outw(0x3ce, 0x0005);
20017                                           ! Debug: list int = const 5 (used reg = )
20018 4CE8           B8                   0005  mov	ax,*5
20019 4CEB           50                         push	ax
20020                                           ! Debug: list int = const $3CE (used reg = )
20021 4CEC           B8                   03CE  mov	ax,#$3CE
20022 4CEF           50                         push	ax
20023                                           ! Debug: func () void = outw+0 (used reg = )
20024 4CF0           E8         2F37            call	_outw
20025 4CF3           83C4                   04  add	sp,*4
20026                                           !BCC_EOS
20027                                           ! 2332         }
20028                                           ! 2333        else
20029                                           ! 2334         {
20030 4CF6           E9         0121            br 	.103
20031                       00004CF9            .FD:
20032                                           ! 2335          if(dir==1)
20033                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20034 4CF9           8A46         12            mov	al,$12[bp]
20035 4CFC           3C                     01  cmp	al,*1
20036 4CFE         0F85         008A            bne 	.104
20037                       00004D02            .105:
20038                                           ! 2336           {for(i=rul;i<=rlr;i++)
20039                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20040 4D02           8A46         08            mov	al,8[bp]
20041 4D05           30E4                       xor	ah,ah
20042 4D07           8946         F4            mov	-$C[bp],ax
20043                                           !BCC_EOS
20044                                           !BCC_EOS
20045                                           ! 2337             {
20046 4D0A           EB           73            jmp .108
20047                       00004D0C            .109:
20048                                           ! 2338              if((i+nblines>rlr)||(nblines==0))
20049                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20050 4D0C           8B46         F4            mov	ax,-$C[bp]
20051 4D0F           0246         04            add	al,4[bp]
20052 4D12           80D4                   00  adc	ah,*0
20053                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20054 4D15           50                         push	ax
20055 4D16           8A46         0C            mov	al,$C[bp]
20056 4D19           30E4                       xor	ah,ah
20057 4D1B           3B46         F0            cmp	ax,0+..FFFC[bp]
20058 4D1E           8D66         F2            lea	sp,2+..FFFC[bp]
20059 4D21           72           07            jb  	.10B
20060                       00004D23            .10C:
20061                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20062 4D23           8A46         04            mov	al,4[bp]
20063 4D26           84C0                       test	al,al
20064 4D28           75           26            jne 	.10A
20065                       00004D2A            .10B:
20066                                           ! 2339               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20067                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20068 4D2A           8A46         06            mov	al,6[bp]
20069 4D2D           30E4                       xor	ah,ah
20070 4D2F           50                         push	ax
20071                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20072 4D30           8A46         FD            mov	al,-3[bp]
20073 4D33           30E4                       xor	ah,ah
20074 4D35           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20076 4D36           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20078 4D39           8A46         FB            mov	al,-5[bp]
20079 4D3C           30E4                       xor	ah,ah
20080 4D3E           50                         push	ax
20081                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20082 4D3F           FF76         F4            push	-$C[bp]
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4D42           8A46         0A            mov	al,$A[bp]
20085 4D45           30E4                       xor	ah,ah
20086 4D47           50                         push	ax
20087                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20088 4D48           E8         F96B            call	_vgamem_fill_pl4
20089 4D4B           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2340              else
20092                                           ! 2341               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20093 4D4E           EB           28            jmp .10D
20094                       00004D50            .10A:
20095                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20096 4D50           8A46         FD            mov	al,-3[bp]
20097 4D53           30E4                       xor	ah,ah
20098 4D55           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20100 4D56           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20102 4D59           8A46         FB            mov	al,-5[bp]
20103 4D5C           30E4                       xor	ah,ah
20104 4D5E           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20106 4D5F           FF76         F4            push	-$C[bp]
20107                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20108 4D62           8B46         F4            mov	ax,-$C[bp]
20109 4D65           0246         04            add	al,4[bp]
20110 4D68           80D4                   00  adc	ah,*0
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4D6B           50                         push	ax
20113                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20114 4D6C           8A46         0A            mov	al,$A[bp]
20115 4D6F           30E4                       xor	ah,ah
20116 4D71           50                         push	ax
20117                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20118 4D72           E8         F87F            call	_vgamem_copy_pl4
20119 4D75           83C4                   0C  add	sp,*$C
20120                                           !BCC_EOS
20121                                           ! 2342             }
20122                       00004D78            .10D:
20123                                           ! 2343           }
20124                       00004D78            .107:
20125                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20126 4D78           8B46         F4            mov	ax,-$C[bp]
20127 4D7B           40                         inc	ax
20128 4D7C           8946         F4            mov	-$C[bp],ax
20129                       00004D7F            .108:
20130                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20131 4D7F           8A46         0C            mov	al,$C[bp]
20132 4D82           30E4                       xor	ah,ah
20133 4D84           3B46         F4            cmp	ax,-$C[bp]
20134 4D87           73           83            jae	.109
20135                       00004D89            .10E:
20136                       00004D89            .106:
20137                                           ! 2344          else
20138                                           ! 2345           {for(i=rlr;i>=rul;i--)
20139 4D89           E9         008E            br 	.10F
20140                       00004D8C            .104:
20141                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20142 4D8C           8A46         0C            mov	al,$C[bp]
20143 4D8F           30E4                       xor	ah,ah
20144 4D91           8946         F4            mov	-$C[bp],ax
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2346             {
20148 4D94           EB           78            jmp .112
20149                       00004D96            .113:
20150                                           ! 2347              if((i<rul+nblines)||(nblines==0))
20151                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20152 4D96           8A46         08            mov	al,8[bp]
20153 4D99           30E4                       xor	ah,ah
20154 4D9B           0246         04            add	al,4[bp]
20155 4D9E           80D4                   00  adc	ah,*0
20156                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20157 4DA1           3B46         F4            cmp	ax,-$C[bp]
20158 4DA4           77           07            ja  	.115
20159                       00004DA6            .116:
20160                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20161 4DA6           8A46         04            mov	al,4[bp]
20162 4DA9           84C0                       test	al,al
20163 4DAB           75           26            jne 	.114
20164                       00004DAD            .115:
20165                                           ! 2348               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20166                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20167 4DAD           8A46         06            mov	al,6[bp]
20168 4DB0           30E4                       xor	ah,ah
20169 4DB2           50                         push	ax
20170                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20171 4DB3           8A46         FD            mov	al,-3[bp]
20172 4DB6           30E4                       xor	ah,ah
20173 4DB8           50                         push	ax
20174                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20175 4DB9           FF76         F8            push	-8[bp]
20176                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20177 4DBC           8A46         FB            mov	al,-5[bp]
20178 4DBF           30E4                       xor	ah,ah
20179 4DC1           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4DC2           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4DC5           8A46         0A            mov	al,$A[bp]
20184 4DC8           30E4                       xor	ah,ah
20185 4DCA           50                         push	ax
20186                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20187 4DCB           E8         F8E8            call	_vgamem_fill_pl4
20188 4DCE           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2349              else
20191                                           ! 2350               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20192 4DD1           EB           28            jmp .117
20193                       00004DD3            .114:
20194                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20195 4DD3           8A46         FD            mov	al,-3[bp]
20196 4DD6           30E4                       xor	ah,ah
20197 4DD8           50                         push	ax
20198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20199 4DD9           FF76         F8            push	-8[bp]
20200                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20201 4DDC           8A46         FB            mov	al,-5[bp]
20202 4DDF           30E4                       xor	ah,ah
20203 4DE1           50                         push	ax
20204                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20205 4DE2           8B46         F4            mov	ax,-$C[bp]
20206 4DE5           2A46         04            sub	al,4[bp]
20207 4DE8           80DC                   00  sbb	ah,*0
20208                                           ! Debug: list unsigned int = ax+0 (used reg = )
20209 4DEB           50                         push	ax
20210                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20211 4DEC           FF76         F4            push	-$C[bp]
20212                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20213 4DEF           8A46         0A            mov	al,$A[bp]
20214 4DF2           30E4                       xor	ah,ah
20215 4DF4           50                         push	ax
20216                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20217 4DF5           E8         F7FC            call	_vgamem_copy_pl4
20218 4DF8           83C4                   0C  add	sp,*$C
20219                                           !BCC_EOS
20220                                           ! 2351              if (i>rlr) break;
20221                       00004DFB            .117:
20222                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20223 4DFB           8A46         0C            mov	al,$C[bp]
20224 4DFE           30E4                       xor	ah,ah
20225 4E00           3B46         F4            cmp	ax,-$C[bp]
20226 4E03           73           02            jae 	.118
20227                       00004E05            .119:
20228 4E05           EB           13            jmp .110
20229                                           !BCC_EOS
20230                                           ! 2352             }
20231                       00004E07            .118:
20232                                           ! 2353           }
20233                       00004E07            .111:
20234                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20235 4E07           8B46         F4            mov	ax,-$C[bp]
20236 4E0A           48                         dec	ax
20237 4E0B           8946         F4            mov	-$C[bp],ax
20238                       00004E0E            .112:
20239                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20240 4E0E           8A46         08            mov	al,8[bp]
20241 4E11           30E4                       xor	ah,ah
20242 4E13           3B46         F4            cmp	ax,-$C[bp]
20243 4E16         0F86         FF7C            blos	.113
20244                       00004E1A            .11A:
20245                       00004E1A            .110:
20246                                           ! 2354         }
20247                       00004E1A            .10F:
20248                                           ! 2355        break;
20249                       00004E1A            .103:
20250 4E1A           E9         01ED            br 	.F8
20251                                           !BCC_EOS
20252                                           ! 2356      case 0x02:
20253                                           ! 2357        bpp=vga_modes[line].pixbits;
20254                       00004E1D            .11B:
20255                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20256 4E1D           8A46         FE            mov	al,-2[bp]
20257 4E20           30E4                       xor	ah,ah
20258 4E22           B1                     03  mov	cl,*3
20259 4E24           D3E0                       shl	ax,cl
20260 4E26           89C3                       mov	bx,ax
20261 4E28           81C3                 01F8  add	bx,#_vga_modes
20262                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20263 4E2C           8A47         03            mov	al,3[bx]
20264 4E2F           8846         FC            mov	-4[bp],al
20265                                           !BCC_EOS
20266                                           ! 2358        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20267                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20268 4E32           8A46         04            mov	al,4[bp]
20269 4E35           84C0                       test	al,al
20270 4E37           75           77            jne 	.11C
20271                       00004E39            .121:
20272                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20273 4E39           8A46         08            mov	al,8[bp]
20274 4E3C           84C0                       test	al,al
20275 4E3E           75           70            jne 	.11C
20276                       00004E40            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20278 4E40           8A46         0A            mov	al,$A[bp]
20279 4E43           84C0                       test	al,al
20280 4E45           75           69            jne 	.11C
20281                       00004E47            .11F:
20282                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20283 4E47           8B46         F6            mov	ax,-$A[bp]
20284                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4E4A           48                         dec	ax
20287 4E4B           50                         push	ax
20288 4E4C           8A46         0C            mov	al,$C[bp]
20289 4E4F           30E4                       xor	ah,ah
20290 4E51           3B46         F0            cmp	ax,0+..FFFC[bp]
20291 4E54           8D66         F2            lea	sp,2+..FFFC[bp]
20292 4E57           75           57            jne 	.11C
20293                       00004E59            .11E:
20294                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20295 4E59           8B46         F8            mov	ax,-8[bp]
20296                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20297                                           ! Debug: expression subtree swapping
20298 4E5C           48                         dec	ax
20299 4E5D           50                         push	ax
20300 4E5E           8A46         0E            mov	al,$E[bp]
20301 4E61           30E4                       xor	ah,ah
20302 4E63           3B46         F0            cmp	ax,0+..FFFC[bp]
20303 4E66           8D66         F2            lea	sp,2+..FFFC[bp]
20304 4E69           75           45            jne 	.11C
20305                       00004E6B            .11D:
20306                                           ! 2359         {
20307                                           ! 2360          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20308                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20309 4E6B           8B46         F6            mov	ax,-$A[bp]
20310 4E6E           8B4E         F8            mov	cx,-8[bp]
20311 4E71           F7E9                       imul	cx
20312                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20313 4E73           89C3                       mov	bx,ax
20314 4E75           8A46         FD            mov	al,-3[bp]
20315 4E78           30E4                       xor	ah,ah
20316 4E7A           93                         xchg	ax,bx
20317 4E7B           89D9                       mov	cx,bx
20318 4E7D           F7E9                       imul	cx
20319                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20320 4E7F           89C3                       mov	bx,ax
20321 4E81           8A46         FC            mov	al,-4[bp]
20322 4E84           30E4                       xor	ah,ah
20323 4E86           93                         xchg	ax,bx
20324 4E87           89D9                       mov	cx,bx
20325 4E89           F7E9                       imul	cx
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4E8B           50                         push	ax
20328                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20329 4E8C           8A46         06            mov	al,6[bp]
20330 4E8F           30E4                       xor	ah,ah
20331 4E91           50                         push	ax
20332                                           ! Debug: list int = const 0 (used reg = )
20333 4E92           31C0                       xor	ax,ax
20334 4E94           50                         push	ax
20335                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20336 4E95           8A46         FE            mov	al,-2[bp]
20337 4E98           30E4                       xor	ah,ah
20338 4E9A           B1                     03  mov	cl,*3
20339 4E9C           D3E0                       shl	ax,cl
20340 4E9E           89C3                       mov	bx,ax
20341 4EA0           81C3                 01F8  add	bx,#_vga_modes
20342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20343 4EA4           FF77         04            push	4[bx]
20344                                           ! Debug: func () void = memsetb+0 (used reg = )
20345 4EA7           E8         2C5A            call	_memsetb
20346 4EAA           83C4                   08  add	sp,*8
20347                                           !BCC_EOS
20348                                           ! 2361         }
20349                                           ! 2362        else
20350                                           ! 2363         {
20351 4EAD           E9         0144            br 	.122
20352                       00004EB0            .11C:
20353                                           ! 2364          if(bpp==2)
20354                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20355 4EB0           8A46         FC            mov	al,-4[bp]
20356 4EB3           3C                     02  cmp	al,*2
20357 4EB5           75           1C            jne 	.123
20358                       00004EB7            .124:
20359                                           ! 2365           {
20360                                           ! 2366            cul<<=1;
20361                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20362 4EB7           8A46         0A            mov	al,$A[bp]
20363 4EBA           30E4                       xor	ah,ah
20364 4EBC           D1E0                       shl	ax,*1
20365 4EBE           8846         0A            mov	$A[bp],al
20366                                           !BCC_EOS
20367                                           ! 2367            cols<<=1;
20368                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20369 4EC1           8A46         FB            mov	al,-5[bp]
20370 4EC4           30E4                       xor	ah,ah
20371 4EC6           D1E0                       shl	ax,*1
20372 4EC8           8846         FB            mov	-5[bp],al
20373                                           !BCC_EOS
20374                                           ! 2368            nbcols<<=1;
20375                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20376 4ECB           8B46         F8            mov	ax,-8[bp]
20377 4ECE           D1E0                       shl	ax,*1
20378 4ED0           8946         F8            mov	-8[bp],ax
20379                                           !BCC_EOS
20380                                           ! 2369           }
20381                                           ! 2370          if(dir==1)
20382                       00004ED3            .123:
20383                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20384 4ED3           8A46         12            mov	al,$12[bp]
20385 4ED6           3C                     01  cmp	al,*1
20386 4ED8         0F85         008A            bne 	.125
20387                       00004EDC            .126:
20388                                           ! 2371           {for(i=rul;i<=rlr;i++)
20389                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20390 4EDC           8A46         08            mov	al,8[bp]
20391 4EDF           30E4                       xor	ah,ah
20392 4EE1           8946         F4            mov	-$C[bp],ax
20393                                           !BCC_EOS
20394                                           !BCC_EOS
20395                                           ! 2372             {
20396 4EE4           EB           73            jmp .129
20397                       00004EE6            .12A:
20398                                           ! 2373              if((i+nblines>rlr)||(nblines==0))
20399                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20400 4EE6           8B46         F4            mov	ax,-$C[bp]
20401 4EE9           0246         04            add	al,4[bp]
20402 4EEC           80D4                   00  adc	ah,*0
20403                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20404 4EEF           50                         push	ax
20405 4EF0           8A46         0C            mov	al,$C[bp]
20406 4EF3           30E4                       xor	ah,ah
20407 4EF5           3B46         F0            cmp	ax,0+..FFFC[bp]
20408 4EF8           8D66         F2            lea	sp,2+..FFFC[bp]
20409 4EFB           72           07            jb  	.12C
20410                       00004EFD            .12D:
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4EFD           8A46         04            mov	al,4[bp]
20413 4F00           84C0                       test	al,al
20414 4F02           75           26            jne 	.12B
20415                       00004F04            .12C:
20416                                           ! 2374               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20417                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20418 4F04           8A46         06            mov	al,6[bp]
20419 4F07           30E4                       xor	ah,ah
20420 4F09           50                         push	ax
20421                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20422 4F0A           8A46         FD            mov	al,-3[bp]
20423 4F0D           30E4                       xor	ah,ah
20424 4F0F           50                         push	ax
20425                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20426 4F10           FF76         F8            push	-8[bp]
20427                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20428 4F13           8A46         FB            mov	al,-5[bp]
20429 4F16           30E4                       xor	ah,ah
20430 4F18           50                         push	ax
20431                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20432 4F19           FF76         F4            push	-$C[bp]
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F1C           8A46         0A            mov	al,$A[bp]
20435 4F1F           30E4                       xor	ah,ah
20436 4F21           50                         push	ax
20437                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20438 4F22           E8         F92E            call	_vgamem_fill_cga
20439 4F25           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2375              else
20442                                           ! 2376               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20443 4F28           EB           28            jmp .12E
20444                       00004F2A            .12B:
20445                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20446 4F2A           8A46         FD            mov	al,-3[bp]
20447 4F2D           30E4                       xor	ah,ah
20448 4F2F           50                         push	ax
20449                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20450 4F30           FF76         F8            push	-8[bp]
20451                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20452 4F33           8A46         FB            mov	al,-5[bp]
20453 4F36           30E4                       xor	ah,ah
20454 4F38           50                         push	ax
20455                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20456 4F39           FF76         F4            push	-$C[bp]
20457                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20458 4F3C           8B46         F4            mov	ax,-$C[bp]
20459 4F3F           0246         04            add	al,4[bp]
20460 4F42           80D4                   00  adc	ah,*0
20461                                           ! Debug: list unsigned int = ax+0 (used reg = )
20462 4F45           50                         push	ax
20463                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20464 4F46           8A46         0A            mov	al,$A[bp]
20465 4F49           30E4                       xor	ah,ah
20466 4F4B           50                         push	ax
20467                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20468 4F4C           E8         F7F2            call	_vgamem_copy_cga
20469 4F4F           83C4                   0C  add	sp,*$C
20470                                           !BCC_EOS
20471                                           ! 2377             }
20472                       00004F52            .12E:
20473                                           ! 2378           }
20474                       00004F52            .128:
20475                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20476 4F52           8B46         F4            mov	ax,-$C[bp]
20477 4F55           40                         inc	ax
20478 4F56           8946         F4            mov	-$C[bp],ax
20479                       00004F59            .129:
20480                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20481 4F59           8A46         0C            mov	al,$C[bp]
20482 4F5C           30E4                       xor	ah,ah
20483 4F5E           3B46         F4            cmp	ax,-$C[bp]
20484 4F61           73           83            jae	.12A
20485                       00004F63            .12F:
20486                       00004F63            .127:
20487                                           ! 2379          else
20488                                           ! 2380           {for(i=rlr;i>=rul;i--)
20489 4F63           E9         008E            br 	.130
20490                       00004F66            .125:
20491                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20492 4F66           8A46         0C            mov	al,$C[bp]
20493 4F69           30E4                       xor	ah,ah
20494 4F6B           8946         F4            mov	-$C[bp],ax
20495                                           !BCC_EOS
20496                                           !BCC_EOS
20497                                           ! 2381             {
20498 4F6E           EB           78            jmp .133
20499                       00004F70            .134:
20500                                           ! 2382              if((i<r
20501                                           ! 2382 ul+nblines)||(nblines==0))
20502                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20503 4F70           8A46         08            mov	al,8[bp]
20504 4F73           30E4                       xor	ah,ah
20505 4F75           0246         04            add	al,4[bp]
20506 4F78           80D4                   00  adc	ah,*0
20507                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20508 4F7B           3B46         F4            cmp	ax,-$C[bp]
20509 4F7E           77           07            ja  	.136
20510                       00004F80            .137:
20511                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20512 4F80           8A46         04            mov	al,4[bp]
20513 4F83           84C0                       test	al,al
20514 4F85           75           26            jne 	.135
20515                       00004F87            .136:
20516                                           ! 2383               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20517                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20518 4F87           8A46         06            mov	al,6[bp]
20519 4F8A           30E4                       xor	ah,ah
20520 4F8C           50                         push	ax
20521                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20522 4F8D           8A46         FD            mov	al,-3[bp]
20523 4F90           30E4                       xor	ah,ah
20524 4F92           50                         push	ax
20525                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20526 4F93           FF76         F8            push	-8[bp]
20527                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20528 4F96           8A46         FB            mov	al,-5[bp]
20529 4F99           30E4                       xor	ah,ah
20530 4F9B           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 4F9C           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 4F9F           8A46         0A            mov	al,$A[bp]
20535 4FA2           30E4                       xor	ah,ah
20536 4FA4           50                         push	ax
20537                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20538 4FA5           E8         F8AB            call	_vgamem_fill_cga
20539 4FA8           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2384              else
20542                                           ! 2385               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20543 4FAB           EB           28            jmp .138
20544                       00004FAD            .135:
20545                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20546 4FAD           8A46         FD            mov	al,-3[bp]
20547 4FB0           30E4                       xor	ah,ah
20548 4FB2           50                         push	ax
20549                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20550 4FB3           FF76         F8            push	-8[bp]
20551                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20552 4FB6           8A46         FB            mov	al,-5[bp]
20553 4FB9           30E4                       xor	ah,ah
20554 4FBB           50                         push	ax
20555                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20556 4FBC           8B46         F4            mov	ax,-$C[bp]
20557 4FBF           2A46         04            sub	al,4[bp]
20558 4FC2           80DC                   00  sbb	ah,*0
20559                                           ! Debug: list unsigned int = ax+0 (used reg = )
20560 4FC5           50                         push	ax
20561                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20562 4FC6           FF76         F4            push	-$C[bp]
20563                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20564 4FC9           8A46         0A            mov	al,$A[bp]
20565 4FCC           30E4                       xor	ah,ah
20566 4FCE           50                         push	ax
20567                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20568 4FCF           E8         F76F            call	_vgamem_copy_cga
20569 4FD2           83C4                   0C  add	sp,*$C
20570                                           !BCC_EOS
20571                                           ! 2386              if (i>rlr) break;
20572                       00004FD5            .138:
20573                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20574 4FD5           8A46         0C            mov	al,$C[bp]
20575 4FD8           30E4                       xor	ah,ah
20576 4FDA           3B46         F4            cmp	ax,-$C[bp]
20577 4FDD           73           02            jae 	.139
20578                       00004FDF            .13A:
20579 4FDF           EB           13            jmp .131
20580                                           !BCC_EOS
20581                                           ! 2387             }
20582                       00004FE1            .139:
20583                                           ! 2388           }
20584                       00004FE1            .132:
20585                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20586 4FE1           8B46         F4            mov	ax,-$C[bp]
20587 4FE4           48                         dec	ax
20588 4FE5           8946         F4            mov	-$C[bp],ax
20589                       00004FE8            .133:
20590                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20591 4FE8           8A46         08            mov	al,8[bp]
20592 4FEB           30E4                       xor	ah,ah
20593 4FED           3B46         F4            cmp	ax,-$C[bp]
20594 4FF0         0F86         FF7C            blos	.134
20595                       00004FF4            .13B:
20596                       00004FF4            .131:
20597                                           ! 2389         }
20598                       00004FF4            .130:
20599                                           ! 2390        break;
20600                       00004FF4            .122:
20601 4FF4           EB           14            jmp .F8
20602                                           !BCC_EOS
20603                                           ! 2391     }
20604                                           ! 2392   }
20605 4FF6           EB           12            jmp .F8
20606                       00004FF8            .FA:
20607 4FF8           2C                     02  sub	al,*2
20608 4FFA         0F84         FE1F            beq 	.11B
20609 4FFE           2C                     01  sub	al,*1
20610 5000         0F84         FC63            beq 	.FC
20611 5004           2C                     01  sub	al,*1
20612 5006         0F84         FC5D            beq 	.FB
20613                       0000500A            .F8:
20614                       FFFFFFF0            ..FFFC	=	-$10
20615                                           ! 2393 }
20616                       0000500A            .F7:
20617 500A           89EC                       mov	sp,bp
20618 500C           5D                         pop	bp
20619 500D           C3                         ret
20620                                           ! 2394 static void biosfn_read_char_attr (page,car)
20621                                           ! Register BX used in function biosfn_scroll
20622                                           ! 2395 Bit8u page;Bit16u *car;
20623                       0000500E            _biosfn_read_char_attr:
20624                                           !BCC_EOS
20625                                           !BCC_EOS
20626                                           ! 2396 {Bit16u ss=get_SS();
20627 500E           55                         push	bp
20628 500F           89E5                       mov	bp,sp
20629 5011           4C                         dec	sp
20630 5012           4C                         dec	sp
20631                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20632 5013           E8         2C24            call	_get_SS
20633                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20634 5016           8946         FE            mov	-2[bp],ax
20635                                           !BCC_EOS
20636                                           ! 2397  Bit8u xcurs,ycurs,mode,line;
20637                                           !BCC_EOS
20638                                           ! 2398  Bit16u nbcols,nbrows,address;
20639                                           !BCC_EOS
20640                                           ! 2399  Bit16u cursor,dummy;
20641                                           !BCC_EOS
20642                                           ! 2400  mode=read_byte(0x40,0x49);
20643 5019           83C4                   F2  add	sp,*-$E
20644                                           ! Debug: list int = const $49 (used reg = )
20645 501C           B8                   0049  mov	ax,*$49
20646 501F           50                         push	ax
20647                                           ! Debug: list int = const $40 (used reg = )
20648 5020           B8                   0040  mov	ax,*$40
20649 5023           50                         push	ax
20650                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20651 5024           E8         2B87            call	_read_byte
20652 5027           83C4                   04  add	sp,*4
20653                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20654 502A           8846         FB            mov	-5[bp],al
20655                                           !BCC_EOS
20656                                           ! 2401  line=find_vga_entry(mode);
20657                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20658 502D           8A46         FB            mov	al,-5[bp]
20659 5030           30E4                       xor	ah,ah
20660 5032           50                         push	ax
20661                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20662 5033           E8         2A8C            call	_find_vga_entry
20663 5036           44                         inc	sp
20664 5037           44                         inc	sp
20665                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20666 5038           8846         FA            mov	-6[bp],al
20667                                           !BCC_EOS
20668                                           ! 2402  if(line==0xFF)return;
20669                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20670 503B           8A46         FA            mov	al,-6[bp]
20671 503E           3C                     FF  cmp	al,#$FF
20672 5040           75           04            jne 	.13C
20673                       00005042            .13D:
20674 5042           89EC                       mov	sp,bp
20675 5044           5D                         pop	bp
20676 5045           C3                         ret
20677                                           !BCC_EOS
20678                                           ! 2403  biosfn_get_cursor_pos(page,&dummy,&cursor);
20679                       00005046            .13C:
20680                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20681 5046           8D5E         F2            lea	bx,-$E[bp]
20682 5049           53                         push	bx
20683                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20684 504A           8D5E         F0            lea	bx,-$10[bp]
20685 504D           53                         push	bx
20686                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20687 504E           8A46         04            mov	al,4[bp]
20688 5051           30E4                       xor	ah,ah
20689 5053           50                         push	ax
20690                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20691 5054           E8         F3B9            call	_biosfn_get_cursor_pos
20692 5057           83C4                   06  add	sp,*6
20693                                           !BCC_EOS
20694                                           ! 2404  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20695                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20696 505A           8A46         F2            mov	al,-$E[bp]
20697                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20698 505D           8846         FD            mov	-3[bp],al
20699                                           !BCC_EOS
20700                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20701 5060           8B46         F2            mov	ax,-$E[bp]
20702 5063           30C0                       xor	al,al
20703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20704 5065           88E0                       mov	al,ah
20705 5067           30E4                       xor	ah,ah
20706                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20707 5069           8846         FC            mov	-4[bp],al
20708                                           !BCC_EOS
20709                                           ! 2405  nbrows=read_byte(0x40,0x84)+1;
20710                                           ! Debug: list int = const $84 (used reg = )
20711 506C           B8                   0084  mov	ax,#$84
20712 506F           50                         push	ax
20713                                           ! Debug: list int = const $40 (used reg = )
20714 5070           B8                   0040  mov	ax,*$40
20715 5073           50                         push	ax
20716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20717 5074           E8         2B37            call	_read_byte
20718 5077           83C4                   04  add	sp,*4
20719                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20720 507A           30E4                       xor	ah,ah
20721                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20722 507C           40                         inc	ax
20723 507D           8946         F6            mov	-$A[bp],ax
20724                                           !BCC_EOS
20725                                           ! 2406  nbcols=read_word(0x40,0x4A);
20726                                           ! Debug: list int = const $4A (used reg = )
20727 5080           B8                   004A  mov	ax,*$4A
20728 5083           50                         push	ax
20729                                           ! Debug: list int = const $40 (used reg = )
20730 5084           B8                   0040  mov	ax,*$40
20731 5087           50                         push	ax
20732                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20733 5088           E8         2B36            call	_read_word
20734 508B           83C4                   04  add	sp,*4
20735                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20736 508E           8946         F8            mov	-8[bp],ax
20737                                           !BCC_EOS
20738                                           ! 2407  if(vga_modes[line].class==0x00)
20739                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20740 5091           8A46         FA            mov	al,-6[bp]
20741 5094           30E4                       xor	ah,ah
20742 5096           B1                     03  mov	cl,*3
20743 5098           D3E0                       shl	ax,cl
20744 509A           89C3                       mov	bx,ax
20745 509C           81C3                 01F8  add	bx,#_vga_modes
20746                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20747 50A0           8A47         01            mov	al,1[bx]
20748 50A3           84C0                       test	al,al
20749 50A5           75           5E            jne 	.13E
20750                       000050A7            .13F:
20751                                           ! 2408   {
20752                                           ! 2409    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20753                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20754 50A7           8A46         FC            mov	al,-4[bp]
20755 50AA           30E4                       xor	ah,ah
20756 50AC           8B4E         F8            mov	cx,-8[bp]
20757 50AF           F7E9                       imul	cx
20758                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20759                                           ! Debug: expression subtree swapping
20760 50B1           0246         FD            add	al,-3[bp]
20761 50B4           80D4                   00  adc	ah,*0
20762                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20763 50B7           D1E0                       shl	ax,*1
20764 50B9           50                         push	ax
20765                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20766 50BA           8B46         F8            mov	ax,-8[bp]
20767 50BD           8B4E         F6            mov	cx,-$A[bp]
20768 50C0           F7E9                       imul	cx
20769                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20770 50C2           D1E0                       shl	ax,*1
20771                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20772 50C4           0C                     FF  or	al,#$FF
20773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20774                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20775 50C6           89C3                       mov	bx,ax
20776 50C8           8A46         04            mov	al,4[bp]
20777 50CB           30E4                       xor	ah,ah
20778 50CD           93                         xchg	ax,bx
20779 50CE           40                         inc	ax
20780 50CF           89D9                       mov	cx,bx
20781 50D1           F7E9                       imul	cx
20782                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20783 50D3           0346         EE            add	ax,-$12[bp]
20784 50D6           44                         inc	sp
20785 50D7           44                         inc	sp
20786                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20787 50D8           8946         F4            mov	-$C[bp],ax
20788                                           !BCC_EOS
20789                                           ! 2410    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20790                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20791 50DB           FF76         F4            push	-$C[bp]
20792                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20793 50DE           8A46         FA            mov	al,-6[bp]
20794 50E1           30E4                       xor	ah,ah
20795 50E3           B1                     03  mov	cl,*3
20796 50E5           D3E0                       shl	ax,cl
20797 50E7           89C3                       mov	bx,ax
20798 50E9           81C3                 01F8  add	bx,#_vga_modes
20799                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20800 50ED           FF77         04            push	4[bx]
20801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20802 50F0           E8         2ACE            call	_read_word
20803 50F3           83C4                   04  add	sp,*4
20804                                           ! Debug: list unsigned short = ax+0 (used reg = )
20805 50F6           50                         push	ax
20806                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20807 50F7           FF76         06            push	6[bp]
20808                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20809 50FA           FF76         FE            push	-2[bp]
20810                                           ! Debug: func () void = write_word+0 (used reg = )
20811 50FD           E8         2AEC            call	_write_word
20812 5100           83C4                   06  add	sp,*6
20813                                           !BCC_EOS
20814                                           ! 2411   }
20815                                           ! 2412  else
20816                                           ! 2413   {
20817 5103           EB           00            jmp .140
20818                       00005105            .13E:
20819                                           ! 2414   }
20820                                           ! 2415 }
20821                       00005105            .140:
20822 5105           89EC                       mov	sp,bp
20823 5107           5D                         pop	bp
20824 5108           C3                         ret
20825                                           ! 2416 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20826                                           ! Register BX used in function biosfn_read_char_attr
20827                                           ! 2417 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20828                       00005109            _write_gfx_char_pl4:
20829                                           !BCC_EOS
20830                                           !BCC_EOS
20831                                           !BCC_EOS
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           !BCC_EOS
20835                                           ! 2418 {
20836                                           ! 2419  Bit8u i,j,mask;
20837                                           !BCC_EOS
20838                                           ! 2420  Bit8u *fdata;
20839                                           !BCC_EOS
20840                                           ! 2421  Bit16u addr,dest,src;
20841                                           !BCC_EOS
20842                                           ! 2422  switch(cheight)
20843 5109           55                         push	bp
20844 510A           89E5                       mov	bp,sp
20845 510C           83C4                   F4  add	sp,*-$C
20846 510F           8A46         0E            mov	al,$E[bp]
20847                                           ! 2423   {case 14:
20848 5112           EB           18            jmp .143
20849                                           ! 2424     fdata = &vgafont14;
20850                       00005114            .144:
20851                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20852 5114           BB                   175C  mov	bx,#_vgafont14
20853 5117           895E         FA            mov	-6[bp],bx
20854                                           !BCC_EOS
20855                                           ! 2425     break;
20856 511A           EB           1A            jmp .141
20857                                           !BCC_EOS
20858                                           ! 2426    case 16:
20859                                           ! 2427     fdata = &vgafont16;
20860                       0000511C            .145:
20861                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20862 511C           BB                   255C  mov	bx,#_vgafont16
20863 511F           895E         FA            mov	-6[bp],bx
20864                                           !BCC_EOS
20865                                           ! 2428     break;
20866 5122           EB           12            jmp .141
20867                                           !BCC_EOS
20868                                           ! 2429    default:
20869                                           ! 2430     fdata = &vgafont8;
20870                       00005124            .146:
20871                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20872 5124           BB                   0F5C  mov	bx,#_vgafont8
20873 5127           895E         FA            mov	-6[bp],bx
20874                                           !BCC_EOS
20875                                           ! 2431   }
20876                                           ! 2432  addr=xcurs+ycurs*cheight*nbcols;
20877 512A           EB           0A            jmp .141
20878                       0000512C            .143:
20879 512C           2C                     0E  sub	al,*$E
20880 512E           74           E4            je 	.144
20881 5130           2C                     02  sub	al,*2
20882 5132           74           E8            je 	.145
20883 5134           EB           EE            jmp	.146
20884                       00005136            .141:
20885                       FFFFFFF2            ..FFFB	=	-$E
20886                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20887 5136           8A46         0E            mov	al,$E[bp]
20888 5139           30E4                       xor	ah,ah
20889 513B           89C3                       mov	bx,ax
20890 513D           8A46         0A            mov	al,$A[bp]
20891 5140           30E4                       xor	ah,ah
20892 5142           89D9                       mov	cx,bx
20893 5144           F7E9                       imul	cx
20894                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20895 5146           89C3                       mov	bx,ax
20896 5148           8A46         0C            mov	al,$C[bp]
20897 514B           30E4                       xor	ah,ah
20898 514D           93                         xchg	ax,bx
20899 514E           89D9                       mov	cx,bx
20900 5150           F7E9                       imul	cx
20901                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20902                                           ! Debug: expression subtree swapping
20903 5152           0246         08            add	al,8[bp]
20904 5155           80D4                   00  adc	ah,*0
20905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20906 5158           8946         F8            mov	-8[bp],ax
20907                                           !BCC_EOS
20908                                           ! 2433  src = car * cheight;
20909                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20910 515B           8A46         0E            mov	al,$E[bp]
20911 515E           30E4                       xor	ah,ah
20912 5160           89C3                       mov	bx,ax
20913 5162           8A46         04            mov	al,4[bp]
20914 5165           30E4                       xor	ah,ah
20915 5167           89D9                       mov	cx,bx
20916 5169           F7E9                       imul	cx
20917                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20918 516B           8946         F4            mov	-$C[bp],ax
20919                                           !BCC_EOS
20920                                           ! 2434  outw(0x3c4, 0x0f02);
20921                                           ! Debug: list int = const $F02 (used reg = )
20922 516E           B8                   0F02  mov	ax,#$F02
20923 5171           50                         push	ax
20924                                           ! Debug: list int = const $3C4 (used reg = )
20925 5172           B8                   03C4  mov	ax,#$3C4
20926 5175           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 5176           E8         2AB1            call	_outw
20929 5179           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2435  outw(0x3ce, 0x0205);
20932                                           ! Debug: list int = const $205 (used reg = )
20933 517C           B8                   0205  mov	ax,#$205
20934 517F           50                         push	ax
20935                                           ! Debug: list int = const $3CE (used reg = )
20936 5180           B8                   03CE  mov	ax,#$3CE
20937 5183           50                         push	ax
20938                                           ! Debug: func () void = outw+0 (used reg = )
20939 5184           E8         2AA3            call	_outw
20940 5187           83C4                   04  add	sp,*4
20941                                           !BCC_EOS
20942                                           ! 2436  if(attr&0x80)
20943                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20944 518A           8A46         06            mov	al,6[bp]
20945 518D           24                     80  and	al,#$80
20946 518F           84C0                       test	al,al
20947 5191           74           10            je  	.147
20948                       00005193            .148:
20949                                           ! 2437   {
20950                                           ! 2438    outw(0x3ce, 0x1803);
20951                                           ! Debug: list int = const $1803 (used reg = )
20952 5193           B8                   1803  mov	ax,#$1803
20953 5196           50                         push	ax
20954                                           ! Debug: list int = const $3CE (used reg = )
20955 5197           B8                   03CE  mov	ax,#$3CE
20956 519A           50                         push	ax
20957                                           ! Debug: func () void = outw+0 (used reg = )
20958 519B           E8         2A8C            call	_outw
20959 519E           83C4                   04  add	sp,*4
20960                                           !BCC_EOS
20961                                           ! 2439   }
20962                                           ! 2440  else
20963                                           ! 2441   {
20964 51A1           EB           0E            jmp .149
20965                       000051A3            .147:
20966                                           ! 2442    outw(0x3ce, 0x0003);
20967                                           ! Debug: list int = const 3 (used reg = )
20968 51A3           B8                   0003  mov	ax,*3
20969 51A6           50                         push	ax
20970                                           ! Debug: list int = const $3CE (used reg = )
20971 51A7           B8                   03CE  mov	ax,#$3CE
20972 51AA           50                         push	ax
20973                                           ! Debug: func () void = outw+0 (used reg = )
20974 51AB           E8         2A7C            call	_outw
20975 51AE           83C4                   04  add	sp,*4
20976                                           !BCC_EOS
20977                                           ! 2443   }
20978                                           ! 2444  for(i=0;i<cheight;i++)
20979                       000051B1            .149:
20980                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20981 51B1           30C0                       xor	al,al
20982 51B3           8846         FF            mov	-1[bp],al
20983                                           !BCC_EOS
20984                                           !BCC_EOS
20985                                           ! 2445   {
20986 51B6           E9         00A6            br 	.14C
20987                       000051B9            .14D:
20988                                           ! 2446    dest=addr+i*nbcols;
20989                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20990 51B9           8A46         0C            mov	al,$C[bp]
20991 51BC           30E4                       xor	ah,ah
20992 51BE           89C3                       mov	bx,ax
20993 51C0           8A46         FF            mov	al,-1[bp]
20994 51C3           30E4                       xor	ah,ah
20995 51C5           89D9                       mov	cx,bx
20996 51C7           F7E9                       imul	cx
20997                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20998                                           ! Debug: expression subtree swapping
20999 51C9           0346         F8            add	ax,-8[bp]
21000                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21001 51CC           8946         F6            mov	-$A[bp],ax
21002                                           !BCC_EOS
21003                                           ! 2447    for(j=0;j<8;j++)
21004                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21005 51CF           30C0                       xor	al,al
21006 51D1           8846         FE            mov	-2[bp],al
21007                                           !BCC_EOS
21008                                           !BCC_EOS
21009                                           ! 2448     {
21010 51D4           EB           79            jmp .150
21011                       000051D6            .151:
21012                                           ! 2449      mask=0x80>>j;
21013                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21014 51D6           8A46         FE            mov	al,-2[bp]
21015 51D9           30E4                       xor	ah,ah
21016 51DB           89C3                       mov	bx,ax
21017 51DD           B8                   0080  mov	ax,#$80
21018 51E0           89D9                       mov	cx,bx
21019 51E2           D3F8                       sar	ax,cl
21020                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21021 51E4           8846         FD            mov	-3[bp],al
21022                                           !BCC_EOS
21023                                           ! 2450      outw(0x3ce, (mask << 8) | 0x08);
21024                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21025 51E7           8A46         FD            mov	al,-3[bp]
21026 51EA           30E4                       xor	ah,ah
21027 51EC           88C4                       mov	ah,al
21028 51EE           30C0                       xor	al,al
21029                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21030 51F0           0C                     08  or	al,*8
21031                                           ! Debug: list unsigned int = ax+0 (used reg = )
21032 51F2           50                         push	ax
21033                                           ! Debug: list int = const $3CE (used reg = )
21034 51F3           B8                   03CE  mov	ax,#$3CE
21035 51F6           50                         push	ax
21036                                           ! Debug: func () void = outw+0 (used reg = )
21037 51F7           E8         2A30            call	_outw
21038 51FA           83C4                   04  add	sp,*4
21039                                           !BCC_EOS
21040                                           ! 2451      read_byte(0xa000,dest);
21041                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21042 51FD           FF76         F6            push	-$A[bp]
21043                                           ! Debug: list unsigned int = const $A000 (used reg = )
21044 5200           B8                   A000  mov	ax,#$A000
21045 5203           50                         push	ax
21046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21047 5204           E8         29A7            call	_read_byte
21048 5207           83C4                   04  add	sp,*4
21049                                           !BCC_EOS
21050                                           ! 2452      if(fdata[src+i]&mask)
21051                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21052 520A           8B46         F4            mov	ax,-$C[bp]
21053 520D           0246         FF            add	al,-1[bp]
21054 5210           80D4                   00  adc	ah,*0
21055                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21056 5213           0346         FA            add	ax,-6[bp]
21057 5216           89C3                       mov	bx,ax
21058                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21059 5218           8A07                       mov	al,[bx]
21060 521A           2246         FD            and	al,-3[bp]
21061 521D           84C0                       test	al,al
21062 521F           74           17            je  	.152
21063                       00005221            .153:
21064                                           ! 2453       {
21065                                           ! 2454        write_byte(0xa000,dest,attr&0x0f);
21066                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21067 5221           8A46         06            mov	al,6[bp]
21068 5224           24                     0F  and	al,*$F
21069                                           ! Debug: list unsigned char = al+0 (used reg = )
21070 5226           30E4                       xor	ah,ah
21071 5228           50                         push	ax
21072                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21073 5229           FF76         F6            push	-$A[bp]
21074                                           ! Debug: list unsigned int = const $A000 (used reg = )
21075 522C           B8                   A000  mov	ax,#$A000
21076 522F           50                         push	ax
21077                                           ! Debug: func () void = write_byte+0 (used reg = )
21078 5230           E8         29A1            call	_write_byte
21079 5233           83C4                   06  add	sp,*6
21080                                           !BCC_EOS
21081                                           ! 2455       }
21082                                           ! 2456      else
21083                                           ! 2457       {
21084 5236           EB           10            jmp .154
21085                       00005238            .152:
21086                                           ! 2458        write_byte(0xa000,dest,0x00);
21087                                           ! Debug: list int = const 0 (used reg = )
21088 5238           31C0                       xor	ax,ax
21089 523A           50                         push	ax
21090                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21091 523B           FF76         F6            push	-$A[bp]
21092                                           ! Debug: list unsigned int = const $A000 (used reg = )
21093 523E           B8                   A000  mov	ax,#$A000
21094 5241           50                         push	ax
21095                                           ! Debug: func () void = write_byte+0 (used reg = )
21096 5242           E8         298F            call	_write_byte
21097 5245           83C4                   06  add	sp,*6
21098                                           !BCC_EOS
21099                                           ! 2459       }
21100                                           ! 2460     }
21101                       00005248            .154:
21102                                           ! 2461   }
21103                       00005248            .14F:
21104                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21105 5248           8A46         FE            mov	al,-2[bp]
21106 524B           40                         inc	ax
21107 524C           8846         FE            mov	-2[bp],al
21108                       0000524F            .150:
21109                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21110 524F           8A46         FE            mov	al,-2[bp]
21111 5252           3C                     08  cmp	al,*8
21112 5254         0F82         FF7E            blo 	.151
21113                       00005258            .155:
21114                       00005258            .14E:
21115                                           ! 2462 #asm
21116                       00005258            .14B:
21117                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21118 5258           8A46         FF            mov	al,-1[bp]
21119 525B           40                         inc	ax
21120 525C           8846         FF            mov	-1[bp],al
21121                       0000525F            .14C:
21122                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21123 525F           8A46         FF            mov	al,-1[bp]
21124 5262           3A46         0E            cmp	al,$E[bp]
21125 5265         0F82         FF50            blo 	.14D
21126                       00005269            .156:
21127                       00005269            .14A:
21128                                           !BCC_EOS
21129                                           !BCC_ASM
21130                       0000000A            _write_gfx_char_pl4.j	set	$A
21131                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21132                       00000006            _write_gfx_char_pl4.fdata	set	6
21133                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21134                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21135                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21136                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21137                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21138                       0000000B            _write_gfx_char_pl4.i	set	$B
21139                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21140                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21141                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21142                       00000009            _write_gfx_char_pl4.mask	set	9
21143                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21144                       00000002            _write_gfx_char_pl4.dest	set	2
21145                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21146                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21147                       00000008            .write_gfx_char_pl4.xcurs	set	8
21148                       00000000            _write_gfx_char_pl4.src	set	0
21149                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21150                       00000012            _write_gfx_char_pl4.attr	set	$12
21151                       00000006            .write_gfx_char_pl4.attr	set	6
21152                       00000010            _write_gfx_char_pl4.car	set	$10
21153                       00000004            .write_gfx_char_pl4.car	set	4
21154                       00000004            _write_gfx_char_pl4.addr	set	4
21155                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21156 5269           BA                   03CE    mov dx, # 0x3ce
21157 526C           B8                   FF08    mov ax, #0xff08
21158 526F           EF                           out dx, ax
21159 5270           B8                   0005    mov ax, #0x0005
21160 5273           EF                           out dx, ax
21161 5274           B8                   0003    mov ax, #0x0003
21162 5277           EF                           out dx, ax
21163                                           ! 2470 endasm
21164                                           !BCC_ENDASM
21165                                           !BCC_EOS
21166                                           ! 2471 }
21167 5278           89EC                       mov	sp,bp
21168 527A           5D                         pop	bp
21169 527B           C3                         ret
21170                                           ! 2472 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21171                                           ! Register BX used in function write_gfx_char_pl4
21172                                           ! 2473 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21173                       0000527C            _write_gfx_char_cga:
21174                                           !BCC_EOS
21175                                           !BCC_EOS
21176                                           !BCC_EOS
21177                                           !BCC_EOS
21178                                           !BCC_EOS
21179                                           !BCC_EOS
21180                                           ! 2474 {
21181                                           ! 2475  Bit8u i,j,mask,data;
21182                                           !BCC_EOS
21183                                           ! 2476  Bit8u *fdata;
21184                                           !BCC_EOS
21185                                           ! 2477  Bit16u addr,dest,src;
21186                                           !BCC_EOS
21187                                           ! 2478  fd
21188                                           ! 2478 ata = &vgafont8;
21189 527C           55                         push	bp
21190 527D           89E5                       mov	bp,sp
21191 527F           83C4                   F4  add	sp,*-$C
21192                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21193 5282           BB                   0F5C  mov	bx,#_vgafont8
21194 5285           895E         FA            mov	-6[bp],bx
21195                                           !BCC_EOS
21196                                           ! 2479  addr=(xcurs*bpp)+ycurs*320;
21197                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21198 5288           8A46         0A            mov	al,$A[bp]
21199 528B           30E4                       xor	ah,ah
21200 528D           B9                   0140  mov	cx,#$140
21201 5290           F7E9                       imul	cx
21202 5292           50                         push	ax
21203                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21204 5293           8A46         0E            mov	al,$E[bp]
21205 5296           30E4                       xor	ah,ah
21206 5298           89C3                       mov	bx,ax
21207 529A           8A46         08            mov	al,8[bp]
21208 529D           30E4                       xor	ah,ah
21209 529F           89D9                       mov	cx,bx
21210 52A1           F7E9                       imul	cx
21211                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21212 52A3           0346         F2            add	ax,-$E[bp]
21213 52A6           44                         inc	sp
21214 52A7           44                         inc	sp
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21216 52A8           8946         F8            mov	-8[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2480  src = car * 8;
21219                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21220 52AB           8A46         04            mov	al,4[bp]
21221 52AE           30E4                       xor	ah,ah
21222 52B0           B1                     03  mov	cl,*3
21223 52B2           D3E0                       shl	ax,cl
21224                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21225 52B4           8946         F4            mov	-$C[bp],ax
21226                                           !BCC_EOS
21227                                           ! 2481  for(i=0;i<8;i++)
21228                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21229 52B7           30C0                       xor	al,al
21230 52B9           8846         FF            mov	-1[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2482   {
21234 52BC           E9         01B3            br 	.159
21235                       000052BF            .15A:
21236                                           ! 2483    dest=addr+(i>>1)*80;
21237                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21238 52BF           8A46         FF            mov	al,-1[bp]
21239 52C2           30E4                       xor	ah,ah
21240 52C4           D1E8                       shr	ax,*1
21241                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21242 52C6           B9                   0050  mov	cx,*$50
21243 52C9           F7E9                       imul	cx
21244                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21245                                           ! Debug: expression subtree swapping
21246 52CB           0346         F8            add	ax,-8[bp]
21247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21248 52CE           8946         F6            mov	-$A[bp],ax
21249                                           !BCC_EOS
21250                                           ! 2484    if (i & 1) dest += 0x2000;
21251                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21252 52D1           8A46         FF            mov	al,-1[bp]
21253 52D4           24                     01  and	al,*1
21254 52D6           84C0                       test	al,al
21255 52D8           74           09            je  	.15B
21256                       000052DA            .15C:
21257                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21258 52DA           8B46         F6            mov	ax,-$A[bp]
21259 52DD           05                   2000  add	ax,#$2000
21260 52E0           8946         F6            mov	-$A[bp],ax
21261                                           !BCC_EOS
21262                                           ! 2485    mask = 0x80;
21263                       000052E3            .15B:
21264                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21265 52E3           B0                     80  mov	al,#$80
21266 52E5           8846         FD            mov	-3[bp],al
21267                                           !BCC_EOS
21268                                           ! 2486    if (bpp == 1)
21269                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21270 52E8           8A46         0E            mov	al,$E[bp]
21271 52EB           3C                     01  cmp	al,*1
21272 52ED         0F85         00B3            bne 	.15D
21273                       000052F1            .15E:
21274                                           ! 2487     {
21275                                           ! 2488      if (attr & 0x80)
21276                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21277 52F1           8A46         06            mov	al,6[bp]
21278 52F4           24                     80  and	al,#$80
21279 52F6           84C0                       test	al,al
21280 52F8           74           12            je  	.15F
21281                       000052FA            .160:
21282                                           ! 2489       {
21283                                           ! 2490        data = read_byte(0xb800,dest);
21284                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21285 52FA           FF76         F6            push	-$A[bp]
21286                                           ! Debug: list unsigned int = const $B800 (used reg = )
21287 52FD           B8                   B800  mov	ax,#$B800
21288 5300           50                         push	ax
21289                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21290 5301           E8         28AA            call	_read_byte
21291 5304           83C4                   04  add	sp,*4
21292                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21293 5307           8846         FC            mov	-4[bp],al
21294                                           !BCC_EOS
21295                                           ! 2491       }
21296                                           ! 2492      else
21297                                           ! 2493       {
21298 530A           EB           05            jmp .161
21299                       0000530C            .15F:
21300                                           ! 2494        data = 0x00;
21301                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21302 530C           30C0                       xor	al,al
21303 530E           8846         FC            mov	-4[bp],al
21304                                           !BCC_EOS
21305                                           ! 2495       }
21306                                           ! 2496      for(j=0;j<8;j++)
21307                       00005311            .161:
21308                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21309 5311           30C0                       xor	al,al
21310 5313           8846         FE            mov	-2[bp],al
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           ! 2497       {
21314 5316           EB           6F            jmp .164
21315                       00005318            .165:
21316                                           ! 2498        if (fdata[src+i] & mask)
21317                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21318 5318           8B46         F4            mov	ax,-$C[bp]
21319 531B           0246         FF            add	al,-1[bp]
21320 531E           80D4                   00  adc	ah,*0
21321                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21322 5321           0346         FA            add	ax,-6[bp]
21323 5324           89C3                       mov	bx,ax
21324                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21325 5326           8A07                       mov	al,[bx]
21326 5328           2246         FD            and	al,-3[bp]
21327 532B           84C0                       test	al,al
21328 532D           74           47            je  	.166
21329                       0000532F            .167:
21330                                           ! 2499         {
21331                                           ! 2500          if (attr & 0x80)
21332                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21333 532F           8A46         06            mov	al,6[bp]
21334 5332           24                     80  and	al,#$80
21335 5334           84C0                       test	al,al
21336 5336           74           20            je  	.168
21337                       00005338            .169:
21338                                           ! 2501           {
21339                                           ! 2502            data ^= (attr & 0x01) << (7-j);
21340                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21341 5338           B8                   0007  mov	ax,*7
21342 533B           2A46         FE            sub	al,-2[bp]
21343 533E           80DC                   00  sbb	ah,*0
21344 5341           50                         push	ax
21345                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21346 5342           8A46         06            mov	al,6[bp]
21347 5345           24                     01  and	al,*1
21348                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21349 5347           30E4                       xor	ah,ah
21350 5349           8B4E         F2            mov	cx,-$E[bp]
21351 534C           D3E0                       shl	ax,cl
21352 534E           44                         inc	sp
21353 534F           44                         inc	sp
21354                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21355 5350           3246         FC            xor	al,-4[bp]
21356 5353           8846         FC            mov	-4[bp],al
21357                                           !BCC_EOS
21358                                           ! 2503           }
21359                                           ! 2504          else
21360                                           ! 2505           {
21361 5356           EB           1E            jmp .16A
21362                       00005358            .168:
21363                                           ! 2506            data |= (attr & 0x01) << (7-j);
21364                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21365 5358           B8                   0007  mov	ax,*7
21366 535B           2A46         FE            sub	al,-2[bp]
21367 535E           80DC                   00  sbb	ah,*0
21368 5361           50                         push	ax
21369                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21370 5362           8A46         06            mov	al,6[bp]
21371 5365           24                     01  and	al,*1
21372                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21373 5367           30E4                       xor	ah,ah
21374 5369           8B4E         F2            mov	cx,-$E[bp]
21375 536C           D3E0                       shl	ax,cl
21376 536E           44                         inc	sp
21377 536F           44                         inc	sp
21378                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21379 5370           0A46         FC            or	al,-4[bp]
21380 5373           8846         FC            mov	-4[bp],al
21381                                           !BCC_EOS
21382                                           ! 2507           }
21383                                           ! 2508         }
21384                       00005376            .16A:
21385                                           ! 2509        mask >>= 1;
21386                       00005376            .166:
21387                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21388 5376           8A46         FD            mov	al,-3[bp]
21389 5379           30E4                       xor	ah,ah
21390 537B           D1E8                       shr	ax,*1
21391 537D           8846         FD            mov	-3[bp],al
21392                                           !BCC_EOS
21393                                           ! 2510       }
21394                                           ! 2511      write_byte(0xb800,dest,data);
21395                       00005380            .163:
21396                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21397 5380           8A46         FE            mov	al,-2[bp]
21398 5383           40                         inc	ax
21399 5384           8846         FE            mov	-2[bp],al
21400                       00005387            .164:
21401                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21402 5387           8A46         FE            mov	al,-2[bp]
21403 538A           3C                     08  cmp	al,*8
21404 538C           72           8A            jb 	.165
21405                       0000538E            .16B:
21406                       0000538E            .162:
21407                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21408 538E           8A46         FC            mov	al,-4[bp]
21409 5391           30E4                       xor	ah,ah
21410 5393           50                         push	ax
21411                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21412 5394           FF76         F6            push	-$A[bp]
21413                                           ! Debug: list unsigned int = const $B800 (used reg = )
21414 5397           B8                   B800  mov	ax,#$B800
21415 539A           50                         push	ax
21416                                           ! Debug: func () void = write_byte+0 (used reg = )
21417 539B           E8         2836            call	_write_byte
21418 539E           83C4                   06  add	sp,*6
21419                                           !BCC_EOS
21420                                           ! 2512     }
21421                                           ! 2513    else
21422                                           ! 2514     {
21423 53A1           E9         00C7            br 	.16C
21424                       000053A4            .15D:
21425                                           ! 2515      while (mask > 0)
21426                                           ! 2516       {
21427 53A4           E9         00BB            br 	.16E
21428                       000053A7            .16F:
21429                                           ! 2517        if (attr & 0x80)
21430                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21431 53A7           8A46         06            mov	al,6[bp]
21432 53AA           24                     80  and	al,#$80
21433 53AC           84C0                       test	al,al
21434 53AE           74           12            je  	.170
21435                       000053B0            .171:
21436                                           ! 2518         {
21437                                           ! 2519          data = read_byte(0xb800,dest);
21438                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21439 53B0           FF76         F6            push	-$A[bp]
21440                                           ! Debug: list unsigned int = const $B800 (used reg = )
21441 53B3           B8                   B800  mov	ax,#$B800
21442 53B6           50                         push	ax
21443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21444 53B7           E8         27F4            call	_read_byte
21445 53BA           83C4                   04  add	sp,*4
21446                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21447 53BD           8846         FC            mov	-4[bp],al
21448                                           !BCC_EOS
21449                                           ! 2520         }
21450                                           ! 2521        else
21451                                           ! 2522         {
21452 53C0           EB           05            jmp .172
21453                       000053C2            .170:
21454                                           ! 2523          data = 0x00;
21455                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21456 53C2           30C0                       xor	al,al
21457 53C4           8846         FC            mov	-4[bp],al
21458                                           !BCC_EOS
21459                                           ! 2524         }
21460                                           ! 2525        for(j=0;j<4;j++)
21461                       000053C7            .172:
21462                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21463 53C7           30C0                       xor	al,al
21464 53C9           8846         FE            mov	-2[bp],al
21465                                           !BCC_EOS
21466                                           !BCC_EOS
21467                                           ! 2526         {
21468 53CC           EB           73            jmp .175
21469                       000053CE            .176:
21470                                           ! 2527          if (fdata[src+i] & mask)
21471                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21472 53CE           8B46         F4            mov	ax,-$C[bp]
21473 53D1           0246         FF            add	al,-1[bp]
21474 53D4           80D4                   00  adc	ah,*0
21475                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21476 53D7           0346         FA            add	ax,-6[bp]
21477 53DA           89C3                       mov	bx,ax
21478                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21479 53DC           8A07                       mov	al,[bx]
21480 53DE           2246         FD            and	al,-3[bp]
21481 53E1           84C0                       test	al,al
21482 53E3           74           4B            je  	.177
21483                       000053E5            .178:
21484                                           ! 2528           {
21485                                           ! 2529            if (attr & 0x80)
21486                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21487 53E5           8A46         06            mov	al,6[bp]
21488 53E8           24                     80  and	al,#$80
21489 53EA           84C0                       test	al,al
21490 53EC           74           22            je  	.179
21491                       000053EE            .17A:
21492                                           ! 2530             {
21493                                           ! 2531              data ^= (attr & 0x03) << ((3-j)*2);
21494                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21495 53EE           B8                   0003  mov	ax,*3
21496 53F1           2A46         FE            sub	al,-2[bp]
21497 53F4           80DC                   00  sbb	ah,*0
21498                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21499 53F7           D1E0                       shl	ax,*1
21500 53F9           50                         push	ax
21501                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21502 53FA           8A46         06            mov	al,6[bp]
21503 53FD           24                     03  and	al,*3
21504                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21505 53FF           30E4                       xor	ah,ah
21506 5401           8B4E         F2            mov	cx,-$E[bp]
21507 5404           D3E0                       shl	ax,cl
21508 5406           44                         inc	sp
21509 5407           44                         inc	sp
21510                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21511 5408           3246         FC            xor	al,-4[bp]
21512 540B           8846         FC            mov	-4[bp],al
21513                                           !BCC_EOS
21514                                           ! 2532             }
21515                                           ! 2533            else
21516                                           ! 2534             {
21517 540E           EB           20            jmp .17B
21518                       00005410            .179:
21519                                           ! 2535              data |= (attr & 0x03) << ((3-j)*2);
21520                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21521 5410           B8                   0003  mov	ax,*3
21522 5413           2A46         FE            sub	al,-2[bp]
21523 5416           80DC                   00  sbb	ah,*0
21524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21525 5419           D1E0                       shl	ax,*1
21526 541B           50                         push	ax
21527                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21528 541C           8A46         06            mov	al,6[bp]
21529 541F           24                     03  and	al,*3
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 5421           30E4                       xor	ah,ah
21532 5423           8B4E         F2            mov	cx,-$E[bp]
21533 5426           D3E0                       shl	ax,cl
21534 5428           44                         inc	sp
21535 5429           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 542A           0A46         FC            or	al,-4[bp]
21538 542D           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2536             }
21541                                           ! 2537           }
21542                       00005430            .17B:
21543                                           ! 2538          mask >>= 1;
21544                       00005430            .177:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5430           8A46         FD            mov	al,-3[bp]
21547 5433           30E4                       xor	ah,ah
21548 5435           D1E8                       shr	ax,*1
21549 5437           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2539         }
21552                                           ! 2540        write_byte(0xb800,dest,data);
21553                       0000543A            .174:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 543A           8A46         FE            mov	al,-2[bp]
21556 543D           40                         inc	ax
21557 543E           8846         FE            mov	-2[bp],al
21558                       00005441            .175:
21559                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21560 5441           8A46         FE            mov	al,-2[bp]
21561 5444           3C                     04  cmp	al,*4
21562 5446           72           86            jb 	.176
21563                       00005448            .17C:
21564                       00005448            .173:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 5448           8A46         FC            mov	al,-4[bp]
21567 544B           30E4                       xor	ah,ah
21568 544D           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 544E           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 5451           B8                   B800  mov	ax,#$B800
21573 5454           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 5455           E8         277C            call	_write_byte
21576 5458           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2541        dest += 1;
21579                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21580 545B           8B46         F6            mov	ax,-$A[bp]
21581 545E           40                         inc	ax
21582 545F           8946         F6            mov	-$A[bp],ax
21583                                           !BCC_EOS
21584                                           ! 2542       }
21585                                           ! 2543     }
21586                       00005462            .16E:
21587                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21588 5462           8A46         FD            mov	al,-3[bp]
21589 5465           84C0                       test	al,al
21590 5467         0F85         FF3C            bne 	.16F
21591                       0000546B            .17D:
21592                       0000546B            .16D:
21593                                           ! 2544   }
21594                       0000546B            .16C:
21595                                           ! 2545 }
21596                       0000546B            .158:
21597                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21598 546B           8A46         FF            mov	al,-1[bp]
21599 546E           40                         inc	ax
21600 546F           8846         FF            mov	-1[bp],al
21601                       00005472            .159:
21602                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21603 5472           8A46         FF            mov	al,-1[bp]
21604 5475           3C                     08  cmp	al,*8
21605 5477         0F82         FE44            blo 	.15A
21606                       0000547B            .17E:
21607                       0000547B            .157:
21608 547B           89EC                       mov	sp,bp
21609 547D           5D                         pop	bp
21610 547E           C3                         ret
21611                                           ! 2546 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21612                                           ! Register BX used in function write_gfx_char_cga
21613                                           ! 2547 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21614                       0000547F            _write_gfx_char_lin:
21615                                           !BCC_EOS
21616                                           !BCC_EOS
21617                                           !BCC_EOS
21618                                           !BCC_EOS
21619                                           !BCC_EOS
21620                                           ! 2548 {
21621                                           ! 2549  Bit8u i,j,mask,data;
21622                                           !BCC_EOS
21623                                           ! 2550  Bit8u *fdata;
21624                                           !BCC_EOS
21625                                           ! 2551  Bit16u addr,dest,src;
21626                                           !BCC_EOS
21627                                           ! 2552  fdata = &vgafont8;
21628 547F           55                         push	bp
21629 5480           89E5                       mov	bp,sp
21630 5482           83C4                   F4  add	sp,*-$C
21631                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21632 5485           BB                   0F5C  mov	bx,#_vgafont8
21633 5488           895E         FA            mov	-6[bp],bx
21634                                           !BCC_EOS
21635                                           ! 2553  addr=xcurs*8+ycurs*nbcols*64;
21636                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21637 548B           8A46         0C            mov	al,$C[bp]
21638 548E           30E4                       xor	ah,ah
21639 5490           89C3                       mov	bx,ax
21640 5492           8A46         0A            mov	al,$A[bp]
21641 5495           30E4                       xor	ah,ah
21642 5497           89D9                       mov	cx,bx
21643 5499           F7E9                       imul	cx
21644                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21645 549B           B1                     06  mov	cl,*6
21646 549D           D3E0                       shl	ax,cl
21647 549F           50                         push	ax
21648                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21649 54A0           8A46         08            mov	al,8[bp]
21650 54A3           30E4                       xor	ah,ah
21651 54A5           B1                     03  mov	cl,*3
21652 54A7           D3E0                       shl	ax,cl
21653                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21654 54A9           0346         F2            add	ax,-$E[bp]
21655 54AC           44                         inc	sp
21656 54AD           44                         inc	sp
21657                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21658 54AE           8946         F8            mov	-8[bp],ax
21659                                           !BCC_EOS
21660                                           ! 2554  src = car * 8;
21661                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21662 54B1           8A46         04            mov	al,4[bp]
21663 54B4           30E4                       xor	ah,ah
21664 54B6           B1                     03  mov	cl,*3
21665 54B8           D3E0                       shl	ax,cl
21666                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21667 54BA           8946         F4            mov	-$C[bp],ax
21668                                           !BCC_EOS
21669                                           ! 2555  for(i=0;i<8;i++)
21670                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21671 54BD           30C0                       xor	al,al
21672 54BF           8846         FF            mov	-1[bp],al
21673                                           !BCC_EOS
21674                                           !BCC_EOS
21675                                           ! 2556   {
21676 54C2           E9         0081            br 	.181
21677                       000054C5            .182:
21678                                           ! 2557    dest=addr+i*nbcols*8;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21680 54C5           8A46         0C            mov	al,$C[bp]
21681 54C8           30E4                       xor	ah,ah
21682 54CA           89C3                       mov	bx,ax
21683 54CC           8A46         FF            mov	al,-1[bp]
21684 54CF           30E4                       xor	ah,ah
21685 54D1           89D9                       mov	cx,bx
21686 54D3           F7E9                       imul	cx
21687                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21688 54D5           B1                     03  mov	cl,*3
21689 54D7           D3E0                       shl	ax,cl
21690                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21691                                           ! Debug: expression subtree swapping
21692 54D9           0346         F8            add	ax,-8[bp]
21693                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21694 54DC           8946         F6            mov	-$A[bp],ax
21695                                           !BCC_EOS
21696                                           ! 2558    mask = 0x80;
21697                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21698 54DF           B0                     80  mov	al,#$80
21699 54E1           8846         FD            mov	-3[bp],al
21700                                           !BCC_EOS
21701                                           ! 2559    for(j=0;j<8;j++)
21702                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21703 54E4           30C0                       xor	al,al
21704 54E6           8846         FE            mov	-2[bp],al
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           ! 2560     {
21708 54E9           EB           4D            jmp .185
21709                       000054EB            .186:
21710                                           ! 2561      data = 0x00;
21711                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21712 54EB           30C0                       xor	al,al
21713 54ED           8846         FC            mov	-4[bp],al
21714                                           !BCC_EOS
21715                                           ! 2562      if (fdata[src+i] & mask)
21716                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21717 54F0           8B46         F4            mov	ax,-$C[bp]
21718 54F3           0246         FF            add	al,-1[bp]
21719 54F6           80D4                   00  adc	ah,*0
21720                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21721 54F9           0346         FA            add	ax,-6[bp]
21722 54FC           89C3                       mov	bx,ax
21723                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21724 54FE           8A07                       mov	al,[bx]
21725 5500           2246         FD            and	al,-3[bp]
21726 5503           84C0                       test	al,al
21727 5505           74           06            je  	.187
21728                       00005507            .188:
21729                                           ! 2563       {
21730                                           ! 2564        data = attr;
21731                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21732 5507           8A46         06            mov	al,6[bp]
21733 550A           8846         FC            mov	-4[bp],al
21734                                           !BCC_EOS
21735                                           ! 2565       }
21736                                           ! 2566      write_byte(0xa000,dest+j,data);
21737                       0000550D            .187:
21738                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21739 550D           8A46         FC            mov	al,-4[bp]
21740 5510           30E4                       xor	ah,ah
21741 5512           50                         push	ax
21742                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21743 5513           8B46         F6            mov	ax,-$A[bp]
21744 5516           0246         FE            add	al,-2[bp]
21745 5519           80D4                   00  adc	ah,*0
21746                                           ! Debug: list unsigned int = ax+0 (used reg = )
21747 551C           50                         push	ax
21748                                           ! Debug: list unsigned int = const $A000 (used reg = )
21749 551D           B8                   A000  mov	ax,#$A000
21750 5520           50                         push	ax
21751                                           ! Debug: func () void = write_byte+0 (used reg = )
21752 5521           E8         26B0            call	_write_byte
21753 5524           83C4                   06  add	sp,*6
21754                                           !BCC_EOS
21755                                           ! 2567      mask >>= 1;
21756                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21757 5527           8A46         FD            mov	al,-3[bp]
21758 552A           30E4                       xor	ah,ah
21759 552C           D1E8                       shr	ax,*1
21760 552E           8846         FD            mov	-3[bp],al
21761                                           !BCC_EOS
21762                                           ! 2568     }
21763                                           ! 2569   }
21764                       00005531            .184:
21765                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21766 5531           8A46         FE            mov	al,-2[bp]
21767 5534           40                         inc	ax
21768 5535           8846         FE            mov	-2[bp],al
21769                       00005538            .185:
21770                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21771 5538           8A46         FE            mov	al,-2[bp]
21772 553B           3C                     08  cmp	al,*8
21773 553D           72           AC            jb 	.186
21774                       0000553F            .189:
21775                       0000553F            .183:
21776                                           ! 2570 }
21777                       0000553F            .180:
21778                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21779 553F           8A46         FF            mov	al,-1[bp]
21780 5542           40                         inc	ax
21781 5543           8846         FF            mov	-1[bp],al
21782                       00005546            .181:
21783                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21784 5546           8A46         FF            mov	al,-1[bp]
21785 5549           3C                     08  cmp	al,*8
21786 554B         0F82         FF76            blo 	.182
21787                       0000554F            .18A:
21788                       0000554F            .17F:
21789 554F           89EC                       mov	sp,bp
21790 5551           5D                         pop	bp
21791 5552           C3                         ret
21792                                           ! 2571 static void biosfn_write_char_attr (car,page,attr,count)
21793                                           ! Register BX used in function write_gfx_char_lin
21794                                           ! 2572 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21795                       00005553            _biosfn_write_char_attr:
21796                                           !BCC_EOS
21797                                           !BCC_EOS
21798                                           !BCC_EOS
21799                                           !BCC_EOS
21800                                           ! 2573 {
21801                                           ! 2574  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21802                                           !BCC_EOS
21803                                           ! 2575  Bit16u nbcols,nbrows,address;
21804                                           !BCC_EOS
21805                                           ! 2576  Bit16u cursor,dummy;
21806                                           !BCC_EOS
21807                                           ! 2577  mode=read_byte(0x40,0x49);
21808 5553           55                         push	bp
21809 5554           89E5                       mov	bp,sp
21810 5556           83C4                   F0  add	sp,*-$10
21811                                           ! Debug: list int = const $49 (used reg = )
21812 5559           B8                   0049  mov	ax,*$49
21813 555C           50                         push	ax
21814                                           ! Debug: list int = const $40 (used reg = )
21815 555D           B8                   0040  mov	ax,*$40
21816 5560           50                         push	ax
21817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21818 5561           E8         264A            call	_read_byte
21819 5564           83C4                   04  add	sp,*4
21820                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21821 5567           8846         FC            mov	-4[bp],al
21822                                           !BCC_EOS
21823                                           ! 2578  line=find_vga_entry(mode);
21824                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21825 556A           8A46         FC            mov	al,-4[bp]
21826 556D           30E4                       xor	ah,ah
21827 556F           50                         push	ax
21828                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21829 5570           E8         254F            call	_find_vga_entry
21830 5573           44                         inc	sp
21831 5574           44                         inc	sp
21832                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21833 5575           8846         FB            mov	-5[bp],al
21834                                           !BCC_EOS
21835                                           ! 2579  if(line==0xFF)return;
21836                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21837 5578           8A46         FB            mov	al,-5[bp]
21838 557B           3C                     FF  cmp	al,#$FF
21839 557D           75           04            jne 	.18B
21840                       0000557F            .18C:
21841 557F           89EC                       mov	sp,bp
21842 5581           5D                         pop	bp
21843 5582           C3                         ret
21844                                           !BCC_EOS
21845                                           ! 2580  biosfn_get_cursor_pos(page,&dummy,&cursor);
21846                       00005583            .18B:
21847                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21848 5583           8D5E         F2            lea	bx,-$E[bp]
21849 5586           53                         push	bx
21850                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21851 5587           8D5E         F0            lea	bx,-$10[bp]
21852 558A           53                         push	bx
21853                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21854 558B           8A46         06            mov	al,6[bp]
21855 558E           30E4                       xor	ah,ah
21856 5590           50                         push	ax
21857                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21858 5591           E8         EE7C            call	_biosfn_get_cursor_pos
21859 5594           83C4                   06  add	sp,*6
21860                                           !BCC_EOS
21861                                           ! 2581  xcurs=cursor&0x00ff;ycurs=(cursor&0
21862                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21863 5597           8A46         F2            mov	al,-$E[bp]
21864                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21865 559A           8846         FE            mov	-2[bp],al
21866                                           !BCC_EOS
21867                                           ! 2581 xff00)>>8;
21868                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21869 559D           8B46         F2            mov	ax,-$E[bp]
21870 55A0           30C0                       xor	al,al
21871                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21872 55A2           88E0                       mov	al,ah
21873 55A4           30E4                       xor	ah,ah
21874                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21875 55A6           8846         FD            mov	-3[bp],al
21876                                           !BCC_EOS
21877                                           ! 2582  nbrows=read_byte(0x40,0x84)+1;
21878                                           ! Debug: list int = const $84 (used reg = )
21879 55A9           B8                   0084  mov	ax,#$84
21880 55AC           50                         push	ax
21881                                           ! Debug: list int = const $40 (used reg = )
21882 55AD           B8                   0040  mov	ax,*$40
21883 55B0           50                         push	ax
21884                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21885 55B1           E8         25FA            call	_read_byte
21886 55B4           83C4                   04  add	sp,*4
21887                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21888 55B7           30E4                       xor	ah,ah
21889                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21890 55B9           40                         inc	ax
21891 55BA           8946         F6            mov	-$A[bp],ax
21892                                           !BCC_EOS
21893                                           ! 2583  nbcols=read_word(0x40,0x4A);
21894                                           ! Debug: list int = const $4A (used reg = )
21895 55BD           B8                   004A  mov	ax,*$4A
21896 55C0           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 55C1           B8                   0040  mov	ax,*$40
21899 55C4           50                         push	ax
21900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21901 55C5           E8         25F9            call	_read_word
21902 55C8           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21904 55CB           8946         F8            mov	-8[bp],ax
21905                                           !BCC_EOS
21906                                           ! 2584  if(vga_modes[line].class==0x00)
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21908 55CE           8A46         FB            mov	al,-5[bp]
21909 55D1           30E4                       xor	ah,ah
21910 55D3           B1                     03  mov	cl,*3
21911 55D5           D3E0                       shl	ax,cl
21912 55D7           89C3                       mov	bx,ax
21913 55D9           81C3                 01F8  add	bx,#_vga_modes
21914                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21915 55DD           8A47         01            mov	al,1[bx]
21916 55E0           84C0                       test	al,al
21917 55E2         0F85         006A            bne 	.18D
21918                       000055E6            .18E:
21919                                           ! 2585   {
21920                                           ! 2586    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21921                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21922 55E6           8A46         FD            mov	al,-3[bp]
21923 55E9           30E4                       xor	ah,ah
21924 55EB           8B4E         F8            mov	cx,-8[bp]
21925 55EE           F7E9                       imul	cx
21926                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21927                                           ! Debug: expression subtree swapping
21928 55F0           0246         FE            add	al,-2[bp]
21929 55F3           80D4                   00  adc	ah,*0
21930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21931 55F6           D1E0                       shl	ax,*1
21932 55F8           50                         push	ax
21933                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21934 55F9           8B46         F8            mov	ax,-8[bp]
21935 55FC           8B4E         F6            mov	cx,-$A[bp]
21936 55FF           F7E9                       imul	cx
21937                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21938 5601           D1E0                       shl	ax,*1
21939                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21940 5603           0C                     FF  or	al,#$FF
21941                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21942                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21943 5605           89C3                       mov	bx,ax
21944 5607           8A46         06            mov	al,6[bp]
21945 560A           30E4                       xor	ah,ah
21946 560C           93                         xchg	ax,bx
21947 560D           40                         inc	ax
21948 560E           89D9                       mov	cx,bx
21949 5610           F7E9                       imul	cx
21950                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21951 5612           0346         EE            add	ax,-$12[bp]
21952 5615           44                         inc	sp
21953 5616           44                         inc	sp
21954                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21955 5617           8946         F4            mov	-$C[bp],ax
21956                                           !BCC_EOS
21957                                           ! 2587    dummy=((Bit16u)attr<<8)+car;
21958                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21959 561A           8A46         08            mov	al,8[bp]
21960 561D           30E4                       xor	ah,ah
21961                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21962 561F           88C4                       mov	ah,al
21963 5621           30C0                       xor	al,al
21964                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21965 5623           0246         04            add	al,4[bp]
21966 5626           80D4                   00  adc	ah,*0
21967                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21968 5629           8946         F0            mov	-$10[bp],ax
21969                                           !BCC_EOS
21970                                           ! 2588    memsetw(vga_modes[line].sstart,address,dummy,count);
21971                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21972 562C           FF76         0A            push	$A[bp]
21973                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21974 562F           FF76         F0            push	-$10[bp]
21975                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21976 5632           FF76         F4            push	-$C[bp]
21977                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21978 5635           8A46         FB            mov	al,-5[bp]
21979 5638           30E4                       xor	ah,ah
21980 563A           B1                     03  mov	cl,*3
21981 563C           D3E0                       shl	ax,cl
21982 563E           89C3                       mov	bx,ax
21983 5640           81C3                 01F8  add	bx,#_vga_modes
21984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21985 5644           FF77         04            push	4[bx]
21986                                           ! Debug: func () void = memsetw+0 (used reg = )
21987 5647           E8         24DF            call	_memsetw
21988 564A           83C4                   08  add	sp,*8
21989                                           !BCC_EOS
21990                                           ! 2589   }
21991                                           ! 2590  else
21992                                           ! 2591   {
21993 564D           E9         00F3            br 	.18F
21994                       00005650            .18D:
21995                                           ! 2592    cheight=video_param_table[line_to_vpti[line]].cheight;
21996                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21997 5650           8A46         FB            mov	al,-5[bp]
21998 5653           30E4                       xor	ah,ah
21999 5655           89C3                       mov	bx,ax
22000                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22001 5657           8A87       0278            mov	al,_line_to_vpti[bx]
22002 565B           30E4                       xor	ah,ah
22003 565D           B1                     06  mov	cl,*6
22004 565F           D3E0                       shl	ax,cl
22005 5661           89C3                       mov	bx,ax
22006 5663           81C3                 028C  add	bx,#_video_param_table
22007                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22008 5667           8A47         02            mov	al,2[bx]
22009 566A           8846         FF            mov	-1[bp],al
22010                                           !BCC_EOS
22011                                           ! 2593    bpp=vga_modes[line].pixbits;
22012                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22013 566D           8A46         FB            mov	al,-5[bp]
22014 5670           30E4                       xor	ah,ah
22015 5672           B1                     03  mov	cl,*3
22016 5674           D3E0                       shl	ax,cl
22017 5676           89C3                       mov	bx,ax
22018 5678           81C3                 01F8  add	bx,#_vga_modes
22019                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22020 567C           8A47         03            mov	al,3[bx]
22021 567F           8846         FA            mov	-6[bp],al
22022                                           !BCC_EOS
22023                                           ! 2594    while((count-->0) && (xcurs<nbcols))
22024                                           ! 2595     {
22025 5682           E9         00A6            br 	.191
22026                       00005685            .192:
22027                                           ! 2596      switch(vga_modes[line].memmodel)
22028                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22029 5685           8A46         FB            mov	al,-5[bp]
22030 5688           30E4                       xor	ah,ah
22031 568A           B1                     03  mov	cl,*3
22032 568C           D3E0                       shl	ax,cl
22033 568E           89C3                       mov	bx,ax
22034 5690           81C3                 01F8  add	bx,#_vga_modes
22035 5694           8A47         02            mov	al,2[bx]
22036                                           ! 2597       {
22037 5697           EB           77            jmp .195
22038                                           ! 2598        case 0x04:
22039                                           ! 2599        case 0x03:
22040                       00005699            .196:
22041                                           ! 2600          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22042                       00005699            .197:
22043                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22044 5699           8A46         FF            mov	al,-1[bp]
22045 569C           30E4                       xor	ah,ah
22046 569E           50                         push	ax
22047                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22048 569F           FF76         F8            push	-8[bp]
22049                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22050 56A2           8A46         FD            mov	al,-3[bp]
22051 56A5           30E4                       xor	ah,ah
22052 56A7           50                         push	ax
22053                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22054 56A8           8A46         FE            mov	al,-2[bp]
22055 56AB           30E4                       xor	ah,ah
22056 56AD           50                         push	ax
22057                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22058 56AE           8A46         08            mov	al,8[bp]
22059 56B1           30E4                       xor	ah,ah
22060 56B3           50                         push	ax
22061                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22062 56B4           8A46         04            mov	al,4[bp]
22063 56B7           30E4                       xor	ah,ah
22064 56B9           50                         push	ax
22065                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22066 56BA           E8         FA4C            call	_write_gfx_char_pl4
22067 56BD           83C4                   0C  add	sp,*$C
22068                                           !BCC_EOS
22069                                           ! 2601          break;
22070 56C0           EB           62            jmp .193
22071                                           !BCC_EOS
22072                                           ! 2602        case 0x02:
22073                                           ! 2603          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22074                       000056C2            .198:
22075                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22076 56C2           8A46         FA            mov	al,-6[bp]
22077 56C5           30E4                       xor	ah,ah
22078 56C7           50                         push	ax
22079                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22080 56C8           FF76         F8            push	-8[bp]
22081                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22082 56CB           8A46         FD            mov	al,-3[bp]
22083 56CE           30E4                       xor	ah,ah
22084 56D0           50                         push	ax
22085                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22086 56D1           8A46         FE            mov	al,-2[bp]
22087 56D4           30E4                       xor	ah,ah
22088 56D6           50                         push	ax
22089                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22090 56D7           8A46         08            mov	al,8[bp]
22091 56DA           30E4                       xor	ah,ah
22092 56DC           50                         push	ax
22093                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22094 56DD           8A46         04            mov	al,4[bp]
22095 56E0           30E4                       xor	ah,ah
22096 56E2           50                         push	ax
22097                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22098 56E3           E8         FB96            call	_write_gfx_char_cga
22099 56E6           83C4                   0C  add	sp,*$C
22100                                           !BCC_EOS
22101                                           ! 2604          break;
22102 56E9           EB           39            jmp .193
22103                                           !BCC_EOS
22104                                           ! 2605        case 0x05:
22105                                           ! 2606          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22106                       000056EB            .199:
22107                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22108 56EB           FF76         F8            push	-8[bp]
22109                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22110 56EE           8A46         FD            mov	al,-3[bp]
22111 56F1           30E4                       xor	ah,ah
22112 56F3           50                         push	ax
22113                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22114 56F4           8A46         FE            mov	al,-2[bp]
22115 56F7           30E4                       xor	ah,ah
22116 56F9           50                         push	ax
22117                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22118 56FA           8A46         08            mov	al,8[bp]
22119 56FD           30E4                       xor	ah,ah
22120 56FF           50                         push	ax
22121                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22122 5700           8A46         04            mov	al,4[bp]
22123 5703           30E4                       xor	ah,ah
22124 5705           50                         push	ax
22125                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22126 5706           E8         FD76            call	_write_gfx_char_lin
22127 5709           83C4                   0A  add	sp,*$A
22128                                           !BCC_EOS
22129                                           ! 2607          break;
22130 570C           EB           16            jmp .193
22131                                           !BCC_EOS
22132                                           ! 2608       }
22133                                           ! 2609      xcurs++;
22134 570E           EB           14            jmp .193
22135                       00005710            .195:
22136 5710           2C                     02  sub	al,*2
22137 5712           74           AE            je 	.198
22138 5714           2C                     01  sub	al,*1
22139 5716         0F84         FF7F            beq 	.197
22140 571A           2C                     01  sub	al,*1
22141 571C         0F84         FF79            beq 	.196
22142 5720           2C                     01  sub	al,*1
22143 5722           74           C7            je 	.199
22144                       00005724            .193:
22145                       FFFFFFEE            ..FFFA	=	-$12
22146                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22147 5724           8A46         FE            mov	al,-2[bp]
22148 5727           40                         inc	ax
22149 5728           8846         FE            mov	-2[bp],al
22150                                           !BCC_EOS
22151                                           ! 2610     }
22152                                           ! 2611   }
22153                       0000572B            .191:
22154                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22155 572B           8B46         0A            mov	ax,$A[bp]
22156 572E           48                         dec	ax
22157 572F           8946         0A            mov	$A[bp],ax
22158                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22159 5732           3D                   FFFF  cmp	ax,*-1
22160 5735           74           0C            je  	.19A
22161                       00005737            .19B:
22162                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22163 5737           8A46         FE            mov	al,-2[bp]
22164 573A           30E4                       xor	ah,ah
22165 573C           3B46         F8            cmp	ax,-8[bp]
22166 573F         0F82         FF42            blo 	.192
22167                       00005743            .19A:
22168                       00005743            .190:
22169                                           ! 2612 }
22170                       00005743            .18F:
22171 5743           89EC                       mov	sp,bp
22172 5745           5D                         pop	bp
22173 5746           C3                         ret
22174                                           ! 2613 static void biosfn_write_char_only (car,page,attr,count)
22175                                           ! Register BX used in function biosfn_write_char_attr
22176                                           ! 2614 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22177                       00005747            _biosfn_write_char_only:
22178                                           !BCC_EOS
22179                                           !BCC_EOS
22180                                           !BCC_EOS
22181                                           !BCC_EOS
22182                                           ! 2615 {
22183                                           ! 2616  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22184                                           !BCC_EOS
22185                                           ! 2617  Bit16u nbcols,nbrows,address;
22186                                           !BCC_EOS
22187                                           ! 2618  Bit16u cursor,dummy;
22188                                           !BCC_EOS
22189                                           ! 2619  mode=read_byte(0x40,0x49);
22190 5747           55                         push	bp
22191 5748           89E5                       mov	bp,sp
22192 574A           83C4                   F0  add	sp,*-$10
22193                                           ! Debug: list int = const $49 (used reg = )
22194 574D           B8                   0049  mov	ax,*$49
22195 5750           50                         push	ax
22196                                           ! Debug: list int = const $40 (used reg = )
22197 5751           B8                   0040  mov	ax,*$40
22198 5754           50                         push	ax
22199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22200 5755           E8         2456            call	_read_byte
22201 5758           83C4                   04  add	sp,*4
22202                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22203 575B           8846         FC            mov	-4[bp],al
22204                                           !BCC_EOS
22205                                           ! 2620  line=find_vga_entry(mode);
22206                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22207 575E           8A46         FC            mov	al,-4[bp]
22208 5761           30E4                       xor	ah,ah
22209 5763           50                         push	ax
22210                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22211 5764           E8         235B            call	_find_vga_entry
22212 5767           44                         inc	sp
22213 5768           44                         inc	sp
22214                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22215 5769           8846         FB            mov	-5[bp],al
22216                                           !BCC_EOS
22217                                           ! 2621  if(line==0xFF)return;
22218                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22219 576C           8A46         FB            mov	al,-5[bp]
22220 576F           3C                     FF  cmp	al,#$FF
22221 5771           75           04            jne 	.19C
22222                       00005773            .19D:
22223 5773           89EC                       mov	sp,bp
22224 5775           5D                         pop	bp
22225 5776           C3                         ret
22226                                           !BCC_EOS
22227                                           ! 2622  biosfn_get_cursor_pos(page,&dummy,&cursor);
22228                       00005777            .19C:
22229                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22230 5777           8D5E         F2            lea	bx,-$E[bp]
22231 577A           53                         push	bx
22232                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22233 577B           8D5E         F0            lea	bx,-$10[bp]
22234 577E           53                         push	bx
22235                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22236 577F           8A46         06            mov	al,6[bp]
22237 5782           30E4                       xor	ah,ah
22238 5784           50                         push	ax
22239                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22240 5785           E8         EC88            call	_biosfn_get_cursor_pos
22241 5788           83C4                   06  add	sp,*6
22242                                           !BCC_EOS
22243                                           ! 2623  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22244                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22245 578B           8A46         F2            mov	al,-$E[bp]
22246                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22247 578E           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22250 5791           8B46         F2            mov	ax,-$E[bp]
22251 5794           30C0                       xor	al,al
22252                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22253 5796           88E0                       mov	al,ah
22254 5798           30E4                       xor	ah,ah
22255                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22256 579A           8846         FD            mov	-3[bp],al
22257                                           !BCC_EOS
22258                                           ! 2624  nbrows=read_byte(0x40,0x84)+1;
22259                                           ! Debug: list int = const $84 (used reg = )
22260 579D           B8                   0084  mov	ax,#$84
22261 57A0           50                         push	ax
22262                                           ! Debug: list int = const $40 (used reg = )
22263 57A1           B8                   0040  mov	ax,*$40
22264 57A4           50                         push	ax
22265                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22266 57A5           E8         2406            call	_read_byte
22267 57A8           83C4                   04  add	sp,*4
22268                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22269 57AB           30E4                       xor	ah,ah
22270                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22271 57AD           40                         inc	ax
22272 57AE           8946         F6            mov	-$A[bp],ax
22273                                           !BCC_EOS
22274                                           ! 2625  nbcols=read_word(0x40,0x4A);
22275                                           ! Debug: list int = const $4A (used reg = )
22276 57B1           B8                   004A  mov	ax,*$4A
22277 57B4           50                         push	ax
22278                                           ! Debug: list int = const $40 (used reg = )
22279 57B5           B8                   0040  mov	ax,*$40
22280 57B8           50                         push	ax
22281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22282 57B9           E8         2405            call	_read_word
22283 57BC           83C4                   04  add	sp,*4
22284                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22285 57BF           8946         F8            mov	-8[bp],ax
22286                                           !BCC_EOS
22287                                           ! 2626  if(vga_modes[line].class==0x00)
22288                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22289 57C2           8A46         FB            mov	al,-5[bp]
22290 57C5           30E4                       xor	ah,ah
22291 57C7           B1                     03  mov	cl,*3
22292 57C9           D3E0                       shl	ax,cl
22293 57CB           89C3                       mov	bx,ax
22294 57CD           81C3                 01F8  add	bx,#_vga_modes
22295                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22296 57D1           8A47         01            mov	al,1[bx]
22297 57D4           84C0                       test	al,al
22298 57D6           75           6E            jne 	.19E
22299                       000057D8            .19F:
22300                                           ! 2627   {
22301                                           ! 2628    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22302                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22303 57D8           8A46         FD            mov	al,-3[bp]
22304 57DB           30E4                       xor	ah,ah
22305 57DD           8B4E         F8            mov	cx,-8[bp]
22306 57E0           F7E9                       imul	cx
22307                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22308                                           ! Debug: expression subtree swapping
22309 57E2           0246         FE            add	al,-2[bp]
22310 57E5           80D4                   00  adc	ah,*0
22311                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22312 57E8           D1E0                       shl	ax,*1
22313 57EA           50                         push	ax
22314                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22315 57EB           8B46         F8            mov	ax,-8[bp]
22316 57EE           8B4E         F6            mov	cx,-$A[bp]
22317 57F1           F7E9                       imul	cx
22318                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22319 57F3           D1E0                       shl	ax,*1
22320                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22321 57F5           0C                     FF  or	al,#$FF
22322                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22323                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22324 57F7           89C3                       mov	bx,ax
22325 57F9           8A46         06            mov	al,6[bp]
22326 57FC           30E4                       xor	ah,ah
22327 57FE           93                         xchg	ax,bx
22328 57FF           40                         inc	ax
22329 5800           89D9                       mov	cx,bx
22330 5802           F7E9                       imul	cx
22331                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22332 5804           0346         EE            add	ax,-$12[bp]
22333 5807           44                         inc	sp
22334 5808           44                         inc	sp
22335                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22336 5809           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2629    while(count-->0)
22339                                           ! 2630     {write_byte(vga_modes[line].sstart,address,car);
22340 580C           EB           29            jmp .1A1
22341                       0000580E            .1A2:
22342                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22343 580E           8A46         04            mov	al,4[bp]
22344 5811           30E4                       xor	ah,ah
22345 5813           50                         push	ax
22346                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22347 5814           FF76         F4            push	-$C[bp]
22348                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22349 5817           8A46         FB            mov	al,-5[bp]
22350 581A           30E4                       xor	ah,ah
22351 581C           B1                     03  mov	cl,*3
22352 581E           D3E0                       shl	ax,cl
22353 5820           89C3                       mov	bx,ax
22354 5822           81C3                 01F8  add	bx,#_vga_modes
22355                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22356 5826           FF77         04            push	4[bx]
22357                                           ! Debug: func () void = write_byte+0 (used reg = )
22358 5829           E8         23A8            call	_write_byte
22359 582C           83C4                   06  add	sp,*6
22360                                           !BCC_EOS
22361                                           ! 2631      address+=2;
22362                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22363 582F           8B46         F4            mov	ax,-$C[bp]
22364 5832           40                         inc	ax
22365 5833           40                         inc	ax
22366 5834           8946         F4            mov	-$C[bp],ax
22367                                           !BCC_EOS
22368                                           ! 2632     }
22369                                           ! 2633   }
22370                       00005837            .1A1:
22371                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22372 5837           8B46         0A            mov	ax,$A[bp]
22373 583A           48                         dec	ax
22374 583B           8946         0A            mov	$A[bp],ax
22375                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22376 583E           3D                   FFFF  cmp	ax,*-1
22377 5841           75           CB            jne	.1A2
22378                       00005843            .1A3:
22379                       00005843            .1A0:
22380                                           ! 2634  else
22381                                           ! 2635   {
22382 5843           E9         00F3            br 	.1A4
22383                       00005846            .19E:
22384                                           ! 2636    cheight=video_param_table[line_to_vpti[line]].cheight;
22385                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22386 5846           8A46         FB            mov	al,-5[bp]
22387 5849           30E4                       xor	ah,ah
22388 584B           89C3                       mov	bx,ax
22389                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22390 584D           8A87       0278            mov	al,_line_to_vpti[bx]
22391 5851           30E4                       xor	ah,ah
22392 5853           B1                     06  mov	cl,*6
22393 5855           D3E0                       shl	ax,cl
22394 5857           89C3                       mov	bx,ax
22395 5859           81C3                 028C  add	bx,#_video_param_table
22396                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22397 585D           8A47         02            mov	al,2[bx]
22398 5860           8846         FF            mov	-1[bp],al
22399                                           !BCC_EOS
22400                                           ! 2637    bpp=vga_modes[line].pixbits;
22401                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22402 5863           8A46         FB            mov	al,-5[bp]
22403 5866           30E4                       xor	ah,ah
22404 5868           B1                     03  mov	cl,*3
22405 586A           D3E0                       shl	ax,cl
22406 586C           89C3                       mov	bx,ax
22407 586E           81C3                 01F8  add	bx,#_vga_modes
22408                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22409 5872           8A47         03            mov	al,3[bx]
22410 5875           8846         FA            mov	-6[bp],al
22411                                           !BCC_EOS
22412                                           ! 2638    while((count-->0) && (xcurs<nbcols))
22413                                           ! 2639     {
22414 5878           E9         00A6            br 	.1A6
22415                       0000587B            .1A7:
22416                                           ! 2640      switch(vga_modes[line].memmodel)
22417                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22418 587B           8A46         FB            mov	al,-5[bp]
22419 587E           30E4                       xor	ah,ah
22420 5880           B1                     03  mov	cl,*3
22421 5882           D3E0                       shl	ax,cl
22422 5884           89C3                       mov	bx,ax
22423 5886           81C3                 01F8  add	bx,#_vga_modes
22424 588A           8A47         02            mov	al,2[bx]
22425                                           ! 2641       {
22426 588D           EB           77            jmp .1AA
22427                                           ! 2642        case 0x04:
22428                                           ! 2643        case 0x03:
22429                       0000588F            .1AB:
22430                                           ! 2644          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22431                       0000588F            .1AC:
22432                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22433 588F           8A46         FF            mov	al,-1[bp]
22434 5892           30E4                       xor	ah,ah
22435 5894           50                         push	ax
22436                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22437 5895           FF76         F8            push	-8[bp]
22438                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22439 5898           8A46         FD            mov	al,-3[bp]
22440 589B           30E4                       xor	ah,ah
22441 589D           50                         push	ax
22442                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22443 589E           8A46         FE            mov	al,-2[bp]
22444 58A1           30E4                       xor	ah,ah
22445 58A3           50                         push	ax
22446                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22447 58A4           8A46         08            mov	al,8[bp]
22448 58A7           30E4                       xor	ah,ah
22449 58A9           50                         push	ax
22450                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22451 58AA           8A46         04            mov	al,4[bp]
22452 58AD           30E4                       xor	ah,ah
22453 58AF           50                         push	ax
22454                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22455 58B0           E8         F856            call	_write_gfx_char_pl4
22456 58B3           83C4                   0C  add	sp,*$C
22457                                           !BCC_EOS
22458                                           ! 2645          break;
22459 58B6           EB           62            jmp .1A8
22460                                           !BCC_EOS
22461                                           ! 2646        case 0x02:
22462                                           ! 2647          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22463                       000058B8            .1AD:
22464                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22465 58B8           8A46         FA            mov	al,-6[bp]
22466 58BB           30E4                       xor	ah,ah
22467 58BD           50                         push	ax
22468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22469 58BE           FF76         F8            push	-8[bp]
22470                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22471 58C1           8A46         FD            mov	al,-3[bp]
22472 58C4           30E4                       xor	ah,ah
22473 58C6           50                         push	ax
22474                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22475 58C7           8A46         FE            mov	al,-2[bp]
22476 58CA           30E4                       xor	ah,ah
22477 58CC           50                         push	ax
22478                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22479 58CD           8A46         08            mov	al,8[bp]
22480 58D0           30E4                       xor	ah,ah
22481 58D2           50                         push	ax
22482                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22483 58D3           8A46         04            mov	al,4[bp]
22484 58D6           30E4                       xor	ah,ah
22485 58D8           50                         push	ax
22486                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22487 58D9           E8         F9A0            call	_write_gfx_char_cga
22488 58DC           83C4                   0C  add	sp,*$C
22489                                           !BCC_EOS
22490                                           ! 2648          break;
22491 58DF           EB           39            jmp .1A8
22492                                           !BCC_EOS
22493                                           ! 2649        case 0x05:
22494                                           ! 2650          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22495                       000058E1            .1AE:
22496                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22497 58E1           FF76         F8            push	-8[bp]
22498                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22499 58E4           8A46         FD            mov	al,-3[bp]
22500 58E7           30E4                       xor	ah,ah
22501 58E9           50                         push	ax
22502                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22503 58EA           8A46         FE            mov	al,-2[bp]
22504 58ED           30E4                       xor	ah,ah
22505 58EF           50                         push	ax
22506                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22507 58F0           8A46         08            mov	al,8[bp]
22508 58F3           30E4                       xor	ah,ah
22509 58F5           50                         push	ax
22510                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22511 58F6           8A46         04            mov	al,4[bp]
22512 58F9           30E4                       xor	ah,ah
22513 58FB           50                         push	ax
22514                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22515 58FC           E8         FB80            call	_write_gfx_char_lin
22516 58FF           83C4                   0A  add	sp,*$A
22517                                           !BCC_EOS
22518                                           ! 2651          break;
22519 5902           EB           16            jmp .1A8
22520                                           !BCC_EOS
22521                                           ! 2652       }
22522                                           ! 2653      xcurs++;
22523 5904           EB           14            jmp .1A8
22524                       00005906            .1AA:
22525 5906           2C                     02  sub	al,*2
22526 5908           74           AE            je 	.1AD
22527 590A           2C                     01  sub	al,*1
22528 590C         0F84         FF7F            beq 	.1AC
22529 5910           2C                     01  sub	al,*1
22530 5912         0F84         FF79            beq 	.1AB
22531 5916           2C                     01  sub	al,*1
22532 5918           74           C7            je 	.1AE
22533                       0000591A            .1A8:
22534                       FFFFFFEE            ..FFF9	=	-$12
22535                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22536 591A           8A46         FE            mov	al,-2[bp]
22537 591D           40                         inc	ax
22538 591E           8846         FE            mov	-2[bp],al
22539                                           !BCC_EOS
22540                                           ! 2654     }
22541                                           ! 2655   }
22542                       00005921            .1A6:
22543                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22544 5921           8B46         0A            mov	ax,$A[bp]
22545 5924           48                         dec	ax
22546 5925           8946         0A            mov	$A[bp],ax
22547                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22548 5928           3D                   FFFF  cmp	ax,*-1
22549 592B           74           0C            je  	.1AF
22550                       0000592D            .1B0:
22551                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22552 592D           8A46         FE            mov	al,-2[bp]
22553 5930           30E4                       xor	ah,ah
22554 5932           3B46         F8            cmp	ax,-8[bp]
22555 5935         0F82         FF42            blo 	.1A7
22556                       00005939            .1AF:
22557                       00005939            .1A5:
22558                                           ! 2656 }
22559                       00005939            .1A4:
22560 5939           89EC                       mov	sp,bp
22561 593B           5D                         pop	bp
22562 593C           C3                         ret
22563                                           ! 2657 #asm
22564                                           !BCC_ASM
22565                       00000008            _biosfn_write_char_only.count	set	8
22566                       00000006            _biosfn_write_char_only.attr	set	6
22567                       00000004            _biosfn_write_char_only.page	set	4
22568                       00000002            _biosfn_write_char_only.car	set	2
22569                       0000593D            biosfn_group_0B:
22570 593D           80FF                   00    cmp bh, #0x00
22571 5940           74           06              je biosfn_set_border_color
22572 5942           80FF                   01    cmp bh, #0x01
22573 5945           74           40              je biosfn_set_palette
22574 5947           C3                           ret
22575                       00005948            biosfn_set_border_color:
22576 5948           50                           push ax
22577 5949           53                           push bx
22578 594A           51                           push cx
22579 594B           52                           push dx
22580 594C           BA                   03DA    mov dx, # 0x3da
22581 594F           EC                           in al, dx
22582 5950           BA                   03C0    mov dx, # 0x3c0
22583 5953           B0                     00    mov al, #0x00
22584 5955           EE                           out dx, al
22585 5956           88D8                         mov al, bl
22586 5958           24                     0F    and al, #0x0f
22587 595A           A8                     08    test al, #0x08
22588 595C           74           02              jz set_low_border
22589 595E           04                     08    add al, #0x08
22590                       00005960            set_low_border:
22591 5960           EE                           out dx, al
22592 5961           B1                     01    mov cl, #0x01
22593 5963           80E3                   10    and bl, #0x10
22594                       00005966            set_intensity_loop:
22595 5966           BA                   03C0    mov dx, # 0x3c0
22596 5969           88C8                         mov al, cl
22597 596B           EE                           out dx, al
22598 596C           BA                   03C1    mov dx, # 0x3c1
22599 596F           EC                           in al, dx
22600 5970           24                     EF    and al, #0xef
22601 5972           08D8                         or al, bl
22602 5974           BA                   03C0    mov dx, # 0x3c0
22603 5977           EE                           out dx, al
22604 5978           FEC1                         inc cl
22605 597A           80F9                   04    cmp cl, #0x04
22606 597D           75           E7              jne set_intensity_loop
22607 597F           B0                     20    mov al, #0x20
22608 5981           EE                           out dx, al
22609 5982           5A                           pop dx
22610 5983           59                           pop cx
22611 5984           5B                           pop bx
22612 5985           58                           pop ax
22613 5986           C3                           ret
22614                       00005987            biosfn_set_palette:
22615 5987           50                           push ax
22616 5988           53                           push bx
22617 5989           51                           push cx
22618 598A           52                           push dx
22619 598B           BA                   03DA    mov dx, # 0x3da
22620 598E           EC                           in al, dx
22621 598F           B1                     01    mov cl, #0x01
22622 5991           80E3                   01    and bl, #0x01
22623                       00005994            set_cga_palette_loop:
22624 5994           BA                   03C0    mov dx, # 0x3c0
22625 5997           88C8                         mov al, cl
22626 5999           EE                           out dx, al
22627 599A           BA                   03C1    mov dx, # 0x3c1
22628 599D           EC                           in al, dx
22629 599E           24                     FE    and al, #0xfe
22630 59A0           08D8                         or al, bl
22631 59A2           BA                   03C0    mov dx, # 0x3c0
22632 59A5           EE                           out dx, al
22633 59A6           FEC1                         inc cl
22634 59A8           80F9                   04    cmp cl, #0x04
22635 59AB           75           E7              jne set_cga_palette_loop
22636 59AD           B0                     20    mov al, #0x20
22637 59AF           EE                           out dx, al
22638 59B0           5A                           pop dx
22639 59B1           59                           pop cx
22640 59B2           5B                           pop bx
22641 59B3           58                           pop ax
22642 59B4           C3                           ret
22643                                           ! 2732 endasm
22644                                           !BCC_ENDASM
22645                                           ! 2733 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22646                                           ! Register BX used in function biosfn_write_char_only
22647                       000059B5            _biosfn_write_pixel:
22648                                           !BCC_EOS
22649                                           !BCC_EOS
22650                                           !BCC_EOS
22651                                           !BCC_EOS
22652                                           ! 2734 {
22653                                           ! 2735  Bit8u mode,line,mask,attr,data;
22654                                           !BCC_EOS
22655                                           ! 2736  Bit16u addr;
22656                                           !BCC_EOS
22657                                           ! 2737  mode=read_byte(0x40,0x49);
22658 59B5           55                         push	bp
22659 59B6           89E5                       mov	bp,sp
22660 59B8           83C4                   F8  add	sp,*-8
22661                                           ! Debug: list int = const $49 (used reg = )
22662 59BB           B8                   0049  mov	ax,*$49
22663 59BE           50                         push	ax
22664                                           ! Debug: list int = const $40 (used reg = )
22665 59BF           B8                   0040  mov	ax,*$40
22666 59C2           50                         push	ax
22667                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22668 59C3           E8         21E8            call	_read_byte
22669 59C6           83C4                   04  add	sp,*4
22670                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22671 59C9           8846         FF            mov	-1[bp],al
22672                                           !BCC_EOS
22673                                           ! 2738  line=find_vga_entry(mode);
22674                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22675 59CC           8A46         FF            mov	al,-1[bp]
22676 59CF           30E4                       xor	ah,ah
22677 59D1           50                         push	ax
22678                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22679 59D2           E8         20ED            call	_find_vga_entry
22680 59D5           44                         inc	sp
22681 59D6           44                         inc	sp
22682                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22683 59D7           8846         FE            mov	-2[bp],al
22684                                           !BCC_EOS
22685                                           ! 2739  if(line==0xFF)return;
22686                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22687 59DA           8A46         FE            mov	al,-2[bp]
22688 59DD           3C                     FF  cmp	al,#$FF
22689 59DF           75           04            jne 	.1B1
22690                       000059E1            .1B2:
22691 59E1           89EC                       mov	sp,bp
22692 59E3           5D                         pop	bp
22693 59E4           C3                         ret
22694                                           !BCC_EOS
22695                                           ! 2740  if(vga_modes[line].class==0x00)return;
22696                       000059E5            .1B1:
22697                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22698 59E5           8A46         FE            mov	al,-2[bp]
22699 59E8           30E4                       xor	ah,ah
22700 59EA           B1                     03  mov	cl,*3
22701 59EC           D3E0                       shl	ax,cl
22702 59EE           89C3                       mov	bx,ax
22703 59F0           81C3                 01F8  add	bx,#_vga_modes
22704                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22705 59F4           8A47         01            mov	al,1[bx]
22706 59F7           84C0                       test	al,al
22707 59F9           75           04            jne 	.1B3
22708                       000059FB            .1B4:
22709 59FB           89EC                       mov	sp,bp
22710 59FD           5D                         pop	bp
22711 59FE           C3                         ret
22712                                           !BCC_EOS
22713                                           ! 2741  switch(vga_modes[line].memmodel)
22714                       000059FF            .1B3:
22715                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22716 59FF           8A46         FE            mov	al,-2[bp]
22717 5A02           30E4                       xor	ah,ah
22718 5A04           B1                     03  mov	cl,*3
22719 5A06           D3E0                       shl	ax,cl
22720 5A08           89C3                       mov	bx,ax
22721 5A0A           81C3                 01F8  add	bx,#_vga_modes
22722 5A0E           8A47         02            mov	al,2[bx]
22723                                           ! 2742   {
22724 5A11           E9         0223            br 	.1B7
22725                                           ! 2743    case 0x04:
22726                                           ! 2744    case 0x03:
22727                       00005A14            .1B8:
22728                                           ! 2745      addr = CX/8+DX*read_word(0x40,0x4A);
22729                       00005A14            .1B9:
22730                                           ! Debug: list int = const $4A (used reg = )
22731 5A14           B8                   004A  mov	ax,*$4A
22732 5A17           50                         push	ax
22733                                           ! Debug: list int = const $40 (used reg = )
22734 5A18           B8                   0040  mov	ax,*$40
22735 5A1B           50                         push	ax
22736                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22737 5A1C           E8         21A2            call	_read_word
22738 5A1F           83C4                   04  add	sp,*4
22739                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22740                                           ! Debug: expression subtree swapping
22741 5A22           8B4E         0A            mov	cx,$A[bp]
22742 5A25           F7E9                       imul	cx
22743 5A27           50                         push	ax
22744                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22745 5A28           8B46         08            mov	ax,8[bp]
22746 5A2B           B1                     03  mov	cl,*3
22747 5A2D           D3E8                       shr	ax,cl
22748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22749 5A2F           0346         F6            add	ax,0+..FFF8[bp]
22750 5A32           44                         inc	sp
22751 5A33           44                         inc	sp
22752                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22753 5A34           8946         F8            mov	-8[bp],ax
22754                                           !BCC_EOS
22755                                           ! 2746      mask = 0x80 >> (CX & 0x07);
22756                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22757 5A37           8A46         08            mov	al,8[bp]
22758 5A3A           24                     07  and	al,*7
22759                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22760 5A3C           30E4                       xor	ah,ah
22761 5A3E           89C3                       mov	bx,ax
22762 5A40           B8                   0080  mov	ax,#$80
22763 5A43           89D9                       mov	cx,bx
22764 5A45           D3F8                       sar	ax,cl
22765                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22766 5A47           8846         FD            mov	-3[bp],al
22767                                           !BCC_EOS
22768                                           ! 2747      outw(0x3ce, (mask << 8) | 0x08);
22769                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22770 5A4A           8A46         FD            mov	al,-3[bp]
22771 5A4D           30E4                       xor	ah,ah
22772 5A4F           88C4                       mov	ah,al
22773 5A51           30C0                       xor	al,al
22774                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22775 5A53           0C                     08  or	al,*8
22776                                           ! Debug: list unsigned int = ax+0 (used reg = )
22777 5A55           50                         push	ax
22778                                           ! Debug: list int = const $3CE (used reg = )
22779 5A56           B8                   03CE  mov	ax,#$3CE
22780 5A59           50                         push	ax
22781                                           ! Debug: func () void = outw+0 (used reg = )
22782 5A5A           E8         21CD            call	_outw
22783 5A5D           83C4                   04  add	sp,*4
22784                                           !BCC_EOS
22785                                           ! 2748      outw(0x3ce, 0x0205);
22786                                           ! Debug: list int = const $205 (used reg = )
22787 5A60           B8                   0205  mov	ax,#$205
22788 5A63           50                         push	ax
22789                                           ! Debug: list int = const $3CE (used reg = )
22790 5A64           B8                   03CE  mov	ax,#$3CE
22791 5A67           50                         push	ax
22792                                           ! Debug: func () void = outw+0 (used reg = )
22793 5A68           E8         21BF            call	_outw
22794 5A6B           83C4                   04  add	sp,*4
22795                                           !BCC_EOS
22796                                           ! 2749      data = read_byte(0xa000,addr);
22797                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22798 5A6E           FF76         F8            push	-8[bp]
22799                                           ! Debug: list unsigned int = const $A000 (used reg = )
22800 5A71           B8                   A000  mov	ax,#$A000
22801 5A74           50                         push	ax
22802                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22803 5A75           E8         2136            call	_read_byte
22804 5A78           83C4                   04  add	sp,*4
22805                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22806 5A7B           8846         FB            mov	-5[bp],al
22807                                           !BCC_EOS
22808                                           ! 2750      if (AL & 0x80)
22809                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22810 5A7E           8A46         06            mov	al,6[bp]
22811 5A81           24                     80  and	al,#$80
22812 5A83           84C0                       test	al,al
22813 5A85           74           0E            je  	.1BA
22814                       00005A87            .1BB:
22815                                           ! 2751       {
22816                                           ! 2752        outw(0x3ce, 0x1803);
22817                                           ! Debug: list int = const $1803 (used reg = )
22818 5A87           B8                   1803  mov	ax,#$1803
22819 5A8A           50                         push	ax
22820                                           ! Debug: list int = const $3CE (used reg = )
22821 5A8B           B8                   03CE  mov	ax,#$3CE
22822 5A8E           50                         push	ax
22823                                           ! Debug: func () void = outw+0 (used reg = )
22824 5A8F           E8         2198            call	_outw
22825 5A92           83C4                   04  add	sp,*4
22826                                           !BCC_EOS
22827                                           ! 2753       }
22828                                           ! 2754      write_byte(0xa000,addr,AL);
22829                       00005A95            .1BA:
22830                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22831 5A95           8A46         06            mov	al,6[bp]
22832 5A98           30E4                       xor	ah,ah
22833 5A9A           50                         push	ax
22834                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22835 5A9B           FF76         F8            push	-8[bp]
22836                                           ! Debug: list unsigned int = const $A000 (used reg = )
22837 5A9E           B8                   A000  mov	ax,#$A000
22838 5AA1           50                         push	ax
22839                                           ! Debug: func () void = write_byte+0 (used reg = )
22840 5AA2           E8         212F            call	_write_byte
22841 5AA5           83C4                   06  add	sp,*6
22842                                           !BCC_EOS
22843                                           ! 2755 #asm
22844                                           !BCC_EOS
22845                                           !BCC_ASM
22846                       0000000C            _biosfn_write_pixel.BH	set	$C
22847                       00000004            .biosfn_write_pixel.BH	set	4
22848                       00000010            _biosfn_write_pixel.CX	set	$10
22849                       00000008            .biosfn_write_pixel.CX	set	8
22850                       00000006            _biosfn_write_pixel.line	set	6
22851                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22852                       0000000E            _biosfn_write_pixel.AL	set	$E
22853                       00000006            .biosfn_write_pixel.AL	set	6
22854                       00000003            _biosfn_write_pixel.data	set	3
22855                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22856                       00000012            _biosfn_write_pixel.DX	set	$12
22857                       0000000A            .biosfn_write_pixel.DX	set	$A
22858                       00000005            _biosfn_write_pixel.mask	set	5
22859                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22860                       00000004            _biosfn_write_pixel.attr	set	4
22861                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22862                       00000007            _biosfn_write_pixel.mode	set	7
22863                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22864                       00000000            _biosfn_write_pixel.addr	set	0
22865                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22866 5AA8           BA                   03CE       mov dx, # 0x3ce
22867 5AAB           B8                   FF08       mov ax, #0xff08
22868 5AAE           EF                              out dx, ax
22869 5AAF           B8                   0005       mov ax, #0x0005
22870 5AB2           EF                              out dx, ax
22871 5AB3           B8                   0003       mov ax, #0x0003
22872 5AB6           EF                              out dx, ax
22873                                           ! 2763 endasm
22874                                           !BCC_ENDASM
22875                                           !BCC_EOS
22876                                           ! 2764      break;
22877 5AB7           E9         0193            br 	.1B5
22878                                           !BCC_EOS
22879                                           ! 2765    case 0x02:
22880                                           ! 2766      if(vga_modes[line].pixbits==2)
22881                       00005ABA            .1BC:
22882                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22883 5ABA           8A46         FE            mov	al,-2[bp]
22884 5ABD           30E4                       xor	ah,ah
22885 5ABF           B1                     03  mov	cl,*3
22886 5AC1           D3E0                       shl	ax,cl
22887 5AC3           89C3                       mov	bx,ax
22888 5AC5           81C3                 01F8  add	bx,#_vga_modes
22889                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22890 5AC9           8A47         03            mov	al,3[bx]
22891 5ACC           3C                     02  cmp	al,*2
22892 5ACE           75           1C            jne 	.1BD
22893                       00005AD0            .1BE:
22894                                           ! 2767       {
22895                                           ! 2768        addr=(CX>>2)+(DX>>1)*80;
22896                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22897 5AD0           8B46         0A            mov	ax,$A[bp]
22898 5AD3           D1E8                       shr	ax,*1
22899                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22900 5AD5           B9                   0050  mov	cx,*$50
22901 5AD8           F7E9                       imul	cx
22902 5ADA           50                         push	ax
22903                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22904 5ADB           8B46         08            mov	ax,8[bp]
22905 5ADE           D1E8                       shr	ax,*1
22906 5AE0           D1E8                       shr	ax,*1
22907                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22908 5AE2           0346         F6            add	ax,0+..FFF8[bp]
22909 5AE5           44                         inc	sp
22910 5AE6           44                         inc	sp
22911                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22912 5AE7           8946         F8            mov	-8[bp],ax
22913                                           !BCC_EOS
22914                                           ! 2769       }
22915                                           ! 2770      else
22916                                           ! 2771       {
22917 5AEA           EB           1A            jmp .1BF
22918                       00005AEC            .1BD:
22919                                           ! 2772        addr=(CX>>3)+(DX>>1)*80;
22920                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22921 5AEC           8B46         0A            mov	ax,$A[bp]
22922 5AEF           D1E8                       shr	ax,*1
22923                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22924 5AF1           B9                   0050  mov	cx,*$50
22925 5AF4           F7E9                       imul	cx
22926 5AF6           50                         push	ax
22927                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22928 5AF7           8B46         08            mov	ax,8[bp]
22929 5AFA           B1                     03  mov	cl,*3
22930 5AFC           D3E8                       shr	ax,cl
22931                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22932 5AFE           0346         F6            add	ax,0+..FFF8[bp]
22933 5B01           44                         inc	sp
22934 5B02           44                         inc	sp
22935                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22936 5B03           8946         F8            mov	-8[bp],ax
22937                                           !BCC_EOS
22938                                           ! 2773       }
22939                                           ! 2774      if (DX & 1) addr += 0x2000;
22940                       00005B06            .1BF:
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22942 5B06           8A46         0A            mov	al,$A[bp]
22943 5B09           24                     01  and	al,*1
22944 5B0B           84C0                       test	al,al
22945 5B0D           74           09            je  	.1C0
22946                       00005B0F            .1C1:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22948 5B0F           8B46         F8            mov	ax,-8[bp]
22949 5B12           05                   2000  add	ax,#$2000
22950 5B15           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2775      data = read_byte(0xb800,addr);
22953                       00005B18            .1C0:
22954                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22955 5B18           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5B1B           B8                   B800  mov	ax,#$B800
22958 5B1E           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5B1F           E8         208C            call	_read_byte
22961 5B22           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22963 5B25           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2776      if(vga_modes[line].pixbits==2)
22966                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22967 5B28           8A46         FE            mov	al,-2[bp]
22968 5B2B           30E4                       xor	ah,ah
22969 5B2D           B1                     03  mov	cl,*3
22970 5B2F           D3E0                       shl	ax,cl
22971 5B31           89C3                       mov	bx,ax
22972 5B33           81C3                 01F8  add	bx,#_vga_modes
22973                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22974 5B37           8A47         03            mov	al,3[bx]
22975 5B3A           3C                     02  cmp	al,*2
22976 5B3C           75           46            jne 	.1C2
22977                       00005B3E            .1C3:
22978                                           ! 2777       {
22979                                           ! 2778        attr = (AL 
22980                                           ! 2778 & 0x03) << ((3 - (CX & 0x03)) * 2);
22981                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22982 5B3E           8A46         08            mov	al,8[bp]
22983 5B41           24                     03  and	al,*3
22984                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22985 5B43           50                         push	ax
22986 5B44           B8                   0003  mov	ax,*3
22987 5B47           2A46         F6            sub	al,0+..FFF8[bp]
22988 5B4A           80DC                   00  sbb	ah,*0
22989 5B4D           44                         inc	sp
22990 5B4E           44                         inc	sp
22991                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22992 5B4F           D1E0                       shl	ax,*1
22993 5B51           50                         push	ax
22994                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22995 5B52           8A46         06            mov	al,6[bp]
22996 5B55           24                     03  and	al,*3
22997                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22998 5B57           30E4                       xor	ah,ah
22999 5B59           8B4E         F6            mov	cx,0+..FFF8[bp]
23000 5B5C           D3E0                       shl	ax,cl
23001 5B5E           44                         inc	sp
23002 5B5F           44                         inc	sp
23003                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23004 5B60           8846         FC            mov	-4[bp],al
23005                                           !BCC_EOS
23006                                           ! 2779        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23007                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23008 5B63           8A46         08            mov	al,8[bp]
23009 5B66           24                     03  and	al,*3
23010                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23011 5B68           50                         push	ax
23012 5B69           B8                   0003  mov	ax,*3
23013 5B6C           2A46         F6            sub	al,0+..FFF8[bp]
23014 5B6F           80DC                   00  sbb	ah,*0
23015 5B72           44                         inc	sp
23016 5B73           44                         inc	sp
23017                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23018 5B74           D1E0                       shl	ax,*1
23019                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23020 5B76           89C3                       mov	bx,ax
23021 5B78           B8                   0003  mov	ax,*3
23022 5B7B           89D9                       mov	cx,bx
23023 5B7D           D3E0                       shl	ax,cl
23024                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23025 5B7F           8846         FD            mov	-3[bp],al
23026                                           !BCC_EOS
23027                                           ! 2780       }
23028                                           ! 2781      else
23029                                           ! 2782       {
23030 5B82           EB           40            jmp .1C4
23031                       00005B84            .1C2:
23032                                           ! 2783        attr = (AL & 0x01) << (7 - (CX & 0x07));
23033                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23034 5B84           8A46         08            mov	al,8[bp]
23035 5B87           24                     07  and	al,*7
23036                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23037 5B89           50                         push	ax
23038 5B8A           B8                   0007  mov	ax,*7
23039 5B8D           2A46         F6            sub	al,0+..FFF8[bp]
23040 5B90           80DC                   00  sbb	ah,*0
23041 5B93           44                         inc	sp
23042 5B94           44                         inc	sp
23043 5B95           50                         push	ax
23044                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23045 5B96           8A46         06            mov	al,6[bp]
23046 5B99           24                     01  and	al,*1
23047                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23048 5B9B           30E4                       xor	ah,ah
23049 5B9D           8B4E         F6            mov	cx,0+..FFF8[bp]
23050 5BA0           D3E0                       shl	ax,cl
23051 5BA2           44                         inc	sp
23052 5BA3           44                         inc	sp
23053                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23054 5BA4           8846         FC            mov	-4[bp],al
23055                                           !BCC_EOS
23056                                           ! 2784        mask = 0x01 << (7 - (CX & 0x07));
23057                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23058 5BA7           8A46         08            mov	al,8[bp]
23059 5BAA           24                     07  and	al,*7
23060                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23061 5BAC           50                         push	ax
23062 5BAD           B8                   0007  mov	ax,*7
23063 5BB0           2A46         F6            sub	al,0+..FFF8[bp]
23064 5BB3           80DC                   00  sbb	ah,*0
23065 5BB6           44                         inc	sp
23066 5BB7           44                         inc	sp
23067                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23068 5BB8           89C3                       mov	bx,ax
23069 5BBA           B8                   0001  mov	ax,*1
23070 5BBD           89D9                       mov	cx,bx
23071 5BBF           D3E0                       shl	ax,cl
23072                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23073 5BC1           8846         FD            mov	-3[bp],al
23074                                           !BCC_EOS
23075                                           ! 2785       }
23076                                           ! 2786      if (AL & 0x80)
23077                       00005BC4            .1C4:
23078                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23079 5BC4           8A46         06            mov	al,6[bp]
23080 5BC7           24                     80  and	al,#$80
23081 5BC9           84C0                       test	al,al
23082 5BCB           74           0B            je  	.1C5
23083                       00005BCD            .1C6:
23084                                           ! 2787       {
23085                                           ! 2788        data ^= attr;
23086                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23087 5BCD           8A46         FB            mov	al,-5[bp]
23088 5BD0           3246         FC            xor	al,-4[bp]
23089 5BD3           8846         FB            mov	-5[bp],al
23090                                           !BCC_EOS
23091                                           ! 2789       }
23092                                           ! 2790      else
23093                                           ! 2791       {
23094 5BD6           EB           16            jmp .1C7
23095                       00005BD8            .1C5:
23096                                           ! 2792        data &= ~mask;
23097                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23098 5BD8           8A46         FD            mov	al,-3[bp]
23099 5BDB           30E4                       xor	ah,ah
23100 5BDD           F7D0                       not	ax
23101                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23102 5BDF           2246         FB            and	al,-5[bp]
23103 5BE2           8846         FB            mov	-5[bp],al
23104                                           !BCC_EOS
23105                                           ! 2793        data |= attr;
23106                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23107 5BE5           8A46         FB            mov	al,-5[bp]
23108 5BE8           0A46         FC            or	al,-4[bp]
23109 5BEB           8846         FB            mov	-5[bp],al
23110                                           !BCC_EOS
23111                                           ! 2794       }
23112                                           ! 2795      write_byte(0xb800,addr,data);
23113                       00005BEE            .1C7:
23114                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23115 5BEE           8A46         FB            mov	al,-5[bp]
23116 5BF1           30E4                       xor	ah,ah
23117 5BF3           50                         push	ax
23118                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23119 5BF4           FF76         F8            push	-8[bp]
23120                                           ! Debug: list unsigned int = const $B800 (used reg = )
23121 5BF7           B8                   B800  mov	ax,#$B800
23122 5BFA           50                         push	ax
23123                                           ! Debug: func () void = write_byte+0 (used reg = )
23124 5BFB           E8         1FD6            call	_write_byte
23125 5BFE           83C4                   06  add	sp,*6
23126                                           !BCC_EOS
23127                                           ! 2796      break;
23128 5C01           EB           4A            jmp .1B5
23129                                           !BCC_EOS
23130                                           ! 2797    case 0x05:
23131                                           ! 2798      addr=CX+DX*(read_word(0x40,0x4A)*8);
23132                       00005C03            .1C8:
23133                                           ! Debug: list int = const $4A (used reg = )
23134 5C03           B8                   004A  mov	ax,*$4A
23135 5C06           50                         push	ax
23136                                           ! Debug: list int = const $40 (used reg = )
23137 5C07           B8                   0040  mov	ax,*$40
23138 5C0A           50                         push	ax
23139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23140 5C0B           E8         1FB3            call	_read_word
23141 5C0E           83C4                   04  add	sp,*4
23142                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23143 5C11           B1                     03  mov	cl,*3
23144 5C13           D3E0                       shl	ax,cl
23145                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23146                                           ! Debug: expression subtree swapping
23147 5C15           8B4E         0A            mov	cx,$A[bp]
23148 5C18           F7E9                       imul	cx
23149                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23150                                           ! Debug: expression subtree swapping
23151 5C1A           0346         08            add	ax,8[bp]
23152                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23153 5C1D           8946         F8            mov	-8[bp],ax
23154                                           !BCC_EOS
23155                                           ! 2799      write_byte(0xa000,addr,AL);
23156                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23157 5C20           8A46         06            mov	al,6[bp]
23158 5C23           30E4                       xor	ah,ah
23159 5C25           50                         push	ax
23160                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23161 5C26           FF76         F8            push	-8[bp]
23162                                           ! Debug: list unsigned int = const $A000 (used reg = )
23163 5C29           B8                   A000  mov	ax,#$A000
23164 5C2C           50                         push	ax
23165                                           ! Debug: func () void = write_byte+0 (used reg = )
23166 5C2D           E8         1FA4            call	_write_byte
23167 5C30           83C4                   06  add	sp,*6
23168                                           !BCC_EOS
23169                                           ! 2800      break;
23170 5C33           EB           18            jmp .1B5
23171                                           !BCC_EOS
23172                                           ! 2801   }
23173                                           ! 2802 }
23174 5C35           EB           16            jmp .1B5
23175                       00005C37            .1B7:
23176 5C37           2C                     02  sub	al,*2
23177 5C39         0F84         FE7D            beq 	.1BC
23178 5C3D           2C                     01  sub	al,*1
23179 5C3F         0F84         FDD1            beq 	.1B9
23180 5C43           2C                     01  sub	al,*1
23181 5C45         0F84         FDCB            beq 	.1B8
23182 5C49           2C                     01  sub	al,*1
23183 5C4B           74           B6            je 	.1C8
23184                       00005C4D            .1B5:
23185                       FFFFFFF6            ..FFF8	=	-$A
23186 5C4D           89EC                       mov	sp,bp
23187 5C4F           5D                         pop	bp
23188 5C50           C3                         ret
23189                                           ! 2803 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23190                                           ! Register BX used in function biosfn_write_pixel
23191                       00005C51            _biosfn_read_pixel:
23192                                           !BCC_EOS
23193                                           !BCC_EOS
23194                                           !BCC_EOS
23195                                           !BCC_EOS
23196                                           ! 2804 {
23197                                           ! 2805  Bit8u mode,line,mask,attr,data,i;
23198                                           !BCC_EOS
23199                                           ! 2806  Bit16u addr;
23200                                           !BCC_EOS
23201                                           ! 2807  Bit16u ss=get_SS();
23202 5C51           55                         push	bp
23203 5C52           89E5                       mov	bp,sp
23204 5C54           83C4                   F6  add	sp,*-$A
23205                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23206 5C57           E8         1FE0            call	_get_SS
23207                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23208 5C5A           8946         F6            mov	-$A[bp],ax
23209                                           !BCC_EOS
23210                                           ! 2808  mode=read_byte(0x40,0x49);
23211                                           ! Debug: list int = const $49 (used reg = )
23212 5C5D           B8                   0049  mov	ax,*$49
23213 5C60           50                         push	ax
23214                                           ! Debug: list int = const $40 (used reg = )
23215 5C61           B8                   0040  mov	ax,*$40
23216 5C64           50                         push	ax
23217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23218 5C65           E8         1F46            call	_read_byte
23219 5C68           83C4                   04  add	sp,*4
23220                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23221 5C6B           8846         FF            mov	-1[bp],al
23222                                           !BCC_EOS
23223                                           ! 2809  line=find_vga_entry(mode);
23224                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23225 5C6E           8A46         FF            mov	al,-1[bp]
23226 5C71           30E4                       xor	ah,ah
23227 5C73           50                         push	ax
23228                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23229 5C74           E8         1E4B            call	_find_vga_entry
23230 5C77           44                         inc	sp
23231 5C78           44                         inc	sp
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23233 5C79           8846         FE            mov	-2[bp],al
23234                                           !BCC_EOS
23235                                           ! 2810  if(line==0xFF)return;
23236                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23237 5C7C           8A46         FE            mov	al,-2[bp]
23238 5C7F           3C                     FF  cmp	al,#$FF
23239 5C81           75           04            jne 	.1C9
23240                       00005C83            .1CA:
23241 5C83           89EC                       mov	sp,bp
23242 5C85           5D                         pop	bp
23243 5C86           C3                         ret
23244                                           !BCC_EOS
23245                                           ! 2811  if(vga_modes[line].class==0x00)return;
23246                       00005C87            .1C9:
23247                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23248 5C87           8A46         FE            mov	al,-2[bp]
23249 5C8A           30E4                       xor	ah,ah
23250 5C8C           B1                     03  mov	cl,*3
23251 5C8E           D3E0                       shl	ax,cl
23252 5C90           89C3                       mov	bx,ax
23253 5C92           81C3                 01F8  add	bx,#_vga_modes
23254                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23255 5C96           8A47         01            mov	al,1[bx]
23256 5C99           84C0                       test	al,al
23257 5C9B           75           04            jne 	.1CB
23258                       00005C9D            .1CC:
23259 5C9D           89EC                       mov	sp,bp
23260 5C9F           5D                         pop	bp
23261 5CA0           C3                         ret
23262                                           !BCC_EOS
23263                                           ! 2812  switch(vga_modes[line].memmodel)
23264                       00005CA1            .1CB:
23265                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23266 5CA1           8A46         FE            mov	al,-2[bp]
23267 5CA4           30E4                       xor	ah,ah
23268 5CA6           B1                     03  mov	cl,*3
23269 5CA8           D3E0                       shl	ax,cl
23270 5CAA           89C3                       mov	bx,ax
23271 5CAC           81C3                 01F8  add	bx,#_vga_modes
23272 5CB0           8A47         02            mov	al,2[bx]
23273                                           ! 2813   {
23274 5CB3           E9         0167            br 	.1CF
23275                                           ! 2814    case 0x04:
23276                                           ! 2815    case 0x03:
23277                       00005CB6            .1D0:
23278                                           ! 2816      addr = CX/8+DX*read_word(0x40,0x4A);
23279                       00005CB6            .1D1:
23280                                           ! Debug: list int = const $4A (used reg = )
23281 5CB6           B8                   004A  mov	ax,*$4A
23282 5CB9           50                         push	ax
23283                                           ! Debug: list int = const $40 (used reg = )
23284 5CBA           B8                   0040  mov	ax,*$40
23285 5CBD           50                         push	ax
23286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23287 5CBE           E8         1F00            call	_read_word
23288 5CC1           83C4                   04  add	sp,*4
23289                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23290                                           ! Debug: expression subtree swapping
23291 5CC4           8B4E         08            mov	cx,8[bp]
23292 5CC7           F7E9                       imul	cx
23293 5CC9           50                         push	ax
23294                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23295 5CCA           8B46         06            mov	ax,6[bp]
23296 5CCD           B1                     03  mov	cl,*3
23297 5CCF           D3E8                       shr	ax,cl
23298                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23299 5CD1           0346         F4            add	ax,0+..FFF7[bp]
23300 5CD4           44                         inc	sp
23301 5CD5           44                         inc	sp
23302                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23303 5CD6           8946         F8            mov	-8[bp],ax
23304                                           !BCC_EOS
23305                                           ! 2817      mask = 0x80 >> (CX & 0x07);
23306                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23307 5CD9           8A46         06            mov	al,6[bp]
23308 5CDC           24                     07  and	al,*7
23309                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23310 5CDE           30E4                       xor	ah,ah
23311 5CE0           89C3                       mov	bx,ax
23312 5CE2           B8                   0080  mov	ax,#$80
23313 5CE5           89D9                       mov	cx,bx
23314 5CE7           D3F8                       sar	ax,cl
23315                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23316 5CE9           8846         FD            mov	-3[bp],al
23317                                           !BCC_EOS
23318                                           ! 2818      attr = 0x00;
23319                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23320 5CEC           30C0                       xor	al,al
23321 5CEE           8846         FC            mov	-4[bp],al
23322                                           !BCC_EOS
23323                                           ! 2819      for(i=0;i<4;i++)
23324                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23325 5CF1           30C0                       xor	al,al
23326 5CF3           8846         FA            mov	-6[bp],al
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           ! 2820       {
23330 5CF6           EB           4B            jmp .1D4
23331                       00005CF8            .1D5:
23332                                           ! 2821        outw(0x3ce, (i << 8) | 0x04);
23333                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23334 5CF8           8A46         FA            mov	al,-6[bp]
23335 5CFB           30E4                       xor	ah,ah
23336 5CFD           88C4                       mov	ah,al
23337 5CFF           30C0                       xor	al,al
23338                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23339 5D01           0C                     04  or	al,*4
23340                                           ! Debug: list unsigned int = ax+0 (used reg = )
23341 5D03           50                         push	ax
23342                                           ! Debug: list int = const $3CE (used reg = )
23343 5D04           B8                   03CE  mov	ax,#$3CE
23344 5D07           50                         push	ax
23345                                           ! Debug: func () void = outw+0 (used reg = )
23346 5D08           E8         1F1F            call	_outw
23347 5D0B           83C4                   04  add	sp,*4
23348                                           !BCC_EOS
23349                                           ! 2822        data = read_byte(0xa000,addr) & mask;
23350                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23351 5D0E           FF76         F8            push	-8[bp]
23352                                           ! Debug: list unsigned int = const $A000 (used reg = )
23353 5D11           B8                   A000  mov	ax,#$A000
23354 5D14           50                         push	ax
23355                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23356 5D15           E8         1E96            call	_read_byte
23357 5D18           83C4                   04  add	sp,*4
23358                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23359 5D1B           2246         FD            and	al,-3[bp]
23360                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23361 5D1E           8846         FB            mov	-5[bp],al
23362                                           !BCC_EOS
23363                                           ! 2823        if (data > 0) attr |= (0x01 << i);
23364                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23365 5D21           8A46         FB            mov	al,-5[bp]
23366 5D24           84C0                       test	al,al
23367 5D26           74           14            je  	.1D6
23368                       00005D28            .1D7:
23369                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23370 5D28           8A46         FA            mov	al,-6[bp]
23371 5D2B           30E4                       xor	ah,ah
23372 5D2D           89C3                       mov	bx,ax
23373 5D2F           B8                   0001  mov	ax,*1
23374 5D32           89D9                       mov	cx,bx
23375 5D34           D3E0                       shl	ax,cl
23376                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23377 5D36           0A46         FC            or	al,-4[bp]
23378 5D39           8846         FC            mov	-4[bp],al
23379                                           !BCC_EOS
23380                                           ! 2824       }
23381                       00005D3C            .1D6:
23382                                           ! 2825      break;
23383                       00005D3C            .1D3:
23384                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23385 5D3C           8A46         FA            mov	al,-6[bp]
23386 5D3F           40                         inc	ax
23387 5D40           8846         FA            mov	-6[bp],al
23388                       00005D43            .1D4:
23389                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23390 5D43           8A46         FA            mov	al,-6[bp]
23391 5D46           3C                     04  cmp	al,*4
23392 5D48           72           AE            jb 	.1D5
23393                       00005D4A            .1D8:
23394                       00005D4A            .1D2:
23395 5D4A           E9         00E8            br 	.1CD
23396                                           !BCC_EOS
23397                                           ! 2826    case 0x02:
23398                                           ! 2827      addr=(CX>>2)+(DX>>1)*80;
23399                       00005D4D            .1D9:
23400                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23401 5D4D           8B46         08            mov	ax,8[bp]
23402 5D50           D1E8                       shr	ax,*1
23403                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23404 5D52           B9                   0050  mov	cx,*$50
23405 5D55           F7E9                       imul	cx
23406 5D57           50                         push	ax
23407                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23408 5D58           8B46         06            mov	ax,6[bp]
23409 5D5B           D1E8                       shr	ax,*1
23410 5D5D           D1E8                       shr	ax,*1
23411                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23412 5D5F           0346         F4            add	ax,0+..FFF7[bp]
23413 5D62           44                         inc	sp
23414 5D63           44                         inc	sp
23415                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23416 5D64           8946         F8            mov	-8[bp],ax
23417                                           !BCC_EOS
23418                                           ! 2828      if (DX & 1) addr += 0x2000;
23419                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23420 5D67           8A46         08            mov	al,8[bp]
23421 5D6A           24                     01  and	al,*1
23422 5D6C           84C0                       test	al,al
23423 5D6E           74           09            je  	.1DA
23424                       00005D70            .1DB:
23425                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23426 5D70           8B46         F8            mov	ax,-8[bp]
23427 5D73           05                   2000  add	ax,#$2000
23428 5D76           8946         F8            mov	-8[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2829      data = read_byte(0xb800,addr);
23431                       00005D79            .1DA:
23432                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23433 5D79           FF76         F8            push	-8[bp]
23434                                           ! Debug: list unsigned int = const $B800 (used reg = )
23435 5D7C           B8                   B800  mov	ax,#$B800
23436 5D7F           50                         push	ax
23437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23438 5D80           E8         1E2B            call	_read_byte
23439 5D83           83C4                   04  add	sp,*4
23440                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5D86           8846         FB            mov	-5[bp],al
23442                                           !BCC_EOS
23443                                           ! 2830      if(vga_modes[line].pixbits==2)
23444                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23445 5D89           8A46         FE            mov	al,-2[bp]
23446 5D8C           30E4                       xor	ah,ah
23447 5D8E           B1                     03  mov	cl,*3
23448 5D90           D3E0                       shl	ax,cl
23449 5D92           89C3                       mov	bx,ax
23450 5D94           81C3                 01F8  add	bx,#_vga_modes
23451                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23452 5D98           8A47         03            mov	al,3[bx]
23453 5D9B           3C                     02  cmp	al,*2
23454 5D9D           75           25            jne 	.1DC
23455                       00005D9F            .1DD:
23456                                           ! 2831       {
23457                                           ! 2832        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23458                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23459 5D9F           8A46         06            mov	al,6[bp]
23460 5DA2           24                     03  and	al,*3
23461                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23462 5DA4           50                         push	ax
23463 5DA5           B8                   0003  mov	ax,*3
23464 5DA8           2A46         F4            sub	al,0+..FFF7[bp]
23465 5DAB           80DC                   00  sbb	ah,*0
23466 5DAE           44                         inc	sp
23467 5DAF           44                         inc	sp
23468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23469 5DB0           D1E0                       shl	ax,*1
23470                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23471 5DB2           89C3                       mov	bx,ax
23472 5DB4           8A46         FB            mov	al,-5[bp]
23473 5DB7           30E4                       xor	ah,ah
23474 5DB9           89D9                       mov	cx,bx
23475 5DBB           D3E8                       shr	ax,cl
23476                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23477 5DBD           24                     03  and	al,*3
23478                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23479 5DBF           8846         FC            mov	-4[bp],al
23480                                           !BCC_EOS
23481                                           ! 2833       }
23482                                           ! 2834      else
23483                                           ! 2835       {
23484 5DC2           EB           21            jmp .1DE
23485                       00005DC4            .1DC:
23486                                           ! 2836        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23487                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23488 5DC4           8A46         06            mov	al,6[bp]
23489 5DC7           24                     07  and	al,*7
23490                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23491 5DC9           50                         push	ax
23492 5DCA           B8                   0007  mov	ax,*7
23493 5DCD           2A46         F4            sub	al,0+..FFF7[bp]
23494 5DD0           80DC                   00  sbb	ah,*0
23495 5DD3           44                         inc	sp
23496 5DD4           44                         inc	sp
23497                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23498 5DD5           89C3                       mov	bx,ax
23499 5DD7           8A46         FB            mov	al,-5[bp]
23500 5DDA           30E4                       xor	ah,ah
23501 5DDC           89D9                       mov	cx,bx
23502 5DDE           D3E8                       shr	ax,cl
23503                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23504 5DE0           24                     01  and	al,*1
23505                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5DE2           8846         FC            mov	-4[bp],al
23507                                           !BCC_EOS
23508                                           ! 2837       }
23509                                           ! 2838      break;
23510                       00005DE5            .1DE:
23511 5DE5           EB           4E            jmp .1CD
23512                                           !BCC_EOS
23513                                           ! 2839    case 0x05:
23514                                           ! 2840      addr=CX+DX*(read_word(0x40,0x4A)*8);
23515                       00005DE7            .1DF:
23516                                           ! Debug: list int = const $4A (used reg = )
23517 5DE7           B8                   004A  mov	ax,*$4A
23518 5DEA           50                         push	ax
23519                                           ! Debug: list int = const $40 (used reg = )
23520 5DEB           B8                   0040  mov	ax,*$40
23521 5DEE           50                         push	ax
23522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23523 5DEF           E8         1DCF            call	_read_word
23524 5DF2           83C4                   04  add	sp,*4
23525                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23526 5DF5           B1                     03  mov	cl,*3
23527 5DF7           D3E0                       shl	ax,cl
23528                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23529                                           ! Debug: expression subtree swapping
23530 5DF9           8B4E         08            mov	cx,8[bp]
23531 5DFC           F7E9                       imul	cx
23532                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23533                                           ! Debug: expression subtree swapping
23534 5DFE           0346         06            add	ax,6[bp]
23535                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23536 5E01           8946         F8            mov	-8[bp],ax
23537                                           !BCC_EOS
23538                                           ! 2841      attr=read_byte(0xa000,addr);
23539                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23540 5E04           FF76         F8            push	-8[bp]
23541                                           ! Debug: list unsigned int = const $A000 (used reg = )
23542 5E07           B8                   A000  mov	ax,#$A000
23543 5E0A           50                         push	ax
23544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23545 5E0B           E8         1DA0            call	_read_byte
23546 5E0E           83C4                   04  add	sp,*4
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23548 5E11           8846         FC            mov	-4[bp],al
23549                                           !BCC_EOS
23550                                           ! 2842      break;
23551 5E14           EB           1F            jmp .1CD
23552                                           !BCC_EOS
23553                                           ! 2843    default:
23554                                           ! 2844      attr = 0;
23555                       00005E16            .1E0:
23556                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23557 5E16           30C0                       xor	al,al
23558 5E18           8846         FC            mov	-4[bp],al
23559                                           !BCC_EOS
23560                                           ! 2845   }
23561                                           ! 2846  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23562 5E1B           EB           18            jmp .1CD
23563                       00005E1D            .1CF:
23564 5E1D           2C                     02  sub	al,*2
23565 5E1F         0F84         FF2A            beq 	.1D9
23566 5E23           2C                     01  sub	al,*1
23567 5E25         0F84         FE8D            beq 	.1D1
23568 5E29           2C                     01  sub	al,*1
23569 5E2B         0F84         FE87            beq 	.1D0
23570 5E2F           2C                     01  sub	al,*1
23571 5E31           74           B4            je 	.1DF
23572 5E33           EB           E1            jmp	.1E0
23573                       00005E35            .1CD:
23574                       FFFFFFF4            ..FFF7	=	-$C
23575                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23576 5E35           FF76         0A            push	$A[bp]
23577                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23578 5E38           FF76         F6            push	-$A[bp]
23579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23580 5E3B           E8         1D83            call	_read_word
23581 5E3E           83C4                   04  add	sp,*4
23582                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23583 5E41           30C0                       xor	al,al
23584                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23585 5E43           0A46         FC            or	al,-4[bp]
23586                                           ! Debug: list unsigned int = ax+0 (used reg = )
23587 5E46           50                         push	ax
23588                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23589 5E47           FF76         0A            push	$A[bp]
23590                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23591 5E4A           FF76         F6            push	-$A[bp]
23592                                           ! Debug: func () void = write_word+0 (used reg = )
23593 5E4D           E8         1D9C            call	_write_word
23594 5E50           83C4                   06  add	sp,*6
23595                                           !BCC_EOS
23596                                           ! 2847 }
23597 5E53           89EC                       mov	sp,bp
23598 5E55           5D                         pop	bp
23599 5E56           C3                         ret
23600                                           ! 2848 static void biosfn_write_teletype (car, page, attr, flag)
23601                                           ! Register BX used in function biosfn_read_pixel
23602                                           ! 2849 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23603                       00005E57            _biosfn_write_teletype:
23604                                           !BCC_EOS
23605                                           !BCC_EOS
23606                                           !BCC_EOS
23607                                           !BCC_EOS
23608                                           ! 2850 {
23609                                           ! 2851  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23610                                           !BCC_EOS
23611                                           ! 2852  Bit16u nbcols,nbrows,address;
23612                                           !BCC_EOS
23613                                           ! 2853  Bit16u cursor,dummy;
23614                                           !BCC_EOS
23615                                           ! 2854  if(page==0xff)
23616 5E57           55                         push	bp
23617 5E58           89E5                       mov	bp,sp
23618 5E5A           83C4                   F0  add	sp,*-$10
23619                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23620 5E5D           8A46         06            mov	al,6[bp]
23621 5E60           3C                     FF  cmp	al,#$FF
23622 5E62           75           11            jne 	.1E1
23623                       00005E64            .1E2:
23624                                           ! 2855   page=read_byte(0x40,0x62);
23625                                           ! Debug: list int = const $62 (used reg = )
23626 5E64           B8                   0062  mov	ax,*$62
23627 5E67           50                         push	ax
23628                                           ! Debug: list int = const $40 (used reg = )
23629 5E68           B8                   0040  mov	ax,*$40
23630 5E6B           50                         push	ax
23631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23632 5E6C           E8         1D3F            call	_read_byte
23633 5E6F           83C4                   04  add	sp,*4
23634                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23635 5E72           8846         06            mov	6[bp],al
23636                                           !BCC_EOS
23637                                           ! 2856  mode=read_byte(0x40,0x49);
23638                       00005E75            .1E1:
23639                                           ! Debug: list int = const $49 (used reg = )
23640 5E75           B8                   0049  mov	ax,*$49
23641 5E78           50                         push	ax
23642                                           ! Debug: list int = const $40 (used reg = )
23643 5E79           B8                   0040  mov	ax,*$40
23644 5E7C           50                         push	ax
23645                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23646 5E7D           E8         1D2E            call	_read_byte
23647 5E80           83C4                   04  add	sp,*4
23648                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23649 5E83           8846         FC            mov	-4[bp],al
23650                                           !BCC_EOS
23651                                           ! 2857  line=find_vga_entry(mode);
23652                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23653 5E86           8A46         FC            mov	al,-4[bp]
23654 5E89           30E4                       xor	ah,ah
23655 5E8B           50                         push	ax
23656                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23657 5E8C           E8         1C33            call	_find_vga_entry
23658 5E8F           44                         inc	sp
23659 5E90           44                         inc	sp
23660                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23661 5E91           8846         FB            mov	-5[bp],al
23662                                           !BCC_EOS
23663                                           ! 2858  if(line==0xFF)return;
23664                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23665 5E94           8A46         FB            mov	al,-5[bp]
23666 5E97           3C                     FF  cmp	al,#$FF
23667 5E99           75           04            jne 	.1E3
23668                       00005E9B            .1E4:
23669 5E9B           89EC                       mov	sp,bp
23670 5E9D           5D                         pop	bp
23671 5E9E           C3                         ret
23672                                           !BCC_EOS
23673                                           ! 2859  biosfn_get_cursor_pos(page,&dummy,&cursor);
23674                       00005E9F            .1E3:
23675                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23676 5E9F           8D5E         F2            lea	bx,-$E[bp]
23677 5EA2           53                         push	bx
23678                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23679 5EA3           8D5E         F0            lea	bx,-$10[bp]
23680 5EA6           53                         push	bx
23681                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23682 5EA7           8A46         06            mov	al,6[bp]
23683 5EAA           30E4                       xor	ah,ah
23684 5EAC           50                         push	ax
23685                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23686 5EAD           E8         E560            call	_biosfn_get_cursor_pos
23687 5EB0           83C4                   06  add	sp,*6
23688                                           !BCC_EOS
23689                                           ! 2860  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23690                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23691 5EB3           8A46         F2            mov	al,-$E[bp]
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23693 5EB6           8846         FE            mov	-2[bp],al
23694                                           !BCC_EOS
23695                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23696 5EB9           8B46         F2            mov	ax,-$E[bp]
23697 5EBC           30C0                       xor	al,al
23698                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23699 5EBE           88E0                       mov	al,ah
23700 5EC0           30E4                       xor	ah,ah
23701                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23702 5EC2           8846         FD            mov	-3[bp],al
23703                                           !BCC_EOS
23704                                           ! 2861  nbrows=read_byte(0x40,0x84)+1;
23705                                           ! Debug: list int = const $84 (used reg = )
23706 5EC5           B8                   0084  mov	ax,#$84
23707 5EC8           50                         push	ax
23708                                           ! Debug: list int = const $40 (used reg = )
23709 5EC9           B8                   0040  mov	ax,*$40
23710 5ECC           50                         push	ax
23711                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23712 5ECD           E8         1CDE            call	_read_byte
23713 5ED0           83C4                   04  add	sp,*4
23714                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23715 5ED3           30E4                       xor	ah,ah
23716                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23717 5ED5           40                         inc	ax
23718 5ED6           8946         F6            mov	-$A[bp],ax
23719                                           !BCC_EOS
23720                                           ! 2862  nbcols
23721                                           ! 2862 =read_word(0x40,0x4A);
23722                                           ! Debug: list int = const $4A (used reg = )
23723 5ED9           B8                   004A  mov	ax,*$4A
23724 5EDC           50                         push	ax
23725                                           ! Debug: list int = const $40 (used reg = )
23726 5EDD           B8                   0040  mov	ax,*$40
23727 5EE0           50                         push	ax
23728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23729 5EE1           E8         1CDD            call	_read_word
23730 5EE4           83C4                   04  add	sp,*4
23731                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23732 5EE7           8946         F8            mov	-8[bp],ax
23733                                           !BCC_EOS
23734                                           ! 2863  switch(car)
23735 5EEA           8A46         04            mov	al,4[bp]
23736                                           ! 2864   {
23737 5EED           E9         01EA            br 	.1E7
23738                                           ! 2865    case 7:
23739                                           ! 2866     break;
23740                       00005EF0            .1E8:
23741 5EF0           E9         0208            br 	.1E5
23742                                           !BCC_EOS
23743                                           ! 2867    case 8:
23744                                           ! 2868     if(xcurs>0)xcurs--;
23745                       00005EF3            .1E9:
23746                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23747 5EF3           8A46         FE            mov	al,-2[bp]
23748 5EF6           84C0                       test	al,al
23749 5EF8           74           07            je  	.1EA
23750                       00005EFA            .1EB:
23751                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23752 5EFA           8A46         FE            mov	al,-2[bp]
23753 5EFD           48                         dec	ax
23754 5EFE           8846         FE            mov	-2[bp],al
23755                                           !BCC_EOS
23756                                           ! 2869     break;
23757                       00005F01            .1EA:
23758 5F01           E9         01F7            br 	.1E5
23759                                           !BCC_EOS
23760                                           ! 2870    case '\r':
23761                                           ! 2871     xcurs=0;
23762                       00005F04            .1EC:
23763                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23764 5F04           30C0                       xor	al,al
23765 5F06           8846         FE            mov	-2[bp],al
23766                                           !BCC_EOS
23767                                           ! 2872     break;
23768 5F09           E9         01EF            br 	.1E5
23769                                           !BCC_EOS
23770                                           ! 2873    case '\n':
23771                                           ! 2874     ycurs++;
23772                       00005F0C            .1ED:
23773                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23774 5F0C           8A46         FD            mov	al,-3[bp]
23775 5F0F           40                         inc	ax
23776 5F10           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2875     break;
23779 5F13           E9         01E5            br 	.1E5
23780                                           !BCC_EOS
23781                                           ! 2876    case '\t':
23782                                           ! 2877     do
23783                       00005F16            .1EE:
23784                                           ! 2878      {
23785                       00005F16            .1F1:
23786                                           ! 2879       biosfn_write_teletype(' ',page,attr,flag);
23787                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23788 5F16           8A46         0A            mov	al,$A[bp]
23789 5F19           30E4                       xor	ah,ah
23790 5F1B           50                         push	ax
23791                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23792 5F1C           8A46         08            mov	al,8[bp]
23793 5F1F           30E4                       xor	ah,ah
23794 5F21           50                         push	ax
23795                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23796 5F22           8A46         06            mov	al,6[bp]
23797 5F25           30E4                       xor	ah,ah
23798 5F27           50                         push	ax
23799                                           ! Debug: list int = const $20 (used reg = )
23800 5F28           B8                   0020  mov	ax,*$20
23801 5F2B           50                         push	ax
23802                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23803 5F2C           E8         FF28            call	_biosfn_write_teletype
23804 5F2F           83C4                   08  add	sp,*8
23805                                           !BCC_EOS
23806                                           ! 2880       biosfn_get_cursor_pos(page,&dummy,&cursor);
23807                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23808 5F32           8D5E         F2            lea	bx,-$E[bp]
23809 5F35           53                         push	bx
23810                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23811 5F36           8D5E         F0            lea	bx,-$10[bp]
23812 5F39           53                         push	bx
23813                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23814 5F3A           8A46         06            mov	al,6[bp]
23815 5F3D           30E4                       xor	ah,ah
23816 5F3F           50                         push	ax
23817                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23818 5F40           E8         E4CD            call	_biosfn_get_cursor_pos
23819 5F43           83C4                   06  add	sp,*6
23820                                           !BCC_EOS
23821                                           ! 2881       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23822                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23823 5F46           8A46         F2            mov	al,-$E[bp]
23824                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23825 5F49           8846         FE            mov	-2[bp],al
23826                                           !BCC_EOS
23827                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23828 5F4C           8B46         F2            mov	ax,-$E[bp]
23829 5F4F           30C0                       xor	al,al
23830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23831 5F51           88E0                       mov	al,ah
23832 5F53           30E4                       xor	ah,ah
23833                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23834 5F55           8846         FD            mov	-3[bp],al
23835                                           !BCC_EOS
23836                                           ! 2882      }while(xcurs%8==0);
23837                       00005F58            .1F0:
23838                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23839 5F58           8A46         FE            mov	al,-2[bp]
23840 5F5B           30E4                       xor	ah,ah
23841 5F5D           24                     07  and	al,*7
23842                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23843 5F5F           84C0                       test	al,al
23844 5F61           74           B3            je 	.1F1
23845                       00005F63            .1F2:
23846                                           !BCC_EOS
23847                                           ! 2883     break;
23848                       00005F63            .1EF:
23849 5F63           E9         0195            br 	.1E5
23850                                           !BCC_EOS
23851                                           ! 2884    default:
23852                                           ! 2885     if(vga_modes[line].class==0x00)
23853                       00005F66            .1F3:
23854                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23855 5F66           8A46         FB            mov	al,-5[bp]
23856 5F69           30E4                       xor	ah,ah
23857 5F6B           B1                     03  mov	cl,*3
23858 5F6D           D3E0                       shl	ax,cl
23859 5F6F           89C3                       mov	bx,ax
23860 5F71           81C3                 01F8  add	bx,#_vga_modes
23861                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23862 5F75           8A47         01            mov	al,1[bx]
23863 5F78           84C0                       test	al,al
23864 5F7A         0F85         0082            bne 	.1F4
23865                       00005F7E            .1F5:
23866                                           ! 2886      {
23867                                           ! 2887       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23868                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23869 5F7E           8A46         FD            mov	al,-3[bp]
23870 5F81           30E4                       xor	ah,ah
23871 5F83           8B4E         F8            mov	cx,-8[bp]
23872 5F86           F7E9                       imul	cx
23873                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23874                                           ! Debug: expression subtree swapping
23875 5F88           0246         FE            add	al,-2[bp]
23876 5F8B           80D4                   00  adc	ah,*0
23877                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23878 5F8E           D1E0                       shl	ax,*1
23879 5F90           50                         push	ax
23880                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23881 5F91           8B46         F8            mov	ax,-8[bp]
23882 5F94           8B4E         F6            mov	cx,-$A[bp]
23883 5F97           F7E9                       imul	cx
23884                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23885 5F99           D1E0                       shl	ax,*1
23886                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23887 5F9B           0C                     FF  or	al,#$FF
23888                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23889                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23890 5F9D           89C3                       mov	bx,ax
23891 5F9F           8A46         06            mov	al,6[bp]
23892 5FA2           30E4                       xor	ah,ah
23893 5FA4           93                         xchg	ax,bx
23894 5FA5           40                         inc	ax
23895 5FA6           89D9                       mov	cx,bx
23896 5FA8           F7E9                       imul	cx
23897                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23898 5FAA           0346         EE            add	ax,0+..FFF6[bp]
23899 5FAD           44                         inc	sp
23900 5FAE           44                         inc	sp
23901                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23902 5FAF           8946         F4            mov	-$C[bp],ax
23903                                           !BCC_EOS
23904                                           ! 2888       write_byte(vga_modes[line].sstart,address,car);
23905                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23906 5FB2           8A46         04            mov	al,4[bp]
23907 5FB5           30E4                       xor	ah,ah
23908 5FB7           50                         push	ax
23909                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23910 5FB8           FF76         F4            push	-$C[bp]
23911                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 5FBB           8A46         FB            mov	al,-5[bp]
23913 5FBE           30E4                       xor	ah,ah
23914 5FC0           B1                     03  mov	cl,*3
23915 5FC2           D3E0                       shl	ax,cl
23916 5FC4           89C3                       mov	bx,ax
23917 5FC6           81C3                 01F8  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 5FCA           FF77         04            push	4[bx]
23920                                           ! Debug: func () void = write_byte+0 (used reg = )
23921 5FCD           E8         1C04            call	_write_byte
23922 5FD0           83C4                   06  add	sp,*6
23923                                           !BCC_EOS
23924                                           ! 2889       if(flag==3)
23925                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23926 5FD3           8A46         0A            mov	al,$A[bp]
23927 5FD6           3C                     03  cmp	al,*3
23928 5FD8           75           23            jne 	.1F6
23929                       00005FDA            .1F7:
23930                                           ! 2890        write_byte(vga_modes[line].sstart,address+1,attr);
23931                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23932 5FDA           8A46         08            mov	al,8[bp]
23933 5FDD           30E4                       xor	ah,ah
23934 5FDF           50                         push	ax
23935                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23936 5FE0           8B46         F4            mov	ax,-$C[bp]
23937                                           ! Debug: list unsigned int = ax+1 (used reg = )
23938 5FE3           40                         inc	ax
23939 5FE4           50                         push	ax
23940                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23941 5FE5           8A46         FB            mov	al,-5[bp]
23942 5FE8           30E4                       xor	ah,ah
23943 5FEA           B1                     03  mov	cl,*3
23944 5FEC           D3E0                       shl	ax,cl
23945 5FEE           89C3                       mov	bx,ax
23946 5FF0           81C3                 01F8  add	bx,#_vga_modes
23947                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23948 5FF4           FF77         04            push	4[bx]
23949                                           ! Debug: func () void = write_byte+0 (used reg = )
23950 5FF7           E8         1BDA            call	_write_byte
23951 5FFA           83C4                   06  add	sp,*6
23952                                           !BCC_EOS
23953                                           ! 2891      }
23954                       00005FFD            .1F6:
23955                                           ! 2892     else
23956                                           ! 2893      {
23957 5FFD           E9         00D1            br 	.1F8
23958                       00006000            .1F4:
23959                                           ! 2894       cheight=video_param_table[line_to_vpti[line]].cheight;
23960                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23961 6000           8A46         FB            mov	al,-5[bp]
23962 6003           30E4                       xor	ah,ah
23963 6005           89C3                       mov	bx,ax
23964                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23965 6007           8A87       0278            mov	al,_line_to_vpti[bx]
23966 600B           30E4                       xor	ah,ah
23967 600D           B1                     06  mov	cl,*6
23968 600F           D3E0                       shl	ax,cl
23969 6011           89C3                       mov	bx,ax
23970 6013           81C3                 028C  add	bx,#_video_param_table
23971                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23972 6017           8A47         02            mov	al,2[bx]
23973 601A           8846         FF            mov	-1[bp],al
23974                                           !BCC_EOS
23975                                           ! 2895       bpp=vga_modes[line].pixbits;
23976                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23977 601D           8A46         FB            mov	al,-5[bp]
23978 6020           30E4                       xor	ah,ah
23979 6022           B1                     03  mov	cl,*3
23980 6024           D3E0                       shl	ax,cl
23981 6026           89C3                       mov	bx,ax
23982 6028           81C3                 01F8  add	bx,#_vga_modes
23983                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23984 602C           8A47         03            mov	al,3[bx]
23985 602F           8846         FA            mov	-6[bp],al
23986                                           !BCC_EOS
23987                                           ! 2896       switch(vga_modes[line].memmodel)
23988                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23989 6032           8A46         FB            mov	al,-5[bp]
23990 6035           30E4                       xor	ah,ah
23991 6037           B1                     03  mov	cl,*3
23992 6039           D3E0                       shl	ax,cl
23993 603B           89C3                       mov	bx,ax
23994 603D           81C3                 01F8  add	bx,#_vga_modes
23995 6041           8A47         02            mov	al,2[bx]
23996                                           ! 2897        {
23997 6044           EB           77            jmp .1FB
23998                                           ! 2898         case 0x04:
23999                                           ! 2899         case 0x03:
24000                       00006046            .1FC:
24001                                           ! 2900           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24002                       00006046            .1FD:
24003                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24004 6046           8A46         FF            mov	al,-1[bp]
24005 6049           30E4                       xor	ah,ah
24006 604B           50                         push	ax
24007                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24008 604C           FF76         F8            push	-8[bp]
24009                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24010 604F           8A46         FD            mov	al,-3[bp]
24011 6052           30E4                       xor	ah,ah
24012 6054           50                         push	ax
24013                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24014 6055           8A46         FE            mov	al,-2[bp]
24015 6058           30E4                       xor	ah,ah
24016 605A           50                         push	ax
24017                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24018 605B           8A46         08            mov	al,8[bp]
24019 605E           30E4                       xor	ah,ah
24020 6060           50                         push	ax
24021                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24022 6061           8A46         04            mov	al,4[bp]
24023 6064           30E4                       xor	ah,ah
24024 6066           50                         push	ax
24025                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24026 6067           E8         F09F            call	_write_gfx_char_pl4
24027 606A           83C4                   0C  add	sp,*$C
24028                                           !BCC_EOS
24029                                           ! 2901           break;
24030 606D           EB           62            jmp .1F9
24031                                           !BCC_EOS
24032                                           ! 2902         case 0x02:
24033                                           ! 2903           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24034                       0000606F            .1FE:
24035                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24036 606F           8A46         FA            mov	al,-6[bp]
24037 6072           30E4                       xor	ah,ah
24038 6074           50                         push	ax
24039                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24040 6075           FF76         F8            push	-8[bp]
24041                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24042 6078           8A46         FD            mov	al,-3[bp]
24043 607B           30E4                       xor	ah,ah
24044 607D           50                         push	ax
24045                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24046 607E           8A46         FE            mov	al,-2[bp]
24047 6081           30E4                       xor	ah,ah
24048 6083           50                         push	ax
24049                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24050 6084           8A46         08            mov	al,8[bp]
24051 6087           30E4                       xor	ah,ah
24052 6089           50                         push	ax
24053                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24054 608A           8A46         04            mov	al,4[bp]
24055 608D           30E4                       xor	ah,ah
24056 608F           50                         push	ax
24057                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24058 6090           E8         F1E9            call	_write_gfx_char_cga
24059 6093           83C4                   0C  add	sp,*$C
24060                                           !BCC_EOS
24061                                           ! 2904           break;
24062 6096           EB           39            jmp .1F9
24063                                           !BCC_EOS
24064                                           ! 2905         case 0x05:
24065                                           ! 2906           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24066                       00006098            .1FF:
24067                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24068 6098           FF76         F8            push	-8[bp]
24069                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24070 609B           8A46         FD            mov	al,-3[bp]
24071 609E           30E4                       xor	ah,ah
24072 60A0           50                         push	ax
24073                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24074 60A1           8A46         FE            mov	al,-2[bp]
24075 60A4           30E4                       xor	ah,ah
24076 60A6           50                         push	ax
24077                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24078 60A7           8A46         08            mov	al,8[bp]
24079 60AA           30E4                       xor	ah,ah
24080 60AC           50                         push	ax
24081                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24082 60AD           8A46         04            mov	al,4[bp]
24083 60B0           30E4                       xor	ah,ah
24084 60B2           50                         push	ax
24085                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24086 60B3           E8         F3C9            call	_write_gfx_char_lin
24087 60B6           83C4                   0A  add	sp,*$A
24088                                           !BCC_EOS
24089                                           ! 2907           break;
24090 60B9           EB           16            jmp .1F9
24091                                           !BCC_EOS
24092                                           ! 2908        }
24093                                           ! 2909      }
24094 60BB           EB           14            jmp .1F9
24095                       000060BD            .1FB:
24096 60BD           2C                     02  sub	al,*2
24097 60BF           74           AE            je 	.1FE
24098 60C1           2C                     01  sub	al,*1
24099 60C3         0F84         FF7F            beq 	.1FD
24100 60C7           2C                     01  sub	al,*1
24101 60C9         0F84         FF79            beq 	.1FC
24102 60CD           2C                     01  sub	al,*1
24103 60CF           74           C7            je 	.1FF
24104                       000060D1            .1F9:
24105                                           ! 2910     xcurs++;
24106                       000060D1            .1F8:
24107                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24108 60D1           8A46         FE            mov	al,-2[bp]
24109 60D4           40                         inc	ax
24110 60D5           8846         FE            mov	-2[bp],al
24111                                           !BCC_EOS
24112                                           ! 2911   }
24113                                           ! 2912  if(xcurs==nbcols)
24114 60D8           EB           21            jmp .1E5
24115                       000060DA            .1E7:
24116 60DA           2C                     07  sub	al,*7
24117 60DC         0F84         FE10            beq 	.1E8
24118 60E0           2C                     01  sub	al,*1
24119 60E2         0F84         FE0D            beq 	.1E9
24120 60E6           2C                     01  sub	al,*1
24121 60E8         0F84         FE2A            beq 	.1EE
24122 60EC           2C                     01  sub	al,*1
24123 60EE         0F84         FE1A            beq 	.1ED
24124 60F2           2C                     03  sub	al,*3
24125 60F4         0F84         FE0C            beq 	.1EC
24126 60F8           E9         FE6B            br 	.1F3
24127                       000060FB            .1E5:
24128                       FFFFFFEE            ..FFF6	=	-$12
24129                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24130 60FB           8A46         FE            mov	al,-2[bp]
24131 60FE           30E4                       xor	ah,ah
24132 6100           3B46         F8            cmp	ax,-8[bp]
24133 6103           75           0C            jne 	.200
24134                       00006105            .201:
24135                                           ! 2913   {xcurs=0;
24136                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24137 6105           30C0                       xor	al,al
24138 6107           8846         FE            mov	-2[bp],al
24139                                           !BCC_EOS
24140                                           ! 2914    ycurs++;
24141                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24142 610A           8A46         FD            mov	al,-3[bp]
24143 610D           40                         inc	ax
24144 610E           8846         FD            mov	-3[bp],al
24145                                           !BCC_EOS
24146                                           ! 2915   }
24147                                           ! 2916  if(ycurs==nbrows)
24148                       00006111            .200:
24149                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24150 6111           8A46         FD            mov	al,-3[bp]
24151 6114           30E4                       xor	ah,ah
24152 6116           3B46         F6            cmp	ax,-$A[bp]
24153 6119         0F85         00C9            bne 	.202
24154                       0000611D            .203:
24155                                           ! 2917   {
24156                                           ! 2918    if(vga_modes[line].class==0x00)
24157                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24158 611D           8A46         FB            mov	al,-5[bp]
24159 6120           30E4                       xor	ah,ah
24160 6122           B1                     03  mov	cl,*3
24161 6124           D3E0                       shl	ax,cl
24162 6126           89C3                       mov	bx,ax
24163 6128           81C3                 01F8  add	bx,#_vga_modes
24164                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24165 612C           8A47         01            mov	al,1[bx]
24166 612F           84C0                       test	al,al
24167 6131         0F85         0081            bne 	.204
24168                       00006135            .205:
24169                                           ! 2919     {
24170                                           ! 2920      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24171                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24172 6135           8A46         FD            mov	al,-3[bp]
24173 6138           30E4                       xor	ah,ah
24174                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24175 613A           48                         dec	ax
24176 613B           8B4E         F8            mov	cx,-8[bp]
24177 613E           F7E9                       imul	cx
24178                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24179                                           ! Debug: expression subtree swapping
24180 6140           0246         FE            add	al,-2[bp]
24181 6143           80D4                   00  adc	ah,*0
24182                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24183 6146           D1E0                       shl	ax,*1
24184 6148           50                         push	ax
24185                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24186 6149           8B46         F8            mov	ax,-8[bp]
24187 614C           8B4E         F6            mov	cx,-$A[bp]
24188 614F           F7E9                       imul	cx
24189                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24190 6151           D1E0                       shl	ax,*1
24191                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24192 6153           0C                     FF  or	al,#$FF
24193                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24194                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24195 6155           89C3                       mov	bx,ax
24196 6157           8A46         06            mov	al,6[bp]
24197 615A           30E4                       xor	ah,ah
24198 615C           93                         xchg	ax,bx
24199 615D           40                         inc	ax
24200 615E           89D9                       mov	cx,bx
24201 6160           F7E9                       imul	cx
24202                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24203 6162           0346         EE            add	ax,-$12[bp]
24204 6165           44                         inc	sp
24205 6166           44                         inc	sp
24206                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24207 6167           8946         F4            mov	-$C[bp],ax
24208                                           !BCC_EOS
24209                                           ! 2921      attr=read_byte(vga_modes[line].sstart,address+1);
24210                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24211 616A           8B46         F4            mov	ax,-$C[bp]
24212                                           ! Debug: list unsigned int = ax+1 (used reg = )
24213 616D           40                         inc	ax
24214 616E           50                         push	ax
24215                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24216 616F           8A46         FB            mov	al,-5[bp]
24217 6172           30E4                       xor	ah,ah
24218 6174           B1                     03  mov	cl,*3
24219 6176           D3E0                       shl	ax,cl
24220 6178           89C3                       mov	bx,ax
24221 617A           81C3                 01F8  add	bx,#_vga_modes
24222                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24223 617E           FF77         04            push	4[bx]
24224                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24225 6181           E8         1A2A            call	_read_byte
24226 6184           83C4                   04  add	sp,*4
24227                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24228 6187           8846         08            mov	8[bp],al
24229                                           !BCC_EOS
24230                                           ! 2922      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24231                                           ! Debug: list int = const 1 (used reg = )
24232 618A           B8                   0001  mov	ax,*1
24233 618D           50                         push	ax
24234                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24235 618E           8A46         06            mov	al,6[bp]
24236 6191           30E4                       xor	ah,ah
24237 6193           50                         push	ax
24238                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24239 6194           8B46         F8            mov	ax,-8[bp]
24240                                           ! Debug: list unsigned int = ax-1 (used reg = )
24241 6197           48                         dec	ax
24242 6198           50                         push	ax
24243                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24244 6199           8B46         F6            mov	ax,-$A[bp]
24245                                           ! Debug: list unsigned int = ax-1 (used reg = )
24246 619C           48                         dec	ax
24247 619D           50                         push	ax
24248                                           ! Debug: list int = const 0 (used reg = )
24249 619E           31C0                       xor	ax,ax
24250 61A0           50                         push	ax
24251                                           ! Debug: list int = const 0 (used reg = )
24252 61A1           31C0                       xor	ax,ax
24253 61A3           50                         push	ax
24254                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24255 61A4           8A46         08            mov	al,8[bp]
24256 61A7           30E4                       xor	ah,ah
24257 61A9           50                         push	ax
24258                                           ! Debug: list int = const 1 (used reg = )
24259 61AA           B8                   0001  mov	ax,*1
24260 61AD           50                         push	ax
24261                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24262 61AE           E8         E757            call	_biosfn_scroll
24263 61B1           83C4                   10  add	sp,*$10
24264                                           !BCC_EOS
24265                                           ! 2923     }
24266                                           ! 2924    else
24267                                           ! 2925     {
24268 61B4           EB           27            jmp .206
24269                       000061B6            .204:
24270                                           ! 2926      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24271                                           ! Debug: list int = const 1 (used reg = )
24272 61B6           B8                   0001  mov	ax,*1
24273 61B9           50                         push	ax
24274                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24275 61BA           8A46         06            mov	al,6[bp]
24276 61BD           30E4                       xor	ah,ah
24277 61BF           50                         push	ax
24278                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24279 61C0           8B46         F8            mov	ax,-8[bp]
24280                                           ! Debug: list unsigned int = ax-1 (used reg = )
24281 61C3           48                         dec	ax
24282 61C4           50                         push	ax
24283                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24284 61C5           8B46         F6            mov	ax,-$A[bp]
24285                                           ! Debug: list unsigned int = ax-1 (used reg = )
24286 61C8           48                         dec	ax
24287 61C9           50                         push	ax
24288                                           ! Debug: list int = const 0 (used reg = )
24289 61CA           31C0                       xor	ax,ax
24290 61CC           50                         push	ax
24291                                           ! Debug: list int = const 0 (used reg = )
24292 61CD           31C0                       xor	ax,ax
24293 61CF           50                         push	ax
24294                                           ! Debug: list int = const 0 (used reg = )
24295 61D0           31C0                       xor	ax,ax
24296 61D2           50                         push	ax
24297                                           ! Debug: list int = const 1 (used reg = )
24298 61D3           B8                   0001  mov	ax,*1
24299 61D6           50                         push	ax
24300                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24301 61D7           E8         E72E            call	_biosfn_scroll
24302 61DA           83C4                   10  add	sp,*$10
24303                                           !BCC_EOS
24304                                           ! 2927     }
24305                                           ! 2928    ycurs-=1;
24306                       000061DD            .206:
24307                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24308 61DD           8A46         FD            mov	al,-3[bp]
24309 61E0           30E4                       xor	ah,ah
24310 61E2           48                         dec	ax
24311 61E3           8846         FD            mov	-3[bp],al
24312                                           !BCC_EOS
24313                                           ! 2929   }
24314                                           ! 2930  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24315                       000061E6            .202:
24316                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24317 61E6           8A46         FD            mov	al,-3[bp]
24318 61E9           30E4                       xor	ah,ah
24319 61EB           8946         F2            mov	-$E[bp],ax
24320                                           !BCC_EOS
24321                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24322 61EE           8B46         F2            mov	ax,-$E[bp]
24323 61F1           88C4                       mov	ah,al
24324 61F3           30C0                       xor	al,al
24325 61F5           8946         F2            mov	-$E[bp],ax
24326                                           !BCC_EOS
24327                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24328 61F8           8B46         F2            mov	ax,-$E[bp]
24329 61FB           0246         FE            add	al,-2[bp]
24330 61FE           80D4                   00  adc	ah,*0
24331 6201           8946         F2            mov	-$E[bp],ax
24332                                           !BCC_EOS
24333                                           ! 2931  biosfn_set_cursor_pos(page,cursor);
24334                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24335 6204           FF76         F2            push	-$E[bp]
24336                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24337 6207           8A46         06            mov	al,6[bp]
24338 620A           30E4                       xor	ah,ah
24339 620C           50                         push	ax
24340                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24341 620D           E8         E100            call	_biosfn_set_cursor_pos
24342 6210           83C4                   04  add	sp,*4
24343                                           !BCC_EOS
24344                                           ! 2932 }
24345 6213           89EC                       mov	sp,bp
24346 6215           5D                         pop	bp
24347 6216           C3                         ret
24348                                           ! 2933 #asm
24349                                           !BCC_ASM
24350                       00000008            _biosfn_write_teletype.flag	set	8
24351                       00000006            _biosfn_write_teletype.attr	set	6
24352                       00000004            _biosfn_write_teletype.page	set	4
24353                       00000002            _biosfn_write_teletype.car	set	2
24354                       00006217            biosfn_get_video_mode:
24355 6217           1E                           push ds
24356 6218           B8                   0040    mov ax, # 0x40
24357 621B           8ED8                         mov ds, ax
24358 621D           53                           push bx
24359 621E           BB                   0062    mov bx, # 0x62
24360 6221           8A07                         mov al, [bx]
24361 6223           5B                           pop bx
24362 6224           88C7                         mov bh, al
24363 6226           53                           push bx
24364 6227           BB                   0087    mov bx, # 0x87
24365 622A           8A27                         mov ah, [bx]
24366 622C           80E4                   80    and ah, #0x80
24367 622F           BB                   0049    mov bx, # 0x49
24368 6232           8A07                         mov al, [bx]
24369 6234           08E0                         or al, ah
24370 6236           BB                   004A    mov bx, # 0x4A
24371 6239           8A27                         mov ah, [bx]
24372 623B           5B                           pop bx
24373 623C           1F                           pop ds
24374 623D           C3                           ret
24375                                           ! 2955 endasm
24376                                           !BCC_ENDASM
24377                                           ! 2956 #asm
24378                                           !BCC_ASM
24379                       00000008            _biosfn_write_teletype.flag	set	8
24380                       00000006            _biosfn_write_teletype.attr	set	6
24381                       00000004            _biosfn_write_teletype.page	set	4
24382                       00000002            _biosfn_write_teletype.car	set	2
24383                       0000623E            biosfn_group_10:
24384 623E           3C                     00    cmp al, #0x00
24385 6240           75           02              jne int10_test_1001
24386 6242           EB           61              jmp biosfn_set_single_palette_reg
24387                       00006244            int10_test_1001:
24388 6244           3C                     01    cmp al, #0x01
24389 6246           75           02              jne int10_test_1002
24390 6248           EB           75              jmp biosfn_set_overscan_border_color
24391                       0000624A            int10_test_1002:
24392 624A           3C                     02    cmp al, #0x02
24393 624C           75           02              jne int10_test_1003
24394 624E           EB           77              jmp biosfn_set_all_palette_reg
24395                       00006250            int10_test_1003:
24396 6250           3C                     03    cmp al, #0x03
24397 6252           75           03              jne int10_test_1007
24398 6254           E9         009D              jmp biosfn_toggle_intensity
24399                       00006257            int10_test_1007:
24400 6257           3C                     07    cmp al, #0x07
24401 6259           75           03              jne int10_test_1008
24402 625B           E9         00BC              jmp biosfn_get_single_palette_reg
24403                       0000625E            int10_test_1008:
24404 625E           3C                     08    cmp al, #0x08
24405 6260           75           03              jne int10_test_1009
24406 6262           E9         00D9              jmp biosfn_read_overscan_border_color
24407                       00006265            int10_test_1009:
24408 6265           3C                     09    cmp al, #0x09
24409 6267           75           03              jne int10_test_1010
24410 6269           E9         00E0              jmp biosfn_get_all_palette_reg
24411                       0000626C            int10_test_1010:
24412 626C           3C                     10    cmp al, #0x10
24413 626E           75           03              jne int10_test_1012
24414 6270           E9         011A              jmp biosfn_set_single_dac_reg
24415                       00006273            int10_test_1012:
24416 6273           3C                     12    cmp al, #0x12
24417 6275           75           03              jne int10_test_1013
24418 6277           E9         012C              jmp biosfn_set_all_dac_reg
24419                       0000627A            int10_test_1013:
24420 627A           3C                     13    cmp al, #0x13
24421 627C           75           03              jne int10_test_1015
24422 627E           E9         014D              jmp biosfn_select_video_dac_color_page
24423                       00006281            int10_test_1015:
24424 6281           3C                     15    cmp al, #0x15
24425 6283           75           03              jne int10_test_1017
24426 6285           E9         0189              jmp biosfn_read_single_dac_reg
24427                       00006288            int10_test_1017:
24428 6288           3C                     17    cmp al, #0x17
24429 628A           75           03              jne int10_test_1018
24430 628C           E9         019D              jmp biosfn_read_all_dac_reg
24431                       0000628F            int10_test_1018:
24432 628F           3C                     18    cmp al, #0x18
24433 6291           75           03              jne int10_test_1019
24434 6293           E9         01BE              jmp biosfn_set_pel_mask
24435                       00006296            int10_test_1019:
24436 6296           3C                     19    cmp al, #0x19
24437 6298           75           03              jne int10_test_101A
24438 629A           E9         01C2              jmp biosfn_read_pel_mask
24439                       0000629D            int10_test_101A:
24440 629D           3C                     1A    cmp al, #0x1a
24441 629F           75           03              jne int10_group_10_unknown
24442 62A1           E9         01C6              jmp biosfn_read_video_dac_state
24443                       000062A4            int10_group_10_unknown:
24444 62A4           C3                           ret
24445                       000062A5            biosfn_set_single_palette_reg:
24446 62A5           80FB                   14    cmp bl, #0x14
24447 62A8           77           14              ja no_actl_reg1
24448 62AA           50                           push ax
24449 62AB           52                           push dx
24450 62AC           BA                   03DA    mov dx, # 0x3da
24451 62AF           EC                           in al, dx
24452 62B0           BA                   03C0    mov dx, # 0x3c0
24453 62B3           88D8                         mov al, bl
24454 62B5           EE                           out dx, al
24455 62B6           88F8                         mov al, bh
24456 62B8           EE                           out dx, al
24457 62B9           B0                     20    mov al, #0x20
24458 62BB           EE                           out dx, al
24459 62BC           5A                           pop dx
24460 62BD           58                           pop ax
24461                       000062BE            no_actl_reg1:
24462 62BE           C3                           ret
24463                                           ! 3037 endasm
24464                                           !BCC_ENDASM
24465                                           ! 3038 #asm
24466                                           !BCC_ASM
24467                       00000008            _biosfn_write_teletype.flag	set	8
24468                       00000006            _biosfn_write_teletype.attr	set	6
24469                       00000004            _biosfn_write_teletype.page	set	4
24470                       00000002            _biosfn_write_teletype.car	set	2
24471                       000062BF            biosfn_set_overscan_border_color:
24472 62BF           53                           push bx
24473 62C0           B3                     11    mov bl, #0x11
24474 62C2           E8         FFE0              call biosfn_set_single_palette_reg
24475 62C5           5B                           pop bx
24476 62C6           C3                           ret
24477                                           ! 3045 endasm
24478                                           !BCC_ENDASM
24479                                           ! 3046 #asm
24480                                           !BCC_ASM
24481                       00000008            _biosfn_write_teletype.flag	set	8
24482                       00000006            _biosfn_write_teletype.attr	set	6
24483                       00000004            _biosfn_write_teletype.page	set	4
24484                       00000002            _biosfn_write_teletype.car	set	2
24485                       000062C7            biosfn_set_all_palette_reg:
24486 62C7           50                           push ax
24487 62C8           53                           push bx
24488 62C9           51                           push cx
24489 62CA           52                           push dx
24490 62CB           89D3                         mov bx, dx
24491 62CD           BA                   03DA    mov dx, # 0x3da
24492 62D0           EC                           in al, dx
24493 62D1           B1                     00    mov cl, #0x00
24494 62D3           BA                   03C0    mov dx, # 0x3c0
24495                       000062D6            set_palette_loop:
24496 62D6           88C8                         mov al, cl
24497 62D8           EE                           out dx, al
24498 62D9           26                           seg es
24499 62DA           8A07                         mov al, [bx]
24500 62DC           EE                           out dx, al
24501 62DD           43                           inc bx
24502 62DE           FEC1                         inc cl
24503 62E0           80F9                   10    cmp cl, #0x10
24504 62E3           75           F1              jne set_palette_loop
24505 62E5           B0                     11    mov al, #0x11
24506 62E7           EE                           out dx, al
24507 62E8           26                           seg es
24508 62E9           8A07                         mov al, [bx]
24509 62EB           EE                           out dx, al
24510 62EC           B0                     20    mov al, #0x20
24511 62EE           EE                           out dx, al
24512 62EF           5A                           pop dx
24513 62F0           59                           pop cx
24514 62F1           5B                           pop bx
24515 62F2           58                           pop ax
24516 62F3           C3                           ret
24517                                           ! 3079 endasm
24518                                           !BCC_ENDASM
24519                                           ! 3080 #asm
24520                                           !BCC_ASM
24521                       00000008            _biosfn_write_teletype.flag	set	8
24522                       00000006            _biosfn_write_teletype.attr	set	6
24523                       00000004            _biosfn_write_teletype.page	set	4
24524                       00000002            _biosfn_write_teletype.car	set	2
24525                       000062F4            biosfn_toggle_intensity:
24526 62F4           50                           push ax
24527 62F5           53                           push bx
24528 62F6           52                           push dx
24529 62F7           BA                   03DA    mov dx, # 0x3da
24530 62FA           EC                           in al, dx
24531 62FB           BA                   03C0    mov dx, # 0x3c0
24532 62FE           B0                     10    mov al, #0x10
24533 6300           EE                           out dx, al
24534 6301           BA                   03C1    mov dx, # 0x3c1
24535 6304           EC                           in al, dx
24536 6305           24                     F7    and al, #0xf7
24537 6307           80E3                   01    and bl, #0x01
24538 630A           C0E3                   03    shl bl, 3
24539 630D           08D8                         or al, bl
24540 630F           BA                   03C0    mov dx, # 0x3c0
24541 6312           EE                           out dx, al
24542 6313           B0                     20    mov al, #0x20
24543 6315           EE                           out dx, al
24544 6316           5A                           pop dx
24545 6317           5B                           pop bx
24546 6318           58                           pop ax
24547 6319           C3                           ret
24548                                           ! 3104 endasm
24549                                           !BCC_ENDASM
24550                                           ! 3105 #asm
24551                                           !BCC_ASM
24552                       00000008            _biosfn_write_teletype.flag	set	8
24553                       00000006            _biosfn_write_teletype.attr	set	6
24554                       00000004            _biosfn_write_teletype.page	set	4
24555                       00000002            _biosfn_write_teletype.car	set	2
24556                       0000631A            biosfn_get_single_palette_reg:
24557 631A           80FB                   14    cmp bl, #0x14
24558 631D           77           1E              ja no_actl_reg2
24559 631F           50                           push ax
24560 6320           52                           push dx
24561 6321           BA                   03DA    mov dx, # 0x3da
24562 6324           EC                           in al, dx
24563 6325           BA                   03C0    mov dx, # 0x3c0
24564 6328           88D8                         mov al, bl
24565 632A           EE                           out dx, al
24566 632B           BA                   03C1    mov dx, # 0x3c1
24567 632E           EC                           in al, dx
24568 632F           88C7                         mov bh, al
24569 6331           BA                   03DA    mov dx, # 0x3da
24570 6334           EC                           in al, dx
24571 6335           BA                   03C0    mov dx, # 0x3c0
24572 6338           B0                     20    mov al, #0x20
24573 633A           EE                           out dx, al
24574 633B           5A                           pop dx
24575 633C           58                           pop ax
24576                       0000633D            no_actl_reg2:
24577 633D           C3                           ret
24578                                           ! 3128 endasm
24579                                           !BCC_ENDASM
24580                                           ! 3129 #asm
24581                                           !BCC_ASM
24582                       00000008            _biosfn_write_teletype.flag	set	8
24583                       00000006            _biosfn_write_teletype.attr	set	6
24584                       00000004            _biosfn_write_teletype.page	set	4
24585                       00000002            _biosfn_write_teletype.car	set	2
24586                       0000633E            biosfn_read_overscan_border_color:
24587 633E           50                           push ax
24588 633F           53                           push bx
24589 6340           B3                     11    mov bl, #0x11
24590 6342           E8         FFD5              call biosfn_get_single_palette_reg
24591 6345           88F8                         mov al, bh
24592 6347           5B                           pop bx
24593 6348           88C7                         mov bh, al
24594 634A           58                           pop ax
24595 634B           C3                           ret
24596                                           ! 3140 endasm
24597                                           !BCC_ENDASM
24598                                           ! 3141 #asm
24599                                           !BCC_ASM
24600                       00000008            _biosfn_write_teletype.flag	set	8
24601                       00000006            _biosfn_write_teletype.attr	set	6
24602                       00000004            _biosfn_write_teletype.page	set	4
24603                       00000002            _biosfn_write_teletype.car	set	2
24604                       0000634C            biosfn_get_all_palette_reg:
24605 634C           50                           push ax
24606 634D           53                           push bx
24607 634E           51                           push cx
24608 634F           52                           push dx
24609 6350           89D3                         mov bx, dx
24610 6352           B1                     00    mov cl, #0x00
24611                       00006354            get_palette_loop:
24612 6354           BA                   03DA    mov dx, # 0x3da
24613 6357           EC                           in al, dx
24614 6358           BA                   03C0    mov dx, # 0x3c0
24615 635B           88C8                         mov al, cl
24616 635D           EE                           out dx, al
24617 635E           BA                   03C1    mov dx, # 0x3c1
24618 6361           EC                           in al, dx
24619 6362           26                           seg es
24620 6363           8807                         mov [bx], al
24621 6365           43                           inc bx
24622 6366           FEC1                         inc cl
24623 6368           80F9                   10    cmp cl, #0x10
24624 636B           75           E7              jne get_palette_loop
24625 636D           BA                   03DA    mov dx, # 0x3da
24626 6370           EC                           in al, dx
24627 6371           BA                   03C0    mov dx, # 0x3c0
24628 6374           B0                     11    mov al, #0x11
24629 6376           EE                           out dx, al
24630 6377           BA                   03C1    mov dx, # 0x3c1
24631 637A           EC                           in al, dx
24632 637B           26                           seg es
24633 637C           8807                         mov [bx], al
24634 637E           BA                   03DA    mov dx, # 0x3da
24635 6381           EC                           in al, dx
24636 6382           BA                   03C0    mov dx, # 0x3c0
24637 6385           B0                     20    mov al, #0x20
24638 6387           EE                           out dx, al
24639 6388           5A                           pop dx
24640 6389           59                           pop cx
24641 638A           5B                           pop bx
24642 638B           58                           pop ax
24643 638C           C3                           ret
24644                                           ! 3182 endasm
24645                                           !BCC_ENDASM
24646                                           ! 3183 #asm
24647                                           !BCC_ASM
24648                       00000008            _biosfn_write_teletype.flag	set	8
24649                       00000006            _biosfn_write_teletype.attr	set	6
24650                       00000004            _biosfn_write_teletype.page	set	4
24651                       00000002            _biosfn_write_teletype.car	set	2
24652                       0000638D            biosfn_set_single_dac_reg:
24653 638D           50                           push ax
24654 638E           52                           push dx
24655 638F           BA                   03C8    mov dx, # 0x3c8
24656 6392           88D8                         mov al, bl
24657 6394           EE                           out dx, al
24658 6395           BA                   03C9    mov dx, # 0x3c9
24659 6398           58                           pop ax
24660 6399           50                           push ax
24661 639A           88E0                         mov al, ah
24662 639C           EE                           out dx, al
24663 639D           88E8                         mov al, ch
24664 639F           EE                           out dx, al
24665 63A0           88C8                         mov al, cl
24666 63A2           EE                           out dx, al
24667 63A3           5A                           pop dx
24668 63A4           58                           pop ax
24669 63A5           C3                           ret
24670                                           ! 3202 endasm
24671                                           !BCC_ENDASM
24672                                           ! 3203 #asm
24673                                           !BCC_ASM
24674                       00000008            _biosfn_write_teletype.flag	set	8
24675                       00000006            _biosfn_write_teletype.attr	set	6
24676                       00000004            _biosfn_write_teletype.page	set	4
24677                       00000002            _biosfn_write_teletype.car	set	2
24678                       000063A6            biosfn_set_all_dac_reg:
24679 63A6           50                           push ax
24680 63A7           53                           push bx
24681 63A8           51                           push cx
24682 63A9           52                           push dx
24683 63AA           BA                   03C8    mov dx, # 0x3c8
24684 63AD           88D8                         mov al, bl
24685 63AF           EE                           out dx, al
24686 63B0           5A                           pop dx
24687 63B1           52                           push dx
24688 63B2           89D3                         mov bx, dx
24689 63B4           BA                   03C9    mov dx, # 0x3c9
24690                       000063B7            set_dac_loop:
24691 63B7           26                           seg es
24692 63B8           8A07                         mov al, [bx]
24693 63BA           EE                           out dx, al
24694 63BB           43                           inc bx
24695 63BC           26                           seg es
24696 63BD           8A07                         mov al, [bx]
24697 63BF           EE                           out dx, al
24698 63C0           43                           inc bx
24699 63C1           26                           seg es
24700 63C2           8A07                         mov al, [bx]
24701 63C4           EE                           out dx, al
24702 63C5           43                           inc bx
24703 63C6           49                           dec cx
24704 63C7           75           EE              jnz set_dac_loop
24705 63C9           5A                           pop dx
24706 63CA           59                           pop cx
24707 63CB           5B                           pop bx
24708 63CC           58                           pop ax
24709 63CD           C3                           ret
24710                                           ! 3236 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3237 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       000063CE            biosfn_select_video_dac_color_page:
24719 63CE           50                           push ax
24720 63CF           53                           push bx
24721 63D0           52                           push dx
24722 63D1           BA                   03DA    mov dx, # 0x3da
24723 63D4           EC                           in al, dx
24724 63D5           BA                   03C0    mov dx, # 0x3c0
24725 63D8           B0                     10    mov al, #0x10
24726 63DA           EE                           out dx, al
24727 63DB           BA                   03C1    mov dx, # 0x3c1
24728 63DE           EC                           in al, dx
24729 63DF           80E3                   01    and bl, #0x01
24730 63E2           75           0D              jnz set_dac_page
24731 63E4           24                     7F    and al, #0x7f
24732 63E6           C0E7                   07    shl bh, 7
24733 63E9           08F8                         or al, bh
24734 63EB           BA                   03C0    mov dx, # 0x3c0
24735 63EE           EE                           out dx, al
24736 63EF           EB           19              jmp set_actl_normal
24737                       000063F1            set_dac_page:
24738 63F1           50                           push ax
24739 63F2           BA                   03DA    mov dx, # 0x3da
24740 63F5           EC                           in al, dx
24741 63F6           BA                   03C0    mov dx, # 0x3c0
24742 63F9           B0                     14    mov al, #0x14
24743 63FB           EE                           out dx, al
24744 63FC           58                           pop ax
24745 63FD           24                     80    and al, #0x80
24746 63FF           75           03              jnz set_dac_16_page
24747 6401           C0E7                   02    shl bh, 2
24748                       00006404            set_dac_16_page:
24749 6404           80E7                   0F    and bh, #0x0f
24750 6407           88F8                         mov al, bh
24751 6409           EE                           out dx, al
24752                       0000640A            set_actl_normal:
24753 640A           B0                     20    mov al, #0x20
24754 640C           EE                           out dx, al
24755 640D           5A                           pop dx
24756 640E           5B                           pop bx
24757 640F           58                           pop ax
24758 6410           C3                           ret
24759                                           ! 3279 endasm
24760                                           !BCC_ENDASM
24761                                           ! 3280 #asm
24762                                           !BCC_ASM
24763                       00000008            _biosfn_write_teletype.flag	set	8
24764                       00000006            _biosfn_write_teletype.attr	set	6
24765                       00000004            _biosfn_write_teletype.page	set	4
24766                       00000002            _biosfn_write_teletype.car	set	2
24767                       00006411            biosfn_read_single_dac_reg:
24768 6411           50                           push ax
24769 6412           52                           push dx
24770 6413           BA                   03C7    mov dx, # 0x3c7
24771 6416           88D8                         mov al, bl
24772 6418           EE                           out dx, al
24773 6419           58                           pop ax
24774 641A           88C4                         mov ah, al
24775 641C           BA                   03C9    mov dx, # 0x3c9
24776 641F           EC                           in al, dx
24777 6420           86E0                         xchg al, ah
24778 6422           50                           push ax
24779 6423           EC                           in al, dx
24780 6424           88C5                         mov ch, al
24781 6426           EC                           in al, dx
24782 6427           88C1                         mov cl, al
24783 6429           5A                           pop dx
24784 642A           58                           pop ax
24785 642B           C3                           ret
24786                                           ! 3300 endasm
24787                                           !BCC_ENDASM
24788                                           ! 3301 #asm
24789                                           !BCC_ASM
24790                       00000008            _biosfn_write_teletype.flag	set	8
24791                       00000006            _biosfn_write_teletype.attr	set	6
24792                       00000004            _biosfn_write_teletype.page	set	4
24793                       00000002            _biosfn_write_teletype.car	set	2
24794                       0000642C            biosfn_read_all_dac_reg:
24795 642C           50                           push ax
24796 642D           53                           push bx
24797 642E           51                           push cx
24798 642F           52                           push dx
24799 6430           BA                   03C7    mov dx, # 0x3c7
24800 6433           88D8                         mov al, bl
24801 6435           EE                           out dx, al
24802 6436           5A                           pop dx
24803 6437           52                           push dx
24804 6438           89D3                         mov bx, dx
24805 643A           BA                   03C9    mov dx, # 0x3c9
24806                       0000643D            read_dac_loop:
24807 643D           EC                           in al, dx
24808 643E           26                           seg es
24809 643F           8807                         mov [bx], al
24810 6441           43                           inc bx
24811 6442           EC                           in al, dx
24812 6443           26                           seg es
24813 6444           8807                         mov [bx], al
24814 6446           43                           inc bx
24815 6447           EC                           in al, dx
24816 6448           26                           seg es
24817 6449           8807                         mov [bx], al
24818 644B           43                           inc bx
24819 644C           49                           dec cx
24820 644D           75           EE              jnz read_dac_loop
24821 644F           5A                           pop dx
24822 6450           59                           pop cx
24823 6451           5B                           pop bx
24824 6452           58                           pop ax
24825 6453           C3                           ret
24826                                           ! 3334 endasm
24827                                           !BCC_ENDASM
24828                                           ! 3335 #asm
24829                                           !BCC_ASM
24830                       00000008            _biosfn_write_teletype.flag	set	8
24831                       00000006            _biosfn_write_teletype.attr	set	6
24832                       00000004            _biosfn_write_teletype.page	set	4
24833                       00000002            _biosfn_write_teletype.car	set	2
24834                       00006454            biosfn_set_pel_mask:
24835 6454           50                           push ax
24836 6455           52                           push dx
24837 6456           BA                   03C6    mov dx, # 0x3c6
24838 6459           88D8                         mov al, bl
24839 645B           EE                           out dx, al
24840 645C           5A                           pop dx
24841 645D           58                           pop ax
24842 645E           C3                           ret
24843                                           ! 3345 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3346 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       0000645F            biosfn_read_pel_mask:
24852 645F           50                           push ax
24853 6460           52                           push dx
24854 6461           BA                   03C6    mov dx, # 0x3c6
24855 6464           EC                           in al, dx
24856 6465           88C3                         mov bl, al
24857 6467           5A                           pop dx
24858 6468           58                           pop ax
24859 6469           C3                           ret
24860                                           ! 3356 endasm
24861                                           !BCC_ENDASM
24862                                           ! 3357 #asm
24863                                           !BCC_ASM
24864                       00000008            _biosfn_write_teletype.flag	set	8
24865                       00000006            _biosfn_write_teletype.attr	set	6
24866                       00000004            _biosfn_write_teletype.page	set	4
24867                       00000002            _biosfn_write_teletype.car	set	2
24868                       0000646A            biosfn_read_video_dac_state:
24869 646A           50                           push ax
24870 646B           52                           push dx
24871 646C           BA                   03DA    mov dx, # 0x3da
24872 646F           EC                           in al, dx
24873 6470           BA                   03C0    mov dx, # 0x3c0
24874 6473           B0                     10    mov al, #0x10
24875 6475           EE                           out dx, al
24876 6476           BA                   03C1    mov dx, # 0x3c1
24877 6479           EC                           in al, dx
24878 647A           88C3                         mov bl, al
24879 647C           C0EB                   07    shr bl, 7
24880 647F           BA                   03DA    mov dx, # 0x3da
24881 6482           EC                           in al, dx
24882 6483           BA                   03C0    mov dx, # 0x3c0
24883 6486           B0                     14    mov al, #0x14
24884 6488           EE                           out dx, al
24885 6489           BA                   03C1    mov dx, # 0x3c1
24886 648C           EC                           in al, dx
24887 648D           88C7                         mov bh, al
24888 648F           80E7                   0F    and bh, #0x0f
24889 6492           F6C3                   01    test bl, #0x01
24890 6495           75           03              jnz get_dac_16_page
24891 6497           C0EF                   02    shr bh, 2
24892                       0000649A            get_dac_16_page:
24893 649A           BA                   03DA    mov dx, # 0x3da
24894 649D           EC                           in al, dx
24895 649E           BA                   03C0    mov dx, # 0x3c0
24896 64A1           B0                     20    mov al, #0x20
24897 64A3           EE                           out dx, al
24898 64A4           5A                           pop dx
24899 64A5           58                           pop ax
24900 64A6           C3                           ret
24901                                           ! 3391 endasm
24902                                           !BCC_ENDASM
24903                                           ! 3392 static void biosfn
24904                                           ! Register BX used in function biosfn_write_teletype
24905                                           ! 3392 _perform_gray_scale_summing (start,count)
24906                                           ! 3393 Bit16u start;Bit16u count;
24907                       000064A7            _biosfn_perform_gray_scale_summing:
24908                                           !BCC_EOS
24909                                           !BCC_EOS
24910                                           ! 3394 {Bit8u r,g,b;
24911                                           !BCC_EOS
24912                                           ! 3395  Bit16u i;
24913                                           !BCC_EOS
24914                                           ! 3396  Bit16u index;
24915                                           !BCC_EOS
24916                                           ! 3397  inb(0x3da);
24917 64A7           55                         push	bp
24918 64A8           89E5                       mov	bp,sp
24919 64AA           83C4                   F8  add	sp,*-8
24920                                           ! Debug: list int = const $3DA (used reg = )
24921 64AD           B8                   03DA  mov	ax,#$3DA
24922 64B0           50                         push	ax
24923                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24924 64B1           E8         1750            call	_inb
24925 64B4           44                         inc	sp
24926 64B5           44                         inc	sp
24927                                           !BCC_EOS
24928                                           ! 3398  outb(0x3c0,0x00);
24929                                           ! Debug: list int = const 0 (used reg = )
24930 64B6           31C0                       xor	ax,ax
24931 64B8           50                         push	ax
24932                                           ! Debug: list int = const $3C0 (used reg = )
24933 64B9           B8                   03C0  mov	ax,#$3C0
24934 64BC           50                         push	ax
24935                                           ! Debug: func () void = outb+0 (used reg = )
24936 64BD           E8         175A            call	_outb
24937 64C0           83C4                   04  add	sp,*4
24938                                           !BCC_EOS
24939                                           ! 3399  for( index = 0; index < count; index++ )
24940                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24941 64C3           31C0                       xor	ax,ax
24942 64C5           8946         F8            mov	-8[bp],ax
24943                                           !BCC_EOS
24944                                           !BCC_EOS
24945                                           ! 3400   {
24946 64C8           E9         00BE            br 	.209
24947                       000064CB            .20A:
24948                                           ! 3401    outb(0x3c7,start);
24949                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24950 64CB           FF76         04            push	4[bp]
24951                                           ! Debug: list int = const $3C7 (used reg = )
24952 64CE           B8                   03C7  mov	ax,#$3C7
24953 64D1           50                         push	ax
24954                                           ! Debug: func () void = outb+0 (used reg = )
24955 64D2           E8         1745            call	_outb
24956 64D5           83C4                   04  add	sp,*4
24957                                           !BCC_EOS
24958                                           ! 3402    r=inb( 0x3c9 );
24959                                           ! Debug: list int = const $3C9 (used reg = )
24960 64D8           B8                   03C9  mov	ax,#$3C9
24961 64DB           50                         push	ax
24962                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24963 64DC           E8         1725            call	_inb
24964 64DF           44                         inc	sp
24965 64E0           44                         inc	sp
24966                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24967 64E1           8846         FF            mov	-1[bp],al
24968                                           !BCC_EOS
24969                                           ! 3403    g=inb( 0x3c9 );
24970                                           ! Debug: list int = const $3C9 (used reg = )
24971 64E4           B8                   03C9  mov	ax,#$3C9
24972 64E7           50                         push	ax
24973                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24974 64E8           E8         1719            call	_inb
24975 64EB           44                         inc	sp
24976 64EC           44                         inc	sp
24977                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24978 64ED           8846         FE            mov	-2[bp],al
24979                                           !BCC_EOS
24980                                           ! 3404    b=inb( 0x3c9 );
24981                                           ! Debug: list int = const $3C9 (used reg = )
24982 64F0           B8                   03C9  mov	ax,#$3C9
24983 64F3           50                         push	ax
24984                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24985 64F4           E8         170D            call	_inb
24986 64F7           44                         inc	sp
24987 64F8           44                         inc	sp
24988                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24989 64F9           8846         FD            mov	-3[bp],al
24990                                           !BCC_EOS
24991                                           ! 3405    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24992                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24993                                           ! Debug: expression subtree swapping
24994 64FC           8A46         FD            mov	al,-3[bp]
24995 64FF           30E4                       xor	ah,ah
24996 6501           B9                   001C  mov	cx,*$1C
24997 6504           F7E9                       imul	cx
24998 6506           50                         push	ax
24999                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25000                                           ! Debug: expression subtree swapping
25001 6507           8A46         FE            mov	al,-2[bp]
25002 650A           30E4                       xor	ah,ah
25003 650C           B9                   0097  mov	cx,#$97
25004 650F           F7E9                       imul	cx
25005 6511           50                         push	ax
25006                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25007                                           ! Debug: expression subtree swapping
25008 6512           8A46         FF            mov	al,-1[bp]
25009 6515           30E4                       xor	ah,ah
25010 6517           B9                   004D  mov	cx,*$4D
25011 651A           F7E9                       imul	cx
25012                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25013 651C           0346         F4            add	ax,-$C[bp]
25014 651F           44                         inc	sp
25015 6520           44                         inc	sp
25016                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25017 6521           0346         F6            add	ax,-$A[bp]
25018 6524           44                         inc	sp
25019 6525           44                         inc	sp
25020                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25021                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25022 6526           05                   0080  add	ax,#$80
25023 6529           88E0                       mov	al,ah
25024 652B           30E4                       xor	ah,ah
25025                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25026 652D           8946         FA            mov	-6[bp],ax
25027                                           !BCC_EOS
25028                                           ! 3406    if(i>0x3f)i=0x3f;
25029                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25030 6530           8B46         FA            mov	ax,-6[bp]
25031 6533           3D                   003F  cmp	ax,*$3F
25032 6536           76           06            jbe 	.20B
25033                       00006538            .20C:
25034                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25035 6538           B8                   003F  mov	ax,*$3F
25036 653B           8946         FA            mov	-6[bp],ax
25037                                           !BCC_EOS
25038                                           ! 3407    outb(0x3c8,start);
25039                       0000653E            .20B:
25040                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25041 653E           FF76         04            push	4[bp]
25042                                           ! Debug: list int = const $3C8 (used reg = )
25043 6541           B8                   03C8  mov	ax,#$3C8
25044 6544           50                         push	ax
25045                                           ! Debug: func () void = outb+0 (used reg = )
25046 6545           E8         16D2            call	_outb
25047 6548           83C4                   04  add	sp,*4
25048                                           !BCC_EOS
25049                                           ! 3408    outb( 0x3c9, i&0xff );
25050                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25051 654B           8A46         FA            mov	al,-6[bp]
25052                                           ! Debug: list unsigned char = al+0 (used reg = )
25053 654E           30E4                       xor	ah,ah
25054 6550           50                         push	ax
25055                                           ! Debug: list int = const $3C9 (used reg = )
25056 6551           B8                   03C9  mov	ax,#$3C9
25057 6554           50                         push	ax
25058                                           ! Debug: func () void = outb+0 (used reg = )
25059 6555           E8         16C2            call	_outb
25060 6558           83C4                   04  add	sp,*4
25061                                           !BCC_EOS
25062                                           ! 3409    outb( 0x3c9, i&0xff );
25063                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25064 655B           8A46         FA            mov	al,-6[bp]
25065                                           ! Debug: list unsigned char = al+0 (used reg = )
25066 655E           30E4                       xor	ah,ah
25067 6560           50                         push	ax
25068                                           ! Debug: list int = const $3C9 (used reg = )
25069 6561           B8                   03C9  mov	ax,#$3C9
25070 6564           50                         push	ax
25071                                           ! Debug: func () void = outb+0 (used reg = )
25072 6565           E8         16B2            call	_outb
25073 6568           83C4                   04  add	sp,*4
25074                                           !BCC_EOS
25075                                           ! 3410    outb( 0x3c9, i&0xff );
25076                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25077 656B           8A46         FA            mov	al,-6[bp]
25078                                           ! Debug: list unsigned char = al+0 (used reg = )
25079 656E           30E4                       xor	ah,ah
25080 6570           50                         push	ax
25081                                           ! Debug: list int = const $3C9 (used reg = )
25082 6571           B8                   03C9  mov	ax,#$3C9
25083 6574           50                         push	ax
25084                                           ! Debug: func () void = outb+0 (used reg = )
25085 6575           E8         16A2            call	_outb
25086 6578           83C4                   04  add	sp,*4
25087                                           !BCC_EOS
25088                                           ! 3411    start++;
25089                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25090 657B           8B46         04            mov	ax,4[bp]
25091 657E           40                         inc	ax
25092 657F           8946         04            mov	4[bp],ax
25093                                           !BCC_EOS
25094                                           ! 3412   }
25095                                           ! 3413  inb(0x3da);
25096                       00006582            .208:
25097                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25098 6582           8B46         F8            mov	ax,-8[bp]
25099 6585           40                         inc	ax
25100 6586           8946         F8            mov	-8[bp],ax
25101                       00006589            .209:
25102                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25103 6589           8B46         F8            mov	ax,-8[bp]
25104 658C           3B46         06            cmp	ax,6[bp]
25105 658F         0F82         FF38            blo 	.20A
25106                       00006593            .20D:
25107                       00006593            .207:
25108                                           ! Debug: list int = const $3DA (used reg = )
25109 6593           B8                   03DA  mov	ax,#$3DA
25110 6596           50                         push	ax
25111                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25112 6597           E8         166A            call	_inb
25113 659A           44                         inc	sp
25114 659B           44                         inc	sp
25115                                           !BCC_EOS
25116                                           ! 3414  outb(0x3c0,0x20);
25117                                           ! Debug: list int = const $20 (used reg = )
25118 659C           B8                   0020  mov	ax,*$20
25119 659F           50                         push	ax
25120                                           ! Debug: list int = const $3C0 (used reg = )
25121 65A0           B8                   03C0  mov	ax,#$3C0
25122 65A3           50                         push	ax
25123                                           ! Debug: func () void = outb+0 (used reg = )
25124 65A4           E8         1673            call	_outb
25125 65A7           83C4                   04  add	sp,*4
25126                                           !BCC_EOS
25127                                           ! 3415 }
25128 65AA           89EC                       mov	sp,bp
25129 65AC           5D                         pop	bp
25130 65AD           C3                         ret
25131                                           ! 3416 static void get_font_access()
25132                                           ! 3417 {
25133                       000065AE            _get_font_access:
25134                                           ! 3418 #asm
25135                                           !BCC_ASM
25136 65AE           BA                   03C4   mov dx, # 0x3c4
25137 65B1           B8                   0100   mov ax, #0x0100
25138 65B4           EF                          out dx, ax
25139 65B5           B8                   0402   mov ax, #0x0402
25140 65B8           EF                          out dx, ax
25141 65B9           B8                   0704   mov ax, #0x0704
25142 65BC           EF                          out dx, ax
25143 65BD           B8                   0300   mov ax, #0x0300
25144 65C0           EF                          out dx, ax
25145 65C1           BA                   03CE   mov dx, # 0x3ce
25146 65C4           B8                   0204   mov ax, #0x0204
25147 65C7           EF                          out dx, ax
25148 65C8           B8                   0005   mov ax, #0x0005
25149 65CB           EF                          out dx, ax
25150 65CC           B8                   0406   mov ax, #0x0406
25151 65CF           EF                          out dx, ax
25152                                           ! 3435 endasm
25153                                           !BCC_ENDASM
25154                                           ! 3436 }
25155 65D0           C3                         ret
25156                                           ! 3437 static void release_font_access()
25157                                           ! 3438 {
25158                       000065D1            _release_font_access:
25159                                           ! 3439 #asm
25160                                           !BCC_ASM
25161 65D1           BA                   03C4   mov dx, # 0x3c4
25162 65D4           B8                   0100   mov ax, #0x0100
25163 65D7           EF                          out dx, ax
25164 65D8           B8                   0302   mov ax, #0x0302
25165 65DB           EF                          out dx, ax
25166 65DC           B8                   0304   mov ax, #0x0304
25167 65DF           EF                          out dx, ax
25168 65E0           B8                   0300   mov ax, #0x0300
25169 65E3           EF                          out dx, ax
25170 65E4           BA                   03CC   mov dx, # 0x3cc
25171 65E7           EC                          in al, dx
25172 65E8           24                     01   and al, #0x01
25173 65EA           C0E0                   02   shl al, 2
25174 65ED           0C                     0A   or al, #0x0a
25175 65EF           88C4                        mov ah, al
25176 65F1           B0                     06   mov al, #0x06
25177 65F3           BA                   03CE   mov dx, # 0x3ce
25178 65F6           EF                          out dx, ax
25179 65F7           B8                   0004   mov ax, #0x0004
25180 65FA           EF                          out dx, ax
25181 65FB           B8                   1005   mov ax, #0x1005
25182 65FE           EF                          out dx, ax
25183                                           ! 3462 endasm
25184                                           !BCC_ENDASM
25185                                           ! 3463 }
25186 65FF           C3                         ret
25187                                           ! 3464 #asm
25188                                           !BCC_ASM
25189                       00006600            idiv_u:
25190 6600           31D2                         xor dx,dx
25191 6602           F7F3                         div bx
25192 6604           C3                           ret
25193                                           ! 3469 endasm
25194                                           !BCC_ENDASM
25195                                           ! 3470 static void set_scan_lines(lines) Bit8u lines;
25196                       00006605            _set_scan_lines:
25197                                           !BCC_EOS
25198                                           ! 3471 {
25199                                           ! 3472  Bit16u crtc_addr,cols,page,vde;
25200                                           !BCC_EOS
25201                                           ! 3473  Bit8u crtc_r9,ovl,rows;
25202                                           !BCC_EOS
25203                                           ! 3474  crtc_addr = read_word(0x40,0x63);
25204 6605           55                         push	bp
25205 6606           89E5                       mov	bp,sp
25206 6608           83C4                   F4  add	sp,*-$C
25207                                           ! Debug: list int = const $63 (used reg = )
25208 660B           B8                   0063  mov	ax,*$63
25209 660E           50                         push	ax
25210                                           ! Debug: list int = const $40 (used reg = )
25211 660F           B8                   0040  mov	ax,*$40
25212 6612           50                         push	ax
25213                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25214 6613           E8         15AB            call	_read_word
25215 6616           83C4                   04  add	sp,*4
25216                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25217 6619           8946         FE            mov	-2[bp],ax
25218                                           !BCC_EOS
25219                                           ! 3475  outb(crtc_addr, 0x09);
25220                                           ! Debug: list int = const 9 (used reg = )
25221 661C           B8                   0009  mov	ax,*9
25222 661F           50                         push	ax
25223                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25224 6620           FF76         FE            push	-2[bp]
25225                                           ! Debug: func () void = outb+0 (used reg = )
25226 6623           E8         15F4            call	_outb
25227 6626           83C4                   04  add	sp,*4
25228                                           !BCC_EOS
25229                                           ! 3476  crtc_r9 = inb(crtc_addr+1);
25230                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25231 6629           8B46         FE            mov	ax,-2[bp]
25232                                           ! Debug: list unsigned int = ax+1 (used reg = )
25233 662C           40                         inc	ax
25234 662D           50                         push	ax
25235                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25236 662E           E8         15D3            call	_inb
25237 6631           44                         inc	sp
25238 6632           44                         inc	sp
25239                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25240 6633           8846         F7            mov	-9[bp],al
25241                                           !BCC_EOS
25242                                           ! 3477  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25243                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25244 6636           8A46         04            mov	al,4[bp]
25245 6639           30E4                       xor	ah,ah
25246 663B           48                         dec	ax
25247 663C           50                         push	ax
25248                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25249 663D           8A46         F7            mov	al,-9[bp]
25250 6640           24                     E0  and	al,#$E0
25251                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25252 6642           30E4                       xor	ah,ah
25253 6644           0B46         F2            or	ax,-$E[bp]
25254 6647           44                         inc	sp
25255 6648           44                         inc	sp
25256                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25257 6649           8846         F7            mov	-9[bp],al
25258                                           !BCC_EOS
25259                                           ! 3478  outb(crtc_addr+1, crtc_r9);
25260                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25261 664C           8A46         F7            mov	al,-9[bp]
25262 664F           30E4                       xor	ah,ah
25263 6651           50                         push	ax
25264                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25265 6652           8B46         FE            mov	ax,-2[bp]
25266                                           ! Debug: list unsigned int = ax+1 (used reg = )
25267 6655           40                         inc	ax
25268 6656           50                         push	ax
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 6657           E8         15C0            call	_outb
25271 665A           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3479  if(lines==8)
25274                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25275 665D           8A46         04            mov	al,4[bp]
25276 6660           3C                     08  cmp	al,*8
25277 6662           75           10            jne 	.20E
25278                       00006664            .20F:
25279                                           ! 3480   {
25280                                           ! 3481    biosfn_set_cursor_shape(0x06,0x07);
25281                                           ! Debug: list int = const 7 (used reg = )
25282 6664           B8                   0007  mov	ax,*7
25283 6667           50                         push	ax
25284                                           ! Debug: list int = const 6 (used reg = )
25285 6668           B8                   0006  mov	ax,*6
25286 666B           50                         push	ax
25287                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25288 666C           E8         DB86            call	_biosfn_set_cursor_shape
25289 666F           83C4                   04  add	sp,*4
25290                                           !BCC_EOS
25291                                           ! 3482   }
25292                                           ! 3483  else
25293                                           ! 3484   {
25294 6672           EB           18            jmp .210
25295                       00006674            .20E:
25296                                           ! 3485    biosfn_set_cursor_shape(lines-4,lines-3);
25297                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25298 6674           8A46         04            mov	al,4[bp]
25299 6677           30E4                       xor	ah,ah
25300                                           ! Debug: list unsigned int = ax-3 (used reg = )
25301 6679           05                   FFFD  add	ax,*-3
25302 667C           50                         push	ax
25303                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25304 667D           8A46         04            mov	al,4[bp]
25305 6680           30E4                       xor	ah,ah
25306                                           ! Debug: list unsigned int = ax-4 (used reg = )
25307 6682           05                   FFFC  add	ax,*-4
25308 6685           50                         push	ax
25309                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25310 6686           E8         DB6C            call	_biosfn_set_cursor_shape
25311 6689           83C4                   04  add	sp,*4
25312                                           !BCC_EOS
25313                                           ! 3486   }
25314                                           ! 3487  write_word(0x40,0x85, lines);
25315                       0000668C            .210:
25316                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25317 668C           8A46         04            mov	al,4[bp]
25318 668F           30E4                       xor	ah,ah
25319 6691           50                         push	ax
25320                                           ! Debug: list int = const $85 (used reg = )
25321 6692           B8                   0085  mov	ax,#$85
25322 6695           50                         push	ax
25323                                           ! Debug: list int = const $40 (used reg = )
25324 6696           B8                   0040  mov	ax,*$40
25325 6699           50                         push	ax
25326                                           ! Debug: func () void = write_word+0 (used reg = )
25327 669A           E8         154F            call	_write_word
25328 669D           83C4                   06  add	sp,*6
25329                                           !BCC_EOS
25330                                           ! 3488  outb(crtc_addr, 0x12);
25331                                           ! Debug: list int = const $12 (used reg = )
25332 66A0           B8                   0012  mov	ax,*$12
25333 66A3           50                         push	ax
25334                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25335 66A4           FF76         FE            push	-2[bp]
25336                                           ! Debug: func () void = outb+0 (used reg = )
25337 66A7           E8         1570            call	_outb
25338 66AA           83C4                   04  add	sp,*4
25339                                           !BCC_EOS
25340                                           ! 3489  vde = inb(crtc_addr+1);
25341                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25342 66AD           8B46         FE            mov	ax,-2[bp]
25343                                           ! Debug: list unsigned int = ax+1 (used reg = )
25344 66B0           40                         inc	ax
25345 66B1           50                         push	ax
25346                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25347 66B2           E8         154F            call	_inb
25348 66B5           44                         inc	sp
25349 66B6           44                         inc	sp
25350                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25351 66B7           30E4                       xor	ah,ah
25352 66B9           8946         F8            mov	-8[bp],ax
25353                                           !BCC_EOS
25354                                           ! 3490  outb(crtc_addr, 0x07);
25355                                           ! Debug: list int = const 7 (used reg = )
25356 66BC           B8                   0007  mov	ax,*7
25357 66BF           50                         push	ax
25358                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25359 66C0           FF76         FE            push	-2[bp]
25360                                           ! Debug: func () void = outb+0 (used reg = )
25361 66C3           E8         1554            call	_outb
25362 66C6           83C4                   04  add	sp,*4
25363                                           !BCC_EOS
25364                                           ! 3491  ovl = inb(crtc_addr+1);
25365                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25366 66C9           8B46         FE            mov	ax,-2[bp]
25367                                           ! Debug: list unsigned int = ax+1 (used reg = )
25368 66CC           40                         inc	ax
25369 66CD           50                         push	ax
25370                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25371 66CE           E8         1533            call	_inb
25372 66D1           44                         inc	sp
25373 66D2           44                         inc	sp
25374                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25375 66D3           8846         F6            mov	-$A[bp],al
25376                                           !BCC_EOS
25377                                           ! 3492  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25378                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25379 66D6           8A46         F6            mov	al,-$A[bp]
25380 66D9           24                     40  and	al,*$40
25381                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25382 66DB           30E4                       xor	ah,ah
25383 66DD           B1                     03  mov	cl,*3
25384 66DF           D3E0                       shl	ax,cl
25385 66E1           50                         push	ax
25386                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25387 66E2           8A46         F6            mov	al,-$A[bp]
25388 66E5           24                     02  and	al,*2
25389                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25390 66E7           30E4                       xor	ah,ah
25391 66E9           B1                     07  mov	cl,*7
25392 66EB           D3E0                       shl	ax,cl
25393                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25394 66ED           0346         F2            add	ax,-$E[bp]
25395 66F0           44                         inc	sp
25396 66F1           44                         inc	sp
25397                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25398                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25399 66F2           40                         inc	ax
25400 66F3           0346         F8            add	ax,-8[bp]
25401 66F6           8946         F8            mov	-8[bp],ax
25402                                           !BCC_EOS
25403                                           ! 3493  rows = vde / lines;
25404                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25405 66F9           8A46         04            mov	al,4[bp]
25406 66FC           30E4                       xor	ah,ah
25407 66FE           89C3                       mov	bx,ax
25408 6700           8B46         F8            mov	ax,-8[bp]
25409 6703           E8         FEFA            call	idiv_u
25410                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25411 6706           8846         F5            mov	-$B[bp],al
25412                                           !BCC_EOS
25413                                           ! 3494  write_byte(0x40,0x84, rows-1);
25414                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25415 6709           8A46         F5            mov	al,-$B[bp]
25416 670C           30E4                       xor	ah,ah
25417                                           ! Debug: list unsigned int = ax-1 (used reg = )
25418 670E           48                         dec	ax
25419 670F           50                         push	ax
25420                                           ! Debug: list int = const $84 (used reg = )
25421 6710           B8                   0084  mov	ax,#$84
25422 6713           50                         push	ax
25423                                           ! Debug: list int = const $40 (used reg = )
25424 6714           B8                   0040  mov	ax,*$40
25425 6717           50                         push	ax
25426                                           ! Debug: func () void = write_byte+0 (used reg = )
25427 6718           E8         14B9            call	_write_byte
25428 671B           83C4                   06  add	sp,*6
25429                                           !BCC_EOS
25430                                           ! 3495  cols = read_word(0x40,0x4A);
25431                                           ! Debug: list int = const $4A (used reg = )
25432 671E           B8                   004A  mov	ax,*$4A
25433 6721           50                         push	ax
25434                                           ! Debug: list int = const $40 (used reg = )
25435 6722           B8                   0040  mov	ax,*$40
25436 6725           50                         push	ax
25437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25438 6726           E8         1498            call	_read_word
25439 6729           83C4                   04  add	sp,*4
25440                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25441 672C           8946         FC            mov	-4[bp],ax
25442                                           !BCC_EOS
25443                                           ! 3496  write_word(0x40,0x4C, rows * cols * 2);
25444                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25445 672F           8A46         F5            mov	al,-$B[bp]
25446 6732           30E4                       xor	ah,ah
25447 6734           8B4E         FC            mov	cx,-4[bp]
25448 6737           F7E9                       imul	cx
25449                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25450 6739           D1E0                       shl	ax,*1
25451                                           ! Debug: list unsigned int = ax+0 (used reg = )
25452 673B           50                         push	ax
25453                                           ! Debug: list int = const $4C (used reg = )
25454 673C           B8                   004C  mov	ax,*$4C
25455 673F           50                         push	ax
25456                                           ! Debug: list int = const $40 (used reg = )
25457 6740           B8                   0040  mov	ax,*$40
25458 6743           50                         push	ax
25459                                           ! Debug: func () void = write_word+0 (used reg = )
25460 6744           E8         14A5            call	_write_word
25461 6747           83C4                   06  add	sp,*6
25462                                           !BCC_EOS
25463                                           ! 3497 }
25464 674A           89EC                       mov	sp,bp
25465 674C           5D                         pop	bp
25466 674D           C3                         ret
25467                                           ! 3498 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25468                                           ! Register BX used in function set_scan_lines
25469                       0000674E            _biosfn_load_text_user_pat:
25470                                           !BCC_EOS
25471                                           !BCC_EOS
25472                                           !BCC_EOS
25473                                           !BCC_EOS
25474                                           !BCC_EOS
25475                                           !BCC_EOS
25476                                           !BCC_EOS
25477                                           ! 3499 {
25478                                           ! 3500  Bit16u blockaddr,dest,i,src;
25479                                           !BCC_EOS
25480                                           ! 3501  get_
25481                                           ! 3501 font_access();
25482 674E           55                         push	bp
25483 674F           89E5                       mov	bp,sp
25484 6751           83C4                   F8  add	sp,*-8
25485                                           ! Debug: func () void = get_font_access+0 (used reg = )
25486 6754           E8         FE57            call	_get_font_access
25487                                           !BCC_EOS
25488                                           ! 3502  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25489                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25490 6757           8A46         0E            mov	al,$E[bp]
25491 675A           24                     04  and	al,*4
25492                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25493 675C           30E4                       xor	ah,ah
25494 675E           88C4                       mov	ah,al
25495 6760           30C0                       xor	al,al
25496 6762           B1                     03  mov	cl,*3
25497 6764           D3E0                       shl	ax,cl
25498 6766           50                         push	ax
25499                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25500 6767           8A46         0E            mov	al,$E[bp]
25501 676A           24                     03  and	al,*3
25502                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25503 676C           30E4                       xor	ah,ah
25504 676E           88C4                       mov	ah,al
25505 6770           30C0                       xor	al,al
25506 6772           B1                     06  mov	cl,*6
25507 6774           D3E0                       shl	ax,cl
25508                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25509 6776           0346         F6            add	ax,-$A[bp]
25510 6779           44                         inc	sp
25511 677A           44                         inc	sp
25512                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25513 677B           8946         FE            mov	-2[bp],ax
25514                                           !BCC_EOS
25515                                           ! 3503  for(i=0;i<CX;i++)
25516                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25517 677E           31C0                       xor	ax,ax
25518 6780           8946         FA            mov	-6[bp],ax
25519                                           !BCC_EOS
25520                                           !BCC_EOS
25521                                           ! 3504   {
25522 6783           EB           44            jmp .213
25523                       00006785            .214:
25524                                           ! 3505    src = BP + i * BH;
25525                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25526 6785           8A46         10            mov	al,$10[bp]
25527 6788           30E4                       xor	ah,ah
25528 678A           89C3                       mov	bx,ax
25529 678C           8B46         FA            mov	ax,-6[bp]
25530 678F           89D9                       mov	cx,bx
25531 6791           F7E9                       imul	cx
25532                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25533                                           ! Debug: expression subtree swapping
25534 6793           0346         08            add	ax,8[bp]
25535                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25536 6796           8946         F8            mov	-8[bp],ax
25537                                           !BCC_EOS
25538                                           ! 3506    dest = blockaddr + (DX + i) * 32;
25539                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25540 6799           8B46         0C            mov	ax,$C[bp]
25541 679C           0346         FA            add	ax,-6[bp]
25542                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25543 679F           B1                     05  mov	cl,*5
25544 67A1           D3E0                       shl	ax,cl
25545                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25546                                           ! Debug: expression subtree swapping
25547 67A3           0346         FE            add	ax,-2[bp]
25548                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25549 67A6           8946         FC            mov	-4[bp],ax
25550                                           !BCC_EOS
25551                                           ! 3507    memcpyb(0xA000, dest, ES, src, BH);
25552                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25553 67A9           8A46         10            mov	al,$10[bp]
25554 67AC           30E4                       xor	ah,ah
25555 67AE           50                         push	ax
25556                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25557 67AF           FF76         F8            push	-8[bp]
25558                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25559 67B2           FF76         06            push	6[bp]
25560                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25561 67B5           FF76         FC            push	-4[bp]
25562                                           ! Debug: list unsigned int = const $A000 (used reg = )
25563 67B8           B8                   A000  mov	ax,#$A000
25564 67BB           50                         push	ax
25565                                           ! Debug: func () void = memcpyb+0 (used reg = )
25566 67BC           E8         138F            call	_memcpyb
25567 67BF           83C4                   0A  add	sp,*$A
25568                                           !BCC_EOS
25569                                           ! 3508   }
25570                                           ! 3509  release_font_access();
25571                       000067C2            .212:
25572                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25573 67C2           8B46         FA            mov	ax,-6[bp]
25574 67C5           40                         inc	ax
25575 67C6           8946         FA            mov	-6[bp],ax
25576                       000067C9            .213:
25577                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25578 67C9           8B46         FA            mov	ax,-6[bp]
25579 67CC           3B46         0A            cmp	ax,$A[bp]
25580 67CF           72           B4            jb 	.214
25581                       000067D1            .215:
25582                       000067D1            .211:
25583                                           ! Debug: func () void = release_font_access+0 (used reg = )
25584 67D1           E8         FDFD            call	_release_font_access
25585                                           !BCC_EOS
25586                                           ! 3510  if(AL>=0x10)
25587                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25588 67D4           8A46         04            mov	al,4[bp]
25589 67D7           3C                     10  cmp	al,*$10
25590 67D9           72           0B            jb  	.216
25591                       000067DB            .217:
25592                                           ! 3511   {
25593                                           ! 3512    set_scan_lines(BH);
25594                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25595 67DB           8A46         10            mov	al,$10[bp]
25596 67DE           30E4                       xor	ah,ah
25597 67E0           50                         push	ax
25598                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25599 67E1           E8         FE21            call	_set_scan_lines
25600 67E4           44                         inc	sp
25601 67E5           44                         inc	sp
25602                                           !BCC_EOS
25603                                           ! 3513   }
25604                                           ! 3514 }
25605                       000067E6            .216:
25606 67E6           89EC                       mov	sp,bp
25607 67E8           5D                         pop	bp
25608 67E9           C3                         ret
25609                                           ! 3515 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25610                                           ! Register BX used in function biosfn_load_text_user_pat
25611                       000067EA            _biosfn_load_text_8_14_pat:
25612                                           !BCC_EOS
25613                                           !BCC_EOS
25614                                           ! 3516 {
25615                                           ! 3517  Bit16u blockaddr,dest,i,src;
25616                                           !BCC_EOS
25617                                           ! 3518  get_font_access();
25618 67EA           55                         push	bp
25619 67EB           89E5                       mov	bp,sp
25620 67ED           83C4                   F8  add	sp,*-8
25621                                           ! Debug: func () void = get_font_access+0 (used reg = )
25622 67F0           E8         FDBB            call	_get_font_access
25623                                           !BCC_EOS
25624                                           ! 3519  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25625                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25626 67F3           8A46         06            mov	al,6[bp]
25627 67F6           24                     04  and	al,*4
25628                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25629 67F8           30E4                       xor	ah,ah
25630 67FA           88C4                       mov	ah,al
25631 67FC           30C0                       xor	al,al
25632 67FE           B1                     03  mov	cl,*3
25633 6800           D3E0                       shl	ax,cl
25634 6802           50                         push	ax
25635                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25636 6803           8A46         06            mov	al,6[bp]
25637 6806           24                     03  and	al,*3
25638                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25639 6808           30E4                       xor	ah,ah
25640 680A           88C4                       mov	ah,al
25641 680C           30C0                       xor	al,al
25642 680E           B1                     06  mov	cl,*6
25643 6810           D3E0                       shl	ax,cl
25644                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25645 6812           0346         F6            add	ax,-$A[bp]
25646 6815           44                         inc	sp
25647 6816           44                         inc	sp
25648                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25649 6817           8946         FE            mov	-2[bp],ax
25650                                           !BCC_EOS
25651                                           ! 3520  for(i=0;i<0x100;i++)
25652                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25653 681A           31C0                       xor	ax,ax
25654 681C           8946         FA            mov	-6[bp],ax
25655                                           !BCC_EOS
25656                                           !BCC_EOS
25657                                           ! 3521   {
25658 681F           EB           41            jmp .21A
25659                       00006821            .21B:
25660                                           ! 3522    src = i * 14;
25661                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25662 6821           8B46         FA            mov	ax,-6[bp]
25663 6824           89C2                       mov	dx,ax
25664 6826           B1                     03  mov	cl,*3
25665 6828           D3E0                       shl	ax,cl
25666 682A           29D0                       sub	ax,dx
25667 682C           D1E0                       shl	ax,*1
25668                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25669 682E           8946         F8            mov	-8[bp],ax
25670                                           !BCC_EOS
25671                                           ! 3523    dest = blockaddr + i * 32;
25672                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25673 6831           8B46         FA            mov	ax,-6[bp]
25674 6834           B1                     05  mov	cl,*5
25675 6836           D3E0                       shl	ax,cl
25676                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25677                                           ! Debug: expression subtree swapping
25678 6838           0346         FE            add	ax,-2[bp]
25679                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25680 683B           8946         FC            mov	-4[bp],ax
25681                                           !BCC_EOS
25682                                           ! 3524    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25683                                           ! Debug: list int = const $E (used reg = )
25684 683E           B8                   000E  mov	ax,*$E
25685 6841           50                         push	ax
25686                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25687 6842           8B5E         F8            mov	bx,-8[bp]
25688                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25689                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25690 6845           81C3                 175C  add	bx,#_vgafont14
25691 6849           53                         push	bx
25692                                           ! Debug: list unsigned int = const $C000 (used reg = )
25693 684A           B8                   C000  mov	ax,#$C000
25694 684D           50                         push	ax
25695                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25696 684E           FF76         FC            push	-4[bp]
25697                                           ! Debug: list unsigned int = const $A000 (used reg = )
25698 6851           B8                   A000  mov	ax,#$A000
25699 6854           50                         push	ax
25700                                           ! Debug: func () void = memcpyb+0 (used reg = )
25701 6855           E8         12F6            call	_memcpyb
25702 6858           83C4                   0A  add	sp,*$A
25703                                           !BCC_EOS
25704                                           ! 3525   }
25705                                           ! 3526  release_font_access();
25706                       0000685B            .219:
25707                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25708 685B           8B46         FA            mov	ax,-6[bp]
25709 685E           40                         inc	ax
25710 685F           8946         FA            mov	-6[bp],ax
25711                       00006862            .21A:
25712                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25713 6862           8B46         FA            mov	ax,-6[bp]
25714 6865           3D                   0100  cmp	ax,#$100
25715 6868           72           B7            jb 	.21B
25716                       0000686A            .21C:
25717                       0000686A            .218:
25718                                           ! Debug: func () void = release_font_access+0 (used reg = )
25719 686A           E8         FD64            call	_release_font_access
25720                                           !BCC_EOS
25721                                           ! 3527  if(AL>=0x10)
25722                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25723 686D           8A46         04            mov	al,4[bp]
25724 6870           3C                     10  cmp	al,*$10
25725 6872           72           09            jb  	.21D
25726                       00006874            .21E:
25727                                           ! 3528   {
25728                                           ! 3529    set_scan_lines(14);
25729                                           ! Debug: list int = const $E (used reg = )
25730 6874           B8                   000E  mov	ax,*$E
25731 6877           50                         push	ax
25732                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25733 6878           E8         FD8A            call	_set_scan_lines
25734 687B           44                         inc	sp
25735 687C           44                         inc	sp
25736                                           !BCC_EOS
25737                                           ! 3530   }
25738                                           ! 3531 }
25739                       0000687D            .21D:
25740 687D           89EC                       mov	sp,bp
25741 687F           5D                         pop	bp
25742 6880           C3                         ret
25743                                           ! 3532 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25744                                           ! Register BX used in function biosfn_load_text_8_14_pat
25745                       00006881            _biosfn_load_text_8_8_pat:
25746                                           !BCC_EOS
25747                                           !BCC_EOS
25748                                           ! 3533 {
25749                                           ! 3534  Bit16u blockaddr,dest,i,src;
25750                                           !BCC_EOS
25751                                           ! 3535  get_font_access();
25752 6881           55                         push	bp
25753 6882           89E5                       mov	bp,sp
25754 6884           83C4                   F8  add	sp,*-8
25755                                           ! Debug: func () void = get_font_access+0 (used reg = )
25756 6887           E8         FD24            call	_get_font_access
25757                                           !BCC_EOS
25758                                           ! 3536  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25759                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25760 688A           8A46         06            mov	al,6[bp]
25761 688D           24                     04  and	al,*4
25762                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25763 688F           30E4                       xor	ah,ah
25764 6891           88C4                       mov	ah,al
25765 6893           30C0                       xor	al,al
25766 6895           B1                     03  mov	cl,*3
25767 6897           D3E0                       shl	ax,cl
25768 6899           50                         push	ax
25769                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25770 689A           8A46         06            mov	al,6[bp]
25771 689D           24                     03  and	al,*3
25772                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25773 689F           30E4                       xor	ah,ah
25774 68A1           88C4                       mov	ah,al
25775 68A3           30C0                       xor	al,al
25776 68A5           B1                     06  mov	cl,*6
25777 68A7           D3E0                       shl	ax,cl
25778                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25779 68A9           0346         F6            add	ax,-$A[bp]
25780 68AC           44                         inc	sp
25781 68AD           44                         inc	sp
25782                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25783 68AE           8946         FE            mov	-2[bp],ax
25784                                           !BCC_EOS
25785                                           ! 3537  for(i=0;i<0x100;i++)
25786                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25787 68B1           31C0                       xor	ax,ax
25788 68B3           8946         FA            mov	-6[bp],ax
25789                                           !BCC_EOS
25790                                           !BCC_EOS
25791                                           ! 3538   {
25792 68B6           EB           3B            jmp .221
25793                       000068B8            .222:
25794                                           ! 3539    src = i * 8;
25795                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25796 68B8           8B46         FA            mov	ax,-6[bp]
25797 68BB           B1                     03  mov	cl,*3
25798 68BD           D3E0                       shl	ax,cl
25799                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25800 68BF           8946         F8            mov	-8[bp],ax
25801                                           !BCC_EOS
25802                                           ! 3540    dest = blockaddr + i * 32;
25803                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25804 68C2           8B46         FA            mov	ax,-6[bp]
25805 68C5           B1                     05  mov	cl,*5
25806 68C7           D3E0                       shl	ax,cl
25807                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25808                                           ! Debug: expression subtree swapping
25809 68C9           0346         FE            add	ax,-2[bp]
25810                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25811 68CC           8946         FC            mov	-4[bp],ax
25812                                           !BCC_EOS
25813                                           ! 3541    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25814                                           ! Debug: list int = const 8 (used reg = )
25815 68CF           B8                   0008  mov	ax,*8
25816 68D2           50                         push	ax
25817                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25818 68D3           8B5E         F8            mov	bx,-8[bp]
25819                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25820                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25821 68D6           81C3                 0F5C  add	bx,#_vgafont8
25822 68DA           53                         push	bx
25823                                           ! Debug: list unsigned int = const $C000 (used reg = )
25824 68DB           B8                   C000  mov	ax,#$C000
25825 68DE           50                         push	ax
25826                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25827 68DF           FF76         FC            push	-4[bp]
25828                                           ! Debug: list unsigned int = const $A000 (used reg = )
25829 68E2           B8                   A000  mov	ax,#$A000
25830 68E5           50                         push	ax
25831                                           ! Debug: func () void = memcpyb+0 (used reg = )
25832 68E6           E8         1265            call	_memcpyb
25833 68E9           83C4                   0A  add	sp,*$A
25834                                           !BCC_EOS
25835                                           ! 3542   }
25836                                           ! 3543  release_font_access();
25837                       000068EC            .220:
25838                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25839 68EC           8B46         FA            mov	ax,-6[bp]
25840 68EF           40                         inc	ax
25841 68F0           8946         FA            mov	-6[bp],ax
25842                       000068F3            .221:
25843                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25844 68F3           8B46         FA            mov	ax,-6[bp]
25845 68F6           3D                   0100  cmp	ax,#$100
25846 68F9           72           BD            jb 	.222
25847                       000068FB            .223:
25848                       000068FB            .21F:
25849                                           ! Debug: func () void = release_font_access+0 (used reg = )
25850 68FB           E8         FCD3            call	_release_font_access
25851                                           !BCC_EOS
25852                                           ! 3544  if(AL>=0x10)
25853                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25854 68FE           8A46         04            mov	al,4[bp]
25855 6901           3C                     10  cmp	al,*$10
25856 6903           72           09            jb  	.224
25857                       00006905            .225:
25858                                           ! 3545   {
25859                                           ! 3546    set_scan_lines(8);
25860                                           ! Debug: list int = const 8 (used reg = )
25861 6905           B8                   0008  mov	ax,*8
25862 6908           50                         push	ax
25863                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25864 6909           E8         FCF9            call	_set_scan_lines
25865 690C           44                         inc	sp
25866 690D           44                         inc	sp
25867                                           !BCC_EOS
25868                                           ! 3547   }
25869                                           ! 3548 }
25870                       0000690E            .224:
25871 690E           89EC                       mov	sp,bp
25872 6910           5D                         pop	bp
25873 6911           C3                         ret
25874                                           ! 3549 #asm
25875                                           !BCC_ASM
25876                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25877                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25878                       00006912            biosfn_set_text_block_specifier:
25879 6912           50                           push ax
25880 6913           52                           push dx
25881 6914           BA                   03C4    mov dx, # 0x3c4
25882 6917           88DC                         mov ah, bl
25883 6919           B0                     03    mov al, #0x03
25884 691B           EF                           out dx, ax
25885 691C           5A                           pop dx
25886 691D           58                           pop ax
25887 691E           C3                           ret
25888                                           ! 3560 endasm
25889                                           !BCC_ENDASM
25890                                           ! 3561 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25891                                           ! Register BX used in function biosfn_load_text_8_8_pat
25892                       0000691F            _biosfn_load_text_8_16_pat:
25893                                           !BCC_EOS
25894                                           !BCC_EOS
25895                                           ! 3562 {
25896                                           ! 3563  Bit16u blockaddr,dest,i,src;
25897                                           !BCC_EOS
25898                                           ! 3564  get_font_access();
25899 691F           55                         push	bp
25900 6920           89E5                       mov	bp,sp
25901 6922           83C4                   F8  add	sp,*-8
25902                                           ! Debug: func () void = get_font_access+0 (used reg = )
25903 6925           E8         FC86            call	_get_font_access
25904                                           !BCC_EOS
25905                                           ! 3565  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25906                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25907 6928           8A46         06            mov	al,6[bp]
25908 692B           24                     04  and	al,*4
25909                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25910 692D           30E4                       xor	ah,ah
25911 692F           88C4                       mov	ah,al
25912 6931           30C0                       xor	al,al
25913 6933           B1                     03  mov	cl,*3
25914 6935           D3E0                       shl	ax,cl
25915 6937           50                         push	ax
25916                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25917 6938           8A46         06            mov	al,6[bp]
25918 693B           24                     03  and	al,*3
25919                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25920 693D           30E4                       xor	ah,ah
25921 693F           88C4                       mov	ah,al
25922 6941           30C0                       xor	al,al
25923 6943           B1                     06  mov	cl,*6
25924 6945           D3E0                       shl	ax,cl
25925                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25926 6947           0346         F6            add	ax,-$A[bp]
25927 694A           44                         inc	sp
25928 694B           44                         inc	sp
25929                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25930 694C           8946         FE            mov	-2[bp],ax
25931                                           !BCC_EOS
25932                                           ! 3566  for(i=0;i<0x100;i++)
25933                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25934 694F           31C0                       xor	ax,ax
25935 6951           8946         FA            mov	-6[bp],ax
25936                                           !BCC_EOS
25937                                           !BCC_EOS
25938                                           ! 3567   {
25939 6954           EB           3B            jmp .228
25940                       00006956            .229:
25941                                           ! 3568    src = i * 16;
25942                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25943 6956           8B46         FA            mov	ax,-6[bp]
25944 6959           B1                     04  mov	cl,*4
25945 695B           D3E0                       shl	ax,cl
25946                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25947 695D           8946         F8            mov	-8[bp],ax
25948                                           !BCC_EOS
25949                                           ! 3569    dest = blockaddr + i * 32;
25950                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25951 6960           8B46         FA            mov	ax,-6[bp]
25952 6963           B1                     05  mov	cl,*5
25953 6965           D3E0                       shl	ax,cl
25954                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25955                                           ! Debug: expression subtree swapping
25956 6967           0346         FE            add	ax,-2[bp]
25957                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25958 696A           8946         FC            mov	-4[bp],ax
25959                                           !BCC_EOS
25960                                           ! 3570    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25961                                           ! Debug: list int = const $10 (used reg = )
25962 696D           B8                   0010  mov	ax,*$10
25963 6970           50                         push	ax
25964                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25965 6971           8B5E         F8            mov	bx,-8[bp]
25966                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25967                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25968 6974           81C3                 255C  add	bx,#_vgafont16
25969 6978           53                         push	bx
25970                                           ! Debug: list unsigned int = const $C000 (used reg = )
25971 6979           B8                   C000  mov	ax,#$C000
25972 697C           50                         push	ax
25973                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25974 697D           FF76         FC            push	-4[bp]
25975                                           ! Debug: list unsigned int = const $A000 (used reg = )
25976 6980           B8                   A000  mov	ax,#$A000
25977 6983           50                         push	ax
25978                                           ! Debug: func () void = memcpyb+0 (used reg = )
25979 6984           E8         11C7            call	_memcpyb
25980 6987           83C4                   0A  add	sp,*$A
25981                                           !BCC_EOS
25982                                           ! 3571   }
25983                                           ! 3572  release_font_access();
25984                       0000698A            .227:
25985                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25986 698A           8B46         FA            mov	ax,-6[bp]
25987 698D           40                         inc	ax
25988 698E           8946         FA            mov	-6[bp],ax
25989                       00006991            .228:
25990                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25991 6991           8B46         FA            mov	ax,-6[bp]
25992 6994           3D                   0100  cmp	ax,#$100
25993 6997           72           BD            jb 	.229
25994                       00006999            .22A:
25995                       00006999            .226:
25996                                           ! Debug: func () void = release_font_access+0 (used reg = )
25997 6999           E8         FC35            call	_release_font_access
25998                                           !BCC_EOS
25999                                           ! 3573  if(AL>=0x10)
26000                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26001 699C           8A46         04            mov	al,4[bp]
26002 699F           3C                     10  cmp	al,*$10
26003 69A1           72           09            jb  	.22B
26004                       000069A3            .22C:
26005                                           ! 3574   {
26006                                           ! 3575    set_scan_lines(16);
26007                                           ! Debug: list int = const $10 (used reg = )
26008 69A3           B8                   0010  mov	ax,*$10
26009 69A6           50                         push	ax
26010                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26011 69A7           E8         FC5B            call	_set_scan_lines
26012 69AA           44                         inc	sp
26013 69AB           44                         inc	sp
26014                                           !BCC_EOS
26015                                           ! 3576   }
26016                                           ! 3577 }
26017                       000069AC            .22B:
26018 69AC           89EC                       mov	sp,bp
26019 69AE           5D                         pop	bp
26020 69AF           C3                         ret
26021                                           ! 3578 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26022                                           ! Register BX used in function biosfn_load_text_8_16_pat
26023                       000069B0            _biosfn_load_gfx_8_8_chars:
26024                                           !BCC_EOS
26025                                           !BCC_EOS
26026                                           ! 3579 {
26027                                           ! 3580 }
26028 69B0           C3                         ret
26029                                           ! 3581 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26030                       000069B1            _biosfn_load_gfx_user_chars:
26031                                           !BCC_EOS
26032                                           !BCC_EOS
26033                                           !BCC_EOS
26034                                           !BCC_EOS
26035                                           !BCC_EOS
26036                                           ! 3582 {
26037                                           ! 3583 }
26038 69B1           C3                         ret
26039                                           ! 3584 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26040                       000069B2            _biosfn_load_gfx_8_14_chars:
26041                                           !BCC_EOS
26042                                           ! 3585 {
26043                                           ! 3586 }
26044 69B2           C3                         ret
26045                                           ! 3587 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26046                       000069B3            _biosfn_load_gfx_8_8_dd_chars:
26047                                           !BCC_EOS
26048                                           ! 3588 {
26049                                           ! 3589 }
26050 69B3           C3                         ret
26051                                           ! 3590 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26052                       000069B4            _biosfn_load_gfx_8_16_chars:
26053                                           !BCC_EOS
26054                                           ! 3591 {
26055                                           ! 3592 }
26056 69B4           C3                         ret
26057                                           ! 3593 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26058                                           ! 3594 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26059                       000069B5            _biosfn_get_font_info:
26060                                           !BCC_EOS
26061                                           !BCC_EOS
26062                                           !BCC_EOS
26063                                           !BCC_EOS
26064                                           !BCC_EOS
26065                                           ! 3595 {Bit16u ss=get_SS();
26066 69B5           55                         push	bp
26067 69B6           89E5                       mov	bp,sp
26068 69B8           4C                         dec	sp
26069 69B9           4C                         dec	sp
26070                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26071 69BA           E8         127D            call	_get_SS
26072                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26073 69BD           8946         FE            mov	-2[bp],ax
26074                                           !BCC_EOS
26075                                           ! 3596  switch(BH)
26076 69C0           8A46         04            mov	al,4[bp]
26077                                           ! 3597   {case 0x00:
26078 69C3           E9         0143            br 	.22F
26079                                           ! 3598     wri
26080                                           ! 3598 te_word(ss,ES,read_word(0x00,0x1f*4));
26081                       000069C6            .230:
26082                                           ! Debug: list int = const $7C (used reg = )
26083 69C6           B8                   007C  mov	ax,*$7C
26084 69C9           50                         push	ax
26085                                           ! Debug: list int = const 0 (used reg = )
26086 69CA           31C0                       xor	ax,ax
26087 69CC           50                         push	ax
26088                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26089 69CD           E8         11F1            call	_read_word
26090 69D0           83C4                   04  add	sp,*4
26091                                           ! Debug: list unsigned short = ax+0 (used reg = )
26092 69D3           50                         push	ax
26093                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26094 69D4           FF76         06            push	6[bp]
26095                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26096 69D7           FF76         FE            push	-2[bp]
26097                                           ! Debug: func () void = write_word+0 (used reg = )
26098 69DA           E8         120F            call	_write_word
26099 69DD           83C4                   06  add	sp,*6
26100                                           !BCC_EOS
26101                                           ! 3599     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26102                                           ! Debug: list int = const $7E (used reg = )
26103 69E0           B8                   007E  mov	ax,*$7E
26104 69E3           50                         push	ax
26105                                           ! Debug: list int = const 0 (used reg = )
26106 69E4           31C0                       xor	ax,ax
26107 69E6           50                         push	ax
26108                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26109 69E7           E8         11D7            call	_read_word
26110 69EA           83C4                   04  add	sp,*4
26111                                           ! Debug: list unsigned short = ax+0 (used reg = )
26112 69ED           50                         push	ax
26113                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26114 69EE           FF76         08            push	8[bp]
26115                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26116 69F1           FF76         FE            push	-2[bp]
26117                                           ! Debug: func () void = write_word+0 (used reg = )
26118 69F4           E8         11F5            call	_write_word
26119 69F7           83C4                   06  add	sp,*6
26120                                           !BCC_EOS
26121                                           ! 3600     break;
26122 69FA           E9         0131            br 	.22D
26123                                           !BCC_EOS
26124                                           ! 3601    case 0x01:
26125                                           ! 3602     write_word(ss,ES,read_word(0x00,0x43*4));
26126                       000069FD            .231:
26127                                           ! Debug: list int = const $10C (used reg = )
26128 69FD           B8                   010C  mov	ax,#$10C
26129 6A00           50                         push	ax
26130                                           ! Debug: list int = const 0 (used reg = )
26131 6A01           31C0                       xor	ax,ax
26132 6A03           50                         push	ax
26133                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26134 6A04           E8         11BA            call	_read_word
26135 6A07           83C4                   04  add	sp,*4
26136                                           ! Debug: list unsigned short = ax+0 (used reg = )
26137 6A0A           50                         push	ax
26138                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26139 6A0B           FF76         06            push	6[bp]
26140                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26141 6A0E           FF76         FE            push	-2[bp]
26142                                           ! Debug: func () void = write_word+0 (used reg = )
26143 6A11           E8         11D8            call	_write_word
26144 6A14           83C4                   06  add	sp,*6
26145                                           !BCC_EOS
26146                                           ! 3603     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26147                                           ! Debug: list int = const $10E (used reg = )
26148 6A17           B8                   010E  mov	ax,#$10E
26149 6A1A           50                         push	ax
26150                                           ! Debug: list int = const 0 (used reg = )
26151 6A1B           31C0                       xor	ax,ax
26152 6A1D           50                         push	ax
26153                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26154 6A1E           E8         11A0            call	_read_word
26155 6A21           83C4                   04  add	sp,*4
26156                                           ! Debug: list unsigned short = ax+0 (used reg = )
26157 6A24           50                         push	ax
26158                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26159 6A25           FF76         08            push	8[bp]
26160                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26161 6A28           FF76         FE            push	-2[bp]
26162                                           ! Debug: func () void = write_word+0 (used reg = )
26163 6A2B           E8         11BE            call	_write_word
26164 6A2E           83C4                   06  add	sp,*6
26165                                           !BCC_EOS
26166                                           ! 3604     break;
26167 6A31           E9         00FA            br 	.22D
26168                                           !BCC_EOS
26169                                           ! 3605    case 0x02:
26170                                           ! 3606     write_word(ss,ES,0xC000);
26171                       00006A34            .232:
26172                                           ! Debug: list unsigned int = const $C000 (used reg = )
26173 6A34           B8                   C000  mov	ax,#$C000
26174 6A37           50                         push	ax
26175                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26176 6A38           FF76         06            push	6[bp]
26177                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26178 6A3B           FF76         FE            push	-2[bp]
26179                                           ! Debug: func () void = write_word+0 (used reg = )
26180 6A3E           E8         11AB            call	_write_word
26181 6A41           83C4                   06  add	sp,*6
26182                                           !BCC_EOS
26183                                           ! 3607     write_word(ss,BP,vgafont14);
26184                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26185 6A44           BB                   175C  mov	bx,#_vgafont14
26186 6A47           53                         push	bx
26187                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26188 6A48           FF76         08            push	8[bp]
26189                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26190 6A4B           FF76         FE            push	-2[bp]
26191                                           ! Debug: func () void = write_word+0 (used reg = )
26192 6A4E           E8         119B            call	_write_word
26193 6A51           83C4                   06  add	sp,*6
26194                                           !BCC_EOS
26195                                           ! 3608     break;
26196 6A54           E9         00D7            br 	.22D
26197                                           !BCC_EOS
26198                                           ! 3609    case 0x03:
26199                                           ! 3610     write_word(ss,ES,0xC000);
26200                       00006A57            .233:
26201                                           ! Debug: list unsigned int = const $C000 (used reg = )
26202 6A57           B8                   C000  mov	ax,#$C000
26203 6A5A           50                         push	ax
26204                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26205 6A5B           FF76         06            push	6[bp]
26206                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26207 6A5E           FF76         FE            push	-2[bp]
26208                                           ! Debug: func () void = write_word+0 (used reg = )
26209 6A61           E8         1188            call	_write_word
26210 6A64           83C4                   06  add	sp,*6
26211                                           !BCC_EOS
26212                                           ! 3611     write_word(ss,BP,vgafont8);
26213                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26214 6A67           BB                   0F5C  mov	bx,#_vgafont8
26215 6A6A           53                         push	bx
26216                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26217 6A6B           FF76         08            push	8[bp]
26218                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26219 6A6E           FF76         FE            push	-2[bp]
26220                                           ! Debug: func () void = write_word+0 (used reg = )
26221 6A71           E8         1178            call	_write_word
26222 6A74           83C4                   06  add	sp,*6
26223                                           !BCC_EOS
26224                                           ! 3612     break;
26225 6A77           E9         00B4            br 	.22D
26226                                           !BCC_EOS
26227                                           ! 3613    case 0x04:
26228                                           ! 3614     write_word(ss,ES,0xC000);
26229                       00006A7A            .234:
26230                                           ! Debug: list unsigned int = const $C000 (used reg = )
26231 6A7A           B8                   C000  mov	ax,#$C000
26232 6A7D           50                         push	ax
26233                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26234 6A7E           FF76         06            push	6[bp]
26235                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26236 6A81           FF76         FE            push	-2[bp]
26237                                           ! Debug: func () void = write_word+0 (used reg = )
26238 6A84           E8         1165            call	_write_word
26239 6A87           83C4                   06  add	sp,*6
26240                                           !BCC_EOS
26241                                           ! 3615     write_word(ss,BP,vgafont8+128*8);
26242                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26243 6A8A           BB                   135C  mov	bx,#_vgafont8+$400
26244 6A8D           53                         push	bx
26245                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26246 6A8E           FF76         08            push	8[bp]
26247                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26248 6A91           FF76         FE            push	-2[bp]
26249                                           ! Debug: func () void = write_word+0 (used reg = )
26250 6A94           E8         1155            call	_write_word
26251 6A97           83C4                   06  add	sp,*6
26252                                           !BCC_EOS
26253                                           ! 3616     break;
26254 6A9A           E9         0091            br 	.22D
26255                                           !BCC_EOS
26256                                           ! 3617    case 0x05:
26257                                           ! 3618     write_word(ss,ES,0xC000);
26258                       00006A9D            .235:
26259                                           ! Debug: list unsigned int = const $C000 (used reg = )
26260 6A9D           B8                   C000  mov	ax,#$C000
26261 6AA0           50                         push	ax
26262                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26263 6AA1           FF76         06            push	6[bp]
26264                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26265 6AA4           FF76         FE            push	-2[bp]
26266                                           ! Debug: func () void = write_word+0 (used reg = )
26267 6AA7           E8         1142            call	_write_word
26268 6AAA           83C4                   06  add	sp,*6
26269                                           !BCC_EOS
26270                                           ! 3619     write_word(ss,BP,vgafont14alt);
26271                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26272 6AAD           BB                   355C  mov	bx,#_vgafont14alt
26273 6AB0           53                         push	bx
26274                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26275 6AB1           FF76         08            push	8[bp]
26276                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26277 6AB4           FF76         FE            push	-2[bp]
26278                                           ! Debug: func () void = write_word+0 (used reg = )
26279 6AB7           E8         1132            call	_write_word
26280 6ABA           83C4                   06  add	sp,*6
26281                                           !BCC_EOS
26282                                           ! 3620     break;
26283 6ABD           EB           6F            jmp .22D
26284                                           !BCC_EOS
26285                                           ! 3621    case 0x06:
26286                                           ! 3622     write_word(ss,ES,0xC000);
26287                       00006ABF            .236:
26288                                           ! Debug: list unsigned int = const $C000 (used reg = )
26289 6ABF           B8                   C000  mov	ax,#$C000
26290 6AC2           50                         push	ax
26291                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26292 6AC3           FF76         06            push	6[bp]
26293                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26294 6AC6           FF76         FE            push	-2[bp]
26295                                           ! Debug: func () void = write_word+0 (used reg = )
26296 6AC9           E8         1120            call	_write_word
26297 6ACC           83C4                   06  add	sp,*6
26298                                           !BCC_EOS
26299                                           ! 3623     write_word(ss,BP,vgafont16);
26300                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26301 6ACF           BB                   255C  mov	bx,#_vgafont16
26302 6AD2           53                         push	bx
26303                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26304 6AD3           FF76         08            push	8[bp]
26305                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26306 6AD6           FF76         FE            push	-2[bp]
26307                                           ! Debug: func () void = write_word+0 (used reg = )
26308 6AD9           E8         1110            call	_write_word
26309 6ADC           83C4                   06  add	sp,*6
26310                                           !BCC_EOS
26311                                           ! 3624     break;
26312 6ADF           EB           4D            jmp .22D
26313                                           !BCC_EOS
26314                                           ! 3625    case 0x07:
26315                                           ! 3626     write_word(ss,ES,0xC000);
26316                       00006AE1            .237:
26317                                           ! Debug: list unsigned int = const $C000 (used reg = )
26318 6AE1           B8                   C000  mov	ax,#$C000
26319 6AE4           50                         push	ax
26320                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26321 6AE5           FF76         06            push	6[bp]
26322                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26323 6AE8           FF76         FE            push	-2[bp]
26324                                           ! Debug: func () void = write_word+0 (used reg = )
26325 6AEB           E8         10FE            call	_write_word
26326 6AEE           83C4                   06  add	sp,*6
26327                                           !BCC_EOS
26328                                           ! 3627     write_word(ss,BP,vgafont16alt);
26329                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26330 6AF1           BB                   355D  mov	bx,#_vgafont16alt
26331 6AF4           53                         push	bx
26332                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26333 6AF5           FF76         08            push	8[bp]
26334                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26335 6AF8           FF76         FE            push	-2[bp]
26336                                           ! Debug: func () void = write_word+0 (used reg = )
26337 6AFB           E8         10EE            call	_write_word
26338 6AFE           83C4                   06  add	sp,*6
26339                                           !BCC_EOS
26340                                           ! 3628     break;
26341 6B01           EB           2B            jmp .22D
26342                                           !BCC_EOS
26343                                           ! 3629    default:
26344                                           ! 3630     return;
26345                       00006B03            .238:
26346 6B03           89EC                       mov	sp,bp
26347 6B05           5D                         pop	bp
26348 6B06           C3                         ret
26349                                           !BCC_EOS
26350                                           ! 3631   }
26351                                           ! 3632  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26352 6B07           EB           25            jmp .22D
26353                       00006B09            .22F:
26354 6B09           2C                     00  sub	al,*0
26355 6B0B           72           F6            jb 	.238
26356 6B0D           3C                     07  cmp	al,*7
26357 6B0F           77           1B            ja  	.239
26358 6B11           30E4                       xor	ah,ah
26359 6B13           D1E0                       shl	ax,*1
26360 6B15           89C3                       mov	bx,ax
26361 6B17           2E                         seg	cs
26362 6B18           FFA7       6B1C            br	.23A[bx]
26363                       00006B1C            .23A:
26364 6B1C                      69C6            .word	.230
26365 6B1E                      69FD            .word	.231
26366 6B20                      6A34            .word	.232
26367 6B22                      6A57            .word	.233
26368 6B24                      6A7A            .word	.234
26369 6B26                      6A9D            .word	.235
26370 6B28                      6ABF            .word	.236
26371 6B2A                      6AE1            .word	.237
26372                       00006B2C            .239:
26373 6B2C           EB           D5            jmp	.238
26374                       00006B2E            .22D:
26375                       FFFFFFFC            ..FFF5	=	-4
26376                                           ! Debug: list int = const $85 (used reg = )
26377 6B2E           B8                   0085  mov	ax,#$85
26378 6B31           50                         push	ax
26379                                           ! Debug: list int = const $40 (used reg = )
26380 6B32           B8                   0040  mov	ax,*$40
26381 6B35           50                         push	ax
26382                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26383 6B36           E8         1075            call	_read_byte
26384 6B39           83C4                   04  add	sp,*4
26385                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26386 6B3C           30E4                       xor	ah,ah
26387                                           ! Debug: list unsigned short = ax+0 (used reg = )
26388 6B3E           50                         push	ax
26389                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26390 6B3F           FF76         0A            push	$A[bp]
26391                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26392 6B42           FF76         FE            push	-2[bp]
26393                                           ! Debug: func () void = write_word+0 (used reg = )
26394 6B45           E8         10A4            call	_write_word
26395 6B48           83C4                   06  add	sp,*6
26396                                           !BCC_EOS
26397                                           ! 3633  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26398                                           ! Debug: list int = const $84 (used reg = )
26399 6B4B           B8                   0084  mov	ax,#$84
26400 6B4E           50                         push	ax
26401                                           ! Debug: list int = const $40 (used reg = )
26402 6B4F           B8                   0040  mov	ax,*$40
26403 6B52           50                         push	ax
26404                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26405 6B53           E8         1058            call	_read_byte
26406 6B56           83C4                   04  add	sp,*4
26407                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26408 6B59           30E4                       xor	ah,ah
26409                                           ! Debug: list unsigned short = ax+0 (used reg = )
26410 6B5B           50                         push	ax
26411                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26412 6B5C           FF76         0C            push	$C[bp]
26413                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26414 6B5F           FF76         FE            push	-2[bp]
26415                                           ! Debug: func () void = write_word+0 (used reg = )
26416 6B62           E8         1087            call	_write_word
26417 6B65           83C4                   06  add	sp,*6
26418                                           !BCC_EOS
26419                                           ! 3634 }
26420 6B68           89EC                       mov	sp,bp
26421 6B6A           5D                         pop	bp
26422 6B6B           C3                         ret
26423                                           ! 3635 #asm
26424                                           !BCC_ASM
26425                       00000006            _biosfn_get_font_info.BP	set	6
26426                       00000002            _biosfn_get_font_info.BH	set	2
26427                       00000008            _biosfn_get_font_info.CX	set	8
26428                       0000000A            _biosfn_get_font_info.DX	set	$A
26429                       00000004            _biosfn_get_font_info.ES	set	4
26430                       00006B6C            biosfn_get_ega_info:
26431 6B6C           1E                           push ds
26432 6B6D           50                           push ax
26433 6B6E           B8                   0040    mov ax, # 0x40
26434 6B71           8ED8                         mov ds, ax
26435 6B73           30ED                         xor ch, ch
26436 6B75           BB                   0088    mov bx, # 0x88
26437 6B78           8A0F                         mov cl, [bx]
26438 6B7A           80E1                   0F    and cl, #0x0f
26439 6B7D           BB                   0063    mov bx, # 0x63
26440 6B80           8B07                         mov ax, [bx]
26441 6B82           BB                   0003    mov bx, #0x0003
26442 6B85           3D                   03B4    cmp ax, # 0x3b4
26443 6B88           75           02              jne mode_ega_color
26444 6B8A           B7                     01    mov bh, #0x01
26445                       00006B8C            mode_ega_color:
26446 6B8C           58                           pop ax
26447 6B8D           1F                           pop ds
26448 6B8E           C3                           ret
26449                                           ! 3655 endasm
26450                                           !BCC_ENDASM
26451                                           ! 3656 static void biosfn_alternate_prtsc()
26452                                           ! Register BX used in function biosfn_get_font_info
26453                                           ! 3657 {
26454                       00006B8F            _biosfn_alternate_prtsc:
26455                                           ! 3658 }
26456 6B8F           C3                         ret
26457                                           ! 3659 #asm
26458                                           !BCC_ASM
26459                       00006B90            biosfn_select_vert_res:
26460                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26461 6B90           1E                           push ds
26462 6B91           53                           push bx
26463 6B92           52                           push dx
26464 6B93           88C2                         mov dl, al
26465 6B95           B8                   0040    mov ax, # 0x40
26466 6B98           8ED8                         mov ds, ax
26467 6B9A           BB                   0089    mov bx, # 0x89
26468 6B9D           8A07                         mov al, [bx]
26469 6B9F           BB                   0088    mov bx, # 0x88
26470 6BA2           8A27                         mov ah, [bx]
26471 6BA4           80FA                   01    cmp dl, #0x01
26472 6BA7           74           15              je vert_res_350
26473 6BA9           72           1D              jb vert_res_200
26474 6BAB           80FA                   02    cmp dl, #0x02
26475 6BAE           74           02              je vert_res_400
26476 6BB0           EB           2A              jmp set_retcode
26477                       00006BB2            vert_res_400:
26478                                             ; reset modeset ctl bit 7 and set bit 4
26479                                             ; set switches bit 3-0 to 0x09
26480 6BB2           24                     7F    and al, #0x7f
26481 6BB4           0C                     10    or al, #0x10
26482 6BB6           80E4                   F0    and ah, #0xf0
26483 6BB9           80CC                   09    or ah, #0x09
26484 6BBC           75           14              jnz set_vert_res
26485                       00006BBE            vert_res_350:
26486                                             ; reset modeset ctl bit 7 and bit 4
26487                                             ; set switches bit 3-0 to 0x09
26488 6BBE           24                     6F    and al, #0x6f
26489 6BC0           80E4                   F0    and ah, #0xf0
26490 6BC3           80CC                   09    or ah, #0x09
26491 6BC6           75           0A              jnz set_vert_res
26492                       00006BC8            vert_res_200:
26493                                             ; set modeset ctl bit 7 and reset bit 4
26494                                             ; set switches bit 3-0 to 0x08
26495 6BC8           24                     EF    and al, #0xef
26496 6BCA           0C                     80    or al, #0x80
26497 6BCC           80E4                   F0    and ah, #0xf0
26498 6BCF           80CC                   08    or ah, #0x08
26499                       00006BD2            set_vert_res:
26500 6BD2           BB                   0089    mov bx, # 0x89
26501 6BD5           8807                         mov [bx], al
26502 6BD7           BB                   0088    mov bx, # 0x88
26503 6BDA           8827                         mov [bx], ah
26504                       00006BDC            set_retcode:
26505 6BDC           B8                   1212    mov ax, #0x1212
26506 6BDF           5A                           pop dx
26507 6BE0           5B                           pop bx
26508 6BE1           1F                           pop ds
26509 6BE2           C3                           ret
26510                       00006BE3            biosfn_enable_default_palette_loading:
26511 6BE3           1E                           push ds
26512 6BE4           53                           push bx
26513 6BE5           52                           push dx
26514 6BE6           88C2                         mov dl, al
26515 6BE8           80E2                   01    and dl, #0x01
26516 6BEB           C0E2                   03    shl dl, 3
26517 6BEE           B8                   0040    mov ax, # 0x40
26518 6BF1           8ED8                         mov ds, ax
26519 6BF3           BB                   0089    mov bx, # 0x89
26520 6BF6           8A07                         mov al, [bx]
26521 6BF8           24                     F7    and al, #0xf7
26522 6BFA           08D0                         or al, dl
26523 6BFC           8807                         mov [bx], al
26524 6BFE           B8                   1212    mov ax, #0x1212
26525 6C01           5A                           pop dx
26526 6C02           5B                           pop bx
26527 6C03           1F                           pop ds
26528 6C04           C3                           ret
26529                       00006C05            biosfn_enable_video_addressing:
26530 6C05           53                           push bx
26531 6C06           52                           push dx
26532 6C07           88C3                         mov bl, al
26533 6C09           80E3                   01    and bl, #0x01
26534 6C0C           80F3                   01    xor bl, #0x01
26535 6C0F           D0E3                         shl bl, 1
26536 6C11           BA                   03CC    mov dx, # 0x3cc
26537 6C14           EC                           in al, dx
26538 6C15           24                     FD    and al, #0xfd
26539 6C17           08D8                         or al, bl
26540 6C19           BA                   03C2    mov dx, # 0x3c2
26541 6C1C           EE                           out dx, al
26542 6C1D           B8                   1212    mov ax, #0x1212
26543 6C20           5A                           pop dx
26544 6C21           5B                           pop bx
26545 6C22           C3                           ret
26546                       00006C23            biosfn_enable_grayscale_summing:
26547 6C23           1E                           push ds
26548 6C24           53                           push bx
26549 6C25           52                           push dx
26550 6C26           88C2                         mov dl, al
26551 6C28           80E2                   01    and dl, #0x01
26552 6C2B           80F2                   01    xor dl, #0x01
26553 6C2E           D0E2                         shl dl, 1
26554 6C30           B8                   0040    mov ax, # 0x40
26555 6C33           8ED8                         mov ds, ax
26556 6C35           BB                   0089    mov bx, # 0x89
26557 6C38           8A07                         mov al, [bx]
26558 6C3A           24                     FD    and al, #0xfd
26559 6C3C           08D0                         or al, dl
26560 6C3E           8807                         mov [bx], al
26561 6C40           B8                   1212    mov ax, #0x1212
26562 6C43           5A                           pop dx
26563 6C44           5B                           pop bx
26564 6C45           1F                           pop ds
26565 6C46           C3                           ret
26566                       00006C47            biosfn_enable_cursor_emulation:
26567 6C47           1E                           push ds
26568 6C48           53                           push bx
26569 6C49           52                           push dx
26570 6C4A           88C2                         mov dl, al
26571 6C4C           80E2                   01    and dl, #0x01
26572 6C4F           80F2                   01    xor dl, #0x01
26573 6C52           B8                   0040    mov ax, # 0x40
26574 6C55           8ED8                         mov ds, ax
26575 6C57           BB                   0089    mov bx, # 0x89
26576 6C5A           8A07                         mov al, [bx]
26577 6C5C           24                     FE    and al, #0xfe
26578 6C5E           08D0                         or al, dl
26579 6C60           8807                         mov [bx], al
26580 6C62           B8                   1212    mov ax, #0x1212
26581 6C65           5A                           pop dx
26582 6C66           5B                           pop bx
26583 6C67           1F                           pop ds
26584 6C68           C3                           ret
26585                                           ! 3786 endasm
26586                                           !BCC_ENDASM
26587                                           ! 3787 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26588                       00006C69            _biosfn_switch_video_interface:
26589                                           !BCC_EOS
26590                                           !BCC_EOS
26591                                           !BCC_EOS
26592                                           ! 3788 {
26593                                           ! 3789 }
26594 6C69           C3                         ret
26595                                           ! 3790 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26596                       00006C6A            _biosfn_enable_video_refresh_control:
26597                                           !BCC_EOS
26598                                           ! 3791 {
26599                                           ! 3792 }
26600 6C6A           C3                         ret
26601                                           ! 3793 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26602                                           ! 3794 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26603                       00006C6B            _biosfn_write_string:
26604                                           !BCC_EOS
26605                                           !BCC_EOS
26606                                           !BCC_EOS
26607                                           !BCC_EOS
26608                                           !BCC_EOS
26609                                           !BCC_EOS
26610                                           !BCC_EOS
26611                                           !BCC_EOS
26612                                           ! 3795 {
26613                                           ! 3796  Bit16u newcurs,oldcurs,dummy;
26614                                           !BCC_EOS
26615                                           ! 3797  Bit8u car,carattr;
26616                                           !BCC_EOS
26617                                           ! 3798  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26618 6C6B           55                         push	bp
26619 6C6C           89E5                       mov	bp,sp
26620 6C6E           83C4                   F8  add	sp,*-8
26621                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26622 6C71           8D5E         FC            lea	bx,-4[bp]
26623 6C74           53                         push	bx
26624                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26625 6C75           8D5E         FA            lea	bx,-6[bp]
26626 6C78           53                         push	bx
26627                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26628 6C79           8A46         06            mov	al,6[bp]
26629 6C7C           30E4                       xor	ah,ah
26630 6C7E           50                         push	ax
26631                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26632 6C7F           E8         D78E            call	_biosfn_get_cursor_pos
26633 6C82           83C4                   06  add	sp,*6
26634                                           !BCC_EOS
26635                                           ! 3799  if(row==0xff)
26636                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26637 6C85           8A46         0C            mov	al,$C[bp]
26638 6C88           3C                     FF  cmp	al,#$FF
26639 6C8A           75           12            jne 	.23B
26640                       00006C8C            .23C:
26641                                           ! 3800   {col=oldcurs&0x00ff;
26642                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26643 6C8C           8A46         FC            mov	al,-4[bp]
26644                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26645 6C8F           8846         0E            mov	$E[bp],al
26646                                           !BCC_EOS
26647                                           ! 3801    row=(oldcurs&0xff00)>>8;
26648                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26649 6C92           8B46         FC            mov	ax,-4[bp]
26650 6C95           30C0                       xor	al,al
26651                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26652 6C97           88E0                       mov	al,ah
26653 6C99           30E4                       xor	ah,ah
26654                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26655 6C9B           8846         0C            mov	$C[bp],al
26656                                           !BCC_EOS
26657                                           ! 3802   }
26658                                           ! 3803  newcurs=row; newcurs<<=8; newcurs+=col;
26659                       00006C9E            .23B:
26660                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26661 6C9E           8A46         0C            mov	al,$C[bp]
26662 6CA1           30E4                       xor	ah,ah
26663 6CA3           8946         FE            mov	-2[bp],ax
26664                                           !BCC_EOS
26665                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26666 6CA6           8B46         FE            mov	ax,-2[bp]
26667 6CA9           88C4                       mov	ah,al
26668 6CAB           30C0                       xor	al,al
26669 6CAD           8946         FE            mov	-2[bp],ax
26670                                           !BCC_EOS
26671                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26672 6CB0           8B46         FE            mov	ax,-2[bp]
26673 6CB3           0246         0E            add	al,$E[bp]
26674 6CB6           80D4                   00  adc	ah,*0
26675 6CB9           8946         FE            mov	-2[bp],ax
26676                                           !BCC_EOS
26677                                           ! 3804  biosfn_set_cursor_pos(page,newcurs);
26678                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26679 6CBC           FF76         FE            push	-2[bp]
26680                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26681 6CBF           8A46         06            mov	al,6[bp]
26682 6CC2           30E4                       xor	ah,ah
26683 6CC4           50                         push	ax
26684                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26685 6CC5           E8         D648            call	_biosfn_set_cursor_pos
26686 6CC8           83C4                   04  add	sp,*4
26687                                           !BCC_EOS
26688                                           ! 3805  while(count--!=0)
26689                                           ! 3806   {
26690 6CCB           EB           4F            jmp .23E
26691                       00006CCD            .23F:
26692                                           ! 3807    car=read_byte(seg,offset++);
26693                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26694 6CCD           8B46         12            mov	ax,$12[bp]
26695 6CD0           40                         inc	ax
26696 6CD1           8946         12            mov	$12[bp],ax
26697                                           ! Debug: list unsigned short = ax-1 (used reg = )
26698 6CD4           48                         dec	ax
26699 6CD5           50                         push	ax
26700                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26701 6CD6           FF76         10            push	$10[bp]
26702                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26703 6CD9           E8         0ED2            call	_read_byte
26704 6CDC           83C4                   04  add	sp,*4
26705                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26706 6CDF           8846         F9            mov	-7[bp],al
26707                                           !BCC_EOS
26708                                           ! 3808    if((flag&0x02)!=0)
26709                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26710 6CE2           8A46         04            mov	al,4[bp]
26711 6CE5           24                     02  and	al,*2
26712                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26713 6CE7           84C0                       test	al,al
26714 6CE9           74           15            je  	.240
26715                       00006CEB            .241:
26716                                           ! 3809     attr=read_byte(seg,offset++);
26717                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26718 6CEB           8B46         12            mov	ax,$12[bp]
26719 6CEE           40                         inc	ax
26720 6CEF           8946         12            mov	$12[bp],ax
26721                                           ! Debug: list unsigned short = ax-1 (used reg = )
26722 6CF2           48                         dec	ax
26723 6CF3           50                         push	ax
26724                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26725 6CF4           FF76         10            push	$10[bp]
26726                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26727 6CF7           E8         0EB4            call	_read_byte
26728 6CFA           83C4                   04  add	sp,*4
26729                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26730 6CFD           8846         08            mov	8[bp],al
26731                                           !BCC_EOS
26732                                           ! 3810    biosfn_write_teletype(car,page,attr,3);
26733                       00006D00            .240:
26734                                           ! Debug: list int = const 3 (used reg = )
26735 6D00           B8                   0003  mov	ax,*3
26736 6D03           50                         push	ax
26737                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26738 6D04           8A46         08            mov	al,8[bp]
26739 6D07           30E4                       xor	ah,ah
26740 6D09           50                         push	ax
26741                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26742 6D0A           8A46         06            mov	al,6[bp]
26743 6D0D           30E4                       xor	ah,ah
26744 6D0F           50                         push	ax
26745                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26746 6D10           8A46         F9            mov	al,-7[bp]
26747 6D13           30E4                       xor	ah,ah
26748 6D15           50                         push	ax
26749                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26750 6D16           E8         F13E            call	_biosfn_write_teletype
26751 6D19           83C4                   08  add	sp,*8
26752                                           !BCC_EOS
26753                                           ! 3811   }
26754                                           ! 3812  if((flag&0x01)==0)
26755                       00006D1C            .23E:
26756                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26757 6D1C           8B46         0A            mov	ax,$A[bp]
26758 6D1F           48                         dec	ax
26759 6D20           8946         0A            mov	$A[bp],ax
26760                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26761 6D23           3D                   FFFF  cmp	ax,*-1
26762 6D26           75           A5            jne	.23F
26763                       00006D28            .242:
26764                       00006D28            .23D:
26765                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26766 6D28           8A46         04            mov	al,4[bp]
26767 6D2B           24                     01  and	al,*1
26768                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26769 6D2D           84C0                       test	al,al
26770 6D2F           75           0F            jne 	.243
26771                       00006D31            .244:
26772                                           ! 3813   biosfn_set_cursor_pos(page,oldcurs);
26773                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26774 6D31           FF76         FC            push	-4[bp]
26775                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26776 6D34           8A46         06            mov	al,6[bp]
26777 6D37           30E4                       xor	ah,ah
26778 6D39           50                         push	ax
26779                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26780 6D3A           E8         D5D3            call	_biosfn_set_cursor_pos
26781 6D3D           83C4                   04  add	sp,*4
26782                                           !BCC_EOS
26783                                           ! 3814 }
26784                       00006D40            .243:
26785 6D40           89EC                       mov	sp,bp
26786 6D42           5D                         pop	bp
26787 6D43           C3                         ret
26788                                           ! 3815 #asm
26789                                           !BCC_ASM
26790                       00000008            _biosfn_write_string.count	set	8
26791                       0000000E            _biosfn_write_string.seg	set	$E
26792                       0000000C            _biosfn_write_string.col	set	$C
26793                       00000002            _biosfn_write_string.flag	set	2
26794                       00000006            _biosfn_write_string.attr	set	6
26795                       00000004            _biosfn_write_string.page	set	4
26796                       0000000A            _biosfn_write_string.row	set	$A
26797                       00000010            _biosfn_write_string.offset	set	$10
26798                       00006D44            biosfn_group_1A:
26799 6D44           3C                     00    cmp al, #0x00
26800 6D46           74           05              je biosfn_read_display_code
26801 6D48           3C                     01    cmp al, #0x01
26802 6D4A           74           16              je biosfn_set_display_code
26803 6D4C           C3                           ret
26804                       00006D4D            biosfn_read_display_code:
26805 6D4D           1E                           push ds
26806 6D4E           50                           push ax
26807 6D4F           B8                   0040    mov ax, # 0x40
26808 6D52           8ED8                         mov ds, ax
26809 6D54           BB                   008A    mov bx, # 0x8A
26810 6D57           8A07                         mov al, [bx]
26811 6D59           88C3                         mov bl, al
26812 6D5B           30FF                         xor bh, bh
26813 6D5D           58                           pop ax
26814 6D5E           88E0                         mov al, ah
26815 6D60           1F                           pop ds
26816 6D61           C3                           ret
26817                       00006D62            biosfn_set_display_code:
26818 6D62           1E                           push ds
26819 6D63           50                           push ax
26820 6D64           53                           push bx
26821 6D65           B8                   0040    mov ax, # 0x40
26822 6D68           8ED8                         mov ds, ax
26823 6D6A           89D8                         mov ax, bx
26824 6D6C           BB                   008A    mov bx, # 0x8A
26825 6D6F           8807                         mov [bx], al
26826 6D71           5B                           pop bx
26827 6D72           58                           pop ax
26828 6D73           88E0                         mov al, ah
26829 6D75           1F                           pop ds
26830 6D76           C3                           ret
26831                                           ! 3849 endasm
26832                                           !BCC_ENDASM
26833                                           ! 3850 static void biosfn_read_state_info (BX,ES,DI)
26834                                           ! Register BX used in function biosfn_write_string
26835                                           ! 3851 Bit16u BX;Bit16u ES;Bit16u DI;
26836                       00006D77            _biosfn_read_state_info:
26837                                           !BCC_EOS
26838                                           !BCC_EOS
26839                                           !BCC_EOS
26840                                           ! 3852 {
26841                                           ! 3853  write_word(ES,DI+0x00,&static_functionality);
26842 6D77           55                         push	bp
26843 6D78           89E5                       mov	bp,sp
26844                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26845 6D7A           BB                   0F4C  mov	bx,#_static_functionality
26846 6D7D           53                         push	bx
26847                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26848 6D7E           8B46         08            mov	ax,8[bp]
26849                                           ! Debug: list unsigned int = ax+0 (used reg = )
26850 6D81           50                         push	ax
26851                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26852 6D82           FF76         06            push	6[bp]
26853                                           ! Debug: func () void = write_word+0 (used reg = )
26854 6D85           E8         0E64            call	_write_word
26855 6D88           89EC                       mov	sp,bp
26856                                           !BCC_EOS
26857                                           ! 3854  write_word(ES,DI+0x02,0xC000);
26858                                           ! Debug: list unsigned int = const $C000 (used reg = )
26859 6D8A           B8                   C000  mov	ax,#$C000
26860 6D8D           50                         push	ax
26861                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26862 6D8E           8B46         08            mov	ax,8[bp]
26863                                           ! Debug: list unsigned int = ax+2 (used reg = )
26864 6D91           40                         inc	ax
26865 6D92           40                         inc	ax
26866 6D93           50                         push	ax
26867                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26868 6D94           FF76         06            push	6[bp]
26869                                           ! Debug: func () void = write_word+0 (used reg = )
26870 6D97           E8         0E52            call	_write_word
26871 6D9A           89EC                       mov	sp,bp
26872                                           !BCC_EOS
26873                                           ! 3855  memcpyb(ES,DI+0x04,0x40,0x49,30);
26874                                           ! Debug: list int = const $1E (used reg = )
26875 6D9C           B8                   001E  mov	ax,*$1E
26876 6D9F           50                         push	ax
26877                                           ! Debug: list int = const $49 (used reg = )
26878 6DA0           B8                   0049  mov	ax,*$49
26879 6DA3           50                         push	ax
26880                                           ! Debug: list int = const $40 (used reg = )
26881 6DA4           B8                   0040  mov	ax,*$40
26882 6DA7           50                         push	ax
26883                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26884 6DA8           8B46         08            mov	ax,8[bp]
26885                                           ! Debug: list unsigned int = ax+4 (used reg = )
26886 6DAB           05                   0004  add	ax,*4
26887 6DAE           50                         push	ax
26888                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26889 6DAF           FF76         06            push	6[bp]
26890                                           ! Debug: func () void = memcpyb+0 (used reg = )
26891 6DB2           E8         0D99            call	_memcpyb
26892 6DB5           89EC                       mov	sp,bp
26893                                           !BCC_EOS
26894                                           ! 3856  memcpyb(ES,DI+0x22,0x40,0x84,3);
26895                                           ! Debug: list int = const 3 (used reg = )
26896 6DB7           B8                   0003  mov	ax,*3
26897 6DBA           50                         push	ax
26898                                           ! Debug: list int = const $84 (used reg = )
26899 6DBB           B8                   0084  mov	ax,#$84
26900 6DBE           50                         push	ax
26901                                           ! Debug: list int = const $40 (used reg = )
26902 6DBF           B8                   0040  mov	ax,*$40
26903 6DC2           50                         push	ax
26904                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26905 6DC3           8B46         08            mov	ax,8[bp]
26906                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26907 6DC6           05                   0022  add	ax,*$22
26908 6DC9           50                         push	ax
26909                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26910 6DCA           FF76         06            push	6[bp]
26911                                           ! Debug: func () void = memcpyb+0 (used reg = )
26912 6DCD           E8         0D7E            call	_memcpyb
26913 6DD0           89EC                       mov	sp,bp
26914                                           !BCC_EOS
26915                                           ! 3857  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26916                                           ! Debug: list int = const $8A (used reg = )
26917 6DD2           B8                   008A  mov	ax,#$8A
26918 6DD5           50                         push	ax
26919                                           ! Debug: list int = const $40 (used reg = )
26920 6DD6           B8                   0040  mov	ax,*$40
26921 6DD9           50                         push	ax
26922                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26923 6DDA           E8         0DD1            call	_read_byte
26924 6DDD           89EC                       mov	sp,bp
26925                                           ! Debug: list unsigned char = al+0 (used reg = )
26926 6DDF           30E4                       xor	ah,ah
26927 6DE1           50                         push	ax
26928                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26929 6DE2           8B46         08            mov	ax,8[bp]
26930                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26931 6DE5           05                   0025  add	ax,*$25
26932 6DE8           50                         push	ax
26933                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26934 6DE9           FF76         06            push	6[bp]
26935                                           ! Debug: func () void = write_byte+0 (used reg = )
26936 6DEC           E8         0DE5            call	_write_byte
26937 6DEF           89EC                       mov	sp,bp
26938                                           !BCC_EOS
26939                                           ! 3858  write_byte(ES,DI+0x26,0);
26940                                           ! Debug: list int = const 0 (used reg = )
26941 6DF1           31C0                       xor	ax,ax
26942 6DF3           50                         push	ax
26943                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26944 6DF4           8B46         08            mov	ax,8[bp]
26945                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26946 6DF7           05                   0026  add	ax,*$26
26947 6DFA           50                         push	ax
26948                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26949 6DFB           FF76         06            push	6[bp]
26950                                           ! Debug: func () void = write_byte+0 (used reg = )
26951 6DFE           E8         0DD3            call	_write_byte
26952 6E01           89EC                       mov	sp,bp
26953                                           !BCC_EOS
26954                                           ! 3859  write_byte(ES,DI+0x27,16);
26955                                           ! Debug: list int = const $10 (used reg = )
26956 6E03           B8                   0010  mov	ax,*$10
26957 6E06           50                         push	ax
26958                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26959 6E07           8B46         08            mov	ax,8[bp]
26960                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26961 6E0A           05                   0027  add	ax,*$27
26962 6E0D           50                         push	ax
26963                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26964 6E0E           FF76         06            push	6[bp]
26965                                           ! Debug: func () void = write_byte+0 (used reg = )
26966 6E11           E8         0DC0            call	_write_byte
26967 6E14           89EC                       mov	sp,bp
26968                                           !BCC_EOS
26969                                           ! 3860  write_byte(ES,DI+0x28,0);
26970                                           ! Debug: list int = const 0 (used reg = )
26971 6E16           31C0                       xor	ax,ax
26972 6E18           50                         push	ax
26973                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26974 6E19           8B46         08            mov	ax,8[bp]
26975                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26976 6E1C           05                   0028  add	ax,*$28
26977 6E1F           50                         push	ax
26978                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26979 6E20           FF76         06            push	6[bp]
26980                                           ! Debug: func () void = write_byte+0 (used reg = )
26981 6E23           E8         0DAE            call	_write_byte
26982 6E26           89EC                       mov	sp,bp
26983                                           !BCC_EOS
26984                                           ! 3861  write_byte(ES,DI+0x29,8);
26985                                           ! Debug: list int = const 8 (used reg = )
26986 6E28           B8                   0008  mov	ax,*8
26987 6E2B           50                         push	ax
26988                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26989 6E2C           8B46         08            mov	ax,8[bp]
26990                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26991 6E2F           05                   0029  add	ax,*$29
26992 6E32           50                         push	ax
26993                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26994 6E33           FF76         06            push	6[bp]
26995                                           ! Debug: func () void = write_byte+0 (used reg = )
26996 6E36           E8         0D9B            call	_write_byte
26997 6E39           89EC                       mov	sp,bp
26998                                           !BCC_EOS
26999                                           ! 3862  write_byte(ES,DI+0x2a,2);
27000                                           ! Debug: list int = const 2 (used reg = )
27001 6E3B           B8                   0002  mov	ax,*2
27002 6E3E           50                         push	ax
27003                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27004 6E3F           8B46         08            mov	ax,8[bp]
27005                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27006 6E42           05                   002A  add	ax,*$2A
27007 6E45           50                         push	ax
27008                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27009 6E46           FF76         06            push	6[bp]
27010                                           ! Debug: func () void = write_byte+0 (used reg = )
27011 6E49           E8         0D88            call	_write_byte
27012 6E4C           89EC                       mov	sp,bp
27013                                           !BCC_EOS
27014                                           ! 3863  write_byte(ES,DI+0x2b,0);
27015                                           ! Debug: list int = const 0 (used reg = )
27016 6E4E           31C0                       xor	ax,ax
27017 6E50           50                         push	ax
27018                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27019 6E51           8B46         08            mov	ax,8[bp]
27020                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27021 6E54           05                   002B  add	ax,*$2B
27022 6E57           50                         push	ax
27023                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27024 6E58           FF76         06            push	6[bp]
27025                                           ! Debug: func () void = write_byte+0 (used reg = )
27026 6E5B           E8         0D76            call	_write_byte
27027 6E5E           89EC                       mov	sp,bp
27028                                           !BCC_EOS
27029                                           ! 3864  write_byte(ES,DI+0x2c,0);
27030                                           ! Debug: list int = const 0 (used reg = )
27031 6E60           31C0                       xor	ax,ax
27032 6E62           50                         push	ax
27033                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27034 6E63           8B46         08            mov	ax,8[bp]
27035                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27036 6E66           05                   002C  add	ax,*$2C
27037 6E69           50                         push	ax
27038                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27039 6E6A           FF76         06            push	6[bp]
27040                                           ! Debug: func () void = write_byte+0 (used reg = )
27041 6E6D           E8         0D64            call	_write_byte
27042 6E70           89EC                       mov	sp,bp
27043                                           !BCC_EOS
27044                                           ! 3865  write_byte(ES,DI+0x31,3);
27045                                           ! Debug: list int = const 3 (used reg = )
27046 6E72           B8                   0003  mov	ax,*3
27047 6E75           50                         push	ax
27048                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27049 6E76           8B46         08            mov	ax,8[bp]
27050                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27051 6E79           05                   0031  add	ax,*$31
27052 6E7C           50                         push	ax
27053                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27054 6E7D           FF76         06            push	6[bp]
27055                                           ! Debug: func () void = write_byte+0 (used reg = )
27056 6E80           E8         0D51            call	_write_byte
27057 6E83           89EC                       mov	sp,bp
27058                                           !BCC_EOS
27059                                           ! 3866  write_byte(ES,DI+0x32,0);
27060                                           ! Debug: list int = const 0 (used reg = )
27061 6E85           31C0                       xor	ax,ax
27062 6E87           50                         push	ax
27063                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27064 6E88           8B46         08            mov	ax,8[bp]
27065                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27066 6E8B           05                   0032  add	ax,*$32
27067 6E8E           50                         push	ax
27068                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27069 6E8F           FF76         06            push	6[bp]
27070                                           ! Debug: func () void = write_byte+0 (used reg = )
27071 6E92           E8         0D3F            call	_write_byte
27072 6E95           89EC                       mov	sp,bp
27073                                           !BCC_EOS
27074                                           ! 3867  memsetb(ES,DI+0x33,0,13);
27075                                           ! Debug: list int = const $D (used reg = )
27076 6E97           B8                   000D  mov	ax,*$D
27077 6E9A           50                         push	ax
27078                                           ! Debug: list int = const 0 (used reg = )
27079 6E9B           31C0                       xor	ax,ax
27080 6E9D           50                         push	ax
27081                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27082 6E9E           8B46         08            mov	ax,8[bp]
27083                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27084 6EA1           05                   0033  add	ax,*$33
27085 6EA4           50                         push	ax
27086                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27087 6EA5           FF76         06            push	6[bp]
27088                                           ! Debug: func () void = memsetb+0 (used reg = )
27089 6EA8           E8         0C59            call	_memsetb
27090 6EAB           89EC                       mov	sp,bp
27091                                           !BCC_EOS
27092                                           ! 3868 }
27093 6EAD           5D                         pop	bp
27094 6EAE           C3                         ret
27095                                           ! 3869 static Bit16u biosfn_read_video_state_size2 (CX)
27096                                           ! Register BX used in function biosfn_read_state_info
27097                                           ! 3870      Bit16u CX;
27098                       00006EAF            _biosfn_read_video_state_size2:
27099                                           !BCC_EOS
27100                                           ! 3871 {
27101                                           ! 3872     Bit16u size;
27102                                           !BCC_EOS
27103                                           ! 3873     size = 0;
27104 6EAF           55                         push	bp
27105 6EB0           89E5                       mov	bp,sp
27106 6EB2           4C                         dec	sp
27107 6EB3           4C                         dec	sp
27108                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27109 6EB4           31C0                       xor	ax,ax
27110 6EB6           8946         FE            mov	-2[bp],ax
27111                                           !BCC_EOS
27112                                           ! 3874     if (CX & 1) {
27113                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27114 6EB9           8A46         04            mov	al,4[bp]
27115 6EBC           24                     01  and	al,*1
27116 6EBE           84C0                       test	al,al
27117 6EC0           74           09            je  	.245
27118                       00006EC2            .246:
27119                                           ! 3875         size += 0x46;
27120                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27121 6EC2           8B46         FE            mov	ax,-2[bp]
27122 6EC5           05                   0046  add	ax,*$46
27123 6EC8           8946         FE            mov	-2[bp],ax
27124                                           !BCC_EOS
27125                                           ! 3876     }
27126                                           ! 3877     if (CX & 2) {
27127                       00006ECB            .245:
27128                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27129 6ECB           8A46         04            mov	al,4[bp]
27130 6ECE           24                     02  and	al,*2
27131 6ED0           84C0                       test	al,al
27132 6ED2           74           09            je  	.247
27133                       00006ED4            .248:
27134                                           ! 3878         size += (5 + 8 + 5) * 2 + 6;
27135                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27136 6ED4           8B46         FE            mov	ax,-2[bp]
27137 6ED7           05                   002A  add	ax,*$2A
27138 6EDA           8946         FE            mov	-2[bp],ax
27139                                           !BCC_EOS
27140                                           ! 3879     }
27141                                           ! 3880     if (CX & 4) {
27142                       00006EDD            .247:
27143                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27144 6EDD           8A46         04            mov	al,4[bp]
27145 6EE0           24                     04  and	al,*4
27146 6EE2           84C0                       test	al,al
27147 6EE4           74           09            je  	.249
27148                       00006EE6            .24A:
27149                                           ! 3881         size += 3 + 256 * 3 + 1;
27150                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27151 6EE6           8B46         FE            mov	ax,-2[bp]
27152 6EE9           05                   0304  add	ax,#$304
27153 6EEC           8946         FE            mov	-2[bp],ax
27154                                           !BCC_EOS
27155                                           ! 3882 }
27156                                           ! 3883     return size;
27157                       00006EEF            .249:
27158 6EEF           8B46         FE            mov	ax,-2[bp]
27159 6EF2           89EC                       mov	sp,bp
27160 6EF4           5D                         pop	bp
27161 6EF5           C3                         ret
27162                                           !BCC_EOS
27163                                           ! 3884 }
27164                                           ! 3885 static void biosfn_read_video_state_size (CX, BX)
27165                                           ! 3886      Bit16u CX; Bit16u *BX;
27166                       00006EF6            _biosfn_read_video_state_size:
27167                                           !BCC_EOS
27168                                           !BCC_EOS
27169                                           ! 3887 {
27170                                           ! 3888     Bit16u ss=get_SS();
27171 6EF6           55                         push	bp
27172 6EF7           89E5                       mov	bp,sp
27173 6EF9           4C                         dec	sp
27174 6EFA           4C                         dec	sp
27175                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27176 6EFB           E8         0D3C            call	_get_SS
27177                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27178 6EFE           8946         FE            mov	-2[bp],ax
27179                                           !BCC_EOS
27180                                           ! 3889     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27181                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27182 6F01           FF76         04            push	4[bp]
27183                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27184 6F04           E8         FFA8            call	_biosfn_read_video_state_size2
27185 6F07           44                         inc	sp
27186 6F08           44                         inc	sp
27187                                           ! Debug: list unsigned short = ax+0 (used reg = )
27188 6F09           50                         push	ax
27189                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27190 6F0A           FF76         06            push	6[bp]
27191                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27192 6F0D           FF76         FE            push	-2[bp]
27193                                           ! Debug: func () void = write_word+0 (used reg = )
27194 6F10           E8         0CD9            call	_write_word
27195 6F13           83C4                   06  add	sp,*6
27196                                           !BCC_EOS
27197                                           ! 3890 }
27198 6F16           89EC                       mov	sp,bp
27199 6F18           5D                         pop	bp
27200 6F19           C3                         ret
27201                                           ! 3891 static Bit16u biosfn_save_video_state (CX,ES,BX)
27202                                           ! 3892      Bit16u CX;Bit16u ES;Bit16u BX;
27203                       00006F1A            _biosfn_save_video_state:
27204                                           !BCC_EOS
27205                                           !BCC_EOS
27206                                           !BCC_EOS
27207                                           ! 3893 {
27208                                           ! 3894     Bit16u i, v, crtc_addr, ar_index;
27209                                           !BCC_EOS
27210                                           ! 3895     crtc_addr = read_word(0x40, 0x63);
27211 6F1A           55                         push	bp
27212 6F1B           89E5                       mov	bp,sp
27213 6F1D           83C4                   F8  add	sp,*-8
27214                                           ! Debug: list int = const $63 (used reg = )
27215 6F20           B8                   0063  mov	ax,*$63
27216 6F23           50                         push	ax
27217                                           ! Debug: list int = const $40 (used reg = )
27218 6F24           B8                   0040  mov	ax,*$40
27219 6F27           50                         push	ax
27220                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27221 6F28           E8         0C96            call	_read_word
27222 6F2B           83C4                   04  add	sp,*4
27223                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27224 6F2E           8946         FA            mov	-6[bp],ax
27225                                           !BCC_EOS
27226                                           ! 3896     if (CX & 1) {
27227                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27228 6F31           8A46         04            mov	al,4[bp]
27229 6F34           24                     01  and	al,*1
27230 6F36           84C0                       test	al,al
27231 6F38         0F84         0266            beq 	.24B
27232                       00006F3C            .24C:
27233                                           ! 3897         write_byte(ES, BX, inb(0x3c4)); BX++;
27234                                           ! Debug: list int = const $3C4 (used reg = )
27235 6F3C           B8                   03C4  mov	ax,#$3C4
27236 6F3F           50                         push	ax
27237                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27238 6F40           E8         0CC1            call	_inb
27239 6F43           44                         inc	sp
27240 6F44           44                         inc	sp
27241                                           ! Debug: list unsigned char = al+0 (used reg = )
27242 6F45           30E4                       xor	ah,ah
27243 6F47           50                         push	ax
27244                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27245 6F48           FF76         08            push	8[bp]
27246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27247 6F4B           FF76         06            push	6[bp]
27248                                           ! Debug: func () void = write_byte+0 (used reg = )
27249 6F4E           E8         0C83            call	_write_byte
27250 6F51           83C4                   06  add	sp,*6
27251                                           !BCC_EOS
27252                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27253 6F54           8B46         08            mov	ax,8[bp]
27254 6F57           40                         inc	ax
27255 6F58           8946         08            mov	8[bp],ax
27256                                           !BCC_EOS
27257                                           ! 3898         write_byte(ES, BX, inb(crtc_addr)); BX++;
27258                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27259 6F5B           FF76         FA            push	-6[bp]
27260                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27261 6F5E           E8         0CA3            call	_inb
27262 6F61           44                         inc	sp
27263 6F62           44                         inc	sp
27264                                           ! Debug: list unsigned char = al+0 (used reg = )
27265 6F63           30E4                       xor	ah,ah
27266 6F65           50                         push	ax
27267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27268 6F66           FF76         08            push	8[bp]
27269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27270 6F69           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 6F6C           E8         0C65            call	_write_byte
27273 6F6F           83C4                   06  add	sp,*6
27274                                           !BCC_EOS
27275                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27276 6F72           8B46         08            mov	ax,8[bp]
27277 6F75           40                         inc	ax
27278 6F76           8946         08            mov	8[bp],ax
27279                                           !BCC_EOS
27280                                           ! 3899         write_byte(ES, BX, inb(0x3ce)); BX++;
27281                                           ! Debug: list int = const $3CE (used reg = )
27282 6F79           B8                   03CE  mov	ax,#$3CE
27283 6F7C           50                         push	ax
27284                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27285 6F7D           E8         0C84            call	_inb
27286 6F80           44                         inc	sp
27287 6F81           44                         inc	sp
27288                                           ! Debug: list unsigned char = al+0 (used reg = )
27289 6F82           30E4                       xor	ah,ah
27290 6F84           50                         push	ax
27291                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27292 6F85           FF76         08            push	8[bp]
27293                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27294 6F88           FF76         06            push	6[bp]
27295                                           ! Debug: func () void = write_byte+0 (used reg = )
27296 6F8B           E8         0C46            call	_write_byte
27297 6F8E           83C4                   06  add	sp,*6
27298                                           !BCC_EOS
27299                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27300 6F91           8B46         08            mov	ax,8[bp]
27301 6F94           40                         inc	ax
27302 6F95           8946         08            mov	8[bp],ax
27303                                           !BCC_EOS
27304                                           ! 3900         inb(0x3da);
27305                                           ! Debug: list int = const $3DA (used reg = )
27306 6F98           B8                   03DA  mov	ax,#$3DA
27307 6F9B           50                         push	ax
27308                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27309 6F9C           E8         0C65            call	_inb
27310 6F9F           44                         inc	sp
27311 6FA0           44                         inc	sp
27312                                           !BCC_EOS
27313                                           ! 3901         ar_index = inb(0x3c0);
27314                                           ! Debug: list int = const $3C0 (used reg = )
27315 6FA1           B8                   03C0  mov	ax,#$3C0
27316 6FA4           50                         push	ax
27317                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27318 6FA5           E8         0C5C            call	_inb
27319 6FA8           44                         inc	sp
27320 6FA9           44                         inc	sp
27321                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27322 6FAA           30E4                       xor	ah,ah
27323 6FAC           8946         F8            mov	-8[bp],ax
27324                                           !BCC_EOS
27325                                           ! 3902         write_byte(ES, BX, ar_index); BX++;
27326                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27327 6FAF           FF76         F8            push	-8[bp]
27328                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27329 6FB2           FF76         08            push	8[bp]
27330                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27331 6FB5           FF76         06            push	6[bp]
27332                                           ! Debug: func () void = write_byte+0 (used reg = )
27333 6FB8           E8         0C19            call	_write_byte
27334 6FBB           83C4                   06  add	sp,*6
27335                                           !BCC_EOS
27336                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27337 6FBE           8B46         08            mov	ax,8[bp]
27338 6FC1           40                         inc	ax
27339 6FC2           8946         08            mov	8[bp],ax
27340                                           !BCC_EOS
27341                                           ! 3903         write_byte(ES, BX, inb(0x3ca)); BX++;
27342                                           ! Debug: list int = const $3CA (used reg = )
27343 6FC5           B8                   03CA  mov	ax,#$3CA
27344 6FC8           50                         push	ax
27345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27346 6FC9           E8         0C38            call	_inb
27347 6FCC           44                         inc	sp
27348 6FCD           44                         inc	sp
27349                                           ! Debug: list unsigned char = al+0 (used reg = )
27350 6FCE           30E4                       xor	ah,ah
27351 6FD0           50                         push	ax
27352                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27353 6FD1           FF76         08            push	8[bp]
27354                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27355 6FD4           FF76         06            push	6[bp]
27356                                           ! Debug: func () void = write_byte+0 (used reg = )
27357 6FD7           E8         0BFA            call	_write_byte
27358 6FDA           83C4                   06  add	sp,*6
27359                                           !BCC_EOS
27360                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27361 6FDD           8B46         08            mov	ax,8[bp]
27362 6FE0           40                         inc	ax
27363 6FE1           8946         08            mov	8[bp],ax
27364                                           !BCC_EOS
27365                                           ! 3904         for(i=1;i<=4;i++){
27366                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27367 6FE4           B8                   0001  mov	ax,*1
27368 6FE7           8946         FE            mov	-2[bp],ax
27369                                           !BCC_EOS
27370                                           !BCC_EOS
27371 6FEA           EB           33            jmp .24F
27372                       00006FEC            .250:
27373                                           ! 3905             outb(0x3c4, i);
27374                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27375 6FEC           FF76         FE            push	-2[bp]
27376                                           ! Debug: list int = const $3C4 (used reg = )
27377 6FEF           B8                   03C4  mov	ax,#$3C4
27378 6FF2           50                         push	ax
27379                                           ! Debug: func () void = outb+0 (used reg = )
27380 6FF3           E8         0C24            call	_outb
27381 6FF6           83C4                   04  add	sp,*4
27382                                           !BCC_EOS
27383                                           ! 3906             write_byte(ES, BX, inb(0x3c5)); BX++;
27384                                           ! Debug: list int = const $3C5 (used reg = )
27385 6FF9           B8                   03C5  mov	ax,#$3C5
27386 6FFC           50                         push	ax
27387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27388 6FFD           E8         0C04            call	_inb
27389 7000           44                         inc	sp
27390 7001           44                         inc	sp
27391                                           ! Debug: list unsigned char = al+0 (used reg = )
27392 7002           30E4                       xor	ah,ah
27393 7004           50                         push	ax
27394                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27395 7005           FF76         08            push	8[bp]
27396                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27397 7008           FF76         06            push	6[bp]
27398                                           ! Debug: func () void = write_byte+0 (used reg = )
27399 700B           E8         0BC6            call	_write_byte
27400 700E           83C4                   06  add	sp,*6
27401                                           !BCC_EOS
27402                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27403 7011           8B46         08            mov	ax,8[bp]
27404 7014           40                         inc	ax
27405 7015           8946         08            mov	8[bp],ax
27406                                           !BCC_EOS
27407                                           ! 3907         }
27408                                           ! 3908         outb(0x3c4, 0);
27409                       00007018            .24E:
27410                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27411 7018           8B46         FE            mov	ax,-2[bp]
27412 701B           40                         inc	ax
27413 701C           8946         FE            mov	-2[bp],ax
27414                       0000701F            .24F:
27415                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27416 701F           8B46         FE            mov	ax,-2[bp]
27417 7022           3D                   0004  cmp	ax,*4
27418 7025           76           C5            jbe	.250
27419                       00007027            .251:
27420                       00007027            .24D:
27421                                           ! Debug: list int = const 0 (used reg = )
27422 7027           31C0                       xor	ax,ax
27423 7029           50                         push	ax
27424                                           ! Debug: list int = const $3C4 (used reg = )
27425 702A           B8                   03C4  mov	ax,#$3C4
27426 702D           50                         push	ax
27427                                           ! Debug: func () void = outb+0 (used reg = )
27428 702E           E8         0BE9            call	_outb
27429 7031           83C4                   04  add	sp,*4
27430                                           !BCC_EOS
27431                                           ! 3909         write_byte(ES, BX, inb(0x3c5)); BX++;
27432                                           ! Debug: list int = const $3C5 (used reg = )
27433 7034           B8                   03C5  mov	ax,#$3C5
27434 7037           50                         push	ax
27435                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27436 7038           E8         0BC9            call	_inb
27437 703B           44                         inc	sp
27438 703C           44                         inc	sp
27439                                           ! Debug: list unsigned char = al+0 (used reg = )
27440 703D           30E4                       xor	ah,ah
27441 703F           50                         push	ax
27442                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27443 7040           FF76         08            push	8[bp]
27444                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27445 7043           FF76         06            push	6[bp]
27446                                           ! Debug: func () void = write_byte+0 (used reg = )
27447 7046           E8         0B8B            call	_write_byte
27448 7049           83C4                   06  add	sp,*6
27449                                           !BCC_EOS
27450                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27451 704C           8B46         08            mov	ax,8[bp]
27452 704F           40                         inc	ax
27453 7050           8946         08            mov	8[bp],ax
27454                                           !BCC_EOS
27455                                           ! 3910         for(i=0;i<=0x18;i++) {
27456                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27457 7053           31C0                       xor	ax,ax
27458 7055           8946         FE            mov	-2[bp],ax
27459                                           !BCC_EOS
27460                                           !BCC_EOS
27461 7058           EB           33            jmp .254
27462                       0000705A            .255:
27463                                           ! 3911           
27464                                           ! 3911   outb(crtc_addr,i);
27465                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27466 705A           FF76         FE            push	-2[bp]
27467                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27468 705D           FF76         FA            push	-6[bp]
27469                                           ! Debug: func () void = outb+0 (used reg = )
27470 7060           E8         0BB7            call	_outb
27471 7063           83C4                   04  add	sp,*4
27472                                           !BCC_EOS
27473                                           ! 3912             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27474                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27475 7066           8B46         FA            mov	ax,-6[bp]
27476                                           ! Debug: list unsigned int = ax+1 (used reg = )
27477 7069           40                         inc	ax
27478 706A           50                         push	ax
27479                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27480 706B           E8         0B96            call	_inb
27481 706E           44                         inc	sp
27482 706F           44                         inc	sp
27483                                           ! Debug: list unsigned char = al+0 (used reg = )
27484 7070           30E4                       xor	ah,ah
27485 7072           50                         push	ax
27486                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27487 7073           FF76         08            push	8[bp]
27488                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27489 7076           FF76         06            push	6[bp]
27490                                           ! Debug: func () void = write_byte+0 (used reg = )
27491 7079           E8         0B58            call	_write_byte
27492 707C           83C4                   06  add	sp,*6
27493                                           !BCC_EOS
27494                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27495 707F           8B46         08            mov	ax,8[bp]
27496 7082           40                         inc	ax
27497 7083           8946         08            mov	8[bp],ax
27498                                           !BCC_EOS
27499                                           ! 3913         }
27500                                           ! 3914         for(i=0;i<=0x13;i++) {
27501                       00007086            .253:
27502                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27503 7086           8B46         FE            mov	ax,-2[bp]
27504 7089           40                         inc	ax
27505 708A           8946         FE            mov	-2[bp],ax
27506                       0000708D            .254:
27507                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27508 708D           8B46         FE            mov	ax,-2[bp]
27509 7090           3D                   0018  cmp	ax,*$18
27510 7093           76           C5            jbe	.255
27511                       00007095            .256:
27512                       00007095            .252:
27513                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27514 7095           31C0                       xor	ax,ax
27515 7097           8946         FE            mov	-2[bp],ax
27516                                           !BCC_EOS
27517                                           !BCC_EOS
27518 709A           EB           44            jmp .259
27519                       0000709C            .25A:
27520                                           ! 3915             inb(0x3da);
27521                                           ! Debug: list int = const $3DA (used reg = )
27522 709C           B8                   03DA  mov	ax,#$3DA
27523 709F           50                         push	ax
27524                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27525 70A0           E8         0B61            call	_inb
27526 70A3           44                         inc	sp
27527 70A4           44                         inc	sp
27528                                           !BCC_EOS
27529                                           ! 3916             outb(0x3c0, i | (ar_index & 0x20));
27530                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27531 70A5           8A46         F8            mov	al,-8[bp]
27532 70A8           24                     20  and	al,*$20
27533                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27534                                           ! Debug: expression subtree swapping
27535 70AA           30E4                       xor	ah,ah
27536 70AC           0B46         FE            or	ax,-2[bp]
27537                                           ! Debug: list unsigned int = ax+0 (used reg = )
27538 70AF           50                         push	ax
27539                                           ! Debug: list int = const $3C0 (used reg = )
27540 70B0           B8                   03C0  mov	ax,#$3C0
27541 70B3           50                         push	ax
27542                                           ! Debug: func () void = outb+0 (used reg = )
27543 70B4           E8         0B63            call	_outb
27544 70B7           83C4                   04  add	sp,*4
27545                                           !BCC_EOS
27546                                           ! 3917             write_byte(ES, BX, inb(0x3c1)); BX++;
27547                                           ! Debug: list int = const $3C1 (used reg = )
27548 70BA           B8                   03C1  mov	ax,#$3C1
27549 70BD           50                         push	ax
27550                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27551 70BE           E8         0B43            call	_inb
27552 70C1           44                         inc	sp
27553 70C2           44                         inc	sp
27554                                           ! Debug: list unsigned char = al+0 (used reg = )
27555 70C3           30E4                       xor	ah,ah
27556 70C5           50                         push	ax
27557                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27558 70C6           FF76         08            push	8[bp]
27559                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27560 70C9           FF76         06            push	6[bp]
27561                                           ! Debug: func () void = write_byte+0 (used reg = )
27562 70CC           E8         0B05            call	_write_byte
27563 70CF           83C4                   06  add	sp,*6
27564                                           !BCC_EOS
27565                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27566 70D2           8B46         08            mov	ax,8[bp]
27567 70D5           40                         inc	ax
27568 70D6           8946         08            mov	8[bp],ax
27569                                           !BCC_EOS
27570                                           ! 3918         }
27571                                           ! 3919         inb(0x3da);
27572                       000070D9            .258:
27573                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27574 70D9           8B46         FE            mov	ax,-2[bp]
27575 70DC           40                         inc	ax
27576 70DD           8946         FE            mov	-2[bp],ax
27577                       000070E0            .259:
27578                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27579 70E0           8B46         FE            mov	ax,-2[bp]
27580 70E3           3D                   0013  cmp	ax,*$13
27581 70E6           76           B4            jbe	.25A
27582                       000070E8            .25B:
27583                       000070E8            .257:
27584                                           ! Debug: list int = const $3DA (used reg = )
27585 70E8           B8                   03DA  mov	ax,#$3DA
27586 70EB           50                         push	ax
27587                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27588 70EC           E8         0B15            call	_inb
27589 70EF           44                         inc	sp
27590 70F0           44                         inc	sp
27591                                           !BCC_EOS
27592                                           ! 3920         for(i=0;i<=8;i++) {
27593                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27594 70F1           31C0                       xor	ax,ax
27595 70F3           8946         FE            mov	-2[bp],ax
27596                                           !BCC_EOS
27597                                           !BCC_EOS
27598 70F6           EB           33            jmp .25E
27599                       000070F8            .25F:
27600                                           ! 3921             outb(0x3ce,i);
27601                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27602 70F8           FF76         FE            push	-2[bp]
27603                                           ! Debug: list int = const $3CE (used reg = )
27604 70FB           B8                   03CE  mov	ax,#$3CE
27605 70FE           50                         push	ax
27606                                           ! Debug: func () void = outb+0 (used reg = )
27607 70FF           E8         0B18            call	_outb
27608 7102           83C4                   04  add	sp,*4
27609                                           !BCC_EOS
27610                                           ! 3922             write_byte(ES, BX, inb(0x3cf)); BX++;
27611                                           ! Debug: list int = const $3CF (used reg = )
27612 7105           B8                   03CF  mov	ax,#$3CF
27613 7108           50                         push	ax
27614                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27615 7109           E8         0AF8            call	_inb
27616 710C           44                         inc	sp
27617 710D           44                         inc	sp
27618                                           ! Debug: list unsigned char = al+0 (used reg = )
27619 710E           30E4                       xor	ah,ah
27620 7110           50                         push	ax
27621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27622 7111           FF76         08            push	8[bp]
27623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27624 7114           FF76         06            push	6[bp]
27625                                           ! Debug: func () void = write_byte+0 (used reg = )
27626 7117           E8         0ABA            call	_write_byte
27627 711A           83C4                   06  add	sp,*6
27628                                           !BCC_EOS
27629                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27630 711D           8B46         08            mov	ax,8[bp]
27631 7120           40                         inc	ax
27632 7121           8946         08            mov	8[bp],ax
27633                                           !BCC_EOS
27634                                           ! 3923         }
27635                                           ! 3924         write_word(ES, BX, crtc_addr); BX+= 2;
27636                       00007124            .25D:
27637                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27638 7124           8B46         FE            mov	ax,-2[bp]
27639 7127           40                         inc	ax
27640 7128           8946         FE            mov	-2[bp],ax
27641                       0000712B            .25E:
27642                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27643 712B           8B46         FE            mov	ax,-2[bp]
27644 712E           3D                   0008  cmp	ax,*8
27645 7131           76           C5            jbe	.25F
27646                       00007133            .260:
27647                       00007133            .25C:
27648                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27649 7133           FF76         FA            push	-6[bp]
27650                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27651 7136           FF76         08            push	8[bp]
27652                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27653 7139           FF76         06            push	6[bp]
27654                                           ! Debug: func () void = write_word+0 (used reg = )
27655 713C           E8         0AAD            call	_write_word
27656 713F           83C4                   06  add	sp,*6
27657                                           !BCC_EOS
27658                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27659 7142           8B46         08            mov	ax,8[bp]
27660 7145           40                         inc	ax
27661 7146           40                         inc	ax
27662 7147           8946         08            mov	8[bp],ax
27663                                           !BCC_EOS
27664                                           ! 3925         write_byte(ES, BX, 0); BX++;
27665                                           ! Debug: list int = const 0 (used reg = )
27666 714A           31C0                       xor	ax,ax
27667 714C           50                         push	ax
27668                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27669 714D           FF76         08            push	8[bp]
27670                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27671 7150           FF76         06            push	6[bp]
27672                                           ! Debug: func () void = write_byte+0 (used reg = )
27673 7153           E8         0A7E            call	_write_byte
27674 7156           83C4                   06  add	sp,*6
27675                                           !BCC_EOS
27676                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27677 7159           8B46         08            mov	ax,8[bp]
27678 715C           40                         inc	ax
27679 715D           8946         08            mov	8[bp],ax
27680                                           !BCC_EOS
27681                                           ! 3926         write_byte(ES, BX, 0); BX++;
27682                                           ! Debug: list int = const 0 (used reg = )
27683 7160           31C0                       xor	ax,ax
27684 7162           50                         push	ax
27685                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27686 7163           FF76         08            push	8[bp]
27687                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27688 7166           FF76         06            push	6[bp]
27689                                           ! Debug: func () void = write_byte+0 (used reg = )
27690 7169           E8         0A68            call	_write_byte
27691 716C           83C4                   06  add	sp,*6
27692                                           !BCC_EOS
27693                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27694 716F           8B46         08            mov	ax,8[bp]
27695 7172           40                         inc	ax
27696 7173           8946         08            mov	8[bp],ax
27697                                           !BCC_EOS
27698                                           ! 3927         write_byte(ES, BX, 0); BX++;
27699                                           ! Debug: list int = const 0 (used reg = )
27700 7176           31C0                       xor	ax,ax
27701 7178           50                         push	ax
27702                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27703 7179           FF76         08            push	8[bp]
27704                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27705 717C           FF76         06            push	6[bp]
27706                                           ! Debug: func () void = write_byte+0 (used reg = )
27707 717F           E8         0A52            call	_write_byte
27708 7182           83C4                   06  add	sp,*6
27709                                           !BCC_EOS
27710                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27711 7185           8B46         08            mov	ax,8[bp]
27712 7188           40                         inc	ax
27713 7189           8946         08            mov	8[bp],ax
27714                                           !BCC_EOS
27715                                           ! 3928         write_byte(ES, BX, 0); BX++;
27716                                           ! Debug: list int = const 0 (used reg = )
27717 718C           31C0                       xor	ax,ax
27718 718E           50                         push	ax
27719                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27720 718F           FF76         08            push	8[bp]
27721                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27722 7192           FF76         06            push	6[bp]
27723                                           ! Debug: func () void = write_byte+0 (used reg = )
27724 7195           E8         0A3C            call	_write_byte
27725 7198           83C4                   06  add	sp,*6
27726                                           !BCC_EOS
27727                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27728 719B           8B46         08            mov	ax,8[bp]
27729 719E           40                         inc	ax
27730 719F           8946         08            mov	8[bp],ax
27731                                           !BCC_EOS
27732                                           ! 3929     }
27733                                           ! 3930     if (CX & 2) {
27734                       000071A2            .24B:
27735                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27736 71A2           8A46         04            mov	al,4[bp]
27737 71A5           24                     02  and	al,*2
27738 71A7           84C0                       test	al,al
27739 71A9         0F84         0270            beq 	.261
27740                       000071AD            .262:
27741                                           ! 3931         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27742                                           ! Debug: list int = const $49 (used reg = )
27743 71AD           B8                   0049  mov	ax,*$49
27744 71B0           50                         push	ax
27745                                           ! Debug: list int = const $40 (used reg = )
27746 71B1           B8                   0040  mov	ax,*$40
27747 71B4           50                         push	ax
27748                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27749 71B5           E8         09F6            call	_read_byte
27750 71B8           83C4                   04  add	sp,*4
27751                                           ! Debug: list unsigned char = al+0 (used reg = )
27752 71BB           30E4                       xor	ah,ah
27753 71BD           50                         push	ax
27754                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27755 71BE           FF76         08            push	8[bp]
27756                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27757 71C1           FF76         06            push	6[bp]
27758                                           ! Debug: func () void = write_byte+0 (used reg = )
27759 71C4           E8         0A0D            call	_write_byte
27760 71C7           83C4                   06  add	sp,*6
27761                                           !BCC_EOS
27762                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27763 71CA           8B46         08            mov	ax,8[bp]
27764 71CD           40                         inc	ax
27765 71CE           8946         08            mov	8[bp],ax
27766                                           !BCC_EOS
27767                                           ! 3932         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27768                                           ! Debug: list int = const $4A (used reg = )
27769 71D1           B8                   004A  mov	ax,*$4A
27770 71D4           50                         push	ax
27771                                           ! Debug: list int = const $40 (used reg = )
27772 71D5           B8                   0040  mov	ax,*$40
27773 71D8           50                         push	ax
27774                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27775 71D9           E8         09E5            call	_read_word
27776 71DC           83C4                   04  add	sp,*4
27777                                           ! Debug: list unsigned short = ax+0 (used reg = )
27778 71DF           50                         push	ax
27779                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27780 71E0           FF76         08            push	8[bp]
27781                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27782 71E3           FF76         06            push	6[bp]
27783                                           ! Debug: func () void = write_word+0 (used reg = )
27784 71E6           E8         0A03            call	_write_word
27785 71E9           83C4                   06  add	sp,*6
27786                                           !BCC_EOS
27787                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27788 71EC           8B46         08            mov	ax,8[bp]
27789 71EF           40                         inc	ax
27790 71F0           40                         inc	ax
27791 71F1           8946         08            mov	8[bp],ax
27792                                           !BCC_EOS
27793                                           ! 3933         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27794                                           ! Debug: list int = const $4C (used reg = )
27795 71F4           B8                   004C  mov	ax,*$4C
27796 71F7           50                         push	ax
27797                                           ! Debug: list int = const $40 (used reg = )
27798 71F8           B8                   0040  mov	ax,*$40
27799 71FB           50                         push	ax
27800                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27801 71FC           E8         09C2            call	_read_word
27802 71FF           83C4                   04  add	sp,*4
27803                                           ! Debug: list unsigned short = ax+0 (used reg = )
27804 7202           50                         push	ax
27805                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27806 7203           FF76         08            push	8[bp]
27807                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27808 7206           FF76         06            push	6[bp]
27809                                           ! Debug: func () void = write_word+0 (used reg = )
27810 7209           E8         09E0            call	_write_word
27811 720C           83C4                   06  add	sp,*6
27812                                           !BCC_EOS
27813                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27814 720F           8B46         08            mov	ax,8[bp]
27815 7212           40                         inc	ax
27816 7213           40                         inc	ax
27817 7214           8946         08            mov	8[bp],ax
27818                                           !BCC_EOS
27819                                           ! 3934         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27820                                           ! Debug: list int = const $63 (used reg = )
27821 7217           B8                   0063  mov	ax,*$63
27822 721A           50                         push	ax
27823                                           ! Debug: list int = const $40 (used reg = )
27824 721B           B8                   0040  mov	ax,*$40
27825 721E           50                         push	ax
27826                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27827 721F           E8         099F            call	_read_word
27828 7222           83C4                   04  add	sp,*4
27829                                           ! Debug: list unsigned short = ax+0 (used reg = )
27830 7225           50                         push	ax
27831                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27832 7226           FF76         08            push	8[bp]
27833                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27834 7229           FF76         06            push	6[bp]
27835                                           ! Debug: func () void = write_word+0 (used reg = )
27836 722C           E8         09BD            call	_write_word
27837 722F           83C4                   06  add	sp,*6
27838                                           !BCC_EOS
27839                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27840 7232           8B46         08            mov	ax,8[bp]
27841 7235           40                         inc	ax
27842 7236           40                         inc	ax
27843 7237           8946         08            mov	8[bp],ax
27844                                           !BCC_EOS
27845                                           ! 3935         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27846                                           ! Debug: list int = const $84 (used reg = )
27847 723A           B8                   0084  mov	ax,#$84
27848 723D           50                         push	ax
27849                                           ! Debug: list int = const $40 (used reg = )
27850 723E           B8                   0040  mov	ax,*$40
27851 7241           50                         push	ax
27852                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27853 7242           E8         0969            call	_read_byte
27854 7245           83C4                   04  add	sp,*4
27855                                           ! Debug: list unsigned char = al+0 (used reg = )
27856 7248           30E4                       xor	ah,ah
27857 724A           50                         push	ax
27858                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27859 724B           FF76         08            push	8[bp]
27860                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27861 724E           FF76         06            push	6[bp]
27862                                           ! Debug: func () void = write_byte+0 (used reg = )
27863 7251           E8         0980            call	_write_byte
27864 7254           83C4                   06  add	sp,*6
27865                                           !BCC_EOS
27866                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27867 7257           8B46         08            mov	ax,8[bp]
27868 725A           40                         inc	ax
27869 725B           8946         08            mov	8[bp],ax
27870                                           !BCC_EOS
27871                                           ! 3936         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27872                                           ! Debug: list int = const $85 (used reg = )
27873 725E           B8                   0085  mov	ax,#$85
27874 7261           50                         push	ax
27875                                           ! Debug: list int = const $40 (used reg = )
27876 7262           B8                   0040  mov	ax,*$40
27877 7265           50                         push	ax
27878                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27879 7266           E8         0958            call	_read_word
27880 7269           83C4                   04  add	sp,*4
27881                                           ! Debug: list unsigned short = ax+0 (used reg = )
27882 726C           50                         push	ax
27883                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27884 726D           FF76         08            push	8[bp]
27885                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27886 7270           FF76         06            push	6[bp]
27887                                           ! Debug: func () void = write_word+0 (used reg = )
27888 7273           E8         0976            call	_write_word
27889 7276           83C4                   06  add	sp,*6
27890                                           !BCC_EOS
27891                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27892 7279           8B46         08            mov	ax,8[bp]
27893 727C           40                         inc	ax
27894 727D           40                         inc	ax
27895 727E           8946         08            mov	8[bp],ax
27896                                           !BCC_EOS
27897                                           ! 3937         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27898                                           ! Debug: list int = const $87 (used reg = )
27899 7281           B8                   0087  mov	ax,#$87
27900 7284           50                         push	ax
27901                                           ! Debug: list int = const $40 (used reg = )
27902 7285           B8                   0040  mov	ax,*$40
27903 7288           50                         push	ax
27904                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27905 7289           E8         0922            call	_read_byte
27906 728C           83C4                   04  add	sp,*4
27907                                           ! Debug: list unsigned char = al+0 (used reg = )
27908 728F           30E4                       xor	ah,ah
27909 7291           50                         push	ax
27910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27911 7292           FF76         08            push	8[bp]
27912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27913 7295           FF76         06            push	6[bp]
27914                                           ! Debug: func () void = write_byte+0 (used reg = )
27915 7298           E8         0939            call	_write_byte
27916 729B           83C4                   06  add	sp,*6
27917                                           !BCC_EOS
27918                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27919 729E           8B46         08            mov	ax,8[bp]
27920 72A1           40                         inc	ax
27921 72A2           8946         08            mov	8[bp],ax
27922                                           !BCC_EOS
27923                                           ! 3938         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27924                                           ! Debug: list int = const $88 (used reg = )
27925 72A5           B8                   0088  mov	ax,#$88
27926 72A8           50                         push	ax
27927                                           ! Debug: list int = const $40 (used reg = )
27928 72A9           B8                   0040  mov	ax,*$40
27929 72AC           50                         push	ax
27930                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27931 72AD           E8         08FE            call	_read_byte
27932 72B0           83C4                   04  add	sp,*4
27933                                           ! Debug: list unsigned char = al+0 (used reg = )
27934 72B3           30E4                       xor	ah,ah
27935 72B5           50                         push	ax
27936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27937 72B6           FF76         08            push	8[bp]
27938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27939 72B9           FF76         06            push	6[bp]
27940                                           ! Debug: func () void = write_byte+0 (used reg = )
27941 72BC           E8         0915            call	_write_byte
27942 72BF           83C4                   06  add	sp,*6
27943                                           !BCC_EOS
27944                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27945 72C2           8B46         08            mov	ax,8[bp]
27946 72C5           40                         inc	ax
27947 72C6           8946         08            mov	8[bp],ax
27948                                           !BCC_EOS
27949                                           ! 3939         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27950                                           ! Debug: list int = const $89 (used reg = )
27951 72C9           B8                   0089  mov	ax,#$89
27952 72CC           50                         push	ax
27953                                           ! Debug: list int = const $40 (used reg = )
27954 72CD           B8                   0040  mov	ax,*$40
27955 72D0           50                         push	ax
27956                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27957 72D1           E8         08DA            call	_read_byte
27958 72D4           83C4                   04  add	sp,*4
27959                                           ! Debug: list unsigned char = al+0 (used reg = )
27960 72D7           30E4                       xor	ah,ah
27961 72D9           50                         push	ax
27962                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27963 72DA           FF76         08            push	8[bp]
27964                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27965 72DD           FF76         06            push	6[bp]
27966                                           ! Debug: func () void = write_byte+0 (used reg = )
27967 72E0           E8         08F1            call	_write_byte
27968 72E3           83C4                   06  add	sp,*6
27969                                           !BCC_EOS
27970                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27971 72E6           8B46         08            mov	ax,8[bp]
27972 72E9           40                         inc	ax
27973 72EA           8946         08            mov	8[bp],ax
27974                                           !BCC_EOS
27975                                           ! 3940         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27976                                           ! Debug: list int = const $60 (used reg = )
27977 72ED           B8                   0060  mov	ax,*$60
27978 72F0           50                         push	ax
27979                                           ! Debug: list int = const $40 (used reg = )
27980 72F1           B8                   0040  mov	ax,*$40
27981 72F4           50                         push	ax
27982                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27983 72F5           E8         08C9            call	_read_word
27984 72F8           83C4                   04  add	sp,*4
27985                                           ! Debug: list unsigned short = ax+0 (used reg = )
27986 72FB           50                         push	ax
27987                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27988 72FC           FF76         08            push	8[bp]
27989                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27990 72FF           FF76         06            push	6[bp]
27991                                           ! Debug: func () void = write_word+0 (used reg = )
27992 7302           E8         08E7            call	_write_word
27993 7305           83C4                   06  add	sp,*6
27994                                           !BCC_EOS
27995                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27996 7308           8B46         08            mov	ax,8[bp]
27997 730B           40                         inc	ax
27998 730C           40                         inc	ax
27999 730D           8946         08            mov	8[bp],ax
28000                                           !BCC_EOS
28001                                           ! 3941         for(i=0;i<8;i++) {
28002                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28003 7310           31C0                       xor	ax,ax
28004 7312           8946         FE            mov	-2[bp],ax
28005                                           !BCC_EOS
28006                                           !BCC_EOS
28007 7315           EB           2F            jmp .265
28008                       00007317            .266:
28009                                           ! 3942             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28010                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28011                                           ! Debug: expression subtree swapping
28012 7317           8B46         FE            mov	ax,-2[bp]
28013 731A           D1E0                       shl	ax,*1
28014                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28015                                           ! Debug: expression subtree swapping
28016                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28017 731C           05                   0050  add	ax,*$50
28018 731F           50                         push	ax
28019                                           ! Debug: list int = const $40 (used reg = )
28020 7320           B8                   0040  mov	ax,*$40
28021 7323           50                         push	ax
28022                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28023 7324           E8         089A            call	_read_word
28024 7327           83C4                   04  add	sp,*4
28025                                           ! Debug: list unsigned short = ax+0 (used reg = )
28026 732A           50                         push	ax
28027                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28028 732B           FF76         08            push	8[bp]
28029                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28030 732E           FF76         06            push	6[bp]
28031                                           ! Debug: func () void = write_word+0 (used reg = )
28032 7331           E8         08B8            call	_write_word
28033 7334           83C4                   06  add	sp,*6
28034                                           !BCC_EOS
28035                                           ! 3943             BX += 2;
28036                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28037 7337           8B46         08            mov	ax,8[bp]
28038 733A           40                         inc	ax
28039 733B           40                         inc	ax
28040 733C           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3944         }
28043                                           ! 3945         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28044                       0000733F            .264:
28045                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28046 733F           8B46         FE            mov	ax,-2[bp]
28047 7342           40                         inc	ax
28048 7343           8946         FE            mov	-2[bp],ax
28049                       00007346            .265:
28050                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28051 7346           8B46         FE            mov	ax,-2[bp]
28052 7349           3D                   0008  cmp	ax,*8
28053 734C           72           C9            jb 	.266
28054                       0000734E            .267:
28055                       0000734E            .263:
28056                                           ! Debug: list int = const $4E (used reg = )
28057 734E           B8                   004E  mov	ax,*$4E
28058 7351           50                         push	ax
28059                                           ! Debug: list int = const $40 (used reg = )
28060 7352           B8                   0040  mov	ax,*$40
28061 7355           50                         push	ax
28062                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28063 7356           E8         0868            call	_read_word
28064 7359           83C4                   04  add	sp,*4
28065                                           ! Debug: list unsigned short = ax+0 (used reg = )
28066 735C           50                         push	ax
28067                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28068 735D           FF76         08            push	8[bp]
28069                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28070 7360           FF76         06            push	6[bp]
28071                                           ! Debug: func () void = write_word+0 (used reg = )
28072 7363           E8         0886            call	_write_word
28073 7366           83C4                   06  add	sp,*6
28074                                           !BCC_EOS
28075                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28076 7369           8B46         08            mov	ax,8[bp]
28077 736C           40                         inc	ax
28078 736D           40                         inc	ax
28079 736E           8946         08            mov	8[bp],ax
28080                                           !BCC_EOS
28081                                           ! 3946         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28082                                           ! Debug: list int = const $62 (used reg = )
28083 7371           B8                   0062  mov	ax,*$62
28084 7374           50                         push	ax
28085                                           ! Debug: list int = const $40 (used reg = )
28086 7375           B8                   0040  mov	ax,*$40
28087 7378           50                         push	ax
28088                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28089 7379           E8         0832            call	_read_byte
28090 737C           83C4                   04  add	sp,*4
28091                                           ! Debug: list unsigned char = al+0 (used reg = )
28092 737F           30E4                       xor	ah,ah
28093 7381           50                         push	ax
28094                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28095 7382           FF76         08            push	8[bp]
28096                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28097 7385           FF76         06            push	6[bp]
28098                                           ! Debug: func () void = write_byte+0 (used reg = )
28099 7388           E8         0849            call	_write_byte
28100 738B           83C4                   06  add	sp,*6
28101                                           !BCC_EOS
28102                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28103 738E           8B46         08            mov	ax,8[bp]
28104 7391           40                         inc	ax
28105 7392           8946         08            mov	8[bp],ax
28106                                           !BCC_EOS
28107                                           ! 3947         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28108                                           ! Debug: list int = const $7C (used reg = )
28109 7395           B8                   007C  mov	ax,*$7C
28110 7398           50                         push	ax
28111                                           ! Debug: list int = const 0 (used reg = )
28112 7399           31C0                       xor	ax,ax
28113 739B           50                         push	ax
28114                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28115 739C           E8         0822            call	_read_word
28116 739F           83C4                   04  add	sp,*4
28117                                           ! Debug: list unsigned short = ax+0 (used reg = )
28118 73A2           50                         push	ax
28119                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28120 73A3           FF76         08            push	8[bp]
28121                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28122 73A6           FF76         06            push	6[bp]
28123                                           ! Debug: func () void = write_word+0 (used reg = )
28124 73A9           E8         0840            call	_write_word
28125 73AC           83C4                   06  add	sp,*6
28126                                           !BCC_EOS
28127                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28128 73AF           8B46         08            mov	ax,8[bp]
28129 73B2           40                         inc	ax
28130 73B3           40                         inc	ax
28131 73B4           8946         08            mov	8[bp],ax
28132                                           !BCC_EOS
28133                                           ! 3948         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28134                                           ! Debug: list int = const $7E (used reg = )
28135 73B7           B8                   007E  mov	ax,*$7E
28136 73BA           50                         push	ax
28137                                           ! Debug: list int = const 0 (used reg = )
28138 73BB           31C0                       xor	ax,ax
28139 73BD           50                         push	ax
28140                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28141 73BE           E8         0800            call	_read_word
28142 73C1           83C4                   04  add	sp,*4
28143                                           ! Debug: list unsigned short = ax+0 (used reg = )
28144 73C4           50                         push	ax
28145                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28146 73C5           FF76         08            push	8[bp]
28147                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28148 73C8           FF76         06            push	6[bp]
28149                                           ! Debug: func () void = write_word+0 (used reg = )
28150 73CB           E8         081E            call	_write_word
28151 73CE           83C4                   06  add	sp,*6
28152                                           !BCC_EOS
28153                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28154 73D1           8B46         08            mov	ax,8[bp]
28155 73D4           40                         inc	ax
28156 73D5           40                         inc	ax
28157 73D6           8946         08            mov	8[bp],ax
28158                                           !BCC_EOS
28159                                           ! 3949         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28160                                           ! Debug: list int = const $10C (used reg = )
28161 73D9           B8                   010C  mov	ax,#$10C
28162 73DC           50                         push	ax
28163                                           ! Debug: list int = const 0 (used reg = )
28164 73DD           31C0                       xor	ax,ax
28165 73DF           50                         push	ax
28166                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28167 73E0           E8         07DE            call	_read_word
28168 73E3           83C4                   04  add	sp,*4
28169                                           ! Debug: list unsigned short = ax+0 (used reg = )
28170 73E6           50                         push	ax
28171                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28172 73E7           FF76         08            push	8[bp]
28173                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28174 73EA           FF76         06            push	6[bp]
28175                                           ! Debug: func () void = write_word+0 (used reg = )
28176 73ED           E8         07FC            call	_write_word
28177 73F0           83C4                   06  add	sp,*6
28178                                           !BCC_EOS
28179                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28180 73F3           8B46         08            mov	ax,8[bp]
28181 73F6           40                         inc	ax
28182 73F7           40                         inc	ax
28183 73F8           8946         08            mov	8[bp],ax
28184                                           !BCC_EOS
28185                                           ! 3950         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28186                                           ! Debug: list int = const $10E (used reg = )
28187 73FB           B8                   010E  mov	ax,#$10E
28188 73FE           50                         push	ax
28189                                           ! Debug: list int = const 0 (used reg = )
28190 73FF           31C0                       xor	ax,ax
28191 7401           50                         push	ax
28192                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28193 7402           E8         07BC            call	_read_word
28194 7405           83C4                   04  add	sp,*4
28195                                           ! Debug: list unsigned short = ax+0 (used reg = )
28196 7408           50                         push	ax
28197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28198 7409           FF76         08            push	8[bp]
28199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28200 740C           FF76         06            push	6[bp]
28201                                           ! Debug: func () void = write_word+0 (used reg = )
28202 740F           E8         07DA            call	_write_word
28203 7412           83C4                   06  add	sp,*6
28204                                           !BCC_EOS
28205                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28206 7415           8B46         08            mov	ax,8[bp]
28207 7418           40                         inc	ax
28208 7419           40                         inc	ax
28209 741A           8946         08            mov	8[bp],ax
28210                                           !BCC_EOS
28211                                           ! 3951     }
28212                                           ! 3952     if (CX & 4) {
28213                       0000741D            .261:
28214                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28215 741D           8A46         04            mov	al,4[bp]
28216 7420           24                     04  and	al,*4
28217 7422           84C0                       test	al,al
28218 7424         0F84         00B5            beq 	.268
28219                       00007428            .269:
28220                                           ! 3953         write_byte(ES, BX, inb(0x3c7)); BX++;
28221                                           ! Debug: list int = const $3C7 (used reg = )
28222 7428           B8                   03C7  mov	ax,#$3C7
28223 742B           50                         push	ax
28224                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28225 742C           E8         07D5            call	_inb
28226 742F           44                         inc	sp
28227 7430           44                         inc	sp
28228                                           ! Debug: list unsigned char = al+0 (used reg = )
28229 7431           30E4                       xor	ah,ah
28230 7433           50                         push	ax
28231                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28232 7434           FF76         08            push	8[bp]
28233                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28234 7437           FF76         06            push	6[bp]
28235                                           ! Debug: func () void = write_byte+0 (used reg = )
28236 743A           E8         0797            call	_write_byte
28237 743D           83C4                   06  add	sp,*6
28238                                           !BCC_EOS
28239                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28240 7440           8B46         08            mov	ax,8[bp]
28241 7443           40                         inc	ax
28242 7444           8946         08            mov	8[bp],ax
28243                                           !BCC_EOS
28244                                           ! 3954         write_byte(ES, BX, inb(0x3c8)); BX++;
28245                                           ! Debug: list int = const $3C8 (used reg = )
28246 7447           B8                   03C8  mov	ax,#$3C8
28247 744A           50                         push	ax
28248                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28249 744B           E8         07B6            call	_inb
28250 744E           44                         inc	sp
28251 744F           44                         inc	sp
28252                                           ! Debug: list unsigned char = al+0 (used reg = )
28253 7450           30E4                       xor	ah,ah
28254 7452           50                         push	ax
28255                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28256 7453           FF76         08            push	8[bp]
28257                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28258 7456           FF76         06            push	6[bp]
28259                                           ! Debug: func () void = write_byte+0 (used reg = )
28260 7459           E8         0778            call	_write_byte
28261 745C           83C4                   06  add	sp,*6
28262                                           !BCC_EOS
28263                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28264 745F           8B46         08            mov	ax,8[bp]
28265 7462           40                         inc	ax
28266 7463           8946         08            mov	8[bp],ax
28267                                           !BCC_EOS
28268                                           ! 3955         write_byte(ES, BX, inb(0x3c6)); BX++;
28269                                           ! Debug: list int = const $3C6 (used reg = )
28270 7466           B8                   03C6  mov	ax,#$3C6
28271 7469           50                         push	ax
28272                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28273 746A           E8         0797            call	_inb
28274 746D           44                         inc	sp
28275 746E           44                         inc	sp
28276                                           ! Debug: list unsigned char = al+0 (used reg = )
28277 746F           30E4                       xor	ah,ah
28278 7471           50                         push	ax
28279                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28280 7472           FF76         08            push	8[bp]
28281                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28282 7475           FF76         06            push	6[bp]
28283                                           ! Debug: func () void = write_byte+0 (used reg = )
28284 7478           E8         0759            call	_write_byte
28285 747B           83C4                   06  add	sp,*6
28286                                           !BCC_EOS
28287                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28288 747E           8B46         08            mov	ax,8[bp]
28289 7481           40                         inc	ax
28290 7482           8946         08            mov	8[bp],ax
28291                                           !BCC_EOS
28292                                           ! 3956         outb(0x3c8,0x00);
28293                                           ! Debug: list int = const 0 (used reg = )
28294 7485           31C0                       xor	ax,ax
28295 7487           50                         push	ax
28296                                           ! Debug: list int = const $3C8 (used reg = )
28297 7488           B8                   03C8  mov	ax,#$3C8
28298 748B           50                         push	ax
28299                                           ! Debug: func () void = outb+0 (used reg = )
28300 748C           E8         078B            call	_outb
28301 748F           83C4                   04  add	sp,*4
28302                                           !BCC_EOS
28303                                           ! 3957         for(i=0;i<256*3;i++) {
28304                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28305 7492           31C0                       xor	ax,ax
28306 7494           8946         FE            mov	-2[bp],ax
28307                                           !BCC_EOS
28308                                           !BCC_EOS
28309 7497           EB           26            jmp .26C
28310                       00007499            .26D:
28311                                           ! 3958             write_byte(ES, BX, inb(0x3c9)); BX++;
28312                                           ! Debug: list int = const $3C9 (used reg = )
28313 7499           B8                   03C9  mov	ax,#$3C9
28314 749C           50                         push	ax
28315                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28316 749D           E8         0764            call	_inb
28317 74A0           44                         inc	sp
28318 74A1           44                         inc	sp
28319                                           ! Debug: list unsigned char = al+0 (used reg = )
28320 74A2           30E4                       xor	ah,ah
28321 74A4           50                         push	ax
28322                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28323 74A5           FF76         08            push	8[bp]
28324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28325 74A8           FF76         06            push	6[bp]
28326                                           ! Debug: func () void = write_byte+0 (used reg = )
28327 74AB           E8         0726            call	_write_byte
28328 74AE           83C4                   06  add	sp,*6
28329                                           !BCC_EOS
28330                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28331 74B1           8B46         08            mov	ax,8[bp]
28332 74B4           40                         inc	ax
28333 74B5           8946         08            mov	8[bp],ax
28334                                           !BCC_EOS
28335                                           ! 3959         }
28336                                           ! 3960         write_byte(ES, BX, 0); BX++;
28337                       000074B8            .26B:
28338                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28339 74B8           8B46         FE            mov	ax,-2[bp]
28340 74BB           40                         inc	ax
28341 74BC           8946         FE            mov	-2[bp],ax
28342                       000074BF            .26C:
28343                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28344 74BF           8B46         FE            mov	ax,-2[bp]
28345 74C2           3D                   0300  cmp	ax,#$300
28346 74C5           72           D2            jb 	.26D
28347                       000074C7            .26E:
28348                       000074C7            .26A:
28349                                           ! Debug: list int = const 0 (used reg = )
28350 74C7           31C0                       xor	ax,ax
28351 74C9           50                         push	ax
28352                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28353 74CA           FF76         08            push	8[bp]
28354                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28355 74CD           FF76         06            push	6[bp]
28356                                           ! Debug: func () void = write_byte+0 (used reg = )
28357 74D0           E8         0701            call	_write_byte
28358 74D3           83C4                   06  add	sp,*6
28359                                           !BCC_EOS
28360                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28361 74D6           8B46         08            mov	ax,8[bp]
28362 74D9           40                         inc	ax
28363 74DA           8946         08            mov	8[bp],ax
28364                                           !BCC_EOS
28365                                           ! 3961     }
28366                                           ! 3962     return BX;
28367                       000074DD            .268:
28368 74DD           8B46         08            mov	ax,8[bp]
28369 74E0           89EC                       mov	sp,bp
28370 74E2           5D                         pop	bp
28371 74E3           C3                         ret
28372                                           !BCC_EOS
28373                                           ! 3963 }
28374                                           ! 3964 static Bit16u biosfn_restore_video_state (CX,
28375                                           ! 3964 ES,BX)
28376                                           ! 3965      Bit16u CX;Bit16u ES;Bit16u BX;
28377                       000074E4            _biosfn_restore_video_state:
28378                                           !BCC_EOS
28379                                           !BCC_EOS
28380                                           !BCC_EOS
28381                                           ! 3966 {
28382                                           ! 3967     Bit16u i, crtc_addr, v, addr1, ar_index;
28383                                           !BCC_EOS
28384                                           ! 3968     if (CX & 1) {
28385 74E4           55                         push	bp
28386 74E5           89E5                       mov	bp,sp
28387 74E7           83C4                   F6  add	sp,*-$A
28388                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28389 74EA           8A46         04            mov	al,4[bp]
28390 74ED           24                     01  and	al,*1
28391 74EF           84C0                       test	al,al
28392 74F1         0F84         02AA            beq 	.26F
28393                       000074F5            .270:
28394                                           ! 3969         inb(0x3da);
28395                                           ! Debug: list int = const $3DA (used reg = )
28396 74F5           B8                   03DA  mov	ax,#$3DA
28397 74F8           50                         push	ax
28398                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28399 74F9           E8         0708            call	_inb
28400 74FC           44                         inc	sp
28401 74FD           44                         inc	sp
28402                                           !BCC_EOS
28403                                           ! 3970         crtc_addr = read_word(ES, BX + 0x40);
28404                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28405 74FE           8B46         08            mov	ax,8[bp]
28406                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28407 7501           05                   0040  add	ax,*$40
28408 7504           50                         push	ax
28409                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28410 7505           FF76         06            push	6[bp]
28411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28412 7508           E8         06B6            call	_read_word
28413 750B           83C4                   04  add	sp,*4
28414                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28415 750E           8946         FC            mov	-4[bp],ax
28416                                           !BCC_EOS
28417                                           ! 3971         addr1 = BX;
28418                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28419 7511           8B46         08            mov	ax,8[bp]
28420 7514           8946         F8            mov	-8[bp],ax
28421                                           !BCC_EOS
28422                                           ! 3972         BX += 5;
28423                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28424 7517           8B46         08            mov	ax,8[bp]
28425 751A           05                   0005  add	ax,*5
28426 751D           8946         08            mov	8[bp],ax
28427                                           !BCC_EOS
28428                                           ! 3973         for(i=1;i<=4;i++){
28429                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28430 7520           B8                   0001  mov	ax,*1
28431 7523           8946         FE            mov	-2[bp],ax
28432                                           !BCC_EOS
28433                                           !BCC_EOS
28434 7526           EB           34            jmp .273
28435                       00007528            .274:
28436                                           ! 3974             outb(0x3c4, i);
28437                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28438 7528           FF76         FE            push	-2[bp]
28439                                           ! Debug: list int = const $3C4 (used reg = )
28440 752B           B8                   03C4  mov	ax,#$3C4
28441 752E           50                         push	ax
28442                                           ! Debug: func () void = outb+0 (used reg = )
28443 752F           E8         06E8            call	_outb
28444 7532           83C4                   04  add	sp,*4
28445                                           !BCC_EOS
28446                                           ! 3975             outb(0x3c5, read_byte(ES, BX)); BX++;
28447                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28448 7535           FF76         08            push	8[bp]
28449                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28450 7538           FF76         06            push	6[bp]
28451                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28452 753B           E8         0670            call	_read_byte
28453 753E           83C4                   04  add	sp,*4
28454                                           ! Debug: list unsigned char = al+0 (used reg = )
28455 7541           30E4                       xor	ah,ah
28456 7543           50                         push	ax
28457                                           ! Debug: list int = const $3C5 (used reg = )
28458 7544           B8                   03C5  mov	ax,#$3C5
28459 7547           50                         push	ax
28460                                           ! Debug: func () void = outb+0 (used reg = )
28461 7548           E8         06CF            call	_outb
28462 754B           83C4                   04  add	sp,*4
28463                                           !BCC_EOS
28464                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28465 754E           8B46         08            mov	ax,8[bp]
28466 7551           40                         inc	ax
28467 7552           8946         08            mov	8[bp],ax
28468                                           !BCC_EOS
28469                                           ! 3976         }
28470                                           ! 3977         outb(0x3c4, 0);
28471                       00007555            .272:
28472                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28473 7555           8B46         FE            mov	ax,-2[bp]
28474 7558           40                         inc	ax
28475 7559           8946         FE            mov	-2[bp],ax
28476                       0000755C            .273:
28477                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28478 755C           8B46         FE            mov	ax,-2[bp]
28479 755F           3D                   0004  cmp	ax,*4
28480 7562           76           C4            jbe	.274
28481                       00007564            .275:
28482                       00007564            .271:
28483                                           ! Debug: list int = const 0 (used reg = )
28484 7564           31C0                       xor	ax,ax
28485 7566           50                         push	ax
28486                                           ! Debug: list int = const $3C4 (used reg = )
28487 7567           B8                   03C4  mov	ax,#$3C4
28488 756A           50                         push	ax
28489                                           ! Debug: func () void = outb+0 (used reg = )
28490 756B           E8         06AC            call	_outb
28491 756E           83C4                   04  add	sp,*4
28492                                           !BCC_EOS
28493                                           ! 3978         outb(0x3c5, read_byte(ES, BX)); BX++;
28494                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28495 7571           FF76         08            push	8[bp]
28496                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28497 7574           FF76         06            push	6[bp]
28498                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28499 7577           E8         0634            call	_read_byte
28500 757A           83C4                   04  add	sp,*4
28501                                           ! Debug: list unsigned char = al+0 (used reg = )
28502 757D           30E4                       xor	ah,ah
28503 757F           50                         push	ax
28504                                           ! Debug: list int = const $3C5 (used reg = )
28505 7580           B8                   03C5  mov	ax,#$3C5
28506 7583           50                         push	ax
28507                                           ! Debug: func () void = outb+0 (used reg = )
28508 7584           E8         0693            call	_outb
28509 7587           83C4                   04  add	sp,*4
28510                                           !BCC_EOS
28511                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28512 758A           8B46         08            mov	ax,8[bp]
28513 758D           40                         inc	ax
28514 758E           8946         08            mov	8[bp],ax
28515                                           !BCC_EOS
28516                                           ! 3979         outw(crtc_addr,0x0011);
28517                                           ! Debug: list int = const $11 (used reg = )
28518 7591           B8                   0011  mov	ax,*$11
28519 7594           50                         push	ax
28520                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28521 7595           FF76         FC            push	-4[bp]
28522                                           ! Debug: func () void = outw+0 (used reg = )
28523 7598           E8         068F            call	_outw
28524 759B           83C4                   04  add	sp,*4
28525                                           !BCC_EOS
28526                                           ! 3980         for(i=0;i<=0x18;i++) {
28527                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28528 759E           31C0                       xor	ax,ax
28529 75A0           8946         FE            mov	-2[bp],ax
28530                                           !BCC_EOS
28531                                           !BCC_EOS
28532 75A3           EB           3C            jmp .278
28533                       000075A5            .279:
28534                                           ! 3981             if (i != 0x11) {
28535                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28536 75A5           8B46         FE            mov	ax,-2[bp]
28537 75A8           3D                   0011  cmp	ax,*$11
28538 75AB           74           26            je  	.27A
28539                       000075AD            .27B:
28540                                           ! 3982                 outb(crtc_addr,i);
28541                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28542 75AD           FF76         FE            push	-2[bp]
28543                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28544 75B0           FF76         FC            push	-4[bp]
28545                                           ! Debug: func () void = outb+0 (used reg = )
28546 75B3           E8         0664            call	_outb
28547 75B6           83C4                   04  add	sp,*4
28548                                           !BCC_EOS
28549                                           ! 3983                 outb(crtc_addr+1, read_byte(ES, BX));
28550                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28551 75B9           FF76         08            push	8[bp]
28552                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28553 75BC           FF76         06            push	6[bp]
28554                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28555 75BF           E8         05EC            call	_read_byte
28556 75C2           83C4                   04  add	sp,*4
28557                                           ! Debug: list unsigned char = al+0 (used reg = )
28558 75C5           30E4                       xor	ah,ah
28559 75C7           50                         push	ax
28560                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28561 75C8           8B46         FC            mov	ax,-4[bp]
28562                                           ! Debug: list unsigned int = ax+1 (used reg = )
28563 75CB           40                         inc	ax
28564 75CC           50                         push	ax
28565                                           ! Debug: func () void = outb+0 (used reg = )
28566 75CD           E8         064A            call	_outb
28567 75D0           83C4                   04  add	sp,*4
28568                                           !BCC_EOS
28569                                           ! 3984             }
28570                                           ! 3985             BX++;
28571                       000075D3            .27A:
28572                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28573 75D3           8B46         08            mov	ax,8[bp]
28574 75D6           40                         inc	ax
28575 75D7           8946         08            mov	8[bp],ax
28576                                           !BCC_EOS
28577                                           ! 3986         }
28578                                           ! 3987         v = inb(0x3cc) & ~0x01;
28579                       000075DA            .277:
28580                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28581 75DA           8B46         FE            mov	ax,-2[bp]
28582 75DD           40                         inc	ax
28583 75DE           8946         FE            mov	-2[bp],ax
28584                       000075E1            .278:
28585                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28586 75E1           8B46         FE            mov	ax,-2[bp]
28587 75E4           3D                   0018  cmp	ax,*$18
28588 75E7           76           BC            jbe	.279
28589                       000075E9            .27C:
28590                       000075E9            .276:
28591                                           ! Debug: list int = const $3CC (used reg = )
28592 75E9           B8                   03CC  mov	ax,#$3CC
28593 75EC           50                         push	ax
28594                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28595 75ED           E8         0614            call	_inb
28596 75F0           44                         inc	sp
28597 75F1           44                         inc	sp
28598                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28599 75F2           24                     FE  and	al,#$FE
28600                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28601 75F4           30E4                       xor	ah,ah
28602 75F6           8946         FA            mov	-6[bp],ax
28603                                           !BCC_EOS
28604                                           ! 3988         if (crtc_addr = 0x3d4)
28605                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28606 75F9           B8                   03D4  mov	ax,#$3D4
28607 75FC           8946         FC            mov	-4[bp],ax
28608 75FF           85C0                       test	ax,ax
28609 7601           74           08            je  	.27D
28610                       00007603            .27E:
28611                                           ! 3989             v |= 0x01;
28612                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28613 7603           8B46         FA            mov	ax,-6[bp]
28614 7606           0C                     01  or	al,*1
28615 7608           8946         FA            mov	-6[bp],ax
28616                                           !BCC_EOS
28617                                           ! 3990         outb(0x3c2, v);
28618                       0000760B            .27D:
28619                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28620 760B           FF76         FA            push	-6[bp]
28621                                           ! Debug: list int = const $3C2 (used reg = )
28622 760E           B8                   03C2  mov	ax,#$3C2
28623 7611           50                         push	ax
28624                                           ! Debug: func () void = outb+0 (used reg = )
28625 7612           E8         0605            call	_outb
28626 7615           83C4                   04  add	sp,*4
28627                                           !BCC_EOS
28628                                           ! 3991         outb(crtc_addr, 0x11);
28629                                           ! Debug: list int = const $11 (used reg = )
28630 7618           B8                   0011  mov	ax,*$11
28631 761B           50                         push	ax
28632                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28633 761C           FF76         FC            push	-4[bp]
28634                                           ! Debug: func () void = outb+0 (used reg = )
28635 761F           E8         05F8            call	_outb
28636 7622           83C4                   04  add	sp,*4
28637                                           !BCC_EOS
28638                                           ! 3992         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28639                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28640 7625           8B46         08            mov	ax,8[bp]
28641                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28642                                           ! Debug: list unsigned int = ax-7 (used reg = )
28643 7628           05                   FFF9  add	ax,*-7
28644 762B           50                         push	ax
28645                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28646 762C           FF76         06            push	6[bp]
28647                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28648 762F           E8         057C            call	_read_byte
28649 7632           83C4                   04  add	sp,*4
28650                                           ! Debug: list unsigned char = al+0 (used reg = )
28651 7635           30E4                       xor	ah,ah
28652 7637           50                         push	ax
28653                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28654 7638           8B46         FC            mov	ax,-4[bp]
28655                                           ! Debug: list unsigned int = ax+1 (used reg = )
28656 763B           40                         inc	ax
28657 763C           50                         push	ax
28658                                           ! Debug: func () void = outb+0 (used reg = )
28659 763D           E8         05DA            call	_outb
28660 7640           83C4                   04  add	sp,*4
28661                                           !BCC_EOS
28662                                           ! 3993         ar_index = read_byte(ES, addr1 + 0x03);
28663                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28664 7643           8B46         F8            mov	ax,-8[bp]
28665                                           ! Debug: list unsigned int = ax+3 (used reg = )
28666 7646           05                   0003  add	ax,*3
28667 7649           50                         push	ax
28668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28669 764A           FF76         06            push	6[bp]
28670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28671 764D           E8         055E            call	_read_byte
28672 7650           83C4                   04  add	sp,*4
28673                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28674 7653           30E4                       xor	ah,ah
28675 7655           8946         F6            mov	-$A[bp],ax
28676                                           !BCC_EOS
28677                                           ! 3994         inb(0x3da);
28678                                           ! Debug: list int = const $3DA (used reg = )
28679 7658           B8                   03DA  mov	ax,#$3DA
28680 765B           50                         push	ax
28681                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28682 765C           E8         05A5            call	_inb
28683 765F           44                         inc	sp
28684 7660           44                         inc	sp
28685                                           !BCC_EOS
28686                                           ! 3995         for(i=0;i<=0x13;i++) {
28687                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28688 7661           31C0                       xor	ax,ax
28689 7663           8946         FE            mov	-2[bp],ax
28690                                           !BCC_EOS
28691                                           !BCC_EOS
28692 7666           EB           3C            jmp .281
28693                       00007668            .282:
28694                                           ! 3996             outb(0x3c0, i | (ar_index & 0x20));
28695                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28696 7668           8A46         F6            mov	al,-$A[bp]
28697 766B           24                     20  and	al,*$20
28698                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28699                                           ! Debug: expression subtree swapping
28700 766D           30E4                       xor	ah,ah
28701 766F           0B46         FE            or	ax,-2[bp]
28702                                           ! Debug: list unsigned int = ax+0 (used reg = )
28703 7672           50                         push	ax
28704                                           ! Debug: list int = const $3C0 (used reg = )
28705 7673           B8                   03C0  mov	ax,#$3C0
28706 7676           50                         push	ax
28707                                           ! Debug: func () void = outb+0 (used reg = )
28708 7677           E8         05A0            call	_outb
28709 767A           83C4                   04  add	sp,*4
28710                                           !BCC_EOS
28711                                           ! 3997             outb(0x3c0, read_byte(ES, BX)); BX++;
28712                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28713 767D           FF76         08            push	8[bp]
28714                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28715 7680           FF76         06            push	6[bp]
28716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28717 7683           E8         0528            call	_read_byte
28718 7686           83C4                   04  add	sp,*4
28719                                           ! Debug: list unsigned char = al+0 (used reg = )
28720 7689           30E4                       xor	ah,ah
28721 768B           50                         push	ax
28722                                           ! Debug: list int = const $3C0 (used reg = )
28723 768C           B8                   03C0  mov	ax,#$3C0
28724 768F           50                         push	ax
28725                                           ! Debug: func () void = outb+0 (used reg = )
28726 7690           E8         0587            call	_outb
28727 7693           83C4                   04  add	sp,*4
28728                                           !BCC_EOS
28729                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28730 7696           8B46         08            mov	ax,8[bp]
28731 7699           40                         inc	ax
28732 769A           8946         08            mov	8[bp],ax
28733                                           !BCC_EOS
28734                                           ! 3998         }
28735                                           ! 3999         outb(0x3c0, ar_index);
28736                       0000769D            .280:
28737                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28738 769D           8B46         FE            mov	ax,-2[bp]
28739 76A0           40                         inc	ax
28740 76A1           8946         FE            mov	-2[bp],ax
28741                       000076A4            .281:
28742                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28743 76A4           8B46         FE            mov	ax,-2[bp]
28744 76A7           3D                   0013  cmp	ax,*$13
28745 76AA           76           BC            jbe	.282
28746                       000076AC            .283:
28747                       000076AC            .27F:
28748                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28749 76AC           FF76         F6            push	-$A[bp]
28750                                           ! Debug: list int = const $3C0 (used reg = )
28751 76AF           B8                   03C0  mov	ax,#$3C0
28752 76B2           50                         push	ax
28753                                           ! Debug: func () void = outb+0 (used reg = )
28754 76B3           E8         0564            call	_outb
28755 76B6           83C4                   04  add	sp,*4
28756                                           !BCC_EOS
28757                                           ! 4000         inb(0x3da);
28758                                           ! Debug: list int = const $3DA (used reg = )
28759 76B9           B8                   03DA  mov	ax,#$3DA
28760 76BC           50                         push	ax
28761                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28762 76BD           E8         0544            call	_inb
28763 76C0           44                         inc	sp
28764 76C1           44                         inc	sp
28765                                           !BCC_EOS
28766                                           ! 4001         for(i=0;i<=8;i++) {
28767                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28768 76C2           31C0                       xor	ax,ax
28769 76C4           8946         FE            mov	-2[bp],ax
28770                                           !BCC_EOS
28771                                           !BCC_EOS
28772 76C7           EB           34            jmp .286
28773                       000076C9            .287:
28774                                           ! 4002             outb(0x3ce,i);
28775                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28776 76C9           FF76         FE            push	-2[bp]
28777                                           ! Debug: list int = const $3CE (used reg = )
28778 76CC           B8                   03CE  mov	ax,#$3CE
28779 76CF           50                         push	ax
28780                                           ! Debug: func () void = outb+0 (used reg = )
28781 76D0           E8         0547            call	_outb
28782 76D3           83C4                   04  add	sp,*4
28783                                           !BCC_EOS
28784                                           ! 4003             outb(0x3cf, read_byte(ES, BX)); BX++;
28785                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28786 76D6           FF76         08            push	8[bp]
28787                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28788 76D9           FF76         06            push	6[bp]
28789                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28790 76DC           E8         04CF            call	_read_byte
28791 76DF           83C4                   04  add	sp,*4
28792                                           ! Debug: list unsigned char = al+0 (used reg = )
28793 76E2           30E4                       xor	ah,ah
28794 76E4           50                         push	ax
28795                                           ! Debug: list int = const $3CF (used reg = )
28796 76E5           B8                   03CF  mov	ax,#$3CF
28797 76E8           50                         push	ax
28798                                           ! Debug: func () void = outb+0 (used reg = )
28799 76E9           E8         052E            call	_outb
28800 76EC           83C4                   04  add	sp,*4
28801                                           !BCC_EOS
28802                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28803 76EF           8B46         08            mov	ax,8[bp]
28804 76F2           40                         inc	ax
28805 76F3           8946         08            mov	8[bp],ax
28806                                           !BCC_EOS
28807                                           ! 4004         }
28808                                           ! 4005         BX += 2;
28809                       000076F6            .285:
28810                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28811 76F6           8B46         FE            mov	ax,-2[bp]
28812 76F9           40                         inc	ax
28813 76FA           8946         FE            mov	-2[bp],ax
28814                       000076FD            .286:
28815                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28816 76FD           8B46         FE            mov	ax,-2[bp]
28817 7700           3D                   0008  cmp	ax,*8
28818 7703           76           C4            jbe	.287
28819                       00007705            .288:
28820                       00007705            .284:
28821                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28822 7705           8B46         08            mov	ax,8[bp]
28823 7708           40                         inc	ax
28824 7709           40                         inc	ax
28825 770A           8946         08            mov	8[bp],ax
28826                                           !BCC_EOS
28827                                           ! 4006         BX += 4;
28828                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28829 770D           8B46         08            mov	ax,8[bp]
28830 7710           05                   0004  add	ax,*4
28831 7713           8946         08            mov	8[bp],ax
28832                                           !BCC_EOS
28833                                           ! 4007         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28834                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28835 7716           FF76         F8            push	-8[bp]
28836                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28837 7719           FF76         06            push	6[bp]
28838                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28839 771C           E8         048F            call	_read_byte
28840 771F           83C4                   04  add	sp,*4
28841                                           ! Debug: list unsigned char = al+0 (used reg = )
28842 7722           30E4                       xor	ah,ah
28843 7724           50                         push	ax
28844                                           ! Debug: list int = const $3C4 (used reg = )
28845 7725           B8                   03C4  mov	ax,#$3C4
28846 7728           50                         push	ax
28847                                           ! Debug: func () void = outb+0 (used reg = )
28848 7729           E8         04EE            call	_outb
28849 772C           83C4                   04  add	sp,*4
28850                                           !BCC_EOS
28851                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28852 772F           8B46         F8            mov	ax,-8[bp]
28853 7732           40                         inc	ax
28854 7733           8946         F8            mov	-8[bp],ax
28855                                           !BCC_EOS
28856                                           ! 4008         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28857                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28858 7736           FF76         F8            push	-8[bp]
28859                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28860 7739           FF76         06            push	6[bp]
28861                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28862 773C           E8         046F            call	_read_byte
28863 773F           83C4                   04  add	sp,*4
28864                                           ! Debug: list unsigned char = al+0 (used reg = )
28865 7742           30E4                       xor	ah,ah
28866 7744           50                         push	ax
28867                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28868 7745           FF76         FC            push	-4[bp]
28869                                           ! Debug: func () void = outb+0 (used reg = )
28870 7748           E8         04CF            call	_outb
28871 774B           83C4                   04  add	sp,*4
28872                                           !BCC_EOS
28873                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28874 774E           8B46         F8            mov	ax,-8[bp]
28875 7751           40                         inc	ax
28876 7752           8946         F8            mov	-8[bp],ax
28877                                           !BCC_EOS
28878                                           ! 4009         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28879                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28880 7755           FF76         F8            push	-8[bp]
28881                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28882 7758           FF76         06            push	6[bp]
28883                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28884 775B           E8         0450            call	_read_byte
28885 775E           83C4                   04  add	sp,*4
28886                                           ! Debug: list unsigned char = al+0 (used reg = )
28887 7761           30E4                       xor	ah,ah
28888 7763           50                         push	ax
28889                                           ! Debug: list int = const $3CE (used reg = )
28890 7764           B8                   03CE  mov	ax,#$3CE
28891 7767           50                         push	ax
28892                                           ! Debug: func () void = outb+0 (used reg = )
28893 7768           E8         04AF            call	_outb
28894 776B           83C4                   04  add	sp,*4
28895                                           !BCC_EOS
28896                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28897 776E           8B46         F8            mov	ax,-8[bp]
28898 7771           40                         inc	ax
28899 7772           8946         F8            mov	-8[bp],ax
28900                                           !BCC_EOS
28901                                           ! 4010         addr1++;
28902                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28903 7775           8B46         F8            mov	ax,-8[bp]
28904 7778           40                         inc	ax
28905 7779           8946         F8            mov	-8[bp],ax
28906                                           !BCC_EOS
28907                                           ! 4011         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28908                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28909 777C           FF76         F8            push	-8[bp]
28910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28911 777F           FF76         06            push	6[bp]
28912                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28913 7782           E8         0429            call	_read_byte
28914 7785           83C4                   04  add	sp,*4
28915                                           ! Debug: list unsigned char = al+0 (used reg = )
28916 7788           30E4                       xor	ah,ah
28917 778A           50                         push	ax
28918                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28919 778B           8B46         FC            mov	ax,-4[bp]
28920                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28921                                           ! Debug: list unsigned int = ax+6 (used reg = )
28922 778E           05                   0006  add	ax,*6
28923 7791           50                         push	ax
28924                                           ! Debug: func () void = outb+0 (used reg = )
28925 7792           E8         0485            call	_outb
28926 7795           83C4                   04  add	sp,*4
28927                                           !BCC_EOS
28928                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28929 7798           8B46         F8            mov	ax,-8[bp]
28930 779B           40                         inc	ax
28931 779C           8946         F8            mov	-8[bp],ax
28932                                           !BCC_EOS
28933                                           ! 4012     }
28934                                           ! 4013     if (CX & 2) {
28935                       0000779F            .26F:
28936                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28937 779F           8A46         04            mov	al,4[bp]
28938 77A2           24                     02  and	al,*2
28939 77A4           84C0                       test	al,al
28940 77A6         0F84         0270            beq 	.289
28941                       000077AA            .28A:
28942                                           ! 4014         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28943                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28944 77AA           FF76         08            push	8[bp]
28945                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28946 77AD           FF76         06            push	6[bp]
28947                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28948 77B0           E8         03FB            call	_read_byte
28949 77B3           83C4                   04  add	sp,*4
28950                                           ! Debug: list unsigned char = al+0 (used reg = )
28951 77B6           30E4                       xor	ah,ah
28952 77B8           50                         push	ax
28953                                           ! Debug: list int = const $49 (used reg = )
28954 77B9           B8                   0049  mov	ax,*$49
28955 77BC           50                         push	ax
28956                                           ! Debug: list int = const $40 (used reg = )
28957 77BD           B8                   0040  mov	ax,*$40
28958 77C0           50                         push	ax
28959                                           ! Debug: func () void = write_byte+0 (used reg = )
28960 77C1           E8         0410            call	_write_byte
28961 77C4           83C4                   06  add	sp,*6
28962                                           !BCC_EOS
28963                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28964 77C7           8B46         08            mov	ax,8[bp]
28965 77CA           40                         inc	ax
28966 77CB           8946         08            mov	8[bp],ax
28967                                           !BCC_EOS
28968                                           ! 4015         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28969                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28970 77CE           FF76         08            push	8[bp]
28971                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28972 77D1           FF76         06            push	6[bp]
28973                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28974 77D4           E8         03EA            call	_read_word
28975 77D7           83C4                   04  add	sp,*4
28976                                           ! Debug: list unsigned short = ax+0 (used reg = )
28977 77DA           50                         push	ax
28978                                           ! Debug: list int = const $4A (used reg = )
28979 77DB           B8                   004A  mov	ax,*$4A
28980 77DE           50                         push	ax
28981                                           ! Debug: list int = const $40 (used reg = )
28982 77DF           B8                   0040  mov	ax,*$40
28983 77E2           50                         push	ax
28984                                           ! Debug: func () void = write_word+0 (used reg = )
28985 77E3           E8         0406            call	_write_word
28986 77E6           83C4                   06  add	sp,*6
28987                                           !BCC_EOS
28988                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28989 77E9           8B46         08            mov	ax,8[bp]
28990 77EC           40                         inc	ax
28991 77ED           40                         inc	ax
28992 77EE           8946         08            mov	8[bp],ax
28993                                           !BCC_EOS
28994                                           ! 4016         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28995                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28996 77F1           FF76         08            push	8[bp]
28997                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28998 77F4           FF76         06            push	6[bp]
28999                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29000 77F7           E8         03C7            call	_read_word
29001 77FA           83C4                   04  add	sp,*4
29002                                           ! Debug: list unsigned short = ax+0 (used reg = )
29003 77FD           50                         push	ax
29004                                           ! Debug: list int = const $4C (used reg = )
29005 77FE           B8                   004C  mov	ax,*$4C
29006 7801           50                         push	ax
29007                                           ! Debug: list int = const $40 (used reg = )
29008 7802           B8                   0040  mov	ax,*$40
29009 7805           50                         push	ax
29010                                           ! Debug: func () void = write_word+0 (used reg = )
29011 7806           E8         03E3            call	_write_word
29012 7809           83C4                   06  add	sp,*6
29013                                           !BCC_EOS
29014                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29015 780C           8B46         08            mov	ax,8[bp]
29016 780F           40                         inc	ax
29017 7810           40                         inc	ax
29018 7811           8946         08            mov	8[bp],ax
29019                                           !BCC_EOS
29020                                           ! 4017         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29021                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29022 7814           FF76         08            push	8[bp]
29023                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29024 7817           FF76         06            push	6[bp]
29025                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29026 781A           E8         03A4            call	_read_word
29027 781D           83C4                   04  add	sp,*4
29028                                           ! Debug: list unsigned short = ax+0 (used reg = )
29029 7820           50                         push	ax
29030                                           ! Debug: list int = const $63 (used reg = )
29031 7821           B8                   0063  mov	ax,*$63
29032 7824           50                         push	ax
29033                                           ! Debug: list int = const $40 (used reg = )
29034 7825           B8                   0040  mov	ax,*$40
29035 7828           50                         push	ax
29036                                           ! Debug: func () void = write_word+0 (used reg = )
29037 7829           E8         03C0            call	_write_word
29038 782C           83C4                   06  add	sp,*6
29039                                           !BCC_EOS
29040                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29041 782F           8B46         08            mov	ax,8[bp]
29042 7832           40                         inc	ax
29043 7833           40                         inc	ax
29044 7834           8946         08            mov	8[bp],ax
29045                                           !BCC_EOS
29046                                           ! 4018         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29047                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29048 7837           FF76         08            push	8[bp]
29049                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29050 783A           FF76         06            push	6[bp]
29051                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29052 783D           E8         036E            call	_read_byte
29053 7840           83C4                   04  add	sp,*4
29054                                           ! Debug: list unsigned char = al+0 (used reg = )
29055 7843           30E4                       xor	ah,ah
29056 7845           50                         push	ax
29057                                           ! Debug: list int = const $84 (used reg = )
29058 7846           B8                   0084  mov	ax,#$84
29059 7849           50                         push	ax
29060                                           ! Debug: list int = const $40 (used reg = )
29061 784A           B8                   0040  mov	ax,*$40
29062 784D           50                         push	ax
29063                                           ! Debug: func () void = write_byte+0 (used reg = )
29064 784E           E8         0383            call	_write_byte
29065 7851           83C4                   06  add	sp,*6
29066                                           !BCC_EOS
29067                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29068 7854           8B46         08            mov	ax,8[bp]
29069 7857           40                         inc	ax
29070 7858           8946         08            mov	8[bp],ax
29071                                           !BCC_EOS
29072                                           ! 4019         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29073                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29074 785B           FF76         08            push	8[bp]
29075                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29076 785E           FF76         06            push	6[bp]
29077                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29078 7861           E8         035D            call	_read_word
29079 7864           83C4                   04  add	sp,*4
29080                                           ! Debug: list unsigned short = ax+0 (used reg = )
29081 7867           50                         push	ax
29082                                           ! Debug: list int = const $85 (used reg = )
29083 7868           B8                   0085  mov	ax,#$85
29084 786B           50                         push	ax
29085                                           ! Debug: list int = const $40 (used reg = )
29086 786C           B8                   0040  mov	ax,*$40
29087 786F           50                         push	ax
29088                                           ! Debug: func () void = write_word+0 (used reg = )
29089 7870           E8         0379            call	_write_word
29090 7873           83C4                   06  add	sp,*6
29091                                           !BCC_EOS
29092                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29093 7876           8B46         08            mov	ax,8[bp]
29094 7879           40                         inc	ax
29095 787A           40                         inc	ax
29096 787B           8946         08            mov	8[bp],ax
29097                                           !BCC_EOS
29098                                           ! 4020         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29099                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29100 787E           FF76         08            push	8[bp]
29101                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29102 7881           FF76         06            push	6[bp]
29103                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29104 7884           E8         0327            call	_read_byte
29105 7887           83C4                   04  add	sp,*4
29106                                           ! Debug: list unsigned char = al+0 (used reg = )
29107 788A           30E4                       xor	ah,ah
29108 788C           50                         push	ax
29109                                           ! Debug: list int = const $87 (used reg = )
29110 788D           B8                   0087  mov	ax,#$87
29111 7890           50                         push	ax
29112                                           ! Debug: list int = const $40 (used reg = )
29113 7891           B8                   0040  mov	ax,*$40
29114 7894           50                         push	ax
29115                                           ! Debug: func () void = write_byte+0 (used reg = )
29116 7895           E8         033C            call	_write_byte
29117 7898           83C4                   06  add	sp,*6
29118                                           !BCC_EOS
29119                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29120 789B           8B46         08            mov	ax,8[bp]
29121 789E           40                         inc	ax
29122 789F           8946         08            mov	8[bp],ax
29123                                           !BCC_EOS
29124                                           ! 4021         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29125                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29126 78A2           FF76         08            push	8[bp]
29127                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29128 78A5           FF76         06            push	6[bp]
29129                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29130 78A8           E8         0303            call	_read_byte
29131 78AB           83C4                   04  add	sp,*4
29132                                           ! Debug: list unsigned char = al+0 (used reg = )
29133 78AE           30E4                       xor	ah,ah
29134 78B0           50                         push	ax
29135                                           ! Debug: list int = const $88 (used reg = )
29136 78B1           B8                   0088  mov	ax,#$88
29137 78B4           50                         push	ax
29138                                           ! Debug: list int = const $40 (used reg = )
29139 78B5           B8                   0040  mov	ax,*$40
29140 78B8           50                         push	ax
29141                                           ! Debug: func () void = write_byte+0 (used reg = )
29142 78B9           E8         0318            call	_write_byte
29143 78BC           83C4                   06  add	sp,*6
29144                                           !BCC_EOS
29145                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29146 78BF           8B46         08            mov	ax,8[bp]
29147 78C2           40                         inc	ax
29148 78C3           8946         08            mov	8[bp],ax
29149                                           !BCC_EOS
29150                                           ! 4022         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29151                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29152 78C6           FF76         08            push	8[bp]
29153                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29154 78C9           FF76         06            push	6[bp]
29155                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29156 78CC           E8         02DF            call	_read_byte
29157 78CF           83C4                   04  add	sp,*4
29158                                           ! Debug: list unsigned char = al+0 (used reg = )
29159 78D2           30E4                       xor	ah,ah
29160 78D4           50                         push	ax
29161                                           ! Debug: list int = const $89 (used reg = )
29162 78D5           B8                   0089  mov	ax,#$89
29163 78D8           50                         push	ax
29164                                           ! Debug: list int = const $40 (used reg = )
29165 78D9           B8                   0040  mov	ax,*$40
29166 78DC           50                         push	ax
29167                                           ! Debug: func () void = write_byte+0 (used reg = )
29168 78DD           E8         02F4            call	_write_byte
29169 78E0           83C4                   06  add	sp,*6
29170                                           !BCC_EOS
29171                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29172 78E3           8B46         08            mov	ax,8[bp]
29173 78E6           40                         inc	ax
29174 78E7           8946         08            mov	8[bp],ax
29175                                           !BCC_EOS
29176                                           ! 4023         write_word(0x40,0x60, read_w
29177                                           ! 4023 ord(ES, BX)); BX += 2;
29178                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29179 78EA           FF76         08            push	8[bp]
29180                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29181 78ED           FF76         06            push	6[bp]
29182                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29183 78F0           E8         02CE            call	_read_word
29184 78F3           83C4                   04  add	sp,*4
29185                                           ! Debug: list unsigned short = ax+0 (used reg = )
29186 78F6           50                         push	ax
29187                                           ! Debug: list int = const $60 (used reg = )
29188 78F7           B8                   0060  mov	ax,*$60
29189 78FA           50                         push	ax
29190                                           ! Debug: list int = const $40 (used reg = )
29191 78FB           B8                   0040  mov	ax,*$40
29192 78FE           50                         push	ax
29193                                           ! Debug: func () void = write_word+0 (used reg = )
29194 78FF           E8         02EA            call	_write_word
29195 7902           83C4                   06  add	sp,*6
29196                                           !BCC_EOS
29197                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29198 7905           8B46         08            mov	ax,8[bp]
29199 7908           40                         inc	ax
29200 7909           40                         inc	ax
29201 790A           8946         08            mov	8[bp],ax
29202                                           !BCC_EOS
29203                                           ! 4024         for(i=0;i<8;i++) {
29204                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29205 790D           31C0                       xor	ax,ax
29206 790F           8946         FE            mov	-2[bp],ax
29207                                           !BCC_EOS
29208                                           !BCC_EOS
29209 7912           EB           2F            jmp .28D
29210                       00007914            .28E:
29211                                           ! 4025             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29212                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29213 7914           FF76         08            push	8[bp]
29214                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29215 7917           FF76         06            push	6[bp]
29216                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29217 791A           E8         02A4            call	_read_word
29218 791D           83C4                   04  add	sp,*4
29219                                           ! Debug: list unsigned short = ax+0 (used reg = )
29220 7920           50                         push	ax
29221                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29222                                           ! Debug: expression subtree swapping
29223 7921           8B46         FE            mov	ax,-2[bp]
29224 7924           D1E0                       shl	ax,*1
29225                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29226                                           ! Debug: expression subtree swapping
29227                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29228 7926           05                   0050  add	ax,*$50
29229 7929           50                         push	ax
29230                                           ! Debug: list int = const $40 (used reg = )
29231 792A           B8                   0040  mov	ax,*$40
29232 792D           50                         push	ax
29233                                           ! Debug: func () void = write_word+0 (used reg = )
29234 792E           E8         02BB            call	_write_word
29235 7931           83C4                   06  add	sp,*6
29236                                           !BCC_EOS
29237                                           ! 4026             BX += 2;
29238                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29239 7934           8B46         08            mov	ax,8[bp]
29240 7937           40                         inc	ax
29241 7938           40                         inc	ax
29242 7939           8946         08            mov	8[bp],ax
29243                                           !BCC_EOS
29244                                           ! 4027         }
29245                                           ! 4028         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29246                       0000793C            .28C:
29247                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29248 793C           8B46         FE            mov	ax,-2[bp]
29249 793F           40                         inc	ax
29250 7940           8946         FE            mov	-2[bp],ax
29251                       00007943            .28D:
29252                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29253 7943           8B46         FE            mov	ax,-2[bp]
29254 7946           3D                   0008  cmp	ax,*8
29255 7949           72           C9            jb 	.28E
29256                       0000794B            .28F:
29257                       0000794B            .28B:
29258                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29259 794B           FF76         08            push	8[bp]
29260                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29261 794E           FF76         06            push	6[bp]
29262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29263 7951           E8         026D            call	_read_word
29264 7954           83C4                   04  add	sp,*4
29265                                           ! Debug: list unsigned short = ax+0 (used reg = )
29266 7957           50                         push	ax
29267                                           ! Debug: list int = const $4E (used reg = )
29268 7958           B8                   004E  mov	ax,*$4E
29269 795B           50                         push	ax
29270                                           ! Debug: list int = const $40 (used reg = )
29271 795C           B8                   0040  mov	ax,*$40
29272 795F           50                         push	ax
29273                                           ! Debug: func () void = write_word+0 (used reg = )
29274 7960           E8         0289            call	_write_word
29275 7963           83C4                   06  add	sp,*6
29276                                           !BCC_EOS
29277                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29278 7966           8B46         08            mov	ax,8[bp]
29279 7969           40                         inc	ax
29280 796A           40                         inc	ax
29281 796B           8946         08            mov	8[bp],ax
29282                                           !BCC_EOS
29283                                           ! 4029         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29284                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29285 796E           FF76         08            push	8[bp]
29286                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29287 7971           FF76         06            push	6[bp]
29288                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29289 7974           E8         0237            call	_read_byte
29290 7977           83C4                   04  add	sp,*4
29291                                           ! Debug: list unsigned char = al+0 (used reg = )
29292 797A           30E4                       xor	ah,ah
29293 797C           50                         push	ax
29294                                           ! Debug: list int = const $62 (used reg = )
29295 797D           B8                   0062  mov	ax,*$62
29296 7980           50                         push	ax
29297                                           ! Debug: list int = const $40 (used reg = )
29298 7981           B8                   0040  mov	ax,*$40
29299 7984           50                         push	ax
29300                                           ! Debug: func () void = write_byte+0 (used reg = )
29301 7985           E8         024C            call	_write_byte
29302 7988           83C4                   06  add	sp,*6
29303                                           !BCC_EOS
29304                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29305 798B           8B46         08            mov	ax,8[bp]
29306 798E           40                         inc	ax
29307 798F           8946         08            mov	8[bp],ax
29308                                           !BCC_EOS
29309                                           ! 4030         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29310                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29311 7992           FF76         08            push	8[bp]
29312                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29313 7995           FF76         06            push	6[bp]
29314                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29315 7998           E8         0226            call	_read_word
29316 799B           83C4                   04  add	sp,*4
29317                                           ! Debug: list unsigned short = ax+0 (used reg = )
29318 799E           50                         push	ax
29319                                           ! Debug: list int = const $7C (used reg = )
29320 799F           B8                   007C  mov	ax,*$7C
29321 79A2           50                         push	ax
29322                                           ! Debug: list int = const 0 (used reg = )
29323 79A3           31C0                       xor	ax,ax
29324 79A5           50                         push	ax
29325                                           ! Debug: func () void = write_word+0 (used reg = )
29326 79A6           E8         0243            call	_write_word
29327 79A9           83C4                   06  add	sp,*6
29328                                           !BCC_EOS
29329                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29330 79AC           8B46         08            mov	ax,8[bp]
29331 79AF           40                         inc	ax
29332 79B0           40                         inc	ax
29333 79B1           8946         08            mov	8[bp],ax
29334                                           !BCC_EOS
29335                                           ! 4031         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29336                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29337 79B4           FF76         08            push	8[bp]
29338                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29339 79B7           FF76         06            push	6[bp]
29340                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29341 79BA           E8         0204            call	_read_word
29342 79BD           83C4                   04  add	sp,*4
29343                                           ! Debug: list unsigned short = ax+0 (used reg = )
29344 79C0           50                         push	ax
29345                                           ! Debug: list int = const $7E (used reg = )
29346 79C1           B8                   007E  mov	ax,*$7E
29347 79C4           50                         push	ax
29348                                           ! Debug: list int = const 0 (used reg = )
29349 79C5           31C0                       xor	ax,ax
29350 79C7           50                         push	ax
29351                                           ! Debug: func () void = write_word+0 (used reg = )
29352 79C8           E8         0221            call	_write_word
29353 79CB           83C4                   06  add	sp,*6
29354                                           !BCC_EOS
29355                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29356 79CE           8B46         08            mov	ax,8[bp]
29357 79D1           40                         inc	ax
29358 79D2           40                         inc	ax
29359 79D3           8946         08            mov	8[bp],ax
29360                                           !BCC_EOS
29361                                           ! 4032         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29362                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29363 79D6           FF76         08            push	8[bp]
29364                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29365 79D9           FF76         06            push	6[bp]
29366                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29367 79DC           E8         01E2            call	_read_word
29368 79DF           83C4                   04  add	sp,*4
29369                                           ! Debug: list unsigned short = ax+0 (used reg = )
29370 79E2           50                         push	ax
29371                                           ! Debug: list int = const $10C (used reg = )
29372 79E3           B8                   010C  mov	ax,#$10C
29373 79E6           50                         push	ax
29374                                           ! Debug: list int = const 0 (used reg = )
29375 79E7           31C0                       xor	ax,ax
29376 79E9           50                         push	ax
29377                                           ! Debug: func () void = write_word+0 (used reg = )
29378 79EA           E8         01FF            call	_write_word
29379 79ED           83C4                   06  add	sp,*6
29380                                           !BCC_EOS
29381                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29382 79F0           8B46         08            mov	ax,8[bp]
29383 79F3           40                         inc	ax
29384 79F4           40                         inc	ax
29385 79F5           8946         08            mov	8[bp],ax
29386                                           !BCC_EOS
29387                                           ! 4033         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29388                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29389 79F8           FF76         08            push	8[bp]
29390                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29391 79FB           FF76         06            push	6[bp]
29392                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29393 79FE           E8         01C0            call	_read_word
29394 7A01           83C4                   04  add	sp,*4
29395                                           ! Debug: list unsigned short = ax+0 (used reg = )
29396 7A04           50                         push	ax
29397                                           ! Debug: list int = const $10E (used reg = )
29398 7A05           B8                   010E  mov	ax,#$10E
29399 7A08           50                         push	ax
29400                                           ! Debug: list int = const 0 (used reg = )
29401 7A09           31C0                       xor	ax,ax
29402 7A0B           50                         push	ax
29403                                           ! Debug: func () void = write_word+0 (used reg = )
29404 7A0C           E8         01DD            call	_write_word
29405 7A0F           83C4                   06  add	sp,*6
29406                                           !BCC_EOS
29407                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29408 7A12           8B46         08            mov	ax,8[bp]
29409 7A15           40                         inc	ax
29410 7A16           40                         inc	ax
29411 7A17           8946         08            mov	8[bp],ax
29412                                           !BCC_EOS
29413                                           ! 4034     }
29414                                           ! 4035     if (CX & 4) {
29415                       00007A1A            .289:
29416                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29417 7A1A           8A46         04            mov	al,4[bp]
29418 7A1D           24                     04  and	al,*4
29419 7A1F           84C0                       test	al,al
29420 7A21         0F84         0096            beq 	.290
29421                       00007A25            .291:
29422                                           ! 4036         BX++;
29423                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29424 7A25           8B46         08            mov	ax,8[bp]
29425 7A28           40                         inc	ax
29426 7A29           8946         08            mov	8[bp],ax
29427                                           !BCC_EOS
29428                                           ! 4037         v = read_byte(ES, BX); BX++;
29429                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29430 7A2C           FF76         08            push	8[bp]
29431                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29432 7A2F           FF76         06            push	6[bp]
29433                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29434 7A32           E8         0179            call	_read_byte
29435 7A35           83C4                   04  add	sp,*4
29436                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29437 7A38           30E4                       xor	ah,ah
29438 7A3A           8946         FA            mov	-6[bp],ax
29439                                           !BCC_EOS
29440                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29441 7A3D           8B46         08            mov	ax,8[bp]
29442 7A40           40                         inc	ax
29443 7A41           8946         08            mov	8[bp],ax
29444                                           !BCC_EOS
29445                                           ! 4038         outb(0x3c6, read_byte(ES, BX)); BX++;
29446                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29447 7A44           FF76         08            push	8[bp]
29448                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29449 7A47           FF76         06            push	6[bp]
29450                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29451 7A4A           E8         0161            call	_read_byte
29452 7A4D           83C4                   04  add	sp,*4
29453                                           ! Debug: list unsigned char = al+0 (used reg = )
29454 7A50           30E4                       xor	ah,ah
29455 7A52           50                         push	ax
29456                                           ! Debug: list int = const $3C6 (used reg = )
29457 7A53           B8                   03C6  mov	ax,#$3C6
29458 7A56           50                         push	ax
29459                                           ! Debug: func () void = outb+0 (used reg = )
29460 7A57           E8         01C0            call	_outb
29461 7A5A           83C4                   04  add	sp,*4
29462                                           !BCC_EOS
29463                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29464 7A5D           8B46         08            mov	ax,8[bp]
29465 7A60           40                         inc	ax
29466 7A61           8946         08            mov	8[bp],ax
29467                                           !BCC_EOS
29468                                           ! 4039         outb(0x3c8,0x00);
29469                                           ! Debug: list int = const 0 (used reg = )
29470 7A64           31C0                       xor	ax,ax
29471 7A66           50                         push	ax
29472                                           ! Debug: list int = const $3C8 (used reg = )
29473 7A67           B8                   03C8  mov	ax,#$3C8
29474 7A6A           50                         push	ax
29475                                           ! Debug: func () void = outb+0 (used reg = )
29476 7A6B           E8         01AC            call	_outb
29477 7A6E           83C4                   04  add	sp,*4
29478                                           !BCC_EOS
29479                                           ! 4040         for(i=0;i<256*3;i++) {
29480                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29481 7A71           31C0                       xor	ax,ax
29482 7A73           8946         FE            mov	-2[bp],ax
29483                                           !BCC_EOS
29484                                           !BCC_EOS
29485 7A76           EB           27            jmp .294
29486                       00007A78            .295:
29487                                           ! 4041             outb(0x3c9, read_byte(ES, BX)); BX++;
29488                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29489 7A78           FF76         08            push	8[bp]
29490                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29491 7A7B           FF76         06            push	6[bp]
29492                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29493 7A7E           E8         012D            call	_read_byte
29494 7A81           83C4                   04  add	sp,*4
29495                                           ! Debug: list unsigned char = al+0 (used reg = )
29496 7A84           30E4                       xor	ah,ah
29497 7A86           50                         push	ax
29498                                           ! Debug: list int = const $3C9 (used reg = )
29499 7A87           B8                   03C9  mov	ax,#$3C9
29500 7A8A           50                         push	ax
29501                                           ! Debug: func () void = outb+0 (used reg = )
29502 7A8B           E8         018C            call	_outb
29503 7A8E           83C4                   04  add	sp,*4
29504                                           !BCC_EOS
29505                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29506 7A91           8B46         08            mov	ax,8[bp]
29507 7A94           40                         inc	ax
29508 7A95           8946         08            mov	8[bp],ax
29509                                           !BCC_EOS
29510                                           ! 4042         }
29511                                           ! 4043         BX++;
29512                       00007A98            .293:
29513                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29514 7A98           8B46         FE            mov	ax,-2[bp]
29515 7A9B           40                         inc	ax
29516 7A9C           8946         FE            mov	-2[bp],ax
29517                       00007A9F            .294:
29518                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29519 7A9F           8B46         FE            mov	ax,-2[bp]
29520 7AA2           3D                   0300  cmp	ax,#$300
29521 7AA5           72           D1            jb 	.295
29522                       00007AA7            .296:
29523                       00007AA7            .292:
29524                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29525 7AA7           8B46         08            mov	ax,8[bp]
29526 7AAA           40                         inc	ax
29527 7AAB           8946         08            mov	8[bp],ax
29528                                           !BCC_EOS
29529                                           ! 4044         outb(0x3c8, v);
29530                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29531 7AAE           FF76         FA            push	-6[bp]
29532                                           ! Debug: list int = const $3C8 (used reg = )
29533 7AB1           B8                   03C8  mov	ax,#$3C8
29534 7AB4           50                         push	ax
29535                                           ! Debug: func () void = outb+0 (used reg = )
29536 7AB5           E8         0162            call	_outb
29537 7AB8           83C4                   04  add	sp,*4
29538                                           !BCC_EOS
29539                                           ! 4045     }
29540                                           ! 4046     return BX;
29541                       00007ABB            .290:
29542 7ABB           8B46         08            mov	ax,8[bp]
29543 7ABE           89EC                       mov	sp,bp
29544 7AC0           5D                         pop	bp
29545 7AC1           C3                         ret
29546                                           !BCC_EOS
29547                                           ! 4047 }
29548                                           ! 4048 static Bit8u find_vga_entry(mode)
29549                                           ! 4049 Bit8u mode;
29550                       00007AC2            _find_vga_entry:
29551                                           !BCC_EOS
29552                                           ! 4050 {
29553                                           ! 4051  Bit8u i,line=0xFF;
29554 7AC2           55                         push	bp
29555 7AC3           89E5                       mov	bp,sp
29556 7AC5           4C                         dec	sp
29557 7AC6           4C                         dec	sp
29558                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29559 7AC7           B0                     FF  mov	al,#$FF
29560 7AC9           8846         FE            mov	-2[bp],al
29561                                           !BCC_EOS
29562                                           ! 4052  for(i=0;i<=15;i++)
29563                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29564 7ACC           30C0                       xor	al,al
29565 7ACE           8846         FF            mov	-1[bp],al
29566                                           !BCC_EOS
29567                                           !BCC_EOS
29568                                           ! 4053   if(vga_modes[i].svgamode==mode)
29569 7AD1           EB           23            jmp .299
29570                       00007AD3            .29A:
29571                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29572 7AD3           8A46         FF            mov	al,-1[bp]
29573 7AD6           30E4                       xor	ah,ah
29574 7AD8           B1                     03  mov	cl,*3
29575 7ADA           D3E0                       shl	ax,cl
29576 7ADC           89C3                       mov	bx,ax
29577                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29578 7ADE           8A87       01F8            mov	al,_vga_modes[bx]
29579 7AE2           3A46         04            cmp	al,4[bp]
29580 7AE5           75           08            jne 	.29B
29581                       00007AE7            .29C:
29582                                           ! 4054    {line=i;
29583                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29584 7AE7           8A46         FF            mov	al,-1[bp]
29585 7AEA           8846         FE            mov	-2[bp],al
29586                                           !BCC_EOS
29587                                           ! 4055     break;
29588 7AED           EB           0E            jmp .297
29589                                           !BCC_EOS
29590                                           ! 4056    }
29591                                           ! 4057  return line;
29592                       00007AEF            .29B:
29593                       00007AEF            .298:
29594                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29595 7AEF           8A46         FF            mov	al,-1[bp]
29596 7AF2           40                         inc	ax
29597 7AF3           8846         FF            mov	-1[bp],al
29598                       00007AF6            .299:
29599                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29600 7AF6           8A46         FF            mov	al,-1[bp]
29601 7AF9           3C                     0F  cmp	al,*$F
29602 7AFB           76           D6            jbe	.29A
29603                       00007AFD            .29D:
29604                       00007AFD            .297:
29605 7AFD           8A46         FE            mov	al,-2[bp]
29606 7B00           89EC                       mov	sp,bp
29607 7B02           5D                         pop	bp
29608 7B03           C3                         ret
29609                                           !BCC_EOS
29610                                           ! 4058 }
29611                                           ! 4059 static void memsetb(seg,offset,value,count)
29612                                           ! Register BX used in function find_vga_entry
29613                                           ! 4060   Bit16u seg;
29614                       00007B04            _memsetb:
29615                                           !BCC_EOS
29616                                           ! 4061   Bit16u offset;
29617                                           !BCC_EOS
29618                                           ! 4062   Bit16u value;
29619                                           !BCC_EOS
29620                                           ! 4063   Bit16u count;
29621                                           !BCC_EOS
29622                                           ! 4064 {
29623                                           ! 4065 #asm
29624                                           !BCC_ASM
29625                       00000008            _memsetb.count	set	8
29626                       00000002            _memsetb.seg	set	2
29627                       00000006            _memsetb.value	set	6
29628                       00000004            _memsetb.offset	set	4
29629 7B04           55                           push bp
29630 7B05           89E5                         mov bp, sp
29631 7B07           50                             push ax
29632 7B08           51                             push cx
29633 7B09           06                             push es
29634 7B0A           57                             push di
29635 7B0B           8B4E         0A                mov cx, 10[bp] ; count
29636 7B0E           83F9                   00      cmp cx, #0x00
29637 7B11           74           10                je memsetb_end
29638 7B13           8B46         04                mov ax, 4[bp] ; segment
29639 7B16           8EC0                           mov es, ax
29640 7B18           8B46         06                mov ax, 6[bp] ; offset
29641 7B1B           89C7                           mov di, ax
29642 7B1D           8A46         08                mov al, 8[bp] ; value
29643 7B20           FC                             cld
29644 7B21           F3                             rep
29645 7B22           AA                              stosb
29646                       00007B23            memsetb_end:
29647 7B23           5F                             pop di
29648 7B24           07                             pop es
29649 7B25           59                             pop cx
29650 7B26           58                             pop ax
29651 7B27           5D                           pop bp
29652                                           ! 4089 endasm
29653                                           !BCC_ENDASM
29654                                           ! 4090 }
29655 7B28           C3                         ret
29656                                           ! 4091 static void memsetw(seg,offset,value,count)
29657                                           ! 4092   Bit16u seg;
29658                       00007B29            _memsetw:
29659                                           !BCC_EOS
29660                                           ! 4093   Bit16u offset;
29661                                           !BCC_EOS
29662                                           ! 4094   Bit16u value;
29663                                           !BCC_EOS
29664                                           ! 4095   Bit16u count;
29665                                           !BCC_EOS
29666                                           ! 4096 {
29667                                           ! 4097 #asm
29668                                           !BCC_ASM
29669                       00000008            _memsetw.count	set	8
29670                       00000002            _memsetw.seg	set	2
29671                       00000006            _memsetw.value	set	6
29672                       00000004            _memsetw.offset	set	4
29673 7B29           55                           push bp
29674 7B2A           89E5                         mov bp, sp
29675 7B2C           50                             push ax
29676 7B2D           51                             push cx
29677 7B2E           06                             push es
29678 7B2F           57                             push di
29679 7B30           8B4E         0A                mov cx, 10[bp] ; count
29680 7B33           83F9                   00      cmp cx, #0x00
29681 7B36           74           10                je memsetw_end
29682 7B38           8B46         04                mov ax, 4[bp] ; segment
29683 7B3B           8EC0                           mov es, ax
29684 7B3D           8B46         06                mov ax, 6[bp] ; offset
29685 7B40           89C7                           mov di, ax
29686 7B42           8B46         08                mov ax, 8[bp] ; value
29687 7B45           FC                             cld
29688 7B46           F3                             rep
29689 7B47           AB                              stosw
29690                       00007B48            memsetw_end:
29691 7B48           5F                             pop di
29692 7B49           07                             pop es
29693 7B4A           59                             pop cx
29694 7B4B           58                             pop ax
29695 7B4C           5D                           pop bp
29696                                           ! 4121 endasm
29697                                           !BCC_ENDASM
29698                                           ! 4122 }
29699 7B4D           C3                         ret
29700                                           ! 4123 static void memcpyb(dseg,doffset,sseg,soffset,count)
29701                                           ! 4124   Bit16u dseg;
29702                       00007B4E            _memcpyb:
29703                                           !BCC_EOS
29704                                           ! 4125   Bit16u doffset;
29705                                           !BCC_EOS
29706                                           ! 4126   Bit16u sseg;
29707                                           !BCC_EOS
29708                                           ! 4127   Bit16u soffset;
29709                                           !BCC_EOS
29710                                           ! 4128   Bit16u count;
29711                                           !BCC_EOS
29712                                           ! 4129 {
29713                                           ! 4130 #asm
29714                                           !BCC_ASM
29715                       0000000A            _memcpyb.count	set	$A
29716                       00000006            _memcpyb.sseg	set	6
29717                       00000008            _memcpyb.soffset	set	8
29718                       00000002            _memcpyb.dseg	set	2
29719                       00000004            _memcpyb.doffset	set	4
29720 7B4E           55                           push bp
29721 7B4F           89E5                         mov bp, sp
29722 7B51           50                             push ax
29723 7B52           51                             push cx
29724 7B53           06                             push es
29725 7B54           57                             push di
29726 7B55           1E                             push ds
29727 7B56           56                             push si
29728 7B57           8B4E         0C                mov cx, 12[bp] ; count
29729 7B5A           83F9                   00      cmp cx, #0x0000
29730 7B5D           74           17                je memcpyb_end
29731 7B5F           8B46         04                mov ax, 4[bp] ; dsegment
29732 7B62           8EC0                           mov es, ax
29733 7B64           8B46         06                mov ax, 6[bp] ; doffset
29734 7B67           89C7                           mov di, ax
29735 7B69           8B46         08                mov ax, 8[bp] ; ssegment
29736 7B6C           8ED8                           mov ds, ax
29737 7B6E           8B46         0A                mov ax, 10[bp] ; soffset
29738 7B71           89C6                           mov si, ax
29739 7B73           FC                             cld
29740 7B74           F3                             rep
29741 7B75           A4                              movsb
29742                       00007B76            memcpyb_end:
29743 7B76           5E                             pop si
29744 7B77           1F                             pop ds
29745 7B78           5F                             pop di
29746 7B79           07                             pop es
29747 7B7A           59                             pop cx
29748 7B7B           58                             pop ax
29749 7B7C           5D                           pop bp
29750                                           ! 4161 endasm
29751                                           !BCC_ENDASM
29752                                           ! 4162 }
29753 7B7D           C3                         ret
29754                                           ! 4163 static void memcpyw(dseg,doffset,sseg,soffset,count)
29755                                           ! 4164   Bit16u dseg;
29756                       00007B7E            _memcpyw:
29757                                           !BCC_EOS
29758                                           ! 4165   Bit16u doffset;
29759                                           !BCC_EOS
29760                                           ! 4166   Bit16u sseg;
29761                                           !BCC_EOS
29762                                           ! 4167   Bit16u soffset;
29763                                           !BCC_EOS
29764                                           ! 4168   Bit16u count;
29765                                           !BCC_EOS
29766                                           ! 4169 {
29767                                           ! 4170 #asm
29768                                           !BCC_ASM
29769                       0000000A            _memcpyw.count	set	$A
29770                       00000006            _memcpyw.sseg	set	6
29771                       00000008            _memcpyw.soffset	set	8
29772                       00000002            _memcpyw.dseg	set	2
29773                       00000004            _memcpyw.doffset	set	4
29774 7B7E           55                           push bp
29775 7B7F           89E5                         mov bp, sp
29776 7B81           50                             push ax
29777 7B82           51                             push cx
29778 7B83           06                             push es
29779 7B84           57                             push di
29780 7B85           1E                             push ds
29781 7B86           56                             push si
29782 7B87           8B4E         0C                mov cx, 12[bp] ; count
29783 7B8A           83F9                   00      cmp cx, #0x0000
29784 7B8D           74           17                je memcpyw_end
29785 7B8F           8B46         04                mov ax, 4[bp] ; dsegment
29786 7B92           8EC0                           mov es, ax
29787 7B94           8B46         06                mov ax, 6[bp] ; doffset
29788 7B97           89C7                           mov di, ax
29789 7B99           8B46         08                mov ax, 8[bp] ; ssegment
29790 7B9C           8ED8                           mov ds, ax
29791 7B9E           8B46         0A                mov ax, 10[bp] ; soffset
29792 7BA1           89C6                           mov si, ax
29793 7BA3           FC                             cld
29794 7BA4           F3                             rep
29795 7BA5           A5                              movsw
29796                       00007BA6            memcpyw_end:
29797 7BA6           5E                             pop si
29798 7BA7           1F                             pop ds
29799 7BA8           5F                             pop di
29800 7BA9           07                             pop es
29801 7BAA           59                             pop cx
29802 7BAB           58                             pop ax
29803 7BAC           5D                           pop bp
29804                                           ! 4201 endasm
29805                                           !BCC_ENDASM
29806                                           ! 4202 }
29807 7BAD           C3                         ret
29808                                           ! 4203 static Bit8u
29809                                           ! 4204 read_byte(seg, offset)
29810                                           ! 4205   Bit16u seg;
29811                       00007BAE            _read_byte:
29812                                           !BCC_EOS
29813                                           ! 4206   Bit16u offset;
29814                                           !BCC_EOS
29815                                           ! 4207 {
29816                                           ! 4208 #asm
29817                                           !BCC_ASM
29818                       00000002            _read_byte.seg	set	2
29819                       00000004            _read_byte.offset	set	4
29820 7BAE           55                           push bp
29821 7BAF           89E5                         mov bp, sp
29822 7BB1           53                             push bx
29823 7BB2           1E                             push ds
29824 7BB3           8B46         04                mov ax, 4[bp] ; segment
29825 7BB6           8ED8                           mov ds, ax
29826 7BB8           8B5E         06                mov bx, 6[bp] ; offset
29827 7BBB           8A07                           mov al, [bx]
29828                                               ;; al = return value (byte)
29829 7BBD           1F                             pop ds
29830 7BBE           5B                             pop bx
29831 7BBF           5D                           pop bp
29832                                           ! 4221 endasm
29833                                           !BCC_ENDASM
29834                                           ! 4222 }
29835 7BC0           C3                         ret
29836                                           ! 4223 static Bit16u
29837                                           ! 4224 read_word(seg, offset)
29838                                           ! 4225   Bit16u seg;
29839                       00007BC1            _read_word:
29840                                           !BCC_EOS
29841                                           ! 4226   Bit16u offset;
29842                                           !BCC_EOS
29843                                           ! 4227 {
29844                                           ! 4228 #asm
29845                                           !BCC_ASM
29846                       00000002            _read_word.seg	set	2
29847                       00000004            _read_word.offset	set	4
29848 7BC1           55                           push bp
29849 7BC2           89E5                         mov bp, sp
29850 7BC4           53                             push bx
29851 7BC5           1E                             push ds
29852 7BC6           8B46         04                mov ax, 4[bp] ; segment
29853 7BC9           8ED8                           mov ds, ax
29854 7BCB           8B5E         06                mov bx, 6[bp] ; offset
29855 7BCE           8B07                           mov ax, [bx]
29856                                               ;; ax = return value (word)
29857 7BD0           1F                             pop ds
29858 7BD1           5B                             pop bx
29859 7BD2           5D                           pop bp
29860                                           ! 4241 endasm
29861                                           !BCC_ENDASM
29862                                           ! 4242 }
29863 7BD3           C3                         ret
29864                                           ! 4243 static void
29865                                           ! 4244 write_byte(seg, offset, data)
29866                                           ! 4245   Bit16u seg;
29867                       00007BD4            _write_byte:
29868                                           !BCC_EOS
29869                                           ! 4246   Bit16u offset;
29870                                           !BCC_EOS
29871                                           ! 4247   Bit8u data;
29872                                           !BCC_EOS
29873                                           ! 4248 {
29874                                           ! 4249 #asm
29875                                           !BCC_ASM
29876                       00000002            _write_byte.seg	set	2
29877                       00000006            _write_byte.data	set	6
29878                       00000004            _write_byte.offset	set	4
29879 7BD4           55                           push bp
29880 7BD5           89E5                         mov bp, sp
29881 7BD7           50                             push ax
29882 7BD8           53                             push bx
29883 7BD9           1E                             push ds
29884 7BDA           8B46         04                mov ax, 4[bp] ; segment
29885 7BDD           8ED8                           mov ds, ax
29886 7BDF           8B5E         06                mov bx, 6[bp] ; offset
29887 7BE2           8A46         08                mov al, 8[bp] ; data byte
29888 7BE5           8807                           mov [bx], al ; write data byte
29889 7BE7           1F                             pop ds
29890 7BE8           5B                             pop bx
29891 7BE9           58                             pop ax
29892 7BEA           5D                           pop bp
29893                                           ! 4264 endasm
29894                                           !BCC_ENDASM
29895                                           ! 4265 }
29896 7BEB           C3                         ret
29897                                           ! 4266 static void
29898                                           ! 4267 write_word(seg, offset, data)
29899                                           ! 4268   Bit16u seg;
29900                       00007BEC            _write_word:
29901                                           !BCC_EOS
29902                                           ! 4269   Bit16u offset;
29903                                           !BCC_EOS
29904                                           ! 4270   Bit16u data;
29905                                           !BCC_EOS
29906                                           ! 4271 
29907                                           ! 4271 {
29908                                           ! 4272 #asm
29909                                           !BCC_ASM
29910                       00000002            _write_word.seg	set	2
29911                       00000006            _write_word.data	set	6
29912                       00000004            _write_word.offset	set	4
29913 7BEC           55                           push bp
29914 7BED           89E5                         mov bp, sp
29915 7BEF           50                             push ax
29916 7BF0           53                             push bx
29917 7BF1           1E                             push ds
29918 7BF2           8B46         04                mov ax, 4[bp] ; segment
29919 7BF5           8ED8                           mov ds, ax
29920 7BF7           8B5E         06                mov bx, 6[bp] ; offset
29921 7BFA           8B46         08                mov ax, 8[bp] ; data word
29922 7BFD           8907                           mov [bx], ax ; write data word
29923 7BFF           1F                             pop ds
29924 7C00           5B                             pop bx
29925 7C01           58                             pop ax
29926 7C02           5D                           pop bp
29927                                           ! 4287 endasm
29928                                           !BCC_ENDASM
29929                                           ! 4288 }
29930 7C03           C3                         ret
29931                                           ! 4289  Bit8u
29932                                           ! 4290 inb(port)
29933                                           ! 4291   Bit16u port;
29934                                           export	_inb
29935                       00007C04            _inb:
29936                                           !BCC_EOS
29937                                           ! 4292 {
29938                                           ! 4293 #asm
29939                                           !BCC_ASM
29940                       00000002            _inb.port	set	2
29941 7C04           55                           push bp
29942 7C05           89E5                         mov bp, sp
29943 7C07           52                             push dx
29944 7C08           8B56         04                mov dx, 4[bp]
29945 7C0B           EC                             in al, dx
29946 7C0C           5A                             pop dx
29947 7C0D           5D                           pop bp
29948                                           ! 4301 endasm
29949                                           !BCC_ENDASM
29950                                           ! 4302 }
29951 7C0E           C3                         ret
29952                                           ! 4303   Bit16u
29953                                           ! 4304 inw(port)
29954                                           ! 4305   Bit16u port;
29955                                           export	_inw
29956                       00007C0F            _inw:
29957                                           !BCC_EOS
29958                                           ! 4306 {
29959                                           ! 4307 #asm
29960                                           !BCC_ASM
29961                       00000002            _inw.port	set	2
29962 7C0F           55                           push bp
29963 7C10           89E5                         mov bp, sp
29964 7C12           52                             push dx
29965 7C13           8B56         04                mov dx, 4[bp]
29966 7C16           ED                             in ax, dx
29967 7C17           5A                             pop dx
29968 7C18           5D                           pop bp
29969                                           ! 4315 endasm
29970                                           !BCC_ENDASM
29971                                           ! 4316 }
29972 7C19           C3                         ret
29973                                           ! 4317   void
29974                                           ! 4318 outb(port, val)
29975                                           ! 4319   Bit16u port;
29976                                           export	_outb
29977                       00007C1A            _outb:
29978                                           !BCC_EOS
29979                                           ! 4320   Bit8u val;
29980                                           !BCC_EOS
29981                                           ! 4321 {
29982                                           ! 4322 #asm
29983                                           !BCC_ASM
29984                       00000004            _outb.val	set	4
29985                       00000002            _outb.port	set	2
29986 7C1A           55                           push bp
29987 7C1B           89E5                         mov bp, sp
29988 7C1D           50                             push ax
29989 7C1E           52                             push dx
29990 7C1F           8B56         04                mov dx, 4[bp]
29991 7C22           8A46         06                mov al, 6[bp]
29992 7C25           EE                             out dx, al
29993 7C26           5A                             pop dx
29994 7C27           58                             pop ax
29995 7C28           5D                           pop bp
29996                                           ! 4333 endasm
29997                                           !BCC_ENDASM
29998                                           ! 4334 }
29999 7C29           C3                         ret
30000                                           ! 4335   void
30001                                           ! 4336 outw(port, val)
30002                                           ! 4337   Bit16u port;
30003                                           export	_outw
30004                       00007C2A            _outw:
30005                                           !BCC_EOS
30006                                           ! 4338   Bit16u val;
30007                                           !BCC_EOS
30008                                           ! 4339 {
30009                                           ! 4340 #asm
30010                                           !BCC_ASM
30011                       00000004            _outw.val	set	4
30012                       00000002            _outw.port	set	2
30013 7C2A           55                           push bp
30014 7C2B           89E5                         mov bp, sp
30015 7C2D           50                             push ax
30016 7C2E           52                             push dx
30017 7C2F           8B56         04                mov dx, 4[bp]
30018 7C32           8B46         06                mov ax, 6[bp]
30019 7C35           EF                             out dx, ax
30020 7C36           5A                             pop dx
30021 7C37           58                             pop ax
30022 7C38           5D                           pop bp
30023                                           ! 4351 endasm
30024                                           !BCC_ENDASM
30025                                           ! 4352 }
30026 7C39           C3                         ret
30027                                           ! 4353 Bit16u get_SS()
30028                                           ! 4354 {
30029                                           export	_get_SS
30030                       00007C3A            _get_SS:
30031                                           ! 4355 #asm
30032                                           !BCC_ASM
30033 7C3A           8CD0                         mov ax, ss
30034                                           ! 4357 endasm
30035                                           !BCC_ENDASM
30036                                           ! 4358 }
30037 7C3C           C3                         ret
30038                                           ! 4359 void printf(s)
30039                                           ! 4360   Bit8u *s;
30040                                           export	_printf
30041                       00007C3D            _printf:
30042                                           !BCC_EOS
30043                                           ! 4361 {
30044                                           ! 4362   Bit8u c, format_char;
30045                                           !BCC_EOS
30046                                           ! 4363   Boolean in_format;
30047                                           !BCC_EOS
30048                                           ! 4364   unsigned format_width, i;
30049                                           !BCC_EOS
30050                                           ! 4365   Bit16u *arg_ptr;
30051                                           !BCC_EOS
30052                                           ! 4366   Bit16u arg_seg, arg, digit, nibble, shift_count;
30053                                           !BCC_EOS
30054                                           ! 4367   arg_ptr = &s;
30055 7C3D           55                         push	bp
30056 7C3E           89E5                       mov	bp,sp
30057 7C40           83C4                   EC  add	sp,*-$14
30058                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30059 7C43           8D5E         04            lea	bx,4[bp]
30060 7C46           895E         F6            mov	-$A[bp],bx
30061                                           !BCC_EOS
30062                                           ! 4368   arg_seg = get_SS();
30063                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30064 7C49           E8         FFEE            call	_get_SS
30065                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30066 7C4C           8946         F4            mov	-$C[bp],ax
30067                                           !BCC_EOS
30068                                           ! 4369   in_format = 0;
30069                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30070 7C4F           31C0                       xor	ax,ax
30071 7C51           8946         FC            mov	-4[bp],ax
30072                                           !BCC_EOS
30073                                           ! 4370   format_width = 0;
30074                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30075 7C54           31C0                       xor	ax,ax
30076 7C56           8946         FA            mov	-6[bp],ax
30077                                           !BCC_EOS
30078                                           ! 4371   while (c = read_byte(0xc000, s)) {
30079 7C59           E9         0104            br 	.29F
30080                       00007C5C            .2A0:
30081                                           ! 4372     if ( c == '%' ) {
30082                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30083 7C5C           8A46         FF            mov	al,-1[bp]
30084 7C5F           3C                     25  cmp	al,*$25
30085 7C61           75           0E            jne 	.2A1
30086                       00007C63            .2A2:
30087                                           ! 4373       in_format = 1;
30088                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30089 7C63           B8                   0001  mov	ax,*1
30090 7C66           8946         FC            mov	-4[bp],ax
30091                                           !BCC_EOS
30092                                           ! 4374       format_width = 0;
30093                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30094 7C69           31C0                       xor	ax,ax
30095 7C6B           8946         FA            mov	-6[bp],ax
30096                                           !BCC_EOS
30097                                           ! 4375       }
30098                                           ! 4376     else if (in_format) {
30099 7C6E           E9         00E8            br 	.2A3
30100                       00007C71            .2A1:
30101 7C71           8B46         FC            mov	ax,-4[bp]
30102 7C74           85C0                       test	ax,ax
30103 7C76         0F84         00CF            beq 	.2A4
30104                       00007C7A            .2A5:
30105                                           ! 4377       if ( (c>='0') && (c<='9') ) {
30106                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30107 7C7A           8A46         FF            mov	al,-1[bp]
30108 7C7D           3C                     30  cmp	al,*$30
30109 7C7F           72           28            jb  	.2A6
30110                       00007C81            .2A8:
30111                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30112 7C81           8A46         FF            mov	al,-1[bp]
30113 7C84           3C                     39  cmp	al,*$39
30114 7C86           77           21            ja  	.2A6
30115                       00007C88            .2A7:
30116                                           ! 4378         format_width = (format_width * 10) + (c - '0');
30117                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30118 7C88           8A46         FF            mov	al,-1[bp]
30119 7C8B           30E4                       xor	ah,ah
30120 7C8D           05                   FFD0  add	ax,*-$30
30121 7C90           50                         push	ax
30122                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30123 7C91           8B46         FA            mov	ax,-6[bp]
30124 7C94           89C2                       mov	dx,ax
30125 7C96           D1E0                       shl	ax,*1
30126 7C98           D1E0                       shl	ax,*1
30127 7C9A           01D0                       add	ax,dx
30128 7C9C           D1E0                       shl	ax,*1
30129                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30130 7C9E           0346         EA            add	ax,-$16[bp]
30131 7CA1           44                         inc	sp
30132 7CA2           44                         inc	sp
30133                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30134 7CA3           8946         FA            mov	-6[bp],ax
30135                                           !BCC_EOS
30136                                           ! 4379         }
30137                                           ! 4380       else if (c == 'x') {
30138 7CA6           E9         009E            br 	.2A9
30139                       00007CA9            .2A6:
30140                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30141 7CA9           8A46         FF            mov	al,-1[bp]
30142 7CAC           3C                     78  cmp	al,*$78
30143 7CAE         0F85         0095            bne 	.2AA
30144                       00007CB2            .2AB:
30145                                           ! 4381         arg_ptr++;
30146                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30147 7CB2           8B5E         F6            mov	bx,-$A[bp]
30148 7CB5           43                         inc	bx
30149 7CB6           43                         inc	bx
30150 7CB7           895E         F6            mov	-$A[bp],bx
30151                                           !BCC_EOS
30152                                           ! 4382         arg = read_word(arg_seg, arg_ptr);
30153                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30154 7CBA           FF76         F6            push	-$A[bp]
30155                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30156 7CBD           FF76         F4            push	-$C[bp]
30157                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30158 7CC0           E8         FEFE            call	_read_word
30159 7CC3           83C4                   04  add	sp,*4
30160                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30161 7CC6           8946         F2            mov	-$E[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4383         if (format_width == 0)
30164                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30165 7CC9           8B46         FA            mov	ax,-6[bp]
30166 7CCC           85C0                       test	ax,ax
30167 7CCE           75           06            jne 	.2AC
30168                       00007CD0            .2AD:
30169                                           ! 4384           format_width = 4;
30170                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30171 7CD0           B8                   0004  mov	ax,*4
30172 7CD3           8946         FA            mov	-6[bp],ax
30173                                           !BCC_EOS
30174                                           ! 4385         i = 0;
30175                       00007CD6            .2AC:
30176                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30177 7CD6           31C0                       xor	ax,ax
30178 7CD8           8946         F8            mov	-8[bp],ax
30179                                           !BCC_EOS
30180                                           ! 4386         digit = format_width - 1;
30181                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30182 7CDB           8B46         FA            mov	ax,-6[bp]
30183                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30184 7CDE           48                         dec	ax
30185 7CDF           8946         F0            mov	-$10[bp],ax
30186                                           !BCC_EOS
30187                                           ! 4387         for (i=0; i<format_width; i++) {
30188                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30189 7CE2           31C0                       xor	ax,ax
30190 7CE4           8946         F8            mov	-8[bp],ax
30191                                           !BCC_EOS
30192                                           !BCC_EOS
30193 7CE7           EB           51            jmp .2B0
30194                       00007CE9            .2B1:
30195                                           ! 4388           nibble = (arg >> (4 * digit)) & 0x000f;
30196                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30197                                           ! Debug: expression subtree swapping
30198 7CE9           8B46         F0            mov	ax,-$10[bp]
30199 7CEC           D1E0                       shl	ax,*1
30200 7CEE           D1E0                       shl	ax,*1
30201                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30202 7CF0           89C3                       mov	bx,ax
30203 7CF2           8B46         F2            mov	ax,-$E[bp]
30204 7CF5           89D9                       mov	cx,bx
30205 7CF7           D3E8                       shr	ax,cl
30206                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30207 7CF9           24                     0F  and	al,*$F
30208                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30209 7CFB           30E4                       xor	ah,ah
30210 7CFD           8946         EE            mov	-$12[bp],ax
30211                                           !BCC_EOS
30212                                           ! 4389           if (nibble <= 9)
30213                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30214 7D00           8B46         EE            mov	ax,-$12[bp]
30215 7D03           3D                   0009  cmp	ax,*9
30216 7D06           77           13            ja  	.2B2
30217                       00007D08            .2B3:
30218                                           ! 4390             outb(0x0500, nibble + '0');
30219                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30220 7D08           8B46         EE            mov	ax,-$12[bp]
30221                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30222 7D0B           05                   0030  add	ax,*$30
30223 7D0E           50                         push	ax
30224                                           ! Debug: list int = const $500 (used reg = )
30225 7D0F           B8                   0500  mov	ax,#$500
30226 7D12           50                         push	ax
30227                                           ! Debug: func () void = outb+0 (used reg = )
30228 7D13           E8         FF04            call	_outb
30229 7D16           83C4                   04  add	sp,*4
30230                                           !BCC_EOS
30231                                           ! 4391           else
30232                                           ! 4392             outb(0x0500, (nibble - 10) + 'A');
30233 7D19           EB           11            jmp .2B4
30234                       00007D1B            .2B2:
30235                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30236 7D1B           8B46         EE            mov	ax,-$12[bp]
30237                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30238                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30239 7D1E           05                   0037  add	ax,*$37
30240 7D21           50                         push	ax
30241                                           ! Debug: list int = const $500 (used reg = )
30242 7D22           B8                   0500  mov	ax,#$500
30243 7D25           50                         push	ax
30244                                           ! Debug: func () void = outb+0 (used reg = )
30245 7D26           E8         FEF1            call	_outb
30246 7D29           83C4                   04  add	sp,*4
30247                                           !BCC_EOS
30248                                           ! 4393           digit--;
30249                       00007D2C            .2B4:
30250                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30251 7D2C           8B46         F0            mov	ax,-$10[bp]
30252 7D2F           48                         dec	ax
30253 7D30           8946         F0            mov	-$10[bp],ax
30254                                           !BCC_EOS
30255                                           ! 4394           }
30256                                           ! 4395         in_format = 0;
30257                       00007D33            .2AF:
30258                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30259 7D33           8B46         F8            mov	ax,-8[bp]
30260 7D36           40                         inc	ax
30261 7D37           8946         F8            mov	-8[bp],ax
30262                       00007D3A            .2B0:
30263                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30264 7D3A           8B46         F8            mov	ax,-8[bp]
30265 7D3D           3B46         FA            cmp	ax,-6[bp]
30266 7D40           72           A7            jb 	.2B1
30267                       00007D42            .2B5:
30268                       00007D42            .2AE:
30269                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30270 7D42           31C0                       xor	ax,ax
30271 7D44           8946         FC            mov	-4[bp],ax
30272                                           !BCC_EOS
30273                                           ! 4396         }
30274                                           ! 4397       }
30275                       00007D47            .2AA:
30276                       00007D47            .2A9:
30277                                           ! 4398     else {
30278 7D47           EB           10            jmp .2B6
30279                       00007D49            .2A4:
30280                                           ! 4399       outb(0x0500, c);
30281                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30282 7D49           8A46         FF            mov	al,-1[bp]
30283 7D4C           30E4                       xor	ah,ah
30284 7D4E           50                         push	ax
30285                                           ! Debug: list int = const $500 (used reg = )
30286 7D4F           B8                   0500  mov	ax,#$500
30287 7D52           50                         push	ax
30288                                           ! Debug: func () void = outb+0 (used reg = )
30289 7D53           E8         FEC4            call	_outb
30290 7D56           83C4                   04  add	sp,*4
30291                                           !BCC_EOS
30292                                           ! 4400       }
30293                                           ! 4401     s ++;
30294                       00007D59            .2B6:
30295                       00007D59            .2A3:
30296                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30297 7D59           8B5E         04            mov	bx,4[bp]
30298 7D5C           43                         inc	bx
30299 7D5D           895E         04            mov	4[bp],bx
30300                                           !BCC_EOS
30301                                           ! 4402     }
30302                                           ! 4403 }
30303                       00007D60            .29F:
30304                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30305 7D60           FF76         04            push	4[bp]
30306                                           ! Debug: list unsigned int = const $C000 (used reg = )
30307 7D63           B8                   C000  mov	ax,#$C000
30308 7D66           50                         push	ax
30309                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30310 7D67           E8         FE44            call	_read_byte
30311 7D6A           83C4                   04  add	sp,*4
30312                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30313 7D6D           8846         FF            mov	-1[bp],al
30314 7D70           84C0                       test	al,al
30315 7D72         0F85         FEE6            bne 	.2A0
30316                       00007D76            .2B7:
30317                       00007D76            .29E:
30318 7D76           89EC                       mov	sp,bp
30319 7D78           5D                         pop	bp
30320 7D79           C3                         ret
30321                                           ! 4404 #asm
30322                                           !BCC_ASM
30323                       00000002            _printf.s	set	2
30324                                             ; get LFB address from PCI
30325                                             ; in - ax: PCI device vendor
30326                                             ; out - ax: LFB address (high 16 bit)
30327                                             ;; NOTE - may be called in protected mode
30328                       00007D7A            _pci_get_lfb_addr:
30329 7D7A           53                           push bx
30330 7D7B           51                           push cx
30331 7D7C           52                           push dx
30332 7D7D     66    50                           push eax
30333 7D7F           89C3                           mov bx, ax
30334 7D81           31C9                           xor cx, cx
30335 7D83           B2                     00      mov dl, #0x00
30336 7D85           E8         003D                call pci_read_reg
30337 7D88           3D                   FFFF      cmp ax, #0xffff
30338 7D8B           74           12                jz pci_get_lfb_addr_fail
30339                       00007D8D             pci_get_lfb_addr_next_dev:
30340 7D8D           B2                     00      mov dl, #0x00
30341 7D8F           E8         0033                call pci_read_reg
30342 7D92           39D8                           cmp ax, bx ;; check vendor
30343 7D94           74           0D                jz pci_get_lfb_addr_found
30344 7D96           83C1                   08      add cx, #0x8
30345 7D99           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30346 7D9D           72           EE                jb pci_get_lfb_addr_next_dev
30347                       00007D9F             pci_get_lfb_addr_fail:
30348 7D9F           31D2                           xor dx, dx ;; no LFB
30349 7DA1           EB           1A                jmp pci_get_lfb_addr_return
30350                       00007DA3             pci_get_lfb_addr_found:
30351 7DA3           B2                     10      mov dl, #0x10 ;; I/O space #0
30352 7DA5           E8         001D                call pci_read_reg
30353 7DA8           A9                   FFF1      test ax, #0xfff1
30354 7DAB           74           0A                jz pci_get_lfb_addr_success
30355 7DAD           B2                     14      mov dl, #0x14 ;; I/O space #1
30356 7DAF           E8         0013                call pci_read_reg
30357 7DB2           A9                   FFF1      test ax, #0xfff1
30358 7DB5           75           E8                jnz pci_get_lfb_addr_fail
30359                       00007DB7             pci_get_lfb_addr_success:
30360 7DB7     66    C1E8                   10      shr eax, #16
30361 7DBB           89C2                           mov dx, ax ;; LFB address
30362                       00007DBD             pci_get_lfb_addr_return:
30363 7DBD     66    58                           pop eax
30364 7DBF           89D0                         mov ax, dx
30365 7DC1           5A                           pop dx
30366 7DC2           59                           pop cx
30367 7DC3           5B                           pop bx
30368 7DC4           C3                           ret
30369                                             ; read PCI register
30370                                             ; in - cx: device/function
30371                                             ; in - dl: register
30372                                             ; out - eax: value
30373                       00007DC5            pci_read_reg:
30374 7DC5     66    B8               00800000    mov eax, #0x00800000
30375 7DCB           89C8                         mov ax, cx
30376 7DCD     66    C1E0                   08    shl eax, #8
30377 7DD1           88D0                         mov al, dl
30378 7DD3           BA                   0CF8    mov dx, #0xcf8
30379 7DD6     66    EF                           out dx, eax
30380 7DD8           80C2                   04    add dl, #4
30381 7DDB     66    ED                           in eax, dx
30382 7DDD           C3                           ret
30383                                           ! 4464 endasm
30384                                           !BCC_ENDASM
30385                                           ! 4465 static ModeInfoListItem mode_info_list[]=
30386                                           ! Register BX used in function printf
30387                                           ! 4466 {
30388                                           
30389                       00007DDE            _mode_info_list:
30390                                           ! 4467 { 0x0100,
30391 7DDE                      0100            .word	$100
30392                                           ! 4468 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30393 7DE0                      009B            .word	$9B
30394                                           ! 4469                           0x01 | 0x02 | 0x04,
30395 7DE2                        07            .byte	7
30396                                           ! 4470                           0,
30397 7DE3                        00            .byte	0
30398                                           ! 4471                           64,
30399 7DE4                      0040            .word	$40
30400                                           ! 4472                    64,
30401 7DE6                      0040            .word	$40
30402                                           ! 4473                        0xA000,
30403 7DE8                      A000            .word	$A000
30404                                           ! 4474                        0x0000,
30405 7DEA                      0000            .word	0
30406                                           ! 4475                       0,
30407 7DEC                      0000            .word	0
30408 7DEE                      0000            .word	0
30409                                           ! 4476                             640,
30410 7DF0                      0280            .word	$280
30411                                           ! 4477                        640,
30412 7DF2                      0280            .word	$280
30413                                           ! 4478                        400,
30414 7DF4                      0190            .word	$190
30415                                           ! 4479                      8,
30416 7DF6                        08            .byte	8
30417                                           ! 4480                      16,
30418 7DF7                        10            .byte	$10
30419                                           ! 4481                           1,
30420 7DF8                        01            .byte	1
30421                                           ! 4482                         8,
30422 7DF9                        08            .byte	8
30423                                           ! 4483                          4,
30424 7DFA                        04            .byte	4
30425                                           ! 4484                        0x04,
30426 7DFB                        04            .byte	4
30427                                           ! 4485                     0,
30428 7DFC                        00            .byte	0
30429                                           ! 4486                               64,
30430 7DFD                        40            .byte	$40
30431                                           ! 4487                          0,
30432 7DFE                        00            .byte	0
30433                                           ! 4488                        0,
30434 7DFF                        00            .byte	0
30435                                           ! 4489                             0,
30436 7E00                        00            .byte	0
30437                                           ! 4490                          0,
30438 7E01                        00            .byte	0
30439                                           ! 4491                               0,
30440 7E02                        00            .byte	0
30441                                           ! 4492                         0,
30442 7E03                        00            .byte	0
30443                                           ! 4493                           
30444                                           ! 4493    0,
30445 7E04                        00            .byte	0
30446                                           ! 4494                         0,
30447 7E05                        00            .byte	0
30448                                           ! 4495                              0,
30449 7E06                        00            .byte	0
30450                                           ! 4496                                0,
30451 7E07                        00            .byte	0
30452                                           ! 4497                        0xE0000000,
30453 7E08                      0000            .word	0
30454 7E0A                      E000            .word	$E000
30455                                           ! 4498                               0,
30456 7E0C                      0000            .word	0
30457 7E0E                      0000            .word	0
30458                                           ! 4499                             0,
30459 7E10                      0000            .word	0
30460                                           ! 4500                                640,
30461 7E12                      0280            .word	$280
30462                                           ! 4501                             0,
30463 7E14                        00            .byte	0
30464                                           ! 4502                             0,
30465 7E15                        00            .byte	0
30466                                           ! 4503                           0,
30467 7E16                        00            .byte	0
30468                                           ! 4504                                0,
30469 7E17                        00            .byte	0
30470                                           ! 4505                             0,
30471 7E18                        00            .byte	0
30472                                           ! 4506                                  0,
30473 7E19                        00            .byte	0
30474                                           ! 4507                            0,
30475 7E1A                        00            .byte	0
30476                                           ! 4508                                 0,
30477 7E1B                        00            .byte	0
30478                                           ! 4509                            0,
30479 7E1C                        00            .byte	0
30480                                           ! 4510                                 0,
30481 7E1D                        00            .byte	0
30482                                           ! 4511                          0,
30483 7E1E                      0000            .word	0
30484 7E20                      0000            .word	0
30485                                           ! 4512 } },
30486                                           ! 4513 { 0x0101,
30487 7E22                      0101            .word	$101
30488                                           ! 4514 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30489 7E24                      009B            .word	$9B
30490                                           ! 4515                           0x01 | 0x02 | 0x04,
30491 7E26                        07            .byte	7
30492                                           ! 4516                           0,
30493 7E27                        00            .byte	0
30494                                           ! 4517                           64,
30495 7E28                      0040            .word	$40
30496                                           ! 4518                    64,
30497 7E2A                      0040            .word	$40
30498                                           ! 4519                        0xA000,
30499 7E2C                      A000            .word	$A000
30500                                           ! 4520                        0x0000,
30501 7E2E                      0000            .word	0
30502                                           ! 4521                       0,
30503 7E30                      0000            .word	0
30504 7E32                      0000            .word	0
30505                                           ! 4522                             640,
30506 7E34                      0280            .word	$280
30507                                           ! 4523                        640,
30508 7E36                      0280            .word	$280
30509                                           ! 4524                        480,
30510 7E38                      01E0            .word	$1E0
30511                                           ! 4525                      8,
30512 7E3A                        08            .byte	8
30513                                           ! 4526                      16,
30514 7E3B                        10            .byte	$10
30515                                           ! 4527                           1,
30516 7E3C                        01            .byte	1
30517                                           ! 4528                         8,
30518 7E3D                        08            .byte	8
30519                                           ! 4529                          5,
30520 7E3E                        05            .byte	5
30521                                           ! 4530                        0x04,
30522 7E3F                        04            .byte	4
30523                                           ! 4531                     0,
30524 7E40                        00            .byte	0
30525                                           ! 4532                               53,
30526 7E41                        35            .byte	$35
30527                                           ! 4533                          0,
30528 7E42                        00            .byte	0
30529                                           ! 4534                        0,
30530 7E43                        00            .byte	0
30531                                           ! 4535                             0,
30532 7E44                        00            .byte	0
30533                                           ! 4536                          0,
30534 7E45                        00            .byte	0
30535                                           ! 4537                               0,
30536 7E46                        00            .byte	0
30537                                           ! 4538                         0,
30538 7E47                        00            .byte	0
30539                                           ! 4539                              0,
30540 7E48                        00            .byte	0
30541                                           ! 4540                         0,
30542 7E49                        00            .byte	0
30543                                           ! 4541                              0,
30544 7E4A                        00            .byte	0
30545                                           ! 4542                                0,
30546 7E4B                        00            .byte	0
30547                                           ! 4543                        0xE0000000,
30548 7E4C                      0000            .word	0
30549 7E4E                      E000            .word	$E000
30550                                           ! 4544                               0,
30551 7E50                      0000            .word	0
30552 7E52                      0000            .word	0
30553                                           ! 4545                             0,
30554 7E54                      0000            .word	0
30555                                           ! 4546                                640,
30556 7E56                      0280            .word	$280
30557                                           ! 4547                             0,
30558 7E58                        00            .byte	0
30559                                           ! 4548                             0,
30560 7E59                        00            .byte	0
30561                                           ! 4549                           0,
30562 7E5A                        00            .byte	0
30563                                           ! 4550                                0,
30564 7E5B                        00            .byte	0
30565                                           ! 4551                             0,
30566 7E5C                        00            .byte	0
30567                                           ! 4552                                  0,
30568 7E5D                        00            .byte	0
30569                                           ! 4553                            0,
30570 7E5E                        00            .byte	0
30571                                           ! 4554                                 0,
30572 7E5F                        00            .byte	0
30573                                           ! 4555                            0,
30574 7E60                        00            .byte	0
30575                                           ! 4556                                 0,
30576 7E61                        00            .byte	0
30577                                           ! 4557                          0,
30578 7E62                      0000            .word	0
30579 7E64                      0000            .word	0
30580                                           ! 4558 } },
30581                                           ! 4559 { 0x0102,
30582 7E66                      0102            .word	$102
30583                                           ! 4560 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30584 7E68                      001F            .word	$1F
30585                                           ! 4561                           0x01 | 0x0
30586                                           ! 4561 2 | 0x04,
30587 7E6A                        07            .byte	7
30588                                           ! 4562                           0,
30589 7E6B                        00            .byte	0
30590                                           ! 4563                           64,
30591 7E6C                      0040            .word	$40
30592                                           ! 4564                    64,
30593 7E6E                      0040            .word	$40
30594                                           ! 4565                        0xA000,
30595 7E70                      A000            .word	$A000
30596                                           ! 4566                        0x0000,
30597 7E72                      0000            .word	0
30598                                           ! 4567                       0,
30599 7E74                      0000            .word	0
30600 7E76                      0000            .word	0
30601                                           ! 4568                             100,
30602 7E78                      0064            .word	$64
30603                                           ! 4569                        800,
30604 7E7A                      0320            .word	$320
30605                                           ! 4570                        600,
30606 7E7C                      0258            .word	$258
30607                                           ! 4571                      8,
30608 7E7E                        08            .byte	8
30609                                           ! 4572                      16,
30610 7E7F                        10            .byte	$10
30611                                           ! 4573                           4,
30612 7E80                        04            .byte	4
30613                                           ! 4574                         4,
30614 7E81                        04            .byte	4
30615                                           ! 4575                          1,
30616 7E82                        01            .byte	1
30617                                           ! 4576                        0x03,
30618 7E83                        03            .byte	3
30619                                           ! 4577                     0,
30620 7E84                        00            .byte	0
30621                                           ! 4578                               68,
30622 7E85                        44            .byte	$44
30623                                           ! 4579                          0,
30624 7E86                        00            .byte	0
30625                                           ! 4580                        0,
30626 7E87                        00            .byte	0
30627                                           ! 4581                             0,
30628 7E88                        00            .byte	0
30629                                           ! 4582                          0,
30630 7E89                        00            .byte	0
30631                                           ! 4583                               0,
30632 7E8A                        00            .byte	0
30633                                           ! 4584                         0,
30634 7E8B                        00            .byte	0
30635                                           ! 4585                              0,
30636 7E8C                        00            .byte	0
30637                                           ! 4586                         0,
30638 7E8D                        00            .byte	0
30639                                           ! 4587                              0,
30640 7E8E                        00            .byte	0
30641                                           ! 4588                                0,
30642 7E8F                        00            .byte	0
30643                                           ! 4589                        0,
30644 7E90                      0000            .word	0
30645 7E92                      0000            .word	0
30646                                           ! 4590                               0,
30647 7E94                      0000            .word	0
30648 7E96                      0000            .word	0
30649                                           ! 4591                             0,
30650 7E98                      0000            .word	0
30651                                           ! 4592                                100,
30652 7E9A                      0064            .word	$64
30653                                           ! 4593                             0,
30654 7E9C                        00            .byte	0
30655                                           ! 4594                             0,
30656 7E9D                        00            .byte	0
30657                                           ! 4595                           0,
30658 7E9E                        00            .byte	0
30659                                           ! 4596                                0,
30660 7E9F                        00            .byte	0
30661                                           ! 4597                             0,
30662 7EA0                        00            .byte	0
30663                                           ! 4598                                  0,
30664 7EA1                        00            .byte	0
30665                                           ! 4599                            0,
30666 7EA2                        00            .byte	0
30667                                           ! 4600                                 0,
30668 7EA3                        00            .byte	0
30669                                           ! 4601                            0,
30670 7EA4                        00            .byte	0
30671                                           ! 4602                                 0,
30672 7EA5                        00            .byte	0
30673                                           ! 4603                          0,
30674 7EA6                      0000            .word	0
30675 7EA8                      0000            .word	0
30676                                           ! 4604 } },
30677                                           ! 4605 { 0x0103,
30678 7EAA                      0103            .word	$103
30679                                           ! 4606 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30680 7EAC                      009B            .word	$9B
30681                                           ! 4607                           0x01 | 0x02 | 0x04,
30682 7EAE                        07            .byte	7
30683                                           ! 4608                           0,
30684 7EAF                        00            .byte	0
30685                                           ! 4609                           64,
30686 7EB0                      0040            .word	$40
30687                                           ! 4610                    64,
30688 7EB2                      0040            .word	$40
30689                                           ! 4611                        0xA000,
30690 7EB4                      A000            .word	$A000
30691                                           ! 4612                        0x0000,
30692 7EB6                      0000            .word	0
30693                                           ! 4613                       0,
30694 7EB8                      0000            .word	0
30695 7EBA                      0000            .word	0
30696                                           ! 4614                             800,
30697 7EBC                      0320            .word	$320
30698                                           ! 4615                        800,
30699 7EBE                      0320            .word	$320
30700                                           ! 4616                        600,
30701 7EC0                      0258            .word	$258
30702                                           ! 4617                      8,
30703 7EC2                        08            .byte	8
30704                                           ! 4618                      16,
30705 7EC3                        10            .byte	$10
30706                                           ! 4619                           1,
30707 7EC4                        01            .byte	1
30708                                           ! 4620                         8,
30709 7EC5                        08            .byte	8
30710                                           ! 4621                          8,
30711 7EC6                        08            .byte	8
30712                                           ! 4622                        0x04,
30713 7EC7                        04            .byte	4
30714                                           ! 4623                     0,
30715 7EC8                        00            .byte	0
30716                                           ! 4624                               33,
30717 7EC9                        21            .byte	$21
30718                                           ! 4625                          0,
30719 7ECA                        00            .byte	0
30720                                           ! 4626                        0,
30721 7ECB                        00            .byte	0
30722                                           ! 4627                             0,
30723 7ECC                        00            .byte	0
30724                                           ! 4628                          0,
30725 7ECD                        00            .byte	0
30726                                           ! 4629                               0,
30727 7ECE                        00            .byte	0
30728                                           ! 4630                         0,
30729 7ECF                        00            .byte	0
30730                                           ! 4631                              0
30731                                           ! 4631 ,
30732 7ED0                        00            .byte	0
30733                                           ! 4632                         0,
30734 7ED1                        00            .byte	0
30735                                           ! 4633                              0,
30736 7ED2                        00            .byte	0
30737                                           ! 4634                                0,
30738 7ED3                        00            .byte	0
30739                                           ! 4635                        0xE0000000,
30740 7ED4                      0000            .word	0
30741 7ED6                      E000            .word	$E000
30742                                           ! 4636                               0,
30743 7ED8                      0000            .word	0
30744 7EDA                      0000            .word	0
30745                                           ! 4637                             0,
30746 7EDC                      0000            .word	0
30747                                           ! 4638                                800,
30748 7EDE                      0320            .word	$320
30749                                           ! 4639                             0,
30750 7EE0                        00            .byte	0
30751                                           ! 4640                             0,
30752 7EE1                        00            .byte	0
30753                                           ! 4641                           0,
30754 7EE2                        00            .byte	0
30755                                           ! 4642                                0,
30756 7EE3                        00            .byte	0
30757                                           ! 4643                             0,
30758 7EE4                        00            .byte	0
30759                                           ! 4644                                  0,
30760 7EE5                        00            .byte	0
30761                                           ! 4645                            0,
30762 7EE6                        00            .byte	0
30763                                           ! 4646                                 0,
30764 7EE7                        00            .byte	0
30765                                           ! 4647                            0,
30766 7EE8                        00            .byte	0
30767                                           ! 4648                                 0,
30768 7EE9                        00            .byte	0
30769                                           ! 4649                          0,
30770 7EEA                      0000            .word	0
30771 7EEC                      0000            .word	0
30772                                           ! 4650 } },
30773                                           ! 4651 { 0x0104,
30774 7EEE                      0104            .word	$104
30775                                           ! 4652 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30776 7EF0                      001F            .word	$1F
30777                                           ! 4653                           0x01 | 0x02 | 0x04,
30778 7EF2                        07            .byte	7
30779                                           ! 4654                           0,
30780 7EF3                        00            .byte	0
30781                                           ! 4655                           64,
30782 7EF4                      0040            .word	$40
30783                                           ! 4656                    64,
30784 7EF6                      0040            .word	$40
30785                                           ! 4657                        0xA000,
30786 7EF8                      A000            .word	$A000
30787                                           ! 4658                        0x0000,
30788 7EFA                      0000            .word	0
30789                                           ! 4659                       0,
30790 7EFC                      0000            .word	0
30791 7EFE                      0000            .word	0
30792                                           ! 4660                             128,
30793 7F00                      0080            .word	$80
30794                                           ! 4661                        1024,
30795 7F02                      0400            .word	$400
30796                                           ! 4662                        768,
30797 7F04                      0300            .word	$300
30798                                           ! 4663                      8,
30799 7F06                        08            .byte	8
30800                                           ! 4664                      16,
30801 7F07                        10            .byte	$10
30802                                           ! 4665                           4,
30803 7F08                        04            .byte	4
30804                                           ! 4666                         4,
30805 7F09                        04            .byte	4
30806                                           ! 4667                          2,
30807 7F0A                        02            .byte	2
30808                                           ! 4668                        0x03,
30809 7F0B                        03            .byte	3
30810                                           ! 4669                     0,
30811 7F0C                        00            .byte	0
30812                                           ! 4670                               41,
30813 7F0D                        29            .byte	$29
30814                                           ! 4671                          0,
30815 7F0E                        00            .byte	0
30816                                           ! 4672                        0,
30817 7F0F                        00            .byte	0
30818                                           ! 4673                             0,
30819 7F10                        00            .byte	0
30820                                           ! 4674                          0,
30821 7F11                        00            .byte	0
30822                                           ! 4675                               0,
30823 7F12                        00            .byte	0
30824                                           ! 4676                         0,
30825 7F13                        00            .byte	0
30826                                           ! 4677                              0,
30827 7F14                        00            .byte	0
30828                                           ! 4678                         0,
30829 7F15                        00            .byte	0
30830                                           ! 4679                              0,
30831 7F16                        00            .byte	0
30832                                           ! 4680                                0,
30833 7F17                        00            .byte	0
30834                                           ! 4681                        0,
30835 7F18                      0000            .word	0
30836 7F1A                      0000            .word	0
30837                                           ! 4682                               0,
30838 7F1C                      0000            .word	0
30839 7F1E                      0000            .word	0
30840                                           ! 4683                             0,
30841 7F20                      0000            .word	0
30842                                           ! 4684                                128,
30843 7F22                      0080            .word	$80
30844                                           ! 4685                             0,
30845 7F24                        00            .byte	0
30846                                           ! 4686                             0,
30847 7F25                        00            .byte	0
30848                                           ! 4687                           0,
30849 7F26                        00            .byte	0
30850                                           ! 4688                                0,
30851 7F27                        00            .byte	0
30852                                           ! 4689                             0,
30853 7F28                        00            .byte	0
30854                                           ! 4690                                  0,
30855 7F29                        00            .byte	0
30856                                           ! 4691                            0,
30857 7F2A                        00            .byte	0
30858                                           ! 4692                                 0,
30859 7F2B                        00            .byte	0
30860                                           ! 4693                            0,
30861 7F2C                        00            .byte	0
30862                                           ! 4694                                 0,
30863 7F2D                        00            .byte	0
30864                                           ! 4695                          0,
30865 7F2E                      0000            .word	0
30866 7F30                      0000            .word	0
30867                                           ! 4696 } },
30868                                           ! 4697 { 0x0105,
30869 7F32                      0105            .word	$105
30870                                           ! 4698 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30871 7F34                      009B            .word	$9B
30872                                           ! 4699                           0x01 | 0x02 | 0x04,
30873 7F36                        07            .byte	7
30874                                           ! 4700   
30875                                           ! 4700                         0,
30876 7F37                        00            .byte	0
30877                                           ! 4701                           64,
30878 7F38                      0040            .word	$40
30879                                           ! 4702                    64,
30880 7F3A                      0040            .word	$40
30881                                           ! 4703                        0xA000,
30882 7F3C                      A000            .word	$A000
30883                                           ! 4704                        0x0000,
30884 7F3E                      0000            .word	0
30885                                           ! 4705                       0,
30886 7F40                      0000            .word	0
30887 7F42                      0000            .word	0
30888                                           ! 4706                             1024,
30889 7F44                      0400            .word	$400
30890                                           ! 4707                        1024,
30891 7F46                      0400            .word	$400
30892                                           ! 4708                        768,
30893 7F48                      0300            .word	$300
30894                                           ! 4709                      8,
30895 7F4A                        08            .byte	8
30896                                           ! 4710                      16,
30897 7F4B                        10            .byte	$10
30898                                           ! 4711                           1,
30899 7F4C                        01            .byte	1
30900                                           ! 4712                         8,
30901 7F4D                        08            .byte	8
30902                                           ! 4713                          12,
30903 7F4E                        0C            .byte	$C
30904                                           ! 4714                        0x04,
30905 7F4F                        04            .byte	4
30906                                           ! 4715                     0,
30907 7F50                        00            .byte	0
30908                                           ! 4716                               20,
30909 7F51                        14            .byte	$14
30910                                           ! 4717                          0,
30911 7F52                        00            .byte	0
30912                                           ! 4718                        0,
30913 7F53                        00            .byte	0
30914                                           ! 4719                             0,
30915 7F54                        00            .byte	0
30916                                           ! 4720                          0,
30917 7F55                        00            .byte	0
30918                                           ! 4721                               0,
30919 7F56                        00            .byte	0
30920                                           ! 4722                         0,
30921 7F57                        00            .byte	0
30922                                           ! 4723                              0,
30923 7F58                        00            .byte	0
30924                                           ! 4724                         0,
30925 7F59                        00            .byte	0
30926                                           ! 4725                              0,
30927 7F5A                        00            .byte	0
30928                                           ! 4726                                0,
30929 7F5B                        00            .byte	0
30930                                           ! 4727                        0xE0000000,
30931 7F5C                      0000            .word	0
30932 7F5E                      E000            .word	$E000
30933                                           ! 4728                               0,
30934 7F60                      0000            .word	0
30935 7F62                      0000            .word	0
30936                                           ! 4729                             0,
30937 7F64                      0000            .word	0
30938                                           ! 4730                                1024,
30939 7F66                      0400            .word	$400
30940                                           ! 4731                             0,
30941 7F68                        00            .byte	0
30942                                           ! 4732                             0,
30943 7F69                        00            .byte	0
30944                                           ! 4733                           0,
30945 7F6A                        00            .byte	0
30946                                           ! 4734                                0,
30947 7F6B                        00            .byte	0
30948                                           ! 4735                             0,
30949 7F6C                        00            .byte	0
30950                                           ! 4736                                  0,
30951 7F6D                        00            .byte	0
30952                                           ! 4737                            0,
30953 7F6E                        00            .byte	0
30954                                           ! 4738                                 0,
30955 7F6F                        00            .byte	0
30956                                           ! 4739                            0,
30957 7F70                        00            .byte	0
30958                                           ! 4740                                 0,
30959 7F71                        00            .byte	0
30960                                           ! 4741                          0,
30961 7F72                      0000            .word	0
30962 7F74                      0000            .word	0
30963                                           ! 4742 } },
30964                                           ! 4743 { 0x0106,
30965 7F76                      0106            .word	$106
30966                                           ! 4744 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30967 7F78                      001F            .word	$1F
30968                                           ! 4745                           0x01 | 0x02 | 0x04,
30969 7F7A                        07            .byte	7
30970                                           ! 4746                           0,
30971 7F7B                        00            .byte	0
30972                                           ! 4747                           64,
30973 7F7C                      0040            .word	$40
30974                                           ! 4748                    64,
30975 7F7E                      0040            .word	$40
30976                                           ! 4749                        0xA000,
30977 7F80                      A000            .word	$A000
30978                                           ! 4750                        0x0000,
30979 7F82                      0000            .word	0
30980                                           ! 4751                       0,
30981 7F84                      0000            .word	0
30982 7F86                      0000            .word	0
30983                                           ! 4752                             160,
30984 7F88                      00A0            .word	$A0
30985                                           ! 4753                        1280,
30986 7F8A                      0500            .word	$500
30987                                           ! 4754                        1024,
30988 7F8C                      0400            .word	$400
30989                                           ! 4755                      8,
30990 7F8E                        08            .byte	8
30991                                           ! 4756                      16,
30992 7F8F                        10            .byte	$10
30993                                           ! 4757                           4,
30994 7F90                        04            .byte	4
30995                                           ! 4758                         4,
30996 7F91                        04            .byte	4
30997                                           ! 4759                          3,
30998 7F92                        03            .byte	3
30999                                           ! 4760                        0x03,
31000 7F93                        03            .byte	3
31001                                           ! 4761                     0,
31002 7F94                        00            .byte	0
31003                                           ! 4762                               24,
31004 7F95                        18            .byte	$18
31005                                           ! 4763                          0,
31006 7F96                        00            .byte	0
31007                                           ! 4764                        0,
31008 7F97                        00            .byte	0
31009                                           ! 4765                             0,
31010 7F98                        00            .byte	0
31011                                           ! 4766                          0,
31012 7F99                        00            .byte	0
31013                                           ! 4767                               0,
31014 7F9A                        00            .byte	0
31015                                           ! 4768                         0,
31016 7F9B                        00            .byte	0
31017                                           ! 4769                            
31018                                           ! 4769   0,
31019 7F9C                        00            .byte	0
31020                                           ! 4770                         0,
31021 7F9D                        00            .byte	0
31022                                           ! 4771                              0,
31023 7F9E                        00            .byte	0
31024                                           ! 4772                                0,
31025 7F9F                        00            .byte	0
31026                                           ! 4773                        0,
31027 7FA0                      0000            .word	0
31028 7FA2                      0000            .word	0
31029                                           ! 4774                               0,
31030 7FA4                      0000            .word	0
31031 7FA6                      0000            .word	0
31032                                           ! 4775                             0,
31033 7FA8                      0000            .word	0
31034                                           ! 4776                                160,
31035 7FAA                      00A0            .word	$A0
31036                                           ! 4777                             0,
31037 7FAC                        00            .byte	0
31038                                           ! 4778                             0,
31039 7FAD                        00            .byte	0
31040                                           ! 4779                           0,
31041 7FAE                        00            .byte	0
31042                                           ! 4780                                0,
31043 7FAF                        00            .byte	0
31044                                           ! 4781                             0,
31045 7FB0                        00            .byte	0
31046                                           ! 4782                                  0,
31047 7FB1                        00            .byte	0
31048                                           ! 4783                            0,
31049 7FB2                        00            .byte	0
31050                                           ! 4784                                 0,
31051 7FB3                        00            .byte	0
31052                                           ! 4785                            0,
31053 7FB4                        00            .byte	0
31054                                           ! 4786                                 0,
31055 7FB5                        00            .byte	0
31056                                           ! 4787                          0,
31057 7FB6                      0000            .word	0
31058 7FB8                      0000            .word	0
31059                                           ! 4788 } },
31060                                           ! 4789 { 0x0107,
31061 7FBA                      0107            .word	$107
31062                                           ! 4790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31063 7FBC                      009B            .word	$9B
31064                                           ! 4791                           0x01 | 0x02 | 0x04,
31065 7FBE                        07            .byte	7
31066                                           ! 4792                           0,
31067 7FBF                        00            .byte	0
31068                                           ! 4793                           64,
31069 7FC0                      0040            .word	$40
31070                                           ! 4794                    64,
31071 7FC2                      0040            .word	$40
31072                                           ! 4795                        0xA000,
31073 7FC4                      A000            .word	$A000
31074                                           ! 4796                        0x0000,
31075 7FC6                      0000            .word	0
31076                                           ! 4797                       0,
31077 7FC8                      0000            .word	0
31078 7FCA                      0000            .word	0
31079                                           ! 4798                             1280,
31080 7FCC                      0500            .word	$500
31081                                           ! 4799                        1280,
31082 7FCE                      0500            .word	$500
31083                                           ! 4800                        1024,
31084 7FD0                      0400            .word	$400
31085                                           ! 4801                      8,
31086 7FD2                        08            .byte	8
31087                                           ! 4802                      16,
31088 7FD3                        10            .byte	$10
31089                                           ! 4803                           1,
31090 7FD4                        01            .byte	1
31091                                           ! 4804                         8,
31092 7FD5                        08            .byte	8
31093                                           ! 4805                          20,
31094 7FD6                        14            .byte	$14
31095                                           ! 4806                        0x04,
31096 7FD7                        04            .byte	4
31097                                           ! 4807                     0,
31098 7FD8                        00            .byte	0
31099                                           ! 4808                               11,
31100 7FD9                        0B            .byte	$B
31101                                           ! 4809                          0,
31102 7FDA                        00            .byte	0
31103                                           ! 4810                        0,
31104 7FDB                        00            .byte	0
31105                                           ! 4811                             0,
31106 7FDC                        00            .byte	0
31107                                           ! 4812                          0,
31108 7FDD                        00            .byte	0
31109                                           ! 4813                               0,
31110 7FDE                        00            .byte	0
31111                                           ! 4814                         0,
31112 7FDF                        00            .byte	0
31113                                           ! 4815                              0,
31114 7FE0                        00            .byte	0
31115                                           ! 4816                         0,
31116 7FE1                        00            .byte	0
31117                                           ! 4817                              0,
31118 7FE2                        00            .byte	0
31119                                           ! 4818                                0,
31120 7FE3                        00            .byte	0
31121                                           ! 4819                        0xE0000000,
31122 7FE4                      0000            .word	0
31123 7FE6                      E000            .word	$E000
31124                                           ! 4820                               0,
31125 7FE8                      0000            .word	0
31126 7FEA                      0000            .word	0
31127                                           ! 4821                             0,
31128 7FEC                      0000            .word	0
31129                                           ! 4822                                1280,
31130 7FEE                      0500            .word	$500
31131                                           ! 4823                             0,
31132 7FF0                        00            .byte	0
31133                                           ! 4824                             0,
31134 7FF1                        00            .byte	0
31135                                           ! 4825                           0,
31136 7FF2                        00            .byte	0
31137                                           ! 4826                                0,
31138 7FF3                        00            .byte	0
31139                                           ! 4827                             0,
31140 7FF4                        00            .byte	0
31141                                           ! 4828                                  0,
31142 7FF5                        00            .byte	0
31143                                           ! 4829                            0,
31144 7FF6                        00            .byte	0
31145                                           ! 4830                                 0,
31146 7FF7                        00            .byte	0
31147                                           ! 4831                            0,
31148 7FF8                        00            .byte	0
31149                                           ! 4832                                 0,
31150 7FF9                        00            .byte	0
31151                                           ! 4833                          0,
31152 7FFA                      0000            .word	0
31153 7FFC                      0000            .word	0
31154                                           ! 4834 } },
31155                                           ! 4835 { 0x010d,
31156 7FFE                      010D            .word	$10D
31157                                           ! 4836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31158 8000                      009B            .word	$9B
31159                                           ! 4837                           0x01 | 0x02 | 0
31160                                           ! 4837 x04,
31161 8002                        07            .byte	7
31162                                           ! 4838                           0,
31163 8003                        00            .byte	0
31164                                           ! 4839                           64,
31165 8004                      0040            .word	$40
31166                                           ! 4840                    64,
31167 8006                      0040            .word	$40
31168                                           ! 4841                        0xA000,
31169 8008                      A000            .word	$A000
31170                                           ! 4842                        0x0000,
31171 800A                      0000            .word	0
31172                                           ! 4843                       0,
31173 800C                      0000            .word	0
31174 800E                      0000            .word	0
31175                                           ! 4844                             640,
31176 8010                      0280            .word	$280
31177                                           ! 4845                        320,
31178 8012                      0140            .word	$140
31179                                           ! 4846                        200,
31180 8014                      00C8            .word	$C8
31181                                           ! 4847                      8,
31182 8016                        08            .byte	8
31183                                           ! 4848                      16,
31184 8017                        10            .byte	$10
31185                                           ! 4849                           1,
31186 8018                        01            .byte	1
31187                                           ! 4850                         15,
31188 8019                        0F            .byte	$F
31189                                           ! 4851                          2,
31190 801A                        02            .byte	2
31191                                           ! 4852                        0x06,
31192 801B                        06            .byte	6
31193                                           ! 4853                     0,
31194 801C                        00            .byte	0
31195                                           ! 4854                               130,
31196 801D                        82            .byte	$82
31197                                           ! 4855                          0,
31198 801E                        00            .byte	0
31199                                           ! 4856                        5,
31200 801F                        05            .byte	5
31201                                           ! 4857                             10,
31202 8020                        0A            .byte	$A
31203                                           ! 4858                          5,
31204 8021                        05            .byte	5
31205                                           ! 4859                               5,
31206 8022                        05            .byte	5
31207                                           ! 4860                         5,
31208 8023                        05            .byte	5
31209                                           ! 4861                              0,
31210 8024                        00            .byte	0
31211                                           ! 4862                         1,
31212 8025                        01            .byte	1
31213                                           ! 4863                              15,
31214 8026                        0F            .byte	$F
31215                                           ! 4864                                0,
31216 8027                        00            .byte	0
31217                                           ! 4865                        0xE0000000,
31218 8028                      0000            .word	0
31219 802A                      E000            .word	$E000
31220                                           ! 4866                               0,
31221 802C                      0000            .word	0
31222 802E                      0000            .word	0
31223                                           ! 4867                             0,
31224 8030                      0000            .word	0
31225                                           ! 4868                                640,
31226 8032                      0280            .word	$280
31227                                           ! 4869                             0,
31228 8034                        00            .byte	0
31229                                           ! 4870                             0,
31230 8035                        00            .byte	0
31231                                           ! 4871                           5,
31232 8036                        05            .byte	5
31233                                           ! 4872                                10,
31234 8037                        0A            .byte	$A
31235                                           ! 4873                             5,
31236 8038                        05            .byte	5
31237                                           ! 4874                                  5,
31238 8039                        05            .byte	5
31239                                           ! 4875                            5,
31240 803A                        05            .byte	5
31241                                           ! 4876                                 0,
31242 803B                        00            .byte	0
31243                                           ! 4877                            1,
31244 803C                        01            .byte	1
31245                                           ! 4878                                 15,
31246 803D                        0F            .byte	$F
31247                                           ! 4879                          0,
31248 803E                      0000            .word	0
31249 8040                      0000            .word	0
31250                                           ! 4880 } },
31251                                           ! 4881 { 0x010e,
31252 8042                      010E            .word	$10E
31253                                           ! 4882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31254 8044                      009B            .word	$9B
31255                                           ! 4883                           0x01 | 0x02 | 0x04,
31256 8046                        07            .byte	7
31257                                           ! 4884                           0,
31258 8047                        00            .byte	0
31259                                           ! 4885                           64,
31260 8048                      0040            .word	$40
31261                                           ! 4886                    64,
31262 804A                      0040            .word	$40
31263                                           ! 4887                        0xA000,
31264 804C                      A000            .word	$A000
31265                                           ! 4888                        0x0000,
31266 804E                      0000            .word	0
31267                                           ! 4889                       0,
31268 8050                      0000            .word	0
31269 8052                      0000            .word	0
31270                                           ! 4890                             640,
31271 8054                      0280            .word	$280
31272                                           ! 4891                        320,
31273 8056                      0140            .word	$140
31274                                           ! 4892                        200,
31275 8058                      00C8            .word	$C8
31276                                           ! 4893                      8,
31277 805A                        08            .byte	8
31278                                           ! 4894                      16,
31279 805B                        10            .byte	$10
31280                                           ! 4895                           1,
31281 805C                        01            .byte	1
31282                                           ! 4896                         16,
31283 805D                        10            .byte	$10
31284                                           ! 4897                          2,
31285 805E                        02            .byte	2
31286                                           ! 4898                        0x06,
31287 805F                        06            .byte	6
31288                                           ! 4899                     0,
31289 8060                        00            .byte	0
31290                                           ! 4900                               130,
31291 8061                        82            .byte	$82
31292                                           ! 4901                          0,
31293 8062                        00            .byte	0
31294                                           ! 4902                        5,
31295 8063                        05            .byte	5
31296                                           ! 4903                             11,
31297 8064                        0B            .byte	$B
31298                                           ! 4904                          6,
31299 8065                        06            .byte	6
31300                                           ! 4905                               5,
31301 8066                        05            .byte	5
31302                                           ! 4906                         5,
31303 8067                        05            .byte	5
31304                                           ! 4907                  
31305                                           ! 4907             0,
31306 8068                        00            .byte	0
31307                                           ! 4908                         0,
31308 8069                        00            .byte	0
31309                                           ! 4909                              0,
31310 806A                        00            .byte	0
31311                                           ! 4910                                0,
31312 806B                        00            .byte	0
31313                                           ! 4911                        0xE0000000,
31314 806C                      0000            .word	0
31315 806E                      E000            .word	$E000
31316                                           ! 4912                               0,
31317 8070                      0000            .word	0
31318 8072                      0000            .word	0
31319                                           ! 4913                             0,
31320 8074                      0000            .word	0
31321                                           ! 4914                                640,
31322 8076                      0280            .word	$280
31323                                           ! 4915                             0,
31324 8078                        00            .byte	0
31325                                           ! 4916                             0,
31326 8079                        00            .byte	0
31327                                           ! 4917                           5,
31328 807A                        05            .byte	5
31329                                           ! 4918                                11,
31330 807B                        0B            .byte	$B
31331                                           ! 4919                             6,
31332 807C                        06            .byte	6
31333                                           ! 4920                                  5,
31334 807D                        05            .byte	5
31335                                           ! 4921                            5,
31336 807E                        05            .byte	5
31337                                           ! 4922                                 0,
31338 807F                        00            .byte	0
31339                                           ! 4923                            0,
31340 8080                        00            .byte	0
31341                                           ! 4924                                 0,
31342 8081                        00            .byte	0
31343                                           ! 4925                          0,
31344 8082                      0000            .word	0
31345 8084                      0000            .word	0
31346                                           ! 4926 } },
31347                                           ! 4927 { 0x010f,
31348 8086                      010F            .word	$10F
31349                                           ! 4928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31350 8088                      009B            .word	$9B
31351                                           ! 4929                           0x01 | 0x02 | 0x04,
31352 808A                        07            .byte	7
31353                                           ! 4930                           0,
31354 808B                        00            .byte	0
31355                                           ! 4931                           64,
31356 808C                      0040            .word	$40
31357                                           ! 4932                    64,
31358 808E                      0040            .word	$40
31359                                           ! 4933                        0xA000,
31360 8090                      A000            .word	$A000
31361                                           ! 4934                        0x0000,
31362 8092                      0000            .word	0
31363                                           ! 4935                       0,
31364 8094                      0000            .word	0
31365 8096                      0000            .word	0
31366                                           ! 4936                             960,
31367 8098                      03C0            .word	$3C0
31368                                           ! 4937                        320,
31369 809A                      0140            .word	$140
31370                                           ! 4938                        200,
31371 809C                      00C8            .word	$C8
31372                                           ! 4939                      8,
31373 809E                        08            .byte	8
31374                                           ! 4940                      16,
31375 809F                        10            .byte	$10
31376                                           ! 4941                           1,
31377 80A0                        01            .byte	1
31378                                           ! 4942                         24,
31379 80A1                        18            .byte	$18
31380                                           ! 4943                          3,
31381 80A2                        03            .byte	3
31382                                           ! 4944                        0x06,
31383 80A3                        06            .byte	6
31384                                           ! 4945                     0,
31385 80A4                        00            .byte	0
31386                                           ! 4946                               86,
31387 80A5                        56            .byte	$56
31388                                           ! 4947                          0,
31389 80A6                        00            .byte	0
31390                                           ! 4948                        8,
31391 80A7                        08            .byte	8
31392                                           ! 4949                             16,
31393 80A8                        10            .byte	$10
31394                                           ! 4950                          8,
31395 80A9                        08            .byte	8
31396                                           ! 4951                               8,
31397 80AA                        08            .byte	8
31398                                           ! 4952                         8,
31399 80AB                        08            .byte	8
31400                                           ! 4953                              0,
31401 80AC                        00            .byte	0
31402                                           ! 4954                         0,
31403 80AD                        00            .byte	0
31404                                           ! 4955                              0,
31405 80AE                        00            .byte	0
31406                                           ! 4956                                0,
31407 80AF                        00            .byte	0
31408                                           ! 4957                        0xE0000000,
31409 80B0                      0000            .word	0
31410 80B2                      E000            .word	$E000
31411                                           ! 4958                               0,
31412 80B4                      0000            .word	0
31413 80B6                      0000            .word	0
31414                                           ! 4959                             0,
31415 80B8                      0000            .word	0
31416                                           ! 4960                                960,
31417 80BA                      03C0            .word	$3C0
31418                                           ! 4961                             0,
31419 80BC                        00            .byte	0
31420                                           ! 4962                             0,
31421 80BD                        00            .byte	0
31422                                           ! 4963                           8,
31423 80BE                        08            .byte	8
31424                                           ! 4964                                16,
31425 80BF                        10            .byte	$10
31426                                           ! 4965                             8,
31427 80C0                        08            .byte	8
31428                                           ! 4966                                  8,
31429 80C1                        08            .byte	8
31430                                           ! 4967                            8,
31431 80C2                        08            .byte	8
31432                                           ! 4968                                 0,
31433 80C3                        00            .byte	0
31434                                           ! 4969                            0,
31435 80C4                        00            .byte	0
31436                                           ! 4970                                 0,
31437 80C5                        00            .byte	0
31438                                           ! 4971                          0,
31439 80C6                      0000            .word	0
31440 80C8                      0000            .word	0
31441                                           ! 4972 } },
31442                                           ! 4973 { 0x0110,
31443 80CA                      0110            .word	$110
31444                                           ! 4974 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31445 80CC                      009B            .word	$9B
31446                                           ! 4975                        
31447                                           ! 4975    0x01 | 0x02 | 0x04,
31448 80CE                        07            .byte	7
31449                                           ! 4976                           0,
31450 80CF                        00            .byte	0
31451                                           ! 4977                           64,
31452 80D0                      0040            .word	$40
31453                                           ! 4978                    64,
31454 80D2                      0040            .word	$40
31455                                           ! 4979                        0xA000,
31456 80D4                      A000            .word	$A000
31457                                           ! 4980                        0x0000,
31458 80D6                      0000            .word	0
31459                                           ! 4981                       0,
31460 80D8                      0000            .word	0
31461 80DA                      0000            .word	0
31462                                           ! 4982                             1280,
31463 80DC                      0500            .word	$500
31464                                           ! 4983                        640,
31465 80DE                      0280            .word	$280
31466                                           ! 4984                        480,
31467 80E0                      01E0            .word	$1E0
31468                                           ! 4985                      8,
31469 80E2                        08            .byte	8
31470                                           ! 4986                      16,
31471 80E3                        10            .byte	$10
31472                                           ! 4987                           1,
31473 80E4                        01            .byte	1
31474                                           ! 4988                         15,
31475 80E5                        0F            .byte	$F
31476                                           ! 4989                          10,
31477 80E6                        0A            .byte	$A
31478                                           ! 4990                        0x06,
31479 80E7                        06            .byte	6
31480                                           ! 4991                     0,
31481 80E8                        00            .byte	0
31482                                           ! 4992                               26,
31483 80E9                        1A            .byte	$1A
31484                                           ! 4993                          0,
31485 80EA                        00            .byte	0
31486                                           ! 4994                        5,
31487 80EB                        05            .byte	5
31488                                           ! 4995                             10,
31489 80EC                        0A            .byte	$A
31490                                           ! 4996                          5,
31491 80ED                        05            .byte	5
31492                                           ! 4997                               5,
31493 80EE                        05            .byte	5
31494                                           ! 4998                         5,
31495 80EF                        05            .byte	5
31496                                           ! 4999                              0,
31497 80F0                        00            .byte	0
31498                                           ! 5000                         1,
31499 80F1                        01            .byte	1
31500                                           ! 5001                              15,
31501 80F2                        0F            .byte	$F
31502                                           ! 5002                                0,
31503 80F3                        00            .byte	0
31504                                           ! 5003                        0xE0000000,
31505 80F4                      0000            .word	0
31506 80F6                      E000            .word	$E000
31507                                           ! 5004                               0,
31508 80F8                      0000            .word	0
31509 80FA                      0000            .word	0
31510                                           ! 5005                             0,
31511 80FC                      0000            .word	0
31512                                           ! 5006                                1280,
31513 80FE                      0500            .word	$500
31514                                           ! 5007                             0,
31515 8100                        00            .byte	0
31516                                           ! 5008                             0,
31517 8101                        00            .byte	0
31518                                           ! 5009                           5,
31519 8102                        05            .byte	5
31520                                           ! 5010                                10,
31521 8103                        0A            .byte	$A
31522                                           ! 5011                             5,
31523 8104                        05            .byte	5
31524                                           ! 5012                                  5,
31525 8105                        05            .byte	5
31526                                           ! 5013                            5,
31527 8106                        05            .byte	5
31528                                           ! 5014                                 0,
31529 8107                        00            .byte	0
31530                                           ! 5015                            1,
31531 8108                        01            .byte	1
31532                                           ! 5016                                 15,
31533 8109                        0F            .byte	$F
31534                                           ! 5017                          0,
31535 810A                      0000            .word	0
31536 810C                      0000            .word	0
31537                                           ! 5018 } },
31538                                           ! 5019 { 0x0111,
31539 810E                      0111            .word	$111
31540                                           ! 5020 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31541 8110                      009B            .word	$9B
31542                                           ! 5021                           0x01 | 0x02 | 0x04,
31543 8112                        07            .byte	7
31544                                           ! 5022                           0,
31545 8113                        00            .byte	0
31546                                           ! 5023                           64,
31547 8114                      0040            .word	$40
31548                                           ! 5024                    64,
31549 8116                      0040            .word	$40
31550                                           ! 5025                        0xA000,
31551 8118                      A000            .word	$A000
31552                                           ! 5026                        0x0000,
31553 811A                      0000            .word	0
31554                                           ! 5027                       0,
31555 811C                      0000            .word	0
31556 811E                      0000            .word	0
31557                                           ! 5028                             1280,
31558 8120                      0500            .word	$500
31559                                           ! 5029                        640,
31560 8122                      0280            .word	$280
31561                                           ! 5030                        480,
31562 8124                      01E0            .word	$1E0
31563                                           ! 5031                      8,
31564 8126                        08            .byte	8
31565                                           ! 5032                      16,
31566 8127                        10            .byte	$10
31567                                           ! 5033                           1,
31568 8128                        01            .byte	1
31569                                           ! 5034                         16,
31570 8129                        10            .byte	$10
31571                                           ! 5035                          10,
31572 812A                        0A            .byte	$A
31573                                           ! 5036                        0x06,
31574 812B                        06            .byte	6
31575                                           ! 5037                     0,
31576 812C                        00            .byte	0
31577                                           ! 5038                               26,
31578 812D                        1A            .byte	$1A
31579                                           ! 5039                          0,
31580 812E                        00            .byte	0
31581                                           ! 5040                        5,
31582 812F                        05            .byte	5
31583                                           ! 5041                             11,
31584 8130                        0B            .byte	$B
31585                                           ! 5042                          6,
31586 8131                        06            .byte	6
31587                                           ! 5043                               5,
31588 8132                        05            .byte	5
31589                                           ! 5044                        
31590                                           ! 5044  5,
31591 8133                        05            .byte	5
31592                                           ! 5045                              0,
31593 8134                        00            .byte	0
31594                                           ! 5046                         0,
31595 8135                        00            .byte	0
31596                                           ! 5047                              0,
31597 8136                        00            .byte	0
31598                                           ! 5048                                0,
31599 8137                        00            .byte	0
31600                                           ! 5049                        0xE0000000,
31601 8138                      0000            .word	0
31602 813A                      E000            .word	$E000
31603                                           ! 5050                               0,
31604 813C                      0000            .word	0
31605 813E                      0000            .word	0
31606                                           ! 5051                             0,
31607 8140                      0000            .word	0
31608                                           ! 5052                                1280,
31609 8142                      0500            .word	$500
31610                                           ! 5053                             0,
31611 8144                        00            .byte	0
31612                                           ! 5054                             0,
31613 8145                        00            .byte	0
31614                                           ! 5055                           5,
31615 8146                        05            .byte	5
31616                                           ! 5056                                11,
31617 8147                        0B            .byte	$B
31618                                           ! 5057                             6,
31619 8148                        06            .byte	6
31620                                           ! 5058                                  5,
31621 8149                        05            .byte	5
31622                                           ! 5059                            5,
31623 814A                        05            .byte	5
31624                                           ! 5060                                 0,
31625 814B                        00            .byte	0
31626                                           ! 5061                            0,
31627 814C                        00            .byte	0
31628                                           ! 5062                                 0,
31629 814D                        00            .byte	0
31630                                           ! 5063                          0,
31631 814E                      0000            .word	0
31632 8150                      0000            .word	0
31633                                           ! 5064 } },
31634                                           ! 5065 { 0x0112,
31635 8152                      0112            .word	$112
31636                                           ! 5066 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31637 8154                      009B            .word	$9B
31638                                           ! 5067                           0x01 | 0x02 | 0x04,
31639 8156                        07            .byte	7
31640                                           ! 5068                           0,
31641 8157                        00            .byte	0
31642                                           ! 5069                           64,
31643 8158                      0040            .word	$40
31644                                           ! 5070                    64,
31645 815A                      0040            .word	$40
31646                                           ! 5071                        0xA000,
31647 815C                      A000            .word	$A000
31648                                           ! 5072                        0x0000,
31649 815E                      0000            .word	0
31650                                           ! 5073                       0,
31651 8160                      0000            .word	0
31652 8162                      0000            .word	0
31653                                           ! 5074                             1920,
31654 8164                      0780            .word	$780
31655                                           ! 5075                        640,
31656 8166                      0280            .word	$280
31657                                           ! 5076                        480,
31658 8168                      01E0            .word	$1E0
31659                                           ! 5077                      8,
31660 816A                        08            .byte	8
31661                                           ! 5078                      16,
31662 816B                        10            .byte	$10
31663                                           ! 5079                           1,
31664 816C                        01            .byte	1
31665                                           ! 5080                         24,
31666 816D                        18            .byte	$18
31667                                           ! 5081                          15,
31668 816E                        0F            .byte	$F
31669                                           ! 5082                        0x06,
31670 816F                        06            .byte	6
31671                                           ! 5083                     0,
31672 8170                        00            .byte	0
31673                                           ! 5084                               17,
31674 8171                        11            .byte	$11
31675                                           ! 5085                          0,
31676 8172                        00            .byte	0
31677                                           ! 5086                        8,
31678 8173                        08            .byte	8
31679                                           ! 5087                             16,
31680 8174                        10            .byte	$10
31681                                           ! 5088                          8,
31682 8175                        08            .byte	8
31683                                           ! 5089                               8,
31684 8176                        08            .byte	8
31685                                           ! 5090                         8,
31686 8177                        08            .byte	8
31687                                           ! 5091                              0,
31688 8178                        00            .byte	0
31689                                           ! 5092                         0,
31690 8179                        00            .byte	0
31691                                           ! 5093                              0,
31692 817A                        00            .byte	0
31693                                           ! 5094                                0,
31694 817B                        00            .byte	0
31695                                           ! 5095                        0xE0000000,
31696 817C                      0000            .word	0
31697 817E                      E000            .word	$E000
31698                                           ! 5096                               0,
31699 8180                      0000            .word	0
31700 8182                      0000            .word	0
31701                                           ! 5097                             0,
31702 8184                      0000            .word	0
31703                                           ! 5098                                1920,
31704 8186                      0780            .word	$780
31705                                           ! 5099                             0,
31706 8188                        00            .byte	0
31707                                           ! 5100                             0,
31708 8189                        00            .byte	0
31709                                           ! 5101                           8,
31710 818A                        08            .byte	8
31711                                           ! 5102                                16,
31712 818B                        10            .byte	$10
31713                                           ! 5103                             8,
31714 818C                        08            .byte	8
31715                                           ! 5104                                  8,
31716 818D                        08            .byte	8
31717                                           ! 5105                            8,
31718 818E                        08            .byte	8
31719                                           ! 5106                                 0,
31720 818F                        00            .byte	0
31721                                           ! 5107                            0,
31722 8190                        00            .byte	0
31723                                           ! 5108                                 0,
31724 8191                        00            .byte	0
31725                                           ! 5109                          0,
31726 8192                      0000            .word	0
31727 8194                      0000            .word	0
31728                                           ! 5110 } },
31729                                           ! 5111 { 0x0113,
31730 8196                      0113            .word	$113
31731                                           ! 5112 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010
31732                                           ! 5112 ,
31733 8198                      009B            .word	$9B
31734                                           ! 5113                           0x01 | 0x02 | 0x04,
31735 819A                        07            .byte	7
31736                                           ! 5114                           0,
31737 819B                        00            .byte	0
31738                                           ! 5115                           64,
31739 819C                      0040            .word	$40
31740                                           ! 5116                    64,
31741 819E                      0040            .word	$40
31742                                           ! 5117                        0xA000,
31743 81A0                      A000            .word	$A000
31744                                           ! 5118                        0x0000,
31745 81A2                      0000            .word	0
31746                                           ! 5119                       0,
31747 81A4                      0000            .word	0
31748 81A6                      0000            .word	0
31749                                           ! 5120                             1600,
31750 81A8                      0640            .word	$640
31751                                           ! 5121                        800,
31752 81AA                      0320            .word	$320
31753                                           ! 5122                        600,
31754 81AC                      0258            .word	$258
31755                                           ! 5123                      8,
31756 81AE                        08            .byte	8
31757                                           ! 5124                      16,
31758 81AF                        10            .byte	$10
31759                                           ! 5125                           1,
31760 81B0                        01            .byte	1
31761                                           ! 5126                         15,
31762 81B1                        0F            .byte	$F
31763                                           ! 5127                          15,
31764 81B2                        0F            .byte	$F
31765                                           ! 5128                        0x06,
31766 81B3                        06            .byte	6
31767                                           ! 5129                     0,
31768 81B4                        00            .byte	0
31769                                           ! 5130                               16,
31770 81B5                        10            .byte	$10
31771                                           ! 5131                          0,
31772 81B6                        00            .byte	0
31773                                           ! 5132                        5,
31774 81B7                        05            .byte	5
31775                                           ! 5133                             10,
31776 81B8                        0A            .byte	$A
31777                                           ! 5134                          5,
31778 81B9                        05            .byte	5
31779                                           ! 5135                               5,
31780 81BA                        05            .byte	5
31781                                           ! 5136                         5,
31782 81BB                        05            .byte	5
31783                                           ! 5137                              0,
31784 81BC                        00            .byte	0
31785                                           ! 5138                         1,
31786 81BD                        01            .byte	1
31787                                           ! 5139                              15,
31788 81BE                        0F            .byte	$F
31789                                           ! 5140                                0,
31790 81BF                        00            .byte	0
31791                                           ! 5141                        0xE0000000,
31792 81C0                      0000            .word	0
31793 81C2                      E000            .word	$E000
31794                                           ! 5142                               0,
31795 81C4                      0000            .word	0
31796 81C6                      0000            .word	0
31797                                           ! 5143                             0,
31798 81C8                      0000            .word	0
31799                                           ! 5144                                1600,
31800 81CA                      0640            .word	$640
31801                                           ! 5145                             0,
31802 81CC                        00            .byte	0
31803                                           ! 5146                             0,
31804 81CD                        00            .byte	0
31805                                           ! 5147                           5,
31806 81CE                        05            .byte	5
31807                                           ! 5148                                10,
31808 81CF                        0A            .byte	$A
31809                                           ! 5149                             5,
31810 81D0                        05            .byte	5
31811                                           ! 5150                                  5,
31812 81D1                        05            .byte	5
31813                                           ! 5151                            5,
31814 81D2                        05            .byte	5
31815                                           ! 5152                                 0,
31816 81D3                        00            .byte	0
31817                                           ! 5153                            1,
31818 81D4                        01            .byte	1
31819                                           ! 5154                                 15,
31820 81D5                        0F            .byte	$F
31821                                           ! 5155                          0,
31822 81D6                      0000            .word	0
31823 81D8                      0000            .word	0
31824                                           ! 5156 } },
31825                                           ! 5157 { 0x0114,
31826 81DA                      0114            .word	$114
31827                                           ! 5158 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31828 81DC                      009B            .word	$9B
31829                                           ! 5159                           0x01 | 0x02 | 0x04,
31830 81DE                        07            .byte	7
31831                                           ! 5160                           0,
31832 81DF                        00            .byte	0
31833                                           ! 5161                           64,
31834 81E0                      0040            .word	$40
31835                                           ! 5162                    64,
31836 81E2                      0040            .word	$40
31837                                           ! 5163                        0xA000,
31838 81E4                      A000            .word	$A000
31839                                           ! 5164                        0x0000,
31840 81E6                      0000            .word	0
31841                                           ! 5165                       0,
31842 81E8                      0000            .word	0
31843 81EA                      0000            .word	0
31844                                           ! 5166                             1600,
31845 81EC                      0640            .word	$640
31846                                           ! 5167                        800,
31847 81EE                      0320            .word	$320
31848                                           ! 5168                        600,
31849 81F0                      0258            .word	$258
31850                                           ! 5169                      8,
31851 81F2                        08            .byte	8
31852                                           ! 5170                      16,
31853 81F3                        10            .byte	$10
31854                                           ! 5171                           1,
31855 81F4                        01            .byte	1
31856                                           ! 5172                         16,
31857 81F5                        10            .byte	$10
31858                                           ! 5173                          15,
31859 81F6                        0F            .byte	$F
31860                                           ! 5174                        0x06,
31861 81F7                        06            .byte	6
31862                                           ! 5175                     0,
31863 81F8                        00            .byte	0
31864                                           ! 5176                               16,
31865 81F9                        10            .byte	$10
31866                                           ! 5177                          0,
31867 81FA                        00            .byte	0
31868                                           ! 5178                        5,
31869 81FB                        05            .byte	5
31870                                           ! 5179                             11,
31871 81FC                        0B            .byte	$B
31872                                           ! 5180                          6,
31873 81FD                        06            .byte	6
31874                                           ! 5181                               5
31875                                           ! 5181 ,
31876 81FE                        05            .byte	5
31877                                           ! 5182                         5,
31878 81FF                        05            .byte	5
31879                                           ! 5183                              0,
31880 8200                        00            .byte	0
31881                                           ! 5184                         0,
31882 8201                        00            .byte	0
31883                                           ! 5185                              0,
31884 8202                        00            .byte	0
31885                                           ! 5186                                0,
31886 8203                        00            .byte	0
31887                                           ! 5187                        0xE0000000,
31888 8204                      0000            .word	0
31889 8206                      E000            .word	$E000
31890                                           ! 5188                               0,
31891 8208                      0000            .word	0
31892 820A                      0000            .word	0
31893                                           ! 5189                             0,
31894 820C                      0000            .word	0
31895                                           ! 5190                                1600,
31896 820E                      0640            .word	$640
31897                                           ! 5191                             0,
31898 8210                        00            .byte	0
31899                                           ! 5192                             0,
31900 8211                        00            .byte	0
31901                                           ! 5193                           5,
31902 8212                        05            .byte	5
31903                                           ! 5194                                11,
31904 8213                        0B            .byte	$B
31905                                           ! 5195                             6,
31906 8214                        06            .byte	6
31907                                           ! 5196                                  5,
31908 8215                        05            .byte	5
31909                                           ! 5197                            5,
31910 8216                        05            .byte	5
31911                                           ! 5198                                 0,
31912 8217                        00            .byte	0
31913                                           ! 5199                            0,
31914 8218                        00            .byte	0
31915                                           ! 5200                                 0,
31916 8219                        00            .byte	0
31917                                           ! 5201                          0,
31918 821A                      0000            .word	0
31919 821C                      0000            .word	0
31920                                           ! 5202 } },
31921                                           ! 5203 { 0x0115,
31922 821E                      0115            .word	$115
31923                                           ! 5204 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31924 8220                      009B            .word	$9B
31925                                           ! 5205                           0x01 | 0x02 | 0x04,
31926 8222                        07            .byte	7
31927                                           ! 5206                           0,
31928 8223                        00            .byte	0
31929                                           ! 5207                           64,
31930 8224                      0040            .word	$40
31931                                           ! 5208                    64,
31932 8226                      0040            .word	$40
31933                                           ! 5209                        0xA000,
31934 8228                      A000            .word	$A000
31935                                           ! 5210                        0x0000,
31936 822A                      0000            .word	0
31937                                           ! 5211                       0,
31938 822C                      0000            .word	0
31939 822E                      0000            .word	0
31940                                           ! 5212                             2400,
31941 8230                      0960            .word	$960
31942                                           ! 5213                        800,
31943 8232                      0320            .word	$320
31944                                           ! 5214                        600,
31945 8234                      0258            .word	$258
31946                                           ! 5215                      8,
31947 8236                        08            .byte	8
31948                                           ! 5216                      16,
31949 8237                        10            .byte	$10
31950                                           ! 5217                           1,
31951 8238                        01            .byte	1
31952                                           ! 5218                         24,
31953 8239                        18            .byte	$18
31954                                           ! 5219                          22,
31955 823A                        16            .byte	$16
31956                                           ! 5220                        0x06,
31957 823B                        06            .byte	6
31958                                           ! 5221                     0,
31959 823C                        00            .byte	0
31960                                           ! 5222                               10,
31961 823D                        0A            .byte	$A
31962                                           ! 5223                          0,
31963 823E                        00            .byte	0
31964                                           ! 5224                        8,
31965 823F                        08            .byte	8
31966                                           ! 5225                             16,
31967 8240                        10            .byte	$10
31968                                           ! 5226                          8,
31969 8241                        08            .byte	8
31970                                           ! 5227                               8,
31971 8242                        08            .byte	8
31972                                           ! 5228                         8,
31973 8243                        08            .byte	8
31974                                           ! 5229                              0,
31975 8244                        00            .byte	0
31976                                           ! 5230                         0,
31977 8245                        00            .byte	0
31978                                           ! 5231                              0,
31979 8246                        00            .byte	0
31980                                           ! 5232                                0,
31981 8247                        00            .byte	0
31982                                           ! 5233                        0xE0000000,
31983 8248                      0000            .word	0
31984 824A                      E000            .word	$E000
31985                                           ! 5234                               0,
31986 824C                      0000            .word	0
31987 824E                      0000            .word	0
31988                                           ! 5235                             0,
31989 8250                      0000            .word	0
31990                                           ! 5236                                2400,
31991 8252                      0960            .word	$960
31992                                           ! 5237                             0,
31993 8254                        00            .byte	0
31994                                           ! 5238                             0,
31995 8255                        00            .byte	0
31996                                           ! 5239                           8,
31997 8256                        08            .byte	8
31998                                           ! 5240                                16,
31999 8257                        10            .byte	$10
32000                                           ! 5241                             8,
32001 8258                        08            .byte	8
32002                                           ! 5242                                  8,
32003 8259                        08            .byte	8
32004                                           ! 5243                            8,
32005 825A                        08            .byte	8
32006                                           ! 5244                                 0,
32007 825B                        00            .byte	0
32008                                           ! 5245                            0,
32009 825C                        00            .byte	0
32010                                           ! 5246                                 0,
32011 825D                        00            .byte	0
32012                                           ! 5247                          0,
32013 825E                      0000            .word	0
32014 8260                      0000            .word	0
32015                                           ! 5248 } },
32016                                           ! 5249 { 0x0116,
32017 8262                      0116            .word	$116
32018                                           ! 5250 { 0x0001 | 0x0002 |
32019                                           ! 5250  0x0008 | 0x0080 | 0x0010,
32020 8264                      009B            .word	$9B
32021                                           ! 5251                           0x01 | 0x02 | 0x04,
32022 8266                        07            .byte	7
32023                                           ! 5252                           0,
32024 8267                        00            .byte	0
32025                                           ! 5253                           64,
32026 8268                      0040            .word	$40
32027                                           ! 5254                    64,
32028 826A                      0040            .word	$40
32029                                           ! 5255                        0xA000,
32030 826C                      A000            .word	$A000
32031                                           ! 5256                        0x0000,
32032 826E                      0000            .word	0
32033                                           ! 5257                       0,
32034 8270                      0000            .word	0
32035 8272                      0000            .word	0
32036                                           ! 5258                             2048,
32037 8274                      0800            .word	$800
32038                                           ! 5259                        1024,
32039 8276                      0400            .word	$400
32040                                           ! 5260                        768,
32041 8278                      0300            .word	$300
32042                                           ! 5261                      8,
32043 827A                        08            .byte	8
32044                                           ! 5262                      16,
32045 827B                        10            .byte	$10
32046                                           ! 5263                           1,
32047 827C                        01            .byte	1
32048                                           ! 5264                         15,
32049 827D                        0F            .byte	$F
32050                                           ! 5265                          24,
32051 827E                        18            .byte	$18
32052                                           ! 5266                        0x06,
32053 827F                        06            .byte	6
32054                                           ! 5267                     0,
32055 8280                        00            .byte	0
32056                                           ! 5268                               9,
32057 8281                        09            .byte	9
32058                                           ! 5269                          0,
32059 8282                        00            .byte	0
32060                                           ! 5270                        5,
32061 8283                        05            .byte	5
32062                                           ! 5271                             10,
32063 8284                        0A            .byte	$A
32064                                           ! 5272                          5,
32065 8285                        05            .byte	5
32066                                           ! 5273                               5,
32067 8286                        05            .byte	5
32068                                           ! 5274                         5,
32069 8287                        05            .byte	5
32070                                           ! 5275                              0,
32071 8288                        00            .byte	0
32072                                           ! 5276                         1,
32073 8289                        01            .byte	1
32074                                           ! 5277                              15,
32075 828A                        0F            .byte	$F
32076                                           ! 5278                                0,
32077 828B                        00            .byte	0
32078                                           ! 5279                        0xE0000000,
32079 828C                      0000            .word	0
32080 828E                      E000            .word	$E000
32081                                           ! 5280                               0,
32082 8290                      0000            .word	0
32083 8292                      0000            .word	0
32084                                           ! 5281                             0,
32085 8294                      0000            .word	0
32086                                           ! 5282                                2048,
32087 8296                      0800            .word	$800
32088                                           ! 5283                             0,
32089 8298                        00            .byte	0
32090                                           ! 5284                             0,
32091 8299                        00            .byte	0
32092                                           ! 5285                           5,
32093 829A                        05            .byte	5
32094                                           ! 5286                                10,
32095 829B                        0A            .byte	$A
32096                                           ! 5287                             5,
32097 829C                        05            .byte	5
32098                                           ! 5288                                  5,
32099 829D                        05            .byte	5
32100                                           ! 5289                            5,
32101 829E                        05            .byte	5
32102                                           ! 5290                                 0,
32103 829F                        00            .byte	0
32104                                           ! 5291                            1,
32105 82A0                        01            .byte	1
32106                                           ! 5292                                 15,
32107 82A1                        0F            .byte	$F
32108                                           ! 5293                          0,
32109 82A2                      0000            .word	0
32110 82A4                      0000            .word	0
32111                                           ! 5294 } },
32112                                           ! 5295 { 0x0117,
32113 82A6                      0117            .word	$117
32114                                           ! 5296 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32115 82A8                      009B            .word	$9B
32116                                           ! 5297                           0x01 | 0x02 | 0x04,
32117 82AA                        07            .byte	7
32118                                           ! 5298                           0,
32119 82AB                        00            .byte	0
32120                                           ! 5299                           64,
32121 82AC                      0040            .word	$40
32122                                           ! 5300                    64,
32123 82AE                      0040            .word	$40
32124                                           ! 5301                        0xA000,
32125 82B0                      A000            .word	$A000
32126                                           ! 5302                        0x0000,
32127 82B2                      0000            .word	0
32128                                           ! 5303                       0,
32129 82B4                      0000            .word	0
32130 82B6                      0000            .word	0
32131                                           ! 5304                             2048,
32132 82B8                      0800            .word	$800
32133                                           ! 5305                        1024,
32134 82BA                      0400            .word	$400
32135                                           ! 5306                        768,
32136 82BC                      0300            .word	$300
32137                                           ! 5307                      8,
32138 82BE                        08            .byte	8
32139                                           ! 5308                      16,
32140 82BF                        10            .byte	$10
32141                                           ! 5309                           1,
32142 82C0                        01            .byte	1
32143                                           ! 5310                         16,
32144 82C1                        10            .byte	$10
32145                                           ! 5311                          24,
32146 82C2                        18            .byte	$18
32147                                           ! 5312                        0x06,
32148 82C3                        06            .byte	6
32149                                           ! 5313                     0,
32150 82C4                        00            .byte	0
32151                                           ! 5314                               9,
32152 82C5                        09            .byte	9
32153                                           ! 5315                          0,
32154 82C6                        00            .byte	0
32155                                           ! 5316                        5,
32156 82C7                        05            .byte	5
32157                                           ! 5317                             11,
32158 82C8                        0B            .byte	$B
32159                                           ! 5318                          6,
32160 82C9                        06            .byte	6
32161                                           ! 5319       
32162                                           ! 5319                         5,
32163 82CA                        05            .byte	5
32164                                           ! 5320                         5,
32165 82CB                        05            .byte	5
32166                                           ! 5321                              0,
32167 82CC                        00            .byte	0
32168                                           ! 5322                         0,
32169 82CD                        00            .byte	0
32170                                           ! 5323                              0,
32171 82CE                        00            .byte	0
32172                                           ! 5324                                0,
32173 82CF                        00            .byte	0
32174                                           ! 5325                        0xE0000000,
32175 82D0                      0000            .word	0
32176 82D2                      E000            .word	$E000
32177                                           ! 5326                               0,
32178 82D4                      0000            .word	0
32179 82D6                      0000            .word	0
32180                                           ! 5327                             0,
32181 82D8                      0000            .word	0
32182                                           ! 5328                                2048,
32183 82DA                      0800            .word	$800
32184                                           ! 5329                             0,
32185 82DC                        00            .byte	0
32186                                           ! 5330                             0,
32187 82DD                        00            .byte	0
32188                                           ! 5331                           5,
32189 82DE                        05            .byte	5
32190                                           ! 5332                                11,
32191 82DF                        0B            .byte	$B
32192                                           ! 5333                             6,
32193 82E0                        06            .byte	6
32194                                           ! 5334                                  5,
32195 82E1                        05            .byte	5
32196                                           ! 5335                            5,
32197 82E2                        05            .byte	5
32198                                           ! 5336                                 0,
32199 82E3                        00            .byte	0
32200                                           ! 5337                            0,
32201 82E4                        00            .byte	0
32202                                           ! 5338                                 0,
32203 82E5                        00            .byte	0
32204                                           ! 5339                          0,
32205 82E6                      0000            .word	0
32206 82E8                      0000            .word	0
32207                                           ! 5340 } },
32208                                           ! 5341 { 0x0118,
32209 82EA                      0118            .word	$118
32210                                           ! 5342 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32211 82EC                      009B            .word	$9B
32212                                           ! 5343                           0x01 | 0x02 | 0x04,
32213 82EE                        07            .byte	7
32214                                           ! 5344                           0,
32215 82EF                        00            .byte	0
32216                                           ! 5345                           64,
32217 82F0                      0040            .word	$40
32218                                           ! 5346                    64,
32219 82F2                      0040            .word	$40
32220                                           ! 5347                        0xA000,
32221 82F4                      A000            .word	$A000
32222                                           ! 5348                        0x0000,
32223 82F6                      0000            .word	0
32224                                           ! 5349                       0,
32225 82F8                      0000            .word	0
32226 82FA                      0000            .word	0
32227                                           ! 5350                             3072,
32228 82FC                      0C00            .word	$C00
32229                                           ! 5351                        1024,
32230 82FE                      0400            .word	$400
32231                                           ! 5352                        768,
32232 8300                      0300            .word	$300
32233                                           ! 5353                      8,
32234 8302                        08            .byte	8
32235                                           ! 5354                      16,
32236 8303                        10            .byte	$10
32237                                           ! 5355                           1,
32238 8304                        01            .byte	1
32239                                           ! 5356                         24,
32240 8305                        18            .byte	$18
32241                                           ! 5357                          36,
32242 8306                        24            .byte	$24
32243                                           ! 5358                        0x06,
32244 8307                        06            .byte	6
32245                                           ! 5359                     0,
32246 8308                        00            .byte	0
32247                                           ! 5360                               6,
32248 8309                        06            .byte	6
32249                                           ! 5361                          0,
32250 830A                        00            .byte	0
32251                                           ! 5362                        8,
32252 830B                        08            .byte	8
32253                                           ! 5363                             16,
32254 830C                        10            .byte	$10
32255                                           ! 5364                          8,
32256 830D                        08            .byte	8
32257                                           ! 5365                               8,
32258 830E                        08            .byte	8
32259                                           ! 5366                         8,
32260 830F                        08            .byte	8
32261                                           ! 5367                              0,
32262 8310                        00            .byte	0
32263                                           ! 5368                         0,
32264 8311                        00            .byte	0
32265                                           ! 5369                              0,
32266 8312                        00            .byte	0
32267                                           ! 5370                                0,
32268 8313                        00            .byte	0
32269                                           ! 5371                        0xE0000000,
32270 8314                      0000            .word	0
32271 8316                      E000            .word	$E000
32272                                           ! 5372                               0,
32273 8318                      0000            .word	0
32274 831A                      0000            .word	0
32275                                           ! 5373                             0,
32276 831C                      0000            .word	0
32277                                           ! 5374                                3072,
32278 831E                      0C00            .word	$C00
32279                                           ! 5375                             0,
32280 8320                        00            .byte	0
32281                                           ! 5376                             0,
32282 8321                        00            .byte	0
32283                                           ! 5377                           8,
32284 8322                        08            .byte	8
32285                                           ! 5378                                16,
32286 8323                        10            .byte	$10
32287                                           ! 5379                             8,
32288 8324                        08            .byte	8
32289                                           ! 5380                                  8,
32290 8325                        08            .byte	8
32291                                           ! 5381                            8,
32292 8326                        08            .byte	8
32293                                           ! 5382                                 0,
32294 8327                        00            .byte	0
32295                                           ! 5383                            0,
32296 8328                        00            .byte	0
32297                                           ! 5384                                 0,
32298 8329                        00            .byte	0
32299                                           ! 5385                          0,
32300 832A                      0000            .word	0
32301 832C                      0000            .word	0
32302                                           ! 5386 } },
32303                                           ! 5387 { 0x
32304                                           ! 5387 0119,
32305 832E                      0119            .word	$119
32306                                           ! 5388 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32307 8330                      009B            .word	$9B
32308                                           ! 5389                           0x01 | 0x02 | 0x04,
32309 8332                        07            .byte	7
32310                                           ! 5390                           0,
32311 8333                        00            .byte	0
32312                                           ! 5391                           64,
32313 8334                      0040            .word	$40
32314                                           ! 5392                    64,
32315 8336                      0040            .word	$40
32316                                           ! 5393                        0xA000,
32317 8338                      A000            .word	$A000
32318                                           ! 5394                        0x0000,
32319 833A                      0000            .word	0
32320                                           ! 5395                       0,
32321 833C                      0000            .word	0
32322 833E                      0000            .word	0
32323                                           ! 5396                             2560,
32324 8340                      0A00            .word	$A00
32325                                           ! 5397                        1280,
32326 8342                      0500            .word	$500
32327                                           ! 5398                        1024,
32328 8344                      0400            .word	$400
32329                                           ! 5399                      8,
32330 8346                        08            .byte	8
32331                                           ! 5400                      16,
32332 8347                        10            .byte	$10
32333                                           ! 5401                           1,
32334 8348                        01            .byte	1
32335                                           ! 5402                         15,
32336 8349                        0F            .byte	$F
32337                                           ! 5403                          40,
32338 834A                        28            .byte	$28
32339                                           ! 5404                        0x06,
32340 834B                        06            .byte	6
32341                                           ! 5405                     0,
32342 834C                        00            .byte	0
32343                                           ! 5406                               5,
32344 834D                        05            .byte	5
32345                                           ! 5407                          0,
32346 834E                        00            .byte	0
32347                                           ! 5408                        5,
32348 834F                        05            .byte	5
32349                                           ! 5409                             10,
32350 8350                        0A            .byte	$A
32351                                           ! 5410                          5,
32352 8351                        05            .byte	5
32353                                           ! 5411                               5,
32354 8352                        05            .byte	5
32355                                           ! 5412                         5,
32356 8353                        05            .byte	5
32357                                           ! 5413                              0,
32358 8354                        00            .byte	0
32359                                           ! 5414                         1,
32360 8355                        01            .byte	1
32361                                           ! 5415                              15,
32362 8356                        0F            .byte	$F
32363                                           ! 5416                                0,
32364 8357                        00            .byte	0
32365                                           ! 5417                        0xE0000000,
32366 8358                      0000            .word	0
32367 835A                      E000            .word	$E000
32368                                           ! 5418                               0,
32369 835C                      0000            .word	0
32370 835E                      0000            .word	0
32371                                           ! 5419                             0,
32372 8360                      0000            .word	0
32373                                           ! 5420                                2560,
32374 8362                      0A00            .word	$A00
32375                                           ! 5421                             0,
32376 8364                        00            .byte	0
32377                                           ! 5422                             0,
32378 8365                        00            .byte	0
32379                                           ! 5423                           5,
32380 8366                        05            .byte	5
32381                                           ! 5424                                10,
32382 8367                        0A            .byte	$A
32383                                           ! 5425                             5,
32384 8368                        05            .byte	5
32385                                           ! 5426                                  5,
32386 8369                        05            .byte	5
32387                                           ! 5427                            5,
32388 836A                        05            .byte	5
32389                                           ! 5428                                 0,
32390 836B                        00            .byte	0
32391                                           ! 5429                            1,
32392 836C                        01            .byte	1
32393                                           ! 5430                                 15,
32394 836D                        0F            .byte	$F
32395                                           ! 5431                          0,
32396 836E                      0000            .word	0
32397 8370                      0000            .word	0
32398                                           ! 5432 } },
32399                                           ! 5433 { 0x011a,
32400 8372                      011A            .word	$11A
32401                                           ! 5434 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32402 8374                      009B            .word	$9B
32403                                           ! 5435                           0x01 | 0x02 | 0x04,
32404 8376                        07            .byte	7
32405                                           ! 5436                           0,
32406 8377                        00            .byte	0
32407                                           ! 5437                           64,
32408 8378                      0040            .word	$40
32409                                           ! 5438                    64,
32410 837A                      0040            .word	$40
32411                                           ! 5439                        0xA000,
32412 837C                      A000            .word	$A000
32413                                           ! 5440                        0x0000,
32414 837E                      0000            .word	0
32415                                           ! 5441                       0,
32416 8380                      0000            .word	0
32417 8382                      0000            .word	0
32418                                           ! 5442                             2560,
32419 8384                      0A00            .word	$A00
32420                                           ! 5443                        1280,
32421 8386                      0500            .word	$500
32422                                           ! 5444                        1024,
32423 8388                      0400            .word	$400
32424                                           ! 5445                      8,
32425 838A                        08            .byte	8
32426                                           ! 5446                      16,
32427 838B                        10            .byte	$10
32428                                           ! 5447                           1,
32429 838C                        01            .byte	1
32430                                           ! 5448                         16,
32431 838D                        10            .byte	$10
32432                                           ! 5449                          40,
32433 838E                        28            .byte	$28
32434                                           ! 5450                        0x06,
32435 838F                        06            .byte	6
32436                                           ! 5451                     0,
32437 8390                        00            .byte	0
32438                                           ! 5452                               5,
32439 8391                        05            .byte	5
32440                                           ! 5453                          0,
32441 8392                        00            .byte	0
32442                                           ! 5454                        5,
32443 8393                        05            .byte	5
32444                                           ! 5455                             11,
32445 8394                        0B            .byte	$B
32446                                           ! 5456        
32447                                           ! 5456                   6,
32448 8395                        06            .byte	6
32449                                           ! 5457                               5,
32450 8396                        05            .byte	5
32451                                           ! 5458                         5,
32452 8397                        05            .byte	5
32453                                           ! 5459                              0,
32454 8398                        00            .byte	0
32455                                           ! 5460                         0,
32456 8399                        00            .byte	0
32457                                           ! 5461                              0,
32458 839A                        00            .byte	0
32459                                           ! 5462                                0,
32460 839B                        00            .byte	0
32461                                           ! 5463                        0xE0000000,
32462 839C                      0000            .word	0
32463 839E                      E000            .word	$E000
32464                                           ! 5464                               0,
32465 83A0                      0000            .word	0
32466 83A2                      0000            .word	0
32467                                           ! 5465                             0,
32468 83A4                      0000            .word	0
32469                                           ! 5466                                2560,
32470 83A6                      0A00            .word	$A00
32471                                           ! 5467                             0,
32472 83A8                        00            .byte	0
32473                                           ! 5468                             0,
32474 83A9                        00            .byte	0
32475                                           ! 5469                           5,
32476 83AA                        05            .byte	5
32477                                           ! 5470                                11,
32478 83AB                        0B            .byte	$B
32479                                           ! 5471                             6,
32480 83AC                        06            .byte	6
32481                                           ! 5472                                  5,
32482 83AD                        05            .byte	5
32483                                           ! 5473                            5,
32484 83AE                        05            .byte	5
32485                                           ! 5474                                 0,
32486 83AF                        00            .byte	0
32487                                           ! 5475                            0,
32488 83B0                        00            .byte	0
32489                                           ! 5476                                 0,
32490 83B1                        00            .byte	0
32491                                           ! 5477                          0,
32492 83B2                      0000            .word	0
32493 83B4                      0000            .word	0
32494                                           ! 5478 } },
32495                                           ! 5479 { 0x011b,
32496 83B6                      011B            .word	$11B
32497                                           ! 5480 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32498 83B8                      009B            .word	$9B
32499                                           ! 5481                           0x01 | 0x02 | 0x04,
32500 83BA                        07            .byte	7
32501                                           ! 5482                           0,
32502 83BB                        00            .byte	0
32503                                           ! 5483                           64,
32504 83BC                      0040            .word	$40
32505                                           ! 5484                    64,
32506 83BE                      0040            .word	$40
32507                                           ! 5485                        0xA000,
32508 83C0                      A000            .word	$A000
32509                                           ! 5486                        0x0000,
32510 83C2                      0000            .word	0
32511                                           ! 5487                       0,
32512 83C4                      0000            .word	0
32513 83C6                      0000            .word	0
32514                                           ! 5488                             3840,
32515 83C8                      0F00            .word	$F00
32516                                           ! 5489                        1280,
32517 83CA                      0500            .word	$500
32518                                           ! 5490                        1024,
32519 83CC                      0400            .word	$400
32520                                           ! 5491                      8,
32521 83CE                        08            .byte	8
32522                                           ! 5492                      16,
32523 83CF                        10            .byte	$10
32524                                           ! 5493                           1,
32525 83D0                        01            .byte	1
32526                                           ! 5494                         24,
32527 83D1                        18            .byte	$18
32528                                           ! 5495                          60,
32529 83D2                        3C            .byte	$3C
32530                                           ! 5496                        0x06,
32531 83D3                        06            .byte	6
32532                                           ! 5497                     0,
32533 83D4                        00            .byte	0
32534                                           ! 5498                               3,
32535 83D5                        03            .byte	3
32536                                           ! 5499                          0,
32537 83D6                        00            .byte	0
32538                                           ! 5500                        8,
32539 83D7                        08            .byte	8
32540                                           ! 5501                             16,
32541 83D8                        10            .byte	$10
32542                                           ! 5502                          8,
32543 83D9                        08            .byte	8
32544                                           ! 5503                               8,
32545 83DA                        08            .byte	8
32546                                           ! 5504                         8,
32547 83DB                        08            .byte	8
32548                                           ! 5505                              0,
32549 83DC                        00            .byte	0
32550                                           ! 5506                         0,
32551 83DD                        00            .byte	0
32552                                           ! 5507                              0,
32553 83DE                        00            .byte	0
32554                                           ! 5508                                0,
32555 83DF                        00            .byte	0
32556                                           ! 5509                        0xE0000000,
32557 83E0                      0000            .word	0
32558 83E2                      E000            .word	$E000
32559                                           ! 5510                               0,
32560 83E4                      0000            .word	0
32561 83E6                      0000            .word	0
32562                                           ! 5511                             0,
32563 83E8                      0000            .word	0
32564                                           ! 5512                                3840,
32565 83EA                      0F00            .word	$F00
32566                                           ! 5513                             0,
32567 83EC                        00            .byte	0
32568                                           ! 5514                             0,
32569 83ED                        00            .byte	0
32570                                           ! 5515                           8,
32571 83EE                        08            .byte	8
32572                                           ! 5516                                16,
32573 83EF                        10            .byte	$10
32574                                           ! 5517                             8,
32575 83F0                        08            .byte	8
32576                                           ! 5518                                  8,
32577 83F1                        08            .byte	8
32578                                           ! 5519                            8,
32579 83F2                        08            .byte	8
32580                                           ! 5520                                 0,
32581 83F3                        00            .byte	0
32582                                           ! 5521                            0,
32583 83F4                        00            .byte	0
32584                                           ! 5522                                 0,
32585 83F5                        00            .byte	0
32586                                           ! 5523          
32587                                           ! 5523                 0,
32588 83F6                      0000            .word	0
32589 83F8                      0000            .word	0
32590                                           ! 5524 } },
32591                                           ! 5525 { 0x011c,
32592 83FA                      011C            .word	$11C
32593                                           ! 5526 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32594 83FC                      009B            .word	$9B
32595                                           ! 5527                           0x01 | 0x02 | 0x04,
32596 83FE                        07            .byte	7
32597                                           ! 5528                           0,
32598 83FF                        00            .byte	0
32599                                           ! 5529                           64,
32600 8400                      0040            .word	$40
32601                                           ! 5530                    64,
32602 8402                      0040            .word	$40
32603                                           ! 5531                        0xA000,
32604 8404                      A000            .word	$A000
32605                                           ! 5532                        0x0000,
32606 8406                      0000            .word	0
32607                                           ! 5533                       0,
32608 8408                      0000            .word	0
32609 840A                      0000            .word	0
32610                                           ! 5534                             1600,
32611 840C                      0640            .word	$640
32612                                           ! 5535                        1600,
32613 840E                      0640            .word	$640
32614                                           ! 5536                        1200,
32615 8410                      04B0            .word	$4B0
32616                                           ! 5537                      8,
32617 8412                        08            .byte	8
32618                                           ! 5538                      16,
32619 8413                        10            .byte	$10
32620                                           ! 5539                           1,
32621 8414                        01            .byte	1
32622                                           ! 5540                         8,
32623 8415                        08            .byte	8
32624                                           ! 5541                          30,
32625 8416                        1E            .byte	$1E
32626                                           ! 5542                        0x04,
32627 8417                        04            .byte	4
32628                                           ! 5543                     0,
32629 8418                        00            .byte	0
32630                                           ! 5544                               7,
32631 8419                        07            .byte	7
32632                                           ! 5545                          0,
32633 841A                        00            .byte	0
32634                                           ! 5546                        0,
32635 841B                        00            .byte	0
32636                                           ! 5547                             0,
32637 841C                        00            .byte	0
32638                                           ! 5548                          0,
32639 841D                        00            .byte	0
32640                                           ! 5549                               0,
32641 841E                        00            .byte	0
32642                                           ! 5550                         0,
32643 841F                        00            .byte	0
32644                                           ! 5551                              0,
32645 8420                        00            .byte	0
32646                                           ! 5552                         0,
32647 8421                        00            .byte	0
32648                                           ! 5553                              0,
32649 8422                        00            .byte	0
32650                                           ! 5554                                0,
32651 8423                        00            .byte	0
32652                                           ! 5555                        0xE0000000,
32653 8424                      0000            .word	0
32654 8426                      E000            .word	$E000
32655                                           ! 5556                               0,
32656 8428                      0000            .word	0
32657 842A                      0000            .word	0
32658                                           ! 5557                             0,
32659 842C                      0000            .word	0
32660                                           ! 5558                                1600,
32661 842E                      0640            .word	$640
32662                                           ! 5559                             0,
32663 8430                        00            .byte	0
32664                                           ! 5560                             0,
32665 8431                        00            .byte	0
32666                                           ! 5561                           0,
32667 8432                        00            .byte	0
32668                                           ! 5562                                0,
32669 8433                        00            .byte	0
32670                                           ! 5563                             0,
32671 8434                        00            .byte	0
32672                                           ! 5564                                  0,
32673 8435                        00            .byte	0
32674                                           ! 5565                            0,
32675 8436                        00            .byte	0
32676                                           ! 5566                                 0,
32677 8437                        00            .byte	0
32678                                           ! 5567                            0,
32679 8438                        00            .byte	0
32680                                           ! 5568                                 0,
32681 8439                        00            .byte	0
32682                                           ! 5569                          0,
32683 843A                      0000            .word	0
32684 843C                      0000            .word	0
32685                                           ! 5570 } },
32686                                           ! 5571 { 0x011d,
32687 843E                      011D            .word	$11D
32688                                           ! 5572 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32689 8440                      009B            .word	$9B
32690                                           ! 5573                           0x01 | 0x02 | 0x04,
32691 8442                        07            .byte	7
32692                                           ! 5574                           0,
32693 8443                        00            .byte	0
32694                                           ! 5575                           64,
32695 8444                      0040            .word	$40
32696                                           ! 5576                    64,
32697 8446                      0040            .word	$40
32698                                           ! 5577                        0xA000,
32699 8448                      A000            .word	$A000
32700                                           ! 5578                        0x0000,
32701 844A                      0000            .word	0
32702                                           ! 5579                       0,
32703 844C                      0000            .word	0
32704 844E                      0000            .word	0
32705                                           ! 5580                             3200,
32706 8450                      0C80            .word	$C80
32707                                           ! 5581                        1600,
32708 8452                      0640            .word	$640
32709                                           ! 5582                        1200,
32710 8454                      04B0            .word	$4B0
32711                                           ! 5583                      8,
32712 8456                        08            .byte	8
32713                                           ! 5584                      16,
32714 8457                        10            .byte	$10
32715                                           ! 5585                           1,
32716 8458                        01            .byte	1
32717                                           ! 5586                         15,
32718 8459                        0F            .byte	$F
32719                                           ! 5587                          59,
32720 845A                        3B            .byte	$3B
32721                                           ! 5588                        0x06,
32722 845B                        06            .byte	6
32723                                           ! 5589                     0,
32724 845C                        00            .byte	0
32725                                           ! 5590                               3,
32726 845D                        03            .byte	3
32727                                           ! 5591                          0,
32728 845E                        00            .byte	0
32729                                           ! 5592                        5,
32730 845F                        05            .byte	5
32731                                           ! 5593                 
32732                                           ! 5593             10,
32733 8460                        0A            .byte	$A
32734                                           ! 5594                          5,
32735 8461                        05            .byte	5
32736                                           ! 5595                               5,
32737 8462                        05            .byte	5
32738                                           ! 5596                         5,
32739 8463                        05            .byte	5
32740                                           ! 5597                              0,
32741 8464                        00            .byte	0
32742                                           ! 5598                         1,
32743 8465                        01            .byte	1
32744                                           ! 5599                              15,
32745 8466                        0F            .byte	$F
32746                                           ! 5600                                0,
32747 8467                        00            .byte	0
32748                                           ! 5601                        0xE0000000,
32749 8468                      0000            .word	0
32750 846A                      E000            .word	$E000
32751                                           ! 5602                               0,
32752 846C                      0000            .word	0
32753 846E                      0000            .word	0
32754                                           ! 5603                             0,
32755 8470                      0000            .word	0
32756                                           ! 5604                                3200,
32757 8472                      0C80            .word	$C80
32758                                           ! 5605                             0,
32759 8474                        00            .byte	0
32760                                           ! 5606                             0,
32761 8475                        00            .byte	0
32762                                           ! 5607                           5,
32763 8476                        05            .byte	5
32764                                           ! 5608                                10,
32765 8477                        0A            .byte	$A
32766                                           ! 5609                             5,
32767 8478                        05            .byte	5
32768                                           ! 5610                                  5,
32769 8479                        05            .byte	5
32770                                           ! 5611                            5,
32771 847A                        05            .byte	5
32772                                           ! 5612                                 0,
32773 847B                        00            .byte	0
32774                                           ! 5613                            1,
32775 847C                        01            .byte	1
32776                                           ! 5614                                 15,
32777 847D                        0F            .byte	$F
32778                                           ! 5615                          0,
32779 847E                      0000            .word	0
32780 8480                      0000            .word	0
32781                                           ! 5616 } },
32782                                           ! 5617 { 0x011e,
32783 8482                      011E            .word	$11E
32784                                           ! 5618 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32785 8484                      009B            .word	$9B
32786                                           ! 5619                           0x01 | 0x02 | 0x04,
32787 8486                        07            .byte	7
32788                                           ! 5620                           0,
32789 8487                        00            .byte	0
32790                                           ! 5621                           64,
32791 8488                      0040            .word	$40
32792                                           ! 5622                    64,
32793 848A                      0040            .word	$40
32794                                           ! 5623                        0xA000,
32795 848C                      A000            .word	$A000
32796                                           ! 5624                        0x0000,
32797 848E                      0000            .word	0
32798                                           ! 5625                       0,
32799 8490                      0000            .word	0
32800 8492                      0000            .word	0
32801                                           ! 5626                             3200,
32802 8494                      0C80            .word	$C80
32803                                           ! 5627                        1600,
32804 8496                      0640            .word	$640
32805                                           ! 5628                        1200,
32806 8498                      04B0            .word	$4B0
32807                                           ! 5629                      8,
32808 849A                        08            .byte	8
32809                                           ! 5630                      16,
32810 849B                        10            .byte	$10
32811                                           ! 5631                           1,
32812 849C                        01            .byte	1
32813                                           ! 5632                         16,
32814 849D                        10            .byte	$10
32815                                           ! 5633                          59,
32816 849E                        3B            .byte	$3B
32817                                           ! 5634                        0x06,
32818 849F                        06            .byte	6
32819                                           ! 5635                     0,
32820 84A0                        00            .byte	0
32821                                           ! 5636                               3,
32822 84A1                        03            .byte	3
32823                                           ! 5637                          0,
32824 84A2                        00            .byte	0
32825                                           ! 5638                        5,
32826 84A3                        05            .byte	5
32827                                           ! 5639                             11,
32828 84A4                        0B            .byte	$B
32829                                           ! 5640                          6,
32830 84A5                        06            .byte	6
32831                                           ! 5641                               5,
32832 84A6                        05            .byte	5
32833                                           ! 5642                         5,
32834 84A7                        05            .byte	5
32835                                           ! 5643                              0,
32836 84A8                        00            .byte	0
32837                                           ! 5644                         0,
32838 84A9                        00            .byte	0
32839                                           ! 5645                              0,
32840 84AA                        00            .byte	0
32841                                           ! 5646                                0,
32842 84AB                        00            .byte	0
32843                                           ! 5647                        0xE0000000,
32844 84AC                      0000            .word	0
32845 84AE                      E000            .word	$E000
32846                                           ! 5648                               0,
32847 84B0                      0000            .word	0
32848 84B2                      0000            .word	0
32849                                           ! 5649                             0,
32850 84B4                      0000            .word	0
32851                                           ! 5650                                3200,
32852 84B6                      0C80            .word	$C80
32853                                           ! 5651                             0,
32854 84B8                        00            .byte	0
32855                                           ! 5652                             0,
32856 84B9                        00            .byte	0
32857                                           ! 5653                           5,
32858 84BA                        05            .byte	5
32859                                           ! 5654                                11,
32860 84BB                        0B            .byte	$B
32861                                           ! 5655                             6,
32862 84BC                        06            .byte	6
32863                                           ! 5656                                  5,
32864 84BD                        05            .byte	5
32865                                           ! 5657                            5,
32866 84BE                        05            .byte	5
32867                                           ! 5658                                 0,
32868 84BF                        00            .byte	0
32869                                           ! 5659                            0,
32870 84C0                        00            .byte	0
32871                                           ! 5660                    
32872                                           ! 5660              0,
32873 84C1                        00            .byte	0
32874                                           ! 5661                          0,
32875 84C2                      0000            .word	0
32876 84C4                      0000            .word	0
32877                                           ! 5662 } },
32878                                           ! 5663 { 0x011f,
32879 84C6                      011F            .word	$11F
32880                                           ! 5664 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32881 84C8                      009B            .word	$9B
32882                                           ! 5665                           0x01 | 0x02 | 0x04,
32883 84CA                        07            .byte	7
32884                                           ! 5666                           0,
32885 84CB                        00            .byte	0
32886                                           ! 5667                           64,
32887 84CC                      0040            .word	$40
32888                                           ! 5668                    64,
32889 84CE                      0040            .word	$40
32890                                           ! 5669                        0xA000,
32891 84D0                      A000            .word	$A000
32892                                           ! 5670                        0x0000,
32893 84D2                      0000            .word	0
32894                                           ! 5671                       0,
32895 84D4                      0000            .word	0
32896 84D6                      0000            .word	0
32897                                           ! 5672                             4800,
32898 84D8                      12C0            .word	$12C0
32899                                           ! 5673                        1600,
32900 84DA                      0640            .word	$640
32901                                           ! 5674                        1200,
32902 84DC                      04B0            .word	$4B0
32903                                           ! 5675                      8,
32904 84DE                        08            .byte	8
32905                                           ! 5676                      16,
32906 84DF                        10            .byte	$10
32907                                           ! 5677                           1,
32908 84E0                        01            .byte	1
32909                                           ! 5678                         24,
32910 84E1                        18            .byte	$18
32911                                           ! 5679                          88,
32912 84E2                        58            .byte	$58
32913                                           ! 5680                        0x06,
32914 84E3                        06            .byte	6
32915                                           ! 5681                     0,
32916 84E4                        00            .byte	0
32917                                           ! 5682                               1,
32918 84E5                        01            .byte	1
32919                                           ! 5683                          0,
32920 84E6                        00            .byte	0
32921                                           ! 5684                        8,
32922 84E7                        08            .byte	8
32923                                           ! 5685                             16,
32924 84E8                        10            .byte	$10
32925                                           ! 5686                          8,
32926 84E9                        08            .byte	8
32927                                           ! 5687                               8,
32928 84EA                        08            .byte	8
32929                                           ! 5688                         8,
32930 84EB                        08            .byte	8
32931                                           ! 5689                              0,
32932 84EC                        00            .byte	0
32933                                           ! 5690                         0,
32934 84ED                        00            .byte	0
32935                                           ! 5691                              0,
32936 84EE                        00            .byte	0
32937                                           ! 5692                                0,
32938 84EF                        00            .byte	0
32939                                           ! 5693                        0xE0000000,
32940 84F0                      0000            .word	0
32941 84F2                      E000            .word	$E000
32942                                           ! 5694                               0,
32943 84F4                      0000            .word	0
32944 84F6                      0000            .word	0
32945                                           ! 5695                             0,
32946 84F8                      0000            .word	0
32947                                           ! 5696                                4800,
32948 84FA                      12C0            .word	$12C0
32949                                           ! 5697                             0,
32950 84FC                        00            .byte	0
32951                                           ! 5698                             0,
32952 84FD                        00            .byte	0
32953                                           ! 5699                           8,
32954 84FE                        08            .byte	8
32955                                           ! 5700                                16,
32956 84FF                        10            .byte	$10
32957                                           ! 5701                             8,
32958 8500                        08            .byte	8
32959                                           ! 5702                                  8,
32960 8501                        08            .byte	8
32961                                           ! 5703                            8,
32962 8502                        08            .byte	8
32963                                           ! 5704                                 0,
32964 8503                        00            .byte	0
32965                                           ! 5705                            0,
32966 8504                        00            .byte	0
32967                                           ! 5706                                 0,
32968 8505                        00            .byte	0
32969                                           ! 5707                          0,
32970 8506                      0000            .word	0
32971 8508                      0000            .word	0
32972                                           ! 5708 } },
32973                                           ! 5709 { 0x0140,
32974 850A                      0140            .word	$140
32975                                           ! 5710 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32976 850C                      009B            .word	$9B
32977                                           ! 5711                           0x01 | 0x02 | 0x04,
32978 850E                        07            .byte	7
32979                                           ! 5712                           0,
32980 850F                        00            .byte	0
32981                                           ! 5713                           64,
32982 8510                      0040            .word	$40
32983                                           ! 5714                    64,
32984 8512                      0040            .word	$40
32985                                           ! 5715                        0xA000,
32986 8514                      A000            .word	$A000
32987                                           ! 5716                        0x0000,
32988 8516                      0000            .word	0
32989                                           ! 5717                       0,
32990 8518                      0000            .word	0
32991 851A                      0000            .word	0
32992                                           ! 5718                             1280,
32993 851C                      0500            .word	$500
32994                                           ! 5719                        320,
32995 851E                      0140            .word	$140
32996                                           ! 5720                        200,
32997 8520                      00C8            .word	$C8
32998                                           ! 5721                      8,
32999 8522                        08            .byte	8
33000                                           ! 5722                      16,
33001 8523                        10            .byte	$10
33002                                           ! 5723                           1,
33003 8524                        01            .byte	1
33004                                           ! 5724                         32,
33005 8525                        20            .byte	$20
33006                                           ! 5725                          4,
33007 8526                        04            .byte	4
33008                                           ! 5726                        0x06,
33009 8527                        06            .byte	6
33010                                           ! 5727                     0,
33011 8528                        00            .byte	0
33012                                           ! 5728                               64,
33013 8529                        40            .byte	$40
33014                                           ! 5729                          0,
33015 852A                        00            .byte	0
33016                                           ! 5730                 
33017                                           ! 5730        8,
33018 852B                        08            .byte	8
33019                                           ! 5731                             16,
33020 852C                        10            .byte	$10
33021                                           ! 5732                          8,
33022 852D                        08            .byte	8
33023                                           ! 5733                               8,
33024 852E                        08            .byte	8
33025                                           ! 5734                         8,
33026 852F                        08            .byte	8
33027                                           ! 5735                              0,
33028 8530                        00            .byte	0
33029                                           ! 5736                         8,
33030 8531                        08            .byte	8
33031                                           ! 5737                              24,
33032 8532                        18            .byte	$18
33033                                           ! 5738                                0x02,
33034 8533                        02            .byte	2
33035                                           ! 5739                        0xE0000000,
33036 8534                      0000            .word	0
33037 8536                      E000            .word	$E000
33038                                           ! 5740                               0,
33039 8538                      0000            .word	0
33040 853A                      0000            .word	0
33041                                           ! 5741                             0,
33042 853C                      0000            .word	0
33043                                           ! 5742                                1280,
33044 853E                      0500            .word	$500
33045                                           ! 5743                             0,
33046 8540                        00            .byte	0
33047                                           ! 5744                             0,
33048 8541                        00            .byte	0
33049                                           ! 5745                           8,
33050 8542                        08            .byte	8
33051                                           ! 5746                                16,
33052 8543                        10            .byte	$10
33053                                           ! 5747                             8,
33054 8544                        08            .byte	8
33055                                           ! 5748                                  8,
33056 8545                        08            .byte	8
33057                                           ! 5749                            8,
33058 8546                        08            .byte	8
33059                                           ! 5750                                 0,
33060 8547                        00            .byte	0
33061                                           ! 5751                            8,
33062 8548                        08            .byte	8
33063                                           ! 5752                                 24,
33064 8549                        18            .byte	$18
33065                                           ! 5753                          0,
33066 854A                      0000            .word	0
33067 854C                      0000            .word	0
33068                                           ! 5754 } },
33069                                           ! 5755 { 0x0141,
33070 854E                      0141            .word	$141
33071                                           ! 5756 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33072 8550                      009B            .word	$9B
33073                                           ! 5757                           0x01 | 0x02 | 0x04,
33074 8552                        07            .byte	7
33075                                           ! 5758                           0,
33076 8553                        00            .byte	0
33077                                           ! 5759                           64,
33078 8554                      0040            .word	$40
33079                                           ! 5760                    64,
33080 8556                      0040            .word	$40
33081                                           ! 5761                        0xA000,
33082 8558                      A000            .word	$A000
33083                                           ! 5762                        0x0000,
33084 855A                      0000            .word	0
33085                                           ! 5763                       0,
33086 855C                      0000            .word	0
33087 855E                      0000            .word	0
33088                                           ! 5764                             2560,
33089 8560                      0A00            .word	$A00
33090                                           ! 5765                        640,
33091 8562                      0280            .word	$280
33092                                           ! 5766                        400,
33093 8564                      0190            .word	$190
33094                                           ! 5767                      8,
33095 8566                        08            .byte	8
33096                                           ! 5768                      16,
33097 8567                        10            .byte	$10
33098                                           ! 5769                           1,
33099 8568                        01            .byte	1
33100                                           ! 5770                         32,
33101 8569                        20            .byte	$20
33102                                           ! 5771                          16,
33103 856A                        10            .byte	$10
33104                                           ! 5772                        0x06,
33105 856B                        06            .byte	6
33106                                           ! 5773                     0,
33107 856C                        00            .byte	0
33108                                           ! 5774                               15,
33109 856D                        0F            .byte	$F
33110                                           ! 5775                          0,
33111 856E                        00            .byte	0
33112                                           ! 5776                        8,
33113 856F                        08            .byte	8
33114                                           ! 5777                             16,
33115 8570                        10            .byte	$10
33116                                           ! 5778                          8,
33117 8571                        08            .byte	8
33118                                           ! 5779                               8,
33119 8572                        08            .byte	8
33120                                           ! 5780                         8,
33121 8573                        08            .byte	8
33122                                           ! 5781                              0,
33123 8574                        00            .byte	0
33124                                           ! 5782                         8,
33125 8575                        08            .byte	8
33126                                           ! 5783                              24,
33127 8576                        18            .byte	$18
33128                                           ! 5784                                0x02,
33129 8577                        02            .byte	2
33130                                           ! 5785                        0xE0000000,
33131 8578                      0000            .word	0
33132 857A                      E000            .word	$E000
33133                                           ! 5786                               0,
33134 857C                      0000            .word	0
33135 857E                      0000            .word	0
33136                                           ! 5787                             0,
33137 8580                      0000            .word	0
33138                                           ! 5788                                2560,
33139 8582                      0A00            .word	$A00
33140                                           ! 5789                             0,
33141 8584                        00            .byte	0
33142                                           ! 5790                             0,
33143 8585                        00            .byte	0
33144                                           ! 5791                           8,
33145 8586                        08            .byte	8
33146                                           ! 5792                                16,
33147 8587                        10            .byte	$10
33148                                           ! 5793                             8,
33149 8588                        08            .byte	8
33150                                           ! 5794                                  8,
33151 8589                        08            .byte	8
33152                                           ! 5795                            8,
33153 858A                        08            .byte	8
33154                                           ! 5796                                 0,
33155 858B                        00            .byte	0
33156                                           ! 5797                  
33157                                           ! 5797           8,
33158 858C                        08            .byte	8
33159                                           ! 5798                                 24,
33160 858D                        18            .byte	$18
33161                                           ! 5799                          0,
33162 858E                      0000            .word	0
33163 8590                      0000            .word	0
33164                                           ! 5800 } },
33165                                           ! 5801 { 0x0142,
33166 8592                      0142            .word	$142
33167                                           ! 5802 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33168 8594                      009B            .word	$9B
33169                                           ! 5803                           0x01 | 0x02 | 0x04,
33170 8596                        07            .byte	7
33171                                           ! 5804                           0,
33172 8597                        00            .byte	0
33173                                           ! 5805                           64,
33174 8598                      0040            .word	$40
33175                                           ! 5806                    64,
33176 859A                      0040            .word	$40
33177                                           ! 5807                        0xA000,
33178 859C                      A000            .word	$A000
33179                                           ! 5808                        0x0000,
33180 859E                      0000            .word	0
33181                                           ! 5809                       0,
33182 85A0                      0000            .word	0
33183 85A2                      0000            .word	0
33184                                           ! 5810                             2560,
33185 85A4                      0A00            .word	$A00
33186                                           ! 5811                        640,
33187 85A6                      0280            .word	$280
33188                                           ! 5812                        480,
33189 85A8                      01E0            .word	$1E0
33190                                           ! 5813                      8,
33191 85AA                        08            .byte	8
33192                                           ! 5814                      16,
33193 85AB                        10            .byte	$10
33194                                           ! 5815                           1,
33195 85AC                        01            .byte	1
33196                                           ! 5816                         32,
33197 85AD                        20            .byte	$20
33198                                           ! 5817                          19,
33199 85AE                        13            .byte	$13
33200                                           ! 5818                        0x06,
33201 85AF                        06            .byte	6
33202                                           ! 5819                     0,
33203 85B0                        00            .byte	0
33204                                           ! 5820                               12,
33205 85B1                        0C            .byte	$C
33206                                           ! 5821                          0,
33207 85B2                        00            .byte	0
33208                                           ! 5822                        8,
33209 85B3                        08            .byte	8
33210                                           ! 5823                             16,
33211 85B4                        10            .byte	$10
33212                                           ! 5824                          8,
33213 85B5                        08            .byte	8
33214                                           ! 5825                               8,
33215 85B6                        08            .byte	8
33216                                           ! 5826                         8,
33217 85B7                        08            .byte	8
33218                                           ! 5827                              0,
33219 85B8                        00            .byte	0
33220                                           ! 5828                         8,
33221 85B9                        08            .byte	8
33222                                           ! 5829                              24,
33223 85BA                        18            .byte	$18
33224                                           ! 5830                                0x02,
33225 85BB                        02            .byte	2
33226                                           ! 5831                        0xE0000000,
33227 85BC                      0000            .word	0
33228 85BE                      E000            .word	$E000
33229                                           ! 5832                               0,
33230 85C0                      0000            .word	0
33231 85C2                      0000            .word	0
33232                                           ! 5833                             0,
33233 85C4                      0000            .word	0
33234                                           ! 5834                                2560,
33235 85C6                      0A00            .word	$A00
33236                                           ! 5835                             0,
33237 85C8                        00            .byte	0
33238                                           ! 5836                             0,
33239 85C9                        00            .byte	0
33240                                           ! 5837                           8,
33241 85CA                        08            .byte	8
33242                                           ! 5838                                16,
33243 85CB                        10            .byte	$10
33244                                           ! 5839                             8,
33245 85CC                        08            .byte	8
33246                                           ! 5840                                  8,
33247 85CD                        08            .byte	8
33248                                           ! 5841                            8,
33249 85CE                        08            .byte	8
33250                                           ! 5842                                 0,
33251 85CF                        00            .byte	0
33252                                           ! 5843                            8,
33253 85D0                        08            .byte	8
33254                                           ! 5844                                 24,
33255 85D1                        18            .byte	$18
33256                                           ! 5845                          0,
33257 85D2                      0000            .word	0
33258 85D4                      0000            .word	0
33259                                           ! 5846 } },
33260                                           ! 5847 { 0x0143,
33261 85D6                      0143            .word	$143
33262                                           ! 5848 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33263 85D8                      009B            .word	$9B
33264                                           ! 5849                           0x01 | 0x02 | 0x04,
33265 85DA                        07            .byte	7
33266                                           ! 5850                           0,
33267 85DB                        00            .byte	0
33268                                           ! 5851                           64,
33269 85DC                      0040            .word	$40
33270                                           ! 5852                    64,
33271 85DE                      0040            .word	$40
33272                                           ! 5853                        0xA000,
33273 85E0                      A000            .word	$A000
33274                                           ! 5854                        0x0000,
33275 85E2                      0000            .word	0
33276                                           ! 5855                       0,
33277 85E4                      0000            .word	0
33278 85E6                      0000            .word	0
33279                                           ! 5856                             3200,
33280 85E8                      0C80            .word	$C80
33281                                           ! 5857                        800,
33282 85EA                      0320            .word	$320
33283                                           ! 5858                        600,
33284 85EC                      0258            .word	$258
33285                                           ! 5859                      8,
33286 85EE                        08            .byte	8
33287                                           ! 5860                      16,
33288 85EF                        10            .byte	$10
33289                                           ! 5861                           1,
33290 85F0                        01            .byte	1
33291                                           ! 5862                         32,
33292 85F1                        20            .byte	$20
33293                                           ! 5863                          30,
33294 85F2                        1E            .byte	$1E
33295                                           ! 5864                        0x06,
33296 85F3                        06            .byte	6
33297                                           ! 5865                     0,
33298 85F4                        00            .byte	0
33299                                           ! 5866                               7,
33300 85F5                        07            .byte	7
33301                                           ! 5867        
33302                                           ! 5867                   0,
33303 85F6                        00            .byte	0
33304                                           ! 5868                        8,
33305 85F7                        08            .byte	8
33306                                           ! 5869                             16,
33307 85F8                        10            .byte	$10
33308                                           ! 5870                          8,
33309 85F9                        08            .byte	8
33310                                           ! 5871                               8,
33311 85FA                        08            .byte	8
33312                                           ! 5872                         8,
33313 85FB                        08            .byte	8
33314                                           ! 5873                              0,
33315 85FC                        00            .byte	0
33316                                           ! 5874                         8,
33317 85FD                        08            .byte	8
33318                                           ! 5875                              24,
33319 85FE                        18            .byte	$18
33320                                           ! 5876                                0x02,
33321 85FF                        02            .byte	2
33322                                           ! 5877                        0xE0000000,
33323 8600                      0000            .word	0
33324 8602                      E000            .word	$E000
33325                                           ! 5878                               0,
33326 8604                      0000            .word	0
33327 8606                      0000            .word	0
33328                                           ! 5879                             0,
33329 8608                      0000            .word	0
33330                                           ! 5880                                3200,
33331 860A                      0C80            .word	$C80
33332                                           ! 5881                             0,
33333 860C                        00            .byte	0
33334                                           ! 5882                             0,
33335 860D                        00            .byte	0
33336                                           ! 5883                           8,
33337 860E                        08            .byte	8
33338                                           ! 5884                                16,
33339 860F                        10            .byte	$10
33340                                           ! 5885                             8,
33341 8610                        08            .byte	8
33342                                           ! 5886                                  8,
33343 8611                        08            .byte	8
33344                                           ! 5887                            8,
33345 8612                        08            .byte	8
33346                                           ! 5888                                 0,
33347 8613                        00            .byte	0
33348                                           ! 5889                            8,
33349 8614                        08            .byte	8
33350                                           ! 5890                                 24,
33351 8615                        18            .byte	$18
33352                                           ! 5891                          0,
33353 8616                      0000            .word	0
33354 8618                      0000            .word	0
33355                                           ! 5892 } },
33356                                           ! 5893 { 0x0144,
33357 861A                      0144            .word	$144
33358                                           ! 5894 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33359 861C                      009B            .word	$9B
33360                                           ! 5895                           0x01 | 0x02 | 0x04,
33361 861E                        07            .byte	7
33362                                           ! 5896                           0,
33363 861F                        00            .byte	0
33364                                           ! 5897                           64,
33365 8620                      0040            .word	$40
33366                                           ! 5898                    64,
33367 8622                      0040            .word	$40
33368                                           ! 5899                        0xA000,
33369 8624                      A000            .word	$A000
33370                                           ! 5900                        0x0000,
33371 8626                      0000            .word	0
33372                                           ! 5901                       0,
33373 8628                      0000            .word	0
33374 862A                      0000            .word	0
33375                                           ! 5902                             4096,
33376 862C                      1000            .word	$1000
33377                                           ! 5903                        1024,
33378 862E                      0400            .word	$400
33379                                           ! 5904                        768,
33380 8630                      0300            .word	$300
33381                                           ! 5905                      8,
33382 8632                        08            .byte	8
33383                                           ! 5906                      16,
33384 8633                        10            .byte	$10
33385                                           ! 5907                           1,
33386 8634                        01            .byte	1
33387                                           ! 5908                         32,
33388 8635                        20            .byte	$20
33389                                           ! 5909                          48,
33390 8636                        30            .byte	$30
33391                                           ! 5910                        0x06,
33392 8637                        06            .byte	6
33393                                           ! 5911                     0,
33394 8638                        00            .byte	0
33395                                           ! 5912                               4,
33396 8639                        04            .byte	4
33397                                           ! 5913                          0,
33398 863A                        00            .byte	0
33399                                           ! 5914                        8,
33400 863B                        08            .byte	8
33401                                           ! 5915                             16,
33402 863C                        10            .byte	$10
33403                                           ! 5916                          8,
33404 863D                        08            .byte	8
33405                                           ! 5917                               8,
33406 863E                        08            .byte	8
33407                                           ! 5918                         8,
33408 863F                        08            .byte	8
33409                                           ! 5919                              0,
33410 8640                        00            .byte	0
33411                                           ! 5920                         8,
33412 8641                        08            .byte	8
33413                                           ! 5921                              24,
33414 8642                        18            .byte	$18
33415                                           ! 5922                                0x02,
33416 8643                        02            .byte	2
33417                                           ! 5923                        0xE0000000,
33418 8644                      0000            .word	0
33419 8646                      E000            .word	$E000
33420                                           ! 5924                               0,
33421 8648                      0000            .word	0
33422 864A                      0000            .word	0
33423                                           ! 5925                             0,
33424 864C                      0000            .word	0
33425                                           ! 5926                                4096,
33426 864E                      1000            .word	$1000
33427                                           ! 5927                             0,
33428 8650                        00            .byte	0
33429                                           ! 5928                             0,
33430 8651                        00            .byte	0
33431                                           ! 5929                           8,
33432 8652                        08            .byte	8
33433                                           ! 5930                                16,
33434 8653                        10            .byte	$10
33435                                           ! 5931                             8,
33436 8654                        08            .byte	8
33437                                           ! 5932                                  8,
33438 8655                        08            .byte	8
33439                                           ! 5933                            8,
33440 8656                        08            .byte	8
33441                                           ! 5934                
33442                                           ! 5934                  0,
33443 8657                        00            .byte	0
33444                                           ! 5935                            8,
33445 8658                        08            .byte	8
33446                                           ! 5936                                 24,
33447 8659                        18            .byte	$18
33448                                           ! 5937                          0,
33449 865A                      0000            .word	0
33450 865C                      0000            .word	0
33451                                           ! 5938 } },
33452                                           ! 5939 { 0x0145,
33453 865E                      0145            .word	$145
33454                                           ! 5940 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33455 8660                      009B            .word	$9B
33456                                           ! 5941                           0x01 | 0x02 | 0x04,
33457 8662                        07            .byte	7
33458                                           ! 5942                           0,
33459 8663                        00            .byte	0
33460                                           ! 5943                           64,
33461 8664                      0040            .word	$40
33462                                           ! 5944                    64,
33463 8666                      0040            .word	$40
33464                                           ! 5945                        0xA000,
33465 8668                      A000            .word	$A000
33466                                           ! 5946                        0x0000,
33467 866A                      0000            .word	0
33468                                           ! 5947                       0,
33469 866C                      0000            .word	0
33470 866E                      0000            .word	0
33471                                           ! 5948                             5120,
33472 8670                      1400            .word	$1400
33473                                           ! 5949                        1280,
33474 8672                      0500            .word	$500
33475                                           ! 5950                        1024,
33476 8674                      0400            .word	$400
33477                                           ! 5951                      8,
33478 8676                        08            .byte	8
33479                                           ! 5952                      16,
33480 8677                        10            .byte	$10
33481                                           ! 5953                           1,
33482 8678                        01            .byte	1
33483                                           ! 5954                         32,
33484 8679                        20            .byte	$20
33485                                           ! 5955                          80,
33486 867A                        50            .byte	$50
33487                                           ! 5956                        0x06,
33488 867B                        06            .byte	6
33489                                           ! 5957                     0,
33490 867C                        00            .byte	0
33491                                           ! 5958                               2,
33492 867D                        02            .byte	2
33493                                           ! 5959                          0,
33494 867E                        00            .byte	0
33495                                           ! 5960                        8,
33496 867F                        08            .byte	8
33497                                           ! 5961                             16,
33498 8680                        10            .byte	$10
33499                                           ! 5962                          8,
33500 8681                        08            .byte	8
33501                                           ! 5963                               8,
33502 8682                        08            .byte	8
33503                                           ! 5964                         8,
33504 8683                        08            .byte	8
33505                                           ! 5965                              0,
33506 8684                        00            .byte	0
33507                                           ! 5966                         8,
33508 8685                        08            .byte	8
33509                                           ! 5967                              24,
33510 8686                        18            .byte	$18
33511                                           ! 5968                                0x02,
33512 8687                        02            .byte	2
33513                                           ! 5969                        0xE0000000,
33514 8688                      0000            .word	0
33515 868A                      E000            .word	$E000
33516                                           ! 5970                               0,
33517 868C                      0000            .word	0
33518 868E                      0000            .word	0
33519                                           ! 5971                             0,
33520 8690                      0000            .word	0
33521                                           ! 5972                                5120,
33522 8692                      1400            .word	$1400
33523                                           ! 5973                             0,
33524 8694                        00            .byte	0
33525                                           ! 5974                             0,
33526 8695                        00            .byte	0
33527                                           ! 5975                           8,
33528 8696                        08            .byte	8
33529                                           ! 5976                                16,
33530 8697                        10            .byte	$10
33531                                           ! 5977                             8,
33532 8698                        08            .byte	8
33533                                           ! 5978                                  8,
33534 8699                        08            .byte	8
33535                                           ! 5979                            8,
33536 869A                        08            .byte	8
33537                                           ! 5980                                 0,
33538 869B                        00            .byte	0
33539                                           ! 5981                            8,
33540 869C                        08            .byte	8
33541                                           ! 5982                                 24,
33542 869D                        18            .byte	$18
33543                                           ! 5983                          0,
33544 869E                      0000            .word	0
33545 86A0                      0000            .word	0
33546                                           ! 5984 } },
33547                                           ! 5985 { 0x0146,
33548 86A2                      0146            .word	$146
33549                                           ! 5986 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33550 86A4                      009B            .word	$9B
33551                                           ! 5987                           0x01 | 0x02 | 0x04,
33552 86A6                        07            .byte	7
33553                                           ! 5988                           0,
33554 86A7                        00            .byte	0
33555                                           ! 5989                           64,
33556 86A8                      0040            .word	$40
33557                                           ! 5990                    64,
33558 86AA                      0040            .word	$40
33559                                           ! 5991                        0xA000,
33560 86AC                      A000            .word	$A000
33561                                           ! 5992                        0x0000,
33562 86AE                      0000            .word	0
33563                                           ! 5993                       0,
33564 86B0                      0000            .word	0
33565 86B2                      0000            .word	0
33566                                           ! 5994                             320,
33567 86B4                      0140            .word	$140
33568                                           ! 5995                        320,
33569 86B6                      0140            .word	$140
33570                                           ! 5996                        200,
33571 86B8                      00C8            .word	$C8
33572                                           ! 5997                      8,
33573 86BA                        08            .byte	8
33574                                           ! 5998                      16,
33575 86BB                        10            .byte	$10
33576                                           ! 5999                           1,
33577 86BC                        01            .byte	1
33578                                           ! 6000                         8,
33579 86BD                        08            .byte	8
33580                                           ! 6001                          1,
33581 86BE                        01            .byte	1
33582                                           ! 6002                        0x04,
33583 86BF                        04            .byte	4
33584                                           ! 6003                     0,
33585 86C0                        00            .byte	0
33586                                           ! 6004      
33587                                           ! 6004                          261,
33588 86C1                        05            .byte	5
33589                                           ! 6005                          0,
33590 86C2                        00            .byte	0
33591                                           ! 6006                        0,
33592 86C3                        00            .byte	0
33593                                           ! 6007                             0,
33594 86C4                        00            .byte	0
33595                                           ! 6008                          0,
33596 86C5                        00            .byte	0
33597                                           ! 6009                               0,
33598 86C6                        00            .byte	0
33599                                           ! 6010                         0,
33600 86C7                        00            .byte	0
33601                                           ! 6011                              0,
33602 86C8                        00            .byte	0
33603                                           ! 6012                         0,
33604 86C9                        00            .byte	0
33605                                           ! 6013                              0,
33606 86CA                        00            .byte	0
33607                                           ! 6014                                0,
33608 86CB                        00            .byte	0
33609                                           ! 6015                        0xE0000000,
33610 86CC                      0000            .word	0
33611 86CE                      E000            .word	$E000
33612                                           ! 6016                               0,
33613 86D0                      0000            .word	0
33614 86D2                      0000            .word	0
33615                                           ! 6017                             0,
33616 86D4                      0000            .word	0
33617                                           ! 6018                                320,
33618 86D6                      0140            .word	$140
33619                                           ! 6019                             0,
33620 86D8                        00            .byte	0
33621                                           ! 6020                             0,
33622 86D9                        00            .byte	0
33623                                           ! 6021                           0,
33624 86DA                        00            .byte	0
33625                                           ! 6022                                0,
33626 86DB                        00            .byte	0
33627                                           ! 6023                             0,
33628 86DC                        00            .byte	0
33629                                           ! 6024                                  0,
33630 86DD                        00            .byte	0
33631                                           ! 6025                            0,
33632 86DE                        00            .byte	0
33633                                           ! 6026                                 0,
33634 86DF                        00            .byte	0
33635                                           ! 6027                            0,
33636 86E0                        00            .byte	0
33637                                           ! 6028                                 0,
33638 86E1                        00            .byte	0
33639                                           ! 6029                          0,
33640 86E2                      0000            .word	0
33641 86E4                      0000            .word	0
33642                                           ! 6030 } },
33643                                           ! 6031 { 0x0147,
33644 86E6                      0147            .word	$147
33645                                           ! 6032 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33646 86E8                      009B            .word	$9B
33647                                           ! 6033                           0x01 | 0x02 | 0x04,
33648 86EA                        07            .byte	7
33649                                           ! 6034                           0,
33650 86EB                        00            .byte	0
33651                                           ! 6035                           64,
33652 86EC                      0040            .word	$40
33653                                           ! 6036                    64,
33654 86EE                      0040            .word	$40
33655                                           ! 6037                        0xA000,
33656 86F0                      A000            .word	$A000
33657                                           ! 6038                        0x0000,
33658 86F2                      0000            .word	0
33659                                           ! 6039                       0,
33660 86F4                      0000            .word	0
33661 86F6                      0000            .word	0
33662                                           ! 6040                             6400,
33663 86F8                      1900            .word	$1900
33664                                           ! 6041                        1600,
33665 86FA                      0640            .word	$640
33666                                           ! 6042                        1200,
33667 86FC                      04B0            .word	$4B0
33668                                           ! 6043                      8,
33669 86FE                        08            .byte	8
33670                                           ! 6044                      16,
33671 86FF                        10            .byte	$10
33672                                           ! 6045                           1,
33673 8700                        01            .byte	1
33674                                           ! 6046                         32,
33675 8701                        20            .byte	$20
33676                                           ! 6047                          118,
33677 8702                        76            .byte	$76
33678                                           ! 6048                        0x06,
33679 8703                        06            .byte	6
33680                                           ! 6049                     0,
33681 8704                        00            .byte	0
33682                                           ! 6050                               1,
33683 8705                        01            .byte	1
33684                                           ! 6051                          0,
33685 8706                        00            .byte	0
33686                                           ! 6052                        8,
33687 8707                        08            .byte	8
33688                                           ! 6053                             16,
33689 8708                        10            .byte	$10
33690                                           ! 6054                          8,
33691 8709                        08            .byte	8
33692                                           ! 6055                               8,
33693 870A                        08            .byte	8
33694                                           ! 6056                         8,
33695 870B                        08            .byte	8
33696                                           ! 6057                              0,
33697 870C                        00            .byte	0
33698                                           ! 6058                         8,
33699 870D                        08            .byte	8
33700                                           ! 6059                              24,
33701 870E                        18            .byte	$18
33702                                           ! 6060                                0x02,
33703 870F                        02            .byte	2
33704                                           ! 6061                        0xE0000000,
33705 8710                      0000            .word	0
33706 8712                      E000            .word	$E000
33707                                           ! 6062                               0,
33708 8714                      0000            .word	0
33709 8716                      0000            .word	0
33710                                           ! 6063                             0,
33711 8718                      0000            .word	0
33712                                           ! 6064                                6400,
33713 871A                      1900            .word	$1900
33714                                           ! 6065                             0,
33715 871C                        00            .byte	0
33716                                           ! 6066                             0,
33717 871D                        00            .byte	0
33718                                           ! 6067                           8,
33719 871E                        08            .byte	8
33720                                           ! 6068                                16,
33721 871F                        10            .byte	$10
33722                                           ! 6069                             8,
33723 8720                        08            .byte	8
33724                                           ! 6070                                  8,
33725 8721                        08            .byte	8
33726                                           ! 6071               
33727                                           ! 6071              8,
33728 8722                        08            .byte	8
33729                                           ! 6072                                 0,
33730 8723                        00            .byte	0
33731                                           ! 6073                            8,
33732 8724                        08            .byte	8
33733                                           ! 6074                                 24,
33734 8725                        18            .byte	$18
33735                                           ! 6075                          0,
33736 8726                      0000            .word	0
33737 8728                      0000            .word	0
33738                                           ! 6076 } },
33739                                           ! 6077 { 0x0148,
33740 872A                      0148            .word	$148
33741                                           ! 6078 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33742 872C                      009B            .word	$9B
33743                                           ! 6079                           0x01 | 0x02 | 0x04,
33744 872E                        07            .byte	7
33745                                           ! 6080                           0,
33746 872F                        00            .byte	0
33747                                           ! 6081                           64,
33748 8730                      0040            .word	$40
33749                                           ! 6082                    64,
33750 8732                      0040            .word	$40
33751                                           ! 6083                        0xA000,
33752 8734                      A000            .word	$A000
33753                                           ! 6084                        0x0000,
33754 8736                      0000            .word	0
33755                                           ! 6085                       0,
33756 8738                      0000            .word	0
33757 873A                      0000            .word	0
33758                                           ! 6086                             1152,
33759 873C                      0480            .word	$480
33760                                           ! 6087                        1152,
33761 873E                      0480            .word	$480
33762                                           ! 6088                        864,
33763 8740                      0360            .word	$360
33764                                           ! 6089                      8,
33765 8742                        08            .byte	8
33766                                           ! 6090                      16,
33767 8743                        10            .byte	$10
33768                                           ! 6091                           1,
33769 8744                        01            .byte	1
33770                                           ! 6092                         8,
33771 8745                        08            .byte	8
33772                                           ! 6093                          16,
33773 8746                        10            .byte	$10
33774                                           ! 6094                        0x04,
33775 8747                        04            .byte	4
33776                                           ! 6095                     0,
33777 8748                        00            .byte	0
33778                                           ! 6096                               15,
33779 8749                        0F            .byte	$F
33780                                           ! 6097                          0,
33781 874A                        00            .byte	0
33782                                           ! 6098                        0,
33783 874B                        00            .byte	0
33784                                           ! 6099                             0,
33785 874C                        00            .byte	0
33786                                           ! 6100                          0,
33787 874D                        00            .byte	0
33788                                           ! 6101                               0,
33789 874E                        00            .byte	0
33790                                           ! 6102                         0,
33791 874F                        00            .byte	0
33792                                           ! 6103                              0,
33793 8750                        00            .byte	0
33794                                           ! 6104                         0,
33795 8751                        00            .byte	0
33796                                           ! 6105                              0,
33797 8752                        00            .byte	0
33798                                           ! 6106                                0,
33799 8753                        00            .byte	0
33800                                           ! 6107                        0xE0000000,
33801 8754                      0000            .word	0
33802 8756                      E000            .word	$E000
33803                                           ! 6108                               0,
33804 8758                      0000            .word	0
33805 875A                      0000            .word	0
33806                                           ! 6109                             0,
33807 875C                      0000            .word	0
33808                                           ! 6110                                1152,
33809 875E                      0480            .word	$480
33810                                           ! 6111                             0,
33811 8760                        00            .byte	0
33812                                           ! 6112                             0,
33813 8761                        00            .byte	0
33814                                           ! 6113                           0,
33815 8762                        00            .byte	0
33816                                           ! 6114                                0,
33817 8763                        00            .byte	0
33818                                           ! 6115                             0,
33819 8764                        00            .byte	0
33820                                           ! 6116                                  0,
33821 8765                        00            .byte	0
33822                                           ! 6117                            0,
33823 8766                        00            .byte	0
33824                                           ! 6118                                 0,
33825 8767                        00            .byte	0
33826                                           ! 6119                            0,
33827 8768                        00            .byte	0
33828                                           ! 6120                                 0,
33829 8769                        00            .byte	0
33830                                           ! 6121                          0,
33831 876A                      0000            .word	0
33832 876C                      0000            .word	0
33833                                           ! 6122 } },
33834                                           ! 6123 { 0x0149,
33835 876E                      0149            .word	$149
33836                                           ! 6124 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33837 8770                      009B            .word	$9B
33838                                           ! 6125                           0x01 | 0x02 | 0x04,
33839 8772                        07            .byte	7
33840                                           ! 6126                           0,
33841 8773                        00            .byte	0
33842                                           ! 6127                           64,
33843 8774                      0040            .word	$40
33844                                           ! 6128                    64,
33845 8776                      0040            .word	$40
33846                                           ! 6129                        0xA000,
33847 8778                      A000            .word	$A000
33848                                           ! 6130                        0x0000,
33849 877A                      0000            .word	0
33850                                           ! 6131                       0,
33851 877C                      0000            .word	0
33852 877E                      0000            .word	0
33853                                           ! 6132                             2304,
33854 8780                      0900            .word	$900
33855                                           ! 6133                        1152,
33856 8782                      0480            .word	$480
33857                                           ! 6134                        864,
33858 8784                      0360            .word	$360
33859                                           ! 6135                      8,
33860 8786                        08            .byte	8
33861                                           ! 6136                      16,
33862 8787                        10            .byte	$10
33863                                           ! 6137                           1,
33864 8788                        01            .byte	1
33865                                           ! 6138                         15,
33866 8789                        0F            .byte	$F
33867                                           ! 6139                          31,
33868 878A                        1F            .byte	$1F
33869                                           ! 6140                        0x06,
33870 878B                        06            .byte	6
33871                                           ! 6141  
33872                                           ! 6141                    0,
33873 878C                        00            .byte	0
33874                                           ! 6142                               7,
33875 878D                        07            .byte	7
33876                                           ! 6143                          0,
33877 878E                        00            .byte	0
33878                                           ! 6144                        5,
33879 878F                        05            .byte	5
33880                                           ! 6145                             10,
33881 8790                        0A            .byte	$A
33882                                           ! 6146                          5,
33883 8791                        05            .byte	5
33884                                           ! 6147                               5,
33885 8792                        05            .byte	5
33886                                           ! 6148                         5,
33887 8793                        05            .byte	5
33888                                           ! 6149                              0,
33889 8794                        00            .byte	0
33890                                           ! 6150                         1,
33891 8795                        01            .byte	1
33892                                           ! 6151                              15,
33893 8796                        0F            .byte	$F
33894                                           ! 6152                                0,
33895 8797                        00            .byte	0
33896                                           ! 6153                        0xE0000000,
33897 8798                      0000            .word	0
33898 879A                      E000            .word	$E000
33899                                           ! 6154                               0,
33900 879C                      0000            .word	0
33901 879E                      0000            .word	0
33902                                           ! 6155                             0,
33903 87A0                      0000            .word	0
33904                                           ! 6156                                2304,
33905 87A2                      0900            .word	$900
33906                                           ! 6157                             0,
33907 87A4                        00            .byte	0
33908                                           ! 6158                             0,
33909 87A5                        00            .byte	0
33910                                           ! 6159                           5,
33911 87A6                        05            .byte	5
33912                                           ! 6160                                10,
33913 87A7                        0A            .byte	$A
33914                                           ! 6161                             5,
33915 87A8                        05            .byte	5
33916                                           ! 6162                                  5,
33917 87A9                        05            .byte	5
33918                                           ! 6163                            5,
33919 87AA                        05            .byte	5
33920                                           ! 6164                                 0,
33921 87AB                        00            .byte	0
33922                                           ! 6165                            1,
33923 87AC                        01            .byte	1
33924                                           ! 6166                                 15,
33925 87AD                        0F            .byte	$F
33926                                           ! 6167                          0,
33927 87AE                      0000            .word	0
33928 87B0                      0000            .word	0
33929                                           ! 6168 } },
33930                                           ! 6169 { 0x014a,
33931 87B2                      014A            .word	$14A
33932                                           ! 6170 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33933 87B4                      009B            .word	$9B
33934                                           ! 6171                           0x01 | 0x02 | 0x04,
33935 87B6                        07            .byte	7
33936                                           ! 6172                           0,
33937 87B7                        00            .byte	0
33938                                           ! 6173                           64,
33939 87B8                      0040            .word	$40
33940                                           ! 6174                    64,
33941 87BA                      0040            .word	$40
33942                                           ! 6175                        0xA000,
33943 87BC                      A000            .word	$A000
33944                                           ! 6176                        0x0000,
33945 87BE                      0000            .word	0
33946                                           ! 6177                       0,
33947 87C0                      0000            .word	0
33948 87C2                      0000            .word	0
33949                                           ! 6178                             2304,
33950 87C4                      0900            .word	$900
33951                                           ! 6179                        1152,
33952 87C6                      0480            .word	$480
33953                                           ! 6180                        864,
33954 87C8                      0360            .word	$360
33955                                           ! 6181                      8,
33956 87CA                        08            .byte	8
33957                                           ! 6182                      16,
33958 87CB                        10            .byte	$10
33959                                           ! 6183                           1,
33960 87CC                        01            .byte	1
33961                                           ! 6184                         16,
33962 87CD                        10            .byte	$10
33963                                           ! 6185                          31,
33964 87CE                        1F            .byte	$1F
33965                                           ! 6186                        0x06,
33966 87CF                        06            .byte	6
33967                                           ! 6187                     0,
33968 87D0                        00            .byte	0
33969                                           ! 6188                               7,
33970 87D1                        07            .byte	7
33971                                           ! 6189                          0,
33972 87D2                        00            .byte	0
33973                                           ! 6190                        5,
33974 87D3                        05            .byte	5
33975                                           ! 6191                             11,
33976 87D4                        0B            .byte	$B
33977                                           ! 6192                          6,
33978 87D5                        06            .byte	6
33979                                           ! 6193                               5,
33980 87D6                        05            .byte	5
33981                                           ! 6194                         5,
33982 87D7                        05            .byte	5
33983                                           ! 6195                              0,
33984 87D8                        00            .byte	0
33985                                           ! 6196                         0,
33986 87D9                        00            .byte	0
33987                                           ! 6197                              0,
33988 87DA                        00            .byte	0
33989                                           ! 6198                                0,
33990 87DB                        00            .byte	0
33991                                           ! 6199                        0xE0000000,
33992 87DC                      0000            .word	0
33993 87DE                      E000            .word	$E000
33994                                           ! 6200                               0,
33995 87E0                      0000            .word	0
33996 87E2                      0000            .word	0
33997                                           ! 6201                             0,
33998 87E4                      0000            .word	0
33999                                           ! 6202                                2304,
34000 87E6                      0900            .word	$900
34001                                           ! 6203                             0,
34002 87E8                        00            .byte	0
34003                                           ! 6204                             0,
34004 87E9                        00            .byte	0
34005                                           ! 6205                           5,
34006 87EA                        05            .byte	5
34007                                           ! 6206                                11,
34008 87EB                        0B            .byte	$B
34009                                           ! 6207                             6,
34010 87EC                        06            .byte	6
34011                                           ! 6208                           
34012                                           ! 6208        5,
34013 87ED                        05            .byte	5
34014                                           ! 6209                            5,
34015 87EE                        05            .byte	5
34016                                           ! 6210                                 0,
34017 87EF                        00            .byte	0
34018                                           ! 6211                            0,
34019 87F0                        00            .byte	0
34020                                           ! 6212                                 0,
34021 87F1                        00            .byte	0
34022                                           ! 6213                          0,
34023 87F2                      0000            .word	0
34024 87F4                      0000            .word	0
34025                                           ! 6214 } },
34026                                           ! 6215 { 0x014b,
34027 87F6                      014B            .word	$14B
34028                                           ! 6216 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34029 87F8                      009B            .word	$9B
34030                                           ! 6217                           0x01 | 0x02 | 0x04,
34031 87FA                        07            .byte	7
34032                                           ! 6218                           0,
34033 87FB                        00            .byte	0
34034                                           ! 6219                           64,
34035 87FC                      0040            .word	$40
34036                                           ! 6220                    64,
34037 87FE                      0040            .word	$40
34038                                           ! 6221                        0xA000,
34039 8800                      A000            .word	$A000
34040                                           ! 6222                        0x0000,
34041 8802                      0000            .word	0
34042                                           ! 6223                       0,
34043 8804                      0000            .word	0
34044 8806                      0000            .word	0
34045                                           ! 6224                             3456,
34046 8808                      0D80            .word	$D80
34047                                           ! 6225                        1152,
34048 880A                      0480            .word	$480
34049                                           ! 6226                        864,
34050 880C                      0360            .word	$360
34051                                           ! 6227                      8,
34052 880E                        08            .byte	8
34053                                           ! 6228                      16,
34054 880F                        10            .byte	$10
34055                                           ! 6229                           1,
34056 8810                        01            .byte	1
34057                                           ! 6230                         24,
34058 8811                        18            .byte	$18
34059                                           ! 6231                          46,
34060 8812                        2E            .byte	$2E
34061                                           ! 6232                        0x06,
34062 8813                        06            .byte	6
34063                                           ! 6233                     0,
34064 8814                        00            .byte	0
34065                                           ! 6234                               4,
34066 8815                        04            .byte	4
34067                                           ! 6235                          0,
34068 8816                        00            .byte	0
34069                                           ! 6236                        8,
34070 8817                        08            .byte	8
34071                                           ! 6237                             16,
34072 8818                        10            .byte	$10
34073                                           ! 6238                          8,
34074 8819                        08            .byte	8
34075                                           ! 6239                               8,
34076 881A                        08            .byte	8
34077                                           ! 6240                         8,
34078 881B                        08            .byte	8
34079                                           ! 6241                              0,
34080 881C                        00            .byte	0
34081                                           ! 6242                         0,
34082 881D                        00            .byte	0
34083                                           ! 6243                              0,
34084 881E                        00            .byte	0
34085                                           ! 6244                                0,
34086 881F                        00            .byte	0
34087                                           ! 6245                        0xE0000000,
34088 8820                      0000            .word	0
34089 8822                      E000            .word	$E000
34090                                           ! 6246                               0,
34091 8824                      0000            .word	0
34092 8826                      0000            .word	0
34093                                           ! 6247                             0,
34094 8828                      0000            .word	0
34095                                           ! 6248                                3456,
34096 882A                      0D80            .word	$D80
34097                                           ! 6249                             0,
34098 882C                        00            .byte	0
34099                                           ! 6250                             0,
34100 882D                        00            .byte	0
34101                                           ! 6251                           8,
34102 882E                        08            .byte	8
34103                                           ! 6252                                16,
34104 882F                        10            .byte	$10
34105                                           ! 6253                             8,
34106 8830                        08            .byte	8
34107                                           ! 6254                                  8,
34108 8831                        08            .byte	8
34109                                           ! 6255                            8,
34110 8832                        08            .byte	8
34111                                           ! 6256                                 0,
34112 8833                        00            .byte	0
34113                                           ! 6257                            0,
34114 8834                        00            .byte	0
34115                                           ! 6258                                 0,
34116 8835                        00            .byte	0
34117                                           ! 6259                          0,
34118 8836                      0000            .word	0
34119 8838                      0000            .word	0
34120                                           ! 6260 } },
34121                                           ! 6261 { 0x014c,
34122 883A                      014C            .word	$14C
34123                                           ! 6262 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34124 883C                      009B            .word	$9B
34125                                           ! 6263                           0x01 | 0x02 | 0x04,
34126 883E                        07            .byte	7
34127                                           ! 6264                           0,
34128 883F                        00            .byte	0
34129                                           ! 6265                           64,
34130 8840                      0040            .word	$40
34131                                           ! 6266                    64,
34132 8842                      0040            .word	$40
34133                                           ! 6267                        0xA000,
34134 8844                      A000            .word	$A000
34135                                           ! 6268                        0x0000,
34136 8846                      0000            .word	0
34137                                           ! 6269                       0,
34138 8848                      0000            .word	0
34139 884A                      0000            .word	0
34140                                           ! 6270                             4608,
34141 884C                      1200            .word	$1200
34142                                           ! 6271                        1152,
34143 884E                      0480            .word	$480
34144                                           ! 6272                        864,
34145 8850                      0360            .word	$360
34146                                           ! 6273                      8,
34147 8852                        08            .byte	8
34148                                           ! 6274                      16,
34149 8853                        10            .byte	$10
34150                                           ! 6275                           1,
34151 8854                        01            .byte	1
34152                                           ! 6276                         32,
34153 8855                        20            .byte	$20
34154                                           ! 6277                          61,
34155 8856                        3D            .byte	$3D
34156                                           ! 6278      
34157                                           ! 6278                   0x06,
34158 8857                        06            .byte	6
34159                                           ! 6279                     0,
34160 8858                        00            .byte	0
34161                                           ! 6280                               3,
34162 8859                        03            .byte	3
34163                                           ! 6281                          0,
34164 885A                        00            .byte	0
34165                                           ! 6282                        8,
34166 885B                        08            .byte	8
34167                                           ! 6283                             16,
34168 885C                        10            .byte	$10
34169                                           ! 6284                          8,
34170 885D                        08            .byte	8
34171                                           ! 6285                               8,
34172 885E                        08            .byte	8
34173                                           ! 6286                         8,
34174 885F                        08            .byte	8
34175                                           ! 6287                              0,
34176 8860                        00            .byte	0
34177                                           ! 6288                         8,
34178 8861                        08            .byte	8
34179                                           ! 6289                              24,
34180 8862                        18            .byte	$18
34181                                           ! 6290                                0x02,
34182 8863                        02            .byte	2
34183                                           ! 6291                        0xE0000000,
34184 8864                      0000            .word	0
34185 8866                      E000            .word	$E000
34186                                           ! 6292                               0,
34187 8868                      0000            .word	0
34188 886A                      0000            .word	0
34189                                           ! 6293                             0,
34190 886C                      0000            .word	0
34191                                           ! 6294                                4608,
34192 886E                      1200            .word	$1200
34193                                           ! 6295                             0,
34194 8870                        00            .byte	0
34195                                           ! 6296                             0,
34196 8871                        00            .byte	0
34197                                           ! 6297                           8,
34198 8872                        08            .byte	8
34199                                           ! 6298                                16,
34200 8873                        10            .byte	$10
34201                                           ! 6299                             8,
34202 8874                        08            .byte	8
34203                                           ! 6300                                  8,
34204 8875                        08            .byte	8
34205                                           ! 6301                            8,
34206 8876                        08            .byte	8
34207                                           ! 6302                                 0,
34208 8877                        00            .byte	0
34209                                           ! 6303                            8,
34210 8878                        08            .byte	8
34211                                           ! 6304                                 24,
34212 8879                        18            .byte	$18
34213                                           ! 6305                          0,
34214 887A                      0000            .word	0
34215 887C                      0000            .word	0
34216                                           ! 6306 } },
34217                                           ! 6307 { 0x0178,
34218 887E                      0178            .word	$178
34219                                           ! 6308 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34220 8880                      009B            .word	$9B
34221                                           ! 6309                           0x01 | 0x02 | 0x04,
34222 8882                        07            .byte	7
34223                                           ! 6310                           0,
34224 8883                        00            .byte	0
34225                                           ! 6311                           64,
34226 8884                      0040            .word	$40
34227                                           ! 6312                    64,
34228 8886                      0040            .word	$40
34229                                           ! 6313                        0xA000,
34230 8888                      A000            .word	$A000
34231                                           ! 6314                        0x0000,
34232 888A                      0000            .word	0
34233                                           ! 6315                       0,
34234 888C                      0000            .word	0
34235 888E                      0000            .word	0
34236                                           ! 6316                             2560,
34237 8890                      0A00            .word	$A00
34238                                           ! 6317                        1280,
34239 8892                      0500            .word	$500
34240                                           ! 6318                        800,
34241 8894                      0320            .word	$320
34242                                           ! 6319                      8,
34243 8896                        08            .byte	8
34244                                           ! 6320                      16,
34245 8897                        10            .byte	$10
34246                                           ! 6321                           1,
34247 8898                        01            .byte	1
34248                                           ! 6322                         16,
34249 8899                        10            .byte	$10
34250                                           ! 6323                          32,
34251 889A                        20            .byte	$20
34252                                           ! 6324                        0x06,
34253 889B                        06            .byte	6
34254                                           ! 6325                     0,
34255 889C                        00            .byte	0
34256                                           ! 6326                               7,
34257 889D                        07            .byte	7
34258                                           ! 6327                          0,
34259 889E                        00            .byte	0
34260                                           ! 6328                        5,
34261 889F                        05            .byte	5
34262                                           ! 6329                             11,
34263 88A0                        0B            .byte	$B
34264                                           ! 6330                          6,
34265 88A1                        06            .byte	6
34266                                           ! 6331                               5,
34267 88A2                        05            .byte	5
34268                                           ! 6332                         5,
34269 88A3                        05            .byte	5
34270                                           ! 6333                              0,
34271 88A4                        00            .byte	0
34272                                           ! 6334                         0,
34273 88A5                        00            .byte	0
34274                                           ! 6335                              0,
34275 88A6                        00            .byte	0
34276                                           ! 6336                                0,
34277 88A7                        00            .byte	0
34278                                           ! 6337                        0xE0000000,
34279 88A8                      0000            .word	0
34280 88AA                      E000            .word	$E000
34281                                           ! 6338                               0,
34282 88AC                      0000            .word	0
34283 88AE                      0000            .word	0
34284                                           ! 6339                             0,
34285 88B0                      0000            .word	0
34286                                           ! 6340                                2560,
34287 88B2                      0A00            .word	$A00
34288                                           ! 6341                             0,
34289 88B4                        00            .byte	0
34290                                           ! 6342                             0,
34291 88B5                        00            .byte	0
34292                                           ! 6343                           5,
34293 88B6                        05            .byte	5
34294                                           ! 6344                                11,
34295 88B7                        0B            .byte	$B
34296                                           ! 6345                             6
34297                                           ! 6345 ,
34298 88B8                        06            .byte	6
34299                                           ! 6346                                  5,
34300 88B9                        05            .byte	5
34301                                           ! 6347                            5,
34302 88BA                        05            .byte	5
34303                                           ! 6348                                 0,
34304 88BB                        00            .byte	0
34305                                           ! 6349                            0,
34306 88BC                        00            .byte	0
34307                                           ! 6350                                 0,
34308 88BD                        00            .byte	0
34309                                           ! 6351                          0,
34310 88BE                      0000            .word	0
34311 88C0                      0000            .word	0
34312                                           ! 6352 } },
34313                                           ! 6353 { 0x0179,
34314 88C2                      0179            .word	$179
34315                                           ! 6354 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34316 88C4                      009B            .word	$9B
34317                                           ! 6355                           0x01 | 0x02 | 0x04,
34318 88C6                        07            .byte	7
34319                                           ! 6356                           0,
34320 88C7                        00            .byte	0
34321                                           ! 6357                           64,
34322 88C8                      0040            .word	$40
34323                                           ! 6358                    64,
34324 88CA                      0040            .word	$40
34325                                           ! 6359                        0xA000,
34326 88CC                      A000            .word	$A000
34327                                           ! 6360                        0x0000,
34328 88CE                      0000            .word	0
34329                                           ! 6361                       0,
34330 88D0                      0000            .word	0
34331 88D2                      0000            .word	0
34332                                           ! 6362                             3840,
34333 88D4                      0F00            .word	$F00
34334                                           ! 6363                        1280,
34335 88D6                      0500            .word	$500
34336                                           ! 6364                        800,
34337 88D8                      0320            .word	$320
34338                                           ! 6365                      8,
34339 88DA                        08            .byte	8
34340                                           ! 6366                      16,
34341 88DB                        10            .byte	$10
34342                                           ! 6367                           1,
34343 88DC                        01            .byte	1
34344                                           ! 6368                         24,
34345 88DD                        18            .byte	$18
34346                                           ! 6369                          47,
34347 88DE                        2F            .byte	$2F
34348                                           ! 6370                        0x06,
34349 88DF                        06            .byte	6
34350                                           ! 6371                     0,
34351 88E0                        00            .byte	0
34352                                           ! 6372                               4,
34353 88E1                        04            .byte	4
34354                                           ! 6373                          0,
34355 88E2                        00            .byte	0
34356                                           ! 6374                        8,
34357 88E3                        08            .byte	8
34358                                           ! 6375                             16,
34359 88E4                        10            .byte	$10
34360                                           ! 6376                          8,
34361 88E5                        08            .byte	8
34362                                           ! 6377                               8,
34363 88E6                        08            .byte	8
34364                                           ! 6378                         8,
34365 88E7                        08            .byte	8
34366                                           ! 6379                              0,
34367 88E8                        00            .byte	0
34368                                           ! 6380                         0,
34369 88E9                        00            .byte	0
34370                                           ! 6381                              0,
34371 88EA                        00            .byte	0
34372                                           ! 6382                                0,
34373 88EB                        00            .byte	0
34374                                           ! 6383                        0xE0000000,
34375 88EC                      0000            .word	0
34376 88EE                      E000            .word	$E000
34377                                           ! 6384                               0,
34378 88F0                      0000            .word	0
34379 88F2                      0000            .word	0
34380                                           ! 6385                             0,
34381 88F4                      0000            .word	0
34382                                           ! 6386                                3840,
34383 88F6                      0F00            .word	$F00
34384                                           ! 6387                             0,
34385 88F8                        00            .byte	0
34386                                           ! 6388                             0,
34387 88F9                        00            .byte	0
34388                                           ! 6389                           8,
34389 88FA                        08            .byte	8
34390                                           ! 6390                                16,
34391 88FB                        10            .byte	$10
34392                                           ! 6391                             8,
34393 88FC                        08            .byte	8
34394                                           ! 6392                                  8,
34395 88FD                        08            .byte	8
34396                                           ! 6393                            8,
34397 88FE                        08            .byte	8
34398                                           ! 6394                                 0,
34399 88FF                        00            .byte	0
34400                                           ! 6395                            0,
34401 8900                        00            .byte	0
34402                                           ! 6396                                 0,
34403 8901                        00            .byte	0
34404                                           ! 6397                          0,
34405 8902                      0000            .word	0
34406 8904                      0000            .word	0
34407                                           ! 6398 } },
34408                                           ! 6399 { 0x017a,
34409 8906                      017A            .word	$17A
34410                                           ! 6400 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34411 8908                      009B            .word	$9B
34412                                           ! 6401                           0x01 | 0x02 | 0x04,
34413 890A                        07            .byte	7
34414                                           ! 6402                           0,
34415 890B                        00            .byte	0
34416                                           ! 6403                           64,
34417 890C                      0040            .word	$40
34418                                           ! 6404                    64,
34419 890E                      0040            .word	$40
34420                                           ! 6405                        0xA000,
34421 8910                      A000            .word	$A000
34422                                           ! 6406                        0x0000,
34423 8912                      0000            .word	0
34424                                           ! 6407                       0,
34425 8914                      0000            .word	0
34426 8916                      0000            .word	0
34427                                           ! 6408                             5120,
34428 8918                      1400            .word	$1400
34429                                           ! 6409                        1280,
34430 891A                      0500            .word	$500
34431                                           ! 6410                        800,
34432 891C                      0320            .word	$320
34433                                           ! 6411                      8,
34434 891E                        08            .byte	8
34435                                           ! 6412                      16,
34436 891F                        10            .byte	$10
34437                                           ! 6413                           1,
34438 8920                        01            .byte	1
34439                                           ! 6414                         32,
34440 8921                        20            .byte	$20
34441                                           ! 6415       
34442                                           ! 6415                    63,
34443 8922                        3F            .byte	$3F
34444                                           ! 6416                        0x06,
34445 8923                        06            .byte	6
34446                                           ! 6417                     0,
34447 8924                        00            .byte	0
34448                                           ! 6418                               3,
34449 8925                        03            .byte	3
34450                                           ! 6419                          0,
34451 8926                        00            .byte	0
34452                                           ! 6420                        8,
34453 8927                        08            .byte	8
34454                                           ! 6421                             16,
34455 8928                        10            .byte	$10
34456                                           ! 6422                          8,
34457 8929                        08            .byte	8
34458                                           ! 6423                               8,
34459 892A                        08            .byte	8
34460                                           ! 6424                         8,
34461 892B                        08            .byte	8
34462                                           ! 6425                              0,
34463 892C                        00            .byte	0
34464                                           ! 6426                         8,
34465 892D                        08            .byte	8
34466                                           ! 6427                              24,
34467 892E                        18            .byte	$18
34468                                           ! 6428                                0x02,
34469 892F                        02            .byte	2
34470                                           ! 6429                        0xE0000000,
34471 8930                      0000            .word	0
34472 8932                      E000            .word	$E000
34473                                           ! 6430                               0,
34474 8934                      0000            .word	0
34475 8936                      0000            .word	0
34476                                           ! 6431                             0,
34477 8938                      0000            .word	0
34478                                           ! 6432                                5120,
34479 893A                      1400            .word	$1400
34480                                           ! 6433                             0,
34481 893C                        00            .byte	0
34482                                           ! 6434                             0,
34483 893D                        00            .byte	0
34484                                           ! 6435                           8,
34485 893E                        08            .byte	8
34486                                           ! 6436                                16,
34487 893F                        10            .byte	$10
34488                                           ! 6437                             8,
34489 8940                        08            .byte	8
34490                                           ! 6438                                  8,
34491 8941                        08            .byte	8
34492                                           ! 6439                            8,
34493 8942                        08            .byte	8
34494                                           ! 6440                                 0,
34495 8943                        00            .byte	0
34496                                           ! 6441                            8,
34497 8944                        08            .byte	8
34498                                           ! 6442                                 24,
34499 8945                        18            .byte	$18
34500                                           ! 6443                          0,
34501 8946                      0000            .word	0
34502 8948                      0000            .word	0
34503                                           ! 6444 } },
34504                                           ! 6445 { 0x017b,
34505 894A                      017B            .word	$17B
34506                                           ! 6446 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34507 894C                      009B            .word	$9B
34508                                           ! 6447                           0x01 | 0x02 | 0x04,
34509 894E                        07            .byte	7
34510                                           ! 6448                           0,
34511 894F                        00            .byte	0
34512                                           ! 6449                           64,
34513 8950                      0040            .word	$40
34514                                           ! 6450                    64,
34515 8952                      0040            .word	$40
34516                                           ! 6451                        0xA000,
34517 8954                      A000            .word	$A000
34518                                           ! 6452                        0x0000,
34519 8956                      0000            .word	0
34520                                           ! 6453                       0,
34521 8958                      0000            .word	0
34522 895A                      0000            .word	0
34523                                           ! 6454                             2560,
34524 895C                      0A00            .word	$A00
34525                                           ! 6455                        1280,
34526 895E                      0500            .word	$500
34527                                           ! 6456                        960,
34528 8960                      03C0            .word	$3C0
34529                                           ! 6457                      8,
34530 8962                        08            .byte	8
34531                                           ! 6458                      16,
34532 8963                        10            .byte	$10
34533                                           ! 6459                           1,
34534 8964                        01            .byte	1
34535                                           ! 6460                         16,
34536 8965                        10            .byte	$10
34537                                           ! 6461                          38,
34538 8966                        26            .byte	$26
34539                                           ! 6462                        0x06,
34540 8967                        06            .byte	6
34541                                           ! 6463                     0,
34542 8968                        00            .byte	0
34543                                           ! 6464                               5,
34544 8969                        05            .byte	5
34545                                           ! 6465                          0,
34546 896A                        00            .byte	0
34547                                           ! 6466                        5,
34548 896B                        05            .byte	5
34549                                           ! 6467                             11,
34550 896C                        0B            .byte	$B
34551                                           ! 6468                          6,
34552 896D                        06            .byte	6
34553                                           ! 6469                               5,
34554 896E                        05            .byte	5
34555                                           ! 6470                         5,
34556 896F                        05            .byte	5
34557                                           ! 6471                              0,
34558 8970                        00            .byte	0
34559                                           ! 6472                         0,
34560 8971                        00            .byte	0
34561                                           ! 6473                              0,
34562 8972                        00            .byte	0
34563                                           ! 6474                                0,
34564 8973                        00            .byte	0
34565                                           ! 6475                        0xE0000000,
34566 8974                      0000            .word	0
34567 8976                      E000            .word	$E000
34568                                           ! 6476                               0,
34569 8978                      0000            .word	0
34570 897A                      0000            .word	0
34571                                           ! 6477                             0,
34572 897C                      0000            .word	0
34573                                           ! 6478                                2560,
34574 897E                      0A00            .word	$A00
34575                                           ! 6479                             0,
34576 8980                        00            .byte	0
34577                                           ! 6480                             0,
34578 8981                        00            .byte	0
34579                                           ! 6481                           5,
34580 8982                        05            .byte	5
34581                                           ! 6482                                11,
34582 8983                        0B            .byte	$B
34583                                           ! 6483  
34584                                           ! 6483                            6,
34585 8984                        06            .byte	6
34586                                           ! 6484                                  5,
34587 8985                        05            .byte	5
34588                                           ! 6485                            5,
34589 8986                        05            .byte	5
34590                                           ! 6486                                 0,
34591 8987                        00            .byte	0
34592                                           ! 6487                            0,
34593 8988                        00            .byte	0
34594                                           ! 6488                                 0,
34595 8989                        00            .byte	0
34596                                           ! 6489                          0,
34597 898A                      0000            .word	0
34598 898C                      0000            .word	0
34599                                           ! 6490 } },
34600                                           ! 6491 { 0x017c,
34601 898E                      017C            .word	$17C
34602                                           ! 6492 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34603 8990                      009B            .word	$9B
34604                                           ! 6493                           0x01 | 0x02 | 0x04,
34605 8992                        07            .byte	7
34606                                           ! 6494                           0,
34607 8993                        00            .byte	0
34608                                           ! 6495                           64,
34609 8994                      0040            .word	$40
34610                                           ! 6496                    64,
34611 8996                      0040            .word	$40
34612                                           ! 6497                        0xA000,
34613 8998                      A000            .word	$A000
34614                                           ! 6498                        0x0000,
34615 899A                      0000            .word	0
34616                                           ! 6499                       0,
34617 899C                      0000            .word	0
34618 899E                      0000            .word	0
34619                                           ! 6500                             3840,
34620 89A0                      0F00            .word	$F00
34621                                           ! 6501                        1280,
34622 89A2                      0500            .word	$500
34623                                           ! 6502                        960,
34624 89A4                      03C0            .word	$3C0
34625                                           ! 6503                      8,
34626 89A6                        08            .byte	8
34627                                           ! 6504                      16,
34628 89A7                        10            .byte	$10
34629                                           ! 6505                           1,
34630 89A8                        01            .byte	1
34631                                           ! 6506                         24,
34632 89A9                        18            .byte	$18
34633                                           ! 6507                          57,
34634 89AA                        39            .byte	$39
34635                                           ! 6508                        0x06,
34636 89AB                        06            .byte	6
34637                                           ! 6509                     0,
34638 89AC                        00            .byte	0
34639                                           ! 6510                               3,
34640 89AD                        03            .byte	3
34641                                           ! 6511                          0,
34642 89AE                        00            .byte	0
34643                                           ! 6512                        8,
34644 89AF                        08            .byte	8
34645                                           ! 6513                             16,
34646 89B0                        10            .byte	$10
34647                                           ! 6514                          8,
34648 89B1                        08            .byte	8
34649                                           ! 6515                               8,
34650 89B2                        08            .byte	8
34651                                           ! 6516                         8,
34652 89B3                        08            .byte	8
34653                                           ! 6517                              0,
34654 89B4                        00            .byte	0
34655                                           ! 6518                         0,
34656 89B5                        00            .byte	0
34657                                           ! 6519                              0,
34658 89B6                        00            .byte	0
34659                                           ! 6520                                0,
34660 89B7                        00            .byte	0
34661                                           ! 6521                        0xE0000000,
34662 89B8                      0000            .word	0
34663 89BA                      E000            .word	$E000
34664                                           ! 6522                               0,
34665 89BC                      0000            .word	0
34666 89BE                      0000            .word	0
34667                                           ! 6523                             0,
34668 89C0                      0000            .word	0
34669                                           ! 6524                                3840,
34670 89C2                      0F00            .word	$F00
34671                                           ! 6525                             0,
34672 89C4                        00            .byte	0
34673                                           ! 6526                             0,
34674 89C5                        00            .byte	0
34675                                           ! 6527                           8,
34676 89C6                        08            .byte	8
34677                                           ! 6528                                16,
34678 89C7                        10            .byte	$10
34679                                           ! 6529                             8,
34680 89C8                        08            .byte	8
34681                                           ! 6530                                  8,
34682 89C9                        08            .byte	8
34683                                           ! 6531                            8,
34684 89CA                        08            .byte	8
34685                                           ! 6532                                 0,
34686 89CB                        00            .byte	0
34687                                           ! 6533                            0,
34688 89CC                        00            .byte	0
34689                                           ! 6534                                 0,
34690 89CD                        00            .byte	0
34691                                           ! 6535                          0,
34692 89CE                      0000            .word	0
34693 89D0                      0000            .word	0
34694                                           ! 6536 } },
34695                                           ! 6537 { 0x017d,
34696 89D2                      017D            .word	$17D
34697                                           ! 6538 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34698 89D4                      009B            .word	$9B
34699                                           ! 6539                           0x01 | 0x02 | 0x04,
34700 89D6                        07            .byte	7
34701                                           ! 6540                           0,
34702 89D7                        00            .byte	0
34703                                           ! 6541                           64,
34704 89D8                      0040            .word	$40
34705                                           ! 6542                    64,
34706 89DA                      0040            .word	$40
34707                                           ! 6543                        0xA000,
34708 89DC                      A000            .word	$A000
34709                                           ! 6544                        0x0000,
34710 89DE                      0000            .word	0
34711                                           ! 6545                       0,
34712 89E0                      0000            .word	0
34713 89E2                      0000            .word	0
34714                                           ! 6546                             5120,
34715 89E4                      1400            .word	$1400
34716                                           ! 6547                        1280,
34717 89E6                      0500            .word	$500
34718                                           ! 6548                        960,
34719 89E8                      03C0            .word	$3C0
34720                                           ! 6549                      8,
34721 89EA                        08            .byte	8
34722                                           ! 6550                      16,
34723 89EB                        10            .byte	$10
34724                                           ! 6551                           1,
34725 89EC                        01            .byte	1
34726                                           ! 6552       
34727                                           ! 6552                   32,
34728 89ED                        20            .byte	$20
34729                                           ! 6553                          75,
34730 89EE                        4B            .byte	$4B
34731                                           ! 6554                        0x06,
34732 89EF                        06            .byte	6
34733                                           ! 6555                     0,
34734 89F0                        00            .byte	0
34735                                           ! 6556                               2,
34736 89F1                        02            .byte	2
34737                                           ! 6557                          0,
34738 89F2                        00            .byte	0
34739                                           ! 6558                        8,
34740 89F3                        08            .byte	8
34741                                           ! 6559                             16,
34742 89F4                        10            .byte	$10
34743                                           ! 6560                          8,
34744 89F5                        08            .byte	8
34745                                           ! 6561                               8,
34746 89F6                        08            .byte	8
34747                                           ! 6562                         8,
34748 89F7                        08            .byte	8
34749                                           ! 6563                              0,
34750 89F8                        00            .byte	0
34751                                           ! 6564                         8,
34752 89F9                        08            .byte	8
34753                                           ! 6565                              24,
34754 89FA                        18            .byte	$18
34755                                           ! 6566                                0x02,
34756 89FB                        02            .byte	2
34757                                           ! 6567                        0xE0000000,
34758 89FC                      0000            .word	0
34759 89FE                      E000            .word	$E000
34760                                           ! 6568                               0,
34761 8A00                      0000            .word	0
34762 8A02                      0000            .word	0
34763                                           ! 6569                             0,
34764 8A04                      0000            .word	0
34765                                           ! 6570                                5120,
34766 8A06                      1400            .word	$1400
34767                                           ! 6571                             0,
34768 8A08                        00            .byte	0
34769                                           ! 6572                             0,
34770 8A09                        00            .byte	0
34771                                           ! 6573                           8,
34772 8A0A                        08            .byte	8
34773                                           ! 6574                                16,
34774 8A0B                        10            .byte	$10
34775                                           ! 6575                             8,
34776 8A0C                        08            .byte	8
34777                                           ! 6576                                  8,
34778 8A0D                        08            .byte	8
34779                                           ! 6577                            8,
34780 8A0E                        08            .byte	8
34781                                           ! 6578                                 0,
34782 8A0F                        00            .byte	0
34783                                           ! 6579                            8,
34784 8A10                        08            .byte	8
34785                                           ! 6580                                 24,
34786 8A11                        18            .byte	$18
34787                                           ! 6581                          0,
34788 8A12                      0000            .word	0
34789 8A14                      0000            .word	0
34790                                           ! 6582 } },
34791                                           ! 6583 { 0x017e,
34792 8A16                      017E            .word	$17E
34793                                           ! 6584 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34794 8A18                      009B            .word	$9B
34795                                           ! 6585                           0x01 | 0x02 | 0x04,
34796 8A1A                        07            .byte	7
34797                                           ! 6586                           0,
34798 8A1B                        00            .byte	0
34799                                           ! 6587                           64,
34800 8A1C                      0040            .word	$40
34801                                           ! 6588                    64,
34802 8A1E                      0040            .word	$40
34803                                           ! 6589                        0xA000,
34804 8A20                      A000            .word	$A000
34805                                           ! 6590                        0x0000,
34806 8A22                      0000            .word	0
34807                                           ! 6591                       0,
34808 8A24                      0000            .word	0
34809 8A26                      0000            .word	0
34810                                           ! 6592                             2880,
34811 8A28                      0B40            .word	$B40
34812                                           ! 6593                        1440,
34813 8A2A                      05A0            .word	$5A0
34814                                           ! 6594                        900,
34815 8A2C                      0384            .word	$384
34816                                           ! 6595                      8,
34817 8A2E                        08            .byte	8
34818                                           ! 6596                      16,
34819 8A2F                        10            .byte	$10
34820                                           ! 6597                           1,
34821 8A30                        01            .byte	1
34822                                           ! 6598                         16,
34823 8A31                        10            .byte	$10
34824                                           ! 6599                          40,
34825 8A32                        28            .byte	$28
34826                                           ! 6600                        0x06,
34827 8A33                        06            .byte	6
34828                                           ! 6601                     0,
34829 8A34                        00            .byte	0
34830                                           ! 6602                               5,
34831 8A35                        05            .byte	5
34832                                           ! 6603                          0,
34833 8A36                        00            .byte	0
34834                                           ! 6604                        5,
34835 8A37                        05            .byte	5
34836                                           ! 6605                             11,
34837 8A38                        0B            .byte	$B
34838                                           ! 6606                          6,
34839 8A39                        06            .byte	6
34840                                           ! 6607                               5,
34841 8A3A                        05            .byte	5
34842                                           ! 6608                         5,
34843 8A3B                        05            .byte	5
34844                                           ! 6609                              0,
34845 8A3C                        00            .byte	0
34846                                           ! 6610                         0,
34847 8A3D                        00            .byte	0
34848                                           ! 6611                              0,
34849 8A3E                        00            .byte	0
34850                                           ! 6612                                0,
34851 8A3F                        00            .byte	0
34852                                           ! 6613                        0xE0000000,
34853 8A40                      0000            .word	0
34854 8A42                      E000            .word	$E000
34855                                           ! 6614                               0,
34856 8A44                      0000            .word	0
34857 8A46                      0000            .word	0
34858                                           ! 6615                             0,
34859 8A48                      0000            .word	0
34860                                           ! 6616                                2880,
34861 8A4A                      0B40            .word	$B40
34862                                           ! 6617                             0,
34863 8A4C                        00            .byte	0
34864                                           ! 6618                             0,
34865 8A4D                        00            .byte	0
34866                                           ! 6619                           5,
34867 8A4E                        05            .byte	5
34868                                           ! 6620         
34869                                           ! 6620                        11,
34870 8A4F                        0B            .byte	$B
34871                                           ! 6621                             6,
34872 8A50                        06            .byte	6
34873                                           ! 6622                                  5,
34874 8A51                        05            .byte	5
34875                                           ! 6623                            5,
34876 8A52                        05            .byte	5
34877                                           ! 6624                                 0,
34878 8A53                        00            .byte	0
34879                                           ! 6625                            0,
34880 8A54                        00            .byte	0
34881                                           ! 6626                                 0,
34882 8A55                        00            .byte	0
34883                                           ! 6627                          0,
34884 8A56                      0000            .word	0
34885 8A58                      0000            .word	0
34886                                           ! 6628 } },
34887                                           ! 6629 { 0x017f,
34888 8A5A                      017F            .word	$17F
34889                                           ! 6630 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34890 8A5C                      009B            .word	$9B
34891                                           ! 6631                           0x01 | 0x02 | 0x04,
34892 8A5E                        07            .byte	7
34893                                           ! 6632                           0,
34894 8A5F                        00            .byte	0
34895                                           ! 6633                           64,
34896 8A60                      0040            .word	$40
34897                                           ! 6634                    64,
34898 8A62                      0040            .word	$40
34899                                           ! 6635                        0xA000,
34900 8A64                      A000            .word	$A000
34901                                           ! 6636                        0x0000,
34902 8A66                      0000            .word	0
34903                                           ! 6637                       0,
34904 8A68                      0000            .word	0
34905 8A6A                      0000            .word	0
34906                                           ! 6638                             4320,
34907 8A6C                      10E0            .word	$10E0
34908                                           ! 6639                        1440,
34909 8A6E                      05A0            .word	$5A0
34910                                           ! 6640                        900,
34911 8A70                      0384            .word	$384
34912                                           ! 6641                      8,
34913 8A72                        08            .byte	8
34914                                           ! 6642                      16,
34915 8A73                        10            .byte	$10
34916                                           ! 6643                           1,
34917 8A74                        01            .byte	1
34918                                           ! 6644                         24,
34919 8A75                        18            .byte	$18
34920                                           ! 6645                          60,
34921 8A76                        3C            .byte	$3C
34922                                           ! 6646                        0x06,
34923 8A77                        06            .byte	6
34924                                           ! 6647                     0,
34925 8A78                        00            .byte	0
34926                                           ! 6648                               3,
34927 8A79                        03            .byte	3
34928                                           ! 6649                          0,
34929 8A7A                        00            .byte	0
34930                                           ! 6650                        8,
34931 8A7B                        08            .byte	8
34932                                           ! 6651                             16,
34933 8A7C                        10            .byte	$10
34934                                           ! 6652                          8,
34935 8A7D                        08            .byte	8
34936                                           ! 6653                               8,
34937 8A7E                        08            .byte	8
34938                                           ! 6654                         8,
34939 8A7F                        08            .byte	8
34940                                           ! 6655                              0,
34941 8A80                        00            .byte	0
34942                                           ! 6656                         0,
34943 8A81                        00            .byte	0
34944                                           ! 6657                              0,
34945 8A82                        00            .byte	0
34946                                           ! 6658                                0,
34947 8A83                        00            .byte	0
34948                                           ! 6659                        0xE0000000,
34949 8A84                      0000            .word	0
34950 8A86                      E000            .word	$E000
34951                                           ! 6660                               0,
34952 8A88                      0000            .word	0
34953 8A8A                      0000            .word	0
34954                                           ! 6661                             0,
34955 8A8C                      0000            .word	0
34956                                           ! 6662                                4320,
34957 8A8E                      10E0            .word	$10E0
34958                                           ! 6663                             0,
34959 8A90                        00            .byte	0
34960                                           ! 6664                             0,
34961 8A91                        00            .byte	0
34962                                           ! 6665                           8,
34963 8A92                        08            .byte	8
34964                                           ! 6666                                16,
34965 8A93                        10            .byte	$10
34966                                           ! 6667                             8,
34967 8A94                        08            .byte	8
34968                                           ! 6668                                  8,
34969 8A95                        08            .byte	8
34970                                           ! 6669                            8,
34971 8A96                        08            .byte	8
34972                                           ! 6670                                 0,
34973 8A97                        00            .byte	0
34974                                           ! 6671                            0,
34975 8A98                        00            .byte	0
34976                                           ! 6672                                 0,
34977 8A99                        00            .byte	0
34978                                           ! 6673                          0,
34979 8A9A                      0000            .word	0
34980 8A9C                      0000            .word	0
34981                                           ! 6674 } },
34982                                           ! 6675 { 0x0180,
34983 8A9E                      0180            .word	$180
34984                                           ! 6676 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34985 8AA0                      009B            .word	$9B
34986                                           ! 6677                           0x01 | 0x02 | 0x04,
34987 8AA2                        07            .byte	7
34988                                           ! 6678                           0,
34989 8AA3                        00            .byte	0
34990                                           ! 6679                           64,
34991 8AA4                      0040            .word	$40
34992                                           ! 6680                    64,
34993 8AA6                      0040            .word	$40
34994                                           ! 6681                        0xA000,
34995 8AA8                      A000            .word	$A000
34996                                           ! 6682                        0x0000,
34997 8AAA                      0000            .word	0
34998                                           ! 6683                       0,
34999 8AAC                      0000            .word	0
35000 8AAE                      0000            .word	0
35001                                           ! 6684                             5760,
35002 8AB0                      1680            .word	$1680
35003                                           ! 6685                        1440,
35004 8AB2                      05A0            .word	$5A0
35005                                           ! 6686                        900,
35006 8AB4                      0384            .word	$384
35007                                           ! 6687                      8,
35008 8AB6                        08            .byte	8
35009                                           ! 6688                      16,
35010 8AB7                        10            .byte	$10
35011                                           ! 6689        
35012                                           ! 6689                    1,
35013 8AB8                        01            .byte	1
35014                                           ! 6690                         32,
35015 8AB9                        20            .byte	$20
35016                                           ! 6691                          80,
35017 8ABA                        50            .byte	$50
35018                                           ! 6692                        0x06,
35019 8ABB                        06            .byte	6
35020                                           ! 6693                     0,
35021 8ABC                        00            .byte	0
35022                                           ! 6694                               2,
35023 8ABD                        02            .byte	2
35024                                           ! 6695                          0,
35025 8ABE                        00            .byte	0
35026                                           ! 6696                        8,
35027 8ABF                        08            .byte	8
35028                                           ! 6697                             16,
35029 8AC0                        10            .byte	$10
35030                                           ! 6698                          8,
35031 8AC1                        08            .byte	8
35032                                           ! 6699                               8,
35033 8AC2                        08            .byte	8
35034                                           ! 6700                         8,
35035 8AC3                        08            .byte	8
35036                                           ! 6701                              0,
35037 8AC4                        00            .byte	0
35038                                           ! 6702                         8,
35039 8AC5                        08            .byte	8
35040                                           ! 6703                              24,
35041 8AC6                        18            .byte	$18
35042                                           ! 6704                                0x02,
35043 8AC7                        02            .byte	2
35044                                           ! 6705                        0xE0000000,
35045 8AC8                      0000            .word	0
35046 8ACA                      E000            .word	$E000
35047                                           ! 6706                               0,
35048 8ACC                      0000            .word	0
35049 8ACE                      0000            .word	0
35050                                           ! 6707                             0,
35051 8AD0                      0000            .word	0
35052                                           ! 6708                                5760,
35053 8AD2                      1680            .word	$1680
35054                                           ! 6709                             0,
35055 8AD4                        00            .byte	0
35056                                           ! 6710                             0,
35057 8AD5                        00            .byte	0
35058                                           ! 6711                           8,
35059 8AD6                        08            .byte	8
35060                                           ! 6712                                16,
35061 8AD7                        10            .byte	$10
35062                                           ! 6713                             8,
35063 8AD8                        08            .byte	8
35064                                           ! 6714                                  8,
35065 8AD9                        08            .byte	8
35066                                           ! 6715                            8,
35067 8ADA                        08            .byte	8
35068                                           ! 6716                                 0,
35069 8ADB                        00            .byte	0
35070                                           ! 6717                            8,
35071 8ADC                        08            .byte	8
35072                                           ! 6718                                 24,
35073 8ADD                        18            .byte	$18
35074                                           ! 6719                          0,
35075 8ADE                      0000            .word	0
35076 8AE0                      0000            .word	0
35077                                           ! 6720 } },
35078                                           ! 6721 { 0x0181,
35079 8AE2                      0181            .word	$181
35080                                           ! 6722 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35081 8AE4                      009B            .word	$9B
35082                                           ! 6723                           0x01 | 0x02 | 0x04,
35083 8AE6                        07            .byte	7
35084                                           ! 6724                           0,
35085 8AE7                        00            .byte	0
35086                                           ! 6725                           64,
35087 8AE8                      0040            .word	$40
35088                                           ! 6726                    64,
35089 8AEA                      0040            .word	$40
35090                                           ! 6727                        0xA000,
35091 8AEC                      A000            .word	$A000
35092                                           ! 6728                        0x0000,
35093 8AEE                      0000            .word	0
35094                                           ! 6729                       0,
35095 8AF0                      0000            .word	0
35096 8AF2                      0000            .word	0
35097                                           ! 6730                             2800,
35098 8AF4                      0AF0            .word	$AF0
35099                                           ! 6731                        1400,
35100 8AF6                      0578            .word	$578
35101                                           ! 6732                        1050,
35102 8AF8                      041A            .word	$41A
35103                                           ! 6733                      8,
35104 8AFA                        08            .byte	8
35105                                           ! 6734                      16,
35106 8AFB                        10            .byte	$10
35107                                           ! 6735                           1,
35108 8AFC                        01            .byte	1
35109                                           ! 6736                         16,
35110 8AFD                        10            .byte	$10
35111                                           ! 6737                          45,
35112 8AFE                        2D            .byte	$2D
35113                                           ! 6738                        0x06,
35114 8AFF                        06            .byte	6
35115                                           ! 6739                     0,
35116 8B00                        00            .byte	0
35117                                           ! 6740                               4,
35118 8B01                        04            .byte	4
35119                                           ! 6741                          0,
35120 8B02                        00            .byte	0
35121                                           ! 6742                        5,
35122 8B03                        05            .byte	5
35123                                           ! 6743                             11,
35124 8B04                        0B            .byte	$B
35125                                           ! 6744                          6,
35126 8B05                        06            .byte	6
35127                                           ! 6745                               5,
35128 8B06                        05            .byte	5
35129                                           ! 6746                         5,
35130 8B07                        05            .byte	5
35131                                           ! 6747                              0,
35132 8B08                        00            .byte	0
35133                                           ! 6748                         0,
35134 8B09                        00            .byte	0
35135                                           ! 6749                              0,
35136 8B0A                        00            .byte	0
35137                                           ! 6750                                0,
35138 8B0B                        00            .byte	0
35139                                           ! 6751                        0xE0000000,
35140 8B0C                      0000            .word	0
35141 8B0E                      E000            .word	$E000
35142                                           ! 6752                               0,
35143 8B10                      0000            .word	0
35144 8B12                      0000            .word	0
35145                                           ! 6753                             0,
35146 8B14                      0000            .word	0
35147                                           ! 6754                                2800,
35148 8B16                      0AF0            .word	$AF0
35149                                           ! 6755                             0,
35150 8B18                        00            .byte	0
35151                                           ! 6756                             0,
35152 8B19                        00            .byte	0
35153                                           ! 6757         
35154                                           ! 6757                   5,
35155 8B1A                        05            .byte	5
35156                                           ! 6758                                11,
35157 8B1B                        0B            .byte	$B
35158                                           ! 6759                             6,
35159 8B1C                        06            .byte	6
35160                                           ! 6760                                  5,
35161 8B1D                        05            .byte	5
35162                                           ! 6761                            5,
35163 8B1E                        05            .byte	5
35164                                           ! 6762                                 0,
35165 8B1F                        00            .byte	0
35166                                           ! 6763                            0,
35167 8B20                        00            .byte	0
35168                                           ! 6764                                 0,
35169 8B21                        00            .byte	0
35170                                           ! 6765                          0,
35171 8B22                      0000            .word	0
35172 8B24                      0000            .word	0
35173                                           ! 6766 } },
35174                                           ! 6767 { 0x0182,
35175 8B26                      0182            .word	$182
35176                                           ! 6768 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35177 8B28                      009B            .word	$9B
35178                                           ! 6769                           0x01 | 0x02 | 0x04,
35179 8B2A                        07            .byte	7
35180                                           ! 6770                           0,
35181 8B2B                        00            .byte	0
35182                                           ! 6771                           64,
35183 8B2C                      0040            .word	$40
35184                                           ! 6772                    64,
35185 8B2E                      0040            .word	$40
35186                                           ! 6773                        0xA000,
35187 8B30                      A000            .word	$A000
35188                                           ! 6774                        0x0000,
35189 8B32                      0000            .word	0
35190                                           ! 6775                       0,
35191 8B34                      0000            .word	0
35192 8B36                      0000            .word	0
35193                                           ! 6776                             4200,
35194 8B38                      1068            .word	$1068
35195                                           ! 6777                        1400,
35196 8B3A                      0578            .word	$578
35197                                           ! 6778                        1050,
35198 8B3C                      041A            .word	$41A
35199                                           ! 6779                      8,
35200 8B3E                        08            .byte	8
35201                                           ! 6780                      16,
35202 8B3F                        10            .byte	$10
35203                                           ! 6781                           1,
35204 8B40                        01            .byte	1
35205                                           ! 6782                         24,
35206 8B41                        18            .byte	$18
35207                                           ! 6783                          68,
35208 8B42                        44            .byte	$44
35209                                           ! 6784                        0x06,
35210 8B43                        06            .byte	6
35211                                           ! 6785                     0,
35212 8B44                        00            .byte	0
35213                                           ! 6786                               2,
35214 8B45                        02            .byte	2
35215                                           ! 6787                          0,
35216 8B46                        00            .byte	0
35217                                           ! 6788                        8,
35218 8B47                        08            .byte	8
35219                                           ! 6789                             16,
35220 8B48                        10            .byte	$10
35221                                           ! 6790                          8,
35222 8B49                        08            .byte	8
35223                                           ! 6791                               8,
35224 8B4A                        08            .byte	8
35225                                           ! 6792                         8,
35226 8B4B                        08            .byte	8
35227                                           ! 6793                              0,
35228 8B4C                        00            .byte	0
35229                                           ! 6794                         0,
35230 8B4D                        00            .byte	0
35231                                           ! 6795                              0,
35232 8B4E                        00            .byte	0
35233                                           ! 6796                                0,
35234 8B4F                        00            .byte	0
35235                                           ! 6797                        0xE0000000,
35236 8B50                      0000            .word	0
35237 8B52                      E000            .word	$E000
35238                                           ! 6798                               0,
35239 8B54                      0000            .word	0
35240 8B56                      0000            .word	0
35241                                           ! 6799                             0,
35242 8B58                      0000            .word	0
35243                                           ! 6800                                4200,
35244 8B5A                      1068            .word	$1068
35245                                           ! 6801                             0,
35246 8B5C                        00            .byte	0
35247                                           ! 6802                             0,
35248 8B5D                        00            .byte	0
35249                                           ! 6803                           8,
35250 8B5E                        08            .byte	8
35251                                           ! 6804                                16,
35252 8B5F                        10            .byte	$10
35253                                           ! 6805                             8,
35254 8B60                        08            .byte	8
35255                                           ! 6806                                  8,
35256 8B61                        08            .byte	8
35257                                           ! 6807                            8,
35258 8B62                        08            .byte	8
35259                                           ! 6808                                 0,
35260 8B63                        00            .byte	0
35261                                           ! 6809                            0,
35262 8B64                        00            .byte	0
35263                                           ! 6810                                 0,
35264 8B65                        00            .byte	0
35265                                           ! 6811                          0,
35266 8B66                      0000            .word	0
35267 8B68                      0000            .word	0
35268                                           ! 6812 } },
35269                                           ! 6813 { 0x0183,
35270 8B6A                      0183            .word	$183
35271                                           ! 6814 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35272 8B6C                      009B            .word	$9B
35273                                           ! 6815                           0x01 | 0x02 | 0x04,
35274 8B6E                        07            .byte	7
35275                                           ! 6816                           0,
35276 8B6F                        00            .byte	0
35277                                           ! 6817                           64,
35278 8B70                      0040            .word	$40
35279                                           ! 6818                    64,
35280 8B72                      0040            .word	$40
35281                                           ! 6819                        0xA000,
35282 8B74                      A000            .word	$A000
35283                                           ! 6820                        0x0000,
35284 8B76                      0000            .word	0
35285                                           ! 6821                       0,
35286 8B78                      0000            .word	0
35287 8B7A                      0000            .word	0
35288                                           ! 6822                             5600,
35289 8B7C                      15E0            .word	$15E0
35290                                           ! 6823                        1400,
35291 8B7E                      0578            .word	$578
35292                                           ! 6824                        1050,
35293 8B80                      041A            .word	$41A
35294                                           ! 6825                      8,
35295 8B82                        08            .byte	8
35296                                           ! 6826  
35297                                           ! 6826                     16,
35298 8B83                        10            .byte	$10
35299                                           ! 6827                           1,
35300 8B84                        01            .byte	1
35301                                           ! 6828                         32,
35302 8B85                        20            .byte	$20
35303                                           ! 6829                          90,
35304 8B86                        5A            .byte	$5A
35305                                           ! 6830                        0x06,
35306 8B87                        06            .byte	6
35307                                           ! 6831                     0,
35308 8B88                        00            .byte	0
35309                                           ! 6832                               1,
35310 8B89                        01            .byte	1
35311                                           ! 6833                          0,
35312 8B8A                        00            .byte	0
35313                                           ! 6834                        8,
35314 8B8B                        08            .byte	8
35315                                           ! 6835                             16,
35316 8B8C                        10            .byte	$10
35317                                           ! 6836                          8,
35318 8B8D                        08            .byte	8
35319                                           ! 6837                               8,
35320 8B8E                        08            .byte	8
35321                                           ! 6838                         8,
35322 8B8F                        08            .byte	8
35323                                           ! 6839                              0,
35324 8B90                        00            .byte	0
35325                                           ! 6840                         8,
35326 8B91                        08            .byte	8
35327                                           ! 6841                              24,
35328 8B92                        18            .byte	$18
35329                                           ! 6842                                0x02,
35330 8B93                        02            .byte	2
35331                                           ! 6843                        0xE0000000,
35332 8B94                      0000            .word	0
35333 8B96                      E000            .word	$E000
35334                                           ! 6844                               0,
35335 8B98                      0000            .word	0
35336 8B9A                      0000            .word	0
35337                                           ! 6845                             0,
35338 8B9C                      0000            .word	0
35339                                           ! 6846                                5600,
35340 8B9E                      15E0            .word	$15E0
35341                                           ! 6847                             0,
35342 8BA0                        00            .byte	0
35343                                           ! 6848                             0,
35344 8BA1                        00            .byte	0
35345                                           ! 6849                           8,
35346 8BA2                        08            .byte	8
35347                                           ! 6850                                16,
35348 8BA3                        10            .byte	$10
35349                                           ! 6851                             8,
35350 8BA4                        08            .byte	8
35351                                           ! 6852                                  8,
35352 8BA5                        08            .byte	8
35353                                           ! 6853                            8,
35354 8BA6                        08            .byte	8
35355                                           ! 6854                                 0,
35356 8BA7                        00            .byte	0
35357                                           ! 6855                            8,
35358 8BA8                        08            .byte	8
35359                                           ! 6856                                 24,
35360 8BA9                        18            .byte	$18
35361                                           ! 6857                          0,
35362 8BAA                      0000            .word	0
35363 8BAC                      0000            .word	0
35364                                           ! 6858 } },
35365                                           ! 6859 { 0x0184,
35366 8BAE                      0184            .word	$184
35367                                           ! 6860 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35368 8BB0                      009B            .word	$9B
35369                                           ! 6861                           0x01 | 0x02 | 0x04,
35370 8BB2                        07            .byte	7
35371                                           ! 6862                           0,
35372 8BB3                        00            .byte	0
35373                                           ! 6863                           64,
35374 8BB4                      0040            .word	$40
35375                                           ! 6864                    64,
35376 8BB6                      0040            .word	$40
35377                                           ! 6865                        0xA000,
35378 8BB8                      A000            .word	$A000
35379                                           ! 6866                        0x0000,
35380 8BBA                      0000            .word	0
35381                                           ! 6867                       0,
35382 8BBC                      0000            .word	0
35383 8BBE                      0000            .word	0
35384                                           ! 6868                             3360,
35385 8BC0                      0D20            .word	$D20
35386                                           ! 6869                        1680,
35387 8BC2                      0690            .word	$690
35388                                           ! 6870                        1050,
35389 8BC4                      041A            .word	$41A
35390                                           ! 6871                      8,
35391 8BC6                        08            .byte	8
35392                                           ! 6872                      16,
35393 8BC7                        10            .byte	$10
35394                                           ! 6873                           1,
35395 8BC8                        01            .byte	1
35396                                           ! 6874                         16,
35397 8BC9                        10            .byte	$10
35398                                           ! 6875                          54,
35399 8BCA                        36            .byte	$36
35400                                           ! 6876                        0x06,
35401 8BCB                        06            .byte	6
35402                                           ! 6877                     0,
35403 8BCC                        00            .byte	0
35404                                           ! 6878                               3,
35405 8BCD                        03            .byte	3
35406                                           ! 6879                          0,
35407 8BCE                        00            .byte	0
35408                                           ! 6880                        5,
35409 8BCF                        05            .byte	5
35410                                           ! 6881                             11,
35411 8BD0                        0B            .byte	$B
35412                                           ! 6882                          6,
35413 8BD1                        06            .byte	6
35414                                           ! 6883                               5,
35415 8BD2                        05            .byte	5
35416                                           ! 6884                         5,
35417 8BD3                        05            .byte	5
35418                                           ! 6885                              0,
35419 8BD4                        00            .byte	0
35420                                           ! 6886                         0,
35421 8BD5                        00            .byte	0
35422                                           ! 6887                              0,
35423 8BD6                        00            .byte	0
35424                                           ! 6888                                0,
35425 8BD7                        00            .byte	0
35426                                           ! 6889                        0xE0000000,
35427 8BD8                      0000            .word	0
35428 8BDA                      E000            .word	$E000
35429                                           ! 6890                               0,
35430 8BDC                      0000            .word	0
35431 8BDE                      0000            .word	0
35432                                           ! 6891                             0,
35433 8BE0                      0000            .word	0
35434                                           ! 6892                                3360,
35435 8BE2                      0D20            .word	$D20
35436                                           ! 6893                             0,
35437 8BE4                        00            .byte	0
35438                                           ! 6894         
35439                                           ! 6894                     0,
35440 8BE5                        00            .byte	0
35441                                           ! 6895                           5,
35442 8BE6                        05            .byte	5
35443                                           ! 6896                                11,
35444 8BE7                        0B            .byte	$B
35445                                           ! 6897                             6,
35446 8BE8                        06            .byte	6
35447                                           ! 6898                                  5,
35448 8BE9                        05            .byte	5
35449                                           ! 6899                            5,
35450 8BEA                        05            .byte	5
35451                                           ! 6900                                 0,
35452 8BEB                        00            .byte	0
35453                                           ! 6901                            0,
35454 8BEC                        00            .byte	0
35455                                           ! 6902                                 0,
35456 8BED                        00            .byte	0
35457                                           ! 6903                          0,
35458 8BEE                      0000            .word	0
35459 8BF0                      0000            .word	0
35460                                           ! 6904 } },
35461                                           ! 6905 { 0x0185,
35462 8BF2                      0185            .word	$185
35463                                           ! 6906 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35464 8BF4                      009B            .word	$9B
35465                                           ! 6907                           0x01 | 0x02 | 0x04,
35466 8BF6                        07            .byte	7
35467                                           ! 6908                           0,
35468 8BF7                        00            .byte	0
35469                                           ! 6909                           64,
35470 8BF8                      0040            .word	$40
35471                                           ! 6910                    64,
35472 8BFA                      0040            .word	$40
35473                                           ! 6911                        0xA000,
35474 8BFC                      A000            .word	$A000
35475                                           ! 6912                        0x0000,
35476 8BFE                      0000            .word	0
35477                                           ! 6913                       0,
35478 8C00                      0000            .word	0
35479 8C02                      0000            .word	0
35480                                           ! 6914                             5040,
35481 8C04                      13B0            .word	$13B0
35482                                           ! 6915                        1680,
35483 8C06                      0690            .word	$690
35484                                           ! 6916                        1050,
35485 8C08                      041A            .word	$41A
35486                                           ! 6917                      8,
35487 8C0A                        08            .byte	8
35488                                           ! 6918                      16,
35489 8C0B                        10            .byte	$10
35490                                           ! 6919                           1,
35491 8C0C                        01            .byte	1
35492                                           ! 6920                         24,
35493 8C0D                        18            .byte	$18
35494                                           ! 6921                          81,
35495 8C0E                        51            .byte	$51
35496                                           ! 6922                        0x06,
35497 8C0F                        06            .byte	6
35498                                           ! 6923                     0,
35499 8C10                        00            .byte	0
35500                                           ! 6924                               2,
35501 8C11                        02            .byte	2
35502                                           ! 6925                          0,
35503 8C12                        00            .byte	0
35504                                           ! 6926                        8,
35505 8C13                        08            .byte	8
35506                                           ! 6927                             16,
35507 8C14                        10            .byte	$10
35508                                           ! 6928                          8,
35509 8C15                        08            .byte	8
35510                                           ! 6929                               8,
35511 8C16                        08            .byte	8
35512                                           ! 6930                         8,
35513 8C17                        08            .byte	8
35514                                           ! 6931                              0,
35515 8C18                        00            .byte	0
35516                                           ! 6932                         0,
35517 8C19                        00            .byte	0
35518                                           ! 6933                              0,
35519 8C1A                        00            .byte	0
35520                                           ! 6934                                0,
35521 8C1B                        00            .byte	0
35522                                           ! 6935                        0xE0000000,
35523 8C1C                      0000            .word	0
35524 8C1E                      E000            .word	$E000
35525                                           ! 6936                               0,
35526 8C20                      0000            .word	0
35527 8C22                      0000            .word	0
35528                                           ! 6937                             0,
35529 8C24                      0000            .word	0
35530                                           ! 6938                                5040,
35531 8C26                      13B0            .word	$13B0
35532                                           ! 6939                             0,
35533 8C28                        00            .byte	0
35534                                           ! 6940                             0,
35535 8C29                        00            .byte	0
35536                                           ! 6941                           8,
35537 8C2A                        08            .byte	8
35538                                           ! 6942                                16,
35539 8C2B                        10            .byte	$10
35540                                           ! 6943                             8,
35541 8C2C                        08            .byte	8
35542                                           ! 6944                                  8,
35543 8C2D                        08            .byte	8
35544                                           ! 6945                            8,
35545 8C2E                        08            .byte	8
35546                                           ! 6946                                 0,
35547 8C2F                        00            .byte	0
35548                                           ! 6947                            0,
35549 8C30                        00            .byte	0
35550                                           ! 6948                                 0,
35551 8C31                        00            .byte	0
35552                                           ! 6949                          0,
35553 8C32                      0000            .word	0
35554 8C34                      0000            .word	0
35555                                           ! 6950 } },
35556                                           ! 6951 { 0x0186,
35557 8C36                      0186            .word	$186
35558                                           ! 6952 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35559 8C38                      009B            .word	$9B
35560                                           ! 6953                           0x01 | 0x02 | 0x04,
35561 8C3A                        07            .byte	7
35562                                           ! 6954                           0,
35563 8C3B                        00            .byte	0
35564                                           ! 6955                           64,
35565 8C3C                      0040            .word	$40
35566                                           ! 6956                    64,
35567 8C3E                      0040            .word	$40
35568                                           ! 6957                        0xA000,
35569 8C40                      A000            .word	$A000
35570                                           ! 6958                        0x0000,
35571 8C42                      0000            .word	0
35572                                           ! 6959                       0,
35573 8C44                      0000            .word	0
35574 8C46                      0000            .word	0
35575                                           ! 6960                             6720,
35576 8C48                      1A40            .word	$1A40
35577                                           ! 6961                        1680,
35578 8C4A                      0690            .word	$690
35579                                           ! 6962                        
35580                                           ! 6962 1050,
35581 8C4C                      041A            .word	$41A
35582                                           ! 6963                      8,
35583 8C4E                        08            .byte	8
35584                                           ! 6964                      16,
35585 8C4F                        10            .byte	$10
35586                                           ! 6965                           1,
35587 8C50                        01            .byte	1
35588                                           ! 6966                         32,
35589 8C51                        20            .byte	$20
35590                                           ! 6967                          108,
35591 8C52                        6C            .byte	$6C
35592                                           ! 6968                        0x06,
35593 8C53                        06            .byte	6
35594                                           ! 6969                     0,
35595 8C54                        00            .byte	0
35596                                           ! 6970                               1,
35597 8C55                        01            .byte	1
35598                                           ! 6971                          0,
35599 8C56                        00            .byte	0
35600                                           ! 6972                        8,
35601 8C57                        08            .byte	8
35602                                           ! 6973                             16,
35603 8C58                        10            .byte	$10
35604                                           ! 6974                          8,
35605 8C59                        08            .byte	8
35606                                           ! 6975                               8,
35607 8C5A                        08            .byte	8
35608                                           ! 6976                         8,
35609 8C5B                        08            .byte	8
35610                                           ! 6977                              0,
35611 8C5C                        00            .byte	0
35612                                           ! 6978                         8,
35613 8C5D                        08            .byte	8
35614                                           ! 6979                              24,
35615 8C5E                        18            .byte	$18
35616                                           ! 6980                                0x02,
35617 8C5F                        02            .byte	2
35618                                           ! 6981                        0xE0000000,
35619 8C60                      0000            .word	0
35620 8C62                      E000            .word	$E000
35621                                           ! 6982                               0,
35622 8C64                      0000            .word	0
35623 8C66                      0000            .word	0
35624                                           ! 6983                             0,
35625 8C68                      0000            .word	0
35626                                           ! 6984                                6720,
35627 8C6A                      1A40            .word	$1A40
35628                                           ! 6985                             0,
35629 8C6C                        00            .byte	0
35630                                           ! 6986                             0,
35631 8C6D                        00            .byte	0
35632                                           ! 6987                           8,
35633 8C6E                        08            .byte	8
35634                                           ! 6988                                16,
35635 8C6F                        10            .byte	$10
35636                                           ! 6989                             8,
35637 8C70                        08            .byte	8
35638                                           ! 6990                                  8,
35639 8C71                        08            .byte	8
35640                                           ! 6991                            8,
35641 8C72                        08            .byte	8
35642                                           ! 6992                                 0,
35643 8C73                        00            .byte	0
35644                                           ! 6993                            8,
35645 8C74                        08            .byte	8
35646                                           ! 6994                                 24,
35647 8C75                        18            .byte	$18
35648                                           ! 6995                          0,
35649 8C76                      0000            .word	0
35650 8C78                      0000            .word	0
35651                                           ! 6996 } },
35652                                           ! 6997 { 0x0187,
35653 8C7A                      0187            .word	$187
35654                                           ! 6998 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35655 8C7C                      009B            .word	$9B
35656                                           ! 6999                           0x01 | 0x02 | 0x04,
35657 8C7E                        07            .byte	7
35658                                           ! 7000                           0,
35659 8C7F                        00            .byte	0
35660                                           ! 7001                           64,
35661 8C80                      0040            .word	$40
35662                                           ! 7002                    64,
35663 8C82                      0040            .word	$40
35664                                           ! 7003                        0xA000,
35665 8C84                      A000            .word	$A000
35666                                           ! 7004                        0x0000,
35667 8C86                      0000            .word	0
35668                                           ! 7005                       0,
35669 8C88                      0000            .word	0
35670 8C8A                      0000            .word	0
35671                                           ! 7006                             3840,
35672 8C8C                      0F00            .word	$F00
35673                                           ! 7007                        1920,
35674 8C8E                      0780            .word	$780
35675                                           ! 7008                        1200,
35676 8C90                      04B0            .word	$4B0
35677                                           ! 7009                      8,
35678 8C92                        08            .byte	8
35679                                           ! 7010                      16,
35680 8C93                        10            .byte	$10
35681                                           ! 7011                           1,
35682 8C94                        01            .byte	1
35683                                           ! 7012                         16,
35684 8C95                        10            .byte	$10
35685                                           ! 7013                          71,
35686 8C96                        47            .byte	$47
35687                                           ! 7014                        0x06,
35688 8C97                        06            .byte	6
35689                                           ! 7015                     0,
35690 8C98                        00            .byte	0
35691                                           ! 7016                               2,
35692 8C99                        02            .byte	2
35693                                           ! 7017                          0,
35694 8C9A                        00            .byte	0
35695                                           ! 7018                        5,
35696 8C9B                        05            .byte	5
35697                                           ! 7019                             11,
35698 8C9C                        0B            .byte	$B
35699                                           ! 7020                          6,
35700 8C9D                        06            .byte	6
35701                                           ! 7021                               5,
35702 8C9E                        05            .byte	5
35703                                           ! 7022                         5,
35704 8C9F                        05            .byte	5
35705                                           ! 7023                              0,
35706 8CA0                        00            .byte	0
35707                                           ! 7024                         0,
35708 8CA1                        00            .byte	0
35709                                           ! 7025                              0,
35710 8CA2                        00            .byte	0
35711                                           ! 7026                                0,
35712 8CA3                        00            .byte	0
35713                                           ! 7027                        0xE0000000,
35714 8CA4                      0000            .word	0
35715 8CA6                      E000            .word	$E000
35716                                           ! 7028                               0,
35717 8CA8                      0000            .word	0
35718 8CAA                      0000            .word	0
35719                                           ! 7029                             0,
35720 8CAC                      0000            .word	0
35721                                           ! 7030                                3840,
35722 8CAE                      0F00            .word	$F00
35723                                           ! 7031        
35724                                           ! 7031                      0,
35725 8CB0                        00            .byte	0
35726                                           ! 7032                             0,
35727 8CB1                        00            .byte	0
35728                                           ! 7033                           5,
35729 8CB2                        05            .byte	5
35730                                           ! 7034                                11,
35731 8CB3                        0B            .byte	$B
35732                                           ! 7035                             6,
35733 8CB4                        06            .byte	6
35734                                           ! 7036                                  5,
35735 8CB5                        05            .byte	5
35736                                           ! 7037                            5,
35737 8CB6                        05            .byte	5
35738                                           ! 7038                                 0,
35739 8CB7                        00            .byte	0
35740                                           ! 7039                            0,
35741 8CB8                        00            .byte	0
35742                                           ! 7040                                 0,
35743 8CB9                        00            .byte	0
35744                                           ! 7041                          0,
35745 8CBA                      0000            .word	0
35746 8CBC                      0000            .word	0
35747                                           ! 7042 } },
35748                                           ! 7043 { 0x0188,
35749 8CBE                      0188            .word	$188
35750                                           ! 7044 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35751 8CC0                      009B            .word	$9B
35752                                           ! 7045                           0x01 | 0x02 | 0x04,
35753 8CC2                        07            .byte	7
35754                                           ! 7046                           0,
35755 8CC3                        00            .byte	0
35756                                           ! 7047                           64,
35757 8CC4                      0040            .word	$40
35758                                           ! 7048                    64,
35759 8CC6                      0040            .word	$40
35760                                           ! 7049                        0xA000,
35761 8CC8                      A000            .word	$A000
35762                                           ! 7050                        0x0000,
35763 8CCA                      0000            .word	0
35764                                           ! 7051                       0,
35765 8CCC                      0000            .word	0
35766 8CCE                      0000            .word	0
35767                                           ! 7052                             5760,
35768 8CD0                      1680            .word	$1680
35769                                           ! 7053                        1920,
35770 8CD2                      0780            .word	$780
35771                                           ! 7054                        1200,
35772 8CD4                      04B0            .word	$4B0
35773                                           ! 7055                      8,
35774 8CD6                        08            .byte	8
35775                                           ! 7056                      16,
35776 8CD7                        10            .byte	$10
35777                                           ! 7057                           1,
35778 8CD8                        01            .byte	1
35779                                           ! 7058                         24,
35780 8CD9                        18            .byte	$18
35781                                           ! 7059                          106,
35782 8CDA                        6A            .byte	$6A
35783                                           ! 7060                        0x06,
35784 8CDB                        06            .byte	6
35785                                           ! 7061                     0,
35786 8CDC                        00            .byte	0
35787                                           ! 7062                               1,
35788 8CDD                        01            .byte	1
35789                                           ! 7063                          0,
35790 8CDE                        00            .byte	0
35791                                           ! 7064                        8,
35792 8CDF                        08            .byte	8
35793                                           ! 7065                             16,
35794 8CE0                        10            .byte	$10
35795                                           ! 7066                          8,
35796 8CE1                        08            .byte	8
35797                                           ! 7067                               8,
35798 8CE2                        08            .byte	8
35799                                           ! 7068                         8,
35800 8CE3                        08            .byte	8
35801                                           ! 7069                              0,
35802 8CE4                        00            .byte	0
35803                                           ! 7070                         0,
35804 8CE5                        00            .byte	0
35805                                           ! 7071                              0,
35806 8CE6                        00            .byte	0
35807                                           ! 7072                                0,
35808 8CE7                        00            .byte	0
35809                                           ! 7073                        0xE0000000,
35810 8CE8                      0000            .word	0
35811 8CEA                      E000            .word	$E000
35812                                           ! 7074                               0,
35813 8CEC                      0000            .word	0
35814 8CEE                      0000            .word	0
35815                                           ! 7075                             0,
35816 8CF0                      0000            .word	0
35817                                           ! 7076                                5760,
35818 8CF2                      1680            .word	$1680
35819                                           ! 7077                             0,
35820 8CF4                        00            .byte	0
35821                                           ! 7078                             0,
35822 8CF5                        00            .byte	0
35823                                           ! 7079                           8,
35824 8CF6                        08            .byte	8
35825                                           ! 7080                                16,
35826 8CF7                        10            .byte	$10
35827                                           ! 7081                             8,
35828 8CF8                        08            .byte	8
35829                                           ! 7082                                  8,
35830 8CF9                        08            .byte	8
35831                                           ! 7083                            8,
35832 8CFA                        08            .byte	8
35833                                           ! 7084                                 0,
35834 8CFB                        00            .byte	0
35835                                           ! 7085                            0,
35836 8CFC                        00            .byte	0
35837                                           ! 7086                                 0,
35838 8CFD                        00            .byte	0
35839                                           ! 7087                          0,
35840 8CFE                      0000            .word	0
35841 8D00                      0000            .word	0
35842                                           ! 7088 } },
35843                                           ! 7089 { 0x0189,
35844 8D02                      0189            .word	$189
35845                                           ! 7090 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35846 8D04                      009B            .word	$9B
35847                                           ! 7091                           0x01 | 0x02 | 0x04,
35848 8D06                        07            .byte	7
35849                                           ! 7092                           0,
35850 8D07                        00            .byte	0
35851                                           ! 7093                           64,
35852 8D08                      0040            .word	$40
35853                                           ! 7094                    64,
35854 8D0A                      0040            .word	$40
35855                                           ! 7095                        0xA000,
35856 8D0C                      A000            .word	$A000
35857                                           ! 7096                        0x0000,
35858 8D0E                      0000            .word	0
35859                                           ! 7097                       0,
35860 8D10                      0000            .word	0
35861 8D12                      0000            .word	0
35862                                           ! 7098                             7680,
35863 8D14                      1E00            .word	$1E00
35864                                           ! 7099                    
35865                                           ! 7099     1920,
35866 8D16                      0780            .word	$780
35867                                           ! 7100                        1200,
35868 8D18                      04B0            .word	$4B0
35869                                           ! 7101                      8,
35870 8D1A                        08            .byte	8
35871                                           ! 7102                      16,
35872 8D1B                        10            .byte	$10
35873                                           ! 7103                           1,
35874 8D1C                        01            .byte	1
35875                                           ! 7104                         32,
35876 8D1D                        20            .byte	$20
35877                                           ! 7105                          141,
35878 8D1E                        8D            .byte	$8D
35879                                           ! 7106                        0x06,
35880 8D1F                        06            .byte	6
35881                                           ! 7107                     0,
35882 8D20                        00            .byte	0
35883                                           ! 7108                               0,
35884 8D21                        00            .byte	0
35885                                           ! 7109                          0,
35886 8D22                        00            .byte	0
35887                                           ! 7110                        8,
35888 8D23                        08            .byte	8
35889                                           ! 7111                             16,
35890 8D24                        10            .byte	$10
35891                                           ! 7112                          8,
35892 8D25                        08            .byte	8
35893                                           ! 7113                               8,
35894 8D26                        08            .byte	8
35895                                           ! 7114                         8,
35896 8D27                        08            .byte	8
35897                                           ! 7115                              0,
35898 8D28                        00            .byte	0
35899                                           ! 7116                         8,
35900 8D29                        08            .byte	8
35901                                           ! 7117                              24,
35902 8D2A                        18            .byte	$18
35903                                           ! 7118                                0x02,
35904 8D2B                        02            .byte	2
35905                                           ! 7119                        0xE0000000,
35906 8D2C                      0000            .word	0
35907 8D2E                      E000            .word	$E000
35908                                           ! 7120                               0,
35909 8D30                      0000            .word	0
35910 8D32                      0000            .word	0
35911                                           ! 7121                             0,
35912 8D34                      0000            .word	0
35913                                           ! 7122                                7680,
35914 8D36                      1E00            .word	$1E00
35915                                           ! 7123                             0,
35916 8D38                        00            .byte	0
35917                                           ! 7124                             0,
35918 8D39                        00            .byte	0
35919                                           ! 7125                           8,
35920 8D3A                        08            .byte	8
35921                                           ! 7126                                16,
35922 8D3B                        10            .byte	$10
35923                                           ! 7127                             8,
35924 8D3C                        08            .byte	8
35925                                           ! 7128                                  8,
35926 8D3D                        08            .byte	8
35927                                           ! 7129                            8,
35928 8D3E                        08            .byte	8
35929                                           ! 7130                                 0,
35930 8D3F                        00            .byte	0
35931                                           ! 7131                            8,
35932 8D40                        08            .byte	8
35933                                           ! 7132                                 24,
35934 8D41                        18            .byte	$18
35935                                           ! 7133                          0,
35936 8D42                      0000            .word	0
35937 8D44                      0000            .word	0
35938                                           ! 7134 } },
35939                                           ! 7135 { 0x018a,
35940 8D46                      018A            .word	$18A
35941                                           ! 7136 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35942 8D48                      009B            .word	$9B
35943                                           ! 7137                           0x01 | 0x02 | 0x04,
35944 8D4A                        07            .byte	7
35945                                           ! 7138                           0,
35946 8D4B                        00            .byte	0
35947                                           ! 7139                           64,
35948 8D4C                      0040            .word	$40
35949                                           ! 7140                    64,
35950 8D4E                      0040            .word	$40
35951                                           ! 7141                        0xA000,
35952 8D50                      A000            .word	$A000
35953                                           ! 7142                        0x0000,
35954 8D52                      0000            .word	0
35955                                           ! 7143                       0,
35956 8D54                      0000            .word	0
35957 8D56                      0000            .word	0
35958                                           ! 7144                             5120,
35959 8D58                      1400            .word	$1400
35960                                           ! 7145                        2560,
35961 8D5A                      0A00            .word	$A00
35962                                           ! 7146                        1600,
35963 8D5C                      0640            .word	$640
35964                                           ! 7147                      8,
35965 8D5E                        08            .byte	8
35966                                           ! 7148                      16,
35967 8D5F                        10            .byte	$10
35968                                           ! 7149                           1,
35969 8D60                        01            .byte	1
35970                                           ! 7150                         16,
35971 8D61                        10            .byte	$10
35972                                           ! 7151                          125,
35973 8D62                        7D            .byte	$7D
35974                                           ! 7152                        0x06,
35975 8D63                        06            .byte	6
35976                                           ! 7153                     0,
35977 8D64                        00            .byte	0
35978                                           ! 7154                               1,
35979 8D65                        01            .byte	1
35980                                           ! 7155                          0,
35981 8D66                        00            .byte	0
35982                                           ! 7156                        5,
35983 8D67                        05            .byte	5
35984                                           ! 7157                             11,
35985 8D68                        0B            .byte	$B
35986                                           ! 7158                          6,
35987 8D69                        06            .byte	6
35988                                           ! 7159                               5,
35989 8D6A                        05            .byte	5
35990                                           ! 7160                         5,
35991 8D6B                        05            .byte	5
35992                                           ! 7161                              0,
35993 8D6C                        00            .byte	0
35994                                           ! 7162                         0,
35995 8D6D                        00            .byte	0
35996                                           ! 7163                              0,
35997 8D6E                        00            .byte	0
35998                                           ! 7164                                0,
35999 8D6F                        00            .byte	0
36000                                           ! 7165                        0xE0000000,
36001 8D70                      0000            .word	0
36002 8D72                      E000            .word	$E000
36003                                           ! 7166                               0,
36004 8D74                      0000            .word	0
36005 8D76                      0000            .word	0
36006                                           ! 7167                             0,
36007 8D78                      0000            .word	0
36008                                           ! 7168           
36009                                           ! 7168                      5120,
36010 8D7A                      1400            .word	$1400
36011                                           ! 7169                             0,
36012 8D7C                        00            .byte	0
36013                                           ! 7170                             0,
36014 8D7D                        00            .byte	0
36015                                           ! 7171                           5,
36016 8D7E                        05            .byte	5
36017                                           ! 7172                                11,
36018 8D7F                        0B            .byte	$B
36019                                           ! 7173                             6,
36020 8D80                        06            .byte	6
36021                                           ! 7174                                  5,
36022 8D81                        05            .byte	5
36023                                           ! 7175                            5,
36024 8D82                        05            .byte	5
36025                                           ! 7176                                 0,
36026 8D83                        00            .byte	0
36027                                           ! 7177                            0,
36028 8D84                        00            .byte	0
36029                                           ! 7178                                 0,
36030 8D85                        00            .byte	0
36031                                           ! 7179                          0,
36032 8D86                      0000            .word	0
36033 8D88                      0000            .word	0
36034                                           ! 7180 } },
36035                                           ! 7181 { 0x018b,
36036 8D8A                      018B            .word	$18B
36037                                           ! 7182 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36038 8D8C                      009B            .word	$9B
36039                                           ! 7183                           0x01 | 0x02 | 0x04,
36040 8D8E                        07            .byte	7
36041                                           ! 7184                           0,
36042 8D8F                        00            .byte	0
36043                                           ! 7185                           64,
36044 8D90                      0040            .word	$40
36045                                           ! 7186                    64,
36046 8D92                      0040            .word	$40
36047                                           ! 7187                        0xA000,
36048 8D94                      A000            .word	$A000
36049                                           ! 7188                        0x0000,
36050 8D96                      0000            .word	0
36051                                           ! 7189                       0,
36052 8D98                      0000            .word	0
36053 8D9A                      0000            .word	0
36054                                           ! 7190                             7680,
36055 8D9C                      1E00            .word	$1E00
36056                                           ! 7191                        2560,
36057 8D9E                      0A00            .word	$A00
36058                                           ! 7192                        1600,
36059 8DA0                      0640            .word	$640
36060                                           ! 7193                      8,
36061 8DA2                        08            .byte	8
36062                                           ! 7194                      16,
36063 8DA3                        10            .byte	$10
36064                                           ! 7195                           1,
36065 8DA4                        01            .byte	1
36066                                           ! 7196                         24,
36067 8DA5                        18            .byte	$18
36068                                           ! 7197                          188,
36069 8DA6                        BC            .byte	$BC
36070                                           ! 7198                        0x06,
36071 8DA7                        06            .byte	6
36072                                           ! 7199                     0,
36073 8DA8                        00            .byte	0
36074                                           ! 7200                               0,
36075 8DA9                        00            .byte	0
36076                                           ! 7201                          0,
36077 8DAA                        00            .byte	0
36078                                           ! 7202                        8,
36079 8DAB                        08            .byte	8
36080                                           ! 7203                             16,
36081 8DAC                        10            .byte	$10
36082                                           ! 7204                          8,
36083 8DAD                        08            .byte	8
36084                                           ! 7205                               8,
36085 8DAE                        08            .byte	8
36086                                           ! 7206                         8,
36087 8DAF                        08            .byte	8
36088                                           ! 7207                              0,
36089 8DB0                        00            .byte	0
36090                                           ! 7208                         0,
36091 8DB1                        00            .byte	0
36092                                           ! 7209                              0,
36093 8DB2                        00            .byte	0
36094                                           ! 7210                                0,
36095 8DB3                        00            .byte	0
36096                                           ! 7211                        0xE0000000,
36097 8DB4                      0000            .word	0
36098 8DB6                      E000            .word	$E000
36099                                           ! 7212                               0,
36100 8DB8                      0000            .word	0
36101 8DBA                      0000            .word	0
36102                                           ! 7213                             0,
36103 8DBC                      0000            .word	0
36104                                           ! 7214                                7680,
36105 8DBE                      1E00            .word	$1E00
36106                                           ! 7215                             0,
36107 8DC0                        00            .byte	0
36108                                           ! 7216                             0,
36109 8DC1                        00            .byte	0
36110                                           ! 7217                           8,
36111 8DC2                        08            .byte	8
36112                                           ! 7218                                16,
36113 8DC3                        10            .byte	$10
36114                                           ! 7219                             8,
36115 8DC4                        08            .byte	8
36116                                           ! 7220                                  8,
36117 8DC5                        08            .byte	8
36118                                           ! 7221                            8,
36119 8DC6                        08            .byte	8
36120                                           ! 7222                                 0,
36121 8DC7                        00            .byte	0
36122                                           ! 7223                            0,
36123 8DC8                        00            .byte	0
36124                                           ! 7224                                 0,
36125 8DC9                        00            .byte	0
36126                                           ! 7225                          0,
36127 8DCA                      0000            .word	0
36128 8DCC                      0000            .word	0
36129                                           ! 7226 } },
36130                                           ! 7227 { 0x018c,
36131 8DCE                      018C            .word	$18C
36132                                           ! 7228 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36133 8DD0                      009B            .word	$9B
36134                                           ! 7229                           0x01 | 0x02 | 0x04,
36135 8DD2                        07            .byte	7
36136                                           ! 7230                           0,
36137 8DD3                        00            .byte	0
36138                                           ! 7231                           64,
36139 8DD4                      0040            .word	$40
36140                                           ! 7232                    64,
36141 8DD6                      0040            .word	$40
36142                                           ! 7233                        0xA000,
36143 8DD8                      A000            .word	$A000
36144                                           ! 7234                        0x0000,
36145 8DDA                      0000            .word	0
36146                                           ! 7235                       0,
36147 8DDC                      0000            .word	0
36148 8DDE                      0000            .word	0
36149                                           ! 7236                    
36150                                           ! 7236          10240,
36151 8DE0                      2800            .word	$2800
36152                                           ! 7237                        2560,
36153 8DE2                      0A00            .word	$A00
36154                                           ! 7238                        1600,
36155 8DE4                      0640            .word	$640
36156                                           ! 7239                      8,
36157 8DE6                        08            .byte	8
36158                                           ! 7240                      16,
36159 8DE7                        10            .byte	$10
36160                                           ! 7241                           1,
36161 8DE8                        01            .byte	1
36162                                           ! 7242                         32,
36163 8DE9                        20            .byte	$20
36164                                           ! 7243                          250,
36165 8DEA                        FA            .byte	$FA
36166                                           ! 7244                        0x06,
36167 8DEB                        06            .byte	6
36168                                           ! 7245                     0,
36169 8DEC                        00            .byte	0
36170                                           ! 7246                               0,
36171 8DED                        00            .byte	0
36172                                           ! 7247                          0,
36173 8DEE                        00            .byte	0
36174                                           ! 7248                        8,
36175 8DEF                        08            .byte	8
36176                                           ! 7249                             16,
36177 8DF0                        10            .byte	$10
36178                                           ! 7250                          8,
36179 8DF1                        08            .byte	8
36180                                           ! 7251                               8,
36181 8DF2                        08            .byte	8
36182                                           ! 7252                         8,
36183 8DF3                        08            .byte	8
36184                                           ! 7253                              0,
36185 8DF4                        00            .byte	0
36186                                           ! 7254                         8,
36187 8DF5                        08            .byte	8
36188                                           ! 7255                              24,
36189 8DF6                        18            .byte	$18
36190                                           ! 7256                                0x02,
36191 8DF7                        02            .byte	2
36192                                           ! 7257                        0xE0000000,
36193 8DF8                      0000            .word	0
36194 8DFA                      E000            .word	$E000
36195                                           ! 7258                               0,
36196 8DFC                      0000            .word	0
36197 8DFE                      0000            .word	0
36198                                           ! 7259                             0,
36199 8E00                      0000            .word	0
36200                                           ! 7260                                10240,
36201 8E02                      2800            .word	$2800
36202                                           ! 7261                             0,
36203 8E04                        00            .byte	0
36204                                           ! 7262                             0,
36205 8E05                        00            .byte	0
36206                                           ! 7263                           8,
36207 8E06                        08            .byte	8
36208                                           ! 7264                                16,
36209 8E07                        10            .byte	$10
36210                                           ! 7265                             8,
36211 8E08                        08            .byte	8
36212                                           ! 7266                                  8,
36213 8E09                        08            .byte	8
36214                                           ! 7267                            8,
36215 8E0A                        08            .byte	8
36216                                           ! 7268                                 0,
36217 8E0B                        00            .byte	0
36218                                           ! 7269                            8,
36219 8E0C                        08            .byte	8
36220                                           ! 7270                                 24,
36221 8E0D                        18            .byte	$18
36222                                           ! 7271                          0,
36223 8E0E                      0000            .word	0
36224 8E10                      0000            .word	0
36225                                           ! 7272 } },
36226                                           ! 7273 { 0x018d,
36227 8E12                      018D            .word	$18D
36228                                           ! 7274 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36229 8E14                      009B            .word	$9B
36230                                           ! 7275                           0x01 | 0x02 | 0x04,
36231 8E16                        07            .byte	7
36232                                           ! 7276                           0,
36233 8E17                        00            .byte	0
36234                                           ! 7277                           64,
36235 8E18                      0040            .word	$40
36236                                           ! 7278                    64,
36237 8E1A                      0040            .word	$40
36238                                           ! 7279                        0xA000,
36239 8E1C                      A000            .word	$A000
36240                                           ! 7280                        0x0000,
36241 8E1E                      0000            .word	0
36242                                           ! 7281                       0,
36243 8E20                      0000            .word	0
36244 8E22                      0000            .word	0
36245                                           ! 7282                             640,
36246 8E24                      0280            .word	$280
36247                                           ! 7283                        320,
36248 8E26                      0140            .word	$140
36249                                           ! 7284                        480,
36250 8E28                      01E0            .word	$1E0
36251                                           ! 7285                      8,
36252 8E2A                        08            .byte	8
36253                                           ! 7286                      16,
36254 8E2B                        10            .byte	$10
36255                                           ! 7287                           1,
36256 8E2C                        01            .byte	1
36257                                           ! 7288                         16,
36258 8E2D                        10            .byte	$10
36259                                           ! 7289                          5,
36260 8E2E                        05            .byte	5
36261                                           ! 7290                        0x06,
36262 8E2F                        06            .byte	6
36263                                           ! 7291                     0,
36264 8E30                        00            .byte	0
36265                                           ! 7292                               53,
36266 8E31                        35            .byte	$35
36267                                           ! 7293                          0,
36268 8E32                        00            .byte	0
36269                                           ! 7294                        5,
36270 8E33                        05            .byte	5
36271                                           ! 7295                             11,
36272 8E34                        0B            .byte	$B
36273                                           ! 7296                          6,
36274 8E35                        06            .byte	6
36275                                           ! 7297                               5,
36276 8E36                        05            .byte	5
36277                                           ! 7298                         5,
36278 8E37                        05            .byte	5
36279                                           ! 7299                              0,
36280 8E38                        00            .byte	0
36281                                           ! 7300                         0,
36282 8E39                        00            .byte	0
36283                                           ! 7301                              0,
36284 8E3A                        00            .byte	0
36285                                           ! 7302                                0,
36286 8E3B                        00            .byte	0
36287                                           ! 7303                        0xE0000000,
36288 8E3C                      0000            .word	0
36289 8E3E                      E000            .word	$E000
36290                                           ! 7304                               0,
36291 8E40                      0000            .word	0
36292 8E42                      0000            .word	0
36293                                           ! 7305          
36294                                           ! 7305                    0,
36295 8E44                      0000            .word	0
36296                                           ! 7306                                640,
36297 8E46                      0280            .word	$280
36298                                           ! 7307                             0,
36299 8E48                        00            .byte	0
36300                                           ! 7308                             0,
36301 8E49                        00            .byte	0
36302                                           ! 7309                           5,
36303 8E4A                        05            .byte	5
36304                                           ! 7310                                11,
36305 8E4B                        0B            .byte	$B
36306                                           ! 7311                             6,
36307 8E4C                        06            .byte	6
36308                                           ! 7312                                  5,
36309 8E4D                        05            .byte	5
36310                                           ! 7313                            5,
36311 8E4E                        05            .byte	5
36312                                           ! 7314                                 0,
36313 8E4F                        00            .byte	0
36314                                           ! 7315                            0,
36315 8E50                        00            .byte	0
36316                                           ! 7316                                 0,
36317 8E51                        00            .byte	0
36318                                           ! 7317                          0,
36319 8E52                      0000            .word	0
36320 8E54                      0000            .word	0
36321                                           ! 7318 } },
36322                                           ! 7319 { 0x018e,
36323 8E56                      018E            .word	$18E
36324                                           ! 7320 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36325 8E58                      009B            .word	$9B
36326                                           ! 7321                           0x01 | 0x02 | 0x04,
36327 8E5A                        07            .byte	7
36328                                           ! 7322                           0,
36329 8E5B                        00            .byte	0
36330                                           ! 7323                           64,
36331 8E5C                      0040            .word	$40
36332                                           ! 7324                    64,
36333 8E5E                      0040            .word	$40
36334                                           ! 7325                        0xA000,
36335 8E60                      A000            .word	$A000
36336                                           ! 7326                        0x0000,
36337 8E62                      0000            .word	0
36338                                           ! 7327                       0,
36339 8E64                      0000            .word	0
36340 8E66                      0000            .word	0
36341                                           ! 7328                             960,
36342 8E68                      03C0            .word	$3C0
36343                                           ! 7329                        320,
36344 8E6A                      0140            .word	$140
36345                                           ! 7330                        480,
36346 8E6C                      01E0            .word	$1E0
36347                                           ! 7331                      8,
36348 8E6E                        08            .byte	8
36349                                           ! 7332                      16,
36350 8E6F                        10            .byte	$10
36351                                           ! 7333                           1,
36352 8E70                        01            .byte	1
36353                                           ! 7334                         24,
36354 8E71                        18            .byte	$18
36355                                           ! 7335                          8,
36356 8E72                        08            .byte	8
36357                                           ! 7336                        0x06,
36358 8E73                        06            .byte	6
36359                                           ! 7337                     0,
36360 8E74                        00            .byte	0
36361                                           ! 7338                               35,
36362 8E75                        23            .byte	$23
36363                                           ! 7339                          0,
36364 8E76                        00            .byte	0
36365                                           ! 7340                        8,
36366 8E77                        08            .byte	8
36367                                           ! 7341                             16,
36368 8E78                        10            .byte	$10
36369                                           ! 7342                          8,
36370 8E79                        08            .byte	8
36371                                           ! 7343                               8,
36372 8E7A                        08            .byte	8
36373                                           ! 7344                         8,
36374 8E7B                        08            .byte	8
36375                                           ! 7345                              0,
36376 8E7C                        00            .byte	0
36377                                           ! 7346                         0,
36378 8E7D                        00            .byte	0
36379                                           ! 7347                              0,
36380 8E7E                        00            .byte	0
36381                                           ! 7348                                0,
36382 8E7F                        00            .byte	0
36383                                           ! 7349                        0xE0000000,
36384 8E80                      0000            .word	0
36385 8E82                      E000            .word	$E000
36386                                           ! 7350                               0,
36387 8E84                      0000            .word	0
36388 8E86                      0000            .word	0
36389                                           ! 7351                             0,
36390 8E88                      0000            .word	0
36391                                           ! 7352                                960,
36392 8E8A                      03C0            .word	$3C0
36393                                           ! 7353                             0,
36394 8E8C                        00            .byte	0
36395                                           ! 7354                             0,
36396 8E8D                        00            .byte	0
36397                                           ! 7355                           8,
36398 8E8E                        08            .byte	8
36399                                           ! 7356                                16,
36400 8E8F                        10            .byte	$10
36401                                           ! 7357                             8,
36402 8E90                        08            .byte	8
36403                                           ! 7358                                  8,
36404 8E91                        08            .byte	8
36405                                           ! 7359                            8,
36406 8E92                        08            .byte	8
36407                                           ! 7360                                 0,
36408 8E93                        00            .byte	0
36409                                           ! 7361                            0,
36410 8E94                        00            .byte	0
36411                                           ! 7362                                 0,
36412 8E95                        00            .byte	0
36413                                           ! 7363                          0,
36414 8E96                      0000            .word	0
36415 8E98                      0000            .word	0
36416                                           ! 7364 } },
36417                                           ! 7365 { 0x018f,
36418 8E9A                      018F            .word	$18F
36419                                           ! 7366 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36420 8E9C                      009B            .word	$9B
36421                                           ! 7367                           0x01 | 0x02 | 0x04,
36422 8E9E                        07            .byte	7
36423                                           ! 7368                           0,
36424 8E9F                        00            .byte	0
36425                                           ! 7369                           64,
36426 8EA0                      0040            .word	$40
36427                                           ! 7370                    64,
36428 8EA2                      0040            .word	$40
36429                                           ! 7371                        0xA000,
36430 8EA4                      A000            .word	$A000
36431                                           ! 7372                        0x0000,
36432 8EA6                      0000            .word	0
36433                                           ! 7373                   
36434                                           ! 7373     0,
36435 8EA8                      0000            .word	0
36436 8EAA                      0000            .word	0
36437                                           ! 7374                             1280,
36438 8EAC                      0500            .word	$500
36439                                           ! 7375                        320,
36440 8EAE                      0140            .word	$140
36441                                           ! 7376                        480,
36442 8EB0                      01E0            .word	$1E0
36443                                           ! 7377                      8,
36444 8EB2                        08            .byte	8
36445                                           ! 7378                      16,
36446 8EB3                        10            .byte	$10
36447                                           ! 7379                           1,
36448 8EB4                        01            .byte	1
36449                                           ! 7380                         32,
36450 8EB5                        20            .byte	$20
36451                                           ! 7381                          10,
36452 8EB6                        0A            .byte	$A
36453                                           ! 7382                        0x06,
36454 8EB7                        06            .byte	6
36455                                           ! 7383                     0,
36456 8EB8                        00            .byte	0
36457                                           ! 7384                               26,
36458 8EB9                        1A            .byte	$1A
36459                                           ! 7385                          0,
36460 8EBA                        00            .byte	0
36461                                           ! 7386                        8,
36462 8EBB                        08            .byte	8
36463                                           ! 7387                             16,
36464 8EBC                        10            .byte	$10
36465                                           ! 7388                          8,
36466 8EBD                        08            .byte	8
36467                                           ! 7389                               8,
36468 8EBE                        08            .byte	8
36469                                           ! 7390                         8,
36470 8EBF                        08            .byte	8
36471                                           ! 7391                              0,
36472 8EC0                        00            .byte	0
36473                                           ! 7392                         8,
36474 8EC1                        08            .byte	8
36475                                           ! 7393                              24,
36476 8EC2                        18            .byte	$18
36477                                           ! 7394                                0x02,
36478 8EC3                        02            .byte	2
36479                                           ! 7395                        0xE0000000,
36480 8EC4                      0000            .word	0
36481 8EC6                      E000            .word	$E000
36482                                           ! 7396                               0,
36483 8EC8                      0000            .word	0
36484 8ECA                      0000            .word	0
36485                                           ! 7397                             0,
36486 8ECC                      0000            .word	0
36487                                           ! 7398                                1280,
36488 8ECE                      0500            .word	$500
36489                                           ! 7399                             0,
36490 8ED0                        00            .byte	0
36491                                           ! 7400                             0,
36492 8ED1                        00            .byte	0
36493                                           ! 7401                           8,
36494 8ED2                        08            .byte	8
36495                                           ! 7402                                16,
36496 8ED3                        10            .byte	$10
36497                                           ! 7403                             8,
36498 8ED4                        08            .byte	8
36499                                           ! 7404                                  8,
36500 8ED5                        08            .byte	8
36501                                           ! 7405                            8,
36502 8ED6                        08            .byte	8
36503                                           ! 7406                                 0,
36504 8ED7                        00            .byte	0
36505                                           ! 7407                            8,
36506 8ED8                        08            .byte	8
36507                                           ! 7408                                 24,
36508 8ED9                        18            .byte	$18
36509                                           ! 7409                          0,
36510 8EDA                      0000            .word	0
36511 8EDC                      0000            .word	0
36512                                           ! 7410 } },
36513                                           ! 7411 { 0x0190,
36514 8EDE                      0190            .word	$190
36515                                           ! 7412 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36516 8EE0                      009B            .word	$9B
36517                                           ! 7413                           0x01 | 0x02 | 0x04,
36518 8EE2                        07            .byte	7
36519                                           ! 7414                           0,
36520 8EE3                        00            .byte	0
36521                                           ! 7415                           64,
36522 8EE4                      0040            .word	$40
36523                                           ! 7416                    64,
36524 8EE6                      0040            .word	$40
36525                                           ! 7417                        0xA000,
36526 8EE8                      A000            .word	$A000
36527                                           ! 7418                        0x0000,
36528 8EEA                      0000            .word	0
36529                                           ! 7419                       0,
36530 8EEC                      0000            .word	0
36531 8EEE                      0000            .word	0
36532                                           ! 7420                             960,
36533 8EF0                      03C0            .word	$3C0
36534                                           ! 7421                        480,
36535 8EF2                      01E0            .word	$1E0
36536                                           ! 7422                        800,
36537 8EF4                      0320            .word	$320
36538                                           ! 7423                      8,
36539 8EF6                        08            .byte	8
36540                                           ! 7424                      16,
36541 8EF7                        10            .byte	$10
36542                                           ! 7425                           1,
36543 8EF8                        01            .byte	1
36544                                           ! 7426                         16,
36545 8EF9                        10            .byte	$10
36546                                           ! 7427                          12,
36547 8EFA                        0C            .byte	$C
36548                                           ! 7428                        0x06,
36549 8EFB                        06            .byte	6
36550                                           ! 7429                     0,
36551 8EFC                        00            .byte	0
36552                                           ! 7430                               20,
36553 8EFD                        14            .byte	$14
36554                                           ! 7431                          0,
36555 8EFE                        00            .byte	0
36556                                           ! 7432                        5,
36557 8EFF                        05            .byte	5
36558                                           ! 7433                             11,
36559 8F00                        0B            .byte	$B
36560                                           ! 7434                          6,
36561 8F01                        06            .byte	6
36562                                           ! 7435                               5,
36563 8F02                        05            .byte	5
36564                                           ! 7436                         5,
36565 8F03                        05            .byte	5
36566                                           ! 7437                              0,
36567 8F04                        00            .byte	0
36568                                           ! 7438                         0,
36569 8F05                        00            .byte	0
36570                                           ! 7439                              0,
36571 8F06                        00            .byte	0
36572                                           ! 7440                                0,
36573 8F07                        00            .byte	0
36574                                           ! 7441                        0xE0000000,
36575 8F08                      0000            .word	0
36576 8F0A                      E000            .word	$E000
36577                                           ! 7442                    
36578                                           ! 7442            0,
36579 8F0C                      0000            .word	0
36580 8F0E                      0000            .word	0
36581                                           ! 7443                             0,
36582 8F10                      0000            .word	0
36583                                           ! 7444                                960,
36584 8F12                      03C0            .word	$3C0
36585                                           ! 7445                             0,
36586 8F14                        00            .byte	0
36587                                           ! 7446                             0,
36588 8F15                        00            .byte	0
36589                                           ! 7447                           5,
36590 8F16                        05            .byte	5
36591                                           ! 7448                                11,
36592 8F17                        0B            .byte	$B
36593                                           ! 7449                             6,
36594 8F18                        06            .byte	6
36595                                           ! 7450                                  5,
36596 8F19                        05            .byte	5
36597                                           ! 7451                            5,
36598 8F1A                        05            .byte	5
36599                                           ! 7452                                 0,
36600 8F1B                        00            .byte	0
36601                                           ! 7453                            0,
36602 8F1C                        00            .byte	0
36603                                           ! 7454                                 0,
36604 8F1D                        00            .byte	0
36605                                           ! 7455                          0,
36606 8F1E                      0000            .word	0
36607 8F20                      0000            .word	0
36608                                           ! 7456 } },
36609                                           ! 7457 { 0x0191,
36610 8F22                      0191            .word	$191
36611                                           ! 7458 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36612 8F24                      009B            .word	$9B
36613                                           ! 7459                           0x01 | 0x02 | 0x04,
36614 8F26                        07            .byte	7
36615                                           ! 7460                           0,
36616 8F27                        00            .byte	0
36617                                           ! 7461                           64,
36618 8F28                      0040            .word	$40
36619                                           ! 7462                    64,
36620 8F2A                      0040            .word	$40
36621                                           ! 7463                        0xA000,
36622 8F2C                      A000            .word	$A000
36623                                           ! 7464                        0x0000,
36624 8F2E                      0000            .word	0
36625                                           ! 7465                       0,
36626 8F30                      0000            .word	0
36627 8F32                      0000            .word	0
36628                                           ! 7466                             1440,
36629 8F34                      05A0            .word	$5A0
36630                                           ! 7467                        480,
36631 8F36                      01E0            .word	$1E0
36632                                           ! 7468                        800,
36633 8F38                      0320            .word	$320
36634                                           ! 7469                      8,
36635 8F3A                        08            .byte	8
36636                                           ! 7470                      16,
36637 8F3B                        10            .byte	$10
36638                                           ! 7471                           1,
36639 8F3C                        01            .byte	1
36640                                           ! 7472                         24,
36641 8F3D                        18            .byte	$18
36642                                           ! 7473                          18,
36643 8F3E                        12            .byte	$12
36644                                           ! 7474                        0x06,
36645 8F3F                        06            .byte	6
36646                                           ! 7475                     0,
36647 8F40                        00            .byte	0
36648                                           ! 7476                               13,
36649 8F41                        0D            .byte	$D
36650                                           ! 7477                          0,
36651 8F42                        00            .byte	0
36652                                           ! 7478                        8,
36653 8F43                        08            .byte	8
36654                                           ! 7479                             16,
36655 8F44                        10            .byte	$10
36656                                           ! 7480                          8,
36657 8F45                        08            .byte	8
36658                                           ! 7481                               8,
36659 8F46                        08            .byte	8
36660                                           ! 7482                         8,
36661 8F47                        08            .byte	8
36662                                           ! 7483                              0,
36663 8F48                        00            .byte	0
36664                                           ! 7484                         0,
36665 8F49                        00            .byte	0
36666                                           ! 7485                              0,
36667 8F4A                        00            .byte	0
36668                                           ! 7486                                0,
36669 8F4B                        00            .byte	0
36670                                           ! 7487                        0xE0000000,
36671 8F4C                      0000            .word	0
36672 8F4E                      E000            .word	$E000
36673                                           ! 7488                               0,
36674 8F50                      0000            .word	0
36675 8F52                      0000            .word	0
36676                                           ! 7489                             0,
36677 8F54                      0000            .word	0
36678                                           ! 7490                                1440,
36679 8F56                      05A0            .word	$5A0
36680                                           ! 7491                             0,
36681 8F58                        00            .byte	0
36682                                           ! 7492                             0,
36683 8F59                        00            .byte	0
36684                                           ! 7493                           8,
36685 8F5A                        08            .byte	8
36686                                           ! 7494                                16,
36687 8F5B                        10            .byte	$10
36688                                           ! 7495                             8,
36689 8F5C                        08            .byte	8
36690                                           ! 7496                                  8,
36691 8F5D                        08            .byte	8
36692                                           ! 7497                            8,
36693 8F5E                        08            .byte	8
36694                                           ! 7498                                 0,
36695 8F5F                        00            .byte	0
36696                                           ! 7499                            0,
36697 8F60                        00            .byte	0
36698                                           ! 7500                                 0,
36699 8F61                        00            .byte	0
36700                                           ! 7501                          0,
36701 8F62                      0000            .word	0
36702 8F64                      0000            .word	0
36703                                           ! 7502 } },
36704                                           ! 7503 { 0x0192,
36705 8F66                      0192            .word	$192
36706                                           ! 7504 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36707 8F68                      009B            .word	$9B
36708                                           ! 7505                           0x01 | 0x02 | 0x04,
36709 8F6A                        07            .byte	7
36710                                           ! 7506                           0,
36711 8F6B                        00            .byte	0
36712                                           ! 7507                           64,
36713 8F6C                      0040            .word	$40
36714                                           ! 7508                    64,
36715 8F6E                      0040            .word	$40
36716                                           ! 7509                        0xA000,
36717 8F70                      A000            .word	$A000
36718                                           ! 7510                        
36719                                           ! 7510 0x0000,
36720 8F72                      0000            .word	0
36721                                           ! 7511                       0,
36722 8F74                      0000            .word	0
36723 8F76                      0000            .word	0
36724                                           ! 7512                             1920,
36725 8F78                      0780            .word	$780
36726                                           ! 7513                        480,
36727 8F7A                      01E0            .word	$1E0
36728                                           ! 7514                        800,
36729 8F7C                      0320            .word	$320
36730                                           ! 7515                      8,
36731 8F7E                        08            .byte	8
36732                                           ! 7516                      16,
36733 8F7F                        10            .byte	$10
36734                                           ! 7517                           1,
36735 8F80                        01            .byte	1
36736                                           ! 7518                         32,
36737 8F81                        20            .byte	$20
36738                                           ! 7519                          24,
36739 8F82                        18            .byte	$18
36740                                           ! 7520                        0x06,
36741 8F83                        06            .byte	6
36742                                           ! 7521                     0,
36743 8F84                        00            .byte	0
36744                                           ! 7522                               9,
36745 8F85                        09            .byte	9
36746                                           ! 7523                          0,
36747 8F86                        00            .byte	0
36748                                           ! 7524                        8,
36749 8F87                        08            .byte	8
36750                                           ! 7525                             16,
36751 8F88                        10            .byte	$10
36752                                           ! 7526                          8,
36753 8F89                        08            .byte	8
36754                                           ! 7527                               8,
36755 8F8A                        08            .byte	8
36756                                           ! 7528                         8,
36757 8F8B                        08            .byte	8
36758                                           ! 7529                              0,
36759 8F8C                        00            .byte	0
36760                                           ! 7530                         8,
36761 8F8D                        08            .byte	8
36762                                           ! 7531                              24,
36763 8F8E                        18            .byte	$18
36764                                           ! 7532                                0x02,
36765 8F8F                        02            .byte	2
36766                                           ! 7533                        0xE0000000,
36767 8F90                      0000            .word	0
36768 8F92                      E000            .word	$E000
36769                                           ! 7534                               0,
36770 8F94                      0000            .word	0
36771 8F96                      0000            .word	0
36772                                           ! 7535                             0,
36773 8F98                      0000            .word	0
36774                                           ! 7536                                1920,
36775 8F9A                      0780            .word	$780
36776                                           ! 7537                             0,
36777 8F9C                        00            .byte	0
36778                                           ! 7538                             0,
36779 8F9D                        00            .byte	0
36780                                           ! 7539                           8,
36781 8F9E                        08            .byte	8
36782                                           ! 7540                                16,
36783 8F9F                        10            .byte	$10
36784                                           ! 7541                             8,
36785 8FA0                        08            .byte	8
36786                                           ! 7542                                  8,
36787 8FA1                        08            .byte	8
36788                                           ! 7543                            8,
36789 8FA2                        08            .byte	8
36790                                           ! 7544                                 0,
36791 8FA3                        00            .byte	0
36792                                           ! 7545                            8,
36793 8FA4                        08            .byte	8
36794                                           ! 7546                                 24,
36795 8FA5                        18            .byte	$18
36796                                           ! 7547                          0,
36797 8FA6                      0000            .word	0
36798 8FA8                      0000            .word	0
36799                                           ! 7548 } },
36800                                           ! 7549 { 0x0193,
36801 8FAA                      0193            .word	$193
36802                                           ! 7550 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36803 8FAC                      009B            .word	$9B
36804                                           ! 7551                           0x01 | 0x02 | 0x04,
36805 8FAE                        07            .byte	7
36806                                           ! 7552                           0,
36807 8FAF                        00            .byte	0
36808                                           ! 7553                           64,
36809 8FB0                      0040            .word	$40
36810                                           ! 7554                    64,
36811 8FB2                      0040            .word	$40
36812                                           ! 7555                        0xA000,
36813 8FB4                      A000            .word	$A000
36814                                           ! 7556                        0x0000,
36815 8FB6                      0000            .word	0
36816                                           ! 7557                       0,
36817 8FB8                      0000            .word	0
36818 8FBA                      0000            .word	0
36819                                           ! 7558                             960,
36820 8FBC                      03C0            .word	$3C0
36821                                           ! 7559                        480,
36822 8FBE                      01E0            .word	$1E0
36823                                           ! 7560                        854,
36824 8FC0                      0356            .word	$356
36825                                           ! 7561                      8,
36826 8FC2                        08            .byte	8
36827                                           ! 7562                      16,
36828 8FC3                        10            .byte	$10
36829                                           ! 7563                           1,
36830 8FC4                        01            .byte	1
36831                                           ! 7564                         16,
36832 8FC5                        10            .byte	$10
36833                                           ! 7565                          13,
36834 8FC6                        0D            .byte	$D
36835                                           ! 7566                        0x06,
36836 8FC7                        06            .byte	6
36837                                           ! 7567                     0,
36838 8FC8                        00            .byte	0
36839                                           ! 7568                               19,
36840 8FC9                        13            .byte	$13
36841                                           ! 7569                          0,
36842 8FCA                        00            .byte	0
36843                                           ! 7570                        5,
36844 8FCB                        05            .byte	5
36845                                           ! 7571                             11,
36846 8FCC                        0B            .byte	$B
36847                                           ! 7572                          6,
36848 8FCD                        06            .byte	6
36849                                           ! 7573                               5,
36850 8FCE                        05            .byte	5
36851                                           ! 7574                         5,
36852 8FCF                        05            .byte	5
36853                                           ! 7575                              0,
36854 8FD0                        00            .byte	0
36855                                           ! 7576                         0,
36856 8FD1                        00            .byte	0
36857                                           ! 7577                              0,
36858 8FD2                        00            .byte	0
36859                                           ! 7578                                0,
36860 8FD3                        00            .byte	0
36861                                           ! 7579                        0xE000
36862                                           ! 7579 0000,
36863 8FD4                      0000            .word	0
36864 8FD6                      E000            .word	$E000
36865                                           ! 7580                               0,
36866 8FD8                      0000            .word	0
36867 8FDA                      0000            .word	0
36868                                           ! 7581                             0,
36869 8FDC                      0000            .word	0
36870                                           ! 7582                                960,
36871 8FDE                      03C0            .word	$3C0
36872                                           ! 7583                             0,
36873 8FE0                        00            .byte	0
36874                                           ! 7584                             0,
36875 8FE1                        00            .byte	0
36876                                           ! 7585                           5,
36877 8FE2                        05            .byte	5
36878                                           ! 7586                                11,
36879 8FE3                        0B            .byte	$B
36880                                           ! 7587                             6,
36881 8FE4                        06            .byte	6
36882                                           ! 7588                                  5,
36883 8FE5                        05            .byte	5
36884                                           ! 7589                            5,
36885 8FE6                        05            .byte	5
36886                                           ! 7590                                 0,
36887 8FE7                        00            .byte	0
36888                                           ! 7591                            0,
36889 8FE8                        00            .byte	0
36890                                           ! 7592                                 0,
36891 8FE9                        00            .byte	0
36892                                           ! 7593                          0,
36893 8FEA                      0000            .word	0
36894 8FEC                      0000            .word	0
36895                                           ! 7594 } },
36896                                           ! 7595 { 0x0194,
36897 8FEE                      0194            .word	$194
36898                                           ! 7596 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36899 8FF0                      009B            .word	$9B
36900                                           ! 7597                           0x01 | 0x02 | 0x04,
36901 8FF2                        07            .byte	7
36902                                           ! 7598                           0,
36903 8FF3                        00            .byte	0
36904                                           ! 7599                           64,
36905 8FF4                      0040            .word	$40
36906                                           ! 7600                    64,
36907 8FF6                      0040            .word	$40
36908                                           ! 7601                        0xA000,
36909 8FF8                      A000            .word	$A000
36910                                           ! 7602                        0x0000,
36911 8FFA                      0000            .word	0
36912                                           ! 7603                       0,
36913 8FFC                      0000            .word	0
36914 8FFE                      0000            .word	0
36915                                           ! 7604                             1440,
36916 9000                      05A0            .word	$5A0
36917                                           ! 7605                        480,
36918 9002                      01E0            .word	$1E0
36919                                           ! 7606                        854,
36920 9004                      0356            .word	$356
36921                                           ! 7607                      8,
36922 9006                        08            .byte	8
36923                                           ! 7608                      16,
36924 9007                        10            .byte	$10
36925                                           ! 7609                           1,
36926 9008                        01            .byte	1
36927                                           ! 7610                         24,
36928 9009                        18            .byte	$18
36929                                           ! 7611                          19,
36930 900A                        13            .byte	$13
36931                                           ! 7612                        0x06,
36932 900B                        06            .byte	6
36933                                           ! 7613                     0,
36934 900C                        00            .byte	0
36935                                           ! 7614                               12,
36936 900D                        0C            .byte	$C
36937                                           ! 7615                          0,
36938 900E                        00            .byte	0
36939                                           ! 7616                        8,
36940 900F                        08            .byte	8
36941                                           ! 7617                             16,
36942 9010                        10            .byte	$10
36943                                           ! 7618                          8,
36944 9011                        08            .byte	8
36945                                           ! 7619                               8,
36946 9012                        08            .byte	8
36947                                           ! 7620                         8,
36948 9013                        08            .byte	8
36949                                           ! 7621                              0,
36950 9014                        00            .byte	0
36951                                           ! 7622                         0,
36952 9015                        00            .byte	0
36953                                           ! 7623                              0,
36954 9016                        00            .byte	0
36955                                           ! 7624                                0,
36956 9017                        00            .byte	0
36957                                           ! 7625                        0xE0000000,
36958 9018                      0000            .word	0
36959 901A                      E000            .word	$E000
36960                                           ! 7626                               0,
36961 901C                      0000            .word	0
36962 901E                      0000            .word	0
36963                                           ! 7627                             0,
36964 9020                      0000            .word	0
36965                                           ! 7628                                1440,
36966 9022                      05A0            .word	$5A0
36967                                           ! 7629                             0,
36968 9024                        00            .byte	0
36969                                           ! 7630                             0,
36970 9025                        00            .byte	0
36971                                           ! 7631                           8,
36972 9026                        08            .byte	8
36973                                           ! 7632                                16,
36974 9027                        10            .byte	$10
36975                                           ! 7633                             8,
36976 9028                        08            .byte	8
36977                                           ! 7634                                  8,
36978 9029                        08            .byte	8
36979                                           ! 7635                            8,
36980 902A                        08            .byte	8
36981                                           ! 7636                                 0,
36982 902B                        00            .byte	0
36983                                           ! 7637                            0,
36984 902C                        00            .byte	0
36985                                           ! 7638                                 0,
36986 902D                        00            .byte	0
36987                                           ! 7639                          0,
36988 902E                      0000            .word	0
36989 9030                      0000            .word	0
36990                                           ! 7640 } },
36991                                           ! 7641 { 0x0195,
36992 9032                      0195            .word	$195
36993                                           ! 7642 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36994 9034                      009B            .word	$9B
36995                                           ! 7643                           0x01 | 0x02 | 0x04,
36996 9036                        07            .byte	7
36997                                           ! 7644                           0,
36998 9037                        00            .byte	0
36999                                           ! 7645                           64,
37000 9038                      0040            .word	$40
37001                                           ! 7646                    64,
37002 903A                      0040            .word	$40
37003                                           ! 7647                        0xA000
37004                                           ! 7647 ,
37005 903C                      A000            .word	$A000
37006                                           ! 7648                        0x0000,
37007 903E                      0000            .word	0
37008                                           ! 7649                       0,
37009 9040                      0000            .word	0
37010 9042                      0000            .word	0
37011                                           ! 7650                             1920,
37012 9044                      0780            .word	$780
37013                                           ! 7651                        480,
37014 9046                      01E0            .word	$1E0
37015                                           ! 7652                        854,
37016 9048                      0356            .word	$356
37017                                           ! 7653                      8,
37018 904A                        08            .byte	8
37019                                           ! 7654                      16,
37020 904B                        10            .byte	$10
37021                                           ! 7655                           1,
37022 904C                        01            .byte	1
37023                                           ! 7656                         32,
37024 904D                        20            .byte	$20
37025                                           ! 7657                          26,
37026 904E                        1A            .byte	$1A
37027                                           ! 7658                        0x06,
37028 904F                        06            .byte	6
37029                                           ! 7659                     0,
37030 9050                        00            .byte	0
37031                                           ! 7660                               9,
37032 9051                        09            .byte	9
37033                                           ! 7661                          0,
37034 9052                        00            .byte	0
37035                                           ! 7662                        8,
37036 9053                        08            .byte	8
37037                                           ! 7663                             16,
37038 9054                        10            .byte	$10
37039                                           ! 7664                          8,
37040 9055                        08            .byte	8
37041                                           ! 7665                               8,
37042 9056                        08            .byte	8
37043                                           ! 7666                         8,
37044 9057                        08            .byte	8
37045                                           ! 7667                              0,
37046 9058                        00            .byte	0
37047                                           ! 7668                         8,
37048 9059                        08            .byte	8
37049                                           ! 7669                              24,
37050 905A                        18            .byte	$18
37051                                           ! 7670                                0x02,
37052 905B                        02            .byte	2
37053                                           ! 7671                        0xE0000000,
37054 905C                      0000            .word	0
37055 905E                      E000            .word	$E000
37056                                           ! 7672                               0,
37057 9060                      0000            .word	0
37058 9062                      0000            .word	0
37059                                           ! 7673                             0,
37060 9064                      0000            .word	0
37061                                           ! 7674                                1920,
37062 9066                      0780            .word	$780
37063                                           ! 7675                             0,
37064 9068                        00            .byte	0
37065                                           ! 7676                             0,
37066 9069                        00            .byte	0
37067                                           ! 7677                           8,
37068 906A                        08            .byte	8
37069                                           ! 7678                                16,
37070 906B                        10            .byte	$10
37071                                           ! 7679                             8,
37072 906C                        08            .byte	8
37073                                           ! 7680                                  8,
37074 906D                        08            .byte	8
37075                                           ! 7681                            8,
37076 906E                        08            .byte	8
37077                                           ! 7682                                 0,
37078 906F                        00            .byte	0
37079                                           ! 7683                            8,
37080 9070                        08            .byte	8
37081                                           ! 7684                                 24,
37082 9071                        18            .byte	$18
37083                                           ! 7685                          0,
37084 9072                      0000            .word	0
37085 9074                      0000            .word	0
37086                                           ! 7686 } },
37087                                           ! 7687 { 0x0196,
37088 9076                      0196            .word	$196
37089                                           ! 7688 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37090 9078                      009B            .word	$9B
37091                                           ! 7689                           0x01 | 0x02 | 0x04,
37092 907A                        07            .byte	7
37093                                           ! 7690                           0,
37094 907B                        00            .byte	0
37095                                           ! 7691                           64,
37096 907C                      0040            .word	$40
37097                                           ! 7692                    64,
37098 907E                      0040            .word	$40
37099                                           ! 7693                        0xA000,
37100 9080                      A000            .word	$A000
37101                                           ! 7694                        0x0000,
37102 9082                      0000            .word	0
37103                                           ! 7695                       0,
37104 9084                      0000            .word	0
37105 9086                      0000            .word	0
37106                                           ! 7696                             1080,
37107 9088                      0438            .word	$438
37108                                           ! 7697                        540,
37109 908A                      021C            .word	$21C
37110                                           ! 7698                        960,
37111 908C                      03C0            .word	$3C0
37112                                           ! 7699                      8,
37113 908E                        08            .byte	8
37114                                           ! 7700                      16,
37115 908F                        10            .byte	$10
37116                                           ! 7701                           1,
37117 9090                        01            .byte	1
37118                                           ! 7702                         16,
37119 9091                        10            .byte	$10
37120                                           ! 7703                          16,
37121 9092                        10            .byte	$10
37122                                           ! 7704                        0x06,
37123 9093                        06            .byte	6
37124                                           ! 7705                     0,
37125 9094                        00            .byte	0
37126                                           ! 7706                               15,
37127 9095                        0F            .byte	$F
37128                                           ! 7707                          0,
37129 9096                        00            .byte	0
37130                                           ! 7708                        5,
37131 9097                        05            .byte	5
37132                                           ! 7709                             11,
37133 9098                        0B            .byte	$B
37134                                           ! 7710                          6,
37135 9099                        06            .byte	6
37136                                           ! 7711                               5,
37137 909A                        05            .byte	5
37138                                           ! 7712                         5,
37139 909B                        05            .byte	5
37140                                           ! 7713                              0,
37141 909C                        00            .byte	0
37142                                           ! 7714                         0,
37143 909D                        00            .byte	0
37144                                           ! 7715                              0,
37145 909E                        00            .byte	0
37146                                           ! 7716                                0,
37147 909F                        00            .byte	0
37148                                           ! 7717    
37149                                           ! 7717                     0xE0000000,
37150 90A0                      0000            .word	0
37151 90A2                      E000            .word	$E000
37152                                           ! 7718                               0,
37153 90A4                      0000            .word	0
37154 90A6                      0000            .word	0
37155                                           ! 7719                             0,
37156 90A8                      0000            .word	0
37157                                           ! 7720                                1080,
37158 90AA                      0438            .word	$438
37159                                           ! 7721                             0,
37160 90AC                        00            .byte	0
37161                                           ! 7722                             0,
37162 90AD                        00            .byte	0
37163                                           ! 7723                           5,
37164 90AE                        05            .byte	5
37165                                           ! 7724                                11,
37166 90AF                        0B            .byte	$B
37167                                           ! 7725                             6,
37168 90B0                        06            .byte	6
37169                                           ! 7726                                  5,
37170 90B1                        05            .byte	5
37171                                           ! 7727                            5,
37172 90B2                        05            .byte	5
37173                                           ! 7728                                 0,
37174 90B3                        00            .byte	0
37175                                           ! 7729                            0,
37176 90B4                        00            .byte	0
37177                                           ! 7730                                 0,
37178 90B5                        00            .byte	0
37179                                           ! 7731                          0,
37180 90B6                      0000            .word	0
37181 90B8                      0000            .word	0
37182                                           ! 7732 } },
37183                                           ! 7733 { 0x0197,
37184 90BA                      0197            .word	$197
37185                                           ! 7734 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37186 90BC                      009B            .word	$9B
37187                                           ! 7735                           0x01 | 0x02 | 0x04,
37188 90BE                        07            .byte	7
37189                                           ! 7736                           0,
37190 90BF                        00            .byte	0
37191                                           ! 7737                           64,
37192 90C0                      0040            .word	$40
37193                                           ! 7738                    64,
37194 90C2                      0040            .word	$40
37195                                           ! 7739                        0xA000,
37196 90C4                      A000            .word	$A000
37197                                           ! 7740                        0x0000,
37198 90C6                      0000            .word	0
37199                                           ! 7741                       0,
37200 90C8                      0000            .word	0
37201 90CA                      0000            .word	0
37202                                           ! 7742                             1620,
37203 90CC                      0654            .word	$654
37204                                           ! 7743                        540,
37205 90CE                      021C            .word	$21C
37206                                           ! 7744                        960,
37207 90D0                      03C0            .word	$3C0
37208                                           ! 7745                      8,
37209 90D2                        08            .byte	8
37210                                           ! 7746                      16,
37211 90D3                        10            .byte	$10
37212                                           ! 7747                           1,
37213 90D4                        01            .byte	1
37214                                           ! 7748                         24,
37215 90D5                        18            .byte	$18
37216                                           ! 7749                          24,
37217 90D6                        18            .byte	$18
37218                                           ! 7750                        0x06,
37219 90D7                        06            .byte	6
37220                                           ! 7751                     0,
37221 90D8                        00            .byte	0
37222                                           ! 7752                               9,
37223 90D9                        09            .byte	9
37224                                           ! 7753                          0,
37225 90DA                        00            .byte	0
37226                                           ! 7754                        8,
37227 90DB                        08            .byte	8
37228                                           ! 7755                             16,
37229 90DC                        10            .byte	$10
37230                                           ! 7756                          8,
37231 90DD                        08            .byte	8
37232                                           ! 7757                               8,
37233 90DE                        08            .byte	8
37234                                           ! 7758                         8,
37235 90DF                        08            .byte	8
37236                                           ! 7759                              0,
37237 90E0                        00            .byte	0
37238                                           ! 7760                         0,
37239 90E1                        00            .byte	0
37240                                           ! 7761                              0,
37241 90E2                        00            .byte	0
37242                                           ! 7762                                0,
37243 90E3                        00            .byte	0
37244                                           ! 7763                        0xE0000000,
37245 90E4                      0000            .word	0
37246 90E6                      E000            .word	$E000
37247                                           ! 7764                               0,
37248 90E8                      0000            .word	0
37249 90EA                      0000            .word	0
37250                                           ! 7765                             0,
37251 90EC                      0000            .word	0
37252                                           ! 7766                                1620,
37253 90EE                      0654            .word	$654
37254                                           ! 7767                             0,
37255 90F0                        00            .byte	0
37256                                           ! 7768                             0,
37257 90F1                        00            .byte	0
37258                                           ! 7769                           8,
37259 90F2                        08            .byte	8
37260                                           ! 7770                                16,
37261 90F3                        10            .byte	$10
37262                                           ! 7771                             8,
37263 90F4                        08            .byte	8
37264                                           ! 7772                                  8,
37265 90F5                        08            .byte	8
37266                                           ! 7773                            8,
37267 90F6                        08            .byte	8
37268                                           ! 7774                                 0,
37269 90F7                        00            .byte	0
37270                                           ! 7775                            0,
37271 90F8                        00            .byte	0
37272                                           ! 7776                                 0,
37273 90F9                        00            .byte	0
37274                                           ! 7777                          0,
37275 90FA                      0000            .word	0
37276 90FC                      0000            .word	0
37277                                           ! 7778 } },
37278                                           ! 7779 { 0x0198,
37279 90FE                      0198            .word	$198
37280                                           ! 7780 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37281 9100                      009B            .word	$9B
37282                                           ! 7781                           0x01 | 0x02 | 0x04,
37283 9102                        07            .byte	7
37284                                           ! 7782                           0,
37285 9103                        00            .byte	0
37286                                           ! 7783                           64,
37287 9104                      0040            .word	$40
37288                                           ! 7784                    64,
37289 9106                      0040            .word	$40
37290                                           ! 7785    
37291                                           ! 7785                     0xA000,
37292 9108                      A000            .word	$A000
37293                                           ! 7786                        0x0000,
37294 910A                      0000            .word	0
37295                                           ! 7787                       0,
37296 910C                      0000            .word	0
37297 910E                      0000            .word	0
37298                                           ! 7788                             2160,
37299 9110                      0870            .word	$870
37300                                           ! 7789                        540,
37301 9112                      021C            .word	$21C
37302                                           ! 7790                        960,
37303 9114                      03C0            .word	$3C0
37304                                           ! 7791                      8,
37305 9116                        08            .byte	8
37306                                           ! 7792                      16,
37307 9117                        10            .byte	$10
37308                                           ! 7793                           1,
37309 9118                        01            .byte	1
37310                                           ! 7794                         32,
37311 9119                        20            .byte	$20
37312                                           ! 7795                          32,
37313 911A                        20            .byte	$20
37314                                           ! 7796                        0x06,
37315 911B                        06            .byte	6
37316                                           ! 7797                     0,
37317 911C                        00            .byte	0
37318                                           ! 7798                               7,
37319 911D                        07            .byte	7
37320                                           ! 7799                          0,
37321 911E                        00            .byte	0
37322                                           ! 7800                        8,
37323 911F                        08            .byte	8
37324                                           ! 7801                             16,
37325 9120                        10            .byte	$10
37326                                           ! 7802                          8,
37327 9121                        08            .byte	8
37328                                           ! 7803                               8,
37329 9122                        08            .byte	8
37330                                           ! 7804                         8,
37331 9123                        08            .byte	8
37332                                           ! 7805                              0,
37333 9124                        00            .byte	0
37334                                           ! 7806                         8,
37335 9125                        08            .byte	8
37336                                           ! 7807                              24,
37337 9126                        18            .byte	$18
37338                                           ! 7808                                0x02,
37339 9127                        02            .byte	2
37340                                           ! 7809                        0xE0000000,
37341 9128                      0000            .word	0
37342 912A                      E000            .word	$E000
37343                                           ! 7810                               0,
37344 912C                      0000            .word	0
37345 912E                      0000            .word	0
37346                                           ! 7811                             0,
37347 9130                      0000            .word	0
37348                                           ! 7812                                2160,
37349 9132                      0870            .word	$870
37350                                           ! 7813                             0,
37351 9134                        00            .byte	0
37352                                           ! 7814                             0,
37353 9135                        00            .byte	0
37354                                           ! 7815                           8,
37355 9136                        08            .byte	8
37356                                           ! 7816                                16,
37357 9137                        10            .byte	$10
37358                                           ! 7817                             8,
37359 9138                        08            .byte	8
37360                                           ! 7818                                  8,
37361 9139                        08            .byte	8
37362                                           ! 7819                            8,
37363 913A                        08            .byte	8
37364                                           ! 7820                                 0,
37365 913B                        00            .byte	0
37366                                           ! 7821                            8,
37367 913C                        08            .byte	8
37368                                           ! 7822                                 24,
37369 913D                        18            .byte	$18
37370                                           ! 7823                          0,
37371 913E                      0000            .word	0
37372 9140                      0000            .word	0
37373                                           ! 7824 } },
37374                                           ! 7825 { 0x0199,
37375 9142                      0199            .word	$199
37376                                           ! 7826 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37377 9144                      009B            .word	$9B
37378                                           ! 7827                           0x01 | 0x02 | 0x04,
37379 9146                        07            .byte	7
37380                                           ! 7828                           0,
37381 9147                        00            .byte	0
37382                                           ! 7829                           64,
37383 9148                      0040            .word	$40
37384                                           ! 7830                    64,
37385 914A                      0040            .word	$40
37386                                           ! 7831                        0xA000,
37387 914C                      A000            .word	$A000
37388                                           ! 7832                        0x0000,
37389 914E                      0000            .word	0
37390                                           ! 7833                       0,
37391 9150                      0000            .word	0
37392 9152                      0000            .word	0
37393                                           ! 7834                             1440,
37394 9154                      05A0            .word	$5A0
37395                                           ! 7835                        720,
37396 9156                      02D0            .word	$2D0
37397                                           ! 7836                        1280,
37398 9158                      0500            .word	$500
37399                                           ! 7837                      8,
37400 915A                        08            .byte	8
37401                                           ! 7838                      16,
37402 915B                        10            .byte	$10
37403                                           ! 7839                           1,
37404 915C                        01            .byte	1
37405                                           ! 7840                         16,
37406 915D                        10            .byte	$10
37407                                           ! 7841                          29,
37408 915E                        1D            .byte	$1D
37409                                           ! 7842                        0x06,
37410 915F                        06            .byte	6
37411                                           ! 7843                     0,
37412 9160                        00            .byte	0
37413                                           ! 7844                               8,
37414 9161                        08            .byte	8
37415                                           ! 7845                          0,
37416 9162                        00            .byte	0
37417                                           ! 7846                        5,
37418 9163                        05            .byte	5
37419                                           ! 7847                             11,
37420 9164                        0B            .byte	$B
37421                                           ! 7848                          6,
37422 9165                        06            .byte	6
37423                                           ! 7849                               5,
37424 9166                        05            .byte	5
37425                                           ! 7850                         5,
37426 9167                        05            .byte	5
37427                                           ! 7851                              0,
37428 9168                        00            .byte	0
37429                                           ! 7852                         0,
37430 9169                        00            .byte	0
37431                                           ! 7853                              0,
37432 916A                        00            .byte	0
37433                                           ! 7854            
37434                                           ! 7854                     0,
37435 916B                        00            .byte	0
37436                                           ! 7855                        0xE0000000,
37437 916C                      0000            .word	0
37438 916E                      E000            .word	$E000
37439                                           ! 7856                               0,
37440 9170                      0000            .word	0
37441 9172                      0000            .word	0
37442                                           ! 7857                             0,
37443 9174                      0000            .word	0
37444                                           ! 7858                                1440,
37445 9176                      05A0            .word	$5A0
37446                                           ! 7859                             0,
37447 9178                        00            .byte	0
37448                                           ! 7860                             0,
37449 9179                        00            .byte	0
37450                                           ! 7861                           5,
37451 917A                        05            .byte	5
37452                                           ! 7862                                11,
37453 917B                        0B            .byte	$B
37454                                           ! 7863                             6,
37455 917C                        06            .byte	6
37456                                           ! 7864                                  5,
37457 917D                        05            .byte	5
37458                                           ! 7865                            5,
37459 917E                        05            .byte	5
37460                                           ! 7866                                 0,
37461 917F                        00            .byte	0
37462                                           ! 7867                            0,
37463 9180                        00            .byte	0
37464                                           ! 7868                                 0,
37465 9181                        00            .byte	0
37466                                           ! 7869                          0,
37467 9182                      0000            .word	0
37468 9184                      0000            .word	0
37469                                           ! 7870 } },
37470                                           ! 7871 { 0x019a,
37471 9186                      019A            .word	$19A
37472                                           ! 7872 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37473 9188                      009B            .word	$9B
37474                                           ! 7873                           0x01 | 0x02 | 0x04,
37475 918A                        07            .byte	7
37476                                           ! 7874                           0,
37477 918B                        00            .byte	0
37478                                           ! 7875                           64,
37479 918C                      0040            .word	$40
37480                                           ! 7876                    64,
37481 918E                      0040            .word	$40
37482                                           ! 7877                        0xA000,
37483 9190                      A000            .word	$A000
37484                                           ! 7878                        0x0000,
37485 9192                      0000            .word	0
37486                                           ! 7879                       0,
37487 9194                      0000            .word	0
37488 9196                      0000            .word	0
37489                                           ! 7880                             2160,
37490 9198                      0870            .word	$870
37491                                           ! 7881                        720,
37492 919A                      02D0            .word	$2D0
37493                                           ! 7882                        1280,
37494 919C                      0500            .word	$500
37495                                           ! 7883                      8,
37496 919E                        08            .byte	8
37497                                           ! 7884                      16,
37498 919F                        10            .byte	$10
37499                                           ! 7885                           1,
37500 91A0                        01            .byte	1
37501                                           ! 7886                         24,
37502 91A1                        18            .byte	$18
37503                                           ! 7887                          43,
37504 91A2                        2B            .byte	$2B
37505                                           ! 7888                        0x06,
37506 91A3                        06            .byte	6
37507                                           ! 7889                     0,
37508 91A4                        00            .byte	0
37509                                           ! 7890                               5,
37510 91A5                        05            .byte	5
37511                                           ! 7891                          0,
37512 91A6                        00            .byte	0
37513                                           ! 7892                        8,
37514 91A7                        08            .byte	8
37515                                           ! 7893                             16,
37516 91A8                        10            .byte	$10
37517                                           ! 7894                          8,
37518 91A9                        08            .byte	8
37519                                           ! 7895                               8,
37520 91AA                        08            .byte	8
37521                                           ! 7896                         8,
37522 91AB                        08            .byte	8
37523                                           ! 7897                              0,
37524 91AC                        00            .byte	0
37525                                           ! 7898                         0,
37526 91AD                        00            .byte	0
37527                                           ! 7899                              0,
37528 91AE                        00            .byte	0
37529                                           ! 7900                                0,
37530 91AF                        00            .byte	0
37531                                           ! 7901                        0xE0000000,
37532 91B0                      0000            .word	0
37533 91B2                      E000            .word	$E000
37534                                           ! 7902                               0,
37535 91B4                      0000            .word	0
37536 91B6                      0000            .word	0
37537                                           ! 7903                             0,
37538 91B8                      0000            .word	0
37539                                           ! 7904                                2160,
37540 91BA                      0870            .word	$870
37541                                           ! 7905                             0,
37542 91BC                        00            .byte	0
37543                                           ! 7906                             0,
37544 91BD                        00            .byte	0
37545                                           ! 7907                           8,
37546 91BE                        08            .byte	8
37547                                           ! 7908                                16,
37548 91BF                        10            .byte	$10
37549                                           ! 7909                             8,
37550 91C0                        08            .byte	8
37551                                           ! 7910                                  8,
37552 91C1                        08            .byte	8
37553                                           ! 7911                            8,
37554 91C2                        08            .byte	8
37555                                           ! 7912                                 0,
37556 91C3                        00            .byte	0
37557                                           ! 7913                            0,
37558 91C4                        00            .byte	0
37559                                           ! 7914                                 0,
37560 91C5                        00            .byte	0
37561                                           ! 7915                          0,
37562 91C6                      0000            .word	0
37563 91C8                      0000            .word	0
37564                                           ! 7916 } },
37565                                           ! 7917 { 0x019b,
37566 91CA                      019B            .word	$19B
37567                                           ! 7918 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37568 91CC                      009B            .word	$9B
37569                                           ! 7919                           0x01 | 0x02 | 0x04,
37570 91CE                        07            .byte	7
37571                                           ! 7920                           0,
37572 91CF                        00            .byte	0
37573                                           ! 7921                           64,
37574                                           ! 7921 
37575 91D0                      0040            .word	$40
37576                                           ! 7922                    64,
37577 91D2                      0040            .word	$40
37578                                           ! 7923                        0xA000,
37579 91D4                      A000            .word	$A000
37580                                           ! 7924                        0x0000,
37581 91D6                      0000            .word	0
37582                                           ! 7925                       0,
37583 91D8                      0000            .word	0
37584 91DA                      0000            .word	0
37585                                           ! 7926                             2880,
37586 91DC                      0B40            .word	$B40
37587                                           ! 7927                        720,
37588 91DE                      02D0            .word	$2D0
37589                                           ! 7928                        1280,
37590 91E0                      0500            .word	$500
37591                                           ! 7929                      8,
37592 91E2                        08            .byte	8
37593                                           ! 7930                      16,
37594 91E3                        10            .byte	$10
37595                                           ! 7931                           1,
37596 91E4                        01            .byte	1
37597                                           ! 7932                         32,
37598 91E5                        20            .byte	$20
37599                                           ! 7933                          57,
37600 91E6                        39            .byte	$39
37601                                           ! 7934                        0x06,
37602 91E7                        06            .byte	6
37603                                           ! 7935                     0,
37604 91E8                        00            .byte	0
37605                                           ! 7936                               3,
37606 91E9                        03            .byte	3
37607                                           ! 7937                          0,
37608 91EA                        00            .byte	0
37609                                           ! 7938                        8,
37610 91EB                        08            .byte	8
37611                                           ! 7939                             16,
37612 91EC                        10            .byte	$10
37613                                           ! 7940                          8,
37614 91ED                        08            .byte	8
37615                                           ! 7941                               8,
37616 91EE                        08            .byte	8
37617                                           ! 7942                         8,
37618 91EF                        08            .byte	8
37619                                           ! 7943                              0,
37620 91F0                        00            .byte	0
37621                                           ! 7944                         8,
37622 91F1                        08            .byte	8
37623                                           ! 7945                              24,
37624 91F2                        18            .byte	$18
37625                                           ! 7946                                0x02,
37626 91F3                        02            .byte	2
37627                                           ! 7947                        0xE0000000,
37628 91F4                      0000            .word	0
37629 91F6                      E000            .word	$E000
37630                                           ! 7948                               0,
37631 91F8                      0000            .word	0
37632 91FA                      0000            .word	0
37633                                           ! 7949                             0,
37634 91FC                      0000            .word	0
37635                                           ! 7950                                2880,
37636 91FE                      0B40            .word	$B40
37637                                           ! 7951                             0,
37638 9200                        00            .byte	0
37639                                           ! 7952                             0,
37640 9201                        00            .byte	0
37641                                           ! 7953                           8,
37642 9202                        08            .byte	8
37643                                           ! 7954                                16,
37644 9203                        10            .byte	$10
37645                                           ! 7955                             8,
37646 9204                        08            .byte	8
37647                                           ! 7956                                  8,
37648 9205                        08            .byte	8
37649                                           ! 7957                            8,
37650 9206                        08            .byte	8
37651                                           ! 7958                                 0,
37652 9207                        00            .byte	0
37653                                           ! 7959                            8,
37654 9208                        08            .byte	8
37655                                           ! 7960                                 24,
37656 9209                        18            .byte	$18
37657                                           ! 7961                          0,
37658 920A                      0000            .word	0
37659 920C                      0000            .word	0
37660                                           ! 7962 } },
37661                                           ! 7963 { 0x019c,
37662 920E                      019C            .word	$19C
37663                                           ! 7964 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37664 9210                      009B            .word	$9B
37665                                           ! 7965                           0x01 | 0x02 | 0x04,
37666 9212                        07            .byte	7
37667                                           ! 7966                           0,
37668 9213                        00            .byte	0
37669                                           ! 7967                           64,
37670 9214                      0040            .word	$40
37671                                           ! 7968                    64,
37672 9216                      0040            .word	$40
37673                                           ! 7969                        0xA000,
37674 9218                      A000            .word	$A000
37675                                           ! 7970                        0x0000,
37676 921A                      0000            .word	0
37677                                           ! 7971                       0,
37678 921C                      0000            .word	0
37679 921E                      0000            .word	0
37680                                           ! 7972                             1600,
37681 9220                      0640            .word	$640
37682                                           ! 7973                        800,
37683 9222                      0320            .word	$320
37684                                           ! 7974                        1280,
37685 9224                      0500            .word	$500
37686                                           ! 7975                      8,
37687 9226                        08            .byte	8
37688                                           ! 7976                      16,
37689 9227                        10            .byte	$10
37690                                           ! 7977                           1,
37691 9228                        01            .byte	1
37692                                           ! 7978                         16,
37693 9229                        10            .byte	$10
37694                                           ! 7979                          32,
37695 922A                        20            .byte	$20
37696                                           ! 7980                        0x06,
37697 922B                        06            .byte	6
37698                                           ! 7981                     0,
37699 922C                        00            .byte	0
37700                                           ! 7982                               7,
37701 922D                        07            .byte	7
37702                                           ! 7983                          0,
37703 922E                        00            .byte	0
37704                                           ! 7984                        5,
37705 922F                        05            .byte	5
37706                                           ! 7985                             11,
37707 9230                        0B            .byte	$B
37708                                           ! 7986                          6,
37709 9231                        06            .byte	6
37710                                           ! 7987                               5,
37711 9232                        05            .byte	5
37712                                           ! 7988                         5,
37713 9233                        05            .byte	5
37714                                           ! 7989                              0,
37715 9234                        00            .byte	0
37716                                           ! 7990                         0,
37717 9235                        00            .byte	0
37718                                           ! 7991                
37719                                           ! 7991               0,
37720 9236                        00            .byte	0
37721                                           ! 7992                                0,
37722 9237                        00            .byte	0
37723                                           ! 7993                        0xE0000000,
37724 9238                      0000            .word	0
37725 923A                      E000            .word	$E000
37726                                           ! 7994                               0,
37727 923C                      0000            .word	0
37728 923E                      0000            .word	0
37729                                           ! 7995                             0,
37730 9240                      0000            .word	0
37731                                           ! 7996                                1600,
37732 9242                      0640            .word	$640
37733                                           ! 7997                             0,
37734 9244                        00            .byte	0
37735                                           ! 7998                             0,
37736 9245                        00            .byte	0
37737                                           ! 7999                           5,
37738 9246                        05            .byte	5
37739                                           ! 8000                                11,
37740 9247                        0B            .byte	$B
37741                                           ! 8001                             6,
37742 9248                        06            .byte	6
37743                                           ! 8002                                  5,
37744 9249                        05            .byte	5
37745                                           ! 8003                            5,
37746 924A                        05            .byte	5
37747                                           ! 8004                                 0,
37748 924B                        00            .byte	0
37749                                           ! 8005                            0,
37750 924C                        00            .byte	0
37751                                           ! 8006                                 0,
37752 924D                        00            .byte	0
37753                                           ! 8007                          0,
37754 924E                      0000            .word	0
37755 9250                      0000            .word	0
37756                                           ! 8008 } },
37757                                           ! 8009 { 0x019d,
37758 9252                      019D            .word	$19D
37759                                           ! 8010 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37760 9254                      009B            .word	$9B
37761                                           ! 8011                           0x01 | 0x02 | 0x04,
37762 9256                        07            .byte	7
37763                                           ! 8012                           0,
37764 9257                        00            .byte	0
37765                                           ! 8013                           64,
37766 9258                      0040            .word	$40
37767                                           ! 8014                    64,
37768 925A                      0040            .word	$40
37769                                           ! 8015                        0xA000,
37770 925C                      A000            .word	$A000
37771                                           ! 8016                        0x0000,
37772 925E                      0000            .word	0
37773                                           ! 8017                       0,
37774 9260                      0000            .word	0
37775 9262                      0000            .word	0
37776                                           ! 8018                             2400,
37777 9264                      0960            .word	$960
37778                                           ! 8019                        800,
37779 9266                      0320            .word	$320
37780                                           ! 8020                        1280,
37781 9268                      0500            .word	$500
37782                                           ! 8021                      8,
37783 926A                        08            .byte	8
37784                                           ! 8022                      16,
37785 926B                        10            .byte	$10
37786                                           ! 8023                           1,
37787 926C                        01            .byte	1
37788                                           ! 8024                         24,
37789 926D                        18            .byte	$18
37790                                           ! 8025                          47,
37791 926E                        2F            .byte	$2F
37792                                           ! 8026                        0x06,
37793 926F                        06            .byte	6
37794                                           ! 8027                     0,
37795 9270                        00            .byte	0
37796                                           ! 8028                               4,
37797 9271                        04            .byte	4
37798                                           ! 8029                          0,
37799 9272                        00            .byte	0
37800                                           ! 8030                        8,
37801 9273                        08            .byte	8
37802                                           ! 8031                             16,
37803 9274                        10            .byte	$10
37804                                           ! 8032                          8,
37805 9275                        08            .byte	8
37806                                           ! 8033                               8,
37807 9276                        08            .byte	8
37808                                           ! 8034                         8,
37809 9277                        08            .byte	8
37810                                           ! 8035                              0,
37811 9278                        00            .byte	0
37812                                           ! 8036                         0,
37813 9279                        00            .byte	0
37814                                           ! 8037                              0,
37815 927A                        00            .byte	0
37816                                           ! 8038                                0,
37817 927B                        00            .byte	0
37818                                           ! 8039                        0xE0000000,
37819 927C                      0000            .word	0
37820 927E                      E000            .word	$E000
37821                                           ! 8040                               0,
37822 9280                      0000            .word	0
37823 9282                      0000            .word	0
37824                                           ! 8041                             0,
37825 9284                      0000            .word	0
37826                                           ! 8042                                2400,
37827 9286                      0960            .word	$960
37828                                           ! 8043                             0,
37829 9288                        00            .byte	0
37830                                           ! 8044                             0,
37831 9289                        00            .byte	0
37832                                           ! 8045                           8,
37833 928A                        08            .byte	8
37834                                           ! 8046                                16,
37835 928B                        10            .byte	$10
37836                                           ! 8047                             8,
37837 928C                        08            .byte	8
37838                                           ! 8048                                  8,
37839 928D                        08            .byte	8
37840                                           ! 8049                            8,
37841 928E                        08            .byte	8
37842                                           ! 8050                                 0,
37843 928F                        00            .byte	0
37844                                           ! 8051                            0,
37845 9290                        00            .byte	0
37846                                           ! 8052                                 0,
37847 9291                        00            .byte	0
37848                                           ! 8053                          0,
37849 9292                      0000            .word	0
37850 9294                      0000            .word	0
37851                                           ! 8054 } },
37852                                           ! 8055 { 0x019e,
37853 9296                      019E            .word	$19E
37854                                           ! 8056 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37855 9298                      009B            .word	$9B
37856                                           ! 8057                           0x01 | 0x02 | 0x04,
37857 929A                        07            .byte	7
37858                                           ! 8058                           0,
37859 929B                        00            .byte	0
37860                                           ! 8059  
37861                                           ! 8059                          64,
37862 929C                      0040            .word	$40
37863                                           ! 8060                    64,
37864 929E                      0040            .word	$40
37865                                           ! 8061                        0xA000,
37866 92A0                      A000            .word	$A000
37867                                           ! 8062                        0x0000,
37868 92A2                      0000            .word	0
37869                                           ! 8063                       0,
37870 92A4                      0000            .word	0
37871 92A6                      0000            .word	0
37872                                           ! 8064                             3200,
37873 92A8                      0C80            .word	$C80
37874                                           ! 8065                        800,
37875 92AA                      0320            .word	$320
37876                                           ! 8066                        1280,
37877 92AC                      0500            .word	$500
37878                                           ! 8067                      8,
37879 92AE                        08            .byte	8
37880                                           ! 8068                      16,
37881 92AF                        10            .byte	$10
37882                                           ! 8069                           1,
37883 92B0                        01            .byte	1
37884                                           ! 8070                         32,
37885 92B1                        20            .byte	$20
37886                                           ! 8071                          63,
37887 92B2                        3F            .byte	$3F
37888                                           ! 8072                        0x06,
37889 92B3                        06            .byte	6
37890                                           ! 8073                     0,
37891 92B4                        00            .byte	0
37892                                           ! 8074                               3,
37893 92B5                        03            .byte	3
37894                                           ! 8075                          0,
37895 92B6                        00            .byte	0
37896                                           ! 8076                        8,
37897 92B7                        08            .byte	8
37898                                           ! 8077                             16,
37899 92B8                        10            .byte	$10
37900                                           ! 8078                          8,
37901 92B9                        08            .byte	8
37902                                           ! 8079                               8,
37903 92BA                        08            .byte	8
37904                                           ! 8080                         8,
37905 92BB                        08            .byte	8
37906                                           ! 8081                              0,
37907 92BC                        00            .byte	0
37908                                           ! 8082                         8,
37909 92BD                        08            .byte	8
37910                                           ! 8083                              24,
37911 92BE                        18            .byte	$18
37912                                           ! 8084                                0x02,
37913 92BF                        02            .byte	2
37914                                           ! 8085                        0xE0000000,
37915 92C0                      0000            .word	0
37916 92C2                      E000            .word	$E000
37917                                           ! 8086                               0,
37918 92C4                      0000            .word	0
37919 92C6                      0000            .word	0
37920                                           ! 8087                             0,
37921 92C8                      0000            .word	0
37922                                           ! 8088                                3200,
37923 92CA                      0C80            .word	$C80
37924                                           ! 8089                             0,
37925 92CC                        00            .byte	0
37926                                           ! 8090                             0,
37927 92CD                        00            .byte	0
37928                                           ! 8091                           8,
37929 92CE                        08            .byte	8
37930                                           ! 8092                                16,
37931 92CF                        10            .byte	$10
37932                                           ! 8093                             8,
37933 92D0                        08            .byte	8
37934                                           ! 8094                                  8,
37935 92D1                        08            .byte	8
37936                                           ! 8095                            8,
37937 92D2                        08            .byte	8
37938                                           ! 8096                                 0,
37939 92D3                        00            .byte	0
37940                                           ! 8097                            8,
37941 92D4                        08            .byte	8
37942                                           ! 8098                                 24,
37943 92D5                        18            .byte	$18
37944                                           ! 8099                          0,
37945 92D6                      0000            .word	0
37946 92D8                      0000            .word	0
37947                                           ! 8100 } },
37948                                           ! 8101 { 0xFFFF,
37949 92DA                      FFFF            .word	$FFFF
37950                                           ! 8102 { 0,
37951 92DC                      0000            .word	0
37952                                           ! 8103 } },
37953 92DE                  00000040            .blkb	$40
37954                                           ! 8104 };
37955                                           !BCC_EOS
37956                                           ! 8105 extern char vbebios_copyright;
37957                                           !BCC_EOS
37958                                           ! 8106 extern char vbebios_vendor_name;
37959                                           !BCC_EOS
37960                                           ! 8107 extern char vbebios_product_name;
37961                                           !BCC_EOS
37962                                           ! 8108 extern char vbebios_product_revision;
37963                                           !BCC_EOS
37964                                           ! 8109 #asm
37965                                           !BCC_ASM
37966                       0000931E            _vbebios_copyright:
37967 931E                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
37968 9363                        00            .byte 0x00
37969                       00009364            _vbebios_vendor_name:
37970 9364                        42            .ascii "Bochs/Plex86 Developers"
37971 937B                        00            .byte 0x00
37972                       0000937C            _vbebios_product_name:
37973 937C                        42            .ascii "Bochs/Plex86 VBE Adapter"
37974 9394                        00            .byte 0x00
37975                       00009395            _vbebios_product_revision:
37976 9395                        24            .ascii "$Id$"
37977 9399                        00            .byte 0x00
37978                       0000939A            _vbebios_info_string:
37979 939A                        42            .ascii "Bochs VBE Display Adapter enabled"
37980 93BB                        0A            .byte 0x0a,0x0d
37981 93BD                        0A            .byte 0x0a,0x0d
37982 93BF                        00            .byte 0x00
37983                       000093C0            _no_vbebios_info_string:
37984 93C0                        4E            .ascii "NO Bochs VBE Support available!"
37985 93DF                        0A            .byte 0x0a,0x0d
37986 93E1                        0A            .byte 0x0a,0x0d
37987 93E3                        00            .byte 0x00
37988                       000093E4            msg_vbe_init:
37989 93E4                        56            .ascii "VBE Bios $Id$"
37990 93F1                        0A            .byte 0x0a,0x0d, 0x00
37991 93F4                  00000002              .align 2
37992                       000093F4            vesa_pm_start:
37993 93F4                      0014              dw vesa_pm_set_window - vesa_pm_start
37994 93F6                      004B              dw vesa_pm_set_display_start - vesa_pm_start
37995 93F8                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
37996 93FA                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
37997                       000093FC            vesa_pm_io_ports_table:
37998 93FC                      01CE              dw 0x01CE
37999 93FE                      01CF              dw 0x01CE + 1
38000 9400                      01CF              dw 0x01CF
38001 9402                      01D0              dw 0x01CF + 1
38002 9404                      FFFF              dw 0xffff
38003 9406                      FFFF              dw 0xffff
38004                                             USE32
38005                       00009408            vesa_pm_set_window:
38006 9408     66    83FB                   00    cmp bx, #0x00
38007 940C           74           05              je vesa_pm_set_display_window1
38008 940E     66    B8                   0100    mov ax, #0x0100
38009 9412           C3                           ret
38010                       00009413            vesa_pm_set_display_window1:
38011 9413     66    89D0                         mov ax, dx
38012 9416     66    52                           push dx
38013 9418     66    50                           push ax
38014 941A     66    BA                   01CE    mov dx, # 0x01CE
38015 941E     66    B8                   0005    mov ax, # 0x5
38016 9422     66    EF                           out dx, ax
38017 9424     66    58                           pop ax
38018 9426     66    BA                   01CF    mov dx, # 0x01CF
38019 942A     66    EF                           out dx, ax
38020 942C     66    ED                           in ax, dx
38021 942E     66    5A                           pop dx
38022 9430     66    39C2                         cmp dx, ax
38023 9433           75           05              jne illegal_window
38024 9435     66    B8                   004F    mov ax, #0x004f
38025 9439           C3                           ret
38026                       0000943A            illegal_window:
38027 943A     66    B8                   014F    mov ax, #0x014f
38028 943E           C3                           ret
38029                       0000943F            vesa_pm_set_display_start:
38030 943F           80FB                   80    cmp bl, #0x80
38031 9442           74           0A              je vesa_pm_set_display_start1
38032 9444           80FB                   00    cmp bl, #0x00
38033 9447           74           05              je vesa_pm_set_display_start1
38034 9449     66    B8                   0100    mov ax, #0x0100
38035 944D           C3                           ret
38036                       0000944E            vesa_pm_set_display_start1:
38037                                           ; convert offset to (X, Y) coordinate
38038                                           ; (would be simpler to change Bochs 1 API...)
38039 944E           50                           push eax
38040 944F           51                           push ecx
38041 9450           52                           push edx
38042 9451           56                           push esi
38043 9452           57                           push edi
38044 9453           C1E2                   10    shl edx, #16
38045 9456           81E1             0000FFFF    and ecx, #0xffff
38046 945C           09D1                         or ecx, edx
38047 945E           C1E1                   02    shl ecx, #2
38048 9461           89C8                         mov eax, ecx
38049 9463           50                           push eax
38050 9464     66    BA                   01CE    mov dx, # 0x01CE
38051 9468     66    B8                   0006    mov ax, # 0x6
38052 946C     66    EF                           out dx, ax
38053 946E     66    BA                   01CF    mov dx, # 0x01CF
38054 9472     66    ED                           in ax, dx
38055 9474         0FB7C8                         movzx ecx, ax
38056 9477     66    BA                   01CE    mov dx, # 0x01CE
38057 947B     66    B8                   0003    mov ax, # 0x3
38058 947F     66    EF                           out dx, ax
38059 9481     66    BA                   01CF    mov dx, # 0x01CF
38060 9485     66    ED                           in ax, dx
38061 9487         0FB7F0                         movzx esi, ax
38062 948A           58                           pop eax
38063 948B           83FE                   04    cmp esi, #4
38064 948E           74           17              jz bpp4_mode
38065 9490           83C6                   07    add esi, #7
38066 9493           C1EE                   03    shr esi, #3
38067 9496         0FAFCE                         imul ecx, esi
38068 9499           31D2                         xor edx, edx
38069 949B           F7F1                         div ecx
38070 949D           89C7                         mov edi, eax
38071 949F           89D0                         mov eax, edx
38072 94A1           31D2                         xor edx, edx
38073 94A3           F7F6                         div esi
38074 94A5           EB           0C              jmp set_xy_regs
38075                       000094A7            bpp4_mode:
38076 94A7           D1E9                         shr ecx, #1
38077 94A9           31D2                         xor edx, edx
38078 94AB           F7F1                         div ecx
38079 94AD           89C7                         mov edi, eax
38080 94AF           89D0                         mov eax, edx
38081 94B1           D1E0                         shl eax, #1
38082                       000094B3            set_xy_regs:
38083 94B3     66    52                           push dx
38084 94B5     66    50                           push ax
38085 94B7     66    BA                   01CE    mov dx, # 0x01CE
38086 94BB     66    B8                   0008    mov ax, # 0x8
38087 94BF     66    EF                           out dx, ax
38088 94C1     66    58                           pop ax
38089 94C3     66    BA                   01CF    mov dx, # 0x01CF
38090 94C7     66    EF                           out dx, ax
38091 94C9     66    5A                           pop dx
38092 94CB     66    89F8                         mov ax, di
38093 94CE     66    52                           push dx
38094 94D0     66    50                           push ax
38095 94D2     66    BA                   01CE    mov dx, # 0x01CE
38096 94D6     66    B8                   0009    mov ax, # 0x9
38097 94DA     66    EF                           out dx, ax
38098 94DC     66    58                           pop ax
38099 94DE     66    BA                   01CF    mov dx, # 0x01CF
38100 94E2     66    EF                           out dx, ax
38101 94E4     66    5A                           pop dx
38102 94E6           5F                           pop edi
38103 94E7           5E                           pop esi
38104 94E8           5A                           pop edx
38105 94E9           59                           pop ecx
38106 94EA           58                           pop eax
38107 94EB     66    B8                   004F    mov ax, #0x004f
38108 94EF           C3                           ret
38109                       000094F0            vesa_pm_unimplemented:
38110 94F0     66    B8                   014F    mov ax, #0x014f
38111 94F4           C3                           ret
38112                                             USE16
38113                       000094F5            vesa_pm_end:
38114                                           ; DISPI ioport functions
38115                       000094F5            dispi_get_id:
38116 94F5           52                           push dx
38117 94F6           BA                   01CE    mov dx, # 0x01CE
38118 94F9           B8                   0000    mov ax, # 0x0
38119 94FC           EF                           out dx, ax
38120 94FD           BA                   01CF    mov dx, # 0x01CF
38121 9500           ED                           in ax, dx
38122 9501           5A                           pop dx
38123 9502           C3                           ret
38124                       00009503            dispi_set_id:
38125 9503           52                           push dx
38126 9504           50                           push ax
38127 9505           BA                   01CE    mov dx, # 0x01CE
38128 9508           B8                   0000    mov ax, # 0x0
38129 950B           EF                           out dx, ax
38130 950C           58                           pop ax
38131 950D           BA                   01CF    mov dx, # 0x01CF
38132 9510           EF                           out dx, ax
38133 9511           5A                           pop dx
38134 9512           C3                           ret
38135                                           ! 8279 endasm
38136                                           !BCC_ENDASM
38137                                           ! 8280 static void dispi_set_xres(xres)
38138                                           ! 8281   Bit16u xres;
38139                                           
38140                       00009513            _dispi_set_xres:
38141                                           !BCC_EOS
38142                                           ! 8282 {
38143                                           ! 8283 #asm
38144                                           !BCC_ASM
38145                       00000002            _dispi_set_xres.xres	set	2
38146 9513           55                           push bp
38147 9514           89E5                         mov bp, sp
38148 9516           50                           push ax
38149 9517           52                           push dx
38150 9518           BA                   01CE    mov dx, # 0x01CE
38151 951B           B8                   0001    mov ax, # 0x1
38152 951E           EF                           out dx, ax
38153 951F           BA                   01CF    mov dx, # 0x01CF
38154 9522           8B46         04              mov ax, 4[bp] ; xres
38155 9525           EF                           out dx, ax
38156 9526           5A                           pop dx
38157 9527           58                           pop ax
38158 9528           5D                           pop bp
38159                                           ! 8297 endasm
38160                                           !BCC_ENDASM
38161                                           ! 8298 }
38162 9529           C3                         ret
38163                                           ! 8299 static void dispi_set_yres(yres)
38164                                           ! 8300   Bit16u yres;
38165                       0000952A            _dispi_set_yres:
38166                                           !BCC_EOS
38167                                           ! 8301 {
38168                                           ! 8302   outw(0x01CE,0x2);
38169 952A           55                         push	bp
38170 952B           89E5                       mov	bp,sp
38171                                           ! Debug: list int = const 2 (used reg = )
38172 952D           B8                   0002  mov	ax,*2
38173 9530           50                         push	ax
38174                                           ! Debug: list int = const $1CE (used reg = )
38175 9531           B8                   01CE  mov	ax,#$1CE
38176 9534           50                         push	ax
38177                                           ! Debug: func () void = outw+0 (used reg = )
38178 9535           E8         E6F2            call	_outw
38179 9538           89EC                       mov	sp,bp
38180                                           !BCC_EOS
38181                                           ! 8303   outw(0x01CF,yres);
38182                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38183 953A           FF76         04            push	4[bp]
38184                                           ! Debug: list int = const $1CF (used reg = )
38185 953D           B8                   01CF  mov	ax,#$1CF
38186 9540           50                         push	ax
38187                                           ! Debug: func () void = outw+0 (used reg = )
38188 9541           E8         E6E6            call	_outw
38189 9544           89EC                       mov	sp,bp
38190                                           !BCC_EOS
38191                                           ! 8304 }
38192 9546           5D                         pop	bp
38193 9547           C3                         ret
38194                                           ! 8305 static void dispi_set_bpp(bpp)
38195                                           ! 8306   Bit16u bpp;
38196                       00009548            _dispi_set_bpp:
38197                                           !BCC_EOS
38198                                           ! 8307 {
38199                                           ! 8308   outw(0x01CE,0x3);
38200 9548           55                         push	bp
38201 9549           89E5                       mov	bp,sp
38202                                           ! Debug: list int = const 3 (used reg = )
38203 954B           B8                   0003  mov	ax,*3
38204 954E           50                         push	ax
38205                                           ! Debug: list int = const $1CE (used reg = )
38206 954F           B8                   01CE  mov	ax,#$1CE
38207 9552           50                         push	ax
38208                                           ! Debug: func () void = outw+0 (used reg = )
38209 9553           E8         E6D4            call	_outw
38210 9556           89EC                       mov	sp,bp
38211                                           !BCC_EOS
38212                                           ! 8309   outw(0x01CF,bpp);
38213                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38214 9558           FF76         04            push	4[bp]
38215                                           ! Debug: list int = const $1CF (used reg = )
38216 955B           B8                   01CF  mov	ax,#$1CF
38217 955E           50                         push	ax
38218                                           ! Debug: func () void = outw+0 (used reg = )
38219 955F           E8         E6C8            call	_outw
38220 9562           89EC                       mov	sp,bp
38221                                           !BCC_EOS
38222                                           ! 8310 }
38223 9564           5D                         pop	bp
38224 9565           C3                         ret
38225                                           ! 8311 #asm
38226                                           !BCC_ASM
38227                       00000002            _dispi_set_bpp.bpp	set	2
38228                                           ; AL = bits per pixel / AH = bytes per pixel
38229                       00009566            dispi_get_bpp:
38230 9566           52                           push dx
38231 9567           BA                   01CE    mov dx, # 0x01CE
38232 956A           B8                   0003    mov ax, # 0x3
38233 956D           EF                           out dx, ax
38234 956E           BA                   01CF    mov dx, # 0x01CF
38235 9571           ED                           in ax, dx
38236 9572           88C4                         mov ah, al
38237 9574           C0EC                   03    shr ah, 3
38238 9577           A8                     07    test al, #0x07
38239 9579           74           02              jz get_bpp_noinc
38240 957B           FEC4                         inc ah
38241                       0000957D            get_bpp_noinc:
38242 957D           5A                           pop dx
38243 957E           C3                           ret
38244                                           ; get display capabilities
38245                       0000957F            _dispi_get_max_xres:
38246 957F           52                           push dx
38247 9580           53                           push bx
38248 9581           E8         004F              call dispi_get_enable
38249 9584           89C3                         mov bx, ax
38250 9586           0D                   0002    or ax, # 0x02
38251 9589           E8         0037              call _dispi_set_enable
38252 958C           BA                   01CE    mov dx, # 0x01CE
38253 958F           B8                   0001    mov ax, # 0x1
38254 9592           EF                           out dx, ax
38255 9593           BA                   01CF    mov dx, # 0x01CF
38256 9596           ED                           in ax, dx
38257 9597           50                           push ax
38258 9598           89D8                         mov ax, bx
38259 959A           E8         0026              call _dispi_set_enable
38260 959D           58                           pop ax
38261 959E           5B                           pop bx
38262 959F           5A                           pop dx
38263 95A0           C3                           ret
38264                       000095A1            _dispi_get_max_bpp:
38265 95A1           52                           push dx
38266 95A2           53                           push bx
38267 95A3           E8         002D              call dispi_get_enable
38268 95A6           89C3                         mov bx, ax
38269 95A8           0D                   0002    or ax, # 0x02
38270 95AB           E8         0015              call _dispi_set_enable
38271 95AE           BA                   01CE    mov dx, # 0x01CE
38272 95B1           B8                   0003    mov ax, # 0x3
38273 95B4           EF                           out dx, ax
38274 95B5           BA                   01CF    mov dx, # 0x01CF
38275 95B8           ED                           in ax, dx
38276 95B9           50                           push ax
38277 95BA           89D8                         mov ax, bx
38278 95BC           E8         0004              call _dispi_set_enable
38279 95BF           58                           pop ax
38280 95C0           5B                           pop bx
38281 95C1           5A                           pop dx
38282 95C2           C3                           ret
38283                       000095C3            _dispi_set_enable:
38284 95C3           52                           push dx
38285 95C4           50                           push ax
38286 95C5           BA                   01CE    mov dx, # 0x01CE
38287 95C8           B8                   0004    mov ax, # 0x4
38288 95CB           EF                           out dx, ax
38289 95CC           58                           pop ax
38290 95CD           BA                   01CF    mov dx, # 0x01CF
38291 95D0           EF                           out dx, ax
38292 95D1           5A                           pop dx
38293 95D2           C3                           ret
38294                       000095D3            dispi_get_enable:
38295 95D3           52                           push dx
38296 95D4           BA                   01CE    mov dx, # 0x01CE
38297 95D7           B8                   0004    mov ax, # 0x4
38298 95DA           EF                           out dx, ax
38299 95DB           BA                   01CF    mov dx, # 0x01CF
38300 95DE           ED                           in ax, dx
38301 95DF           5A                           pop dx
38302 95E0           C3                           ret
38303                       000095E1            _dispi_set_bank:
38304 95E1           52                           push dx
38305 95E2           50                           push ax
38306 95E3           BA                   01CE    mov dx, # 0x01CE
38307 95E6           B8                   0005    mov ax, # 0x5
38308 95E9           EF                           out dx, ax
38309 95EA           58                           pop ax
38310 95EB           BA                   01CF    mov dx, # 0x01CF
38311 95EE           EF                           out dx, ax
38312 95EF           5A                           pop dx
38313 95F0           C3                           ret
38314                       000095F1            dispi_get_bank:
38315 95F1           52                           push dx
38316 95F2           BA                   01CE    mov dx, # 0x01CE
38317 95F5           B8                   0005    mov ax, # 0x5
38318 95F8           EF                           out dx, ax
38319 95F9           BA                   01CF    mov dx, # 0x01CF
38320 95FC           ED                           in ax, dx
38321 95FD           5A                           pop dx
38322 95FE           C3                           ret
38323                                           ! 8407 endasm
38324                                           !BCC_ENDASM
38325                                           ! 8408 static void dispi_set_bank_farcall()
38326                                           ! 8409 {
38327                       000095FF            _dispi_set_bank_farcall:
38328                                           ! 8410 #asm
38329                                           !BCC_ASM
38330 95FF           81FB                 0100    cmp bx,#0x0100
38331 9603           74           1E              je dispi_set_bank_farcall_get
38332 9605           09DB                         or bx,bx
38333 9607           75           28              jnz dispi_set_bank_farcall_error
38334 9609           89D0                         mov ax,dx
38335 960B           52                           push dx
38336 960C           50                           push ax
38337 960D           B8                   0005    mov ax,# 0x5
38338 9610           BA                   01CE    mov dx,# 0x01CE
38339 9613           EF                           out dx,ax
38340 9614           58                           pop ax
38341 9615           BA                   01CF    mov dx,# 0x01CF
38342 9618           EF                           out dx,ax
38343 9619           ED                           in ax,dx
38344 961A           5A                           pop dx
38345 961B           39C2                         cmp dx,ax
38346 961D           75           12              jne dispi_set_bank_farcall_error
38347 961F           B8                   004F    mov ax, #0x004f
38348 9622           CB                           retf
38349                       00009623            dispi_set_bank_farcall_get:
38350 9623           B8                   0005    mov ax,# 0x5
38351 9626           BA                   01CE    mov dx,# 0x01CE
38352 9629           EF                           out dx,ax
38353 962A           BA                   01CF    mov dx,# 0x01CF
38354 962D           ED                           in ax,dx
38355 962E           89C2                         mov dx,ax
38356 9630           CB                           retf
38357                       00009631            dispi_set_bank_farcall_error:
38358 9631           B8                   014F    mov ax,#0x014F
38359 9634           CB                           retf
38360                                           ! 8441 endasm
38361                                           !BCC_ENDASM
38362                                           ! 8442 }
38363 9635           C3                         ret
38364                                           ! 8443 #asm
38365                                           !BCC_ASM
38366                       00009636            dispi_set_x_offset:
38367 9636           52                           push dx
38368 9637           50                           push ax
38369 9638           BA                   01CE    mov dx, # 0x01CE
38370 963B           B8                   0008    mov ax, # 0x8
38371 963E           EF                           out dx, ax
38372 963F           58                           pop ax
38373 9640           BA                   01CF    mov dx, # 0x01CF
38374 9643           EF                           out dx, ax
38375 9644           5A                           pop dx
38376 9645           C3                           ret
38377                       00009646            dispi_get_x_offset:
38378 9646           52                           push dx
38379 9647           BA                   01CE    mov dx, # 0x01CE
38380 964A           B8                   0008    mov ax, # 0x8
38381 964D           EF                           out dx, ax
38382 964E           BA                   01CF    mov dx, # 0x01CF
38383 9651           ED                           in ax, dx
38384 9652           5A                           pop dx
38385 9653           C3                           ret
38386                       00009654            dispi_set_y_offset:
38387 9654           52                           push dx
38388 9655           50                           push ax
38389 9656           BA                   01CE    mov dx, # 0x01CE
38390 9659           B8                   0009    mov ax, # 0x9
38391 965C           EF                           out dx, ax
38392 965D           58                           pop ax
38393 965E           BA                   01CF    mov dx, # 0x01CF
38394 9661           EF                           out dx, ax
38395 9662           5A                           pop dx
38396 9663           C3                           ret
38397                       00009664            dispi_get_y_offset:
38398 9664           52                           push dx
38399 9665           BA                   01CE    mov dx, # 0x01CE
38400 9668           B8                   0009    mov ax, # 0x9
38401 966B           EF                           out dx, ax
38402 966C           BA                   01CF    mov dx, # 0x01CF
38403 966F           ED                           in ax, dx
38404 9670           5A                           pop dx
38405 9671           C3                           ret
38406                       00009672            vga_set_virt_width:
38407 9672           50                           push ax
38408 9673           53                           push bx
38409 9674           52                           push dx
38410 9675           89C3                         mov bx, ax
38411 9677           E8         FEEC              call dispi_get_bpp
38412 967A           3C                     04    cmp al, #0x04
38413 967C           77           02              ja set_width_svga
38414 967E           D1EB                         shr bx, #1
38415                       00009680            set_width_svga:
38416 9680           C1EB                   03    shr bx, #3
38417 9683           BA                   03D4    mov dx, # 0x3d4
38418 9686           88DC                         mov ah, bl
38419 9688           B0                     13    mov al, #0x13
38420 968A           EF                           out dx, ax
38421 968B           5A                           pop dx
38422 968C           5B                           pop bx
38423 968D           58                           pop ax
38424 968E           C3                           ret
38425                       0000968F            dispi_set_virt_width:
38426 968F           E8         FFE0              call vga_set_virt_width
38427 9692           52                           push dx
38428 9693           50                           push ax
38429 9694           BA                   01CE    mov dx, # 0x01CE
38430 9697           B8                   0006    mov ax, # 0x6
38431 969A           EF                           out dx, ax
38432 969B           58                           pop ax
38433 969C           BA                   01CF    mov dx, # 0x01CF
38434 969F           EF                           out dx, ax
38435 96A0           5A                           pop dx
38436 96A1           C3                           ret
38437                       000096A2            dispi_get_virt_width:
38438 96A2           52                           push dx
38439 96A3           BA                   01CE    mov dx, # 0x01CE
38440 96A6           B8                   0006    mov ax, # 0x6
38441 96A9           EF                           out dx, ax
38442 96AA           BA                   01CF    mov dx, # 0x01CF
38443 96AD           ED                           in ax, dx
38444 96AE           5A                           pop dx
38445 96AF           C3                           ret
38446                       000096B0            dispi_get_virt_height:
38447 96B0           52                           push dx
38448 96B1           BA                   01CE    mov dx, # 0x01CE
38449 96B4           B8                   0007    mov ax, # 0x7
38450 96B7           EF                           out dx, ax
38451 96B8           BA                   01CF    mov dx, # 0x01CF
38452 96BB           ED                           in ax, dx
38453 96BC           5A                           pop dx
38454 96BD           C3                           ret
38455                       000096BE            _vga_compat_setup:
38456 96BE           50                           push ax
38457 96BF           52                           push dx
38458                                             ; set CRT X resolution
38459 96C0           BA                   01CE    mov dx, # 0x01CE
38460 96C3           B8                   0001    mov ax, # 0x1
38461 96C6           EF                           out dx, ax
38462 96C7           BA                   01CF    mov dx, # 0x01CF
38463 96CA           ED                           in ax, dx
38464 96CB           50                           push ax
38465 96CC           BA                   03D4    mov dx, # 0x3d4
38466 96CF           B8                   0011    mov ax, #0x0011
38467 96D2           EF                           out dx, ax
38468 96D3           58                           pop ax
38469 96D4           50                           push ax
38470 96D5           C1E8                   03    shr ax, #3
38471 96D8           48                           dec ax
38472 96D9           88C4                         mov ah, al
38473 96DB           B0                     01    mov al, #0x01
38474 96DD           EF                           out dx, ax
38475 96DE           58                           pop ax
38476 96DF           E8         FF90              call vga_set_virt_width
38477                                             ; set CRT Y resolution
38478 96E2           BA                   01CE    mov dx, # 0x01CE
38479 96E5           B8                   0002    mov ax, # 0x2
38480 96E8           EF                           out dx, ax
38481 96E9           BA                   01CF    mov dx, # 0x01CF
38482 96EC           ED                           in ax, dx
38483 96ED           48                           dec ax
38484 96EE           50                           push ax
38485 96EF           BA                   03D4    mov dx, # 0x3d4
38486 96F2           88C4                         mov ah, al
38487 96F4           B0                     12    mov al, #0x12
38488 96F6           EF                           out dx, ax
38489 96F7           58                           pop ax
38490 96F8           B0                     07    mov al, #0x07
38491 96FA           EE                           out dx, al
38492 96FB           42                           inc dx
38493 96FC           EC                           in al, dx
38494 96FD           24                     BD    and al, #0xbd
38495 96FF           F6C4                   01    test ah, #0x01
38496 9702           74           02              jz bit8_clear
38497 9704           0C                     02    or al, #0x02
38498                       00009706            bit8_clear:
38499 9706           F6C4                   02    test ah, #0x02
38500 9709           74           02              jz bit9_clear
38501 970B           0C                     40    or al, #0x40
38502                       0000970D            bit9_clear:
38503 970D           EE                           out dx, al
38504                                             ; other settings
38505 970E           BA                   03D4    mov dx, # 0x3d4
38506 9711           B8                   0009    mov ax, #0x0009
38507 9714           EF                           out dx, ax
38508 9715           B0                     17    mov al, #0x17
38509 9717           EE                           out dx, al
38510 9718           BA                   03D5    mov dx, # 0x3d5
38511 971B           EC                           in al, dx
38512 971C           0C                     03    or al, #0x03
38513 971E           EE                           out dx, al
38514 971F           BA                   03DA    mov dx, # 0x3da
38515 9722           EC                           in al, dx
38516 9723           BA                   03C0    mov dx, # 0x3c0
38517 9726           B0                     10    mov al, #0x10
38518 9728           EE                           out dx, al
38519 9729           BA                   03C1    mov dx, # 0x3c1
38520 972C           EC                           in al, dx
38521 972D           0C                     01    or al, #0x01
38522 972F           BA                   03C0    mov dx, # 0x3c0
38523 9732           EE                           out dx, al
38524 9733           B0                     20    mov al, #0x20
38525 9735           EE                           out dx, al
38526 9736           BA                   03CE    mov dx, # 0x3ce
38527 9739           B8                   0506    mov ax, #0x0506
38528 973C           EF                           out dx, ax
38529 973D           BA                   03C4    mov dx, # 0x3c4
38530 9740           B8                   0F02    mov ax, #0x0f02
38531 9743           EF                           out dx, ax
38532                                             ; settings for >= 8bpp
38533 9744           BA                   01CE    mov dx, # 0x01CE
38534 9747           B8                   0003    mov ax, # 0x3
38535 974A           EF                           out dx, ax
38536 974B           BA                   01CF    mov dx, # 0x01CF
38537 974E           ED                           in ax, dx
38538 974F           3C                     08    cmp al, #0x08
38539 9751           72           40              jb vga_compat_end
38540 9753           BA                   03D4    mov dx, # 0x3d4
38541 9756           B0                     14    mov al, #0x14
38542 9758           EE                           out dx, al
38543 9759           BA                   03D5    mov dx, # 0x3d5
38544 975C           EC                           in al, dx
38545 975D           0C                     40    or al, #0x40
38546 975F           EE                           out dx, al
38547 9760           BA                   03DA    mov dx, # 0x3da
38548 9763           EC                           in al, dx
38549 9764           BA                   03C0    mov dx, # 0x3c0
38550 9767           B0                     10    mov al, #0x10
38551 9769           EE                           out dx, al
38552 976A           BA                   03C1    mov dx, # 0x3c1
38553 976D           EC                           in al, dx
38554 976E           0C                     40    or al, #0x40
38555 9770           BA                   03C0    mov dx, # 0x3c0
38556 9773           EE                           out dx, al
38557 9774           B0                     20    mov al, #0x20
38558 9776           EE                           out dx, al
38559 9777           BA                   03C4    mov dx, # 0x3c4
38560 977A           B0                     04    mov al, #0x04
38561 977C           EE                           out dx, al
38562 977D           BA                   03C5    mov dx, # 0x3c5
38563 9780           EC                           in al, dx
38564 9781           0C                     08    or al, #0x08
38565 9783           EE                           out dx, al
38566 9784           BA                   03CE    mov dx, # 0x3ce
38567 9787           B0                     05    mov al, #0x05
38568 9789           EE                           out dx, al
38569 978A           BA                   03CF    mov dx, # 0x3cf
38570 978D           EC                           in al, dx
38571 978E           24                     9F    and al, #0x9f
38572 9790           0C                     40    or al, #0x40
38573 9792           EE                           out dx, al
38574                       00009793            vga_compat_end:
38575 9793           5A                           pop dx
38576 9794           58                           pop ax
38577                                           ! 8655 endasm
38578                                           !BCC_ENDASM
38579                                           ! 8656 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38580                                           ! 8657   Bit16u mode; Boolean using_lfb;
38581                       00009795            _mode_info_find_mode:
38582                                           !BCC_EOS
38583                                           !BCC_EOS
38584                                           ! 8658 {
38585                                           ! 8659   ModeInfoListItem *cur_info=&mode_info_list;
38586 9795           55                         push	bp
38587 9796           89E5                       mov	bp,sp
38588 9798           4C                         dec	sp
38589 9799           4C                         dec	sp
38590                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38591 979A           BB                   7DDE  mov	bx,#_mode_info_list
38592 979D           895E         FE            mov	-2[bp],bx
38593                                           !BCC_EOS
38594                                           ! 8660   while (cur_info->mode != 0xFFFF)
38595                                           ! 8661   {
38596 97A0           EB           43            jmp .2B9
38597                       000097A2            .2BA:
38598                                           ! 8662     if (cur_info->mode == mode)
38599 97A2           8B5E         FE            mov	bx,-2[bp]
38600                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38601 97A5           8B1F                       mov	bx,[bx]
38602 97A7           3B5E         04            cmp	bx,4[bp]
38603 97AA           75           30            jne 	.2BB
38604                       000097AC            .2BC:
38605                                           ! 8663     {
38606                                           ! 8664       if (!using_lfb)
38607 97AC           8B46         06            mov	ax,6[bp]
38608 97AF           85C0                       test	ax,ax
38609 97B1           75           09            jne 	.2BD
38610                       000097B3            .2BE:
38611                                           ! 8665       {
38612                                           ! 8666         return cur_info;
38613 97B3           8B46         FE            mov	ax,-2[bp]
38614 97B6           89EC                       mov	sp,bp
38615 97B8           5D                         pop	bp
38616 97B9           C3                         ret
38617                                           !BCC_EOS
38618                                           ! 8667       }
38619                                           ! 8668       else if (cur_info->info.ModeAttributes & 0x0080)
38620 97BA           EB           1E            jmp .2BF
38621                       000097BC            .2BD:
38622 97BC           8B5E         FE            mov	bx,-2[bp]
38623                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38624 97BF           8A47         02            mov	al,2[bx]
38625 97C2           24                     80  and	al,#$80
38626 97C4           84C0                       test	al,al
38627 97C6           74           09            je  	.2C0
38628                       000097C8            .2C1:
38629                                           ! 8669       {
38630                                           ! 8670         return cur_info;
38631 97C8           8B46         FE            mov	ax,-2[bp]
38632 97CB           89EC                       mov	sp,bp
38633 97CD           5D                         pop	bp
38634 97CE           C3                         ret
38635                                           !BCC_EOS
38636                                           ! 8671       }
38637                                           ! 8672       else
38638                                           ! 8673       {
38639 97CF           EB           09            jmp .2C2
38640                       000097D1            .2C0:
38641                                           ! 8674         cur_info++;
38642                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38643 97D1           8B5E         FE            mov	bx,-2[bp]
38644 97D4           83C3                   44  add	bx,*$44
38645 97D7           895E         FE            mov	-2[bp],bx
38646                                           !BCC_EOS
38647                                           ! 8675       }
38648                                           ! 8676     }
38649                       000097DA            .2C2:
38650                       000097DA            .2BF:
38651                                           ! 8677     else
38652                                           ! 8678     {
38653 97DA           EB           09            jmp .2C3
38654                       000097DC            .2BB:
38655                                           ! 8679       cur_info++;
38656                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38657 97DC           8B5E         FE            mov	bx,-2[bp]
38658 97DF           83C3                   44  add	bx,*$44
38659 97E2           895E         FE            mov	-2[bp],bx
38660                                           !BCC_EOS
38661                                           ! 8680     }
38662                                           ! 8681   }
38663                       000097E5            .2C3:
38664                                           ! 8682   return 0;
38665                       000097E5            .2B9:
38666 97E5           8B5E         FE            mov	bx,-2[bp]
38667                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38668 97E8           8B1F                       mov	bx,[bx]
38669 97EA           81FB                 FFFF  cmp	bx,#$FFFF
38670 97EE           75           B2            jne	.2BA
38671                       000097F0            .2C4:
38672                       000097F0            .2B8:
38673 97F0           31C0                       xor	ax,ax
38674 97F2           89EC                       mov	sp,bp
38675 97F4           5D                         pop	bp
38676 97F5           C3                         ret
38677                                           !BCC_EOS
38678                                           ! 8683 }
38679                                           ! 8684 #asm
38680                                           !BCC_ASM
38681                       00000004            _mode_info_find_mode.using_lfb	set	4
38682                       00000002            _mode_info_find_mode.mode	set	2
38683                                           ; Has 1 display - Returns true if 1 display detected
38684                       000097F6            _vbe_has_vbe_display:
38685 97F6           1E                           push ds
38686 97F7           53                           push bx
38687 97F8           B8                   0040    mov ax, # 0x40
38688 97FB           8ED8                         mov ds, ax
38689 97FD           BB                   00B9    mov bx, # 0xB9
38690 9800           8A07                         mov al, [bx]
38691 9802           24                     01    and al, #0x01
38692 9804           30E4                         xor ah, ah
38693 9806           5B                           pop bx
38694 9807           1F                           pop ds
38695 9808           C3                           ret
38696                                           ; 1 Init - Initialise the Vesa Bios Extension Code
38697                                           ; This function does a sanity check on the host side display code interface.
38698                       00009809            vbe_init:
38699 9809           B8                   B0C0    mov ax, # 0xB0C0
38700 980C           E8         FCF4              call dispi_set_id
38701 980F           E8         FCE3              call dispi_get_id
38702 9812           3D                   B0C0    cmp ax, # 0xB0C0
38703 9815           75           16              jne no_vbe_interface
38704 9817           1E                           push ds
38705 9818           53                           push bx
38706 9819           B8                   0040    mov ax, # 0x40
38707 981C           8ED8                         mov ds, ax
38708 981E           BB                   00B9    mov bx, # 0xB9
38709 9821           B0                     01    mov al, #0x01
38710 9823           8807                         mov [bx], al
38711 9825           5B                           pop bx
38712 9826           1F                           pop ds
38713 9827           B8                   B0C5    mov ax, # 0xB0C5
38714 982A           E8         FCD6              call dispi_set_id
38715                       0000982D            no_vbe_interface:
38716 982D           BB                   93E4    mov bx, #msg_vbe_init
38717 9830           53                           push bx
38718 9831           E8         E409              call _printf
38719 9834           44                           inc sp
38720 9835           44                           inc sp
38721 9836           C3                           ret
38722                                           ; 1 Display Info - Display information on screen about the 1
38723                       00009837            vbe_display_info:
38724 9837           E8         FFBC              call _vbe_has_vbe_display
38725 983A           85C0                         test ax, ax
38726 983C           74           0B              jz no_vbe_flag
38727 983E           B8                   C000    mov ax, #0xc000
38728 9841           8ED8                         mov ds, ax
38729 9843           BE                   939A    mov si, #_vbebios_info_string
38730 9846           E9         9DB3              jmp _display_string
38731                       00009849            no_vbe_flag:
38732 9849           B8                   C000    mov ax, #0xc000
38733 984C           8ED8                         mov ds, ax
38734 984E           BE                   93C0    mov si, #_no_vbebios_info_string
38735 9851           E9         9DA8              jmp _display_string
38736                                           ; helper function for memory size calculation
38737                       00009854            lmulul:
38738 9854     66    25               0000FFFF    and eax, #0x0000FFFF
38739 985A     66    C1E3                   10    shl ebx, #16
38740 985E     66    09D8                         or eax, ebx
38741 9861           36                           SEG SS
38742 9862     66    F725                         mul eax, dword ptr [di]
38743 9865     66    89C3                         mov ebx, eax
38744 9868     66    C1EB                   10    shr ebx, #16
38745 986C           C3                           ret
38746                                           ! 8748 endasm
38747                                           !BCC_ENDASM
38748                                           ! 8749 void vbe_biosfn_return_controller_information(AX, ES, DI)
38749                                           ! Register BX used in function mode_info_find_mode
38750                                           ! 8750 Bit16u *AX;Bit16u ES;Bit16u DI;
38751                                           export	_vbe_biosfn_return_controller_information
38752                       0000986D            _vbe_biosfn_return_controller_information:
38753                                           !BCC_EOS
38754                                           !BCC_EOS
38755                                           !BCC_EOS
38756                                           ! 8751 {
38757                                           ! 8752         Bit16u ss=get_SS();
38758 986D           55                         push	bp
38759 986E           89E5                       mov	bp,sp
38760 9870           4C                         dec	sp
38761 9871           4C                         dec	sp
38762                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38763 9872           E8         E3C5            call	_get_SS
38764                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38765 9875           8946         FE            mov	-2[bp],ax
38766                                           !BCC_EOS
38767                                           ! 8753         VbeInfoBlock vbe_info_block;
38768                                           !BCC_EOS
38769                                           ! 8754         Bit16u status;
38770                                           !BCC_EOS
38771                                           ! 8755         Bit16u result;
38772                                           !BCC_EOS
38773                                           ! 8756         Bit16u vbe2_info;
38774                                           !BCC_EOS
38775                                           ! 8757         Bit16u cur_mode=0;
38776 9878           81C4                 FDF8  add	sp,#-$208
38777                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
38778 987C           31C0                       xor	ax,ax
38779 987E           8986       FDF6            mov	-$20A[bp],ax
38780                                           !BCC_EOS
38781                                           ! 8758         Bit16u cur_ptr=34;
38782 9882           4C                         dec	sp
38783 9883           4C                         dec	sp
38784                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
38785 9884           B8                   0022  mov	ax,*$22
38786 9887           8986       FDF4            mov	-$20C[bp],ax
38787                                           !BCC_EOS
38788                                           ! 8759         Bit16u size_64k;
38789                                           !BCC_EOS
38790                                           ! 8760         ModeInfoListItem *cur_info=&mode_info_list;
38791 988B           83C4                   FC  add	sp,*-4
38792                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
38793 988E           BB                   7DDE  mov	bx,#_mode_info_list
38794 9891           899E       FDF0            mov	-$210[bp],bx
38795                                           !BCC_EOS
38796                                           ! 8761         status = read_word(ss, AX);
38797                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
38798 9895           FF76         04            push	4[bp]
38799                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
38800 9898           FF76         FE            push	-2[bp]
38801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38802 989B           E8         E323            call	_read_word
38803 989E           83C4                   04  add	sp,*4
38804                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
38805 98A1           8986       FDFC            mov	-$204[bp],ax
38806                                           !BCC_EOS
38807                                           ! 8762         vbe2_info = 0;
38808                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38809 98A5           31C0                       xor	ax,ax
38810 98A7           8986       FDF8            mov	-$208[bp],ax
38811                                           !BCC_EOS
38812                                           ! 8763         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
38813                                           ! Debug: list int = const $200 (used reg = )
38814 98AB           B8                   0200  mov	ax,#$200
38815 98AE           50                         push	ax
38816                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
38817 98AF           FF76         08            push	8[bp]
38818                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38819 98B2           FF76         06            push	6[bp]
38820                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
38821 98B5           8D9E       FDFE            lea	bx,-$202[bp]
38822 98B9           53                         push	bx
38823                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
38824 98BA           FF76         FE            push	-2[bp]
38825                                           ! Debug: func () void = memcpyb+0 (used reg = )
38826 98BD           E8         E28E            call	_memcpyb
38827 98C0           83C4                   0A  add	sp,*$A
38828                                           !BCC_EOS
38829                                           ! 8764         if (((vbe_info_block.VbeSignature[0] == 'V') &&
38830                                           ! 8765              (vbe_info_block.VbeSignature[1] == 'B') &&
38831                                           ! 8766              (vbe_info_block.VbeSignature[2] == 'E') &&
38832                                           ! 8767              (vbe_info_block.VbeSignature[3] == '2')) ||
38833                                           ! 8768             ((vbe_info_block.VbeSignature[0] == 'V') &&
38834                                           ! 8769              (vbe_info_block.VbeSignature[1] == 'E') &&
38835                                           ! 8770              (vbe_info_block.VbeSignature[2] == 'S') &&
38836                                           ! 8771              (vbe_info_block.VbeSignature[3] == 'A')) )
38837                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38838 98C3           8A86       FDFE            mov	al,-$202[bp]
38839 98C7           3C                     56  cmp	al,*$56
38840 98C9           75           18            jne 	.2C7
38841                       000098CB            .2CA:
38842                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38843 98CB           8A86       FDFF            mov	al,-$201[bp]
38844 98CF           3C                     42  cmp	al,*$42
38845 98D1           75           10            jne 	.2C7
38846                       000098D3            .2C9:
38847                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38848 98D3           8A86       FE00            mov	al,-$200[bp]
38849 98D7           3C                     45  cmp	al,*$45
38850 98D9           75           08            jne 	.2C7
38851                       000098DB            .2C8:
38852                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38853 98DB           8A86       FE01            mov	al,-$1FF[bp]
38854 98DF           3C                     32  cmp	al,*$32
38855 98E1           74           20            je  	.2C6
38856                       000098E3            .2C7:
38857                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38858 98E3           8A86       FDFE            mov	al,-$202[bp]
38859 98E7           3C                     56  cmp	al,*$56
38860 98E9           75           1F            jne 	.2C5
38861                       000098EB            .2CD:
38862                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38863 98EB           8A86       FDFF            mov	al,-$201[bp]
38864 98EF           3C                     45  cmp	al,*$45
38865 98F1           75           17            jne 	.2C5
38866                       000098F3            .2CC:
38867                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38868 98F3           8A86       FE00            mov	al,-$200[bp]
38869 98F7           3C                     53  cmp	al,*$53
38870 98F9           75           0F            jne 	.2C5
38871                       000098FB            .2CB:
38872                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38873 98FB           8A86       FE01            mov	al,-$1FF[bp]
38874 98FF           3C                     41  cmp	al,*$41
38875 9901           75           07            jne 	.2C5
38876                       00009903            .2C6:
38877                                           ! 8772         {
38878                                           ! 8773                 vbe2_info = 1;
38879                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38880 9903           B8                   0001  mov	ax,*1
38881 9906           8986       FDF8            mov	-$208[bp],ax
38882                                           !BCC_EOS
38883                                           ! 8774        
38884                                           ! 8774  }
38885                                           ! 8775         vbe_info_block.VbeSignature[0] = 'V';
38886                       0000990A            .2C5:
38887                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38888 990A           B0                     56  mov	al,*$56
38889 990C           8886       FDFE            mov	-$202[bp],al
38890                                           !BCC_EOS
38891                                           ! 8776         vbe_info_block.VbeSignature[1] = 'E';
38892                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38893 9910           B0                     45  mov	al,*$45
38894 9912           8886       FDFF            mov	-$201[bp],al
38895                                           !BCC_EOS
38896                                           ! 8777         vbe_info_block.VbeSignature[2] = 'S';
38897                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38898 9916           B0                     53  mov	al,*$53
38899 9918           8886       FE00            mov	-$200[bp],al
38900                                           !BCC_EOS
38901                                           ! 8778         vbe_info_block.VbeSignature[3] = 'A';
38902                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38903 991C           B0                     41  mov	al,*$41
38904 991E           8886       FE01            mov	-$1FF[bp],al
38905                                           !BCC_EOS
38906                                           ! 8779         vbe_info_block.VbeVersion = 0x0200;
38907                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
38908 9922           B8                   0200  mov	ax,#$200
38909 9925           8986       FE02            mov	-$1FE[bp],ax
38910                                           !BCC_EOS
38911                                           ! 8780         vbe_info_block.OemStringPtr_Seg = 0xc000;
38912                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
38913 9929           B8                   C000  mov	ax,#$C000
38914 992C           8986       FE06            mov	-$1FA[bp],ax
38915                                           !BCC_EOS
38916                                           ! 8781         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
38917                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
38918 9930           BB                   931E  mov	bx,#_vbebios_copyright
38919 9933           899E       FE04            mov	-$1FC[bp],bx
38920                                           !BCC_EOS
38921                                           ! 8782         vbe_info_block.Capabilities[0] = 0x0001;
38922                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
38923 9937           B0                     01  mov	al,*1
38924 9939           8886       FE08            mov	-$1F8[bp],al
38925                                           !BCC_EOS
38926                                           ! 8783         vbe_info_block.Capabilities[1] = 0;
38927                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
38928 993D           30C0                       xor	al,al
38929 993F           8886       FE09            mov	-$1F7[bp],al
38930                                           !BCC_EOS
38931                                           ! 8784         vbe_info_block.Capabilities[2] = 0;
38932                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
38933 9943           30C0                       xor	al,al
38934 9945           8886       FE0A            mov	-$1F6[bp],al
38935                                           !BCC_EOS
38936                                           ! 8785         vbe_info_block.Capabilities[3] = 0;
38937                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
38938 9949           30C0                       xor	al,al
38939 994B           8886       FE0B            mov	-$1F5[bp],al
38940                                           !BCC_EOS
38941                                           ! 8786         vbe_info_block.VideoModePtr_Seg= ES ;
38942                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
38943 994F           8B46         06            mov	ax,6[bp]
38944 9952           8986       FE0E            mov	-$1F2[bp],ax
38945                                           !BCC_EOS
38946                                           ! 8787         vbe_info_block.VideoModePtr_Off= DI + 34;
38947                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
38948 9956           8B46         08            mov	ax,8[bp]
38949                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
38950 9959           05                   0022  add	ax,*$22
38951 995C           8986       FE0C            mov	-$1F4[bp],ax
38952                                           !BCC_EOS
38953                                           ! 8788         outw(0x01CE, 0xa);
38954                                           ! Debug: list int = const $A (used reg = )
38955 9960           B8                   000A  mov	ax,*$A
38956 9963           50                         push	ax
38957                                           ! Debug: list int = const $1CE (used reg = )
38958 9964           B8                   01CE  mov	ax,#$1CE
38959 9967           50                         push	ax
38960                                           ! Debug: func () void = outw+0 (used reg = )
38961 9968           E8         E2BF            call	_outw
38962 996B           83C4                   04  add	sp,*4
38963                                           !BCC_EOS
38964                                           ! 8789         vbe_info_block.TotalMemory = inw(0x01CF);
38965                                           ! Debug: list int = const $1CF (used reg = )
38966 996E           B8                   01CF  mov	ax,#$1CF
38967 9971           50                         push	ax
38968                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38969 9972           E8         E29A            call	_inw
38970 9975           44                         inc	sp
38971 9976           44                         inc	sp
38972                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
38973 9977           8986       FE10            mov	-$1F0[bp],ax
38974                                           !BCC_EOS
38975                                           ! 8790         if (vbe2_info)
38976 997B           8B86       FDF8            mov	ax,-$208[bp]
38977 997F           85C0                       test	ax,ax
38978 9981           74           4B            je  	.2CE
38979                       00009983            .2CF:
38980                                           ! 8791         {
38981                                           ! 8792                 vbe_info_block.OemSoftwareRev = 0x0002;;
38982                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
38983 9983           B8                   0002  mov	ax,*2
38984 9986           8986       FE12            mov	-$1EE[bp],ax
38985                                           !BCC_EOS
38986                                           !BCC_EOS
38987                                           ! 8793                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
38988                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
38989 998A           B8                   C000  mov	ax,#$C000
38990 998D           8986       FE16            mov	-$1EA[bp],ax
38991                                           !BCC_EOS
38992                                           ! 8794                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
38993                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
38994 9991           BB                   9364  mov	bx,#_vbebios_vendor_name
38995 9994           899E       FE14            mov	-$1EC[bp],bx
38996                                           !BCC_EOS
38997                                           ! 8795                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
38998                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
38999 9998           B8                   C000  mov	ax,#$C000
39000 999B           8986       FE1A            mov	-$1E6[bp],ax
39001                                           !BCC_EOS
39002                                           ! 8796                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39003                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39004 999F           BB                   937C  mov	bx,#_vbebios_product_name
39005 99A2           899E       FE18            mov	-$1E8[bp],bx
39006                                           !BCC_EOS
39007                                           ! 8797                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39008                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39009 99A6           B8                   C000  mov	ax,#$C000
39010 99A9           8986       FE1E            mov	-$1E2[bp],ax
39011                                           !BCC_EOS
39012                                           ! 8798                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39013                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39014 99AD           BB                   9395  mov	bx,#_vbebios_product_revision
39015 99B0           899E       FE1C            mov	-$1E4[bp],bx
39016                                           !BCC_EOS
39017                                           ! 8799                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39018                                           ! Debug: list int = const $200 (used reg = )
39019 99B4           B8                   0200  mov	ax,#$200
39020 99B7           50                         push	ax
39021                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39022 99B8           8D9E       FDFE            lea	bx,-$202[bp]
39023 99BC           53                         push	bx
39024                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39025 99BD           FF76         FE            push	-2[bp]
39026                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39027 99C0           FF76         08            push	8[bp]
39028                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39029 99C3           FF76         06            push	6[bp]
39030                                           ! Debug: func () void = memcpyb+0 (used reg = )
39031 99C6           E8         E185            call	_memcpyb
39032 99C9           83C4                   0A  add	sp,*$A
39033                                           !BCC_EOS
39034                                           ! 8800         }
39035                                           ! 8801         else
39036                                           ! 8802         {
39037 99CC           EB           18            jmp .2D0
39038                       000099CE            .2CE:
39039                                           ! 8803                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39040                                           ! Debug: list int = const $100 (used reg = )
39041 99CE           B8                   0100  mov	ax,#$100
39042 99D1           50                         push	ax
39043                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39044 99D2           8D9E       FDFE            lea	bx,-$202[bp]
39045 99D6           53                         push	bx
39046                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39047 99D7           FF76         FE            push	-2[bp]
39048                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39049 99DA           FF76         08            push	8[bp]
39050                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39051 99DD           FF76         06            push	6[bp]
39052                                           ! Debug: func () void = memcpyb+0 (used reg = )
39053 99E0           E8         E16B            call	_memcpyb
39054 99E3           83C4                   0A  add	sp,*$A
39055                                           !BCC_EOS
39056                                           ! 8804         }
39057                                           ! 8805         do
39058                       000099E6            .2D0:
39059                                           ! 8806         {
39060                       000099E6            .2D3:
39061                                           ! 8807                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39062 99E6           8B9E       FDF0            mov	bx,-$210[bp]
39063                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39064 99EA           8A47         1B            mov	al,$1B[bx]
39065 99ED           30E4                       xor	ah,ah
39066 99EF           31DB                       xor	bx,bx
39067 99F1           53                         push	bx
39068 99F2           50                         push	ax
39069 99F3           8B9E       FDF0            mov	bx,-$210[bp]
39070                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39071 99F7           8B47         14            mov	ax,$14[bx]
39072 99FA           31DB                       xor	bx,bx
39073 99FC           53                         push	bx
39074 99FD           50                         push	ax
39075 99FE           8B9E       FDF0            mov	bx,-$210[bp]
39076                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39077 9A02           8B47         14            mov	ax,$14[bx]
39078 9A05           31DB                       xor	bx,bx
39079                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39080 9A07           8DBE       FDE8            lea	di,-$218[bp]
39081 9A0B           E8         FE46            call	lmulul
39082 9A0E           83C4                   04  add	sp,*4
39083                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39084 9A11           8DBE       FDEC            lea	di,-$214[bp]
39085 9A15           E8         FE3C            call	lmulul
39086 9A18           83C4                   04  add	sp,*4
39087                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39088                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39089 9A1B           31C0                       xor	ax,ax
39090                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39091 9A1D           8986       FDF2            mov	-$20E[bp],ax
39092                                           !BCC_EOS
39093                                           ! 8808                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39094                                           ! 8809                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39095                                           ! 8810                     (size_64k <= vbe_info_block.TotalMemory)) {
39096                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39097 9A21           E8         FB5B            call	_dispi_get_max_xres
39098 9A24           8B9E       FDF0            mov	bx,-$210[bp]
39099                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39100 9A28           3B47         14            cmp	ax,$14[bx]
39101 9A2B           72           4D            jb  	.2D4
39102                       00009A2D            .2D7:
39103                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39104 9A2D           E8         FB71            call	_dispi_get_max_bpp
39105 9A30           8B9E       FDF0            mov	bx,-$210[bp]
39106                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39107 9A34           50                         push	ax
39108 9A35           8A47         1B            mov	al,$1B[bx]
39109 9A38           30E4                       xor	ah,ah
39110 9A3A           3B86       FDEE            cmp	ax,-$212[bp]
39111 9A3E           8DA6       FDF0            lea	sp,-$210[bp]
39112 9A42           77           36            ja  	.2D4
39113                       00009A44            .2D6:
39114                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39115 9A44           8B86       FDF2            mov	ax,-$20E[bp]
39116 9A48           3B86       FE10            cmp	ax,-$1F0[bp]
39117 9A4C           77           2C            ja  	.2D4
39118                       00009A4E            .2D5:
39119                                           ! 8811                   write_word(ES, DI + cur_ptr, cur_info->mode);
39120 9A4E           8B9E       FDF0            mov	bx,-$210[bp]
39121                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39122 9A52           FF37                       push	[bx]
39123                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39124 9A54           8B46         08            mov	ax,8[bp]
39125 9A57           0386       FDF4            add	ax,-$20C[bp]
39126                                           ! Debug: list unsigned int = ax+0 (used reg = )
39127 9A5B           50                         push	ax
39128                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39129 9A5C           FF76         06            push	6[bp]
39130                                           ! Debug: func () void = write_word+0 (used reg = )
39131 9A5F           E8         E18A            call	_write_word
39132 9A62           83C4                   06  add	sp,*6
39133                                           !BCC_EOS
39134                                           ! 8812                   cur_mode++;
39135                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39136 9A65           8B86       FDF6            mov	ax,-$20A[bp]
39137 9A69           40                         inc	ax
39138 9A6A           8986       FDF6            mov	-$20A[bp],ax
39139                                           !BCC_EOS
39140                                           ! 8813                   cur_ptr+=2;
39141                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39142 9A6E           8B86       FDF4            mov	ax,-$20C[bp]
39143 9A72           40                         inc	ax
39144 9A73           40                         inc	ax
39145 9A74           8986       FDF4            mov	-$20C[bp],ax
39146                                           !BCC_EOS
39147                                           ! 8814                 } else {
39148 9A78           EB           00            jmp .2D8
39149                       00009A7A            .2D4:
39150                                           ! 8815                 }
39151                                           ! 8816                 cur_info++;
39152                       00009A7A            .2D8:
39153                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39154 9A7A           8B9E       FDF0            mov	bx,-$210[bp]
39155 9A7E           83C3                   44  add	bx,*$44
39156 9A81           899E       FDF0            mov	-$210[bp],bx
39157                                           !BCC_EOS
39158                                           ! 8817         } while (cur_info->mode != 0xFFFF);
39159                       00009A85            .2D2:
39160 9A85           8B9E       FDF0            mov	bx,-$210[bp]
39161                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39162 9A89           8B1F                       mov	bx,[bx]
39163 9A8B           81FB                 FFFF  cmp	bx,#$FFFF
39164 9A8F         0F85         FF53            bne 	.2D3
39165                       00009A93            .2D9:
39166                                           !BCC_EOS
39167                                           ! 8818         write_word(ES, DI + cur_ptr, cur_info
39168                       00009A93            .2D1:
39169                                           ! 8818 ->mode);
39170 9A93           8B9E       FDF0            mov	bx,-$210[bp]
39171                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39172 9A97           FF37                       push	[bx]
39173                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39174 9A99           8B46         08            mov	ax,8[bp]
39175 9A9C           0386       FDF4            add	ax,-$20C[bp]
39176                                           ! Debug: list unsigned int = ax+0 (used reg = )
39177 9AA0           50                         push	ax
39178                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39179 9AA1           FF76         06            push	6[bp]
39180                                           ! Debug: func () void = write_word+0 (used reg = )
39181 9AA4           E8         E145            call	_write_word
39182 9AA7           83C4                   06  add	sp,*6
39183                                           !BCC_EOS
39184                                           ! 8819         result = 0x4f;
39185                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39186 9AAA           B8                   004F  mov	ax,*$4F
39187 9AAD           8986       FDFA            mov	-$206[bp],ax
39188                                           !BCC_EOS
39189                                           ! 8820         write_word(ss, AX, result);
39190                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39191 9AB1           FFB6       FDFA            push	-$206[bp]
39192                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39193 9AB5           FF76         04            push	4[bp]
39194                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39195 9AB8           FF76         FE            push	-2[bp]
39196                                           ! Debug: func () void = write_word+0 (used reg = )
39197 9ABB           E8         E12E            call	_write_word
39198 9ABE           83C4                   06  add	sp,*6
39199                                           !BCC_EOS
39200                                           ! 8821 }
39201 9AC1           89EC                       mov	sp,bp
39202 9AC3           5D                         pop	bp
39203 9AC4           C3                         ret
39204                                           ! 8822 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39205                                           ! Register BX used in function vbe_biosfn_return_controller_information
39206                                           ! 8823 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39207                                           export	_vbe_biosfn_return_mode_information
39208                       00009AC5            _vbe_biosfn_return_mode_information:
39209                                           !BCC_EOS
39210                                           !BCC_EOS
39211                                           !BCC_EOS
39212                                           !BCC_EOS
39213                                           ! 8824 {
39214                                           ! 8825         Bit16u result=0x0100;
39215 9AC5           55                         push	bp
39216 9AC6           89E5                       mov	bp,sp
39217 9AC8           4C                         dec	sp
39218 9AC9           4C                         dec	sp
39219                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39220 9ACA           B8                   0100  mov	ax,#$100
39221 9ACD           8946         FE            mov	-2[bp],ax
39222                                           !BCC_EOS
39223                                           ! 8826         Bit16u ss=get_SS();
39224 9AD0           4C                         dec	sp
39225 9AD1           4C                         dec	sp
39226                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39227 9AD2           E8         E165            call	_get_SS
39228                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39229 9AD5           8946         FC            mov	-4[bp],ax
39230                                           !BCC_EOS
39231                                           ! 8827         ModeInfoBlock info;
39232                                           !BCC_EOS
39233                                           ! 8828         ModeInfoListItem *cur_info;
39234                                           !BCC_EOS
39235                                           ! 8829         Boolean using_lfb;
39236                                           !BCC_EOS
39237                                           ! 8830         Bit16u lfb_addr;
39238                                           !BCC_EOS
39239                                           ! 8831         using_lfb=((CX & 0x4000) == 0x4000);
39240 9AD8           81C4                 FEFA  add	sp,#-$106
39241                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39242 9ADC           8B46         06            mov	ax,6[bp]
39243 9ADF           25                   4000  and	ax,#$4000
39244                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39245 9AE2           3D                   4000  cmp	ax,#$4000
39246 9AE5           75           04            jne	.2DA
39247 9AE7           B0                     01  mov	al,*1
39248 9AE9           EB           02            jmp	.2DB
39249                       00009AEB            .2DA:
39250 9AEB           30C0                       xor	al,al
39251                       00009AED            .2DB:
39252                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39253 9AED           30E4                       xor	ah,ah
39254 9AEF           8986       FEF8            mov	-$108[bp],ax
39255                                           !BCC_EOS
39256                                           ! 8832         CX = (CX & 0x1ff);
39257                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39258 9AF3           8B46         06            mov	ax,6[bp]
39259 9AF6           25                   01FF  and	ax,#$1FF
39260                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39261 9AF9           8946         06            mov	6[bp],ax
39262                                           !BCC_EOS
39263                                           ! 8833         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39264                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39265 9AFC           8D9E       FEFA            lea	bx,-$106[bp]
39266 9B00           53                         push	bx
39267                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39268 9B01           FFB6       FEF8            push	-$108[bp]
39269                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39270 9B05           FF76         06            push	6[bp]
39271                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39272 9B08           E8         FC8A            call	_mode_info_find_mode
39273 9B0B           83C4                   06  add	sp,*6
39274                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39275 9B0E           8986       FEFA            mov	-$106[bp],ax
39276                                           !BCC_EOS
39277                                           ! 8834         if (cur_info != 0)
39278                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39279 9B12           8B86       FEFA            mov	ax,-$106[bp]
39280 9B16           85C0                       test	ax,ax
39281 9B18         0F84         008C            beq 	.2DC
39282                       00009B1C            .2DD:
39283                                           ! 8835         {
39284                                           ! 8836                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39285                                           ! Debug: list int = const $100 (used reg = )
39286 9B1C           B8                   0100  mov	ax,#$100
39287 9B1F           50                         push	ax
39288                                           ! Debug: list int = const 0 (used reg = )
39289 9B20           31C0                       xor	ax,ax
39290 9B22           50                         push	ax
39291                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39292 9B23           8D9E       FEFC            lea	bx,-$104[bp]
39293 9B27           53                         push	bx
39294                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39295 9B28           FF76         FC            push	-4[bp]
39296                                           ! Debug: func () void = memsetb+0 (used reg = )
39297 9B2B           E8         DFD6            call	_memsetb
39298 9B2E           83C4                   08  add	sp,*8
39299                                           !BCC_EOS
39300                                           ! 8837                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39301                                           ! Debug: list int = const $42 (used reg = )
39302 9B31           B8                   0042  mov	ax,*$42
39303 9B34           50                         push	ax
39304 9B35           8B9E       FEFA            mov	bx,-$106[bp]
39305                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39306                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39307 9B39           43                         inc	bx
39308 9B3A           43                         inc	bx
39309 9B3B           53                         push	bx
39310                                           ! Debug: list unsigned int = const $C000 (used reg = )
39311 9B3C           B8                   C000  mov	ax,#$C000
39312 9B3F           50                         push	ax
39313                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39314 9B40           8D9E       FEFC            lea	bx,-$104[bp]
39315 9B44           53                         push	bx
39316                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39317 9B45           FF76         FC            push	-4[bp]
39318                                           ! Debug: func () void = memcpyb+0 (used reg = )
39319 9B48           E8         E003            call	_memcpyb
39320 9B4B           83C4                   0A  add	sp,*$A
39321                                           !BCC_EOS
39322                                           ! 8838                 if (using_lfb) {
39323 9B4E           8B86       FEF8            mov	ax,-$108[bp]
39324 9B52           85C0                       test	ax,ax
39325 9B54           74           06            je  	.2DE
39326                       00009B56            .2DF:
39327                                           ! 8839                   info.NumberOfBanks = 1;
39328                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39329 9B56           B0                     01  mov	al,*1
39330 9B58           8886       FF16            mov	-$EA[bp],al
39331                                           !BCC_EOS
39332                                           ! 8840                 }
39333                                           ! 8841                 lfb_addr = pci_get_lfb_addr(0x1234);
39334                       00009B5C            .2DE:
39335                                           ! Debug: list int = const $1234 (used reg = )
39336 9B5C           B8                   1234  mov	ax,#$1234
39337 9B5F           50                         push	ax
39338                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39339 9B60           E8         E217            call	_pci_get_lfb_addr
39340 9B63           44                         inc	sp
39341 9B64           44                         inc	sp
39342                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39343 9B65           8986       FEF6            mov	-$10A[bp],ax
39344                                           !BCC_EOS
39345                                           ! 8842                 if (lfb_addr > 0) {
39346                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39347 9B69           8B86       FEF6            mov	ax,-$10A[bp]
39348 9B6D           85C0                       test	ax,ax
39349 9B6F           74           11            je  	.2E0
39350                       00009B71            .2E1:
39351                                           ! 8843                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39352                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39353 9B71           8B86       FEF6            mov	ax,-$10A[bp]
39354 9B75           31DB                       xor	bx,bx
39355                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39356 9B77           93                         xchg	bx,ax
39357 9B78           31C0                       xor	ax,ax
39358                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39359 9B7A           8986       FF24            mov	-$DC[bp],ax
39360 9B7E           899E       FF26            mov	-$DA[bp],bx
39361                                           !BCC_EOS
39362                                           ! 8844                 }
39363                                           ! 8845                 if (info.WinAAttributes & 0x01) {
39364                       00009B82            .2E0:
39365                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39366 9B82           8A86       FEFE            mov	al,-$102[bp]
39367 9B86           24                     01  and	al,*1
39368 9B88           84C0                       test	al,al
39369 9B8A           74           14            je  	.2E2
39370                       00009B8C            .2E3:
39371                                           ! 8846                   info.WinFuncPtr = 0xC0000000UL;
39372                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39373 9B8C           31C0                       xor	ax,ax
39374 9B8E           BB                   C000  mov	bx,#$C000
39375 9B91           8986       FF08            mov	-$F8[bp],ax
39376 9B95           899E       FF0A            mov	-$F6[bp],bx
39377                                           !BCC_EOS
39378                                           ! 8847                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39379                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39380                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39381 9B99           BB                   95FF  mov	bx,#_dispi_set_bank_farcall
39382 9B9C           899E       FF08            mov	-$F8[bp],bx
39383                                           !BCC_EOS
39384                                           ! 8848                 }
39385                                           ! 8849                 result = 0x4f;
39386                       00009BA0            .2E2:
39387                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39388 9BA0           B8                   004F  mov	ax,*$4F
39389 9BA3           8946         FE            mov	-2[bp],ax
39390                                           !BCC_EOS
39391                                           ! 8850         }
39392                                           ! 8851         else
39393                                           ! 8852         {
39394 9BA6           EB           06            jmp .2E4
39395                       00009BA8            .2DC:
39396                                           ! 8853                 result = 0x100;
39397                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39398 9BA8           B8                   0100  mov	ax,#$100
39399 9BAB           8946         FE            mov	-2[bp],ax
39400                                           !BCC_EOS
39401                                           ! 8854         }
39402                                           ! 8855         if (result == 0x4f)
39403                       00009BAE            .2E4:
39404                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39405 9BAE           8B46         FE            mov	ax,-2[bp]
39406 9BB1           3D                   004F  cmp	ax,*$4F
39407 9BB4           75           18            jne 	.2E5
39408                       00009BB6            .2E6:
39409                                           ! 8856         {
39410                                           ! 8857                 memcpyb(ES, DI, ss, &info, sizeof(info));
39411                                           ! Debug: list int = const $100 (used reg = )
39412 9BB6           B8                   0100  mov	ax,#$100
39413 9BB9           50                         push	ax
39414                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39415 9BBA           8D9E       FEFC            lea	bx,-$104[bp]
39416 9BBE           53                         push	bx
39417                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39418 9BBF           FF76         FC            push	-4[bp]
39419                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39420 9BC2           FF76         0A            push	$A[bp]
39421                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39422 9BC5           FF76         08            push	8[bp]
39423                                           ! Debug: func () void = memcpyb+0 (used reg = )
39424 9BC8           E8         DF83            call	_memcpyb
39425 9BCB           83C4                   0A  add	sp,*$A
39426                                           !BCC_EOS
39427                                           ! 8858         }
39428                                           ! 8859         write_word(ss, AX, result);
39429                       00009BCE            .2E5:
39430                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39431 9BCE           FF76         FE            push	-2[bp]
39432                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39433 9BD1           FF76         04            push	4[bp]
39434                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39435 9BD4           FF76         FC            push	-4[bp]
39436                                           ! Debug: func () void = write_word+0 (used reg = )
39437 9BD7           E8         E012            call	_write_word
39438 9BDA           83C4                   06  add	sp,*6
39439                                           !BCC_EOS
39440                                           ! 8860 }
39441 9BDD           89EC                       mov	sp,bp
39442 9BDF           5D                         pop	bp
39443 9BE0           C3                         ret
39444                                           ! 8861 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39445                                           ! Register BX used in function vbe_biosfn_return_mode_information
39446                                           ! 8862 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39447                                           export	_vbe_biosfn_set_mode
39448                       00009BE1            _vbe_biosfn_set_mode:
39449                                           !BCC_EOS
39450                                           !BCC_EOS
39451                                           !BCC_EOS
39452                                           !BCC_EOS
39453                                           ! 8863 {
39454                                           ! 8864         Bit16u ss = get_SS();
39455 9BE1           55                         push	bp
39456 9BE2           89E5                       mov	bp,sp
39457 9BE4           4C                         dec	sp
39458 9BE5           4C                         dec	sp
39459                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39460 9BE6           E8         E051            call	_get_SS
39461                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39462 9BE9           8946         FE            mov	-2[bp],ax
39463                                           !BCC_EOS
39464                                           ! 8865         Bit16u result;
39465                                           !BCC_EOS
39466                                           ! 8866         ModeInfoListItem *cur_info;
39467                                           !BCC_EOS
39468                                           ! 8867         Boolean using_lfb;
39469                                           !BCC_EOS
39470                                           ! 8868         Bit8u no_clear;
39471                                           !BCC_EOS
39472                                           ! 8869         Bit8u lfb_flag;
39473                                           !BCC_EOS
39474                                           ! 8870         using_lfb=((BX & 0x4000) == 0x4000);
39475 9BEC           83C4                   F8  add	sp,*-8
39476                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39477 9BEF           8B46         06            mov	ax,6[bp]
39478 9BF2           25                   4000  and	ax,#$4000
39479                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39480 9BF5           3D                   4000  cmp	ax,#$4000
39481 9BF8           75           04            jne	.2E7
39482 9BFA           B0                     01  mov	al,*1
39483 9BFC           EB           02            jmp	.2E8
39484                       00009BFE            .2E7:
39485 9BFE           30C0                       xor	al,al
39486                       00009C00            .2E8:
39487                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39488 9C00           30E4                       xor	ah,ah
39489 9C02           8946         F8            mov	-8[bp],ax
39490                                           !BCC_EOS
39491                                           ! 8871         lfb_flag=using_lfb?0x40:0;
39492 9C05           8B46         F8            mov	ax,-8[bp]
39493 9C08           85C0                       test	ax,ax
39494 9C0A           74           04            je  	.2E9
39495                       00009C0C            .2EA:
39496 9C0C           B0                     40  mov	al,*$40
39497 9C0E           EB           02            jmp .2EB
39498                       00009C10            .2E9:
39499 9C10           30C0                       xor	al,al
39500                       00009C12            .2EB:
39501                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39502 9C12           8846         F6            mov	-$A[bp],al
39503                                           !BCC_EOS
39504                                           ! 8872         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
39505                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39506 9C15           8B46         06            mov	ax,6[bp]
39507 9C18           25                   8000  and	ax,#$8000
39508                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39509 9C1B           3D                   8000  cmp	ax,#$8000
39510 9C1E           75           04            jne 	.2EC
39511                       00009C20            .2ED:
39512 9C20           B0                     80  mov	al,#$80
39513 9C22           EB           02            jmp .2EE
39514                       00009C24            .2EC:
39515 9C24           30C0                       xor	al,al
39516                       00009C26            .2EE:
39517                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39518 9C26           8846         F7            mov	-9[bp],al
39519                                           !BCC_EOS
39520                                           ! 8873         BX = (BX & 0x1ff);
39521                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39522 9C29           8B46         06            mov	ax,6[bp]
39523 9C2C           25                   01FF  and	ax,#$1FF
39524                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39525 9C2F           8946         06            mov	6[bp],ax
39526                                           !BCC_EOS
39527                                           ! 8874         if (BX<0x0100)
39528                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39529 9C32           8B46         06            mov	ax,6[bp]
39530 9C35           3D                   0100  cmp	ax,#$100
39531 9C38           73           23            jae 	.2EF
39532                       00009C3A            .2F0:
39533                                           ! 8875         {
39534                                           ! 8876                 Bit8u mode;
39535                                           !BCC_EOS
39536                                           ! 8877                 dispi_set_enable(0x00);
39537 9C3A           4C                         dec	sp
39538 9C3B           4C                         dec	sp
39539                                           ! Debug: list int = const 0 (used reg = )
39540 9C3C           31C0                       xor	ax,ax
39541 9C3E           50                         push	ax
39542                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39543 9C3F           E8         F981            call	_dispi_set_enable
39544 9C42           44                         inc	sp
39545 9C43           44                         inc	sp
39546                                           !BCC_EOS
39547                                           ! 8878                 mode=(BX & 0xff);
39548                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39549 9C44           8A46         06            mov	al,6[bp]
39550                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39551 9C47           8846         F5            mov	-$B[bp],al
39552                                           !BCC_EOS
39553                                           ! 8879                 biosfn_set_video_mode(mode);
39554                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39555 9C4A           8A46         F5            mov	al,-$B[bp]
39556 9C4D           30E4                       xor	ah,ah
39557 9C4F           50                         push	ax
39558                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39559 9C50           E8         9F0A            call	_biosfn_set_video_mode
39560 9C53           44                         inc	sp
39561 9C54           44                         inc	sp
39562                                           !BCC_EOS
39563                                           ! 8880                 result = 0x4f;
39564                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39565 9C55           B8                   004F  mov	ax,*$4F
39566 9C58           8946         FC            mov	-4[bp],ax
39567                                           !BCC_EOS
39568                                           ! 8881         }
39569 9C5B           44                         inc	sp
39570 9C5C           44                         inc	sp
39571                                           ! 8882         cur_info = mode_info_
39572                       00009C5D            .2EF:
39573                                           ! 8882 find_mode(BX, using_lfb, &cur_info);
39574                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39575 9C5D           8D5E         FA            lea	bx,-6[bp]
39576 9C60           53                         push	bx
39577                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39578 9C61           FF76         F8            push	-8[bp]
39579                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39580 9C64           FF76         06            push	6[bp]
39581                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39582 9C67           E8         FB2B            call	_mode_info_find_mode
39583 9C6A           83C4                   06  add	sp,*6
39584                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39585 9C6D           8946         FA            mov	-6[bp],ax
39586                                           !BCC_EOS
39587                                           ! 8883         if (cur_info != 0)
39588                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39589 9C70           8B46         FA            mov	ax,-6[bp]
39590 9C73           85C0                       test	ax,ax
39591 9C75         0F84         0089            beq 	.2F1
39592                       00009C79            .2F2:
39593                                           ! 8884         {
39594                                           ! 8885                 dispi_set_enable(0x00);
39595                                           ! Debug: list int = const 0 (used reg = )
39596 9C79           31C0                       xor	ax,ax
39597 9C7B           50                         push	ax
39598                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39599 9C7C           E8         F944            call	_dispi_set_enable
39600 9C7F           44                         inc	sp
39601 9C80           44                         inc	sp
39602                                           !BCC_EOS
39603                                           ! 8886                 if (cur_info->info.BitsPerPixel == 4)
39604 9C81           8B5E         FA            mov	bx,-6[bp]
39605                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
39606 9C84           8A47         1B            mov	al,$1B[bx]
39607 9C87           3C                     04  cmp	al,*4
39608 9C89           75           09            jne 	.2F3
39609                       00009C8B            .2F4:
39610                                           ! 8887                 {
39611                                           ! 8888                   biosfn_set_video_mode(0x6a);
39612                                           ! Debug: list int = const $6A (used reg = )
39613 9C8B           B8                   006A  mov	ax,*$6A
39614 9C8E           50                         push	ax
39615                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39616 9C8F           E8         9ECB            call	_biosfn_set_video_mode
39617 9C92           44                         inc	sp
39618 9C93           44                         inc	sp
39619                                           !BCC_EOS
39620                                           ! 8889                 }
39621                                           ! 8890                 dispi_set_bpp(cur_info->info.BitsPerPixel);
39622                       00009C94            .2F3:
39623 9C94           8B5E         FA            mov	bx,-6[bp]
39624                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39625 9C97           8A47         1B            mov	al,$1B[bx]
39626 9C9A           30E4                       xor	ah,ah
39627 9C9C           50                         push	ax
39628                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
39629 9C9D           E8         F8A8            call	_dispi_set_bpp
39630 9CA0           44                         inc	sp
39631 9CA1           44                         inc	sp
39632                                           !BCC_EOS
39633                                           ! 8891                 dispi_set_xres(cur_info->info.XResolution);
39634 9CA2           8B5E         FA            mov	bx,-6[bp]
39635                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39636 9CA5           FF77         14            push	$14[bx]
39637                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
39638 9CA8           E8         F868            call	_dispi_set_xres
39639 9CAB           44                         inc	sp
39640 9CAC           44                         inc	sp
39641                                           !BCC_EOS
39642                                           ! 8892                 dispi_set_yres(cur_info->info.YResolution);
39643 9CAD           8B5E         FA            mov	bx,-6[bp]
39644                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
39645 9CB0           FF77         16            push	$16[bx]
39646                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
39647 9CB3           E8         F874            call	_dispi_set_yres
39648 9CB6           44                         inc	sp
39649 9CB7           44                         inc	sp
39650                                           !BCC_EOS
39651                                           ! 8893                 dispi_set_bank(0);
39652                                           ! Debug: list int = const 0 (used reg = )
39653 9CB8           31C0                       xor	ax,ax
39654 9CBA           50                         push	ax
39655                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
39656 9CBB           E8         F923            call	_dispi_set_bank
39657 9CBE           44                         inc	sp
39658 9CBF           44                         inc	sp
39659                                           !BCC_EOS
39660                                           ! 8894                 dispi_set_enable(0x01 | no_clear | lfb_flag);
39661                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
39662                                           ! Debug: expression subtree swapping
39663 9CC0           8A46         F7            mov	al,-9[bp]
39664 9CC3           0C                     01  or	al,*1
39665                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
39666 9CC5           0A46         F6            or	al,-$A[bp]
39667                                           ! Debug: list unsigned char = al+0 (used reg = )
39668 9CC8           30E4                       xor	ah,ah
39669 9CCA           50                         push	ax
39670                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39671 9CCB           E8         F8F5            call	_dispi_set_enable
39672 9CCE           44                         inc	sp
39673 9CCF           44                         inc	sp
39674                                           !BCC_EOS
39675                                           ! 8895                 vga_compat_setup();
39676                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
39677 9CD0           E8         F9EB            call	_vga_compat_setup
39678                                           !BCC_EOS
39679                                           ! 8896                 write_word(0x40,0xBA,BX);
39680                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
39681 9CD3           FF76         06            push	6[bp]
39682                                           ! Debug: list int = const $BA (used reg = )
39683 9CD6           B8                   00BA  mov	ax,#$BA
39684 9CD9           50                         push	ax
39685                                           ! Debug: list int = const $40 (used reg = )
39686 9CDA           B8                   0040  mov	ax,*$40
39687 9CDD           50                         push	ax
39688                                           ! Debug: func () void = write_word+0 (used reg = )
39689 9CDE           E8         DF0B            call	_write_word
39690 9CE1           83C4                   06  add	sp,*6
39691                                           !BCC_EOS
39692                                           ! 8897                 write_byte(0x40,0x87,(0x60 | no_clear));
39693                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
39694                                           ! Debug: expression subtree swapping
39695 9CE4           8A46         F7            mov	al,-9[bp]
39696 9CE7           0C                     60  or	al,*$60
39697                                           ! Debug: list unsigned char = al+0 (used reg = )
39698 9CE9           30E4                       xor	ah,ah
39699 9CEB           50                         push	ax
39700                                           ! Debug: list int = const $87 (used reg = )
39701 9CEC           B8                   0087  mov	ax,#$87
39702 9CEF           50                         push	ax
39703                                           ! Debug: list int = const $40 (used reg = )
39704 9CF0           B8                   0040  mov	ax,*$40
39705 9CF3           50                         push	ax
39706                                           ! Debug: func () void = write_byte+0 (used reg = )
39707 9CF4           E8         DEDD            call	_write_byte
39708 9CF7           83C4                   06  add	sp,*6
39709                                           !BCC_EOS
39710                                           ! 8898                 result = 0x4f;
39711                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39712 9CFA           B8                   004F  mov	ax,*$4F
39713 9CFD           8946         FC            mov	-4[bp],ax
39714                                           !BCC_EOS
39715                                           ! 8899         }
39716                                           ! 8900         else
39717                                           ! 8901         {
39718 9D00           EB           14            jmp .2F5
39719                       00009D02            .2F1:
39720                                           ! 8902                 result = 0x100;
39721                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
39722 9D02           B8                   0100  mov	ax,#$100
39723 9D05           8946         FC            mov	-4[bp],ax
39724                                           !BCC_EOS
39725                                           ! 8903                 if (BX == 3)
39726                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
39727 9D08           8B46         06            mov	ax,6[bp]
39728 9D0B           3D                   0003  cmp	ax,*3
39729 9D0E           75           06            jne 	.2F6
39730                       00009D10            .2F7:
39731                                           ! 8904                         result = 0x4f;
39732                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39733 9D10           B8                   004F  mov	ax,*$4F
39734 9D13           8946         FC            mov	-4[bp],ax
39735                                           !BCC_EOS
39736                                           ! 8905         }
39737                       00009D16            .2F6:
39738                                           ! 8906         write_word(ss, AX, result);
39739                       00009D16            .2F5:
39740                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
39741 9D16           FF76         FC            push	-4[bp]
39742                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
39743 9D19           FF76         04            push	4[bp]
39744                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
39745 9D1C           FF76         FE            push	-2[bp]
39746                                           ! Debug: func () void = write_word+0 (used reg = )
39747 9D1F           E8         DECA            call	_write_word
39748 9D22           83C4                   06  add	sp,*6
39749                                           !BCC_EOS
39750                                           ! 8907 }
39751 9D25           89EC                       mov	sp,bp
39752 9D27           5D                         pop	bp
39753 9D28           C3                         ret
39754                                           ! 8908 #asm
39755                                           !BCC_ASM
39756                       00000008            _vbe_biosfn_set_mode.DI	set	8
39757                       00000006            _vbe_biosfn_set_mode.ES	set	6
39758                       00000002            _vbe_biosfn_set_mode.AX	set	2
39759                       00000004            _vbe_biosfn_set_mode.BX	set	4
39760                       00009D29            vbe_biosfn_return_current_mode:
39761 9D29           1E                           push ds
39762 9D2A           B8                   0040    mov ax, # 0x40
39763 9D2D           8ED8                         mov ds, ax
39764 9D2F           E8         F8A1              call dispi_get_enable
39765 9D32           25                   0001    and ax, # 0x01
39766 9D35           74           09              jz no_vbe_mode
39767 9D37           BB                   00BA    mov bx, # 0xBA
39768 9D3A           8B07                         mov ax, [bx]
39769 9D3C           89C3                         mov bx, ax
39770 9D3E           75           09              jnz vbe_03_ok
39771                       00009D40            no_vbe_mode:
39772 9D40           BB                   0049    mov bx, # 0x49
39773 9D43           8A07                         mov al, [bx]
39774 9D45           88C3                         mov bl, al
39775 9D47           30FF                         xor bh, bh
39776                       00009D49            vbe_03_ok:
39777 9D49           B8                   004F    mov ax, #0x004f
39778 9D4C           1F                           pop ds
39779 9D4D           C3                           ret
39780                                           ! 8929 endasm
39781                                           !BCC_ENDASM
39782                                           ! 8930 Bit16u vbe_biosfn_read_video_state_size()
39783                                           ! Register BX used in function vbe_biosfn_set_mode
39784                                           ! 8931 {
39785                                           export	_vbe_biosfn_read_video_state_size
39786                       00009D4E            _vbe_biosfn_read_video_state_size:
39787                                           ! 8932     return 9 * 2;
39788 9D4E           55                         push	bp
39789 9D4F           89E5                       mov	bp,sp
39790 9D51           B8                   0012  mov	ax,*$12
39791 9D54           5D                         pop	bp
39792 9D55           C3                         ret
39793                                           !BCC_EOS
39794                                           ! 8933 }
39795                                           ! 8934 void vbe_biosfn_save_video_state(ES, BX)
39796                                           ! 8935      Bit16u ES; Bit16u BX;
39797                                           export	_vbe_biosfn_save_video_state
39798                       00009D56            _vbe_biosfn_save_video_state:
39799                                           !BCC_EOS
39800                                           !BCC_EOS
39801                                           ! 8936 {
39802                                           ! 8937     Bit16u enable, i;
39803                                           !BCC_EOS
39804                                           ! 8938     outw(0x01CE,0x4);
39805 9D56           55                         push	bp
39806 9D57           89E5                       mov	bp,sp
39807 9D59           83C4                   FC  add	sp,*-4
39808                                           ! Debug: list int = const 4 (used reg = )
39809 9D5C           B8                   0004  mov	ax,*4
39810 9D5F           50                         push	ax
39811                                           ! Debug: list int = const $1CE (used reg = )
39812 9D60           B8                   01CE  mov	ax,#$1CE
39813 9D63           50                         push	ax
39814                                           ! Debug: func () void = outw+0 (used reg = )
39815 9D64           E8         DEC3            call	_outw
39816 9D67           83C4                   04  add	sp,*4
39817                                           !BCC_EOS
39818                                           ! 8939     enable = inw(0x01CF);
39819                                           ! Debug: list int = const $1CF (used reg = )
39820 9D6A           B8                   01CF  mov	ax,#$1CF
39821 9D6D           50                         push	ax
39822                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39823 9D6E           E8         DE9E            call	_inw
39824 9D71           44                         inc	sp
39825 9D72           44                         inc	sp
39826                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39827 9D73           8946         FE            mov	-2[bp],ax
39828                                           !BCC_EOS
39829                                           ! 8940     write_word(ES, BX, enable);
39830                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39831 9D76           FF76         FE            push	-2[bp]
39832                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39833 9D79           FF76         06            push	6[bp]
39834                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39835 9D7C           FF76         04            push	4[bp]
39836                                           ! Debug: func () void = write_word+0 (used reg = )
39837 9D7F           E8         DE6A            call	_write_word
39838 9D82           83C4                   06  add	sp,*6
39839                                           !BCC_EOS
39840                                           ! 8941     BX += 2;
39841                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39842 9D85           8B46         06            mov	ax,6[bp]
39843 9D88           40                         inc	ax
39844 9D89           40                         inc	ax
39845 9D8A           8946         06            mov	6[bp],ax
39846                                           !BCC_EOS
39847                                           ! 8942     if (!(enable & 0x01))
39848                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39849 9D8D           8A46         FE            mov	al,-2[bp]
39850 9D90           24                     01  and	al,*1
39851 9D92           84C0                       test	al,al
39852 9D94           75           04            jne 	.2F8
39853                       00009D96            .2F9:
39854                                           ! 8943         return;
39855 9D96           89EC                       mov	sp,bp
39856 9D98           5D                         pop	bp
39857 9D99           C3                         ret
39858                                           !BCC_EOS
39859                                           ! 8944     for(i = 0x1; i <= 0x9; i++) {
39860                       00009D9A            .2F8:
39861                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
39862 9D9A           B8                   0001  mov	ax,*1
39863 9D9D           8946         FC            mov	-4[bp],ax
39864                                           !BCC_EOS
39865                                           !BCC_EOS
39866 9DA0           EB           3A            jmp .2FC
39867                       00009DA2            .2FD:
39868                                           ! 8945         if (i != 0x4) {
39869                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
39870 9DA2           8B46         FC            mov	ax,-4[bp]
39871 9DA5           3D                   0004  cmp	ax,*4
39872 9DA8           74           2B            je  	.2FE
39873                       00009DAA            .2FF:
39874                                           ! 8946             outw(0x01CE, i);
39875                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
39876 9DAA           FF76         FC            push	-4[bp]
39877                                           ! Debug: list int = const $1CE (used reg = )
39878 9DAD           B8                   01CE  mov	ax,#$1CE
39879 9DB0           50                         push	ax
39880                                           ! Debug: func () void = outw+0 (used reg = )
39881 9DB1           E8         DE76            call	_outw
39882 9DB4           83C4                   04  add	sp,*4
39883                                           !BCC_EOS
39884                                           ! 8947             write_word(ES, BX, inw(0x01CF));
39885                                           ! Debug: list int = const $1CF (used reg = )
39886 9DB7           B8                   01CF  mov	ax,#$1CF
39887 9DBA           50                         push	ax
39888                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39889 9DBB           E8         DE51            call	_inw
39890 9DBE           44                         inc	sp
39891 9DBF           44                         inc	sp
39892                                           ! Debug: list unsigned short = ax+0 (used reg = )
39893 9DC0           50                         push	ax
39894                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39895 9DC1           FF76         06            push	6[bp]
39896                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39897 9DC4           FF76         04            push	4[bp]
39898                                           ! Debug: func () void = write_word+0 (used reg = )
39899 9DC7           E8         DE22            call	_write_word
39900 9DCA           83C4                   06  add	sp,*6
39901                                           !BCC_EOS
39902                                           ! 8948             BX += 2;
39903                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39904 9DCD           8B46         06            mov	ax,6[bp]
39905 9DD0           40                         inc	ax
39906 9DD1           40                         inc	ax
39907 9DD2           8946         06            mov	6[bp],ax
39908                                           !BCC_EOS
39909                                           ! 8949         }
39910                                           ! 8950     }
39911                       00009DD5            .2FE:
39912                                           ! 8951 }
39913                       00009DD5            .2FB:
39914                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
39915 9DD5           8B46         FC            mov	ax,-4[bp]
39916 9DD8           40                         inc	ax
39917 9DD9           8946         FC            mov	-4[bp],ax
39918                       00009DDC            .2FC:
39919                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
39920 9DDC           8B46         FC            mov	ax,-4[bp]
39921 9DDF           3D                   0009  cmp	ax,*9
39922 9DE2           76           BE            jbe	.2FD
39923                       00009DE4            .300:
39924                       00009DE4            .2FA:
39925 9DE4           89EC                       mov	sp,bp
39926 9DE6           5D                         pop	bp
39927 9DE7           C3                         ret
39928                                           ! 8952 void vbe_biosfn_restore_video_state(ES, BX)
39929                                           ! 8953      Bit16u ES; Bit16u BX;
39930                                           export	_vbe_biosfn_restore_video_state
39931                       00009DE8            _vbe_biosfn_restore_video_state:
39932                                           !BCC_EOS
39933                                           !BCC_EOS
39934                                           ! 8954 {
39935                                           ! 8955     Bit16u enable, i;
39936                                           !BCC_EOS
39937                                           ! 8956     enable = read_word(ES, BX);
39938 9DE8           55                         push	bp
39939 9DE9           89E5                       mov	bp,sp
39940 9DEB           83C4                   FC  add	sp,*-4
39941                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39942 9DEE           FF76         06            push	6[bp]
39943                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39944 9DF1           FF76         04            push	4[bp]
39945                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39946 9DF4           E8         DDCA            call	_read_word
39947 9DF7           83C4                   04  add	sp,*4
39948                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39949 9DFA           8946         FE            mov	-2[bp],ax
39950                                           !BCC_EOS
39951                                           ! 8957     BX += 2;
39952                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39953 9DFD           8B46         06            mov	ax,6[bp]
39954 9E00           40                         inc	ax
39955 9E01           40                         inc	ax
39956 9E02           8946         06            mov	6[bp],ax
39957                                           !BCC_EOS
39958                                           ! 8958     if (!(enable & 0x01)) {
39959                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39960 9E05           8A46         FE            mov	al,-2[bp]
39961 9E08           24                     01  and	al,*1
39962 9E0A           84C0                       test	al,al
39963 9E0C           75           1E            jne 	.301
39964                       00009E0E            .302:
39965                                           ! 8959         outw(0x01CE,0x4);
39966                                           ! Debug: list int = const 4 (used reg = )
39967 9E0E           B8                   0004  mov	ax,*4
39968 9E11           50                         push	ax
39969                                           ! Debug: list int = const $1CE (used reg = )
39970 9E12           B8                   01CE  mov	ax,#$1CE
39971 9E15           50                         push	ax
39972                                           ! Debug: func () void = outw+0 (used reg = )
39973 9E16           E8         DE11            call	_outw
39974 9E19           83C4                   04  add	sp,*4
39975                                           !BCC_EOS
39976                                           ! 8960         outw(0x01CF, enable);
39977                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39978 9E1C           FF76         FE            push	-2[bp]
39979                                           ! Debug: list int = const $1CF (used reg = )
39980 9E1F           B8                   01CF  mov	ax,#$1CF
39981 9E22           50                         push	ax
39982                                           ! Debug: func () void = outw+0 (used reg = )
39983 9E23           E8         DE04            call	_outw
39984 9E26           83C4                   04  add	sp,*4
39985                                           !BCC_EOS
39986                                           ! 8961     } else {
39987 9E29           E9         00E5            br 	.303
39988                       00009E2C            .301:
39989                                           ! 8962         outw(0x01CE, 0x1);
39990                                           ! Debug: list int = const 1 (used reg = )
39991 9E2C           B8                   0001  mov	ax,*1
39992 9E2F           50                         push	ax
39993                                           ! Debug: list int = const $1CE (used reg = )
39994 9E30           B8                   01CE  mov	ax,#$1CE
39995 9E33           50                         push	ax
39996                                           ! Debug: func () void = outw+0 (used reg = )
39997 9E34           E8         DDF3            call	_outw
39998 9E37           83C4                   04  add	sp,*4
39999                                           !BCC_EOS
40000                                           ! 8963         outw(0x01CF, read_word(ES, BX));
40001                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40002 9E3A           FF76         06            push	6[bp]
40003                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40004 9E3D           FF76         04            push	4[bp]
40005                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40006 9E40           E8         DD7E            call	_read_word
40007 9E43           83C4                   04  add	sp,*4
40008                                           ! Debug: list unsigned short = ax+0 (used reg = )
40009 9E46           50                         push	ax
40010                                           ! Debug: list int = const $1CF (used reg = )
40011 9E47           B8                   01CF  mov	ax,#$1CF
40012 9E4A           50                         push	ax
40013                                           ! Debug: func () void = outw+0 (used reg = )
40014 9E4B           E8         DDDC            call	_outw
40015 9E4E           83C4                   04  add	sp,*4
40016                                           !BCC_EOS
40017                                           ! 8964         BX += 2;
40018                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40019 9E51           8B46         06            mov	ax,6[bp]
40020 9E54           40                         inc	ax
40021 9E55           40                         inc	ax
40022 9E56           8946         06            mov	6[bp],ax
40023                                           !BCC_EOS
40024                                           ! 8965         outw(0x01CE, 0x2);
40025                                           ! Debug: list int = const 2 (used reg = )
40026 9E59           B8                   0002  mov	ax,*2
40027 9E5C           50                         push	ax
40028                                           ! Debug: list int = const $1CE (used reg = )
40029 9E5D           B8                   01CE  mov	ax,#$1CE
40030 9E60           50                         push	ax
40031                                           ! Debug: func () void = outw+0 (used reg = )
40032 9E61           E8         DDC6            call	_outw
40033 9E64           83C4                   04  add	sp,*4
40034                                           !BCC_EOS
40035                                           ! 8966         outw(0x01CF, read_word(ES, BX));
40036                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40037 9E67           FF76         06            push	6[bp]
40038                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40039 9E6A           FF76         04            push	4[bp]
40040                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40041 9E6D           E8         DD51            call	_read_word
40042 9E70           83C4                   04  add	sp,*4
40043                                           ! Debug: list unsigned short = ax+0 (used reg = )
40044 9E73           50                         push	ax
40045                                           ! Debug: list int = const $1CF (used reg = )
40046 9E74           B8                   01CF  mov	ax,#$1CF
40047 9E77           50                         push	ax
40048                                           ! Debug: func () void = outw+0 (used reg = )
40049 9E78           E8         DDAF            call	_outw
40050 9E7B           83C4                   04  add	sp,*4
40051                                           !BCC_EOS
40052                                           ! 8967   
40053                                           ! 8967       BX += 2;
40054                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40055 9E7E           8B46         06            mov	ax,6[bp]
40056 9E81           40                         inc	ax
40057 9E82           40                         inc	ax
40058 9E83           8946         06            mov	6[bp],ax
40059                                           !BCC_EOS
40060                                           ! 8968         outw(0x01CE, 0x3);
40061                                           ! Debug: list int = const 3 (used reg = )
40062 9E86           B8                   0003  mov	ax,*3
40063 9E89           50                         push	ax
40064                                           ! Debug: list int = const $1CE (used reg = )
40065 9E8A           B8                   01CE  mov	ax,#$1CE
40066 9E8D           50                         push	ax
40067                                           ! Debug: func () void = outw+0 (used reg = )
40068 9E8E           E8         DD99            call	_outw
40069 9E91           83C4                   04  add	sp,*4
40070                                           !BCC_EOS
40071                                           ! 8969         outw(0x01CF, read_word(ES, BX));
40072                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40073 9E94           FF76         06            push	6[bp]
40074                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40075 9E97           FF76         04            push	4[bp]
40076                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40077 9E9A           E8         DD24            call	_read_word
40078 9E9D           83C4                   04  add	sp,*4
40079                                           ! Debug: list unsigned short = ax+0 (used reg = )
40080 9EA0           50                         push	ax
40081                                           ! Debug: list int = const $1CF (used reg = )
40082 9EA1           B8                   01CF  mov	ax,#$1CF
40083 9EA4           50                         push	ax
40084                                           ! Debug: func () void = outw+0 (used reg = )
40085 9EA5           E8         DD82            call	_outw
40086 9EA8           83C4                   04  add	sp,*4
40087                                           !BCC_EOS
40088                                           ! 8970         BX += 2;
40089                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40090 9EAB           8B46         06            mov	ax,6[bp]
40091 9EAE           40                         inc	ax
40092 9EAF           40                         inc	ax
40093 9EB0           8946         06            mov	6[bp],ax
40094                                           !BCC_EOS
40095                                           ! 8971         outw(0x01CE,0x4);
40096                                           ! Debug: list int = const 4 (used reg = )
40097 9EB3           B8                   0004  mov	ax,*4
40098 9EB6           50                         push	ax
40099                                           ! Debug: list int = const $1CE (used reg = )
40100 9EB7           B8                   01CE  mov	ax,#$1CE
40101 9EBA           50                         push	ax
40102                                           ! Debug: func () void = outw+0 (used reg = )
40103 9EBB           E8         DD6C            call	_outw
40104 9EBE           83C4                   04  add	sp,*4
40105                                           !BCC_EOS
40106                                           ! 8972         outw(0x01CF, enable);
40107                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40108 9EC1           FF76         FE            push	-2[bp]
40109                                           ! Debug: list int = const $1CF (used reg = )
40110 9EC4           B8                   01CF  mov	ax,#$1CF
40111 9EC7           50                         push	ax
40112                                           ! Debug: func () void = outw+0 (used reg = )
40113 9EC8           E8         DD5F            call	_outw
40114 9ECB           83C4                   04  add	sp,*4
40115                                           !BCC_EOS
40116                                           ! 8973         for(i = 0x5; i <= 0x9; i++) {
40117                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40118 9ECE           B8                   0005  mov	ax,*5
40119 9ED1           8946         FC            mov	-4[bp],ax
40120                                           !BCC_EOS
40121                                           !BCC_EOS
40122 9ED4           EB           33            jmp .306
40123                       00009ED6            .307:
40124                                           ! 8974             outw(0x01CE, i);
40125                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40126 9ED6           FF76         FC            push	-4[bp]
40127                                           ! Debug: list int = const $1CE (used reg = )
40128 9ED9           B8                   01CE  mov	ax,#$1CE
40129 9EDC           50                         push	ax
40130                                           ! Debug: func () void = outw+0 (used reg = )
40131 9EDD           E8         DD4A            call	_outw
40132 9EE0           83C4                   04  add	sp,*4
40133                                           !BCC_EOS
40134                                           ! 8975             outw(0x01CF, read_word(ES, BX));
40135                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40136 9EE3           FF76         06            push	6[bp]
40137                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40138 9EE6           FF76         04            push	4[bp]
40139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40140 9EE9           E8         DCD5            call	_read_word
40141 9EEC           83C4                   04  add	sp,*4
40142                                           ! Debug: list unsigned short = ax+0 (used reg = )
40143 9EEF           50                         push	ax
40144                                           ! Debug: list int = const $1CF (used reg = )
40145 9EF0           B8                   01CF  mov	ax,#$1CF
40146 9EF3           50                         push	ax
40147                                           ! Debug: func () void = outw+0 (used reg = )
40148 9EF4           E8         DD33            call	_outw
40149 9EF7           83C4                   04  add	sp,*4
40150                                           !BCC_EOS
40151                                           ! 8976             BX += 2;
40152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40153 9EFA           8B46         06            mov	ax,6[bp]
40154 9EFD           40                         inc	ax
40155 9EFE           40                         inc	ax
40156 9EFF           8946         06            mov	6[bp],ax
40157                                           !BCC_EOS
40158                                           ! 8977         }
40159                                           ! 8978     }
40160                       00009F02            .305:
40161                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40162 9F02           8B46         FC            mov	ax,-4[bp]
40163 9F05           40                         inc	ax
40164 9F06           8946         FC            mov	-4[bp],ax
40165                       00009F09            .306:
40166                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40167 9F09           8B46         FC            mov	ax,-4[bp]
40168 9F0C           3D                   0009  cmp	ax,*9
40169 9F0F           76           C5            jbe	.307
40170                       00009F11            .308:
40171                       00009F11            .304:
40172                                           ! 8979 }
40173                       00009F11            .303:
40174 9F11           89EC                       mov	sp,bp
40175 9F13           5D                         pop	bp
40176 9F14           C3                         ret
40177                                           ! 8980 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40178                                           ! 8981 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40179                                           export	_vbe_biosfn_save_restore_state
40180                       00009F15            _vbe_biosfn_save_restore_state:
40181                                           !BCC_EOS
40182                                           !BCC_EOS
40183                                           !BCC_EOS
40184                                           !BCC_EOS
40185                                           !BCC_EOS
40186                                           ! 8982 {
40187                                           ! 8983     Bit16u ss=get_SS();
40188 9F15           55                         push	bp
40189 9F16           89E5                       mov	bp,sp
40190 9F18           4C                         dec	sp
40191 9F19           4C                         dec	sp
40192                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40193 9F1A           E8         DD1D            call	_get_SS
40194                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40195 9F1D           8946         FE            mov	-2[bp],ax
40196                                           !BCC_EOS
40197                                           ! 8984     Bit16u result, val;
40198                                           !BCC_EOS
40199                                           ! 8985     result = 0x4f;
40200 9F20           83C4                   FC  add	sp,*-4
40201                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40202 9F23           B8                   004F  mov	ax,*$4F
40203 9F26           8946         FC            mov	-4[bp],ax
40204                                           !BCC_EOS
40205                                           ! 8986     switch(( DX & 0x00ff )) {
40206                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40207 9F29           8A46         08            mov	al,8[bp]
40208 9F2C           E9         00A9            br 	.30B
40209                                           ! 8987     case 0x00:
40210                                           ! 8988         val = biosfn_read_video_state_size2(CX);
40211                       00009F2F            .30C:
40212                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40213 9F2F           FF76         06            push	6[bp]
40214                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40215 9F32           E8         CF7A            call	_biosfn_read_video_state_size2
40216 9F35           44                         inc	sp
40217 9F36           44                         inc	sp
40218                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40219 9F37           8946         FA            mov	-6[bp],ax
40220                                           !BCC_EOS
40221                                           ! 8989         if (CX & 8)
40222                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40223 9F3A           8A46         06            mov	al,6[bp]
40224 9F3D           24                     08  and	al,*8
40225 9F3F           84C0                       test	al,al
40226 9F41           74           09            je  	.30D
40227                       00009F43            .30E:
40228                                           ! 8990             val += vbe_biosfn_read_video_state_size();
40229                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40230 9F43           E8         FE08            call	_vbe_biosfn_read_video_state_size
40231                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40232 9F46           0346         FA            add	ax,-6[bp]
40233 9F49           8946         FA            mov	-6[bp],ax
40234                                           !BCC_EOS
40235                                           ! 8991         write_word(ss, BX, val);
40236                       00009F4C            .30D:
40237                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40238 9F4C           FF76         FA            push	-6[bp]
40239                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40240 9F4F           FF76         0C            push	$C[bp]
40241                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40242 9F52           FF76         FE            push	-2[bp]
40243                                           ! Debug: func () void = write_word+0 (used reg = )
40244 9F55           E8         DC94            call	_write_word
40245 9F58           83C4                   06  add	sp,*6
40246                                           !BCC_EOS
40247                                           ! 8992         break;
40248 9F5B           E9         008C            br 	.309
40249                                           !BCC_EOS
40250                                           ! 8993     case 0x01:
40251                                           ! 8994         val = read_word(ss, BX);
40252                       00009F5E            .30F:
40253                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40254 9F5E           FF76         0C            push	$C[bp]
40255                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40256 9F61           FF76         FE            push	-2[bp]
40257                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40258 9F64           E8         DC5A            call	_read_word
40259 9F67           83C4                   04  add	sp,*4
40260                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40261 9F6A           8946         FA            mov	-6[bp],ax
40262                                           !BCC_EOS
40263                                           ! 8995         val = biosfn_save_video_state(CX, ES, val);
40264                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40265 9F6D           FF76         FA            push	-6[bp]
40266                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40267 9F70           FF76         0A            push	$A[bp]
40268                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40269 9F73           FF76         06            push	6[bp]
40270                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40271 9F76           E8         CFA1            call	_biosfn_save_video_state
40272 9F79           83C4                   06  add	sp,*6
40273                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40274 9F7C           8946         FA            mov	-6[bp],ax
40275                                           !BCC_EOS
40276                                           ! 8996         if (CX & 8)
40277                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40278 9F7F           8A46         06            mov	al,6[bp]
40279 9F82           24                     08  and	al,*8
40280 9F84           84C0                       test	al,al
40281 9F86           74           0C            je  	.310
40282                       00009F88            .311:
40283                                           ! 8997             vbe_biosfn_save_video_state(ES, val);
40284                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40285 9F88           FF76         FA            push	-6[bp]
40286                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40287 9F8B           FF76         0A            push	$A[bp]
40288                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40289 9F8E           E8         FDC5            call	_vbe_biosfn_save_video_state
40290 9F91           83C4                   04  add	sp,*4
40291                                           !BCC_EOS
40292                                           ! 8998         break;
40293                       00009F94            .310:
40294 9F94           EB           54            jmp .309
40295                                           !BCC_EOS
40296                                           ! 8999     case 0x02:
40297                                           ! 9000         val = read_word(ss, BX);
40298                       00009F96            .312:
40299                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40300 9F96           FF76         0C            push	$C[bp]
40301                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40302 9F99           FF76         FE            push	-2[bp]
40303                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40304 9F9C           E8         DC22            call	_read_word
40305 9F9F           83C4                   04  add	sp,*4
40306                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40307 9FA2           8946         FA            mov	-6[bp],ax
40308                                           !BCC_EOS
40309                                           ! 9001         val = biosfn_restore_video_state(CX, ES, val);
40310                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40311 9FA5           FF76         FA            push	-6[bp]
40312                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40313 9FA8           FF76         0A            push	$A[bp]
40314                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40315 9FAB           FF76         06            push	6[bp]
40316                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40317 9FAE           E8         D533            call	_biosfn_restore_video_state
40318 9FB1           83C4                   06  add	sp,*6
40319                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40320 9FB4           8946         FA            mov	-6[bp],ax
40321                                           !BCC_EOS
40322                                           ! 9002         if (CX & 8)
40323                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40324 9FB7           8A46         06            mov	al,6[bp]
40325 9FBA           24                     08  and	al,*8
40326 9FBC           84C0                       test	al,al
40327 9FBE           74           0C            je  	.313
40328                       00009FC0            .314:
40329                                           ! 9003             vbe_biosfn_restore_video_state(ES, val);
40330                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40331 9FC0           FF76         FA            push	-6[bp]
40332                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40333 9FC3           FF76         0A            push	$A[bp]
40334                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40335 9FC6           E8         FE1F            call	_vbe_biosfn_restore_video_state
40336 9FC9           83C4                   04  add	sp,*4
40337                                           !BCC_EOS
40338                                           ! 9004         break;
40339                       00009FCC            .313:
40340 9FCC           EB           1C            jmp .309
40341                                           !BCC_EOS
40342                                           ! 9005     default:
40343                                           ! 9006         result = 0x100;
40344                       00009FCE            .315:
40345                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40346 9FCE           B8                   0100  mov	ax,#$100
40347 9FD1           8946         FC            mov	-4[bp],ax
40348                                           !BCC_EOS
40349                                           ! 9007         break;
40350 9FD4           EB           14            jmp .309
40351                                           !BCC_EOS
40352                                           ! 9008     }
40353                                           ! 9009     write_word(ss, AX, result);
40354 9FD6           EB           12            jmp .309
40355                       00009FD8            .30B:
40356 9FD8           2C                     00  sub	al,*0
40357 9FDA         0F84         FF51            beq 	.30C
40358 9FDE           2C                     01  sub	al,*1
40359 9FE0         0F84         FF7A            beq 	.30F
40360 9FE4           2C                     01  sub	al,*1
40361 9FE6           74           AE            je 	.312
40362 9FE8           EB           E4            jmp	.315
40363                       00009FEA            .309:
40364                       FFFFFFF8            ..FFF4	=	-8
40365                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40366 9FEA           FF76         FC            push	-4[bp]
40367                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40368 9FED           FF76         04            push	4[bp]
40369                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40370 9FF0           FF76         FE            push	-2[bp]
40371                                           ! Debug: func () void = write_word+0 (used reg = )
40372 9FF3           E8         DBF6            call	_write_word
40373 9FF6           83C4                   06  add	sp,*6
40374                                           !BCC_EOS
40375                                           ! 9010 }
40376 9FF9           89EC                       mov	sp,bp
40377 9FFB           5D                         pop	bp
40378 9FFC           C3                         ret
40379                                           ! 9011 #asm
40380                                           !BCC_ASM
40381                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40382                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40383                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40384                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40385                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40386                       00009FFD            vbe_biosfn_display_window_control:
40387 9FFD           80FB                   00    cmp bl, #0x00
40388 A000           75           24              jne vbe_05_failed
40389 A002           80FF                   01    cmp bh, #0x01
40390 A005           74           16              je get_display_window
40391 A007           72           04              jb set_display_window
40392 A009           B8                   0100    mov ax, #0x0100
40393 A00C           C3                           ret
40394                       0000A00D            set_display_window:
40395 A00D           89D0                         mov ax, dx
40396 A00F           E8         F5CF              call _dispi_set_bank
40397 A012           E8         F5DC              call dispi_get_bank
40398 A015           39D0                         cmp ax, dx
40399 A017           75           0D              jne vbe_05_failed
40400 A019           B8                   004F    mov ax, #0x004f
40401 A01C           C3                           ret
40402                       0000A01D            get_display_window:
40403 A01D           E8         F5D1              call dispi_get_bank
40404 A020           89C2                         mov dx, ax
40405 A022           B8                   004F    mov ax, #0x004f
40406 A025           C3                           ret
40407                       0000A026            vbe_05_failed:
40408 A026           B8                   014F    mov ax, #0x014f
40409 A029           C3                           ret
40410                                           ! 9036 endasm
40411                                           !BCC_ENDASM
40412                                           ! 9037 #asm
40413                                           !BCC_ASM
40414                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40415                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40416                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40417                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40418                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40419                       0000A02A            vbe_biosfn_set_get_logical_scan_line_length:
40420 A02A           89C8                         mov ax, cx
40421 A02C           80FB                   01    cmp bl, #0x01
40422 A02F           74           24              je get_logical_scan_line_length
40423 A031           80FB                   02    cmp bl, #0x02
40424 A034           74           06              je set_logical_scan_line_bytes
40425 A036           72           1A              jb set_logical_scan_line_pixels
40426 A038           B8                   0100    mov ax, #0x0100
40427 A03B           C3                           ret
40428                       0000A03C            set_logical_scan_line_bytes:
40429 A03C           50                           push ax
40430 A03D           E8         F526              call dispi_get_bpp
40431 A040           30FF                         xor bh, bh
40432 A042           88E3                         mov bl, ah
40433 A044           08DB                         or bl, bl
40434 A046           75           05              jnz no_4bpp_1
40435 A048           C1E0                   03    shl ax, #3
40436 A04B           B3                     01    mov bl, #1
40437                       0000A04D            no_4bpp_1:
40438 A04D           31D2                         xor dx, dx
40439 A04F           58                           pop ax
40440 A050           F7F3                         div bx
40441                       0000A052            set_logical_scan_line_pixels:
40442 A052           E8         F63A              call dispi_set_virt_width
40443                       0000A055            get_logical_scan_line_length:
40444 A055           E8         F50E              call dispi_get_bpp
40445 A058           30FF                         xor bh, bh
40446 A05A           88E3                         mov bl, ah
40447 A05C           E8         F643              call dispi_get_virt_width
40448 A05F           89C1                         mov cx, ax
40449 A061           08DB                         or bl, bl
40450 A063           75           05              jnz no_4bpp_2
40451 A065           C1E8                   03    shr ax, #3
40452 A068           B3                     01    mov bl, #1
40453                       0000A06A            no_4bpp_2:
40454 A06A           F7E3                         mul bx
40455 A06C           89C3                         mov bx, ax
40456 A06E           E8         F63F              call dispi_get_virt_height
40457 A071           89C2                         mov dx, ax
40458 A073           B8                   004F    mov ax, #0x004f
40459 A076           C3                           ret
40460                                           ! 9079 endasm
40461                                           !BCC_ENDASM
40462                                           ! 9080 #asm
40463                                           !BCC_ASM
40464                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40465                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40466                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40467                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40468                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40469                       0000A077            vbe_biosfn_set_get_display_start:
40470 A077           80FB                   80    cmp bl, #0x80
40471 A07A           74           0B              je set_display_start
40472 A07C           80FB                   01    cmp bl, #0x01
40473 A07F           74           14              je get_display_start
40474 A081           72           04              jb set_display_start
40475 A083           B8                   0100    mov ax, #0x0100
40476 A086           C3                           ret
40477                       0000A087            set_display_start:
40478 A087           89C8                         mov ax, cx
40479 A089           E8         F5AA              call dispi_set_x_offset
40480 A08C           89D0                         mov ax, dx
40481 A08E           E8         F5C3              call dispi_set_y_offset
40482 A091           B8                   004F    mov ax, #0x004f
40483 A094           C3                           ret
40484                       0000A095            get_display_start:
40485 A095           E8         F5AE              call dispi_get_x_offset
40486 A098           89C1                         mov cx, ax
40487 A09A           E8         F5C7              call dispi_get_y_offset
40488 A09D           89C2                         mov dx, ax
40489 A09F           30FF                         xor bh, bh
40490 A0A1           B8                   004F    mov ax, #0x004f
40491 A0A4           C3                           ret
40492                                           ! 9104 endasm
40493                                           !BCC_ENDASM
40494                                           ! 9105 #asm
40495                                           !BCC_ASM
40496                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40497                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40498                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40499                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40500                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40501                       0000A0A5            vbe_biosfn_set_get_dac_palette_format:
40502 A0A5           80FB                   01    cmp bl, #0x01
40503 A0A8           74           1E              je get_dac_palette_format
40504 A0AA           72           04              jb set_dac_palette_format
40505 A0AC           B8                   0100    mov ax, #0x0100
40506 A0AF           C3                           ret
40507                       0000A0B0            set_dac_palette_format:
40508 A0B0           E8         F520              call dispi_get_enable
40509 A0B3           80FF                   06    cmp bh, #0x06
40510 A0B6           74           0A              je set_normal_dac
40511 A0B8           80FF                   08    cmp bh, #0x08
40512 A0BB           75           1B              jne vbe_08_unsupported
40513 A0BD           0D                   0020    or ax, # 0x20
40514 A0C0           75           03              jnz set_dac_mode
40515                       0000A0C2            set_normal_dac:
40516 A0C2           25                   FFDF    and ax, #~ 0x20
40517                       0000A0C5            set_dac_mode:
40518 A0C5           E8         F4FB              call _dispi_set_enable
40519                       0000A0C8            get_dac_palette_format:
40520 A0C8           B7                     06    mov bh, #0x06
40521 A0CA           E8         F506              call dispi_get_enable
40522 A0CD           25                   0020    and ax, # 0x20
40523 A0D0           74           02              jz vbe_08_ok
40524 A0D2           B7                     08    mov bh, #0x08
40525                       0000A0D4            vbe_08_ok:
40526 A0D4           B8                   004F    mov ax, #0x004f
40527 A0D7           C3                           ret
40528                       0000A0D8            vbe_08_unsupported:
40529 A0D8           B8                   014F    mov ax, #0x014f
40530 A0DB           C3                           ret
40531                                           ! 9136 endasm
40532                                           !BCC_ENDASM
40533                                           ! 9137 void vbe_biosfn_set_get_palette_data(AX)
40534                                           ! 9138 {
40535                                           export	_vbe_biosfn_set_get_palette_data
40536                       0000A0DC            _vbe_biosfn_set_get_palette_data:
40537                                           ! 9139 }
40538 A0DC           C3                         ret
40539                                           ! 9140 #asm
40540                                           !BCC_ASM
40541                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40542                       0000A0DD            vbe_biosfn_return_protected_mode_interface:
40543 A0DD           84DB                         test bl, bl
40544 A0DF           75           11              jnz _fail
40545 A0E1           BF                   C000    mov di, #0xc000
40546 A0E4           8EC7                         mov es, di
40547 A0E6           BF                   93F4    mov di, # vesa_pm_start
40548 A0E9           B9                   94F5    mov cx, # vesa_pm_end
40549 A0EC           29F9                         sub cx, di
40550 A0EE           B8                   004F    mov ax, #0x004f
40551 A0F1           C3                           ret
40552                       0000A0F2            _fail:
40553 A0F2           B8                   014F    mov ax, #0x014f
40554 A0F5           C3                           ret
40555                                           ! 9154 endasm
40556                                           !BCC_ENDASM
40557                                           ! 9155 #asm
40558                                           !BCC_ASM
40559                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40560                                           ;; DATA_SEG_DEFS_HERE
40561                                           ! 9157 endasm
40562                                           !BCC_ENDASM
40563                                           ! 9158 #asm
40564                                           !BCC_ASM
40565                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40566 A0F6                        76            .ascii "vgabios ends here"
40567 A107                        00            .byte 0x00
40568                       0000A108            vgabios_end:
40569 A108                        CB            .byte 0xCB
40570                                           ;; BLOCK_STRINGS_BEGIN
40571                                           ! 9164 endasm
40572                                           !BCC_ENDASM
40573                                           ! 9165 
40574                                           
40575 A109                                      .bss
40576                                           
40577                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B5B A   .10                         0 365A A   
.100                        0 4C80 A   .101                        0 4C79 A   
.102                        0 4C70 A   .103                        0 4E1A A   
.104                        0 4D8C A   .105                        0 4D02 A   
.106                        0 4D89 A   .107                        0 4D78 A   
.108                        0 4D7F A   .109                        0 4D0C A   
.10A                        0 4D50 A   .10B                        0 4D2A A   
.10C                        0 4D23 A   .10D                        0 4D78 A   
.10E                        0 4D89 A   .10F                        0 4E1A A   
.11                         0 3689 A   .110                        0 4E1A A   
.111                        0 4E07 A   .112                        0 4E0E A   
.113                        0 4D96 A   .114                        0 4DD3 A   
.115                        0 4DAD A   .116                        0 4DA6 A   
.117                        0 4DFB A   .118                        0 4E07 A   
.119                        0 4E05 A   .11A                        0 4E1A A   
.11B                        0 4E1D A   .11C                        0 4EB0 A   
.11D                        0 4E6B A   .11E                        0 4E59 A   
.11F                        0 4E47 A   .12                         0 3679 A   
.120                        0 4E40 A   .121                        0 4E39 A   
.122                        0 4FF4 A   .123                        0 4ED3 A   
.124                        0 4EB7 A   .125                        0 4F66 A   
.126                        0 4EDC A   .127                        0 4F63 A   
.128                        0 4F52 A   .129                        0 4F59 A   
.12A                        0 4EE6 A   .12B                        0 4F2A A   
.12C                        0 4F04 A   .12D                        0 4EFD A   
.12E                        0 4F52 A   .12F                        0 4F63 A   
.13                         0 368E A   .130                        0 4FF4 A   
.131                        0 4FF4 A   .132                        0 4FE1 A   
.133                        0 4FE8 A   .134                        0 4F70 A   
.135                        0 4FAD A   .136                        0 4F87 A   
.137                        0 4F80 A   .138                        0 4FD5 A   
.139                        0 4FE1 A   .13A                        0 4FDF A   
.13B                        0 4FF4 A   .13C                        0 5046 A   
.13D                        0 5042 A   .13E                        0 5105 A   
.13F                        0 50A7 A   .14                         0 36A5 A   
.140                        0 5105 A   .141                        0 5136 A   
.143                        0 512C A   .144                        0 5114 A   
.145                        0 511C A   .146                        0 5124 A   
.147                        0 51A3 A   .148                        0 5193 A   
.149                        0 51B1 A   .14A                        0 5269 A   
.14B                        0 5258 A   .14C                        0 525F A   
.14D                        0 51B9 A   .14E                        0 5258 A   
.14F                        0 5248 A   .15                         0 36B9 A   
.150                        0 524F A   .151                        0 51D6 A   
.152                        0 5238 A   .153                        0 5221 A   
.154                        0 5248 A   .155                        0 5258 A   
.156                        0 5269 A   .157                        0 547B A   
.158                        0 546B A   .159                        0 5472 A   
.15A                        0 52BF A   .15B                        0 52E3 A   
.15C                        0 52DA A   .15D                        0 53A4 A   
.15E                        0 52F1 A   .15F                        0 530C A   
.16                         0 36D2 A   .160                        0 52FA A   
.161                        0 5311 A   .162                        0 538E A   
.163                        0 5380 A   .164                        0 5387 A   
.165                        0 5318 A   .166                        0 5376 A   
.167                        0 532F A   .168                        0 5358 A   
.169                        0 5338 A   .16A                        0 5376 A   
.16B                        0 538E A   .16C                        0 546B A   
.16D                        0 546B A   .16E                        0 5462 A   
.16F                        0 53A7 A   .17                         0 36E9 A   
.170                        0 53C2 A   .171                        0 53B0 A   
.172                        0 53C7 A   .173                        0 5448 A   
.174                        0 543A A   .175                        0 5441 A   
.176                        0 53CE A   .177                        0 5430 A   
.178                        0 53E5 A   .179                        0 5410 A   
.17A                        0 53EE A   .17B                        0 5430 A   
.17C                        0 5448 A   .17D                        0 546B A   
.17E                        0 547B A   .17F                        0 554F A   
.18                         0 36F7 A   .180                        0 553F A   
.181                        0 5546 A   .182                        0 54C5 A   
.183                        0 553F A   .184                        0 5531 A   
.185                        0 5538 A   .186                        0 54EB A   
.187                        0 550D A   .188                        0 5507 A   
.189                        0 553F A   .18A                        0 554F A   
.18B                        0 5583 A   .18C                        0 557F A   
.18D                        0 5650 A   .18E                        0 55E6 A   
.18F                        0 5743 A   .19                         0 3732 A   
.190                        0 5743 A   .191                        0 572B A   
.192                        0 5685 A   .193                        0 5724 A   
.195                        0 5710 A   .196                        0 5699 A   
.197                        0 5699 A   .198                        0 56C2 A   
.199                        0 56EB A   .19A                        0 5743 A   
.19B                        0 5737 A   .19C                        0 5777 A   
.19D                        0 5773 A   .19E                        0 5846 A   
.19F                        0 57D8 A   .1A                         0 376C A   
.1A0                        0 5843 A   .1A1                        0 5837 A   
.1A2                        0 580E A   .1A3                        0 5843 A   
.1A4                        0 5939 A   .1A5                        0 5939 A   
.1A6                        0 5921 A   .1A7                        0 587B A   
.1A8                        0 591A A   .1AA                        0 5906 A   
.1AB                        0 588F A   .1AC                        0 588F A   
.1AD                        0 58B8 A   .1AE                        0 58E1 A   
.1AF                        0 5939 A   .1B                         0 3781 A   
.1B0                        0 592D A   .1B1                        0 59E5 A   
.1B2                        0 59E1 A   .1B3                        0 59FF A   
.1B4                        0 59FB A   .1B5                        0 5C4D A   
.1B7                        0 5C37 A   .1B8                        0 5A14 A   
.1B9                        0 5A14 A   .1BA                        0 5A95 A   
.1BB                        0 5A87 A   .1BC                        0 5ABA A   
.1BD                        0 5AEC A   .1BE                        0 5AD0 A   
.1BF                        0 5B06 A   .1C                         0 37A1 A   
.1C0                        0 5B18 A   .1C1                        0 5B0F A   
.1C2                        0 5B84 A   .1C3                        0 5B3E A   
.1C4                        0 5BC4 A   .1C5                        0 5BD8 A   
.1C6                        0 5BCD A   .1C7                        0 5BEE A   
.1C8                        0 5C03 A   .1C9                        0 5C87 A   
.1CA                        0 5C83 A   .1CB                        0 5CA1 A   
.1CC                        0 5C9D A   .1CD                        0 5E35 A   
.1CF                        0 5E1D A   .1D                         0 37C1 A   
.1D0                        0 5CB6 A   .1D1                        0 5CB6 A   
.1D2                        0 5D4A A   .1D3                        0 5D3C A   
.1D4                        0 5D43 A   .1D5                        0 5CF8 A   
.1D6                        0 5D3C A   .1D7                        0 5D28 A   
.1D8                        0 5D4A A   .1D9                        0 5D4D A   
.1DA                        0 5D79 A   .1DB                        0 5D70 A   
.1DC                        0 5DC4 A   .1DD                        0 5D9F A   
.1DE                        0 5DE5 A   .1DF                        0 5DE7 A   
.1E                         0 37DE A   .1E0                        0 5E16 A   
.1E1                        0 5E75 A   .1E2                        0 5E64 A   
.1E3                        0 5E9F A   .1E4                        0 5E9B A   
.1E5                        0 60FB A   .1E7                        0 60DA A   
.1E8                        0 5EF0 A   .1E9                        0 5EF3 A   
.1EA                        0 5F01 A   .1EB                        0 5EFA A   
.1EC                        0 5F04 A   .1ED                        0 5F0C A   
.1EE                        0 5F16 A   .1EF                        0 5F63 A   
.1F                         0 37F9 A   .1F0                        0 5F58 A   
.1F1                        0 5F16 A   .1F2                        0 5F63 A   
.1F3                        0 5F66 A   .1F4                        0 6000 A   
.1F5                        0 5F7E A   .1F6                        0 5FFD A   
.1F7                        0 5FDA A   .1F8                        0 60D1 A   
.1F9                        0 60D1 A   .1FB                        0 60BD A   
.1FC                        0 6046 A   .1FD                        0 6046 A   
.1FE                        0 606F A   .1FF                        0 6098 A   
.20                         0 3816 A   .200                        0 6111 A   
.201                        0 6105 A   .202                        0 61E6 A   
.203                        0 611D A   .204                        0 61B6 A   
.205                        0 6135 A   .206                        0 61DD A   
.207                        0 6593 A   .208                        0 6582 A   
.209                        0 6589 A   .20A                        0 64CB A   
.20B                        0 653E A   .20C                        0 6538 A   
.20D                        0 6593 A   .20E                        0 6674 A   
.20F                        0 6664 A   .21                         0 3825 A   
.210                        0 668C A   .211                        0 67D1 A   
.212                        0 67C2 A   .213                        0 67C9 A   
.214                        0 6785 A   .215                        0 67D1 A   
.216                        0 67E6 A   .217                        0 67DB A   
.218                        0 686A A   .219                        0 685B A   
.21A                        0 6862 A   .21B                        0 6821 A   
.21C                        0 686A A   .21D                        0 687D A   
.21E                        0 6874 A   .21F                        0 68FB A   
.22                         0 3960 A   .220                        0 68EC A   
.221                        0 68F3 A   .222                        0 68B8 A   
.223                        0 68FB A   .224                        0 690E A   
.225                        0 6905 A   .226                        0 6999 A   
.227                        0 698A A   .228                        0 6991 A   
.229                        0 6956 A   .22A                        0 6999 A   
.22B                        0 69AC A   .22C                        0 69A3 A   
.22D                        0 6B2E A   .22F                        0 6B09 A   
.230                        0 69C6 A   .231                        0 69FD A   
.232                        0 6A34 A   .233                        0 6A57 A   
.234                        0 6A7A A   .235                        0 6A9D A   
.236                        0 6ABF A   .237                        0 6AE1 A   
.238                        0 6B03 A   .239                        0 6B2C A   
.23A                        0 6B1C A   .23B                        0 6C9E A   
.23C                        0 6C8C A   .23D                        0 6D28 A   
.23E                        0 6D1C A   .23F                        0 6CCD A   
.24                         0 390C A   .240                        0 6D00 A   
.241                        0 6CEB A   .242                        0 6D28 A   
.243                        0 6D40 A   .244                        0 6D31 A   
.245                        0 6ECB A   .246                        0 6EC2 A   
.247                        0 6EDD A   .248                        0 6ED4 A   
.249                        0 6EEF A   .24A                        0 6EE6 A   
.24B                        0 71A2 A   .24C                        0 6F3C A   
.24D                        0 7027 A   .24E                        0 7018 A   
.24F                        0 701F A   .25                         0 382B A   
.250                        0 6FEC A   .251                        0 7027 A   
.252                        0 7095 A   .253                        0 7086 A   
.254                        0 708D A   .255                        0 705A A   
.256                        0 7095 A   .257                        0 70E8 A   
.258                        0 70D9 A   .259                        0 70E0 A   
.25A                        0 709C A   .25B                        0 70E8 A   
.25C                        0 7133 A   .25D                        0 7124 A   
.25E                        0 712B A   .25F                        0 70F8 A   
.26                         0 382B A   .260                        0 7133 A   
.261                        0 741D A   .262                        0 71AD A   
.263                        0 734E A   .264                        0 733F A   
.265                        0 7346 A   .266                        0 7317 A   
.267                        0 734E A   .268                        0 74DD A   
.269                        0 7428 A   .26A                        0 74C7 A   
.26B                        0 74B8 A   .26C                        0 74BF A   
.26D                        0 7499 A   .26E                        0 74C7 A   
.26F                        0 779F A   .27                         0 3854 A   
.270                        0 74F5 A   .271                        0 7564 A   
.272                        0 7555 A   .273                        0 755C A   
.274                        0 7528 A   .275                        0 7564 A   
.276                        0 75E9 A   .277                        0 75DA A   
.278                        0 75E1 A   .279                        0 75A5 A   
.27A                        0 75D3 A   .27B                        0 75AD A   
.27C                        0 75E9 A   .27D                        0 760B A   
.27E                        0 7603 A   .27F                        0 76AC A   
.28                         0 3854 A   .280                        0 769D A   
.281                        0 76A4 A   .282                        0 7668 A   
.283                        0 76AC A   .284                        0 7705 A   
.285                        0 76F6 A   .286                        0 76FD A   
.287                        0 76C9 A   .288                        0 7705 A   
.289                        0 7A1A A   .28A                        0 77AA A   
.28B                        0 794B A   .28C                        0 793C A   
.28D                        0 7943 A   .28E                        0 7914 A   
.28F                        0 794B A   .29                         0 3869 A   
.290                        0 7ABB A   .291                        0 7A25 A   
.292                        0 7AA7 A   .293                        0 7A98 A   
.294                        0 7A9F A   .295                        0 7A78 A   
.296                        0 7AA7 A   .297                        0 7AFD A   
.298                        0 7AEF A   .299                        0 7AF6 A   
.29A                        0 7AD3 A   .29B                        0 7AEF A   
.29C                        0 7AE7 A   .29D                        0 7AFD A   
.29E                        0 7D76 A   .29F                        0 7D60 A   
.2A                         0 3869 A   .2A0                        0 7C5C A   
.2A1                        0 7C71 A   .2A2                        0 7C63 A   
.2A3                        0 7D59 A   .2A4                        0 7D49 A   
.2A5                        0 7C7A A   .2A6                        0 7CA9 A   
.2A7                        0 7C88 A   .2A8                        0 7C81 A   
.2A9                        0 7D47 A   .2AA                        0 7D47 A   
.2AB                        0 7CB2 A   .2AC                        0 7CD6 A   
.2AD                        0 7CD0 A   .2AE                        0 7D42 A   
.2AF                        0 7D33 A   .2B                         0 387E A   
.2B0                        0 7D3A A   .2B1                        0 7CE9 A   
.2B2                        0 7D1B A   .2B3                        0 7D08 A   
.2B4                        0 7D2C A   .2B5                        0 7D42 A   
.2B6                        0 7D59 A   .2B7                        0 7D76 A   
.2B8                        0 97F0 A   .2B9                        0 97E5 A   
.2BA                        0 97A2 A   .2BB                        0 97DC A   
.2BC                        0 97AC A   .2BD                        0 97BC A   
.2BE                        0 97B3 A   .2BF                        0 97DA A   
.2C                         0 387E A   .2C0                        0 97D1 A   
.2C1                        0 97C8 A   .2C2                        0 97DA A   
.2C3                        0 97E5 A   .2C4                        0 97F0 A   
.2C5                        0 990A A   .2C6                        0 9903 A   
.2C7                        0 98E3 A   .2C8                        0 98DB A   
.2C9                        0 98D3 A   .2CA                        0 98CB A   
.2CB                        0 98FB A   .2CC                        0 98F3 A   
.2CD                        0 98EB A   .2CE                        0 99CE A   
.2CF                        0 9983 A   .2D                         0 3893 A   
.2D0                        0 99E6 A   .2D1                        0 9A93 A   
.2D2                        0 9A85 A   .2D3                        0 99E6 A   
.2D4                        0 9A7A A   .2D5                        0 9A4E A   
.2D6                        0 9A44 A   .2D7                        0 9A2D A   
.2D8                        0 9A7A A   .2D9                        0 9A93 A   
.2DA                        0 9AEB A   .2DB                        0 9AED A   
.2DC                        0 9BA8 A   .2DD                        0 9B1C A   
.2DE                        0 9B5C A   .2DF                        0 9B56 A   
.2E                         0 38A2 A   .2E0                        0 9B82 A   
.2E1                        0 9B71 A   .2E2                        0 9BA0 A   
.2E3                        0 9B8C A   .2E4                        0 9BAE A   
.2E5                        0 9BCE A   .2E6                        0 9BB6 A   
.2E7                        0 9BFE A   .2E8                        0 9C00 A   
.2E9                        0 9C10 A   .2EA                        0 9C0C A   
.2EB                        0 9C12 A   .2EC                        0 9C24 A   
.2ED                        0 9C20 A   .2EE                        0 9C26 A   
.2EF                        0 9C5D A   .2F                         0 38C0 A   
.2F0                        0 9C3A A   .2F1                        0 9D02 A   
.2F2                        0 9C79 A   .2F3                        0 9C94 A   
.2F4                        0 9C8B A   .2F5                        0 9D16 A   
.2F6                        0 9D16 A   .2F7                        0 9D10 A   
.2F8                        0 9D9A A   .2F9                        0 9D96 A   
.2FA                        0 9DE4 A   .2FB                        0 9DD5 A   
.2FC                        0 9DDC A   .2FD                        0 9DA2 A   
.2FE                        0 9DD5 A   .2FF                        0 9DAA A   
.3                          0 3B07 A   .30                         0 38CE A   
.300                        0 9DE4 A   .301                        0 9E2C A   
.302                        0 9E0E A   .303                        0 9F11 A   
.304                        0 9F11 A   .305                        0 9F02 A   
.306                        0 9F09 A   .307                        0 9ED6 A   
.308                        0 9F11 A   .309                        0 9FEA A   
.30B                        0 9FD8 A   .30C                        0 9F2F A   
.30D                        0 9F4C A   .30E                        0 9F43 A   
.30F                        0 9F5E A   .31                         0 38DC A   
.310                        0 9F94 A   .311                        0 9F88 A   
.312                        0 9F96 A   .313                        0 9FCC A   
.314                        0 9FC0 A   .315                        0 9FCE A   
.32                         0 38EA A   .33                         0 3963 A   
.34                         0 39B0 A   .36                         0 39A4 A   
.37                         0 3968 A   .38                         0 396D A   
.39                         0 398B A   .3A                         0 39B3 A   
.3B                         0 39E7 A   .3C                         0 3A03 A   
.3D                         0 3A47 A   .3F                         0 3A3B A   
.4                          0 3630 A   .40                         0 3A08 A   
.41                         0 3A17 A   .42                         0 3A28 A   
.43                         0 3A54 A   .44                         0 3AFD A   
.45                         0 3A5D A   .46                         0 3AFB A   
.48                         0 3AD0 A   .49                         0 3A62 A   
.4A                         0 3A75 A   .4B                         0 3A8A A   
.4C                         0 3A9F A   .4D                         0 3AB8 A   
.4E                         0 3AC0 A   .4F                         0 3AC8 A   
.5                          0 368B A   .50                         0 3AF9 A   
.51                         0 3AE3 A   .52                         0 3B03 A   
.53                         0 3B54 A   .54                         0 3B1A A   
.55                         0 3B7B A   .56                         0 3B73 A   
.57                         0 3B9C A   .58                         0 3B98 A   
.59                         0 3D6F A   .5A                         0 3C2A A   
.5B                         0 3C9C A   .5D                         0 3C8C A   
.5E                         0 3C6A A   .5F                         0 3C72 A   
.60                         0 3C7A A   .61                         0 3C82 A   
.62                         0 3D59 A   .63                         0 3D48 A   
.64                         0 3D4F A   .65                         0 3CA4 A   
.66                         0 3D21 A   .67                         0 3CC5 A   
.68                         0 3D48 A   .69                         0 3D59 A   
.6A                         0 3D6F A   .6B                         0 3D62 A   
.6C                         0 3DBF A   .6D                         0 3DB0 A   
.6E                         0 3DB7 A   .6F                         0 3D7F A   
.7                          0 3666 A   .70                         0 3DBF A   
.71                         0 3E44 A   .72                         0 3E35 A   
.73                         0 3E3C A   .74                         0 3DFD A   
.75                         0 3E44 A   .76                         0 3E8B A   
.77                         0 3E7C A   .78                         0 3E83 A   
.79                         0 3E4B A   .7A                         0 3E8B A   
.7B                         0 3EA6 A   .7C                         0 3EA1 A   
.7D                         0 3EA9 A   .7E                         0 3F00 A   
.7F                         0 3EF1 A   .8                          0 3642 A   
.80                         0 3EF8 A   .81                         0 3EC0 A   
.82                         0 3F00 A   .83                         0 4000 A   
.84                         0 3F3F A   .85                         0 3F7B A   
.86                         0 3F55 A   .87                         0 4000 A   
.88                         0 3FA6 A   .89                         0 3F82 A   
.8A                         0 4000 A   .8B                         0 413D A   
.8C                         0 412F A   .8D                         0 415F A   
.8E                         0 4150 A   .8F                         0 4157 A   
.9                          0 364E A   .90                         0 4144 A   
.91                         0 415F A   .92                         0 418B A   
.93                         0 417D A   .94                         0 41F1 A   
.96                         0 41E2 A   .97                         0 41A3 A   
.98                         0 41B8 A   .99                         0 41CC A   
.9A                         0 42BF A   .9B                         0 426F A   
.9C                         0 4268 A   .9D                         0 4261 A   
.9E                         0 4259 A   .9F                         0 4298 A   
.A                          0 364E A   .A0                         0 4283 A   
.A1                         0 42AC A   .A2                         0 4321 A   
.A3                         0 431D A   .A4                         0 440C A   
.A5                         0 4354 A   .A6                         0 4444 A   
.A7                         0 4440 A   .A8                         0 4496 A   
.A9                         0 4492 A   .AA                         0 44C0 A   
.AB                         0 44BC A   .AC                         0 4558 A   
.AD                         0 44EA A   .AE                         0 457C A   
.AF                         0 46A4 A   .B                          0 364E A   
.B0                         0 4695 A   .B1                         0 469C A   
.B2                         0 4659 A   .B3                         0 46A4 A   
.B4                         0 472F A   .B5                         0 4720 A   
.B6                         0 4727 A   .B7                         0 46F6 A   
.B8                         0 472F A   .B9                         0 484F A   
.BA                         0 483E A   .BB                         0 4845 A   
.BC                         0 479D A   .BD                         0 47FC A   
.BE                         0 47A6 A   .BF                         0 483E A   
.C                          0 364E A   .C0                         0 484F A   
.C1                         0 4904 A   .C2                         0 48F5 A   
.C3                         0 48FC A   .C4                         0 4887 A   
.C5                         0 48C8 A   .C6                         0 4890 A   
.C7                         0 48F5 A   .C8                         0 4904 A   
.C9                         0 491A A   .CA                         0 4916 A   
.CB                         0 4926 A   .CC                         0 4922 A   
.CD                         0 4950 A   .CE                         0 494C A   
.CF                         0 498D A   .D                          0 364E A   
.D0                         0 497C A   .D1                         0 499E A   
.D2                         0 4997 A   .D3                         0 49AF A   
.D4                         0 49A8 A   .D5                         0 49BE A   
.D6                         0 49B9 A   .D7                         0 4C35 A   
.D8                         0 49E5 A   .D9                         0 4A6F A   
.DA                         0 4A3A A   .DB                         0 4A28 A   
.DC                         0 4A16 A   .DD                         0 4A0F A   
.DE                         0 4A08 A   .DF                         0 4C32 A   
.E                          0 364E A   .E0                         0 4B54 A   
.E1                         0 4A78 A   .E2                         0 4B51 A   
.E3                         0 4B3E A   .E4                         0 4B45 A   
.E5                         0 4A83 A   .E6                         0 4AE3 A   
.E7                         0 4AA1 A   .E8                         0 4A9A A   
.E9                         0 4B3E A   .EA                         0 4B51 A   
.EB                         0 4C32 A   .EC                         0 4C32 A   
.ED                         0 4C1F A   .EE                         0 4C26 A   
.EF                         0 4B5F A   .F                          0 364E A   
.F0                         0 4BB8 A   .F1                         0 4B76 A   
.F2                         0 4B6F A   .F3                         0 4C13 A   
.F4                         0 4C1F A   .F5                         0 4C1D A   
.F6                         0 4C32 A   .F7                         0 500A A   
.F8                         0 500A A   .FA                         0 4FF8 A   
.FB                         0 4C67 A   .FC                         0 4C67 A   
.FD                         0 4CF9 A   .FE                         0 4CA4 A   
.FF                         0 4C92 A   _biosfn_alternate_prtsc     0 6B8F A   
_biosfn_enable_video_refre+ 0 6C6A A   _biosfn_get_cursor_pos      0 4410 A   
_biosfn_get_font_info       0 69B5 A   _biosfn_load_gfx_8_14_char+ 0 69B2 A   
_biosfn_load_gfx_8_16_char+ 0 69B4 A   _biosfn_load_gfx_8_8_chars  0 69B0 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69B3 A   _biosfn_load_gfx_user_char+ 0 69B1 A   
_biosfn_load_text_8_14_pat  0 67EA A   _biosfn_load_text_8_16_pat  0 691F A   
_biosfn_load_text_8_8_pat   0 6881 A   _biosfn_load_text_user_pat  0 674E A   
_biosfn_perform_gray_scale+ 0 64A7 A   _biosfn_read_char_attr      0 500E A   
_biosfn_read_pixel          0 5C51 A   _biosfn_read_state_info     0 6D77 A   
_biosfn_read_video_state_s+ 0 6EF6 A   _biosfn_read_video_state_s+ 0 6EAF A   
_biosfn_restore_video_stat+ 0 74E4 A   _biosfn_save_video_state    0 6F1A A   
_biosfn_scroll              0 4908 A   _biosfn_set_active_page     0 4485 A   
_biosfn_set_cursor_pos      0 4310 A   _biosfn_set_cursor_shape    0 41F5 A   
_biosfn_set_video_mode      0 3B5D A   _biosfn_switch_video_inter+ 0 6C69 A   
_biosfn_write_char_attr     0 5553 A   _biosfn_write_char_only     0 5747 A   
_biosfn_write_pixel         0 59B5 A   _biosfn_write_string        0 6C6B A   
_biosfn_write_teletype      0 5E57 A   _dac_regs                   0 0288 A   
_dispi_get_max_bpp          0 95A1 A   _dispi_get_max_xres         0 957F A   
_dispi_set_bank             0 95E1 A   _dispi_set_bank_farcall     0 95FF A   
_dispi_set_bpp              0 9548 A   _dispi_set_enable           0 95C3 A   
_dispi_set_xres             0 9513 A   _dispi_set_yres             0 952A A   
_display_info               0 35DE A   _display_splash_screen      0 35DD A   
_display_string             0 35FC A   _fail                       0 A0F2 A   
_find_vga_entry             0 7AC2 A   _get_SS                     0 7C3A A E 
_get_font_access            0 65AE A   _inb                        0 7C04 A E 
_int10_func                 0 3623 A   _inw                        0 7C0F A E 
_line_to_vpti               0 0278 A   _memcpyb                    0 7B4E A   
_memcpyw                    0 7B7E A   _memsetb                    0 7B04 A   
_memsetw                    0 7B29 A   _mode_info_find_mode        0 9795 A   
_mode_info_list             0 7DDE A   _no_vbebios_info_string     0 93C0 A   
_outb                       0 7C1A A E _outw                       0 7C2A A E 
_palette0                   0 0A0C A   _palette1                   0 0ACC A   
_palette2                   0 0B8C A   _palette3                   0 0C4C A   
_pci_get_lfb_addr           0 7D7A A   _printf                     0 7C3D A E 
_read_byte                  0 7BAE A   _read_word                  0 7BC1 A   
_release_font_access        0 65D1 A   _set_scan_lines             0 6605 A   
_static_functionality       0 0F4C A   _vbe_biosfn_read_video_sta+ 0 9D4E A E 
_vbe_biosfn_restore_video_+ 0 9DE8 A E _vbe_biosfn_return_control+ 0 986D A E 
_vbe_biosfn_return_mode_in+ 0 9AC5 A E _vbe_biosfn_save_restore_s+ 0 9F15 A E 
_vbe_biosfn_save_video_sta+ 0 9D56 A E _vbe_biosfn_set_get_palett+ 0 A0DC A E 
_vbe_biosfn_set_mode        0 9BE1 A E _vbe_has_vbe_display        0 97F6 A   
_vbebios_copyright          0 931E A   _vbebios_info_string        0 939A A   
_vbebios_product_name       0 937C A   _vbebios_product_revision   0 9395 A   
_vbebios_vendor_name        0 9364 A   _vga_compat_setup           0 96BE A   
_vga_modes                  0 01F8 A   _vgafont14                  0 175C A   
_vgafont14alt               0 355C A   _vgafont16                  0 255C A   
_vgafont16alt               0 355D A   _vgafont8                   0 0F5C A   
_vgamem_copy_cga            0 4741 A   _vgamem_copy_pl4            0 45F4 A   
_vgamem_fill_cga            0 4853 A   _vgamem_fill_pl4            0 46B6 A   
_video_param_table          0 028C A   _video_save_pointer_table   0 35C1 A   
_write_byte                 0 7BD4 A   _write_gfx_char_cga         0 527C A   
_write_gfx_char_lin         0 547F A   _write_gfx_char_pl4         0 5109 A   
_write_word                 0 7BEC A   biosfn_enable_cursor_emula+ 0 6C47 A   
biosfn_enable_default_pale+ 0 6BE3 A   biosfn_enable_grayscale_su+ 0 6C23 A   
biosfn_enable_video_addres+ 0 6C05 A   biosfn_get_all_palette_reg  0 634C A   
biosfn_get_ega_info         0 6B6C A   biosfn_get_single_palette_+ 0 631A A   
biosfn_get_video_mode       0 6217 A   biosfn_group_0B             0 593D A   
biosfn_group_10             0 623E A   biosfn_group_1A             0 6D44 A   
biosfn_read_all_dac_reg     0 642C A   biosfn_read_display_code    0 6D4D A   
biosfn_read_overscan_borde+ 0 633E A   biosfn_read_pel_mask        0 645F A   
biosfn_read_single_dac_reg  0 6411 A   biosfn_read_video_dac_stat+ 0 646A A   
biosfn_select_vert_res      0 6B90 A   biosfn_select_video_dac_co+ 0 63CE A   
biosfn_set_all_dac_reg      0 63A6 A   biosfn_set_all_palette_reg  0 62C7 A   
biosfn_set_border_color     0 5948 A   biosfn_set_display_code     0 6D62 A   
biosfn_set_overscan_border+ 0 62BF A   biosfn_set_palette          0 5987 A   
biosfn_set_pel_mask         0 6454 A   biosfn_set_single_dac_reg   0 638D A   
biosfn_set_single_palette_+ 0 62A5 A   biosfn_set_text_block_spec+ 0 6912 A   
biosfn_toggle_intensity     0 62F4 A   bit8_clear                  0 9706 A   
bit9_clear                  0 970D A   bpp4_mode                   0 94A7 A   
dispi_get_bank              0 95F1 A   dispi_get_bpp               0 9566 A   
dispi_get_enable            0 95D3 A   dispi_get_id                0 94F5 A   
dispi_get_virt_height       0 96B0 A   dispi_get_virt_width        0 96A2 A   
dispi_get_x_offset          0 9646 A   dispi_get_y_offset          0 9664 A   
dispi_set_bank_farcall_err+ 0 9631 A   dispi_set_bank_farcall_get  0 9623 A   
dispi_set_id                0 9503 A   dispi_set_virt_width        0 968F A   
dispi_set_x_offset          0 9636 A   dispi_set_y_offset          0 9654 A   
get_bpp_noinc               0 957D A   get_dac_16_page             0 649A A   
get_dac_palette_format      0 A0C8 A   get_display_start           0 A095 A   
get_display_window          0 A01D A   get_logical_scan_line_leng+ 0 A055 A   
get_palette_loop            0 6354 A   idiv_u                      0 6600 A   
illegal_window              0 943A A   init_bios_area              0 3589 A   
init_vga_card               0 355E A   int10_end                   0 01F6 A   
int10_group_10_unknown      0 62A4 A   int10_normal                0 01E8 A   
int10_test_0B               0 0145 A   int10_test_1001             0 6244 A   
int10_test_1002             0 624A A   int10_test_1003             0 6250 A   
int10_test_1007             0 6257 A   int10_test_1008             0 625E A   
int10_test_1009             0 6265 A   int10_test_1010             0 626C A   
int10_test_1012             0 6273 A   int10_test_1013             0 627A A   
int10_test_1015             0 6281 A   int10_test_1017             0 6288 A   
int10_test_1018             0 628F A   int10_test_1019             0 6296 A   
int10_test_101A             0 629D A   int10_test_101B             0 019E A   
int10_test_1103             0 0150 A   int10_test_12               0 015B A   
int10_test_1A               0 013A A   int10_test_4F               0 01AD A   
int10_test_BL30             0 016B A   int10_test_BL31             0 0176 A   
int10_test_BL32             0 0180 A   int10_test_BL33             0 018A A   
int10_test_BL34             0 0194 A   int10_test_vbe_05           0 01BB A   
int10_test_vbe_06           0 01C4 A   int10_test_vbe_07           0 01CD A   
int10_test_vbe_08           0 01D6 A   int10_test_vbe_0A           0 01DF A   
lmulul                      0 9854 A   memcpyb_end                 0 7B76 A   
memcpyw_end                 0 7BA6 A   memsetb_end                 0 7B23 A   
memsetw_end                 0 7B48 A   mode_ega_color              0 6B8C A   
msg_vbe_init                0 93E4 A   msg_vga_init                0 357A A   
no_4bpp_1                   0 A04D A   no_4bpp_2                   0 A06A A   
no_actl_reg1                0 62BE A   no_actl_reg2                0 633D A   
no_vbe_flag                 0 9849 A   no_vbe_interface            0 982D A   
no_vbe_mode                 0 9D40 A   pci_get_lfb_addr_fail       0 7D9F A   
pci_get_lfb_addr_found      0 7DA3 A   pci_get_lfb_addr_next_dev   0 7D8D A   
pci_get_lfb_addr_return     0 7DBD A   pci_get_lfb_addr_success    0 7DB7 A   
pci_read_reg                0 7DC5 A   read_dac_loop               0 643D A   
set_actl_normal             0 640A A   set_cga_palette_loop        0 5994 A   
set_dac_16_page             0 6404 A   set_dac_loop                0 63B7 A   
set_dac_mode                0 A0C5 A   set_dac_page                0 63F1 A   
set_dac_palette_format      0 A0B0 A   set_display_start           0 A087 A   
set_display_window          0 A00D A   set_intensity_loop          0 5966 A   
set_logical_scan_line_byte+ 0 A03C A   set_logical_scan_line_pixe+ 0 A052 A   
set_low_border              0 5960 A   set_normal_dac              0 A0C2 A   
set_palette_loop            0 62D6 A   set_retcode                 0 6BDC A   
set_vert_res                0 6BD2 A   set_width_svga              0 9680 A   
set_xy_regs                 0 94B3 A   vbe_03_ok                   0 9D49 A   
vbe_05_failed               0 A026 A   vbe_08_ok                   0 A0D4 A   
vbe_08_unsupported          0 A0D8 A   vbe_biosfn_display_window_+ 0 9FFD A   
vbe_biosfn_return_current_+ 0 9D29 A   vbe_biosfn_return_protecte+ 0 A0DD A   
vbe_biosfn_set_get_dac_pal+ 0 A0A5 A   vbe_biosfn_set_get_display+ 0 A077 A   
vbe_biosfn_set_get_logical+ 0 A02A A   vbe_display_info            0 9837 A   
vbe_init                    0 9809 A   vert_res_200                0 6BC8 A   
vert_res_350                0 6BBE A   vert_res_400                0 6BB2 A   
vesa_pm_end                 0 94F5 A   vesa_pm_io_ports_table      0 93FC A   
vesa_pm_set_display_start   0 943F A   vesa_pm_set_display_start1  0 944E A   
vesa_pm_set_display_window+ 0 9413 A   vesa_pm_set_window          0 9408 A   
vesa_pm_start               0 93F4 A   vesa_pm_unimplemented       0 94F0 A   
vga_compat_end              0 9793 A   vga_set_virt_width          0 9672 A   
vgabios_copyright           0 004D A   vgabios_date                0 003F A   
vgabios_end                 0 A108 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0104 A   vgabios_int10_handler       0 012E A   
vgabios_license             0 0079 A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00AE A   

00000 errors
00000 warnings
