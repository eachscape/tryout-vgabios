00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91    Bit
00156                                           ! 91 8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos();
00321                                           !BCC_EOS
00322                                           ! 180 st
00323                                           ! 180 atic void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         0103              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        63            .ascii "current-cvs"
00413 0043                        20            .ascii " "
00414                       00000044            vgabios_date:
00415 0044                        30            .ascii "09 Sep 2011"
00416 004F                        0A            .byte 0x0a,0x0d
00417 0051                        00            .byte 0x00
00418                       00000052            vgabios_copyright:
00419 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 007B                        0A            .byte 0x0a,0x0d
00421 007D                        00            .byte 0x00
00422                       0000007E            vgabios_license:
00423 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00AE                        0A            .byte 0x0a,0x0d
00425 00B0                        0A            .byte 0x0a,0x0d
00426 00B2                        00            .byte 0x00
00427                       000000B3            vgabios_website:
00428 00B3                        50            .ascii "Please visit :"
00429 00C1                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00433 00E2                        0A            .byte 0x0a,0x0d
00434 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 0104                        0A            .byte 0x0a,0x0d
00436 0106                        0A            .byte 0x0a,0x0d
00437 0108                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000109            vgabios_init_func:
00444                                           ;; init vga card
00445 0109           E8         3457              call init_vga_card
00446                                           ;; init basic bios vars
00447 010C           E8         34B3              call init_bios_area
00448                                           ;; init vbe functions
00449 010F           E8         95EF              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00452                                           ;; display splash screen
00453 0124           E8         34EF              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0127           B8                   0003    mov ax,#0x0003
00456 012A           CD                     10    int #0x10
00457                                           ;; show info
00458 012C           E8         34E8              call _display_info
00459                                           ;; show vbe info
00460 012F           E8         95FD              call vbe_display_info
00461 0132           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       00000133            vgabios_int10_handler:
00467 0133           9C                           pushf
00468                                           
00469 0134           80FC                   0F    cmp ah, #0x0f
00470 0137           75           06              jne int10_test_1A
00471 0139           E8         6115              call biosfn_get_video_mode
00472 013C           E9         00BC              jmp int10_end
00473                       0000013F            int10_test_1A:
00474 013F           80FC                   1A    cmp ah, #0x1a
00475 0142           75           06              jne int10_test_0B
00476 0144           E8         6C37              call biosfn_group_1A
00477 0147           E9         00B1              jmp int10_end
00478                       0000014A            int10_test_0B:
00479 014A           80FC                   0B    cmp ah, #0x0b
00480 014D           75           06              jne int10_test_1103
00481 014F           E8         5822              call biosfn_group_0B
00482 0152           E9         00A6              jmp int10_end
00483                       00000155            int10_test_1103:
00484 0155           3D                   1103    cmp ax, #0x1103
00485 0158           75           06              jne int10_test_12
00486 015A           E8         67EF              call biosfn_set_text_block_specifier
00487 015D           E9         009B              jmp int10_end
00488                       00000160            int10_test_12:
00489 0160           80FC                   12    cmp ah, #0x12
00490 0163           75           3E              jne int10_test_101B
00491 0165           80FB                   10    cmp bl, #0x10
00492 0168           75           06              jne int10_test_BL30
00493 016A           E8         6A39              call biosfn_get_ega_info
00494 016D           E9         008B              jmp int10_end
00495                       00000170            int10_test_BL30:
00496 0170           80FB                   30    cmp bl, #0x30
00497 0173           75           06              jne int10_test_BL31
00498 0175           E8         6A52              call biosfn_select_vert_res
00499 0178           E9         0080              jmp int10_end
00500                       0000017B            int10_test_BL31:
00501 017B           80FB                   31    cmp bl, #0x31
00502 017E           75           05              jne int10_test_BL32
00503 0180           E8         6A9A              call biosfn_enable_default_palette_loading
00504 0183           EB           76              jmp int10_end
00505                       00000185            int10_test_BL32:
00506 0185           80FB                   32    cmp bl, #0x32
00507 0188           75           05              jne int10_test_BL33
00508 018A           E8         6AB2              call biosfn_enable_video_addressing
00509 018D           EB           6C              jmp int10_end
00510                       0000018F            int10_test_BL33:
00511 018F           80FB                   33    cmp bl, #0x33
00512 0192           75           05              jne int10_test_BL34
00513 0194           E8         6AC6              call biosfn_enable_grayscale_summing
00514 0197           EB           62              jmp int10_end
00515                       00000199            int10_test_BL34:
00516 0199           80FB                   34    cmp bl, #0x34
00517 019C           75           4F              jne int10_normal
00518 019E           E8         6AE0              call biosfn_enable_cursor_emulation
00519 01A1           EB           58              jmp int10_end
00520                       000001A3            int10_test_101B:
00521 01A3           3D                   101B    cmp ax, #0x101b
00522 01A6           74           45              je int10_normal
00523 01A8           80FC                   10    cmp ah, #0x10
00524                                           
00525                                           
00526                                           
00527 01AB           75           05              jne int10_test_4F
00528                                           
00529 01AD           E8         60C8              call biosfn_group_10
00530 01B0           EB           49              jmp int10_end
00531                                           
00532                       000001B2            int10_test_4F:
00533 01B2           80FC                   4F    cmp ah, #0x4f
00534 01B5           75           36              jne int10_normal
00535 01B7           3C                     03    cmp al, #0x03
00536 01B9           75           05              jne int10_test_vbe_05
00537 01BB           E8         9A63              call vbe_biosfn_return_current_mode
00538 01BE           EB           3B              jmp int10_end
00539                       000001C0            int10_test_vbe_05:
00540 01C0           3C                     05    cmp al, #0x05
00541 01C2           75           05              jne int10_test_vbe_06
00542 01C4           E8         9D2E              call vbe_biosfn_display_window_control
00543 01C7           EB           32              jmp int10_end
00544                       000001C9            int10_test_vbe_06:
00545 01C9           3C                     06    cmp al, #0x06
00546 01CB           75           05              jne int10_test_vbe_07
00547 01CD           E8         9D52              call vbe_biosfn_set_get_logical_scan_line_length
00548 01D0           EB           29              jmp int10_end
00549                       000001D2            int10_test_vbe_07:
00550 01D2           3C                     07    cmp al, #0x07
00551 01D4           75           05              jne int10_test_vbe_08
00552 01D6           E8         9D96              call vbe_biosfn_set_get_display_start
00553 01D9           EB           20              jmp int10_end
00554                       000001DB            int10_test_vbe_08:
00555 01DB           3C                     08    cmp al, #0x08
00556 01DD           75           05              jne int10_test_vbe_0A
00557 01DF           E8         9DBB              call vbe_biosfn_set_get_dac_palette_format
00558 01E2           EB           17              jmp int10_end
00559                       000001E4            int10_test_vbe_0A:
00560 01E4           3C                     0A    cmp al, #0x0A
00561 01E6           75           05              jne int10_normal
00562 01E8           E8         9DEA              call vbe_biosfn_return_protected_mode_interface
00563 01EB           EB           0E              jmp int10_end
00564                                           
00565                                           
00566                       000001ED            int10_normal:
00567 01ED           06                           push es
00568 01EE           1E                           push ds
00569 01EF           60                           pusha
00570                                           
00571                                           ;; We have to set ds to access the right data segment
00572 01F0           BB                   C000    mov bx, #0xc000
00573 01F3           8EDB                         mov ds, bx
00574 01F5           E8         3464              call _int10_func
00575                                           
00576 01F8           61                           popa
00577 01F9           1F                           pop ds
00578 01FA           07                           pop es
00579                       000001FB            int10_end:
00580 01FB           9D                           popf
00581 01FC           CF                           iret
00582                                           ! 406 endasm
00583                                           !BCC_ENDASM
00584                                           ! 407 typedef struct
00585                                           ! 408 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 409  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 410  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 411  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 412  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 413  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 414  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 415 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 416 static VGAMODES vga_modes[15 +1]=
00602                                           ! 417 {
00603                                           
00604                       000001FD            _vga_modes:
00605                                           ! 418  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 01FD                        00            .byte	0
00607 01FE                        00            .byte	0
00608 01FF                        00            .byte	0
00609 0200                        04            .byte	4
00610 0201                      B800            .word	$B800
00611 0203                        FF            .byte	$FF
00612 0204                        02            .byte	2
00613                                           ! 419  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 0205                        01            .byte	1
00615 0206                        00            .byte	0
00616 0207                        00            .byte	0
00617 0208                        04            .byte	4
00618 0209                      B800            .word	$B800
00619 020B                        FF            .byte	$FF
00620 020C                        02            .byte	2
00621                                           ! 420  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 020D                        02            .byte	2
00623 020E                        00            .byte	0
00624 020F                        00            .byte	0
00625 0210                        04            .byte	4
00626 0211                      B800            .word	$B800
00627 0213                        FF            .byte	$FF
00628 0214                        02            .byte	2
00629                                           ! 421  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 0215                        03            .byte	3
00631 0216                        00            .byte	0
00632 0217                        00            .byte	0
00633 0218                        04            .byte	4
00634 0219                      B800            .word	$B800
00635 021B                        FF            .byte	$FF
00636 021C                        02            .byte	2
00637                                           ! 422  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 021D                        04            .byte	4
00639 021E                        01            .byte	1
00640 021F                        02            .byte	2
00641 0220                        02            .byte	2
00642 0221                      B800            .word	$B800
00643 0223                        FF            .byte	$FF
00644 0224                        01            .byte	1
00645                                           ! 423  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 0225                        05            .byte	5
00647 0226                        01            .byte	1
00648 0227                        02            .byte	2
00649 0228                        02            .byte	2
00650 0229                      B800            .word	$B800
00651 022B                        FF            .byte	$FF
00652 022C                        01            .byte	1
00653                                           ! 424  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 022D                        06            .byte	6
00655 022E                        01            .byte	1
00656 022F                        02            .byte	2
00657 0230                        01            .byte	1
00658 0231                      B800            .word	$B800
00659 0233                        FF            .byte	$FF
00660 0234                        01            .byte	1
00661                                           ! 425  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 0235                        07            .byte	7
00663 0236                        00            .byte	0
00664 0237                        01            .byte	1
00665 0238                        04            .byte	4
00666 0239                      B000            .word	$B000
00667 023B                        FF            .byte	$FF
00668 023C                        00            .byte	0
00669                                           ! 426  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 023D                        0D            .byte	$D
00671 023E                        01            .byte	1
00672 023F                        04            .byte	4
00673 0240                        04            .byte	4
00674 0241                      A000            .word	$A000
00675 0243                        FF            .byte	$FF
00676 0244                        01            .byte	1
00677                                           ! 427  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 0245                        0E            .byte	$E
00679 0246                        01            .byte	1
00680 0247                        04            .byte	4
00681 0248                        04            .byte	4
00682 0249                      A000            .word	$A000
00683 024B                        FF            .byte	$FF
00684 024C                        01            .byte	1
00685                                           ! 428  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 024D                        0F            .byte	$F
00687 024E                        01            .byte	1
00688 024F                        03            .byte	3
00689 0250                        01            .byte	1
00690 0251                      A000            .word	$A000
00691 0253                        FF            .byte	$FF
00692 0254                        00            .byte	0
00693                                           ! 429  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 0255                        10            .byte	$10
00695 0256                        01            .byte	1
00696 0257                        04            .byte	4
00697 0258                        04            .byte	4
00698 0259                      A000            .word	$A000
00699 025B                        FF            .byte	$FF
00700 025C                        02            .byte	2
00701                                           ! 430  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 025D                        11            .byte	$11
00703 025E                        01            .byte	1
00704 025F                        03            .byte	3
00705 0260                        01            .byte	1
00706 0261                      A000            .word	$A000
00707 0263                        FF            .byte	$FF
00708 0264                        02            .byte	2
00709                                           ! 431  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 0265                        12            .byte	$12
00711 0266                        01            .byte	1
00712 0267                        04            .byte	4
00713 0268                        04            .byte	4
00714 0269                      A000            .word	$A000
00715 026B                        FF            .byte	$FF
00716 026C                        02            .byte	2
00717                                           ! 432  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 026D                        13            .byte	$13
00719 026E                        01            .byte	1
00720 026F                        05            .byte	5
00721 0270                        08            .byte	8
00722 0271                      A000            .word	$A000
00723 0273                        FF            .byte	$FF
00724 0274                        03            .byte	3
00725                                           ! 433  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 0275                        6A            .byte	$6A
00727 0276                        01            .byte	1
00728 0277                        04            .byte	4
00729 0278                        04            .byte	4
00730 0279                      A000            .word	$A000
00731 027B                        FF            .byte	$FF
00732 027C                        02            .byte	2
00733                                           ! 434 };
00734                                           !BCC_EOS
00735                                           ! 435 static Bit8u line_to_vpti[15 +1]={
00736                       0000027D            _line_to_vpti:
00737                                           ! 436     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 027D                        17            .byte	$17
00739 027E                        17            .byte	$17
00740 027F                        18            .byte	$18
00741 0280                        18            .byte	$18
00742 0281                        04            .byte	4
00743 0282                        05            .byte	5
00744 0283                        06            .byte	6
00745 0284                        07            .byte	7
00746                                           ! 437     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 0285                        0D            .byte	$D
00748 0286                        0E            .byte	$E
00749 0287                        11            .byte	$11
00750 0288                        12            .byte	$12
00751 0289                        1A            .byte	$1A
00752 028A                        1B            .byte	$1B
00753 028B                        1C            .byte	$1C
00754 028C                        1D            .byte	$1D
00755                                           ! 438 };
00756                                           !BCC_EOS
00757                                           ! 439 static Bit8u dac_regs[3 +1]=
00758                                           ! 440 {0x3f,0x3f,0x3f,0xff};
00759                       0000028D            _dac_regs:
00760 028D                        3F            .byte	$3F
00761 028E                        3F            .byte	$3F
00762 028F                        3F            .byte	$3F
00763 0290                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 441 typedef struct {
00766                                           ! 442     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 443     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 444     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 445     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 446     Bit8u slength_h;
00775                                           !BCC_EOS
00776                                           ! 447     Bit8u sequ_regs[4];
00777                                           !BCC_EOS
00778                                           ! 448     Bit8u miscreg;
00779                                           !BCC_EOS
00780                                           ! 449     Bit8u crtc_regs[25];
00781                                           !BCC_EOS
00782                                           ! 450     Bit8
00783                                           ! 450 u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 451     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 452 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 453 static VideoParamTableEntry video_param_table[30] = {
00790                       00000291            _video_param_table:
00791                                           ! 454 {
00792                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 0291                        00            .byte	0
00794 0292                        00            .byte	0
00795 0293                        00            .byte	0
00796 0294                        00            .byte	0
00797 0295                        00            .byte	0
00798 0296                        00            .byte	0
00799 0297                        00            .byte	0
00800 0298                        00            .byte	0
00801                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 0299                        00            .byte	0
00803 029A                        00            .byte	0
00804 029B                        00            .byte	0
00805 029C                        00            .byte	0
00806 029D                        00            .byte	0
00807 029E                        00            .byte	0
00808 029F                        00            .byte	0
00809 02A0                        00            .byte	0
00810                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 02A1                        00            .byte	0
00812 02A2                        00            .byte	0
00813 02A3                        00            .byte	0
00814 02A4                        00            .byte	0
00815 02A5                        00            .byte	0
00816 02A6                        00            .byte	0
00817 02A7                        00            .byte	0
00818 02A8                        00            .byte	0
00819                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02A9                        00            .byte	0
00821 02AA                        00            .byte	0
00822 02AB                        00            .byte	0
00823 02AC                        00            .byte	0
00824 02AD                        00            .byte	0
00825 02AE                        00            .byte	0
00826 02AF                        00            .byte	0
00827 02B0                        00            .byte	0
00828                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02B1                        00            .byte	0
00830 02B2                        00            .byte	0
00831 02B3                        00            .byte	0
00832 02B4                        00            .byte	0
00833 02B5                        00            .byte	0
00834 02B6                        00            .byte	0
00835 02B7                        00            .byte	0
00836 02B8                        00            .byte	0
00837                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02B9                        00            .byte	0
00839 02BA                        00            .byte	0
00840 02BB                        00            .byte	0
00841 02BC                        00            .byte	0
00842 02BD                        00            .byte	0
00843 02BE                        00            .byte	0
00844 02BF                        00            .byte	0
00845 02C0                        00            .byte	0
00846                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02C1                        00            .byte	0
00848 02C2                        00            .byte	0
00849 02C3                        00            .byte	0
00850 02C4                        00            .byte	0
00851 02C5                        00            .byte	0
00852 02C6                        00            .byte	0
00853 02C7                        00            .byte	0
00854 02C8                        00            .byte	0
00855                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02C9                        00            .byte	0
00857 02CA                        00            .byte	0
00858 02CB                        00            .byte	0
00859 02CC                        00            .byte	0
00860 02CD                        00            .byte	0
00861 02CE                        00            .byte	0
00862 02CF                        00            .byte	0
00863 02D0                        00            .byte	0
00864                                           ! 463 },
00865                                           ! 464 {
00866                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02D1                        00            .byte	0
00868 02D2                        00            .byte	0
00869 02D3                        00            .byte	0
00870 02D4                        00            .byte	0
00871 02D5                        00            .byte	0
00872 02D6                        00            .byte	0
00873 02D7                        00            .byte	0
00874 02D8                        00            .byte	0
00875                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02D9                        00            .byte	0
00877 02DA                        00            .byte	0
00878 02DB                        00            .byte	0
00879 02DC                        00            .byte	0
00880 02DD                        00            .byte	0
00881 02DE                        00            .byte	0
00882 02DF                        00            .byte	0
00883 02E0                        00            .byte	0
00884                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02E1                        00            .byte	0
00886 02E2                        00            .byte	0
00887 02E3                        00            .byte	0
00888 02E4                        00            .byte	0
00889 02E5                        00            .byte	0
00890 02E6                        00            .byte	0
00891 02E7                        00            .byte	0
00892 02E8                        00            .byte	0
00893                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02E9                        00            .byte	0
00895 02EA                        00            .byte	0
00896 02EB                        00            .byte	0
00897 02EC                        00            .byte	0
00898 02ED                        00            .byte	0
00899 02EE                        00            .byte	0
00900 02EF                        00            .byte	0
00901 02F0                        00            .byte	0
00902                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02F1                        00            .byte	0
00904 02F2                        00            .byte	0
00905 02F3                        00            .byte	0
00906 02F4                        00            .byte	0
00907 02F5                        00            .byte	0
00908 02F6                        00            .byte	0
00909 02F7                        00            .byte	0
00910 02F8                        00            .byte	0
00911                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 02F9                        00            .byte	0
00913 02FA                        00            .byte	0
00914 02FB                        00            .byte	0
00915 02FC                        00            .byte	0
00916 02FD                        00            .byte	0
00917 02FE                        00            .byte	0
00918 02FF                        00            .byte	0
00919 0300                        00            .byte	0
00920                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 0301                        00            .byte	0
00922 0302                        00            .byte	0
00923 0303                        00            .byte	0
00924 0304                        00            .byte	0
00925 0305                        00            .byte	0
00926 0306                        00            .byte	0
00927 0307                        00            .byte	0
00928 0308                        00            .byte	0
00929                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0309                        00            .byte	0
00931 030A                        00            .byte	0
00932 030B                        00            .byte	0
00933 030C                        00            .byte	0
00934 030D                        00            .byte	0
00935 030E                        00            .byte	0
00936 030F                        00            .byte	0
00937 0310                        00            .byte	0
00938                                           ! 473 },
00939                                           ! 474 {
00940                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 0311                        00            .byte	0
00942 0312                        00            .byte	0
00943 0313                        00            .byte	0
00944 0314                        00            .byte	0
00945 0315                        00            .byte	0
00946 0316                        00            .byte	0
00947 0317                        00            .byte	0
00948 0318                        00            .byte	0
00949                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0319                        00            .byte	0
00951 031A                        00            .byte	0
00952 031B                        00            .byte	0
00953 031C                        00            .byte	0
00954 031D                        00            .byte	0
00955 031E                        00            .byte	0
00956 031F                        00            .byte	0
00957 0320                        00            .byte	0
00958                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 0321                        00            .byte	0
00960 0322                        00            .byte	0
00961 0323                        00            .byte	0
00962 0324                        00            .byte	0
00963 0325                        00            .byte	0
00964 0326                        00            .byte	0
00965 0327                        00            .byte	0
00966 0328                        00            .byte	0
00967                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0329                        00            .byte	0
00969 032A                        00            .byte	0
00970 032B                        00            .byte	0
00971 032C                        00            .byte	0
00972 032D                        00            .byte	0
00973 032E                        00            .byte	0
00974 032F                        00            .byte	0
00975 0330                        00            .byte	0
00976                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 0331                        00            .byte	0
00978 0332                        00            .byte	0
00979 0333                        00            .byte	0
00980 0334                        00            .byte	0
00981 0335                        00            .byte	0
00982 0336                        00            .byte	0
00983 0337                        00            .byte	0
00984 0338                        00            .byte	0
00985                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0339                        00            .byte	0
00987 033A                        00            .byte	0
00988 033B                        00            .byte	0
00989 033C                        00            .byte	0
00990 033D                        00            .byte	0
00991 033E                        00            .byte	0
00992 033F                        00            .byte	0
00993 0340                        00            .byte	0
00994                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 0341                        00            .byte	0
00996 0342                        00            .byte	0
00997 0343                        00            .byte	0
00998 0344                        00            .byte	0
00999 0345                        00            .byte	0
01000 0346                        00            .byte	0
01001 0347                        00            .byte	0
01002 0348                        00            .byte	0
01003                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0349                        00            .byte	0
01005 034A                        00            .byte	0
01006 034B                        00            .byte	0
01007 034C                        00            .byte	0
01008 034D                        00            .byte	0
01009 034E                        00            .byte	0
01010 034F                        00            .byte	0
01011 0350                        00            .byte	0
01012                                           ! 483 },
01013                                           ! 484 {
01014                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 0351                        00            .byte	0
01016 0352                        00            .byte	0
01017 0353                        00            .byte	0
01018 0354                        00            .byte	0
01019 0355                        00            .byte	0
01020 0356                        00            .byte	0
01021 0357                        00            .byte	0
01022 0358                        00            .byte	0
01023                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0359                        00            .byte	0
01025 035A                        00            .byte	0
01026 035B                        00            .byte	0
01027 035C                        00            .byte	0
01028 035D                        00            .byte	0
01029 035E                        00            .byte	0
01030 035F                        00            .byte	0
01031 0360                        00            .byte	0
01032                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 0361                        00            .byte	0
01034 0362                        00            .byte	0
01035 0363                        00            .byte	0
01036 0364                        00            .byte	0
01037 0365                        00            .byte	0
01038 0366                        00            .byte	0
01039 0367                        00            .byte	0
01040 0368                        00            .byte	0
01041                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0369                        00            .byte	0
01043 036A                        00            .byte	0
01044 036B                        00            .byte	0
01045 036C                        00            .byte	0
01046 036D                        00            .byte	0
01047 036E                        00            .byte	0
01048 036F                        00            .byte	0
01049 0370                        00            .byte	0
01050                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 0371                        00            .byte	0
01052 0372                        00            .byte	0
01053 0373                        00            .byte	0
01054 0374                        00            .byte	0
01055 0375                        00            .byte	0
01056 0376                        00            .byte	0
01057 0377                        00            .byte	0
01058 0378                        00            .byte	0
01059                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0379                        00            .byte	0
01061 037A                        00            .byte	0
01062 037B                        00            .byte	0
01063 037C                        00            .byte	0
01064 037D                        00            .byte	0
01065 037E                        00            .byte	0
01066 037F                        00            .byte	0
01067 0380                        00            .byte	0
01068                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 0381                        00            .byte	0
01070 0382                        00            .byte	0
01071 0383                        00            .byte	0
01072 0384                        00            .byte	0
01073 0385                        00            .byte	0
01074 0386                        00            .byte	0
01075 0387                        00            .byte	0
01076 0388                        00            .byte	0
01077                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0389                        00            .byte	0
01079 038A                        00            .byte	0
01080 038B                        00            .byte	0
01081 038C                        00            .byte	0
01082 038D                        00            .byte	0
01083 038E                        00            .byte	0
01084 038F                        00            .byte	0
01085 0390                        00            .byte	0
01086                                           ! 493 },
01087                                           ! 494 {
01088                                           ! 495  40, 24, 8, 0x00, 0x08,
01089 0391                        28            .byte	$28
01090 0392                        18            .byte	$18
01091 0393                        08            .byte	8
01092 0394                        00            .byte	0
01093 0395                        08            .byte	8
01094                                           ! 496  0x09, 0x03, 0x00, 0x02,
01095 0396                        09            .byte	9
01096 0397                        03            .byte	3
01097 0398                        00            .byte	0
01098 0399                        02            .byte	2
01099                                           ! 497  0x63,
01100 039A                        63            .byte	$63
01101                                           ! 498  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 039B                        2D            .byte	$2D
01103 039C                        27            .byte	$27
01104 039D                        28            .byte	$28
01105 039E                        90            .byte	$90
01106 039F                        2B            .byte	$2B
01107 03A0                        80            .byte	$80
01108 03A1                        BF            .byte	$BF
01109 03A2                        1F            .byte	$1F
01110                                           ! 499  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 03A3                        00            .byte	0
01112 03A4                        C1            .byte	$C1
01113 03A5                        00            .byte	0
01114 03A6                        00            .byte	0
01115 03A7                        00            .byte	0
01116 03A8                        00            .byte	0
01117 03A9                        00            .byte	0
01118 03AA                        00            .byte	0
01119                                           ! 500  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03AB                        9C            .byte	$9C
01121 03AC                        8E            .byte	$8E
01122 03AD                        8F            .byte	$8F
01123 03AE                        14            .byte	$14
01124 03AF                        00            .byte	0
01125 03B0                        96            .byte	$96
01126 03B1                        B9            .byte	$B9
01127 03B2                        A2            .byte	$A2
01128                                           ! 501  0xff,
01129 03B3                        FF            .byte	$FF
01130                                           ! 502  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01131 03B4                        00            .byte	0
01132 03B5                        13            .byte	$13
01133 03B6                        15            .byte	$15
01134 03B7                        17            .byte	$17
01135 03B8                        02            .byte	2
01136 03B9                        04            .byte	4
01137 03BA                        06            .byte	6
01138 03BB                        07            .byte	7
01139                                           ! 503  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01140 03BC                        10            .byte	$10
01141 03BD                        11            .byte	$11
01142 03BE                        12            .byte	$12
01143 03BF                        13            .byte	$13
01144 03C0                        14            .byte	$14
01145 03C1                        15            .byte	$15
01146 03C2                        16            .byte	$16
01147 03C3                        17            .byte	$17
01148                                           ! 504  0x01, 0x00, 0x03, 0x00,
01149 03C4                        01            .byte	1
01150 03C5                        00            .byte	0
01151 03C6                        03            .byte	3
01152 03C7                        00            .byte	0
01153                                           ! 505  0x00,
01154                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03C8                        00            .byte	0
01156 03C9                        00            .byte	0
01157 03CA                        00            .byte	0
01158 03CB                        00            .byte	0
01159 03CC                        00            .byte	0
01160 03CD                        30            .byte	$30
01161 03CE                        0F            .byte	$F
01162 03CF                        0F            .byte	$F
01163 03D0                        FF            .byte	$FF
01164                                           ! 506 },
01165                                           ! 507 {
01166                                           ! 508  40, 24, 8, 0x00, 0x08,
01167 03D1                        28            .byte	$28
01168 03D2                        18            .byte	$18
01169 03D3                        08            .byte	8
01170 03D4                        00            .byte	0
01171 03D5                        08            .byte	8
01172                                           ! 509  0x09, 0x03, 0x00, 0x02,
01173 03D6                        09            .byte	9
01174 03D7                        03            .byte	3
01175 03D8                        00            .byte	0
01176 03D9                        02            .byte	2
01177                                           ! 510  0x63,
01178 03DA                        63            .byte	$63
01179                                           ! 511  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03DB                        2D            .byte	$2D
01181 03DC                        27            .byte	$27
01182 03DD                        28            .byte	$28
01183 03DE                        90            .byte	$90
01184 03DF                        2B            .byte	$2B
01185 03E0                        80            .byte	$80
01186 03E1                        BF            .byte	$BF
01187 03E2                        1F            .byte	$1F
01188                                           ! 512  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03E3                        00            .byte	0
01190 03E4                        C1            .byte	$C1
01191 03E5                        00            .byte	0
01192 03E6                        00            .byte	0
01193 03E7                        00            .byte	0
01194 03E8                        00            .byte	0
01195 03E9                        00            .byte	0
01196 03EA                        00            .byte	0
01197                                           ! 513  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03EB                        9C            .byte	$9C
01199 03EC                        8E            .byte	$8E
01200 03ED                        8F            .byte	$8F
01201 03EE                        14            .byte	$14
01202 03EF                        00            .byte	0
01203 03F0                        96            .byte	$96
01204 03F1                        B9            .byte	$B9
01205 03F2                        A2            .byte	$A2
01206                                           ! 514  0xff,
01207 03F3                        FF            .byte	$FF
01208                                           ! 515  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03F4                        00            .byte	0
01210 03F5                        13            .byte	$13
01211 03F6                        15            .byte	$15
01212 03F7                        17            .byte	$17
01213 03F8                        02            .byte	2
01214 03F9                        04            .byte	4
01215 03FA                        06            .byte	6
01216 03FB                        07            .byte	7
01217                                           ! 516  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 03FC                        10            .byte	$10
01219 03FD                        11            .byte	$11
01220 03FE                        12            .byte	$12
01221 03FF                        13            .byte	$13
01222 0400                        14            .byte	$14
01223 0401                        15            .byte	$15
01224 0402                        16            .byte	$16
01225 0403                        17            .byte	$17
01226                                           ! 517  0x01, 0x00, 0x03, 0x00,
01227 0404                        01            .byte	1
01228 0405                        00            .byte	0
01229 0406                        03            .byte	3
01230 0407                        00            .byte	0
01231                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 0408                        00            .byte	0
01233 0409                        00            .byte	0
01234 040A                        00            .byte	0
01235 040B                        00            .byte	0
01236 040C                        00            .byte	0
01237 040D                        30            .byte	$30
01238 040E                        0F            .byte	$F
01239 040F                        0F            .byte	$F
01240 0410                        FF            .byte	$FF
01241                                           ! 519 },
01242                                           ! 520 {
01243                                           ! 521  80, 24, 8, 0x00, 0x10,
01244 0411                        50            .byte	$50
01245 0412                        18            .byte	$18
01246 0413                        08            .byte	8
01247 0414                        00            .byte	0
01248 0415                        10            .byte	$10
01249                                           ! 522  0x01, 0x01, 0x00, 0x06,
01250 0416                        01            .byte	1
01251 0417                        01            .byte	1
01252 0418                        00            .byte	0
01253 0419                        06            .byte	6
01254                                           ! 523  0x63,
01255 041A                        63            .byte	$63
01256                                           ! 524  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 041B                        5F            .byte	$5F
01258 041C                        4F            .byte	$4F
01259 041D                        50            .byte	$50
01260 041E                        82            .byte	$82
01261 041F                        54            .byte	$54
01262 0420                        80            .byte	$80
01263 0421                        BF            .byte	$BF
01264 0422                        1F            .byte	$1F
01265                                           ! 525  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 0423                        00            .byte	0
01267 0424                        C1            .byte	$C1
01268 0425                        00            .byte	0
01269 0426                        00            .byte	0
01270 0427                        00            .byte	0
01271 0428                        00            .byte	0
01272 0429                        00            .byte	0
01273 042A                        00            .byte	0
01274                                           ! 526  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 042B                        9C            .byte	$9C
01276 042C                        8E            .byte	$8E
01277 042D                        8F            .byte	$8F
01278 042E                        28            .byte	$28
01279 042F                        00            .byte	0
01280 0430                        96            .byte	$96
01281 0431                        B9            .byte	$B9
01282 0432                        C2            .byte	$C2
01283                                           ! 527  0xff,
01284 0433                        FF            .byte	$FF
01285                                           ! 528  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 0434                        00            .byte	0
01287 0435                        17            .byte	$17
01288 0436                        17            .byte	$17
01289 0437                        17            .byte	$17
01290 0438                        17            .byte	$17
01291 0439                        17            .byte	$17
01292 043A                        17            .byte	$17
01293 043B                        17            .byte	$17
01294                                           ! 529  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 043C                        17            .byte	$17
01296 043D                        17            .byte	$17
01297 043E                        17            .byte	$17
01298 043F                        17            .byte	$17
01299 0440                        17            .byte	$17
01300 0441                        17            .byte	$17
01301 0442                        17            .byte	$17
01302 0443                        17            .byte	$17
01303                                           ! 530  0x01, 0x00, 0x01, 0x00,
01304 0444                        01            .byte	1
01305 0445                        00            .byte	0
01306 0446                        01            .byte	1
01307 0447                        00            .byte	0
01308                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 0448                        00            .byte	0
01310 0449                        00            .byte	0
01311 044A                        00            .byte	0
01312 044B                        00            .byte	0
01313 044C                        00            .byte	0
01314 044D                        00            .byte	0
01315 044E                        0D            .byte	$D
01316 044F                        0F            .byte	$F
01317 0450                        FF            .byte	$FF
01318                                           ! 532 },
01319                                           ! 533 {
01320                                           ! 534  80, 24, 16, 0x00, 0x10,
01321 0451                        50            .byte	$50
01322 0452                        18            .byte	$18
01323 0453                        10            .byte	$10
01324 0454                        00            .byte	0
01325 0455                        10            .byte	$10
01326                                           ! 535  0x00, 0x03, 0x00, 0x02,
01327 0456                        00            .byte	0
01328 0457                        03            .byte	3
01329 0458                        00            .byte	0
01330 0459                        02            .byte	2
01331                                           ! 536  0x66,
01332 045A                        66            .byte	$66
01333                                           ! 537  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 045B                        5F            .byte	$5F
01335 045C                        4F            .byte	$4F
01336 045D                        50            .byte	$50
01337 045E                        82            .byte	$82
01338 045F                        55            .byte	$55
01339 0460                        81            .byte	$81
01340 0461                        BF            .byte	$BF
01341 0462                        1F            .byte	$1F
01342                                           ! 538  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 0463                        00            .byte	0
01344 0464                        4F            .byte	$4F
01345 0465                        0D            .byte	$D
01346 0466                        0E            .byte	$E
01347 0467                        00            .byte	0
01348 0468                        00            .byte	0
01349 0469                        00            .byte	0
01350 046A                        00            .byte	0
01351                                           ! 539  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 046B                        9C            .byte	$9C
01353 046C                        8E            .byte	$8E
01354 046D                        8F            .byte	$8F
01355 046E                        28            .byte	$28
01356 046F                        0F            .byte	$F
01357 0470                        96            .byte	$96
01358 0471                        B9            .byte	$B9
01359 0472                        A3            .byte	$A3
01360                                           ! 540  0xff,
01361 0473                        FF            .byte	$FF
01362                                           ! 541  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 0474                        00            .byte	0
01364 0475                        08            .byte	8
01365 0476                        08            .byte	8
01366 0477                        08            .byte	8
01367 0478                        08            .byte	8
01368 0479                        08            .byte	8
01369 047A                        08            .byte	8
01370 047B                        08            .byte	8
01371                                           ! 542  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 047C                        10            .byte	$10
01373 047D                        18            .byte	$18
01374 047E                        18            .byte	$18
01375 047F                        18            .byte	$18
01376 0480                        18            .byte	$18
01377 0481                        18            .byte	$18
01378 0482                        18            .byte	$18
01379 0483                        18            .byte	$18
01380                                           ! 543  0x0e, 0x00, 0x0f, 0x08,
01381 0484                        0E            .byte	$E
01382 0485                        00            .byte	0
01383 0486                        0F            .byte	$F
01384 0487                        08            .byte	8
01385                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 0488                        00            .byte	0
01387 0489                        00            .byte	0
01388 048A                        00            .byte	0
01389 048B                        00            .byte	0
01390 048C                        00            .byte	0
01391 048D                        10            .byte	$10
01392 048E                        0A            .byte	$A
01393 048F                        0F            .byte	$F
01394 0490                        FF            .byte	$FF
01395                                           ! 545 },
01396                                           ! 546 {
01397                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 0491                        00            .byte	0
01399 0492                        00            .byte	0
01400 0493                        00            .byte	0
01401 0494                        00            .byte	0
01402 0495                        00            .byte	0
01403 0496                        00            .byte	0
01404 0497                        00            .byte	0
01405 0498                        00            .byte	0
01406                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 0499                        00            .byte	0
01408 049A                        00            .byte	0
01409 049B                        00            .byte	0
01410 049C                        00            .byte	0
01411 049D                        00            .byte	0
01412 049E                        00            .byte	0
01413 049F                        00            .byte	0
01414 04A0                        00            .byte	0
01415                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 04A1                        00            .byte	0
01417 04A2                        00            .byte	0
01418 04A3                        00            .byte	0
01419 04A4                        00            .byte	0
01420 04A5                        00            .byte	0
01421 04A6                        00            .byte	0
01422 04A7                        00            .byte	0
01423 04A8                        00            .byte	0
01424                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04A9                        00            .byte	0
01426 04AA                        00            .byte	0
01427 04AB                        00            .byte	0
01428 04AC                        00            .byte	0
01429 04AD                        00            .byte	0
01430 04AE                        00            .byte	0
01431 04AF                        00            .byte	0
01432 04B0                        00            .byte	0
01433                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04B1                        00            .byte	0
01435 04B2                        00            .byte	0
01436 04B3                        00            .byte	0
01437 04B4                        00            .byte	0
01438 04B5                        00            .byte	0
01439 04B6                        00            .byte	0
01440 04B7                        00            .byte	0
01441 04B8                        00            .byte	0
01442                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04B9                        00            .byte	0
01444 04BA                        00            .byte	0
01445 04BB                        00            .byte	0
01446 04BC                        00            .byte	0
01447 04BD                        00            .byte	0
01448 04BE                        00            .byte	0
01449 04BF                        00            .byte	0
01450 04C0                        00            .byte	0
01451                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04C1                        00            .byte	0
01453 04C2                        00            .byte	0
01454 04C3                        00            .byte	0
01455 04C4                        00            .byte	0
01456 04C5                        00            .byte	0
01457 04C6                        00            .byte	0
01458 04C7                        00            .byte	0
01459 04C8                        00            .byte	0
01460                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04C9                        00            .byte	0
01462 04CA                        00            .byte	0
01463 04CB                        00            .byte	0
01464 04CC                        00            .byte	0
01465 04CD                        00            .byte	0
01466 04CE                        00            .byte	0
01467 04CF                        00            .byte	0
01468 04D0                        00            .byte	0
01469                                           ! 555 },
01470                                           ! 556 {
01471                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04D1                        00            .byte	0
01473 04D2                        00            .byte	0
01474 04D3                        00            .byte	0
01475 04D4                        00            .byte	0
01476 04D5                        00            .byte	0
01477 04D6                        00            .byte	0
01478 04D7                        00            .byte	0
01479 04D8                        00            .byte	0
01480                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04D9                        00            .byte	0
01482 04DA                        00            .byte	0
01483 04DB                        00            .byte	0
01484 04DC                        00            .byte	0
01485 04DD                        00            .byte	0
01486 04DE                        00            .byte	0
01487 04DF                        00            .byte	0
01488 04E0                        00            .byte	0
01489                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04E1                        00            .byte	0
01491 04E2                        00            .byte	0
01492 04E3                        00            .byte	0
01493 04E4                        00            .byte	0
01494 04E5                        00            .byte	0
01495 04E6                        00            .byte	0
01496 04E7                        00            .byte	0
01497 04E8                        00            .byte	0
01498                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04E9                        00            .byte	0
01500 04EA                        00            .byte	0
01501 04EB                        00            .byte	0
01502 04EC                        00            .byte	0
01503 04ED                        00            .byte	0
01504 04EE                        00            .byte	0
01505 04EF                        00            .byte	0
01506 04F0                        00            .byte	0
01507                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04F1                        00            .byte	0
01509 04F2                        00            .byte	0
01510 04F3                        00            .byte	0
01511 04F4                        00            .byte	0
01512 04F5                        00            .byte	0
01513 04F6                        00            .byte	0
01514 04F7                        00            .byte	0
01515 04F8                        00            .byte	0
01516                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 04F9                        00            .byte	0
01518 04FA                        00            .byte	0
01519 04FB                        00            .byte	0
01520 04FC                        00            .byte	0
01521 04FD                        00            .byte	0
01522 04FE                        00            .byte	0
01523 04FF                        00            .byte	0
01524 0500                        00            .byte	0
01525                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 0501                        00            .byte	0
01527 0502                        00            .byte	0
01528 0503                        00            .byte	0
01529 0504                        00            .byte	0
01530 0505                        00            .byte	0
01531 0506                        00            .byte	0
01532 0507                        00            .byte	0
01533 0508                        00            .byte	0
01534                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0509                        00            .byte	0
01536 050A                        00            .byte	0
01537 050B                        00            .byte	0
01538 050C                        00            .byte	0
01539 050D                        00            .byte	0
01540 050E                        00            .byte	0
01541 050F                        00            .byte	0
01542 0510                        00            .byte	0
01543                                           ! 565 },
01544                                           ! 566 {
01545                                           ! 567  0x00, 0x00, 0x00, 0
01546 0511                        00            .byte	0
01547 0512                        00            .byte	0
01548 0513                        00            .byte	0
01549                                           ! 567 x00, 0x00, 0x00, 0x00, 0x00,
01550 0514                        00            .byte	0
01551 0515                        00            .byte	0
01552 0516                        00            .byte	0
01553 0517                        00            .byte	0
01554 0518                        00            .byte	0
01555                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0519                        00            .byte	0
01557 051A                        00            .byte	0
01558 051B                        00            .byte	0
01559 051C                        00            .byte	0
01560 051D                        00            .byte	0
01561 051E                        00            .byte	0
01562 051F                        00            .byte	0
01563 0520                        00            .byte	0
01564                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 0521                        00            .byte	0
01566 0522                        00            .byte	0
01567 0523                        00            .byte	0
01568 0524                        00            .byte	0
01569 0525                        00            .byte	0
01570 0526                        00            .byte	0
01571 0527                        00            .byte	0
01572 0528                        00            .byte	0
01573                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0529                        00            .byte	0
01575 052A                        00            .byte	0
01576 052B                        00            .byte	0
01577 052C                        00            .byte	0
01578 052D                        00            .byte	0
01579 052E                        00            .byte	0
01580 052F                        00            .byte	0
01581 0530                        00            .byte	0
01582                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 0531                        00            .byte	0
01584 0532                        00            .byte	0
01585 0533                        00            .byte	0
01586 0534                        00            .byte	0
01587 0535                        00            .byte	0
01588 0536                        00            .byte	0
01589 0537                        00            .byte	0
01590 0538                        00            .byte	0
01591                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0539                        00            .byte	0
01593 053A                        00            .byte	0
01594 053B                        00            .byte	0
01595 053C                        00            .byte	0
01596 053D                        00            .byte	0
01597 053E                        00            .byte	0
01598 053F                        00            .byte	0
01599 0540                        00            .byte	0
01600                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 0541                        00            .byte	0
01602 0542                        00            .byte	0
01603 0543                        00            .byte	0
01604 0544                        00            .byte	0
01605 0545                        00            .byte	0
01606 0546                        00            .byte	0
01607 0547                        00            .byte	0
01608 0548                        00            .byte	0
01609                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0549                        00            .byte	0
01611 054A                        00            .byte	0
01612 054B                        00            .byte	0
01613 054C                        00            .byte	0
01614 054D                        00            .byte	0
01615 054E                        00            .byte	0
01616 054F                        00            .byte	0
01617 0550                        00            .byte	0
01618                                           ! 575 },
01619                                           ! 576 {
01620                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 0551                        00            .byte	0
01622 0552                        00            .byte	0
01623 0553                        00            .byte	0
01624 0554                        00            .byte	0
01625 0555                        00            .byte	0
01626 0556                        00            .byte	0
01627 0557                        00            .byte	0
01628 0558                        00            .byte	0
01629                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0559                        00            .byte	0
01631 055A                        00            .byte	0
01632 055B                        00            .byte	0
01633 055C                        00            .byte	0
01634 055D                        00            .byte	0
01635 055E                        00            .byte	0
01636 055F                        00            .byte	0
01637 0560                        00            .byte	0
01638                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 0561                        00            .byte	0
01640 0562                        00            .byte	0
01641 0563                        00            .byte	0
01642 0564                        00            .byte	0
01643 0565                        00            .byte	0
01644 0566                        00            .byte	0
01645 0567                        00            .byte	0
01646 0568                        00            .byte	0
01647                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0569                        00            .byte	0
01649 056A                        00            .byte	0
01650 056B                        00            .byte	0
01651 056C                        00            .byte	0
01652 056D                        00            .byte	0
01653 056E                        00            .byte	0
01654 056F                        00            .byte	0
01655 0570                        00            .byte	0
01656                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 0571                        00            .byte	0
01658 0572                        00            .byte	0
01659 0573                        00            .byte	0
01660 0574                        00            .byte	0
01661 0575                        00            .byte	0
01662 0576                        00            .byte	0
01663 0577                        00            .byte	0
01664 0578                        00            .byte	0
01665                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0579                        00            .byte	0
01667 057A                        00            .byte	0
01668 057B                        00            .byte	0
01669 057C                        00            .byte	0
01670 057D                        00            .byte	0
01671 057E                        00            .byte	0
01672 057F                        00            .byte	0
01673 0580                        00            .byte	0
01674                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 0581                        00            .byte	0
01676 0582                        00            .byte	0
01677 0583                        00            .byte	0
01678 0584                        00            .byte	0
01679 0585                        00            .byte	0
01680 0586                        00            .byte	0
01681 0587                        00            .byte	0
01682 0588                        00            .byte	0
01683                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0589                        00            .byte	0
01685 058A                        00            .byte	0
01686 058B                        00            .byte	0
01687 058C                        00            .byte	0
01688 058D                        00            .byte	0
01689 058E                        00            .byte	0
01690 058F                        00            .byte	0
01691 0590                        00            .byte	0
01692                                           ! 585 },
01693                                           ! 586 {
01694                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 0591                        00            .byte	0
01696 0592                        00            .byte	0
01697 0593                        00            .byte	0
01698 0594                        00            .byte	0
01699 0595                        00            .byte	0
01700 0596                        00            .byte	0
01701 0597                        00            .byte	0
01702 0598                        00            .byte	0
01703                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0599                        00            .byte	0
01705 059A                        00            .byte	0
01706 059B                        00            .byte	0
01707 059C                        00            .byte	0
01708 059D                        00            .byte	0
01709 059E                        00            .byte	0
01710 059F                        00            .byte	0
01711 05A0                        00            .byte	0
01712                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 05A1                        00            .byte	0
01714 05A2                        00            .byte	0
01715 05A3                        00            .byte	0
01716 05A4                        00            .byte	0
01717 05A5                        00            .byte	0
01718 05A6                        00            .byte	0
01719 05A7                        00            .byte	0
01720 05A8                        00            .byte	0
01721                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05A9                        00            .byte	0
01723 05AA                        00            .byte	0
01724 05AB                        00            .byte	0
01725 05AC                        00            .byte	0
01726 05AD                        00            .byte	0
01727 05AE                        00            .byte	0
01728 05AF                        00            .byte	0
01729 05B0                        00            .byte	0
01730                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05B1                        00            .byte	0
01732 05B2                        00            .byte	0
01733 05B3                        00            .byte	0
01734 05B4                        00            .byte	0
01735 05B5                        00            .byte	0
01736 05B6                        00            .byte	0
01737 05B7                        00            .byte	0
01738 05B8                        00            .byte	0
01739                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05B9                        00            .byte	0
01741 05BA                        00            .byte	0
01742 05BB                        00            .byte	0
01743 05BC                        00            .byte	0
01744 05BD                        00            .byte	0
01745 05BE                        00            .byte	0
01746 05BF                        00            .byte	0
01747 05C0                        00            .byte	0
01748                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05C1                        00            .byte	0
01750 05C2                        00            .byte	0
01751 05C3                        00            .byte	0
01752 05C4                        00            .byte	0
01753 05C5                        00            .byte	0
01754 05C6                        00            .byte	0
01755 05C7                        00            .byte	0
01756 05C8                        00            .byte	0
01757                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05C9                        00            .byte	0
01759 05CA                        00            .byte	0
01760 05CB                        00            .byte	0
01761 05CC                        00            .byte	0
01762 05CD                        00            .byte	0
01763 05CE                        00            .byte	0
01764 05CF                        00            .byte	0
01765 05D0                        00            .byte	0
01766                                           ! 595 },
01767                                           ! 596 {
01768                                           ! 597  40, 24, 8, 0x00, 0x20,
01769 05D1                        28            .byte	$28
01770 05D2                        18            .byte	$18
01771 05D3                        08            .byte	8
01772 05D4                        00            .byte	0
01773 05D5                        20            .byte	$20
01774                                           ! 598  0x09, 0x0f, 0x00, 0x06,
01775 05D6                        09            .byte	9
01776 05D7                        0F            .byte	$F
01777 05D8                        00            .byte	0
01778 05D9                        06            .byte	6
01779                                           ! 599  0x63,
01780 05DA                        63            .byte	$63
01781                                           ! 600  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05DB                        2D            .byte	$2D
01783 05DC                        27            .byte	$27
01784 05DD                        28            .byte	$28
01785 05DE                        90            .byte	$90
01786 05DF                        2B            .byte	$2B
01787 05E0                        80            .byte	$80
01788 05E1                        BF            .byte	$BF
01789 05E2                        1F            .byte	$1F
01790                                           ! 601  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05E3                        00            .byte	0
01792 05E4                        C0            .byte	$C0
01793 05E5                        00            .byte	0
01794 05E6                        00            .byte	0
01795 05E7                        00            .byte	0
01796 05E8                        00            .byte	0
01797 05E9                        00            .byte	0
01798 05EA                        00            .byte	0
01799                                           ! 602  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05EB                        9C            .byte	$9C
01801 05EC                        8E            .byte	$8E
01802 05ED                        8F            .byte	$8F
01803 05EE                        14            .byte	$14
01804 05EF                        00            .byte	0
01805 05F0                        96            .byte	$96
01806 05F1                        B9            .byte	$B9
01807 05F2                        E3            .byte	$E3
01808                                           ! 603  0xff,
01809 05F3                        FF            .byte	$FF
01810                                           ! 604  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05F4                        00            .byte	0
01812 05F5                        01            .byte	1
01813 05F6                        02            .byte	2
01814 05F7                        03            .byte	3
01815 05F8                        04            .byte	4
01816 05F9                        05            .byte	5
01817 05FA                        06            .byte	6
01818 05FB                        07            .byte	7
01819                                           ! 605  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 05FC                        10            .byte	$10
01821 05FD                        11            .byte	$11
01822 05FE                        12            .byte	$12
01823 05FF                        13            .byte	$13
01824 0600                        14            .byte	$14
01825 0601                        15            .byte	$15
01826 0602                        16            .byte	$16
01827 0603                        17            .byte	$17
01828                                           ! 606  0x01, 0x00, 0x0f, 0x00,
01829 0604                        01            .byte	1
01830 0605                        00            .byte	0
01831 0606                        0F            .byte	$F
01832 0607                        00            .byte	0
01833                                           ! 607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 0608                        00            .byte	0
01835 0609                        00            .byte	0
01836 060A                        00            .byte	0
01837 060B                        00            .byte	0
01838 060C                        00            .byte	0
01839 060D                        00            .byte	0
01840 060E                        05            .byte	5
01841 060F                        0F            .byte	$F
01842 0610                        FF            .byte	$FF
01843                                           ! 608 },
01844                                           ! 609 {
01845                                           ! 610  80, 24, 8, 0x00, 0x40,
01846 0611                        50            .byte	$50
01847 0612                        18            .byte	$18
01848 0613                        08            .byte	8
01849 0614                        00            .byte	0
01850 0615                        40            .byte	$40
01851                                           ! 611  0x01, 0x0f, 0x00, 0x06,
01852 0616                        01            .byte	1
01853 0617                        0F            .byte	$F
01854 0618                        00            .byte	0
01855 0619                        06            .byte	6
01856                                           ! 612  0x63,
01857 061A                        63            .byte	$63
01858                                           ! 613  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 061B                        5F            .byte	$5F
01860 061C                        4F            .byte	$4F
01861 061D                        50            .byte	$50
01862 061E                        82            .byte	$82
01863 061F                        54            .byte	$54
01864 0620                        80            .byte	$80
01865 0621                        BF            .byte	$BF
01866 0622                        1F            .byte	$1F
01867                                           ! 614  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 0623                        00            .byte	0
01869 0624                        C0            .byte	$C0
01870 0625                        00            .byte	0
01871 0626                        00            .byte	0
01872 0627                        00            .byte	0
01873 0628                        00            .byte	0
01874 0629                        00            .byte	0
01875 062A                        00            .byte	0
01876                                           ! 615  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 062B                        9C            .byte	$9C
01878 062C                        8E            .byte	$8E
01879 062D                        8F            .byte	$8F
01880 062E                        28            .byte	$28
01881 062F                        00            .byte	0
01882 0630                        96            .byte	$96
01883 0631                        B9            .byte	$B9
01884 0632                        E3            .byte	$E3
01885                                           ! 616  0xff,
01886 0633                        FF            .byte	$FF
01887                                           ! 617  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 0634                        00            .byte	0
01889 0635                        01            .byte	1
01890 0636                        02            .byte	2
01891 0637                        03            .byte	3
01892 0638                        04            .byte	4
01893 0639                        05            .byte	5
01894 063A                        06            .byte	6
01895 063B                        07            .byte	7
01896                                           ! 618  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 063C                        10            .byte	$10
01898 063D                        11            .byte	$11
01899 063E                        12            .byte	$12
01900 063F                        13            .byte	$13
01901 0640                        14            .byte	$14
01902 0641                        15            .byte	$15
01903 0642                        16            .byte	$16
01904 0643                        17            .byte	$17
01905                                           ! 619  0x01, 0x00, 0x0f, 0x00,
01906 0644                        01            .byte	1
01907 0645                        00            .byte	0
01908 0646                        0F            .byte	$F
01909 0647                        00            .byte	0
01910                                           ! 620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 0648                        00            .byte	0
01912 0649                        00            .byte	0
01913 064A                        00            .byte	0
01914 064B                        00            .byte	0
01915 064C                        00            .byte	0
01916 064D                        00            .byte	0
01917 064E                        05            .byte	5
01918 064F                        0F            .byte	$F
01919 0650                        FF            .byte	$FF
01920                                           ! 621 },
01921                                           ! 622 {
01922                                           ! 623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01923 0651                        00            .byte	0
01924 0652                        00            .byte	0
01925 0653                        00            .byte	0
01926 0654                        00            .byte	0
01927 0655                        00            .byte	0
01928 0656                        00            .byte	0
01929 0657                        00            .byte	0
01930 0658                        00            .byte	0
01931                                           ! 624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01932 0659                        00            .byte	0
01933 065A                        00            .byte	0
01934 065B                        00            .byte	0
01935 065C                        00            .byte	0
01936 065D                        00            .byte	0
01937 065E                        00            .byte	0
01938                                           ! 624  0x00,
01939 065F                        00            .byte	0
01940 0660                        00            .byte	0
01941                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 0661                        00            .byte	0
01943 0662                        00            .byte	0
01944 0663                        00            .byte	0
01945 0664                        00            .byte	0
01946 0665                        00            .byte	0
01947 0666                        00            .byte	0
01948 0667                        00            .byte	0
01949 0668                        00            .byte	0
01950                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0669                        00            .byte	0
01952 066A                        00            .byte	0
01953 066B                        00            .byte	0
01954 066C                        00            .byte	0
01955 066D                        00            .byte	0
01956 066E                        00            .byte	0
01957 066F                        00            .byte	0
01958 0670                        00            .byte	0
01959                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 0671                        00            .byte	0
01961 0672                        00            .byte	0
01962 0673                        00            .byte	0
01963 0674                        00            .byte	0
01964 0675                        00            .byte	0
01965 0676                        00            .byte	0
01966 0677                        00            .byte	0
01967 0678                        00            .byte	0
01968                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0679                        00            .byte	0
01970 067A                        00            .byte	0
01971 067B                        00            .byte	0
01972 067C                        00            .byte	0
01973 067D                        00            .byte	0
01974 067E                        00            .byte	0
01975 067F                        00            .byte	0
01976 0680                        00            .byte	0
01977                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 0681                        00            .byte	0
01979 0682                        00            .byte	0
01980 0683                        00            .byte	0
01981 0684                        00            .byte	0
01982 0685                        00            .byte	0
01983 0686                        00            .byte	0
01984 0687                        00            .byte	0
01985 0688                        00            .byte	0
01986                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0689                        00            .byte	0
01988 068A                        00            .byte	0
01989 068B                        00            .byte	0
01990 068C                        00            .byte	0
01991 068D                        00            .byte	0
01992 068E                        00            .byte	0
01993 068F                        00            .byte	0
01994 0690                        00            .byte	0
01995                                           ! 631 },
01996                                           ! 632 {
01997                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 0691                        00            .byte	0
01999 0692                        00            .byte	0
02000 0693                        00            .byte	0
02001 0694                        00            .byte	0
02002 0695                        00            .byte	0
02003 0696                        00            .byte	0
02004 0697                        00            .byte	0
02005 0698                        00            .byte	0
02006                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0699                        00            .byte	0
02008 069A                        00            .byte	0
02009 069B                        00            .byte	0
02010 069C                        00            .byte	0
02011 069D                        00            .byte	0
02012 069E                        00            .byte	0
02013 069F                        00            .byte	0
02014 06A0                        00            .byte	0
02015                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 06A1                        00            .byte	0
02017 06A2                        00            .byte	0
02018 06A3                        00            .byte	0
02019 06A4                        00            .byte	0
02020 06A5                        00            .byte	0
02021 06A6                        00            .byte	0
02022 06A7                        00            .byte	0
02023 06A8                        00            .byte	0
02024                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06A9                        00            .byte	0
02026 06AA                        00            .byte	0
02027 06AB                        00            .byte	0
02028 06AC                        00            .byte	0
02029 06AD                        00            .byte	0
02030 06AE                        00            .byte	0
02031 06AF                        00            .byte	0
02032 06B0                        00            .byte	0
02033                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06B1                        00            .byte	0
02035 06B2                        00            .byte	0
02036 06B3                        00            .byte	0
02037 06B4                        00            .byte	0
02038 06B5                        00            .byte	0
02039 06B6                        00            .byte	0
02040 06B7                        00            .byte	0
02041 06B8                        00            .byte	0
02042                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06B9                        00            .byte	0
02044 06BA                        00            .byte	0
02045 06BB                        00            .byte	0
02046 06BC                        00            .byte	0
02047 06BD                        00            .byte	0
02048 06BE                        00            .byte	0
02049 06BF                        00            .byte	0
02050 06C0                        00            .byte	0
02051                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06C1                        00            .byte	0
02053 06C2                        00            .byte	0
02054 06C3                        00            .byte	0
02055 06C4                        00            .byte	0
02056 06C5                        00            .byte	0
02057 06C6                        00            .byte	0
02058 06C7                        00            .byte	0
02059 06C8                        00            .byte	0
02060                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06C9                        00            .byte	0
02062 06CA                        00            .byte	0
02063 06CB                        00            .byte	0
02064 06CC                        00            .byte	0
02065 06CD                        00            .byte	0
02066 06CE                        00            .byte	0
02067 06CF                        00            .byte	0
02068 06D0                        00            .byte	0
02069                                           ! 641 },
02070                                           ! 642 {
02071                                           ! 643  80, 24, 14, 0x00, 0x80,
02072 06D1                        50            .byte	$50
02073 06D2                        18            .byte	$18
02074 06D3                        0E            .byte	$E
02075 06D4                        00            .byte	0
02076 06D5                        80            .byte	$80
02077                                           ! 644  0x01, 0x0f, 0x00, 0x06,
02078 06D6                        01            .byte	1
02079 06D7                        0F            .byte	$F
02080 06D8                        00            .byte	0
02081 06D9                        06            .byte	6
02082                                           ! 645  0xa3,
02083 06DA                        A3            .byte	$A3
02084                                           ! 646  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06DB                        5F            .byte	$5F
02086 06DC                        4F            .byte	$4F
02087 06DD                        50            .byte	$50
02088 06DE                        82            .byte	$82
02089 06DF                        54            .byte	$54
02090 06E0                        80            .byte	$80
02091 06E1                        BF            .byte	$BF
02092 06E2                        1F            .byte	$1F
02093                                           ! 647  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06E3                        00            .byte	0
02095 06E4                        40            .byte	$40
02096 06E5                        00            .byte	0
02097 06E6                        00            .byte	0
02098 06E7                        00            .byte	0
02099 06E8                        00            .byte	0
02100 06E9                        00            .byte	0
02101 06EA                        00            .byte	0
02102                                           ! 648  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06EB                        83            .byte	$83
02104 06EC                        85            .byte	$85
02105 06ED                        5D            .byte	$5D
02106 06EE                        28            .byte	$28
02107 06EF                        0F            .byte	$F
02108 06F0                        63            .byte	$63
02109 06F1                        BA            .byte	$BA
02110 06F2                        E3            .byte	$E3
02111                                           ! 649  0xff,
02112 06F3                        FF            .byte	$FF
02113                                           ! 650  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06F4                        00            .byte	0
02115 06F5                        08            .byte	8
02116 06F6                        00            .byte	0
02117 06F7                        00            .byte	0
02118 06F8                        18            .byte	$18
02119 06F9                        18            .byte	$18
02120 06FA                        00            .byte	0
02121 06FB                        00            .byte	0
02122                                           ! 651  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 06FC                        00            .byte	0
02124 06FD                        08            .byte	8
02125 06FE                        00            .byte	0
02126 06FF                        00            .byte	0
02127 0700                        00            .byte	0
02128 0701                        18            .byte	$18
02129 0702                        00            .byte	0
02130 0703                        00            .byte	0
02131                                           ! 652  0x01, 0x00, 0x01, 0x00,
02132 0704                        01            .byte	1
02133 0705                        00            .byte	0
02134 0706                        01            .byte	1
02135 0707                        00            .byte	0
02136                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 0708                        00            .byte	0
02138 0709                        00            .byte	0
02139 070A                        00            .byte	0
02140 070B                        00            .byte	0
02141 070C                        00            .byte	0
02142 070D                        00            .byte	0
02143 070E                        05            .byte	5
02144 070F                        0F            .byte	$F
02145 0710                        FF            .byte	$FF
02146                                           ! 654 },
02147                                           ! 655 {
02148                                           ! 656  80, 24, 14, 0x00, 0x80,
02149 0711                        50            .byte	$50
02150 0712                        18            .byte	$18
02151 0713                        0E            .byte	$E
02152 0714                        00            .byte	0
02153 0715                        80            .byte	$80
02154                                           ! 657  0x01, 0x0f, 0x00, 0x06,
02155 0716                        01            .byte	1
02156 0717                        0F            .byte	$F
02157 0718                        00            .byte	0
02158 0719                        06            .byte	6
02159                                           ! 658  0xa3,
02160 071A                        A3            .byte	$A3
02161                                           ! 659  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 071B                        5F            .byte	$5F
02163 071C                        4F            .byte	$4F
02164 071D                        50            .byte	$50
02165 071E                        82            .byte	$82
02166 071F                        54            .byte	$54
02167 0720                        80            .byte	$80
02168 0721                        BF            .byte	$BF
02169 0722                        1F            .byte	$1F
02170                                           ! 660  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 0723                        00            .byte	0
02172 0724                        40            .byte	$40
02173 0725                        00            .byte	0
02174 0726                        00            .byte	0
02175 0727                        00            .byte	0
02176 0728                        00            .byte	0
02177 0729                        00            .byte	0
02178 072A                        00            .byte	0
02179                                           ! 661  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 072B                        83            .byte	$83
02181 072C                        85            .byte	$85
02182 072D                        5D            .byte	$5D
02183 072E                        28            .byte	$28
02184 072F                        0F            .byte	$F
02185 0730                        63            .byte	$63
02186 0731                        BA            .byte	$BA
02187 0732                        E3            .byte	$E3
02188                                           ! 662  0xff,
02189 0733                        FF            .byte	$FF
02190                                           ! 663  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 0734                        00            .byte	0
02192 0735                        01            .byte	1
02193 0736                        02            .byte	2
02194 0737                        03            .byte	3
02195 0738                        04            .byte	4
02196 0739                        05            .byte	5
02197 073A                        14            .byte	$14
02198 073B                        07            .byte	7
02199                                           ! 664  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 073C                        38            .byte	$38
02201 073D                        39            .byte	$39
02202 073E                        3A            .byte	$3A
02203 073F                        3B            .byte	$3B
02204 0740                        3C            .byte	$3C
02205 0741                        3D            .byte	$3D
02206 0742                        3E            .byte	$3E
02207 0743                        3F            .byte	$3F
02208                                           ! 665  0x01, 0x00, 0x0f, 0x00,
02209 0744                        01            .byte	1
02210 0745                        00            .byte	0
02211 0746                        0F            .byte	$F
02212 0747                        00            .byte	0
02213                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 0748                        00            .byte	0
02215 0749                        00            .byte	0
02216 074A                        00            .byte	0
02217 074B                        00            .byte	0
02218 074C                        00            .byte	0
02219 074D                        00            .byte	0
02220 074E                        05            .byte	5
02221 074F                        0F            .byte	$F
02222 0750                        FF            .byte	$FF
02223                                           ! 667 },
02224                                           ! 668 {
02225                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 0751                        00            .byte	0
02227 0752                        00            .byte	0
02228 0753                        00            .byte	0
02229 0754                        00            .byte	0
02230 0755                        00            .byte	0
02231 0756                        00            .byte	0
02232 0757                        00            .byte	0
02233 0758                        00            .byte	0
02234                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0759                        00            .byte	0
02236 075A                        00            .byte	0
02237 075B                        00            .byte	0
02238 075C                        00            .byte	0
02239 075D                        00            .byte	0
02240 075E                        00            .byte	0
02241 075F                        00            .byte	0
02242 0760                        00            .byte	0
02243                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 0761                        00            .byte	0
02245 0762                        00            .byte	0
02246 0763                        00            .byte	0
02247 0764                        00            .byte	0
02248 0765                        00            .byte	0
02249 0766                        00            .byte	0
02250 0767                        00            .byte	0
02251 0768                        00            .byte	0
02252                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0769                        00            .byte	0
02254 076A                        00            .byte	0
02255 076B                        00            .byte	0
02256 076C                        00            .byte	0
02257 076D                        00            .byte	0
02258 076E                        00            .byte	0
02259 076F                        00            .byte	0
02260 0770                        00            .byte	0
02261                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 0771                        00            .byte	0
02263 0772                        00            .byte	0
02264 0773                        00            .byte	0
02265 0774                        00            .byte	0
02266 0775                        00            .byte	0
02267 0776                        00            .byte	0
02268 0777                        00            .byte	0
02269 0778                        00            .byte	0
02270                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0779                        00            .byte	0
02272 077A                        00            .byte	0
02273 077B                        00            .byte	0
02274 077C                        00            .byte	0
02275 077D                        00            .byte	0
02276 077E                        00            .byte	0
02277 077F                        00            .byte	0
02278 0780                        00            .byte	0
02279                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 0781                        00            .byte	0
02281 0782                        00            .byte	0
02282 0783                        00            .byte	0
02283 0784                        00            .byte	0
02284 0785                        00            .byte	0
02285 0786                        00            .byte	0
02286 0787                        00            .byte	0
02287 0788                        00            .byte	0
02288                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0789                        00            .byte	0
02290 078A                        00            .byte	0
02291 078B                        00            .byte	0
02292 078C                        00            .byte	0
02293 078D                        00            .byte	0
02294 078E                        00            .byte	0
02295 078F                        00            .byte	0
02296 0790                        00            .byte	0
02297                                           ! 677 },
02298                                           ! 678 {
02299                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 0791                        00            .byte	0
02301 0792                        00            .byte	0
02302 0793                        00            .byte	0
02303 0794                        00            .byte	0
02304 0795                        00            .byte	0
02305 0796                        00            .byte	0
02306 0797                        00            .byte	0
02307 0798                        00            .byte	0
02308                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02309 0799                        00            .byte	0
02310 079A                        00            .byte	0
02311 079B                        00            .byte	0
02312 079C                        00            .byte	0
02313 079D                        00            .byte	0
02314 079E                        00            .byte	0
02315 079F                        00            .byte	0
02316 07A0                        00            .byte	0
02317                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02318 07A1                        00            .byte	0
02319 07A2                        00            .byte	0
02320 07A3                        00            .byte	0
02321 07A4                        00            .byte	0
02322 07A5                        00            .byte	0
02323 07A6                        00            .byte	0
02324 07A7                        00            .byte	0
02325 07A8                        00            .byte	0
02326                                           ! 682  0x00, 0x00, 
02327 07A9                        00            .byte	0
02328 07AA                        00            .byte	0
02329                                           ! 682 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02330 07AB                        00            .byte	0
02331 07AC                        00            .byte	0
02332 07AD                        00            .byte	0
02333 07AE                        00            .byte	0
02334 07AF                        00            .byte	0
02335 07B0                        00            .byte	0
02336                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07B1                        00            .byte	0
02338 07B2                        00            .byte	0
02339 07B3                        00            .byte	0
02340 07B4                        00            .byte	0
02341 07B5                        00            .byte	0
02342 07B6                        00            .byte	0
02343 07B7                        00            .byte	0
02344 07B8                        00            .byte	0
02345                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07B9                        00            .byte	0
02347 07BA                        00            .byte	0
02348 07BB                        00            .byte	0
02349 07BC                        00            .byte	0
02350 07BD                        00            .byte	0
02351 07BE                        00            .byte	0
02352 07BF                        00            .byte	0
02353 07C0                        00            .byte	0
02354                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07C1                        00            .byte	0
02356 07C2                        00            .byte	0
02357 07C3                        00            .byte	0
02358 07C4                        00            .byte	0
02359 07C5                        00            .byte	0
02360 07C6                        00            .byte	0
02361 07C7                        00            .byte	0
02362 07C8                        00            .byte	0
02363                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07C9                        00            .byte	0
02365 07CA                        00            .byte	0
02366 07CB                        00            .byte	0
02367 07CC                        00            .byte	0
02368 07CD                        00            .byte	0
02369 07CE                        00            .byte	0
02370 07CF                        00            .byte	0
02371 07D0                        00            .byte	0
02372                                           ! 687 },
02373                                           ! 688 {
02374                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07D1                        00            .byte	0
02376 07D2                        00            .byte	0
02377 07D3                        00            .byte	0
02378 07D4                        00            .byte	0
02379 07D5                        00            .byte	0
02380 07D6                        00            .byte	0
02381 07D7                        00            .byte	0
02382 07D8                        00            .byte	0
02383                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07D9                        00            .byte	0
02385 07DA                        00            .byte	0
02386 07DB                        00            .byte	0
02387 07DC                        00            .byte	0
02388 07DD                        00            .byte	0
02389 07DE                        00            .byte	0
02390 07DF                        00            .byte	0
02391 07E0                        00            .byte	0
02392                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07E1                        00            .byte	0
02394 07E2                        00            .byte	0
02395 07E3                        00            .byte	0
02396 07E4                        00            .byte	0
02397 07E5                        00            .byte	0
02398 07E6                        00            .byte	0
02399 07E7                        00            .byte	0
02400 07E8                        00            .byte	0
02401                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07E9                        00            .byte	0
02403 07EA                        00            .byte	0
02404 07EB                        00            .byte	0
02405 07EC                        00            .byte	0
02406 07ED                        00            .byte	0
02407 07EE                        00            .byte	0
02408 07EF                        00            .byte	0
02409 07F0                        00            .byte	0
02410                                           ! 693  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07F1                        00            .byte	0
02412 07F2                        00            .byte	0
02413 07F3                        00            .byte	0
02414 07F4                        00            .byte	0
02415 07F5                        00            .byte	0
02416 07F6                        00            .byte	0
02417 07F7                        00            .byte	0
02418 07F8                        00            .byte	0
02419                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 07F9                        00            .byte	0
02421 07FA                        00            .byte	0
02422 07FB                        00            .byte	0
02423 07FC                        00            .byte	0
02424 07FD                        00            .byte	0
02425 07FE                        00            .byte	0
02426 07FF                        00            .byte	0
02427 0800                        00            .byte	0
02428                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 0801                        00            .byte	0
02430 0802                        00            .byte	0
02431 0803                        00            .byte	0
02432 0804                        00            .byte	0
02433 0805                        00            .byte	0
02434 0806                        00            .byte	0
02435 0807                        00            .byte	0
02436 0808                        00            .byte	0
02437                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0809                        00            .byte	0
02439 080A                        00            .byte	0
02440 080B                        00            .byte	0
02441 080C                        00            .byte	0
02442 080D                        00            .byte	0
02443 080E                        00            .byte	0
02444 080F                        00            .byte	0
02445 0810                        00            .byte	0
02446                                           ! 697 },
02447                                           ! 698 {
02448                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 0811                        00            .byte	0
02450 0812                        00            .byte	0
02451 0813                        00            .byte	0
02452 0814                        00            .byte	0
02453 0815                        00            .byte	0
02454 0816                        00            .byte	0
02455 0817                        00            .byte	0
02456 0818                        00            .byte	0
02457                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0819                        00            .byte	0
02459 081A                        00            .byte	0
02460 081B                        00            .byte	0
02461 081C                        00            .byte	0
02462 081D                        00            .byte	0
02463 081E                        00            .byte	0
02464 081F                        00            .byte	0
02465 0820                        00            .byte	0
02466                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 0821                        00            .byte	0
02468 0822                        00            .byte	0
02469 0823                        00            .byte	0
02470 0824                        00            .byte	0
02471 0825                        00            .byte	0
02472 0826                        00            .byte	0
02473 0827                        00            .byte	0
02474 0828                        00            .byte	0
02475                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0829                        00            .byte	0
02477 082A                        00            .byte	0
02478 082B                        00            .byte	0
02479 082C                        00            .byte	0
02480 082D                        00            .byte	0
02481 082E                        00            .byte	0
02482 082F                        00            .byte	0
02483 0830                        00            .byte	0
02484                                           ! 703  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 0831                        00            .byte	0
02486 0832                        00            .byte	0
02487 0833                        00            .byte	0
02488 0834                        00            .byte	0
02489 0835                        00            .byte	0
02490 0836                        00            .byte	0
02491 0837                        00            .byte	0
02492 0838                        00            .byte	0
02493                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0839                        00            .byte	0
02495 083A                        00            .byte	0
02496 083B                        00            .byte	0
02497 083C                        00            .byte	0
02498 083D                        00            .byte	0
02499 083E                        00            .byte	0
02500 083F                        00            .byte	0
02501 0840                        00            .byte	0
02502                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 0841                        00            .byte	0
02504 0842                        00            .byte	0
02505 0843                        00            .byte	0
02506 0844                        00            .byte	0
02507 0845                        00            .byte	0
02508 0846                        00            .byte	0
02509 0847                        00            .byte	0
02510 0848                        00            .byte	0
02511                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0849                        00            .byte	0
02513 084A                        00            .byte	0
02514 084B                        00            .byte	0
02515 084C                        00            .byte	0
02516 084D                        00            .byte	0
02517 084E                        00            .byte	0
02518 084F                        00            .byte	0
02519 0850                        00            .byte	0
02520                                           ! 707 },
02521                                           ! 708 {
02522                                           ! 709  40, 24, 16, 0x00, 0x08,
02523 0851                        28            .byte	$28
02524 0852                        18            .byte	$18
02525 0853                        10            .byte	$10
02526 0854                        00            .byte	0
02527 0855                        08            .byte	8
02528                                           ! 710  0x08, 0x03, 0x00, 0x02,
02529 0856                        08            .byte	8
02530 0857                        03            .byte	3
02531 0858                        00            .byte	0
02532 0859                        02            .byte	2
02533                                           ! 711  0x67,
02534 085A                        67            .byte	$67
02535                                           ! 712  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 085B                        2D            .byte	$2D
02537 085C                        27            .byte	$27
02538 085D                        28            .byte	$28
02539 085E                        90            .byte	$90
02540 085F                        2B            .byte	$2B
02541 0860                        A0            .byte	$A0
02542 0861                        BF            .byte	$BF
02543 0862                        1F            .byte	$1F
02544                                           ! 713  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 0863                        00            .byte	0
02546 0864                        4F            .byte	$4F
02547 0865                        0D            .byte	$D
02548 0866                        0E            .byte	$E
02549 0867                        00            .byte	0
02550 0868                        00            .byte	0
02551 0869                        00            .byte	0
02552 086A                        00            .byte	0
02553                                           ! 714  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 086B                        9C            .byte	$9C
02555 086C                        8E            .byte	$8E
02556 086D                        8F            .byte	$8F
02557 086E                        14            .byte	$14
02558 086F                        1F            .byte	$1F
02559 0870                        96            .byte	$96
02560 0871                        B9            .byte	$B9
02561 0872                        A3            .byte	$A3
02562                                           ! 715  0xff,
02563 0873                        FF            .byte	$FF
02564                                           ! 716  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 0874                        00            .byte	0
02566 0875                        01            .byte	1
02567 0876                        02            .byte	2
02568 0877                        03            .byte	3
02569 0878                        04            .byte	4
02570 0879                        05            .byte	5
02571 087A                        14            .byte	$14
02572 087B                        07            .byte	7
02573                                           ! 717  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 087C                        38            .byte	$38
02575 087D                        39            .byte	$39
02576 087E                        3A            .byte	$3A
02577 087F                        3B            .byte	$3B
02578 0880                        3C            .byte	$3C
02579 0881                        3D            .byte	$3D
02580 0882                        3E            .byte	$3E
02581 0883                        3F            .byte	$3F
02582                                           ! 718  0x0c, 0x00, 0x0f, 0x08,
02583 0884                        0C            .byte	$C
02584 0885                        00            .byte	0
02585 0886                        0F            .byte	$F
02586 0887                        08            .byte	8
02587                                           ! 719  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 0888                        00            .byte	0
02589 0889                        00            .byte	0
02590 088A                        00            .byte	0
02591 088B                        00            .byte	0
02592 088C                        00            .byte	0
02593 088D                        10            .byte	$10
02594 088E                        0E            .byte	$E
02595 088F                        0F            .byte	$F
02596 0890                        FF            .byte	$FF
02597                                           ! 720 },
02598                                           ! 721 {
02599                                           ! 722  80, 24, 16, 0x00, 0x10,
02600 0891                        50            .byte	$50
02601 0892                        18            .byte	$18
02602 0893                        10            .byte	$10
02603 0894                        00            .byte	0
02604 0895                        10            .byte	$10
02605                                           ! 723  0x00, 0x03, 0x00, 0x02,
02606 0896                        00            .byte	0
02607 0897                        03            .byte	3
02608 0898                        00            .byte	0
02609 0899                        02            .byte	2
02610                                           ! 724  0x67,
02611 089A                        67            .byte	$67
02612                                           ! 725  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 089B                        5F            .byte	$5F
02614 089C                        4F            .byte	$4F
02615 089D                        50            .byte	$50
02616 089E                        82            .byte	$82
02617 089F                        55            .byte	$55
02618 08A0                        81            .byte	$81
02619 08A1                        BF            .byte	$BF
02620 08A2                        1F            .byte	$1F
02621                                           ! 726  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 08A3                        00            .byte	0
02623 08A4                        4F            .byte	$4F
02624 08A5                        0D            .byte	$D
02625 08A6                        0E            .byte	$E
02626 08A7                        00            .byte	0
02627 08A8                        00            .byte	0
02628 08A9                        00            .byte	0
02629 08AA                        00            .byte	0
02630                                           ! 727  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08AB                        9C            .byte	$9C
02632 08AC                        8E            .byte	$8E
02633 08AD                        8F            .byte	$8F
02634 08AE                        28            .byte	$28
02635 08AF                        1F            .byte	$1F
02636 08B0                        96            .byte	$96
02637 08B1                        B9            .byte	$B9
02638 08B2                        A3            .byte	$A3
02639                                           ! 728  0xff,
02640 08B3                        FF            .byte	$FF
02641                                           ! 729  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08B4                        00            .byte	0
02643 08B5                        01            .byte	1
02644 08B6                        02            .byte	2
02645 08B7                        03            .byte	3
02646 08B8                        04            .byte	4
02647 08B9                        05            .byte	5
02648 08BA                        14            .byte	$14
02649 08BB                        07            .byte	7
02650                                           ! 730  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08BC                        38            .byte	$38
02652 08BD                        39            .byte	$39
02653 08BE                        3A            .byte	$3A
02654 08BF                        3B            .byte	$3B
02655 08C0                        3C            .byte	$3C
02656 08C1                        3D            .byte	$3D
02657 08C2                        3E            .byte	$3E
02658 08C3                        3F            .byte	$3F
02659                                           ! 731  0x0c, 0x00, 0x0f, 0x08,
02660 08C4                        0C            .byte	$C
02661 08C5                        00            .byte	0
02662 08C6                        0F            .byte	$F
02663 08C7                        08            .byte	8
02664                                           ! 732  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08C8                        00            .byte	0
02666 08C9                        00            .byte	0
02667 08CA                        00            .byte	0
02668 08CB                        00            .byte	0
02669 08CC                        00            .byte	0
02670 08CD                        10            .byte	$10
02671 08CE                        0E            .byte	$E
02672 08CF                        0F            .byte	$F
02673 08D0                        FF            .byte	$FF
02674                                           ! 733 },
02675                                           ! 734 {
02676                                           ! 735  80, 24, 16, 0x00, 0x10,
02677 08D1                        50            .byte	$50
02678 08D2                        18            .byte	$18
02679 08D3                        10            .byte	$10
02680 08D4                        00            .byte	0
02681 08D5                        10            .byte	$10
02682                                           ! 736  0x00, 0x03, 0x00, 0x02,
02683 08D6                        00            .byte	0
02684 08D7                        03            .byte	3
02685 08D8                        00            .byte	0
02686 08D9                        02            .byte	2
02687                                           ! 737  0x66,
02688 08DA                        66            .byte	$66
02689                                           ! 738  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08DB                        5F            .byte	$5F
02691 08DC                        4F            .byte	$4F
02692 08DD                        50            .byte	$50
02693 08DE                        82            .byte	$82
02694 08DF                        55            .byte	$55
02695 08E0                        81            .byte	$81
02696 08E1                        BF            .byte	$BF
02697 08E2                        1F            .byte	$1F
02698                                           ! 739  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02699 08E3                        00            .byte	0
02700 08E4                        4F            .byte	$4F
02701 08E5                        0D            .byte	$D
02702 08E6                        0E            .byte	$E
02703 08E7                        00            .byte	0
02704 08E8                        00            .byte	0
02705 08E9                        00            .byte	0
02706 08EA                        00            .byte	0
02707                                           ! 740  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02708 08EB                        9C            .byte	$9C
02709 08EC                        8E            .byte	$8E
02710 08ED                        8F            .byte	$8F
02711 08EE                        28            .byte	$28
02712 08EF                        0F            .byte	$F
02713 08F0                        96            .byte	$96
02714 08F1                        B9            .byte	$B9
02715 08F2                        A3            .byte	$A3
02716                                           ! 741  0xff,
02717 08F3                        FF            .byte	$FF
02718                                           ! 742  0x00, 0x08, 0x08,
02719 08F4                        00            .byte	0
02720 08F5                        08            .byte	8
02721                                           ! 742  0x08, 0x08, 0x08, 0x08, 0x08,
02722 08F6                        08            .byte	8
02723 08F7                        08            .byte	8
02724 08F8                        08            .byte	8
02725 08F9                        08            .byte	8
02726 08FA                        08            .byte	8
02727 08FB                        08            .byte	8
02728                                           ! 743  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 08FC                        10            .byte	$10
02730 08FD                        18            .byte	$18
02731 08FE                        18            .byte	$18
02732 08FF                        18            .byte	$18
02733 0900                        18            .byte	$18
02734 0901                        18            .byte	$18
02735 0902                        18            .byte	$18
02736 0903                        18            .byte	$18
02737                                           ! 744  0x0e, 0x00, 0x0f, 0x08,
02738 0904                        0E            .byte	$E
02739 0905                        00            .byte	0
02740 0906                        0F            .byte	$F
02741 0907                        08            .byte	8
02742                                           ! 745  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 0908                        00            .byte	0
02744 0909                        00            .byte	0
02745 090A                        00            .byte	0
02746 090B                        00            .byte	0
02747 090C                        00            .byte	0
02748 090D                        10            .byte	$10
02749 090E                        0A            .byte	$A
02750 090F                        0F            .byte	$F
02751 0910                        FF            .byte	$FF
02752                                           ! 746 },
02753                                           ! 747 {
02754                                           ! 748  80, 29, 16, 0x00, 0x00,
02755 0911                        50            .byte	$50
02756 0912                        1D            .byte	$1D
02757 0913                        10            .byte	$10
02758 0914                        00            .byte	0
02759 0915                        00            .byte	0
02760                                           ! 749  0x01, 0x0f, 0x00, 0x06,
02761 0916                        01            .byte	1
02762 0917                        0F            .byte	$F
02763 0918                        00            .byte	0
02764 0919                        06            .byte	6
02765                                           ! 750  0xe3,
02766 091A                        E3            .byte	$E3
02767                                           ! 751  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 091B                        5F            .byte	$5F
02769 091C                        4F            .byte	$4F
02770 091D                        50            .byte	$50
02771 091E                        82            .byte	$82
02772 091F                        54            .byte	$54
02773 0920                        80            .byte	$80
02774 0921                        0B            .byte	$B
02775 0922                        3E            .byte	$3E
02776                                           ! 752  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 0923                        00            .byte	0
02778 0924                        40            .byte	$40
02779 0925                        00            .byte	0
02780 0926                        00            .byte	0
02781 0927                        00            .byte	0
02782 0928                        00            .byte	0
02783 0929                        00            .byte	0
02784 092A                        00            .byte	0
02785                                           ! 753  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 092B                        EA            .byte	$EA
02787 092C                        8C            .byte	$8C
02788 092D                        DF            .byte	$DF
02789 092E                        28            .byte	$28
02790 092F                        00            .byte	0
02791 0930                        E7            .byte	$E7
02792 0931                        04            .byte	4
02793 0932                        E3            .byte	$E3
02794                                           ! 754  0xff,
02795 0933                        FF            .byte	$FF
02796                                           ! 755  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 0934                        00            .byte	0
02798 0935                        3F            .byte	$3F
02799 0936                        00            .byte	0
02800 0937                        3F            .byte	$3F
02801 0938                        00            .byte	0
02802 0939                        3F            .byte	$3F
02803 093A                        00            .byte	0
02804 093B                        3F            .byte	$3F
02805                                           ! 756  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 093C                        00            .byte	0
02807 093D                        3F            .byte	$3F
02808 093E                        00            .byte	0
02809 093F                        3F            .byte	$3F
02810 0940                        00            .byte	0
02811 0941                        3F            .byte	$3F
02812 0942                        00            .byte	0
02813 0943                        3F            .byte	$3F
02814                                           ! 757  0x01, 0x00, 0x0f, 0x00,
02815 0944                        01            .byte	1
02816 0945                        00            .byte	0
02817 0946                        0F            .byte	$F
02818 0947                        00            .byte	0
02819                                           ! 758  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 0948                        00            .byte	0
02821 0949                        00            .byte	0
02822 094A                        00            .byte	0
02823 094B                        00            .byte	0
02824 094C                        00            .byte	0
02825 094D                        00            .byte	0
02826 094E                        05            .byte	5
02827 094F                        0F            .byte	$F
02828 0950                        FF            .byte	$FF
02829                                           ! 759 },
02830                                           ! 760 {
02831                                           ! 761  80, 29, 16, 0x00, 0x00,
02832 0951                        50            .byte	$50
02833 0952                        1D            .byte	$1D
02834 0953                        10            .byte	$10
02835 0954                        00            .byte	0
02836 0955                        00            .byte	0
02837                                           ! 762  0x01, 0x0f, 0x00, 0x06,
02838 0956                        01            .byte	1
02839 0957                        0F            .byte	$F
02840 0958                        00            .byte	0
02841 0959                        06            .byte	6
02842                                           ! 763  0xe3,
02843 095A                        E3            .byte	$E3
02844                                           ! 764  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 095B                        5F            .byte	$5F
02846 095C                        4F            .byte	$4F
02847 095D                        50            .byte	$50
02848 095E                        82            .byte	$82
02849 095F                        54            .byte	$54
02850 0960                        80            .byte	$80
02851 0961                        0B            .byte	$B
02852 0962                        3E            .byte	$3E
02853                                           ! 765  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 0963                        00            .byte	0
02855 0964                        40            .byte	$40
02856 0965                        00            .byte	0
02857 0966                        00            .byte	0
02858 0967                        00            .byte	0
02859 0968                        00            .byte	0
02860 0969                        00            .byte	0
02861 096A                        00            .byte	0
02862                                           ! 766  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 096B                        EA            .byte	$EA
02864 096C                        8C            .byte	$8C
02865 096D                        DF            .byte	$DF
02866 096E                        28            .byte	$28
02867 096F                        00            .byte	0
02868 0970                        E7            .byte	$E7
02869 0971                        04            .byte	4
02870 0972                        E3            .byte	$E3
02871                                           ! 767  0xff,
02872 0973                        FF            .byte	$FF
02873                                           ! 768  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 0974                        00            .byte	0
02875 0975                        01            .byte	1
02876 0976                        02            .byte	2
02877 0977                        03            .byte	3
02878 0978                        04            .byte	4
02879 0979                        05            .byte	5
02880 097A                        14            .byte	$14
02881 097B                        07            .byte	7
02882                                           ! 769  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 097C                        38            .byte	$38
02884 097D                        39            .byte	$39
02885 097E                        3A            .byte	$3A
02886 097F                        3B            .byte	$3B
02887 0980                        3C            .byte	$3C
02888 0981                        3D            .byte	$3D
02889 0982                        3E            .byte	$3E
02890 0983                        3F            .byte	$3F
02891                                           ! 770  0x01, 0x00, 0x0f, 0x00,
02892 0984                        01            .byte	1
02893 0985                        00            .byte	0
02894 0986                        0F            .byte	$F
02895 0987                        00            .byte	0
02896                                           ! 771  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 0988                        00            .byte	0
02898 0989                        00            .byte	0
02899 098A                        00            .byte	0
02900 098B                        00            .byte	0
02901 098C                        00            .byte	0
02902 098D                        00            .byte	0
02903 098E                        05            .byte	5
02904 098F                        0F            .byte	$F
02905 0990                        FF            .byte	$FF
02906                                           ! 772 },
02907                                           ! 773 {
02908                                           ! 774  40, 24, 8, 0x00, 0x00,
02909 0991                        28            .byte	$28
02910 0992                        18            .byte	$18
02911 0993                        08            .byte	8
02912 0994                        00            .byte	0
02913 0995                        00            .byte	0
02914                                           ! 775  0x01, 0x0f, 0x00, 0x0e,
02915 0996                        01            .byte	1
02916 0997                        0F            .byte	$F
02917 0998                        00            .byte	0
02918 0999                        0E            .byte	$E
02919                                           ! 776  0x63,
02920 099A                        63            .byte	$63
02921                                           ! 777  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 099B                        5F            .byte	$5F
02923 099C                        4F            .byte	$4F
02924 099D                        50            .byte	$50
02925 099E                        82            .byte	$82
02926 099F                        54            .byte	$54
02927 09A0                        80            .byte	$80
02928 09A1                        BF            .byte	$BF
02929 09A2                        1F            .byte	$1F
02930                                           ! 778  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 09A3                        00            .byte	0
02932 09A4                        41            .byte	$41
02933 09A5                        00            .byte	0
02934 09A6                        00            .byte	0
02935 09A7                        00            .byte	0
02936 09A8                        00            .byte	0
02937 09A9                        00            .byte	0
02938 09AA                        00            .byte	0
02939                                           ! 779  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09AB                        9C            .byte	$9C
02941 09AC                        8E            .byte	$8E
02942 09AD                        8F            .byte	$8F
02943 09AE                        28            .byte	$28
02944 09AF                        40            .byte	$40
02945 09B0                        96            .byte	$96
02946 09B1                        B9            .byte	$B9
02947 09B2                        A3            .byte	$A3
02948                                           ! 780  0xff,
02949 09B3                        FF            .byte	$FF
02950                                           ! 781  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09B4                        00            .byte	0
02952 09B5                        01            .byte	1
02953 09B6                        02            .byte	2
02954 09B7                        03            .byte	3
02955 09B8                        04            .byte	4
02956 09B9                        05            .byte	5
02957 09BA                        06            .byte	6
02958 09BB                        07            .byte	7
02959                                           ! 782  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09BC                        08            .byte	8
02961 09BD                        09            .byte	9
02962 09BE                        0A            .byte	$A
02963 09BF                        0B            .byte	$B
02964 09C0                        0C            .byte	$C
02965 09C1                        0D            .byte	$D
02966 09C2                        0E            .byte	$E
02967 09C3                        0F            .byte	$F
02968                                           ! 783  0x41, 0x00, 0x0f, 0x00,
02969 09C4                        41            .byte	$41
02970 09C5                        00            .byte	0
02971 09C6                        0F            .byte	$F
02972 09C7                        00            .byte	0
02973                                           ! 784  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09C8                        00            .byte	0
02975 09C9                        00            .byte	0
02976 09CA                        00            .byte	0
02977 09CB                        00            .byte	0
02978 09CC                        00            .byte	0
02979 09CD                        40            .byte	$40
02980 09CE                        05            .byte	5
02981 09CF                        0F            .byte	$F
02982 09D0                        FF            .byte	$FF
02983                                           ! 785 },
02984                                           ! 786 {
02985                                           ! 787  100, 36, 16, 0x00, 0x00,
02986 09D1                        64            .byte	$64
02987 09D2                        24            .byte	$24
02988 09D3                        10            .byte	$10
02989 09D4                        00            .byte	0
02990 09D5                        00            .byte	0
02991                                           ! 788  0x01, 0x0f, 0x00, 0x06,
02992 09D6                        01            .byte	1
02993 09D7                        0F            .byte	$F
02994 09D8                        00            .byte	0
02995 09D9                        06            .byte	6
02996                                           ! 789  0xe3,
02997 09DA                        E3            .byte	$E3
02998                                           ! 790  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09DB                        7F            .byte	$7F
03000 09DC                        63            .byte	$63
03001 09DD                        63            .byte	$63
03002 09DE                        83            .byte	$83
03003 09DF                        6B            .byte	$6B
03004 09E0                        1B            .byte	$1B
03005 09E1                        72            .byte	$72
03006 09E2                        F0            .byte	$F0
03007                                           ! 791  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09E3                        00            .byte	0
03009 09E4                        60            .byte	$60
03010 09E5                        00            .byte	0
03011 09E6                        00            .byte	0
03012 09E7                        00            .byte	0
03013 09E8                        00            .byte	0
03014 09E9                        00            .byte	0
03015 09EA                        00            .byte	0
03016                                           ! 792  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09EB                        59            .byte	$59
03018 09EC                        8D            .byte	$8D
03019 09ED                        57            .byte	$57
03020 09EE                        32            .byte	$32
03021 09EF                        00            .byte	0
03022 09F0                        57            .byte	$57
03023 09F1                        73            .byte	$73
03024 09F2                        E3            .byte	$E3
03025                                           ! 793  0xff,
03026 09F3                        FF            .byte	$FF
03027                                           ! 794  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09F4                        00            .byte	0
03029 09F5                        01            .byte	1
03030 09F6                        02            .byte	2
03031 09F7                        03            .byte	3
03032 09F8                        04            .byte	4
03033 09F9                        05            .byte	5
03034 09FA                        14            .byte	$14
03035 09FB                        07            .byte	7
03036                                           ! 795  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 09FC                        38            .byte	$38
03038 09FD                        39            .byte	$39
03039 09FE                        3A            .byte	$3A
03040 09FF                        3B            .byte	$3B
03041 0A00                        3C            .byte	$3C
03042 0A01                        3D            .byte	$3D
03043 0A02                        3E            .byte	$3E
03044 0A03                        3F            .byte	$3F
03045                                           ! 796  0x01, 0x00, 0x0f, 0x00,
03046 0A04                        01            .byte	1
03047 0A05                        00            .byte	0
03048 0A06                        0F            .byte	$F
03049 0A07                        00            .byte	0
03050                                           ! 797  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A08                        00            .byte	0
03052 0A09                        00            .byte	0
03053 0A0A                        00            .byte	0
03054 0A0B                        00            .byte	0
03055 0A0C                        00            .byte	0
03056 0A0D                        00            .byte	0
03057 0A0E                        05            .byte	5
03058 0A0F                        0F            .byte	$F
03059 0A10                        FF            .byte	$FF
03060                                           ! 798 },
03061                                           ! 799 };
03062                                           !BCC_EOS
03063                                           ! 800 static Bit8u palette0[63+1][3]=
03064                                           ! 801 {
03065                       00000A11            _palette0:
03066                                           ! 802   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A11                        00            .byte	0
03068 0A12                        00            .byte	0
03069 0A13                        00            .byte	0
03070 0A14                        00            .byte	0
03071 0A15                        00            .byte	0
03072 0A16                        00            .byte	0
03073 0A17                        00            .byte	0
03074 0A18                        00            .byte	0
03075 0A19                        00            .byte	0
03076 0A1A                        00            .byte	0
03077 0A1B                        00            .byte	0
03078 0A1C                        00            .byte	0
03079 0A1D                        00            .byte	0
03080 0A1E                        00            .byte	0
03081 0A1F                        00            .byte	0
03082 0A20                        00            .byte	0
03083 0A21                        00            .byte	0
03084 0A22                        00            .byte	0
03085 0A23                        00            .byte	0
03086 0A24                        00            .byte	0
03087 0A25                        00            .byte	0
03088 0A26                        00            .byte	0
03089 0A27                        00            .byte	0
03090 0A28                        00            .byte	0
03091                                           ! 803   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03092 0A29                        2A            .byte	$2A
03093 0A2A                        2A            .byte	$2A
03094 0A2B                        2A            .byte	$2A
03095 0A2C                        2A            .byte	$2A
03096 0A2D                        2A            .byte	$2A
03097 0A2E                        2A            .byte	$2A
03098 0A2F                        2A            .byte	$2A
03099 0A30                        2A            .byte	$2A
03100 0A31                        2A            .byte	$2A
03101 0A32                        2A            .byte	$2A
03102 0A33                        2A            .byte	$2A
03103 0A34                        2A            .byte	$2A
03104 0A35                        2A            .byte	$2A
03105 0A36                        2A            .byte	$2A
03106 0A37                        2A            .byte	$2A
03107 0A38                        2A            .byte	$2A
03108 0A39                        2A            .byte	$2A
03109 0A3A                        2A            .byte	$2A
03110 0A3B                        2A            .byte	$2A
03111 0A3C                        2A            .byte	$2A
03112 0A3D                        2A            .byte	$2A
03113 0A3E                        2A            .byte	$2A
03114 0A3F                        2A            .byte	$2A
03115 0A40                        2A            .byte	$2A
03116                                           ! 804   0x2a,0x2a,
03117 0A41                        2A            .byte	$2A
03118                                           ! 804 0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03119 0A42                        2A            .byte	$2A
03120 0A43                        2A            .byte	$2A
03121 0A44                        2A            .byte	$2A
03122 0A45                        2A            .byte	$2A
03123 0A46                        2A            .byte	$2A
03124 0A47                        2A            .byte	$2A
03125 0A48                        2A            .byte	$2A
03126 0A49                        2A            .byte	$2A
03127 0A4A                        2A            .byte	$2A
03128 0A4B                        2A            .byte	$2A
03129 0A4C                        2A            .byte	$2A
03130 0A4D                        2A            .byte	$2A
03131 0A4E                        2A            .byte	$2A
03132 0A4F                        2A            .byte	$2A
03133 0A50                        2A            .byte	$2A
03134 0A51                        2A            .byte	$2A
03135 0A52                        2A            .byte	$2A
03136 0A53                        2A            .byte	$2A
03137 0A54                        2A            .byte	$2A
03138 0A55                        2A            .byte	$2A
03139 0A56                        2A            .byte	$2A
03140 0A57                        2A            .byte	$2A
03141 0A58                        2A            .byte	$2A
03142                                           ! 805   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A59                        3F            .byte	$3F
03144 0A5A                        3F            .byte	$3F
03145 0A5B                        3F            .byte	$3F
03146 0A5C                        3F            .byte	$3F
03147 0A5D                        3F            .byte	$3F
03148 0A5E                        3F            .byte	$3F
03149 0A5F                        3F            .byte	$3F
03150 0A60                        3F            .byte	$3F
03151 0A61                        3F            .byte	$3F
03152 0A62                        3F            .byte	$3F
03153 0A63                        3F            .byte	$3F
03154 0A64                        3F            .byte	$3F
03155 0A65                        3F            .byte	$3F
03156 0A66                        3F            .byte	$3F
03157 0A67                        3F            .byte	$3F
03158 0A68                        3F            .byte	$3F
03159 0A69                        3F            .byte	$3F
03160 0A6A                        3F            .byte	$3F
03161 0A6B                        3F            .byte	$3F
03162 0A6C                        3F            .byte	$3F
03163 0A6D                        3F            .byte	$3F
03164 0A6E                        3F            .byte	$3F
03165 0A6F                        3F            .byte	$3F
03166 0A70                        3F            .byte	$3F
03167                                           ! 806   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A71                        00            .byte	0
03169 0A72                        00            .byte	0
03170 0A73                        00            .byte	0
03171 0A74                        00            .byte	0
03172 0A75                        00            .byte	0
03173 0A76                        00            .byte	0
03174 0A77                        00            .byte	0
03175 0A78                        00            .byte	0
03176 0A79                        00            .byte	0
03177 0A7A                        00            .byte	0
03178 0A7B                        00            .byte	0
03179 0A7C                        00            .byte	0
03180 0A7D                        00            .byte	0
03181 0A7E                        00            .byte	0
03182 0A7F                        00            .byte	0
03183 0A80                        00            .byte	0
03184 0A81                        00            .byte	0
03185 0A82                        00            .byte	0
03186 0A83                        00            .byte	0
03187 0A84                        00            .byte	0
03188 0A85                        00            .byte	0
03189 0A86                        00            .byte	0
03190 0A87                        00            .byte	0
03191 0A88                        00            .byte	0
03192                                           ! 807   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A89                        2A            .byte	$2A
03194 0A8A                        2A            .byte	$2A
03195 0A8B                        2A            .byte	$2A
03196 0A8C                        2A            .byte	$2A
03197 0A8D                        2A            .byte	$2A
03198 0A8E                        2A            .byte	$2A
03199 0A8F                        2A            .byte	$2A
03200 0A90                        2A            .byte	$2A
03201 0A91                        2A            .byte	$2A
03202 0A92                        2A            .byte	$2A
03203 0A93                        2A            .byte	$2A
03204 0A94                        2A            .byte	$2A
03205 0A95                        2A            .byte	$2A
03206 0A96                        2A            .byte	$2A
03207 0A97                        2A            .byte	$2A
03208 0A98                        2A            .byte	$2A
03209 0A99                        2A            .byte	$2A
03210 0A9A                        2A            .byte	$2A
03211 0A9B                        2A            .byte	$2A
03212 0A9C                        2A            .byte	$2A
03213 0A9D                        2A            .byte	$2A
03214 0A9E                        2A            .byte	$2A
03215 0A9F                        2A            .byte	$2A
03216 0AA0                        2A            .byte	$2A
03217                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0AA1                        2A            .byte	$2A
03219 0AA2                        2A            .byte	$2A
03220 0AA3                        2A            .byte	$2A
03221 0AA4                        2A            .byte	$2A
03222 0AA5                        2A            .byte	$2A
03223 0AA6                        2A            .byte	$2A
03224 0AA7                        2A            .byte	$2A
03225 0AA8                        2A            .byte	$2A
03226 0AA9                        2A            .byte	$2A
03227 0AAA                        2A            .byte	$2A
03228 0AAB                        2A            .byte	$2A
03229 0AAC                        2A            .byte	$2A
03230 0AAD                        2A            .byte	$2A
03231 0AAE                        2A            .byte	$2A
03232 0AAF                        2A            .byte	$2A
03233 0AB0                        2A            .byte	$2A
03234 0AB1                        2A            .byte	$2A
03235 0AB2                        2A            .byte	$2A
03236 0AB3                        2A            .byte	$2A
03237 0AB4                        2A            .byte	$2A
03238 0AB5                        2A            .byte	$2A
03239 0AB6                        2A            .byte	$2A
03240 0AB7                        2A            .byte	$2A
03241 0AB8                        2A            .byte	$2A
03242                                           ! 809   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AB9                        3F            .byte	$3F
03244 0ABA                        3F            .byte	$3F
03245 0ABB                        3F            .byte	$3F
03246 0ABC                        3F            .byte	$3F
03247 0ABD                        3F            .byte	$3F
03248 0ABE                        3F            .byte	$3F
03249 0ABF                        3F            .byte	$3F
03250 0AC0                        3F            .byte	$3F
03251 0AC1                        3F            .byte	$3F
03252 0AC2                        3F            .byte	$3F
03253 0AC3                        3F            .byte	$3F
03254 0AC4                        3F            .byte	$3F
03255 0AC5                        3F            .byte	$3F
03256 0AC6                        3F            .byte	$3F
03257 0AC7                        3F            .byte	$3F
03258 0AC8                        3F            .byte	$3F
03259 0AC9                        3F            .byte	$3F
03260 0ACA                        3F            .byte	$3F
03261 0ACB                        3F            .byte	$3F
03262 0ACC                        3F            .byte	$3F
03263 0ACD                        3F            .byte	$3F
03264 0ACE                        3F            .byte	$3F
03265 0ACF                        3F            .byte	$3F
03266                                           ! 810 };
03267 0AD0                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 811 static Bit8u palette1[63+1][3]=
03270                                           ! 812 {
03271                       00000AD1            _palette1:
03272                                           ! 813   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0AD1                        00            .byte	0
03274 0AD2                        00            .byte	0
03275 0AD3                        00            .byte	0
03276 0AD4                        00            .byte	0
03277 0AD5                        00            .byte	0
03278 0AD6                        2A            .byte	$2A
03279 0AD7                        00            .byte	0
03280 0AD8                        2A            .byte	$2A
03281 0AD9                        00            .byte	0
03282 0ADA                        00            .byte	0
03283 0ADB                        2A            .byte	$2A
03284 0ADC                        2A            .byte	$2A
03285 0ADD                        2A            .byte	$2A
03286 0ADE                        00            .byte	0
03287 0ADF                        00            .byte	0
03288 0AE0                        2A            .byte	$2A
03289 0AE1                        00            .byte	0
03290 0AE2                        2A            .byte	$2A
03291 0AE3                        2A            .byte	$2A
03292 0AE4                        15            .byte	$15
03293 0AE5                        00            .byte	0
03294 0AE6                        2A            .byte	$2A
03295 0AE7                        2A            .byte	$2A
03296 0AE8                        2A            .byte	$2A
03297                                           ! 814   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AE9                        00            .byte	0
03299 0AEA                        00            .byte	0
03300 0AEB                        00            .byte	0
03301 0AEC                        00            .byte	0
03302 0AED                        00            .byte	0
03303 0AEE                        2A            .byte	$2A
03304 0AEF                        00            .byte	0
03305 0AF0                        2A            .byte	$2A
03306 0AF1                        00            .byte	0
03307 0AF2                        00            .byte	0
03308 0AF3                        2A            .byte	$2A
03309 0AF4                        2A            .byte	$2A
03310 0AF5                        2A            .byte	$2A
03311 0AF6                        00            .byte	0
03312 0AF7                        00            .byte	0
03313 0AF8                        2A            .byte	$2A
03314 0AF9                        00            .byte	0
03315 0AFA                        2A            .byte	$2A
03316 0AFB                        2A            .byte	$2A
03317 0AFC                        15            .byte	$15
03318 0AFD                        00            .byte	0
03319 0AFE                        2A            .byte	$2A
03320 0AFF                        2A            .byte	$2A
03321 0B00                        2A            .byte	$2A
03322                                           ! 815   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0B01                        15            .byte	$15
03324 0B02                        15            .byte	$15
03325 0B03                        15            .byte	$15
03326 0B04                        15            .byte	$15
03327 0B05                        15            .byte	$15
03328 0B06                        3F            .byte	$3F
03329 0B07                        15            .byte	$15
03330 0B08                        3F            .byte	$3F
03331 0B09                        15            .byte	$15
03332 0B0A                        15            .byte	$15
03333 0B0B                        3F            .byte	$3F
03334 0B0C                        3F            .byte	$3F
03335 0B0D                        3F            .byte	$3F
03336 0B0E                        15            .byte	$15
03337 0B0F                        15            .byte	$15
03338 0B10                        3F            .byte	$3F
03339 0B11                        15            .byte	$15
03340 0B12                        3F            .byte	$3F
03341 0B13                        3F            .byte	$3F
03342 0B14                        3F            .byte	$3F
03343 0B15                        15            .byte	$15
03344 0B16                        3F            .byte	$3F
03345 0B17                        3F            .byte	$3F
03346 0B18                        3F            .byte	$3F
03347                                           ! 816   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B19                        15            .byte	$15
03349 0B1A                        15            .byte	$15
03350 0B1B                        15            .byte	$15
03351 0B1C                        15            .byte	$15
03352 0B1D                        15            .byte	$15
03353 0B1E                        3F            .byte	$3F
03354 0B1F                        15            .byte	$15
03355 0B20                        3F            .byte	$3F
03356 0B21                        15            .byte	$15
03357 0B22                        15            .byte	$15
03358 0B23                        3F            .byte	$3F
03359 0B24                        3F            .byte	$3F
03360 0B25                        3F            .byte	$3F
03361 0B26                        15            .byte	$15
03362 0B27                        15            .byte	$15
03363 0B28                        3F            .byte	$3F
03364 0B29                        15            .byte	$15
03365 0B2A                        3F            .byte	$3F
03366 0B2B                        3F            .byte	$3F
03367 0B2C                        3F            .byte	$3F
03368 0B2D                        15            .byte	$15
03369 0B2E                        3F            .byte	$3F
03370 0B2F                        3F            .byte	$3F
03371 0B30                        3F            .byte	$3F
03372                                           ! 817   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B31                        00            .byte	0
03374 0B32                        00            .byte	0
03375 0B33                        00            .byte	0
03376 0B34                        00            .byte	0
03377 0B35                        00            .byte	0
03378 0B36                        2A            .byte	$2A
03379 0B37                        00            .byte	0
03380 0B38                        2A            .byte	$2A
03381 0B39                        00            .byte	0
03382 0B3A                        00            .byte	0
03383 0B3B                        2A            .byte	$2A
03384 0B3C                        2A            .byte	$2A
03385 0B3D                        2A            .byte	$2A
03386 0B3E                        00            .byte	0
03387 0B3F                        00            .byte	0
03388 0B40                        2A            .byte	$2A
03389 0B41                        00            .byte	0
03390 0B42                        2A            .byte	$2A
03391 0B43                        2A            .byte	$2A
03392 0B44                        15            .byte	$15
03393 0B45                        00            .byte	0
03394 0B46                        2A            .byte	$2A
03395 0B47                        2A            .byte	$2A
03396 0B48                        2A            .byte	$2A
03397                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B49                        00            .byte	0
03399 0B4A                        00            .byte	0
03400 0B4B                        00            .byte	0
03401 0B4C                        00            .byte	0
03402 0B4D                        00            .byte	0
03403 0B4E                        2A            .byte	$2A
03404 0B4F                        00            .byte	0
03405 0B50                        2A            .byte	$2A
03406 0B51                        00            .byte	0
03407 0B52                        00            .byte	0
03408 0B53                        2A            .byte	$2A
03409 0B54                        2A            .byte	$2A
03410 0B55                        2A            .byte	$2A
03411 0B56                        00            .byte	0
03412 0B57                        00            .byte	0
03413 0B58                        2A            .byte	$2A
03414 0B59                        00            .byte	0
03415 0B5A                        2A            .byte	$2A
03416 0B5B                        2A            .byte	$2A
03417 0B5C                        15            .byte	$15
03418 0B5D                        00            .byte	0
03419 0B5E                        2A            .byte	$2A
03420 0B5F                        2A            .byte	$2A
03421 0B60                        2A            .byte	$2A
03422                                           ! 819   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B61                        15            .byte	$15
03424 0B62                        15            .byte	$15
03425 0B63                        15            .byte	$15
03426 0B64                        15            .byte	$15
03427 0B65                        15            .byte	$15
03428 0B66                        3F            .byte	$3F
03429 0B67                        15            .byte	$15
03430 0B68                        3F            .byte	$3F
03431 0B69                        15            .byte	$15
03432 0B6A                        15            .byte	$15
03433 0B6B                        3F            .byte	$3F
03434 0B6C                        3F            .byte	$3F
03435 0B6D                        3F            .byte	$3F
03436 0B6E                        15            .byte	$15
03437 0B6F                        15            .byte	$15
03438 0B70                        3F            .byte	$3F
03439 0B71                        15            .byte	$15
03440 0B72                        3F            .byte	$3F
03441 0B73                        3F            .byte	$3F
03442 0B74                        3F            .byte	$3F
03443 0B75                        15            .byte	$15
03444 0B76                        3F            .byte	$3F
03445 0B77                        3F            .byte	$3F
03446 0B78                        3F            .byte	$3F
03447                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B79                        15            .byte	$15
03449 0B7A                        15            .byte	$15
03450 0B7B                        15            .byte	$15
03451 0B7C                        15            .byte	$15
03452 0B7D                        15            .byte	$15
03453 0B7E                        3F            .byte	$3F
03454 0B7F                        15            .byte	$15
03455 0B80                        3F            .byte	$3F
03456 0B81                        15            .byte	$15
03457 0B82                        15            .byte	$15
03458 0B83                        3F            .byte	$3F
03459 0B84                        3F            .byte	$3F
03460 0B85                        3F            .byte	$3F
03461 0B86                        15            .byte	$15
03462 0B87                        15            .byte	$15
03463 0B88                        3F            .byte	$3F
03464 0B89                        15            .byte	$15
03465 0B8A                        3F            .byte	$3F
03466 0B8B                        3F            .byte	$3F
03467 0B8C                        3F            .byte	$3F
03468 0B8D                        15            .byte	$15
03469 0B8E                        3F            .byte	$3F
03470 0B8F                        3F            .byte	$3F
03471                                           ! 821 };
03472 0B90                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 822 static Bit8u palette2[63+1][3]=
03475                                           ! 823 {
03476                       00000B91            _palette2:
03477                                           ! 824   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03478 0B91                        00            .byte	0
03479 0B92                        00            .byte	0
03480 0B93                        00            .byte	0
03481 0B94                        00            .byte	0
03482 0B95                        00            .byte	0
03483 0B96                        2A            .byte	$2A
03484 0B97                        00            .byte	0
03485 0B98                        2A            .byte	$2A
03486 0B99                        00            .byte	0
03487 0B9A                        00            .byte	0
03488 0B9B                        2A            .byte	$2A
03489 0B9C                        2A            .byte	$2A
03490 0B9D                        2A            .byte	$2A
03491 0B9E                        00            .byte	0
03492 0B9F                        00            .byte	0
03493 0BA0                        2A            .byte	$2A
03494 0BA1                        00            .byte	0
03495 0BA2                        2A            .byte	$2A
03496 0BA3                        2A            .byte	$2A
03497 0BA4                        2A            .byte	$2A
03498 0BA5                        00            .byte	0
03499 0BA6                        2A            .byte	$2A
03500 0BA7                        2A            .byte	$2A
03501 0BA8                        2A            .byte	$2A
03502                                           ! 825   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00
03503 0BA9                        00            .byte	0
03504 0BAA                        00            .byte	0
03505 0BAB                        15            .byte	$15
03506 0BAC                        00            .byte	0
03507 0BAD                        00            .byte	0
03508 0BAE                        3F            .byte	$3F
03509                                           ! 825 ,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03510 0BAF                        00            .byte	0
03511 0BB0                        2A            .byte	$2A
03512 0BB1                        15            .byte	$15
03513 0BB2                        00            .byte	0
03514 0BB3                        2A            .byte	$2A
03515 0BB4                        3F            .byte	$3F
03516 0BB5                        2A            .byte	$2A
03517 0BB6                        00            .byte	0
03518 0BB7                        15            .byte	$15
03519 0BB8                        2A            .byte	$2A
03520 0BB9                        00            .byte	0
03521 0BBA                        3F            .byte	$3F
03522 0BBB                        2A            .byte	$2A
03523 0BBC                        2A            .byte	$2A
03524 0BBD                        15            .byte	$15
03525 0BBE                        2A            .byte	$2A
03526 0BBF                        2A            .byte	$2A
03527 0BC0                        3F            .byte	$3F
03528                                           ! 826   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BC1                        00            .byte	0
03530 0BC2                        15            .byte	$15
03531 0BC3                        00            .byte	0
03532 0BC4                        00            .byte	0
03533 0BC5                        15            .byte	$15
03534 0BC6                        2A            .byte	$2A
03535 0BC7                        00            .byte	0
03536 0BC8                        3F            .byte	$3F
03537 0BC9                        00            .byte	0
03538 0BCA                        00            .byte	0
03539 0BCB                        3F            .byte	$3F
03540 0BCC                        2A            .byte	$2A
03541 0BCD                        2A            .byte	$2A
03542 0BCE                        15            .byte	$15
03543 0BCF                        00            .byte	0
03544 0BD0                        2A            .byte	$2A
03545 0BD1                        15            .byte	$15
03546 0BD2                        2A            .byte	$2A
03547 0BD3                        2A            .byte	$2A
03548 0BD4                        3F            .byte	$3F
03549 0BD5                        00            .byte	0
03550 0BD6                        2A            .byte	$2A
03551 0BD7                        3F            .byte	$3F
03552 0BD8                        2A            .byte	$2A
03553                                           ! 827   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BD9                        00            .byte	0
03555 0BDA                        15            .byte	$15
03556 0BDB                        15            .byte	$15
03557 0BDC                        00            .byte	0
03558 0BDD                        15            .byte	$15
03559 0BDE                        3F            .byte	$3F
03560 0BDF                        00            .byte	0
03561 0BE0                        3F            .byte	$3F
03562 0BE1                        15            .byte	$15
03563 0BE2                        00            .byte	0
03564 0BE3                        3F            .byte	$3F
03565 0BE4                        3F            .byte	$3F
03566 0BE5                        2A            .byte	$2A
03567 0BE6                        15            .byte	$15
03568 0BE7                        15            .byte	$15
03569 0BE8                        2A            .byte	$2A
03570 0BE9                        15            .byte	$15
03571 0BEA                        3F            .byte	$3F
03572 0BEB                        2A            .byte	$2A
03573 0BEC                        3F            .byte	$3F
03574 0BED                        15            .byte	$15
03575 0BEE                        2A            .byte	$2A
03576 0BEF                        3F            .byte	$3F
03577 0BF0                        3F            .byte	$3F
03578                                           ! 828   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BF1                        15            .byte	$15
03580 0BF2                        00            .byte	0
03581 0BF3                        00            .byte	0
03582 0BF4                        15            .byte	$15
03583 0BF5                        00            .byte	0
03584 0BF6                        2A            .byte	$2A
03585 0BF7                        15            .byte	$15
03586 0BF8                        2A            .byte	$2A
03587 0BF9                        00            .byte	0
03588 0BFA                        15            .byte	$15
03589 0BFB                        2A            .byte	$2A
03590 0BFC                        2A            .byte	$2A
03591 0BFD                        3F            .byte	$3F
03592 0BFE                        00            .byte	0
03593 0BFF                        00            .byte	0
03594 0C00                        3F            .byte	$3F
03595 0C01                        00            .byte	0
03596 0C02                        2A            .byte	$2A
03597 0C03                        3F            .byte	$3F
03598 0C04                        2A            .byte	$2A
03599 0C05                        00            .byte	0
03600 0C06                        3F            .byte	$3F
03601 0C07                        2A            .byte	$2A
03602 0C08                        2A            .byte	$2A
03603                                           ! 829   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C09                        15            .byte	$15
03605 0C0A                        00            .byte	0
03606 0C0B                        15            .byte	$15
03607 0C0C                        15            .byte	$15
03608 0C0D                        00            .byte	0
03609 0C0E                        3F            .byte	$3F
03610 0C0F                        15            .byte	$15
03611 0C10                        2A            .byte	$2A
03612 0C11                        15            .byte	$15
03613 0C12                        15            .byte	$15
03614 0C13                        2A            .byte	$2A
03615 0C14                        3F            .byte	$3F
03616 0C15                        3F            .byte	$3F
03617 0C16                        00            .byte	0
03618 0C17                        15            .byte	$15
03619 0C18                        3F            .byte	$3F
03620 0C19                        00            .byte	0
03621 0C1A                        3F            .byte	$3F
03622 0C1B                        3F            .byte	$3F
03623 0C1C                        2A            .byte	$2A
03624 0C1D                        15            .byte	$15
03625 0C1E                        3F            .byte	$3F
03626 0C1F                        2A            .byte	$2A
03627 0C20                        3F            .byte	$3F
03628                                           ! 830   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C21                        15            .byte	$15
03630 0C22                        15            .byte	$15
03631 0C23                        00            .byte	0
03632 0C24                        15            .byte	$15
03633 0C25                        15            .byte	$15
03634 0C26                        2A            .byte	$2A
03635 0C27                        15            .byte	$15
03636 0C28                        3F            .byte	$3F
03637 0C29                        00            .byte	0
03638 0C2A                        15            .byte	$15
03639 0C2B                        3F            .byte	$3F
03640 0C2C                        2A            .byte	$2A
03641 0C2D                        3F            .byte	$3F
03642 0C2E                        15            .byte	$15
03643 0C2F                        00            .byte	0
03644 0C30                        3F            .byte	$3F
03645 0C31                        15            .byte	$15
03646 0C32                        2A            .byte	$2A
03647 0C33                        3F            .byte	$3F
03648 0C34                        3F            .byte	$3F
03649 0C35                        00            .byte	0
03650 0C36                        3F            .byte	$3F
03651 0C37                        3F            .byte	$3F
03652 0C38                        2A            .byte	$2A
03653                                           ! 831   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C39                        15            .byte	$15
03655 0C3A                        15            .byte	$15
03656 0C3B                        15            .byte	$15
03657 0C3C                        15            .byte	$15
03658 0C3D                        15            .byte	$15
03659 0C3E                        3F            .byte	$3F
03660 0C3F                        15            .byte	$15
03661 0C40                        3F            .byte	$3F
03662 0C41                        15            .byte	$15
03663 0C42                        15            .byte	$15
03664 0C43                        3F            .byte	$3F
03665 0C44                        3F            .byte	$3F
03666 0C45                        3F            .byte	$3F
03667 0C46                        15            .byte	$15
03668 0C47                        15            .byte	$15
03669 0C48                        3F            .byte	$3F
03670 0C49                        15            .byte	$15
03671 0C4A                        3F            .byte	$3F
03672 0C4B                        3F            .byte	$3F
03673 0C4C                        3F            .byte	$3F
03674 0C4D                        15            .byte	$15
03675 0C4E                        3F            .byte	$3F
03676 0C4F                        3F            .byte	$3F
03677                                           ! 832 };
03678 0C50                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 833 static Bit8u palette3[256][3]=
03681                                           ! 834 {
03682                       00000C51            _palette3:
03683                                           ! 835   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C51                        00            .byte	0
03685 0C52                        00            .byte	0
03686 0C53                        00            .byte	0
03687 0C54                        00            .byte	0
03688 0C55                        00            .byte	0
03689 0C56                        2A            .byte	$2A
03690 0C57                        00            .byte	0
03691 0C58                        2A            .byte	$2A
03692 0C59                        00            .byte	0
03693 0C5A                        00            .byte	0
03694 0C5B                        2A            .byte	$2A
03695 0C5C                        2A            .byte	$2A
03696 0C5D                        2A            .byte	$2A
03697 0C5E                        00            .byte	0
03698 0C5F                        00            .byte	0
03699 0C60                        2A            .byte	$2A
03700 0C61                        00            .byte	0
03701 0C62                        2A            .byte	$2A
03702 0C63                        2A            .byte	$2A
03703 0C64                        15            .byte	$15
03704 0C65                        00            .byte	0
03705 0C66                        2A            .byte	$2A
03706 0C67                        2A            .byte	$2A
03707 0C68                        2A            .byte	$2A
03708                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C69                        15            .byte	$15
03710 0C6A                        15            .byte	$15
03711 0C6B                        15            .byte	$15
03712 0C6C                        15            .byte	$15
03713 0C6D                        15            .byte	$15
03714 0C6E                        3F            .byte	$3F
03715 0C6F                        15            .byte	$15
03716 0C70                        3F            .byte	$3F
03717 0C71                        15            .byte	$15
03718 0C72                        15            .byte	$15
03719 0C73                        3F            .byte	$3F
03720 0C74                        3F            .byte	$3F
03721 0C75                        3F            .byte	$3F
03722 0C76                        15            .byte	$15
03723 0C77                        15            .byte	$15
03724 0C78                        3F            .byte	$3F
03725 0C79                        15            .byte	$15
03726 0C7A                        3F            .byte	$3F
03727 0C7B                        3F            .byte	$3F
03728 0C7C                        3F            .byte	$3F
03729 0C7D                        15            .byte	$15
03730 0C7E                        3F            .byte	$3F
03731 0C7F                        3F            .byte	$3F
03732 0C80                        3F            .byte	$3F
03733                                           ! 837   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C81                        00            .byte	0
03735 0C82                        00            .byte	0
03736 0C83                        00            .byte	0
03737 0C84                        05            .byte	5
03738 0C85                        05            .byte	5
03739 0C86                        05            .byte	5
03740 0C87                        08            .byte	8
03741 0C88                        08            .byte	8
03742 0C89                        08            .byte	8
03743 0C8A                        0B            .byte	$B
03744 0C8B                        0B            .byte	$B
03745 0C8C                        0B            .byte	$B
03746 0C8D                        0E            .byte	$E
03747 0C8E                        0E            .byte	$E
03748 0C8F                        0E            .byte	$E
03749 0C90                        11            .byte	$11
03750 0C91                        11            .byte	$11
03751 0C92                        11            .byte	$11
03752 0C93                        14            .byte	$14
03753 0C94                        14            .byte	$14
03754 0C95                        14            .byte	$14
03755 0C96                        18            .byte	$18
03756 0C97                        18            .byte	$18
03757 0C98                        18            .byte	$18
03758                                           ! 838   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0C99                        1C            .byte	$1C
03760 0C9A                        1C            .byte	$1C
03761 0C9B                        1C            .byte	$1C
03762 0C9C                        20            .byte	$20
03763 0C9D                        20            .byte	$20
03764 0C9E                        20            .byte	$20
03765 0C9F                        24            .byte	$24
03766 0CA0                        24            .byte	$24
03767 0CA1                        24            .byte	$24
03768 0CA2                        28            .byte	$28
03769 0CA3                        28            .byte	$28
03770 0CA4                        28            .byte	$28
03771 0CA5                        2D            .byte	$2D
03772 0CA6                        2D            .byte	$2D
03773 0CA7                        2D            .byte	$2D
03774 0CA8                        32            .byte	$32
03775 0CA9                        32            .byte	$32
03776 0CAA                        32            .byte	$32
03777 0CAB                        38            .byte	$38
03778 0CAC                        38            .byte	$38
03779 0CAD                        38            .byte	$38
03780 0CAE                        3F            .byte	$3F
03781 0CAF                        3F            .byte	$3F
03782 0CB0                        3F            .byte	$3F
03783                                           ! 839   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CB1                        00            .byte	0
03785 0CB2                        00            .byte	0
03786 0CB3                        3F            .byte	$3F
03787 0CB4                        10            .byte	$10
03788 0CB5                        00            .byte	0
03789 0CB6                        3F            .byte	$3F
03790 0CB7                        1F            .byte	$1F
03791 0CB8                        00            .byte	0
03792 0CB9                        3F            .byte	$3F
03793 0CBA                        2F            .byte	$2F
03794 0CBB                        00            .byte	0
03795 0CBC                        3F            .byte	$3F
03796 0CBD                        3F            .byte	$3F
03797 0CBE                        00            .byte	0
03798 0CBF                        3F            .byte	$3F
03799 0CC0                        3F            .byte	$3F
03800 0CC1                        00            .byte	0
03801 0CC2                        2F            .byte	$2F
03802 0CC3                        3F            .byte	$3F
03803 0CC4                        00            .byte	0
03804 0CC5                        1F            .byte	$1F
03805 0CC6                        3F            .byte	$3F
03806 0CC7                        00            .byte	0
03807 0CC8                        10            .byte	$10
03808                                           ! 840   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CC9                        3F            .byte	$3F
03810 0CCA                        00            .byte	0
03811 0CCB                        00            .byte	0
03812 0CCC                        3F            .byte	$3F
03813 0CCD                        10            .byte	$10
03814 0CCE                        00            .byte	0
03815 0CCF                        3F            .byte	$3F
03816 0CD0                        1F            .byte	$1F
03817 0CD1                        00            .byte	0
03818 0CD2                        3F            .byte	$3F
03819 0CD3                        2F            .byte	$2F
03820 0CD4                        00            .byte	0
03821 0CD5                        3F            .byte	$3F
03822 0CD6                        3F            .byte	$3F
03823 0CD7                        00            .byte	0
03824 0CD8                        2F            .byte	$2F
03825 0CD9                        3F            .byte	$3F
03826 0CDA                        00            .byte	0
03827 0CDB                        1F            .byte	$1F
03828 0CDC                        3F            .byte	$3F
03829 0CDD                        00            .byte	0
03830 0CDE                        10            .byte	$10
03831 0CDF                        3F            .byte	$3F
03832 0CE0                        00            .byte	0
03833                                           ! 841   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CE1                        00            .byte	0
03835 0CE2                        3F            .byte	$3F
03836 0CE3                        00            .byte	0
03837 0CE4                        00            .byte	0
03838 0CE5                        3F            .byte	$3F
03839 0CE6                        10            .byte	$10
03840 0CE7                        00            .byte	0
03841 0CE8                        3F            .byte	$3F
03842 0CE9                        1F            .byte	$1F
03843 0CEA                        00            .byte	0
03844 0CEB                        3F            .byte	$3F
03845 0CEC                        2F            .byte	$2F
03846 0CED                        00            .byte	0
03847 0CEE                        3F            .byte	$3F
03848 0CEF                        3F            .byte	$3F
03849 0CF0                        00            .byte	0
03850 0CF1                        2F            .byte	$2F
03851 0CF2                        3F            .byte	$3F
03852 0CF3                        00            .byte	0
03853 0CF4                        1F            .byte	$1F
03854 0CF5                        3F            .byte	$3F
03855 0CF6                        00            .byte	0
03856 0CF7                        10            .byte	$10
03857 0CF8                        3F            .byte	$3F
03858                                           ! 842   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0CF9                        1F            .byte	$1F
03860 0CFA                        1F            .byte	$1F
03861 0CFB                        3F            .byte	$3F
03862 0CFC                        27            .byte	$27
03863 0CFD                        1F            .byte	$1F
03864 0CFE                        3F            .byte	$3F
03865 0CFF                        2F            .byte	$2F
03866 0D00                        1F            .byte	$1F
03867 0D01                        3F            .byte	$3F
03868 0D02                        37            .byte	$37
03869 0D03                        1F            .byte	$1F
03870 0D04                        3F            .byte	$3F
03871 0D05                        3F            .byte	$3F
03872 0D06                        1F            .byte	$1F
03873 0D07                        3F            .byte	$3F
03874 0D08                        3F            .byte	$3F
03875 0D09                        1F            .byte	$1F
03876 0D0A                        37            .byte	$37
03877 0D0B                        3F            .byte	$3F
03878 0D0C                        1F            .byte	$1F
03879 0D0D                        2F            .byte	$2F
03880 0D0E                        3F            .byte	$3F
03881 0D0F                        1F            .byte	$1F
03882 0D10                        27            .byte	$27
03883                                           ! 843   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2
03884 0D11                        3F            .byte	$3F
03885 0D12                        1F            .byte	$1F
03886 0D13                        1F            .byte	$1F
03887 0D14                        3F            .byte	$3F
03888 0D15                        27            .byte	$27
03889 0D16                        1F            .byte	$1F
03890 0D17                        3F            .byte	$3F
03891 0D18                        2F            .byte	$2F
03892 0D19                        1F            .byte	$1F
03893 0D1A                        3F            .byte	$3F
03894 0D1B                        37            .byte	$37
03895 0D1C                        1F            .byte	$1F
03896 0D1D                        3F            .byte	$3F
03897 0D1E                        3F            .byte	$3F
03898 0D1F                        1F            .byte	$1F
03899 0D20                        37            .byte	$37
03900 0D21                        3F            .byte	$3F
03901 0D22                        1F            .byte	$1F
03902                                           ! 843 f,0x3f,0x1f, 0x27,0x3f,0x1f,
03903 0D23                        2F            .byte	$2F
03904 0D24                        3F            .byte	$3F
03905 0D25                        1F            .byte	$1F
03906 0D26                        27            .byte	$27
03907 0D27                        3F            .byte	$3F
03908 0D28                        1F            .byte	$1F
03909                                           ! 844   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D29                        1F            .byte	$1F
03911 0D2A                        3F            .byte	$3F
03912 0D2B                        1F            .byte	$1F
03913 0D2C                        1F            .byte	$1F
03914 0D2D                        3F            .byte	$3F
03915 0D2E                        27            .byte	$27
03916 0D2F                        1F            .byte	$1F
03917 0D30                        3F            .byte	$3F
03918 0D31                        2F            .byte	$2F
03919 0D32                        1F            .byte	$1F
03920 0D33                        3F            .byte	$3F
03921 0D34                        37            .byte	$37
03922 0D35                        1F            .byte	$1F
03923 0D36                        3F            .byte	$3F
03924 0D37                        3F            .byte	$3F
03925 0D38                        1F            .byte	$1F
03926 0D39                        37            .byte	$37
03927 0D3A                        3F            .byte	$3F
03928 0D3B                        1F            .byte	$1F
03929 0D3C                        2F            .byte	$2F
03930 0D3D                        3F            .byte	$3F
03931 0D3E                        1F            .byte	$1F
03932 0D3F                        27            .byte	$27
03933 0D40                        3F            .byte	$3F
03934                                           ! 845   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D41                        2D            .byte	$2D
03936 0D42                        2D            .byte	$2D
03937 0D43                        3F            .byte	$3F
03938 0D44                        31            .byte	$31
03939 0D45                        2D            .byte	$2D
03940 0D46                        3F            .byte	$3F
03941 0D47                        36            .byte	$36
03942 0D48                        2D            .byte	$2D
03943 0D49                        3F            .byte	$3F
03944 0D4A                        3A            .byte	$3A
03945 0D4B                        2D            .byte	$2D
03946 0D4C                        3F            .byte	$3F
03947 0D4D                        3F            .byte	$3F
03948 0D4E                        2D            .byte	$2D
03949 0D4F                        3F            .byte	$3F
03950 0D50                        3F            .byte	$3F
03951 0D51                        2D            .byte	$2D
03952 0D52                        3A            .byte	$3A
03953 0D53                        3F            .byte	$3F
03954 0D54                        2D            .byte	$2D
03955 0D55                        36            .byte	$36
03956 0D56                        3F            .byte	$3F
03957 0D57                        2D            .byte	$2D
03958 0D58                        31            .byte	$31
03959                                           ! 846   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D59                        3F            .byte	$3F
03961 0D5A                        2D            .byte	$2D
03962 0D5B                        2D            .byte	$2D
03963 0D5C                        3F            .byte	$3F
03964 0D5D                        31            .byte	$31
03965 0D5E                        2D            .byte	$2D
03966 0D5F                        3F            .byte	$3F
03967 0D60                        36            .byte	$36
03968 0D61                        2D            .byte	$2D
03969 0D62                        3F            .byte	$3F
03970 0D63                        3A            .byte	$3A
03971 0D64                        2D            .byte	$2D
03972 0D65                        3F            .byte	$3F
03973 0D66                        3F            .byte	$3F
03974 0D67                        2D            .byte	$2D
03975 0D68                        3A            .byte	$3A
03976 0D69                        3F            .byte	$3F
03977 0D6A                        2D            .byte	$2D
03978 0D6B                        36            .byte	$36
03979 0D6C                        3F            .byte	$3F
03980 0D6D                        2D            .byte	$2D
03981 0D6E                        31            .byte	$31
03982 0D6F                        3F            .byte	$3F
03983 0D70                        2D            .byte	$2D
03984                                           ! 847   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D71                        2D            .byte	$2D
03986 0D72                        3F            .byte	$3F
03987 0D73                        2D            .byte	$2D
03988 0D74                        2D            .byte	$2D
03989 0D75                        3F            .byte	$3F
03990 0D76                        31            .byte	$31
03991 0D77                        2D            .byte	$2D
03992 0D78                        3F            .byte	$3F
03993 0D79                        36            .byte	$36
03994 0D7A                        2D            .byte	$2D
03995 0D7B                        3F            .byte	$3F
03996 0D7C                        3A            .byte	$3A
03997 0D7D                        2D            .byte	$2D
03998 0D7E                        3F            .byte	$3F
03999 0D7F                        3F            .byte	$3F
04000 0D80                        2D            .byte	$2D
04001 0D81                        3A            .byte	$3A
04002 0D82                        3F            .byte	$3F
04003 0D83                        2D            .byte	$2D
04004 0D84                        36            .byte	$36
04005 0D85                        3F            .byte	$3F
04006 0D86                        2D            .byte	$2D
04007 0D87                        31            .byte	$31
04008 0D88                        3F            .byte	$3F
04009                                           ! 848   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D89                        00            .byte	0
04011 0D8A                        00            .byte	0
04012 0D8B                        1C            .byte	$1C
04013 0D8C                        07            .byte	7
04014 0D8D                        00            .byte	0
04015 0D8E                        1C            .byte	$1C
04016 0D8F                        0E            .byte	$E
04017 0D90                        00            .byte	0
04018 0D91                        1C            .byte	$1C
04019 0D92                        15            .byte	$15
04020 0D93                        00            .byte	0
04021 0D94                        1C            .byte	$1C
04022 0D95                        1C            .byte	$1C
04023 0D96                        00            .byte	0
04024 0D97                        1C            .byte	$1C
04025 0D98                        1C            .byte	$1C
04026 0D99                        00            .byte	0
04027 0D9A                        15            .byte	$15
04028 0D9B                        1C            .byte	$1C
04029 0D9C                        00            .byte	0
04030 0D9D                        0E            .byte	$E
04031 0D9E                        1C            .byte	$1C
04032 0D9F                        00            .byte	0
04033 0DA0                        07            .byte	7
04034                                           ! 849   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0DA1                        1C            .byte	$1C
04036 0DA2                        00            .byte	0
04037 0DA3                        00            .byte	0
04038 0DA4                        1C            .byte	$1C
04039 0DA5                        07            .byte	7
04040 0DA6                        00            .byte	0
04041 0DA7                        1C            .byte	$1C
04042 0DA8                        0E            .byte	$E
04043 0DA9                        00            .byte	0
04044 0DAA                        1C            .byte	$1C
04045 0DAB                        15            .byte	$15
04046 0DAC                        00            .byte	0
04047 0DAD                        1C            .byte	$1C
04048 0DAE                        1C            .byte	$1C
04049 0DAF                        00            .byte	0
04050 0DB0                        15            .byte	$15
04051 0DB1                        1C            .byte	$1C
04052 0DB2                        00            .byte	0
04053 0DB3                        0E            .byte	$E
04054 0DB4                        1C            .byte	$1C
04055 0DB5                        00            .byte	0
04056 0DB6                        07            .byte	7
04057 0DB7                        1C            .byte	$1C
04058 0DB8                        00            .byte	0
04059                                           ! 850   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DB9                        00            .byte	0
04061 0DBA                        1C            .byte	$1C
04062 0DBB                        00            .byte	0
04063 0DBC                        00            .byte	0
04064 0DBD                        1C            .byte	$1C
04065 0DBE                        07            .byte	7
04066 0DBF                        00            .byte	0
04067 0DC0                        1C            .byte	$1C
04068 0DC1                        0E            .byte	$E
04069 0DC2                        00            .byte	0
04070 0DC3                        1C            .byte	$1C
04071 0DC4                        15            .byte	$15
04072 0DC5                        00            .byte	0
04073 0DC6                        1C            .byte	$1C
04074 0DC7                        1C            .byte	$1C
04075 0DC8                        00            .byte	0
04076 0DC9                        15            .byte	$15
04077 0DCA                        1C            .byte	$1C
04078 0DCB                        00            .byte	0
04079 0DCC                        0E            .byte	$E
04080 0DCD                        1C            .byte	$1C
04081 0DCE                        00            .byte	0
04082 0DCF                        07            .byte	7
04083 0DD0                        1C            .byte	$1C
04084                                           ! 851   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DD1                        0E            .byte	$E
04086 0DD2                        0E            .byte	$E
04087 0DD3                        1C            .byte	$1C
04088 0DD4                        11            .byte	$11
04089 0DD5                        0E            .byte	$E
04090 0DD6                        1C            .byte	$1C
04091 0DD7                        15            .byte	$15
04092 0DD8                        0E            .byte	$E
04093 0DD9                        1C            .byte	$1C
04094 0DDA                        18            .byte	$18
04095 0DDB                        0E            .byte	$E
04096 0DDC                        1C            .byte	$1C
04097 0DDD                        1C            .byte	$1C
04098 0DDE                        0E            .byte	$E
04099 0DDF                        1C            .byte	$1C
04100 0DE0                        1C            .byte	$1C
04101 0DE1                        0E            .byte	$E
04102 0DE2                        18            .byte	$18
04103 0DE3                        1C            .byte	$1C
04104 0DE4                        0E            .byte	$E
04105 0DE5                        15            .byte	$15
04106 0DE6                        1C            .byte	$1C
04107 0DE7                        0E            .byte	$E
04108 0DE8                        11            .byte	$11
04109                                           ! 852   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DE9                        1C            .byte	$1C
04111 0DEA                        0E            .byte	$E
04112 0DEB                        0E            .byte	$E
04113 0DEC                        1C            .byte	$1C
04114 0DED                        11            .byte	$11
04115 0DEE                        0E            .byte	$E
04116 0DEF                        1C            .byte	$1C
04117 0DF0                        15            .byte	$15
04118 0DF1                        0E            .byte	$E
04119 0DF2                        1C            .byte	$1C
04120 0DF3                        18            .byte	$18
04121 0DF4                        0E            .byte	$E
04122 0DF5                        1C            .byte	$1C
04123 0DF6                        1C            .byte	$1C
04124 0DF7                        0E            .byte	$E
04125 0DF8                        18            .byte	$18
04126 0DF9                        1C            .byte	$1C
04127 0DFA                        0E            .byte	$E
04128 0DFB                        15            .byte	$15
04129 0DFC                        1C            .byte	$1C
04130 0DFD                        0E            .byte	$E
04131 0DFE                        11            .byte	$11
04132 0DFF                        1C            .byte	$1C
04133 0E00                        0E            .byte	$E
04134                                           ! 853   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0E01                        0E            .byte	$E
04136 0E02                        1C            .byte	$1C
04137 0E03                        0E            .byte	$E
04138 0E04                        0E            .byte	$E
04139 0E05                        1C            .byte	$1C
04140 0E06                        11            .byte	$11
04141 0E07                        0E            .byte	$E
04142 0E08                        1C            .byte	$1C
04143 0E09                        15            .byte	$15
04144 0E0A                        0E            .byte	$E
04145 0E0B                        1C            .byte	$1C
04146 0E0C                        18            .byte	$18
04147 0E0D                        0E            .byte	$E
04148 0E0E                        1C            .byte	$1C
04149 0E0F                        1C            .byte	$1C
04150 0E10                        0E            .byte	$E
04151 0E11                        18            .byte	$18
04152 0E12                        1C            .byte	$1C
04153 0E13                        0E            .byte	$E
04154 0E14                        15            .byte	$15
04155 0E15                        1C            .byte	$1C
04156 0E16                        0E            .byte	$E
04157 0E17                        11            .byte	$11
04158 0E18                        1C            .byte	$1C
04159                                           ! 854   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E19                        14            .byte	$14
04161 0E1A                        14            .byte	$14
04162 0E1B                        1C            .byte	$1C
04163 0E1C                        16            .byte	$16
04164 0E1D                        14            .byte	$14
04165 0E1E                        1C            .byte	$1C
04166 0E1F                        18            .byte	$18
04167 0E20                        14            .byte	$14
04168 0E21                        1C            .byte	$1C
04169 0E22                        1A            .byte	$1A
04170 0E23                        14            .byte	$14
04171 0E24                        1C            .byte	$1C
04172 0E25                        1C            .byte	$1C
04173 0E26                        14            .byte	$14
04174 0E27                        1C            .byte	$1C
04175 0E28                        1C            .byte	$1C
04176 0E29                        14            .byte	$14
04177 0E2A                        1A            .byte	$1A
04178 0E2B                        1C            .byte	$1C
04179 0E2C                        14            .byte	$14
04180 0E2D                        18            .byte	$18
04181 0E2E                        1C            .byte	$1C
04182 0E2F                        14            .byte	$14
04183 0E30                        16            .byte	$16
04184                                           ! 855   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E31                        1C            .byte	$1C
04186 0E32                        14            .byte	$14
04187 0E33                        14            .byte	$14
04188 0E34                        1C            .byte	$1C
04189 0E35                        16            .byte	$16
04190 0E36                        14            .byte	$14
04191 0E37                        1C            .byte	$1C
04192 0E38                        18            .byte	$18
04193 0E39                        14            .byte	$14
04194 0E3A                        1C            .byte	$1C
04195 0E3B                        1A            .byte	$1A
04196 0E3C                        14            .byte	$14
04197 0E3D                        1C            .byte	$1C
04198 0E3E                        1C            .byte	$1C
04199 0E3F                        14            .byte	$14
04200 0E40                        1A            .byte	$1A
04201 0E41                        1C            .byte	$1C
04202 0E42                        14            .byte	$14
04203 0E43                        18            .byte	$18
04204 0E44                        1C            .byte	$1C
04205 0E45                        14            .byte	$14
04206 0E46                        16            .byte	$16
04207 0E47                        1C            .byte	$1C
04208 0E48                        14            .byte	$14
04209                                           ! 856   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E49                        14            .byte	$14
04211 0E4A                        1C            .byte	$1C
04212 0E4B                        14            .byte	$14
04213 0E4C                        14            .byte	$14
04214 0E4D                        1C            .byte	$1C
04215 0E4E                        16            .byte	$16
04216 0E4F                        14            .byte	$14
04217 0E50                        1C            .byte	$1C
04218 0E51                        18            .byte	$18
04219 0E52                        14            .byte	$14
04220 0E53                        1C            .byte	$1C
04221 0E54                        1A            .byte	$1A
04222 0E55                        14            .byte	$14
04223 0E56                        1C            .byte	$1C
04224 0E57                        1C            .byte	$1C
04225 0E58                        14            .byte	$14
04226 0E59                        1A            .byte	$1A
04227 0E5A                        1C            .byte	$1C
04228 0E5B                        14            .byte	$14
04229 0E5C                        18            .byte	$18
04230 0E5D                        1C            .byte	$1C
04231 0E5E                        14            .byte	$14
04232 0E5F                        16            .byte	$16
04233 0E60                        1C            .byte	$1C
04234                                           ! 857   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E61                        00            .byte	0
04236 0E62                        00            .byte	0
04237 0E63                        10            .byte	$10
04238 0E64                        04            .byte	4
04239 0E65                        00            .byte	0
04240 0E66                        10            .byte	$10
04241 0E67                        08            .byte	8
04242 0E68                        00            .byte	0
04243 0E69                        10            .byte	$10
04244 0E6A                        0C            .byte	$C
04245 0E6B                        00            .byte	0
04246 0E6C                        10            .byte	$10
04247 0E6D                        10            .byte	$10
04248 0E6E                        00            .byte	0
04249 0E6F                        10            .byte	$10
04250 0E70                        10            .byte	$10
04251 0E71                        00            .byte	0
04252 0E72                        0C            .byte	$C
04253 0E73                        10            .byte	$10
04254 0E74                        00            .byte	0
04255 0E75                        08            .byte	8
04256 0E76                        10            .byte	$10
04257 0E77                        00            .byte	0
04258 0E78                        04            .byte	4
04259                                           ! 858   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04260 0E79                        10            .byte	$10
04261 0E7A                        00            .byte	0
04262 0E7B                        00            .byte	0
04263 0E7C                        10            .byte	$10
04264 0E7D                        04            .byte	4
04265 0E7E                        00            .byte	0
04266 0E7F                        10            .byte	$10
04267 0E80                        08            .byte	8
04268 0E81                        00            .byte	0
04269 0E82                        10            .byte	$10
04270 0E83                        0C            .byte	$C
04271 0E84                        00            .byte	0
04272 0E85                        10            .byte	$10
04273 0E86                        10            .byte	$10
04274 0E87                        00            .byte	0
04275 0E88                        0C            .byte	$C
04276 0E89                        10            .byte	$10
04277 0E8A                        00            .byte	0
04278 0E8B                        08            .byte	8
04279 0E8C                        10            .byte	$10
04280 0E8D                        00            .byte	0
04281 0E8E                        04            .byte	4
04282 0E8F                        10            .byte	$10
04283 0E90                        00            .byte	0
04284                                           ! 859   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x0
04285 0E91                        00            .byte	0
04286 0E92                        10            .byte	$10
04287 0E93                        00            .byte	0
04288 0E94                        00            .byte	0
04289 0E95                        10            .byte	$10
04290 0E96                        04            .byte	4
04291 0E97                        00            .byte	0
04292 0E98                        10            .byte	$10
04293 0E99                        08            .byte	8
04294 0E9A                        00            .byte	0
04295 0E9B                        10            .byte	$10
04296 0E9C                        0C            .byte	$C
04297                                           ! 859 0,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04298 0E9D                        00            .byte	0
04299 0E9E                        10            .byte	$10
04300 0E9F                        10            .byte	$10
04301 0EA0                        00            .byte	0
04302 0EA1                        0C            .byte	$C
04303 0EA2                        10            .byte	$10
04304 0EA3                        00            .byte	0
04305 0EA4                        08            .byte	8
04306 0EA5                        10            .byte	$10
04307 0EA6                        00            .byte	0
04308 0EA7                        04            .byte	4
04309 0EA8                        10            .byte	$10
04310                                           ! 860   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EA9                        08            .byte	8
04312 0EAA                        08            .byte	8
04313 0EAB                        10            .byte	$10
04314 0EAC                        0A            .byte	$A
04315 0EAD                        08            .byte	8
04316 0EAE                        10            .byte	$10
04317 0EAF                        0C            .byte	$C
04318 0EB0                        08            .byte	8
04319 0EB1                        10            .byte	$10
04320 0EB2                        0E            .byte	$E
04321 0EB3                        08            .byte	8
04322 0EB4                        10            .byte	$10
04323 0EB5                        10            .byte	$10
04324 0EB6                        08            .byte	8
04325 0EB7                        10            .byte	$10
04326 0EB8                        10            .byte	$10
04327 0EB9                        08            .byte	8
04328 0EBA                        0E            .byte	$E
04329 0EBB                        10            .byte	$10
04330 0EBC                        08            .byte	8
04331 0EBD                        0C            .byte	$C
04332 0EBE                        10            .byte	$10
04333 0EBF                        08            .byte	8
04334 0EC0                        0A            .byte	$A
04335                                           ! 861   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EC1                        10            .byte	$10
04337 0EC2                        08            .byte	8
04338 0EC3                        08            .byte	8
04339 0EC4                        10            .byte	$10
04340 0EC5                        0A            .byte	$A
04341 0EC6                        08            .byte	8
04342 0EC7                        10            .byte	$10
04343 0EC8                        0C            .byte	$C
04344 0EC9                        08            .byte	8
04345 0ECA                        10            .byte	$10
04346 0ECB                        0E            .byte	$E
04347 0ECC                        08            .byte	8
04348 0ECD                        10            .byte	$10
04349 0ECE                        10            .byte	$10
04350 0ECF                        08            .byte	8
04351 0ED0                        0E            .byte	$E
04352 0ED1                        10            .byte	$10
04353 0ED2                        08            .byte	8
04354 0ED3                        0C            .byte	$C
04355 0ED4                        10            .byte	$10
04356 0ED5                        08            .byte	8
04357 0ED6                        0A            .byte	$A
04358 0ED7                        10            .byte	$10
04359 0ED8                        08            .byte	8
04360                                           ! 862   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0ED9                        08            .byte	8
04362 0EDA                        10            .byte	$10
04363 0EDB                        08            .byte	8
04364 0EDC                        08            .byte	8
04365 0EDD                        10            .byte	$10
04366 0EDE                        0A            .byte	$A
04367 0EDF                        08            .byte	8
04368 0EE0                        10            .byte	$10
04369 0EE1                        0C            .byte	$C
04370 0EE2                        08            .byte	8
04371 0EE3                        10            .byte	$10
04372 0EE4                        0E            .byte	$E
04373 0EE5                        08            .byte	8
04374 0EE6                        10            .byte	$10
04375 0EE7                        10            .byte	$10
04376 0EE8                        08            .byte	8
04377 0EE9                        0E            .byte	$E
04378 0EEA                        10            .byte	$10
04379 0EEB                        08            .byte	8
04380 0EEC                        0C            .byte	$C
04381 0EED                        10            .byte	$10
04382 0EEE                        08            .byte	8
04383 0EEF                        0A            .byte	$A
04384 0EF0                        10            .byte	$10
04385                                           ! 863   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EF1                        0B            .byte	$B
04387 0EF2                        0B            .byte	$B
04388 0EF3                        10            .byte	$10
04389 0EF4                        0C            .byte	$C
04390 0EF5                        0B            .byte	$B
04391 0EF6                        10            .byte	$10
04392 0EF7                        0D            .byte	$D
04393 0EF8                        0B            .byte	$B
04394 0EF9                        10            .byte	$10
04395 0EFA                        0F            .byte	$F
04396 0EFB                        0B            .byte	$B
04397 0EFC                        10            .byte	$10
04398 0EFD                        10            .byte	$10
04399 0EFE                        0B            .byte	$B
04400 0EFF                        10            .byte	$10
04401 0F00                        10            .byte	$10
04402 0F01                        0B            .byte	$B
04403 0F02                        0F            .byte	$F
04404 0F03                        10            .byte	$10
04405 0F04                        0B            .byte	$B
04406 0F05                        0D            .byte	$D
04407 0F06                        10            .byte	$10
04408 0F07                        0B            .byte	$B
04409 0F08                        0C            .byte	$C
04410                                           ! 864   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F09                        10            .byte	$10
04412 0F0A                        0B            .byte	$B
04413 0F0B                        0B            .byte	$B
04414 0F0C                        10            .byte	$10
04415 0F0D                        0C            .byte	$C
04416 0F0E                        0B            .byte	$B
04417 0F0F                        10            .byte	$10
04418 0F10                        0D            .byte	$D
04419 0F11                        0B            .byte	$B
04420 0F12                        10            .byte	$10
04421 0F13                        0F            .byte	$F
04422 0F14                        0B            .byte	$B
04423 0F15                        10            .byte	$10
04424 0F16                        10            .byte	$10
04425 0F17                        0B            .byte	$B
04426 0F18                        0F            .byte	$F
04427 0F19                        10            .byte	$10
04428 0F1A                        0B            .byte	$B
04429 0F1B                        0D            .byte	$D
04430 0F1C                        10            .byte	$10
04431 0F1D                        0B            .byte	$B
04432 0F1E                        0C            .byte	$C
04433 0F1F                        10            .byte	$10
04434 0F20                        0B            .byte	$B
04435                                           ! 865   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F21                        0B            .byte	$B
04437 0F22                        10            .byte	$10
04438 0F23                        0B            .byte	$B
04439 0F24                        0B            .byte	$B
04440 0F25                        10            .byte	$10
04441 0F26                        0C            .byte	$C
04442 0F27                        0B            .byte	$B
04443 0F28                        10            .byte	$10
04444 0F29                        0D            .byte	$D
04445 0F2A                        0B            .byte	$B
04446 0F2B                        10            .byte	$10
04447 0F2C                        0F            .byte	$F
04448 0F2D                        0B            .byte	$B
04449 0F2E                        10            .byte	$10
04450 0F2F                        10            .byte	$10
04451 0F30                        0B            .byte	$B
04452 0F31                        0F            .byte	$F
04453 0F32                        10            .byte	$10
04454 0F33                        0B            .byte	$B
04455 0F34                        0D            .byte	$D
04456 0F35                        10            .byte	$10
04457 0F36                        0B            .byte	$B
04458 0F37                        0C            .byte	$C
04459 0F38                        10            .byte	$10
04460                                           ! 866   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F39                        00            .byte	0
04462 0F3A                        00            .byte	0
04463 0F3B                        00            .byte	0
04464 0F3C                        00            .byte	0
04465 0F3D                        00            .byte	0
04466 0F3E                        00            .byte	0
04467 0F3F                        00            .byte	0
04468 0F40                        00            .byte	0
04469 0F41                        00            .byte	0
04470 0F42                        00            .byte	0
04471 0F43                        00            .byte	0
04472 0F44                        00            .byte	0
04473 0F45                        00            .byte	0
04474 0F46                        00            .byte	0
04475 0F47                        00            .byte	0
04476 0F48                        00            .byte	0
04477 0F49                        00            .byte	0
04478 0F4A                        00            .byte	0
04479 0F4B                        00            .byte	0
04480 0F4C                        00            .byte	0
04481 0F4D                        00            .byte	0
04482 0F4E                        00            .byte	0
04483 0F4F                        00            .byte	0
04484                                           ! 867 };
04485 0F50                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 868 static Bit8u static_functionality[0x10]=
04488                                           ! 869 {
04489                       00000F51            _static_functionality:
04490                                           ! 870          0xff,
04491 0F51                        FF            .byte	$FF
04492                                           ! 871          0xe0,
04493 0F52                        E0            .byte	$E0
04494                                           ! 872          0x0f,
04495 0F53                        0F            .byte	$F
04496                                           ! 873          0x00, 0x00, 0x00, 0x00,
04497 0F54                        00            .byte	0
04498 0F55                        00            .byte	0
04499 0F56                        00            .byte	0
04500 0F57                        00            .byte	0
04501                                           ! 874          0x07,
04502 0F58                        07            .byte	7
04503                                           ! 875          0x02,
04504 0F59                        02            .byte	2
04505                                           ! 876          0x08,
04506 0F5A                        08            .byte	8
04507                                           ! 877          0xe7,
04508 0F5B                        E7            .byte	$E7
04509                                           ! 878          0x0c,
04510 0F5C                        0C            .byte	$C
04511                                           ! 879          0x00,
04512 0F5D                        00            .byte	0
04513                                           ! 880          0x00,
04514 0F5E                        00            .byte	0
04515                                           ! 881          0x00,
04516 0F5F                        00            .byte	0
04517                                           ! 882          0x00
04518                                           ! 883 };
04519 0F60                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 884 static Bit8u vgafont8[256*8]=
04522                                           ! 885 {
04523                       00000F61            _vgafont8:
04524                                           ! 886  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F61                        00            .byte	0
04526 0F62                        00            .byte	0
04527 0F63                        00            .byte	0
04528 0F64                        00            .byte	0
04529 0F65                        00            .byte	0
04530 0F66                        00            .byte	0
04531 0F67                        00            .byte	0
04532 0F68                        00            .byte	0
04533                                           ! 887  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F69                        7E            .byte	$7E
04535 0F6A                        81            .byte	$81
04536 0F6B                        A5            .byte	$A5
04537 0F6C                        81            .byte	$81
04538 0F6D                        BD            .byte	$BD
04539 0F6E                        99            .byte	$99
04540 0F6F                        81            .byte	$81
04541 0F70                        7E            .byte	$7E
04542                                           ! 888  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F71                        7E            .byte	$7E
04544 0F72                        FF            .byte	$FF
04545 0F73                        DB            .byte	$DB
04546 0F74                        FF            .byte	$FF
04547 0F75                        C3            .byte	$C3
04548 0F76                        E7            .byte	$E7
04549 0F77                        FF            .byte	$FF
04550 0F78                        7E            .byte	$7E
04551                                           ! 889  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F79                        6C            .byte	$6C
04553 0F7A                        FE            .byte	$FE
04554 0F7B                        FE            .byte	$FE
04555 0F7C                        FE            .byte	$FE
04556 0F7D                        7C            .byte	$7C
04557 0F7E                        38            .byte	$38
04558 0F7F                        10            .byte	$10
04559 0F80                        00            .byte	0
04560                                           ! 890  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F81                        10            .byte	$10
04562 0F82                        38            .byte	$38
04563 0F83                        7C            .byte	$7C
04564 0F84                        FE            .byte	$FE
04565 0F85                        7C            .byte	$7C
04566 0F86                        38            .byte	$38
04567 0F87                        10            .byte	$10
04568 0F88                        00            .byte	0
04569                                           ! 891  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F89                        38            .byte	$38
04571 0F8A                        7C            .byte	$7C
04572 0F8B                        38            .byte	$38
04573 0F8C                        FE            .byte	$FE
04574 0F8D                        FE            .byte	$FE
04575 0F8E                        7C            .byte	$7C
04576 0F8F                        38            .byte	$38
04577 0F90                        7C            .byte	$7C
04578                                           ! 892  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F91                        10            .byte	$10
04580 0F92                        10            .byte	$10
04581 0F93                        38            .byte	$38
04582 0F94                        7C            .byte	$7C
04583 0F95                        FE            .byte	$FE
04584 0F96                        7C            .byte	$7C
04585 0F97                        38            .byte	$38
04586 0F98                        7C            .byte	$7C
04587                                           ! 893  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0F99                        00            .byte	0
04589 0F9A                        00            .byte	0
04590 0F9B                        18            .byte	$18
04591 0F9C                        3C            .byte	$3C
04592 0F9D                        3C            .byte	$3C
04593 0F9E                        18            .byte	$18
04594 0F9F                        00            .byte	0
04595 0FA0                        00            .byte	0
04596                                           ! 894  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0FA1                        FF            .byte	$FF
04598 0FA2                        FF            .byte	$FF
04599 0FA3                        E7            .byte	$E7
04600 0FA4                        C3            .byte	$C3
04601 0FA5                        C3            .byte	$C3
04602 0FA6                        E7            .byte	$E7
04603 0FA7                        FF            .byte	$FF
04604 0FA8                        FF            .byte	$FF
04605                                           ! 895  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FA9                        00            .byte	0
04607 0FAA                        3C            .byte	$3C
04608 0FAB                        66            .byte	$66
04609 0FAC                        42            .byte	$42
04610 0FAD                        42            .byte	$42
04611 0FAE                        66            .byte	$66
04612 0FAF                        3C            .byte	$3C
04613 0FB0                        00            .byte	0
04614                                           ! 896  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FB1                        FF            .byte	$FF
04616 0FB2                        C3            .byte	$C3
04617 0FB3                        99            .byte	$99
04618 0FB4                        BD            .byte	$BD
04619 0FB5                        BD            .byte	$BD
04620 0FB6                        99            .byte	$99
04621 0FB7                        C3            .byte	$C3
04622 0FB8                        FF            .byte	$FF
04623                                           ! 897  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FB9                        0F            .byte	$F
04625 0FBA                        07            .byte	7
04626 0FBB                        0F            .byte	$F
04627 0FBC                        7D            .byte	$7D
04628 0FBD                        CC            .byte	$CC
04629 0FBE                        CC            .byte	$CC
04630 0FBF                        CC            .byte	$CC
04631 0FC0                        78            .byte	$78
04632                                           ! 898  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FC1                        3C            .byte	$3C
04634 0FC2                        66            .byte	$66
04635 0FC3                        66            .byte	$66
04636 0FC4                        66            .byte	$66
04637 0FC5                        3C            .byte	$3C
04638 0FC6                        18            .byte	$18
04639 0FC7                        7E            .byte	$7E
04640 0FC8                        18            .byte	$18
04641                                           ! 899  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FC9                        3F            .byte	$3F
04643 0FCA                        33            .byte	$33
04644 0FCB                        3F            .byte	$3F
04645 0FCC                        30            .byte	$30
04646 0FCD                        30            .byte	$30
04647 0FCE                        70            .byte	$70
04648 0FCF                        F0            .byte	$F0
04649 0FD0                        E0            .byte	$E0
04650                                           ! 900  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04651 0FD1                        7F            .byte	$7F
04652 0FD2                        63            .byte	$63
04653 0FD3                        7F            .byte	$7F
04654 0FD4                        63            .byte	$63
04655 0FD5                        63            .byte	$63
04656 0FD6                        67            .byte	$67
04657 0FD7                        E6            .byte	$E6
04658 0FD8                        C0            .byte	$C0
04659                                           ! 901  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04660 0FD9                        99            .byte	$99
04661 0FDA                        5A            .byte	$5A
04662 0FDB                        3C            .byte	$3C
04663 0FDC                        E7            .byte	$E7
04664 0FDD                        E7            .byte	$E7
04665 0FDE                        3C            .byte	$3C
04666 0FDF                        5A            .byte	$5A
04667 0FE0                        99            .byte	$99
04668                                           ! 902  
04669                                           ! 902 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FE1                        80            .byte	$80
04671 0FE2                        E0            .byte	$E0
04672 0FE3                        F8            .byte	$F8
04673 0FE4                        FE            .byte	$FE
04674 0FE5                        F8            .byte	$F8
04675 0FE6                        E0            .byte	$E0
04676 0FE7                        80            .byte	$80
04677 0FE8                        00            .byte	0
04678                                           ! 903  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FE9                        02            .byte	2
04680 0FEA                        0E            .byte	$E
04681 0FEB                        3E            .byte	$3E
04682 0FEC                        FE            .byte	$FE
04683 0FED                        3E            .byte	$3E
04684 0FEE                        0E            .byte	$E
04685 0FEF                        02            .byte	2
04686 0FF0                        00            .byte	0
04687                                           ! 904  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FF1                        18            .byte	$18
04689 0FF2                        3C            .byte	$3C
04690 0FF3                        7E            .byte	$7E
04691 0FF4                        18            .byte	$18
04692 0FF5                        18            .byte	$18
04693 0FF6                        7E            .byte	$7E
04694 0FF7                        3C            .byte	$3C
04695 0FF8                        18            .byte	$18
04696                                           ! 905  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 0FF9                        66            .byte	$66
04698 0FFA                        66            .byte	$66
04699 0FFB                        66            .byte	$66
04700 0FFC                        66            .byte	$66
04701 0FFD                        66            .byte	$66
04702 0FFE                        00            .byte	0
04703 0FFF                        66            .byte	$66
04704 1000                        00            .byte	0
04705                                           ! 906  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 1001                        7F            .byte	$7F
04707 1002                        DB            .byte	$DB
04708 1003                        DB            .byte	$DB
04709 1004                        7B            .byte	$7B
04710 1005                        1B            .byte	$1B
04711 1006                        1B            .byte	$1B
04712 1007                        1B            .byte	$1B
04713 1008                        00            .byte	0
04714                                           ! 907  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1009                        3E            .byte	$3E
04716 100A                        63            .byte	$63
04717 100B                        38            .byte	$38
04718 100C                        6C            .byte	$6C
04719 100D                        6C            .byte	$6C
04720 100E                        38            .byte	$38
04721 100F                        CC            .byte	$CC
04722 1010                        78            .byte	$78
04723                                           ! 908  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 1011                        00            .byte	0
04725 1012                        00            .byte	0
04726 1013                        00            .byte	0
04727 1014                        00            .byte	0
04728 1015                        7E            .byte	$7E
04729 1016                        7E            .byte	$7E
04730 1017                        7E            .byte	$7E
04731 1018                        00            .byte	0
04732                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1019                        18            .byte	$18
04734 101A                        3C            .byte	$3C
04735 101B                        7E            .byte	$7E
04736 101C                        18            .byte	$18
04737 101D                        7E            .byte	$7E
04738 101E                        3C            .byte	$3C
04739 101F                        18            .byte	$18
04740 1020                        FF            .byte	$FF
04741                                           ! 910  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 1021                        18            .byte	$18
04743 1022                        3C            .byte	$3C
04744 1023                        7E            .byte	$7E
04745 1024                        18            .byte	$18
04746 1025                        18            .byte	$18
04747 1026                        18            .byte	$18
04748 1027                        18            .byte	$18
04749 1028                        00            .byte	0
04750                                           ! 911  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1029                        18            .byte	$18
04752 102A                        18            .byte	$18
04753 102B                        18            .byte	$18
04754 102C                        18            .byte	$18
04755 102D                        7E            .byte	$7E
04756 102E                        3C            .byte	$3C
04757 102F                        18            .byte	$18
04758 1030                        00            .byte	0
04759                                           ! 912  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 1031                        00            .byte	0
04761 1032                        18            .byte	$18
04762 1033                        0C            .byte	$C
04763 1034                        FE            .byte	$FE
04764 1035                        0C            .byte	$C
04765 1036                        18            .byte	$18
04766 1037                        00            .byte	0
04767 1038                        00            .byte	0
04768                                           ! 913  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1039                        00            .byte	0
04770 103A                        30            .byte	$30
04771 103B                        60            .byte	$60
04772 103C                        FE            .byte	$FE
04773 103D                        60            .byte	$60
04774 103E                        30            .byte	$30
04775 103F                        00            .byte	0
04776 1040                        00            .byte	0
04777                                           ! 914  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 1041                        00            .byte	0
04779 1042                        00            .byte	0
04780 1043                        C0            .byte	$C0
04781 1044                        C0            .byte	$C0
04782 1045                        C0            .byte	$C0
04783 1046                        FE            .byte	$FE
04784 1047                        00            .byte	0
04785 1048                        00            .byte	0
04786                                           ! 915  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1049                        00            .byte	0
04788 104A                        24            .byte	$24
04789 104B                        66            .byte	$66
04790 104C                        FF            .byte	$FF
04791 104D                        66            .byte	$66
04792 104E                        24            .byte	$24
04793 104F                        00            .byte	0
04794 1050                        00            .byte	0
04795                                           ! 916  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 1051                        00            .byte	0
04797 1052                        18            .byte	$18
04798 1053                        3C            .byte	$3C
04799 1054                        7E            .byte	$7E
04800 1055                        FF            .byte	$FF
04801 1056                        FF            .byte	$FF
04802 1057                        00            .byte	0
04803 1058                        00            .byte	0
04804                                           ! 917  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1059                        00            .byte	0
04806 105A                        FF            .byte	$FF
04807 105B                        FF            .byte	$FF
04808 105C                        7E            .byte	$7E
04809 105D                        3C            .byte	$3C
04810 105E                        18            .byte	$18
04811 105F                        00            .byte	0
04812 1060                        00            .byte	0
04813                                           ! 918  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 1061                        00            .byte	0
04815 1062                        00            .byte	0
04816 1063                        00            .byte	0
04817 1064                        00            .byte	0
04818 1065                        00            .byte	0
04819 1066                        00            .byte	0
04820 1067                        00            .byte	0
04821 1068                        00            .byte	0
04822                                           ! 919  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1069                        30            .byte	$30
04824 106A                        78            .byte	$78
04825 106B                        78            .byte	$78
04826 106C                        30            .byte	$30
04827 106D                        30            .byte	$30
04828 106E                        00            .byte	0
04829 106F                        30            .byte	$30
04830 1070                        00            .byte	0
04831                                           ! 920  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 1071                        6C            .byte	$6C
04833 1072                        6C            .byte	$6C
04834 1073                        6C            .byte	$6C
04835 1074                        00            .byte	0
04836 1075                        00            .byte	0
04837 1076                        00            .byte	0
04838 1077                        00            .byte	0
04839 1078                        00            .byte	0
04840                                           ! 921  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1079                        6C            .byte	$6C
04842 107A                        6C            .byte	$6C
04843 107B                        FE            .byte	$FE
04844 107C                        6C            .byte	$6C
04845 107D                        FE            .byte	$FE
04846 107E                        6C            .byte	$6C
04847 107F                        6C            .byte	$6C
04848 1080                        00            .byte	0
04849                                           ! 922  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 1081                        30            .byte	$30
04851 1082                        7C            .byte	$7C
04852 1083                        C0            .byte	$C0
04853 1084                        78            .byte	$78
04854 1085                        0C            .byte	$C
04855 1086                        F8            .byte	$F8
04856 1087                        30            .byte	$30
04857 1088                        00            .byte	0
04858                                           ! 923  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1089                        00            .byte	0
04860 108A                        C6            .byte	$C6
04861 108B                        CC            .byte	$CC
04862 108C                        18            .byte	$18
04863 108D                        30            .byte	$30
04864 108E                        66            .byte	$66
04865 108F                        C6            .byte	$C6
04866 1090                        00            .byte	0
04867                                           ! 924  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 1091                        38            .byte	$38
04869 1092                        6C            .byte	$6C
04870 1093                        38            .byte	$38
04871 1094                        76            .byte	$76
04872 1095                        DC            .byte	$DC
04873 1096                        CC            .byte	$CC
04874 1097                        76            .byte	$76
04875 1098                        00            .byte	0
04876                                           ! 925  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 1099                        60            .byte	$60
04878 109A                        60            .byte	$60
04879 109B                        C0            .byte	$C0
04880 109C                        00            .byte	0
04881 109D                        00            .byte	0
04882 109E                        00            .byte	0
04883 109F                        00            .byte	0
04884 10A0                        00            .byte	0
04885                                           ! 926  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 10A1                        18            .byte	$18
04887 10A2                        30            .byte	$30
04888 10A3                        60            .byte	$60
04889 10A4                        60            .byte	$60
04890 10A5                        60            .byte	$60
04891 10A6                        30            .byte	$30
04892 10A7                        18            .byte	$18
04893 10A8                        00            .byte	0
04894                                           ! 927  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10A9                        60            .byte	$60
04896 10AA                        30            .byte	$30
04897 10AB                        18            .byte	$18
04898 10AC                        18            .byte	$18
04899 10AD                        18            .byte	$18
04900 10AE                        30            .byte	$30
04901 10AF                        60            .byte	$60
04902 10B0                        00            .byte	0
04903                                           ! 928  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10B1                        00            .byte	0
04905 10B2                        66            .byte	$66
04906 10B3                        3C            .byte	$3C
04907 10B4                        FF            .byte	$FF
04908 10B5                        3C            .byte	$3C
04909 10B6                        66            .byte	$66
04910 10B7                        00            .byte	0
04911 10B8                        00            .byte	0
04912                                           ! 929  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10B9                        00            .byte	0
04914 10BA                        30            .byte	$30
04915 10BB                        30            .byte	$30
04916 10BC                        FC            .byte	$FC
04917 10BD                        30            .byte	$30
04918 10BE                        30            .byte	$30
04919 10BF                        00            .byte	0
04920 10C0                        00            .byte	0
04921                                           ! 930  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10C1                        00            .byte	0
04923 10C2                        00            .byte	0
04924 10C3                        00            .byte	0
04925 10C4                        00            .byte	0
04926 10C5                        00            .byte	0
04927 10C6                        30            .byte	$30
04928 10C7                        30            .byte	$30
04929 10C8                        60            .byte	$60
04930                                           ! 931  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10C9                        00            .byte	0
04932 10CA                        00            .byte	0
04933 10CB                        00            .byte	0
04934 10CC                        FC            .byte	$FC
04935 10CD                        00            .byte	0
04936 10CE                        00            .byte	0
04937 10CF                        00            .byte	0
04938 10D0                        00            .byte	0
04939                                           ! 932  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10D1                        00            .byte	0
04941 10D2                        00            .byte	0
04942 10D3                        00            .byte	0
04943 10D4                        00            .byte	0
04944 10D5                        00            .byte	0
04945 10D6                        30            .byte	$30
04946 10D7                        30            .byte	$30
04947 10D8                        00            .byte	0
04948                                           ! 933  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10D9                        06            .byte	6
04950 10DA                        0C            .byte	$C
04951 10DB                        18            .byte	$18
04952 10DC                        30            .byte	$30
04953 10DD                        60            .byte	$60
04954 10DE                        C0            .byte	$C0
04955 10DF                        80            .byte	$80
04956 10E0                        00            .byte	0
04957                                           ! 934  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10E1                        7C            .byte	$7C
04959 10E2                        C6            .byte	$C6
04960 10E3                        CE            .byte	$CE
04961 10E4                        DE            .byte	$DE
04962 10E5                        F6            .byte	$F6
04963 10E6                        E6            .byte	$E6
04964 10E7                        7C            .byte	$7C
04965 10E8                        00            .byte	0
04966                                           ! 935  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10E9                        30            .byte	$30
04968 10EA                        70            .byte	$70
04969 10EB                        30            .byte	$30
04970 10EC                        30            .byte	$30
04971 10ED                        30            .byte	$30
04972 10EE                        30            .byte	$30
04973 10EF                        FC            .byte	$FC
04974 10F0                        00            .byte	0
04975                                           ! 936  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10F1                        78            .byte	$78
04977 10F2                        CC            .byte	$CC
04978 10F3                        0C            .byte	$C
04979 10F4                        38            .byte	$38
04980 10F5                        60            .byte	$60
04981 10F6                        CC            .byte	$CC
04982 10F7                        FC            .byte	$FC
04983 10F8                        00            .byte	0
04984                                           ! 937  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 10F9                        78            .byte	$78
04986 10FA                        CC            .byte	$CC
04987 10FB                        0C            .byte	$C
04988 10FC                        38            .byte	$38
04989 10FD                        0C            .byte	$C
04990 10FE                        CC            .byte	$CC
04991 10FF                        78            .byte	$78
04992 1100                        00            .byte	0
04993                                           ! 938  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 1101                        1C            .byte	$1C
04995 1102                        3C            .byte	$3C
04996 1103                        6C            .byte	$6C
04997 1104                        CC            .byte	$CC
04998 1105                        FE            .byte	$FE
04999 1106                        0C            .byte	$C
05000 1107                        1E            .byte	$1E
05001 1108                        00            .byte	0
05002                                           ! 939  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1109                        FC            .byte	$FC
05004 110A                        C0            .byte	$C0
05005 110B                        F8            .byte	$F8
05006 110C                        0C            .byte	$C
05007 110D                        0C            .byte	$C
05008 110E                        CC            .byte	$CC
05009 110F                        78            .byte	$78
05010 1110                        00            .byte	0
05011                                           ! 940  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 1111                        38            .byte	$38
05013 1112                        60            .byte	$60
05014 1113                        C0            .byte	$C0
05015 1114                        F8            .byte	$F8
05016 1115                        CC            .byte	$CC
05017 1116                        CC            .byte	$CC
05018 1117                        78            .byte	$78
05019 1118                        00            .byte	0
05020                                           ! 941  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05021 1119                        FC            .byte	$FC
05022 111A                        CC            .byte	$CC
05023 111B                        0C            .byte	$C
05024 111C                        18            .byte	$18
05025 111D                        30            .byte	$30
05026 111E                        30            .byte	$30
05027 111F                        30            .byte	$30
05028 1120                        00            .byte	0
05029                                           ! 942  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05030 1121                        78            .byte	$78
05031 1122                        CC            .byte	$CC
05032 1123                        CC            .byte	$CC
05033 1124                        78            .byte	$78
05034 1125                        CC            .byte	$CC
05035 1126                        CC            .byte	$CC
05036 1127                        78            .byte	$78
05037 1128                        00            .byte	0
05038                                           ! 943  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x7
05039 1129                        78            .byte	$78
05040 112A                        CC            .byte	$CC
05041 112B                        CC            .byte	$CC
05042 112C                        7C            .byte	$7C
05043 112D                        0C            .byte	$C
05044 112E                        18            .byte	$18
05045                                           ! 943 0, 0x00,
05046 112F                        70            .byte	$70
05047 1130                        00            .byte	0
05048                                           ! 944  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 1131                        00            .byte	0
05050 1132                        30            .byte	$30
05051 1133                        30            .byte	$30
05052 1134                        00            .byte	0
05053 1135                        00            .byte	0
05054 1136                        30            .byte	$30
05055 1137                        30            .byte	$30
05056 1138                        00            .byte	0
05057                                           ! 945  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1139                        00            .byte	0
05059 113A                        30            .byte	$30
05060 113B                        30            .byte	$30
05061 113C                        00            .byte	0
05062 113D                        00            .byte	0
05063 113E                        30            .byte	$30
05064 113F                        30            .byte	$30
05065 1140                        60            .byte	$60
05066                                           ! 946  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 1141                        18            .byte	$18
05068 1142                        30            .byte	$30
05069 1143                        60            .byte	$60
05070 1144                        C0            .byte	$C0
05071 1145                        60            .byte	$60
05072 1146                        30            .byte	$30
05073 1147                        18            .byte	$18
05074 1148                        00            .byte	0
05075                                           ! 947  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1149                        00            .byte	0
05077 114A                        00            .byte	0
05078 114B                        FC            .byte	$FC
05079 114C                        00            .byte	0
05080 114D                        00            .byte	0
05081 114E                        FC            .byte	$FC
05082 114F                        00            .byte	0
05083 1150                        00            .byte	0
05084                                           ! 948  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 1151                        60            .byte	$60
05086 1152                        30            .byte	$30
05087 1153                        18            .byte	$18
05088 1154                        0C            .byte	$C
05089 1155                        18            .byte	$18
05090 1156                        30            .byte	$30
05091 1157                        60            .byte	$60
05092 1158                        00            .byte	0
05093                                           ! 949  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1159                        78            .byte	$78
05095 115A                        CC            .byte	$CC
05096 115B                        0C            .byte	$C
05097 115C                        18            .byte	$18
05098 115D                        30            .byte	$30
05099 115E                        00            .byte	0
05100 115F                        30            .byte	$30
05101 1160                        00            .byte	0
05102                                           ! 950  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 1161                        7C            .byte	$7C
05104 1162                        C6            .byte	$C6
05105 1163                        DE            .byte	$DE
05106 1164                        DE            .byte	$DE
05107 1165                        DE            .byte	$DE
05108 1166                        C0            .byte	$C0
05109 1167                        78            .byte	$78
05110 1168                        00            .byte	0
05111                                           ! 951  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1169                        30            .byte	$30
05113 116A                        78            .byte	$78
05114 116B                        CC            .byte	$CC
05115 116C                        CC            .byte	$CC
05116 116D                        FC            .byte	$FC
05117 116E                        CC            .byte	$CC
05118 116F                        CC            .byte	$CC
05119 1170                        00            .byte	0
05120                                           ! 952  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 1171                        FC            .byte	$FC
05122 1172                        66            .byte	$66
05123 1173                        66            .byte	$66
05124 1174                        7C            .byte	$7C
05125 1175                        66            .byte	$66
05126 1176                        66            .byte	$66
05127 1177                        FC            .byte	$FC
05128 1178                        00            .byte	0
05129                                           ! 953  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1179                        3C            .byte	$3C
05131 117A                        66            .byte	$66
05132 117B                        C0            .byte	$C0
05133 117C                        C0            .byte	$C0
05134 117D                        C0            .byte	$C0
05135 117E                        66            .byte	$66
05136 117F                        3C            .byte	$3C
05137 1180                        00            .byte	0
05138                                           ! 954  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 1181                        F8            .byte	$F8
05140 1182                        6C            .byte	$6C
05141 1183                        66            .byte	$66
05142 1184                        66            .byte	$66
05143 1185                        66            .byte	$66
05144 1186                        6C            .byte	$6C
05145 1187                        F8            .byte	$F8
05146 1188                        00            .byte	0
05147                                           ! 955  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1189                        FE            .byte	$FE
05149 118A                        62            .byte	$62
05150 118B                        68            .byte	$68
05151 118C                        78            .byte	$78
05152 118D                        68            .byte	$68
05153 118E                        62            .byte	$62
05154 118F                        FE            .byte	$FE
05155 1190                        00            .byte	0
05156                                           ! 956  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 1191                        FE            .byte	$FE
05158 1192                        62            .byte	$62
05159 1193                        68            .byte	$68
05160 1194                        78            .byte	$78
05161 1195                        68            .byte	$68
05162 1196                        60            .byte	$60
05163 1197                        F0            .byte	$F0
05164 1198                        00            .byte	0
05165                                           ! 957  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 1199                        3C            .byte	$3C
05167 119A                        66            .byte	$66
05168 119B                        C0            .byte	$C0
05169 119C                        C0            .byte	$C0
05170 119D                        CE            .byte	$CE
05171 119E                        66            .byte	$66
05172 119F                        3E            .byte	$3E
05173 11A0                        00            .byte	0
05174                                           ! 958  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 11A1                        CC            .byte	$CC
05176 11A2                        CC            .byte	$CC
05177 11A3                        CC            .byte	$CC
05178 11A4                        FC            .byte	$FC
05179 11A5                        CC            .byte	$CC
05180 11A6                        CC            .byte	$CC
05181 11A7                        CC            .byte	$CC
05182 11A8                        00            .byte	0
05183                                           ! 959  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11A9                        78            .byte	$78
05185 11AA                        30            .byte	$30
05186 11AB                        30            .byte	$30
05187 11AC                        30            .byte	$30
05188 11AD                        30            .byte	$30
05189 11AE                        30            .byte	$30
05190 11AF                        78            .byte	$78
05191 11B0                        00            .byte	0
05192                                           ! 960  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11B1                        1E            .byte	$1E
05194 11B2                        0C            .byte	$C
05195 11B3                        0C            .byte	$C
05196 11B4                        0C            .byte	$C
05197 11B5                        CC            .byte	$CC
05198 11B6                        CC            .byte	$CC
05199 11B7                        78            .byte	$78
05200 11B8                        00            .byte	0
05201                                           ! 961  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11B9                        E6            .byte	$E6
05203 11BA                        66            .byte	$66
05204 11BB                        6C            .byte	$6C
05205 11BC                        78            .byte	$78
05206 11BD                        6C            .byte	$6C
05207 11BE                        66            .byte	$66
05208 11BF                        E6            .byte	$E6
05209 11C0                        00            .byte	0
05210                                           ! 962  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11C1                        F0            .byte	$F0
05212 11C2                        60            .byte	$60
05213 11C3                        60            .byte	$60
05214 11C4                        60            .byte	$60
05215 11C5                        62            .byte	$62
05216 11C6                        66            .byte	$66
05217 11C7                        FE            .byte	$FE
05218 11C8                        00            .byte	0
05219                                           ! 963  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11C9                        C6            .byte	$C6
05221 11CA                        EE            .byte	$EE
05222 11CB                        FE            .byte	$FE
05223 11CC                        FE            .byte	$FE
05224 11CD                        D6            .byte	$D6
05225 11CE                        C6            .byte	$C6
05226 11CF                        C6            .byte	$C6
05227 11D0                        00            .byte	0
05228                                           ! 964  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11D1                        C6            .byte	$C6
05230 11D2                        E6            .byte	$E6
05231 11D3                        F6            .byte	$F6
05232 11D4                        DE            .byte	$DE
05233 11D5                        CE            .byte	$CE
05234 11D6                        C6            .byte	$C6
05235 11D7                        C6            .byte	$C6
05236 11D8                        00            .byte	0
05237                                           ! 965  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11D9                        38            .byte	$38
05239 11DA                        6C            .byte	$6C
05240 11DB                        C6            .byte	$C6
05241 11DC                        C6            .byte	$C6
05242 11DD                        C6            .byte	$C6
05243 11DE                        6C            .byte	$6C
05244 11DF                        38            .byte	$38
05245 11E0                        00            .byte	0
05246                                           ! 966  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11E1                        FC            .byte	$FC
05248 11E2                        66            .byte	$66
05249 11E3                        66            .byte	$66
05250 11E4                        7C            .byte	$7C
05251 11E5                        60            .byte	$60
05252 11E6                        60            .byte	$60
05253 11E7                        F0            .byte	$F0
05254 11E8                        00            .byte	0
05255                                           ! 967  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11E9                        78            .byte	$78
05257 11EA                        CC            .byte	$CC
05258 11EB                        CC            .byte	$CC
05259 11EC                        CC            .byte	$CC
05260 11ED                        DC            .byte	$DC
05261 11EE                        78            .byte	$78
05262 11EF                        1C            .byte	$1C
05263 11F0                        00            .byte	0
05264                                           ! 968  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11F1                        FC            .byte	$FC
05266 11F2                        66            .byte	$66
05267 11F3                        66            .byte	$66
05268 11F4                        7C            .byte	$7C
05269 11F5                        6C            .byte	$6C
05270 11F6                        66            .byte	$66
05271 11F7                        E6            .byte	$E6
05272 11F8                        00            .byte	0
05273                                           ! 969  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 11F9                        78            .byte	$78
05275 11FA                        CC            .byte	$CC
05276 11FB                        E0            .byte	$E0
05277 11FC                        70            .byte	$70
05278 11FD                        1C            .byte	$1C
05279 11FE                        CC            .byte	$CC
05280 11FF                        78            .byte	$78
05281 1200                        00            .byte	0
05282                                           ! 970  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 1201                        FC            .byte	$FC
05284 1202                        B4            .byte	$B4
05285 1203                        30            .byte	$30
05286 1204                        30            .byte	$30
05287 1205                        30            .byte	$30
05288 1206                        30            .byte	$30
05289 1207                        78            .byte	$78
05290 1208                        00            .byte	0
05291                                           ! 971  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1209                        CC            .byte	$CC
05293 120A                        CC            .byte	$CC
05294 120B                        CC            .byte	$CC
05295 120C                        CC            .byte	$CC
05296 120D                        CC            .byte	$CC
05297 120E                        CC            .byte	$CC
05298 120F                        FC            .byte	$FC
05299 1210                        00            .byte	0
05300                                           ! 972  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 1211                        CC            .byte	$CC
05302 1212                        CC            .byte	$CC
05303 1213                        CC            .byte	$CC
05304 1214                        CC            .byte	$CC
05305 1215                        CC            .byte	$CC
05306 1216                        78            .byte	$78
05307 1217                        30            .byte	$30
05308 1218                        00            .byte	0
05309                                           ! 973  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1219                        C6            .byte	$C6
05311 121A                        C6            .byte	$C6
05312 121B                        C6            .byte	$C6
05313 121C                        D6            .byte	$D6
05314 121D                        FE            .byte	$FE
05315 121E                        EE            .byte	$EE
05316 121F                        C6            .byte	$C6
05317 1220                        00            .byte	0
05318                                           ! 974  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 1221                        C6            .byte	$C6
05320 1222                        C6            .byte	$C6
05321 1223                        6C            .byte	$6C
05322 1224                        38            .byte	$38
05323 1225                        38            .byte	$38
05324 1226                        6C            .byte	$6C
05325 1227                        C6            .byte	$C6
05326 1228                        00            .byte	0
05327                                           ! 975  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1229                        CC            .byte	$CC
05329 122A                        CC            .byte	$CC
05330 122B                        CC            .byte	$CC
05331 122C                        78            .byte	$78
05332 122D                        30            .byte	$30
05333 122E                        30            .byte	$30
05334 122F                        78            .byte	$78
05335 1230                        00            .byte	0
05336                                           ! 976  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 1231                        FE            .byte	$FE
05338 1232                        C6            .byte	$C6
05339 1233                        8C            .byte	$8C
05340 1234                        18            .byte	$18
05341 1235                        32            .byte	$32
05342 1236                        66            .byte	$66
05343 1237                        FE            .byte	$FE
05344 1238                        00            .byte	0
05345                                           ! 977  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1239                        78            .byte	$78
05347 123A                        60            .byte	$60
05348 123B                        60            .byte	$60
05349 123C                        60            .byte	$60
05350 123D                        60            .byte	$60
05351 123E                        60            .byte	$60
05352 123F                        78            .byte	$78
05353 1240                        00            .byte	0
05354                                           ! 978  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 1241                        C0            .byte	$C0
05356 1242                        60            .byte	$60
05357 1243                        30            .byte	$30
05358 1244                        18            .byte	$18
05359 1245                        0C            .byte	$C
05360 1246                        06            .byte	6
05361 1247                        02            .byte	2
05362 1248                        00            .byte	0
05363                                           ! 979  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1249                        78            .byte	$78
05365 124A                        18            .byte	$18
05366 124B                        18            .byte	$18
05367 124C                        18            .byte	$18
05368 124D                        18            .byte	$18
05369 124E                        18            .byte	$18
05370 124F                        78            .byte	$78
05371 1250                        00            .byte	0
05372                                           ! 980  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 1251                        10            .byte	$10
05374 1252                        38            .byte	$38
05375 1253                        6C            .byte	$6C
05376 1254                        C6            .byte	$C6
05377 1255                        00            .byte	0
05378 1256                        00            .byte	0
05379 1257                        00            .byte	0
05380 1258                        00            .byte	0
05381                                           ! 981  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1259                        00            .byte	0
05383 125A                        00            .byte	0
05384 125B                        00            .byte	0
05385 125C                        00            .byte	0
05386 125D                        00            .byte	0
05387 125E                        00            .byte	0
05388 125F                        00            .byte	0
05389 1260                        FF            .byte	$FF
05390                                           ! 982  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 1261                        30            .byte	$30
05392 1262                        30            .byte	$30
05393 1263                        18            .byte	$18
05394 1264                        00            .byte	0
05395 1265                        00            .byte	0
05396 1266                        00            .byte	0
05397 1267                        00            .byte	0
05398 1268                        00            .byte	0
05399                                           ! 983  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05400 1269                        00            .byte	0
05401 126A                        00            .byte	0
05402 126B                        78            .byte	$78
05403 126C                        0C            .byte	$C
05404 126D                        7C            .byte	$7C
05405 126E                        CC            .byte	$CC
05406 126F                        76            .byte	$76
05407 1270                        00            .byte	0
05408                                           ! 984  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05409 1271                        E0            .byte	$E0
05410 1272                        60            .byte	$60
05411 1273                        60            .byte	$60
05412 1274                        7C            .byte	$7C
05413 1275                        66            .byte	$66
05414 1276                        66            .byte	$66
05415 1277                        DC            .byte	$DC
05416 1278                        00            .byte	0
05417                                           ! 985  0x00, 0x00, 0x78, 0xcc, 0xc0,
05418 1279                        00            .byte	0
05419 127A                        00            .byte	0
05420 127B                        78            .byte	$78
05421 127C                        CC            .byte	$CC
05422                                           ! 985  0xcc, 0x78, 0x00,
05423 127D                        C0            .byte	$C0
05424 127E                        CC            .byte	$CC
05425 127F                        78            .byte	$78
05426 1280                        00            .byte	0
05427                                           ! 986  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 1281                        1C            .byte	$1C
05429 1282                        0C            .byte	$C
05430 1283                        0C            .byte	$C
05431 1284                        7C            .byte	$7C
05432 1285                        CC            .byte	$CC
05433 1286                        CC            .byte	$CC
05434 1287                        76            .byte	$76
05435 1288                        00            .byte	0
05436                                           ! 987  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1289                        00            .byte	0
05438 128A                        00            .byte	0
05439 128B                        78            .byte	$78
05440 128C                        CC            .byte	$CC
05441 128D                        FC            .byte	$FC
05442 128E                        C0            .byte	$C0
05443 128F                        78            .byte	$78
05444 1290                        00            .byte	0
05445                                           ! 988  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 1291                        38            .byte	$38
05447 1292                        6C            .byte	$6C
05448 1293                        60            .byte	$60
05449 1294                        F0            .byte	$F0
05450 1295                        60            .byte	$60
05451 1296                        60            .byte	$60
05452 1297                        F0            .byte	$F0
05453 1298                        00            .byte	0
05454                                           ! 989  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 1299                        00            .byte	0
05456 129A                        00            .byte	0
05457 129B                        76            .byte	$76
05458 129C                        CC            .byte	$CC
05459 129D                        CC            .byte	$CC
05460 129E                        7C            .byte	$7C
05461 129F                        0C            .byte	$C
05462 12A0                        F8            .byte	$F8
05463                                           ! 990  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 12A1                        E0            .byte	$E0
05465 12A2                        60            .byte	$60
05466 12A3                        6C            .byte	$6C
05467 12A4                        76            .byte	$76
05468 12A5                        66            .byte	$66
05469 12A6                        66            .byte	$66
05470 12A7                        E6            .byte	$E6
05471 12A8                        00            .byte	0
05472                                           ! 991  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12A9                        30            .byte	$30
05474 12AA                        00            .byte	0
05475 12AB                        70            .byte	$70
05476 12AC                        30            .byte	$30
05477 12AD                        30            .byte	$30
05478 12AE                        30            .byte	$30
05479 12AF                        78            .byte	$78
05480 12B0                        00            .byte	0
05481                                           ! 992  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12B1                        0C            .byte	$C
05483 12B2                        00            .byte	0
05484 12B3                        0C            .byte	$C
05485 12B4                        0C            .byte	$C
05486 12B5                        0C            .byte	$C
05487 12B6                        CC            .byte	$CC
05488 12B7                        CC            .byte	$CC
05489 12B8                        78            .byte	$78
05490                                           ! 993  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12B9                        E0            .byte	$E0
05492 12BA                        60            .byte	$60
05493 12BB                        66            .byte	$66
05494 12BC                        6C            .byte	$6C
05495 12BD                        78            .byte	$78
05496 12BE                        6C            .byte	$6C
05497 12BF                        E6            .byte	$E6
05498 12C0                        00            .byte	0
05499                                           ! 994  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12C1                        70            .byte	$70
05501 12C2                        30            .byte	$30
05502 12C3                        30            .byte	$30
05503 12C4                        30            .byte	$30
05504 12C5                        30            .byte	$30
05505 12C6                        30            .byte	$30
05506 12C7                        78            .byte	$78
05507 12C8                        00            .byte	0
05508                                           ! 995  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12C9                        00            .byte	0
05510 12CA                        00            .byte	0
05511 12CB                        CC            .byte	$CC
05512 12CC                        FE            .byte	$FE
05513 12CD                        FE            .byte	$FE
05514 12CE                        D6            .byte	$D6
05515 12CF                        C6            .byte	$C6
05516 12D0                        00            .byte	0
05517                                           ! 996  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12D1                        00            .byte	0
05519 12D2                        00            .byte	0
05520 12D3                        F8            .byte	$F8
05521 12D4                        CC            .byte	$CC
05522 12D5                        CC            .byte	$CC
05523 12D6                        CC            .byte	$CC
05524 12D7                        CC            .byte	$CC
05525 12D8                        00            .byte	0
05526                                           ! 997  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12D9                        00            .byte	0
05528 12DA                        00            .byte	0
05529 12DB                        78            .byte	$78
05530 12DC                        CC            .byte	$CC
05531 12DD                        CC            .byte	$CC
05532 12DE                        CC            .byte	$CC
05533 12DF                        78            .byte	$78
05534 12E0                        00            .byte	0
05535                                           ! 998  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12E1                        00            .byte	0
05537 12E2                        00            .byte	0
05538 12E3                        DC            .byte	$DC
05539 12E4                        66            .byte	$66
05540 12E5                        66            .byte	$66
05541 12E6                        7C            .byte	$7C
05542 12E7                        60            .byte	$60
05543 12E8                        F0            .byte	$F0
05544                                           ! 999  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12E9                        00            .byte	0
05546 12EA                        00            .byte	0
05547 12EB                        76            .byte	$76
05548 12EC                        CC            .byte	$CC
05549 12ED                        CC            .byte	$CC
05550 12EE                        7C            .byte	$7C
05551 12EF                        0C            .byte	$C
05552 12F0                        1E            .byte	$1E
05553                                           ! 1000  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12F1                        00            .byte	0
05555 12F2                        00            .byte	0
05556 12F3                        DC            .byte	$DC
05557 12F4                        76            .byte	$76
05558 12F5                        66            .byte	$66
05559 12F6                        60            .byte	$60
05560 12F7                        F0            .byte	$F0
05561 12F8                        00            .byte	0
05562                                           ! 1001  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 12F9                        00            .byte	0
05564 12FA                        00            .byte	0
05565 12FB                        7C            .byte	$7C
05566 12FC                        C0            .byte	$C0
05567 12FD                        78            .byte	$78
05568 12FE                        0C            .byte	$C
05569 12FF                        F8            .byte	$F8
05570 1300                        00            .byte	0
05571                                           ! 1002  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 1301                        10            .byte	$10
05573 1302                        30            .byte	$30
05574 1303                        7C            .byte	$7C
05575 1304                        30            .byte	$30
05576 1305                        30            .byte	$30
05577 1306                        34            .byte	$34
05578 1307                        18            .byte	$18
05579 1308                        00            .byte	0
05580                                           ! 1003  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1309                        00            .byte	0
05582 130A                        00            .byte	0
05583 130B                        CC            .byte	$CC
05584 130C                        CC            .byte	$CC
05585 130D                        CC            .byte	$CC
05586 130E                        CC            .byte	$CC
05587 130F                        76            .byte	$76
05588 1310                        00            .byte	0
05589                                           ! 1004  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 1311                        00            .byte	0
05591 1312                        00            .byte	0
05592 1313                        CC            .byte	$CC
05593 1314                        CC            .byte	$CC
05594 1315                        CC            .byte	$CC
05595 1316                        78            .byte	$78
05596 1317                        30            .byte	$30
05597 1318                        00            .byte	0
05598                                           ! 1005  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1319                        00            .byte	0
05600 131A                        00            .byte	0
05601 131B                        C6            .byte	$C6
05602 131C                        D6            .byte	$D6
05603 131D                        FE            .byte	$FE
05604 131E                        FE            .byte	$FE
05605 131F                        6C            .byte	$6C
05606 1320                        00            .byte	0
05607                                           ! 1006  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 1321                        00            .byte	0
05609 1322                        00            .byte	0
05610 1323                        C6            .byte	$C6
05611 1324                        6C            .byte	$6C
05612 1325                        38            .byte	$38
05613 1326                        6C            .byte	$6C
05614 1327                        C6            .byte	$C6
05615 1328                        00            .byte	0
05616                                           ! 1007  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1329                        00            .byte	0
05618 132A                        00            .byte	0
05619 132B                        CC            .byte	$CC
05620 132C                        CC            .byte	$CC
05621 132D                        CC            .byte	$CC
05622 132E                        7C            .byte	$7C
05623 132F                        0C            .byte	$C
05624 1330                        F8            .byte	$F8
05625                                           ! 1008  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 1331                        00            .byte	0
05627 1332                        00            .byte	0
05628 1333                        FC            .byte	$FC
05629 1334                        98            .byte	$98
05630 1335                        30            .byte	$30
05631 1336                        64            .byte	$64
05632 1337                        FC            .byte	$FC
05633 1338                        00            .byte	0
05634                                           ! 1009  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1339                        1C            .byte	$1C
05636 133A                        30            .byte	$30
05637 133B                        30            .byte	$30
05638 133C                        E0            .byte	$E0
05639 133D                        30            .byte	$30
05640 133E                        30            .byte	$30
05641 133F                        1C            .byte	$1C
05642 1340                        00            .byte	0
05643                                           ! 1010  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 1341                        18            .byte	$18
05645 1342                        18            .byte	$18
05646 1343                        18            .byte	$18
05647 1344                        00            .byte	0
05648 1345                        18            .byte	$18
05649 1346                        18            .byte	$18
05650 1347                        18            .byte	$18
05651 1348                        00            .byte	0
05652                                           ! 1011  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1349                        E0            .byte	$E0
05654 134A                        30            .byte	$30
05655 134B                        30            .byte	$30
05656 134C                        1C            .byte	$1C
05657 134D                        30            .byte	$30
05658 134E                        30            .byte	$30
05659 134F                        E0            .byte	$E0
05660 1350                        00            .byte	0
05661                                           ! 1012  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 1351                        76            .byte	$76
05663 1352                        DC            .byte	$DC
05664 1353                        00            .byte	0
05665 1354                        00            .byte	0
05666 1355                        00            .byte	0
05667 1356                        00            .byte	0
05668 1357                        00            .byte	0
05669 1358                        00            .byte	0
05670                                           ! 1013  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1359                        00            .byte	0
05672 135A                        10            .byte	$10
05673 135B                        38            .byte	$38
05674 135C                        6C            .byte	$6C
05675 135D                        C6            .byte	$C6
05676 135E                        C6            .byte	$C6
05677 135F                        FE            .byte	$FE
05678 1360                        00            .byte	0
05679                                           ! 1014  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 1361                        78            .byte	$78
05681 1362                        CC            .byte	$CC
05682 1363                        C0            .byte	$C0
05683 1364                        CC            .byte	$CC
05684 1365                        78            .byte	$78
05685 1366                        18            .byte	$18
05686 1367                        0C            .byte	$C
05687 1368                        78            .byte	$78
05688                                           ! 1015  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1369                        00            .byte	0
05690 136A                        CC            .byte	$CC
05691 136B                        00            .byte	0
05692 136C                        CC            .byte	$CC
05693 136D                        CC            .byte	$CC
05694 136E                        CC            .byte	$CC
05695 136F                        7E            .byte	$7E
05696 1370                        00            .byte	0
05697                                           ! 1016  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 1371                        1C            .byte	$1C
05699 1372                        00            .byte	0
05700 1373                        78            .byte	$78
05701 1374                        CC            .byte	$CC
05702 1375                        FC            .byte	$FC
05703 1376                        C0            .byte	$C0
05704 1377                        78            .byte	$78
05705 1378                        00            .byte	0
05706                                           ! 1017  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1379                        7E            .byte	$7E
05708 137A                        C3            .byte	$C3
05709 137B                        3C            .byte	$3C
05710 137C                        06            .byte	6
05711 137D                        3E            .byte	$3E
05712 137E                        66            .byte	$66
05713 137F                        3F            .byte	$3F
05714 1380                        00            .byte	0
05715                                           ! 1018  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 1381                        CC            .byte	$CC
05717 1382                        00            .byte	0
05718 1383                        78            .byte	$78
05719 1384                        0C            .byte	$C
05720 1385                        7C            .byte	$7C
05721 1386                        CC            .byte	$CC
05722 1387                        7E            .byte	$7E
05723 1388                        00            .byte	0
05724                                           ! 1019  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1389                        E0            .byte	$E0
05726 138A                        00            .byte	0
05727 138B                        78            .byte	$78
05728 138C                        0C            .byte	$C
05729 138D                        7C            .byte	$7C
05730 138E                        CC            .byte	$CC
05731 138F                        7E            .byte	$7E
05732 1390                        00            .byte	0
05733                                           ! 1020  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 1391                        30            .byte	$30
05735 1392                        30            .byte	$30
05736 1393                        78            .byte	$78
05737 1394                        0C            .byte	$C
05738 1395                        7C            .byte	$7C
05739 1396                        CC            .byte	$CC
05740 1397                        7E            .byte	$7E
05741 1398                        00            .byte	0
05742                                           ! 1021  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 1399                        00            .byte	0
05744 139A                        00            .byte	0
05745 139B                        78            .byte	$78
05746 139C                        C0            .byte	$C0
05747 139D                        C0            .byte	$C0
05748 139E                        78            .byte	$78
05749 139F                        0C            .byte	$C
05750 13A0                        38            .byte	$38
05751                                           ! 1022  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 13A1                        7E            .byte	$7E
05753 13A2                        C3            .byte	$C3
05754 13A3                        3C            .byte	$3C
05755 13A4                        66            .byte	$66
05756 13A5                        7E            .byte	$7E
05757 13A6                        60            .byte	$60
05758 13A7                        3C            .byte	$3C
05759 13A8                        00            .byte	0
05760                                           ! 1023  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13A9                        CC            .byte	$CC
05762 13AA                        00            .byte	0
05763 13AB                        78            .byte	$78
05764 13AC                        CC            .byte	$CC
05765 13AD                        FC            .byte	$FC
05766 13AE                        C0            .byte	$C0
05767 13AF                        78            .byte	$78
05768 13B0                        00            .byte	0
05769                                           ! 1024  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13B1                        E0            .byte	$E0
05771 13B2                        00            .byte	0
05772 13B3                        78            .byte	$78
05773 13B4                        CC            .byte	$CC
05774 13B5                        FC            .byte	$FC
05775 13B6                        C0            .byte	$C0
05776 13B7                        78            .byte	$78
05777 13B8                        00            .byte	0
05778                                           ! 1025  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05779 13B9                        CC            .byte	$CC
05780 13BA                        00            .byte	0
05781 13BB                        70            .byte	$70
05782 13BC                        30            .byte	$30
05783 13BD                        30            .byte	$30
05784 13BE                        30            .byte	$30
05785 13BF                        78            .byte	$78
05786 13C0                        00            .byte	0
05787                                           ! 1026  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05788 13C1                        7C            .byte	$7C
05789 13C2                        C6            .byte	$C6
05790 13C3                        38            .byte	$38
05791 13C4                        18            .byte	$18
05792 13C5                        18            .byte	$18
05793 13C6                        18            .byte	$18
05794 13C7                        3C            .byte	$3C
05795 13C8                        00            .byte	0
05796                                           ! 1027  0xe0, 0x00, 0x70, 0
05797 13C9                        E0            .byte	$E0
05798 13CA                        00            .byte	0
05799 13CB                        70            .byte	$70
05800                                           ! 1027 x30, 0x30, 0x30, 0x78, 0x00,
05801 13CC                        30            .byte	$30
05802 13CD                        30            .byte	$30
05803 13CE                        30            .byte	$30
05804 13CF                        78            .byte	$78
05805 13D0                        00            .byte	0
05806                                           ! 1028  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13D1                        C6            .byte	$C6
05808 13D2                        38            .byte	$38
05809 13D3                        6C            .byte	$6C
05810 13D4                        C6            .byte	$C6
05811 13D5                        FE            .byte	$FE
05812 13D6                        C6            .byte	$C6
05813 13D7                        C6            .byte	$C6
05814 13D8                        00            .byte	0
05815                                           ! 1029  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13D9                        30            .byte	$30
05817 13DA                        30            .byte	$30
05818 13DB                        00            .byte	0
05819 13DC                        78            .byte	$78
05820 13DD                        CC            .byte	$CC
05821 13DE                        FC            .byte	$FC
05822 13DF                        CC            .byte	$CC
05823 13E0                        00            .byte	0
05824                                           ! 1030  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13E1                        1C            .byte	$1C
05826 13E2                        00            .byte	0
05827 13E3                        FC            .byte	$FC
05828 13E4                        60            .byte	$60
05829 13E5                        78            .byte	$78
05830 13E6                        60            .byte	$60
05831 13E7                        FC            .byte	$FC
05832 13E8                        00            .byte	0
05833                                           ! 1031  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13E9                        00            .byte	0
05835 13EA                        00            .byte	0
05836 13EB                        7F            .byte	$7F
05837 13EC                        0C            .byte	$C
05838 13ED                        7F            .byte	$7F
05839 13EE                        CC            .byte	$CC
05840 13EF                        7F            .byte	$7F
05841 13F0                        00            .byte	0
05842                                           ! 1032  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13F1                        3E            .byte	$3E
05844 13F2                        6C            .byte	$6C
05845 13F3                        CC            .byte	$CC
05846 13F4                        FE            .byte	$FE
05847 13F5                        CC            .byte	$CC
05848 13F6                        CC            .byte	$CC
05849 13F7                        CE            .byte	$CE
05850 13F8                        00            .byte	0
05851                                           ! 1033  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 13F9                        78            .byte	$78
05853 13FA                        CC            .byte	$CC
05854 13FB                        00            .byte	0
05855 13FC                        78            .byte	$78
05856 13FD                        CC            .byte	$CC
05857 13FE                        CC            .byte	$CC
05858 13FF                        78            .byte	$78
05859 1400                        00            .byte	0
05860                                           ! 1034  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 1401                        00            .byte	0
05862 1402                        CC            .byte	$CC
05863 1403                        00            .byte	0
05864 1404                        78            .byte	$78
05865 1405                        CC            .byte	$CC
05866 1406                        CC            .byte	$CC
05867 1407                        78            .byte	$78
05868 1408                        00            .byte	0
05869                                           ! 1035  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1409                        00            .byte	0
05871 140A                        E0            .byte	$E0
05872 140B                        00            .byte	0
05873 140C                        78            .byte	$78
05874 140D                        CC            .byte	$CC
05875 140E                        CC            .byte	$CC
05876 140F                        78            .byte	$78
05877 1410                        00            .byte	0
05878                                           ! 1036  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 1411                        78            .byte	$78
05880 1412                        CC            .byte	$CC
05881 1413                        00            .byte	0
05882 1414                        CC            .byte	$CC
05883 1415                        CC            .byte	$CC
05884 1416                        CC            .byte	$CC
05885 1417                        7E            .byte	$7E
05886 1418                        00            .byte	0
05887                                           ! 1037  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1419                        00            .byte	0
05889 141A                        E0            .byte	$E0
05890 141B                        00            .byte	0
05891 141C                        CC            .byte	$CC
05892 141D                        CC            .byte	$CC
05893 141E                        CC            .byte	$CC
05894 141F                        7E            .byte	$7E
05895 1420                        00            .byte	0
05896                                           ! 1038  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 1421                        00            .byte	0
05898 1422                        CC            .byte	$CC
05899 1423                        00            .byte	0
05900 1424                        CC            .byte	$CC
05901 1425                        CC            .byte	$CC
05902 1426                        7C            .byte	$7C
05903 1427                        0C            .byte	$C
05904 1428                        F8            .byte	$F8
05905                                           ! 1039  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1429                        C3            .byte	$C3
05907 142A                        18            .byte	$18
05908 142B                        3C            .byte	$3C
05909 142C                        66            .byte	$66
05910 142D                        66            .byte	$66
05911 142E                        3C            .byte	$3C
05912 142F                        18            .byte	$18
05913 1430                        00            .byte	0
05914                                           ! 1040  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 1431                        CC            .byte	$CC
05916 1432                        00            .byte	0
05917 1433                        CC            .byte	$CC
05918 1434                        CC            .byte	$CC
05919 1435                        CC            .byte	$CC
05920 1436                        CC            .byte	$CC
05921 1437                        78            .byte	$78
05922 1438                        00            .byte	0
05923                                           ! 1041  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1439                        18            .byte	$18
05925 143A                        18            .byte	$18
05926 143B                        7E            .byte	$7E
05927 143C                        C0            .byte	$C0
05928 143D                        C0            .byte	$C0
05929 143E                        7E            .byte	$7E
05930 143F                        18            .byte	$18
05931 1440                        18            .byte	$18
05932                                           ! 1042  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 1441                        38            .byte	$38
05934 1442                        6C            .byte	$6C
05935 1443                        64            .byte	$64
05936 1444                        F0            .byte	$F0
05937 1445                        60            .byte	$60
05938 1446                        E6            .byte	$E6
05939 1447                        FC            .byte	$FC
05940 1448                        00            .byte	0
05941                                           ! 1043  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1449                        CC            .byte	$CC
05943 144A                        CC            .byte	$CC
05944 144B                        78            .byte	$78
05945 144C                        FC            .byte	$FC
05946 144D                        30            .byte	$30
05947 144E                        FC            .byte	$FC
05948 144F                        30            .byte	$30
05949 1450                        30            .byte	$30
05950                                           ! 1044  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 1451                        F8            .byte	$F8
05952 1452                        CC            .byte	$CC
05953 1453                        CC            .byte	$CC
05954 1454                        FA            .byte	$FA
05955 1455                        C6            .byte	$C6
05956 1456                        CF            .byte	$CF
05957 1457                        C6            .byte	$C6
05958 1458                        C7            .byte	$C7
05959                                           ! 1045  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1459                        0E            .byte	$E
05961 145A                        1B            .byte	$1B
05962 145B                        18            .byte	$18
05963 145C                        3C            .byte	$3C
05964 145D                        18            .byte	$18
05965 145E                        18            .byte	$18
05966 145F                        D8            .byte	$D8
05967 1460                        70            .byte	$70
05968                                           ! 1046  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 1461                        1C            .byte	$1C
05970 1462                        00            .byte	0
05971 1463                        78            .byte	$78
05972 1464                        0C            .byte	$C
05973 1465                        7C            .byte	$7C
05974 1466                        CC            .byte	$CC
05975 1467                        7E            .byte	$7E
05976 1468                        00            .byte	0
05977                                           ! 1047  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1469                        38            .byte	$38
05979 146A                        00            .byte	0
05980 146B                        70            .byte	$70
05981 146C                        30            .byte	$30
05982 146D                        30            .byte	$30
05983 146E                        30            .byte	$30
05984 146F                        78            .byte	$78
05985 1470                        00            .byte	0
05986                                           ! 1048  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 1471                        00            .byte	0
05988 1472                        1C            .byte	$1C
05989 1473                        00            .byte	0
05990 1474                        78            .byte	$78
05991 1475                        CC            .byte	$CC
05992 1476                        CC            .byte	$CC
05993 1477                        78            .byte	$78
05994 1478                        00            .byte	0
05995                                           ! 1049  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1479                        00            .byte	0
05997 147A                        1C            .byte	$1C
05998 147B                        00            .byte	0
05999 147C                        CC            .byte	$CC
06000 147D                        CC            .byte	$CC
06001 147E                        CC            .byte	$CC
06002 147F                        7E            .byte	$7E
06003 1480                        00            .byte	0
06004                                           ! 1050  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 1481                        00            .byte	0
06006 1482                        F8            .byte	$F8
06007 1483                        00            .byte	0
06008 1484                        F8            .byte	$F8
06009 1485                        CC            .byte	$CC
06010 1486                        CC            .byte	$CC
06011 1487                        CC            .byte	$CC
06012 1488                        00            .byte	0
06013                                           ! 1051  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1489                        FC            .byte	$FC
06015 148A                        00            .byte	0
06016 148B                        CC            .byte	$CC
06017 148C                        EC            .byte	$EC
06018 148D                        FC            .byte	$FC
06019 148E                        DC            .byte	$DC
06020 148F                        CC            .byte	$CC
06021 1490                        00            .byte	0
06022                                           ! 1052  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 1491                        3C            .byte	$3C
06024 1492                        6C            .byte	$6C
06025 1493                        6C            .byte	$6C
06026 1494                        3E            .byte	$3E
06027 1495                        00            .byte	0
06028 1496                        7E            .byte	$7E
06029 1497                        00            .byte	0
06030 1498                        00            .byte	0
06031                                           ! 1053  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 1499                        38            .byte	$38
06033 149A                        6C            .byte	$6C
06034 149B                        6C            .byte	$6C
06035 149C                        38            .byte	$38
06036 149D                        00            .byte	0
06037 149E                        7C            .byte	$7C
06038 149F                        00            .byte	0
06039 14A0                        00            .byte	0
06040                                           ! 1054  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 14A1                        30            .byte	$30
06042 14A2                        00            .byte	0
06043 14A3                        30            .byte	$30
06044 14A4                        60            .byte	$60
06045 14A5                        C0            .byte	$C0
06046 14A6                        CC            .byte	$CC
06047 14A7                        78            .byte	$78
06048 14A8                        00            .byte	0
06049                                           ! 1055  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14A9                        00            .byte	0
06051 14AA                        00            .byte	0
06052 14AB                        00            .byte	0
06053 14AC                        FC            .byte	$FC
06054 14AD                        C0            .byte	$C0
06055 14AE                        C0            .byte	$C0
06056 14AF                        00            .byte	0
06057 14B0                        00            .byte	0
06058                                           ! 1056  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14B1                        00            .byte	0
06060 14B2                        00            .byte	0
06061 14B3                        00            .byte	0
06062 14B4                        FC            .byte	$FC
06063 14B5                        0C            .byte	$C
06064 14B6                        0C            .byte	$C
06065 14B7                        00            .byte	0
06066 14B8                        00            .byte	0
06067                                           ! 1057  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14B9                        C3            .byte	$C3
06069 14BA                        C6            .byte	$C6
06070 14BB                        CC            .byte	$CC
06071 14BC                        DE            .byte	$DE
06072 14BD                        33            .byte	$33
06073 14BE                        66            .byte	$66
06074 14BF                        CC            .byte	$CC
06075 14C0                        0F            .byte	$F
06076                                           ! 1058  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14C1                        C3            .byte	$C3
06078 14C2                        C6            .byte	$C6
06079 14C3                        CC            .byte	$CC
06080 14C4                        DB            .byte	$DB
06081 14C5                        37            .byte	$37
06082 14C6                        6F            .byte	$6F
06083 14C7                        CF            .byte	$CF
06084 14C8                        03            .byte	3
06085                                           ! 1059  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14C9                        18            .byte	$18
06087 14CA                        18            .byte	$18
06088 14CB                        00            .byte	0
06089 14CC                        18            .byte	$18
06090 14CD                        18            .byte	$18
06091 14CE                        18            .byte	$18
06092 14CF                        18            .byte	$18
06093 14D0                        00            .byte	0
06094                                           ! 1060  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14D1                        00            .byte	0
06096 14D2                        33            .byte	$33
06097 14D3                        66            .byte	$66
06098 14D4                        CC            .byte	$CC
06099 14D5                        66            .byte	$66
06100 14D6                        33            .byte	$33
06101 14D7                        00            .byte	0
06102 14D8                        00            .byte	0
06103                                           ! 1061  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14D9                        00            .byte	0
06105 14DA                        CC            .byte	$CC
06106 14DB                        66            .byte	$66
06107 14DC                        33            .byte	$33
06108 14DD                        66            .byte	$66
06109 14DE                        CC            .byte	$CC
06110 14DF                        00            .byte	0
06111 14E0                        00            .byte	0
06112                                           ! 1062  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14E1                        22            .byte	$22
06114 14E2                        88            .byte	$88
06115 14E3                        22            .byte	$22
06116 14E4                        88            .byte	$88
06117 14E5                        22            .byte	$22
06118 14E6                        88            .byte	$88
06119 14E7                        22            .byte	$22
06120 14E8                        88            .byte	$88
06121                                           ! 1063  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14E9                        55            .byte	$55
06123 14EA                        AA            .byte	$AA
06124 14EB                        55            .byte	$55
06125 14EC                        AA            .byte	$AA
06126 14ED                        55            .byte	$55
06127 14EE                        AA            .byte	$AA
06128 14EF                        55            .byte	$55
06129 14F0                        AA            .byte	$AA
06130                                           ! 1064  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14F1                        DB            .byte	$DB
06132 14F2                        77            .byte	$77
06133 14F3                        DB            .byte	$DB
06134 14F4                        EE            .byte	$EE
06135 14F5                        DB            .byte	$DB
06136 14F6                        77            .byte	$77
06137 14F7                        DB            .byte	$DB
06138 14F8                        EE            .byte	$EE
06139                                           ! 1065  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 14F9                        18            .byte	$18
06141 14FA                        18            .byte	$18
06142 14FB                        18            .byte	$18
06143 14FC                        18            .byte	$18
06144 14FD                        18            .byte	$18
06145 14FE                        18            .byte	$18
06146 14FF                        18            .byte	$18
06147 1500                        18            .byte	$18
06148                                           ! 1066  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 1501                        18            .byte	$18
06150 1502                        18            .byte	$18
06151 1503                        18            .byte	$18
06152 1504                        18            .byte	$18
06153 1505                        F8            .byte	$F8
06154 1506                        18            .byte	$18
06155 1507                        18            .byte	$18
06156 1508                        18            .byte	$18
06157                                           ! 1067  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06158 1509                        18            .byte	$18
06159 150A                        18            .byte	$18
06160 150B                        F8            .byte	$F8
06161 150C                        18            .byte	$18
06162 150D                        F8            .byte	$F8
06163 150E                        18            .byte	$18
06164 150F                        18            .byte	$18
06165 1510                        18            .byte	$18
06166                                           ! 1068  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06167 1511                        36            .byte	$36
06168 1512                        36            .byte	$36
06169 1513                        36            .byte	$36
06170 1514                        36            .byte	$36
06171 1515                        F6            .byte	$F6
06172 1516                        36            .byte	$36
06173 1517                        36            .byte	$36
06174 1518                        36            .byte	$36
06175                                           ! 1069  0x00, 0x0
06176 1519                        00            .byte	0
06177                                           ! 1069 0, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06178 151A                        00            .byte	0
06179 151B                        00            .byte	0
06180 151C                        00            .byte	0
06181 151D                        FE            .byte	$FE
06182 151E                        36            .byte	$36
06183 151F                        36            .byte	$36
06184 1520                        36            .byte	$36
06185                                           ! 1070  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 1521                        00            .byte	0
06187 1522                        00            .byte	0
06188 1523                        F8            .byte	$F8
06189 1524                        18            .byte	$18
06190 1525                        F8            .byte	$F8
06191 1526                        18            .byte	$18
06192 1527                        18            .byte	$18
06193 1528                        18            .byte	$18
06194                                           ! 1071  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1529                        36            .byte	$36
06196 152A                        36            .byte	$36
06197 152B                        F6            .byte	$F6
06198 152C                        06            .byte	6
06199 152D                        F6            .byte	$F6
06200 152E                        36            .byte	$36
06201 152F                        36            .byte	$36
06202 1530                        36            .byte	$36
06203                                           ! 1072  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 1531                        36            .byte	$36
06205 1532                        36            .byte	$36
06206 1533                        36            .byte	$36
06207 1534                        36            .byte	$36
06208 1535                        36            .byte	$36
06209 1536                        36            .byte	$36
06210 1537                        36            .byte	$36
06211 1538                        36            .byte	$36
06212                                           ! 1073  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1539                        00            .byte	0
06214 153A                        00            .byte	0
06215 153B                        FE            .byte	$FE
06216 153C                        06            .byte	6
06217 153D                        F6            .byte	$F6
06218 153E                        36            .byte	$36
06219 153F                        36            .byte	$36
06220 1540                        36            .byte	$36
06221                                           ! 1074  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 1541                        36            .byte	$36
06223 1542                        36            .byte	$36
06224 1543                        F6            .byte	$F6
06225 1544                        06            .byte	6
06226 1545                        FE            .byte	$FE
06227 1546                        00            .byte	0
06228 1547                        00            .byte	0
06229 1548                        00            .byte	0
06230                                           ! 1075  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1549                        36            .byte	$36
06232 154A                        36            .byte	$36
06233 154B                        36            .byte	$36
06234 154C                        36            .byte	$36
06235 154D                        FE            .byte	$FE
06236 154E                        00            .byte	0
06237 154F                        00            .byte	0
06238 1550                        00            .byte	0
06239                                           ! 1076  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 1551                        18            .byte	$18
06241 1552                        18            .byte	$18
06242 1553                        F8            .byte	$F8
06243 1554                        18            .byte	$18
06244 1555                        F8            .byte	$F8
06245 1556                        00            .byte	0
06246 1557                        00            .byte	0
06247 1558                        00            .byte	0
06248                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1559                        00            .byte	0
06250 155A                        00            .byte	0
06251 155B                        00            .byte	0
06252 155C                        00            .byte	0
06253 155D                        F8            .byte	$F8
06254 155E                        18            .byte	$18
06255 155F                        18            .byte	$18
06256 1560                        18            .byte	$18
06257                                           ! 1078  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 1561                        18            .byte	$18
06259 1562                        18            .byte	$18
06260 1563                        18            .byte	$18
06261 1564                        18            .byte	$18
06262 1565                        1F            .byte	$1F
06263 1566                        00            .byte	0
06264 1567                        00            .byte	0
06265 1568                        00            .byte	0
06266                                           ! 1079  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1569                        18            .byte	$18
06268 156A                        18            .byte	$18
06269 156B                        18            .byte	$18
06270 156C                        18            .byte	$18
06271 156D                        FF            .byte	$FF
06272 156E                        00            .byte	0
06273 156F                        00            .byte	0
06274 1570                        00            .byte	0
06275                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 1571                        00            .byte	0
06277 1572                        00            .byte	0
06278 1573                        00            .byte	0
06279 1574                        00            .byte	0
06280 1575                        FF            .byte	$FF
06281 1576                        18            .byte	$18
06282 1577                        18            .byte	$18
06283 1578                        18            .byte	$18
06284                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1579                        18            .byte	$18
06286 157A                        18            .byte	$18
06287 157B                        18            .byte	$18
06288 157C                        18            .byte	$18
06289 157D                        1F            .byte	$1F
06290 157E                        18            .byte	$18
06291 157F                        18            .byte	$18
06292 1580                        18            .byte	$18
06293                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 1581                        00            .byte	0
06295 1582                        00            .byte	0
06296 1583                        00            .byte	0
06297 1584                        00            .byte	0
06298 1585                        FF            .byte	$FF
06299 1586                        00            .byte	0
06300 1587                        00            .byte	0
06301 1588                        00            .byte	0
06302                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1589                        18            .byte	$18
06304 158A                        18            .byte	$18
06305 158B                        18            .byte	$18
06306 158C                        18            .byte	$18
06307 158D                        FF            .byte	$FF
06308 158E                        18            .byte	$18
06309 158F                        18            .byte	$18
06310 1590                        18            .byte	$18
06311                                           ! 1084  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 1591                        18            .byte	$18
06313 1592                        18            .byte	$18
06314 1593                        1F            .byte	$1F
06315 1594                        18            .byte	$18
06316 1595                        1F            .byte	$1F
06317 1596                        18            .byte	$18
06318 1597                        18            .byte	$18
06319 1598                        18            .byte	$18
06320                                           ! 1085  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 1599                        36            .byte	$36
06322 159A                        36            .byte	$36
06323 159B                        36            .byte	$36
06324 159C                        36            .byte	$36
06325 159D                        37            .byte	$37
06326 159E                        36            .byte	$36
06327 159F                        36            .byte	$36
06328 15A0                        36            .byte	$36
06329                                           ! 1086  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 15A1                        36            .byte	$36
06331 15A2                        36            .byte	$36
06332 15A3                        37            .byte	$37
06333 15A4                        30            .byte	$30
06334 15A5                        3F            .byte	$3F
06335 15A6                        00            .byte	0
06336 15A7                        00            .byte	0
06337 15A8                        00            .byte	0
06338                                           ! 1087  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15A9                        00            .byte	0
06340 15AA                        00            .byte	0
06341 15AB                        3F            .byte	$3F
06342 15AC                        30            .byte	$30
06343 15AD                        37            .byte	$37
06344 15AE                        36            .byte	$36
06345 15AF                        36            .byte	$36
06346 15B0                        36            .byte	$36
06347                                           ! 1088  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15B1                        36            .byte	$36
06349 15B2                        36            .byte	$36
06350 15B3                        F7            .byte	$F7
06351 15B4                        00            .byte	0
06352 15B5                        FF            .byte	$FF
06353 15B6                        00            .byte	0
06354 15B7                        00            .byte	0
06355 15B8                        00            .byte	0
06356                                           ! 1089  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15B9                        00            .byte	0
06358 15BA                        00            .byte	0
06359 15BB                        FF            .byte	$FF
06360 15BC                        00            .byte	0
06361 15BD                        F7            .byte	$F7
06362 15BE                        36            .byte	$36
06363 15BF                        36            .byte	$36
06364 15C0                        36            .byte	$36
06365                                           ! 1090  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15C1                        36            .byte	$36
06367 15C2                        36            .byte	$36
06368 15C3                        37            .byte	$37
06369 15C4                        30            .byte	$30
06370 15C5                        37            .byte	$37
06371 15C6                        36            .byte	$36
06372 15C7                        36            .byte	$36
06373 15C8                        36            .byte	$36
06374                                           ! 1091  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15C9                        00            .byte	0
06376 15CA                        00            .byte	0
06377 15CB                        FF            .byte	$FF
06378 15CC                        00            .byte	0
06379 15CD                        FF            .byte	$FF
06380 15CE                        00            .byte	0
06381 15CF                        00            .byte	0
06382 15D0                        00            .byte	0
06383                                           ! 1092  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15D1                        36            .byte	$36
06385 15D2                        36            .byte	$36
06386 15D3                        F7            .byte	$F7
06387 15D4                        00            .byte	0
06388 15D5                        F7            .byte	$F7
06389 15D6                        36            .byte	$36
06390 15D7                        36            .byte	$36
06391 15D8                        36            .byte	$36
06392                                           ! 1093  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15D9                        18            .byte	$18
06394 15DA                        18            .byte	$18
06395 15DB                        FF            .byte	$FF
06396 15DC                        00            .byte	0
06397 15DD                        FF            .byte	$FF
06398 15DE                        00            .byte	0
06399 15DF                        00            .byte	0
06400 15E0                        00            .byte	0
06401                                           ! 1094  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15E1                        36            .byte	$36
06403 15E2                        36            .byte	$36
06404 15E3                        36            .byte	$36
06405 15E4                        36            .byte	$36
06406 15E5                        FF            .byte	$FF
06407 15E6                        00            .byte	0
06408 15E7                        00            .byte	0
06409 15E8                        00            .byte	0
06410                                           ! 1095  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15E9                        00            .byte	0
06412 15EA                        00            .byte	0
06413 15EB                        FF            .byte	$FF
06414 15EC                        00            .byte	0
06415 15ED                        FF            .byte	$FF
06416 15EE                        18            .byte	$18
06417 15EF                        18            .byte	$18
06418 15F0                        18            .byte	$18
06419                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15F1                        00            .byte	0
06421 15F2                        00            .byte	0
06422 15F3                        00            .byte	0
06423 15F4                        00            .byte	0
06424 15F5                        FF            .byte	$FF
06425 15F6                        36            .byte	$36
06426 15F7                        36            .byte	$36
06427 15F8                        36            .byte	$36
06428                                           ! 1097  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 15F9                        36            .byte	$36
06430 15FA                        36            .byte	$36
06431 15FB                        36            .byte	$36
06432 15FC                        36            .byte	$36
06433 15FD                        3F            .byte	$3F
06434 15FE                        00            .byte	0
06435 15FF                        00            .byte	0
06436 1600                        00            .byte	0
06437                                           ! 1098  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 1601                        18            .byte	$18
06439 1602                        18            .byte	$18
06440 1603                        1F            .byte	$1F
06441 1604                        18            .byte	$18
06442 1605                        1F            .byte	$1F
06443 1606                        00            .byte	0
06444 1607                        00            .byte	0
06445 1608                        00            .byte	0
06446                                           ! 1099  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1609                        00            .byte	0
06448 160A                        00            .byte	0
06449 160B                        1F            .byte	$1F
06450 160C                        18            .byte	$18
06451 160D                        1F            .byte	$1F
06452 160E                        18            .byte	$18
06453 160F                        18            .byte	$18
06454 1610                        18            .byte	$18
06455                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 1611                        00            .byte	0
06457 1612                        00            .byte	0
06458 1613                        00            .byte	0
06459 1614                        00            .byte	0
06460 1615                        3F            .byte	$3F
06461 1616                        36            .byte	$36
06462 1617                        36            .byte	$36
06463 1618                        36            .byte	$36
06464                                           ! 1101  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1619                        36            .byte	$36
06466 161A                        36            .byte	$36
06467 161B                        36            .byte	$36
06468 161C                        36            .byte	$36
06469 161D                        FF            .byte	$FF
06470 161E                        36            .byte	$36
06471 161F                        36            .byte	$36
06472 1620                        36            .byte	$36
06473                                           ! 1102  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 1621                        18            .byte	$18
06475 1622                        18            .byte	$18
06476 1623                        FF            .byte	$FF
06477 1624                        18            .byte	$18
06478 1625                        FF            .byte	$FF
06479 1626                        18            .byte	$18
06480 1627                        18            .byte	$18
06481 1628                        18            .byte	$18
06482                                           ! 1103  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1629                        18            .byte	$18
06484 162A                        18            .byte	$18
06485 162B                        18            .byte	$18
06486 162C                        18            .byte	$18
06487 162D                        F8            .byte	$F8
06488 162E                        00            .byte	0
06489 162F                        00            .byte	0
06490 1630                        00            .byte	0
06491                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 1631                        00            .byte	0
06493 1632                        00            .byte	0
06494 1633                        00            .byte	0
06495 1634                        00            .byte	0
06496 1635                        1F            .byte	$1F
06497 1636                        18            .byte	$18
06498 1637                        18            .byte	$18
06499 1638                        18            .byte	$18
06500                                           ! 1105  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1639                        FF            .byte	$FF
06502 163A                        FF            .byte	$FF
06503 163B                        FF            .byte	$FF
06504 163C                        FF            .byte	$FF
06505 163D                        FF            .byte	$FF
06506 163E                        FF            .byte	$FF
06507 163F                        FF            .byte	$FF
06508 1640                        FF            .byte	$FF
06509                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 1641                        00            .byte	0
06511 1642                        00            .byte	0
06512 1643                        00            .byte	0
06513 1644                        00            .byte	0
06514 1645                        FF            .byte	$FF
06515 1646                        FF            .byte	$FF
06516 1647                        FF            .byte	$FF
06517 1648                        FF            .byte	$FF
06518                                           ! 1107  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1649                        F0            .byte	$F0
06520 164A                        F0            .byte	$F0
06521 164B                        F0            .byte	$F0
06522 164C                        F0            .byte	$F0
06523 164D                        F0            .byte	$F0
06524 164E                        F0            .byte	$F0
06525 164F                        F0            .byte	$F0
06526 1650                        F0            .byte	$F0
06527                                           ! 1108  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 1651                        0F            .byte	$F
06529 1652                        0F            .byte	$F
06530 1653                        0F            .byte	$F
06531 1654                        0F            .byte	$F
06532 1655                        0F            .byte	$F
06533 1656                        0F            .byte	$F
06534 1657                        0F            .byte	$F
06535 1658                        0F            .byte	$F
06536                                           ! 1109  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06537 1659                        FF            .byte	$FF
06538 165A                        FF            .byte	$FF
06539 165B                        FF            .byte	$FF
06540 165C                        FF            .byte	$FF
06541 165D                        00            .byte	0
06542 165E                        00            .byte	0
06543 165F                        00            .byte	0
06544 1660                        00            .byte	0
06545                                           ! 1110  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06546 1661                        00            .byte	0
06547 1662                        00            .byte	0
06548 1663                        76            .byte	$76
06549 1664                        DC            .byte	$DC
06550 1665                        C8            .byte	$C8
06551 1666                        DC            .byte	$DC
06552 1667                        76            .byte	$76
06553 1668                        00            .byte	0
06554                                           ! 1111 
06555                                           ! 1111  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1669                        00            .byte	0
06557 166A                        78            .byte	$78
06558 166B                        CC            .byte	$CC
06559 166C                        F8            .byte	$F8
06560 166D                        CC            .byte	$CC
06561 166E                        F8            .byte	$F8
06562 166F                        C0            .byte	$C0
06563 1670                        C0            .byte	$C0
06564                                           ! 1112  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 1671                        00            .byte	0
06566 1672                        FC            .byte	$FC
06567 1673                        CC            .byte	$CC
06568 1674                        C0            .byte	$C0
06569 1675                        C0            .byte	$C0
06570 1676                        C0            .byte	$C0
06571 1677                        C0            .byte	$C0
06572 1678                        00            .byte	0
06573                                           ! 1113  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1679                        00            .byte	0
06575 167A                        FE            .byte	$FE
06576 167B                        6C            .byte	$6C
06577 167C                        6C            .byte	$6C
06578 167D                        6C            .byte	$6C
06579 167E                        6C            .byte	$6C
06580 167F                        6C            .byte	$6C
06581 1680                        00            .byte	0
06582                                           ! 1114  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 1681                        FC            .byte	$FC
06584 1682                        CC            .byte	$CC
06585 1683                        60            .byte	$60
06586 1684                        30            .byte	$30
06587 1685                        60            .byte	$60
06588 1686                        CC            .byte	$CC
06589 1687                        FC            .byte	$FC
06590 1688                        00            .byte	0
06591                                           ! 1115  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1689                        00            .byte	0
06593 168A                        00            .byte	0
06594 168B                        7E            .byte	$7E
06595 168C                        D8            .byte	$D8
06596 168D                        D8            .byte	$D8
06597 168E                        D8            .byte	$D8
06598 168F                        70            .byte	$70
06599 1690                        00            .byte	0
06600                                           ! 1116  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 1691                        00            .byte	0
06602 1692                        66            .byte	$66
06603 1693                        66            .byte	$66
06604 1694                        66            .byte	$66
06605 1695                        66            .byte	$66
06606 1696                        7C            .byte	$7C
06607 1697                        60            .byte	$60
06608 1698                        C0            .byte	$C0
06609                                           ! 1117  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 1699                        00            .byte	0
06611 169A                        76            .byte	$76
06612 169B                        DC            .byte	$DC
06613 169C                        18            .byte	$18
06614 169D                        18            .byte	$18
06615 169E                        18            .byte	$18
06616 169F                        18            .byte	$18
06617 16A0                        00            .byte	0
06618                                           ! 1118  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 16A1                        FC            .byte	$FC
06620 16A2                        30            .byte	$30
06621 16A3                        78            .byte	$78
06622 16A4                        CC            .byte	$CC
06623 16A5                        CC            .byte	$CC
06624 16A6                        78            .byte	$78
06625 16A7                        30            .byte	$30
06626 16A8                        FC            .byte	$FC
06627                                           ! 1119  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16A9                        38            .byte	$38
06629 16AA                        6C            .byte	$6C
06630 16AB                        C6            .byte	$C6
06631 16AC                        FE            .byte	$FE
06632 16AD                        C6            .byte	$C6
06633 16AE                        6C            .byte	$6C
06634 16AF                        38            .byte	$38
06635 16B0                        00            .byte	0
06636                                           ! 1120  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16B1                        38            .byte	$38
06638 16B2                        6C            .byte	$6C
06639 16B3                        C6            .byte	$C6
06640 16B4                        C6            .byte	$C6
06641 16B5                        6C            .byte	$6C
06642 16B6                        6C            .byte	$6C
06643 16B7                        EE            .byte	$EE
06644 16B8                        00            .byte	0
06645                                           ! 1121  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16B9                        1C            .byte	$1C
06647 16BA                        30            .byte	$30
06648 16BB                        18            .byte	$18
06649 16BC                        7C            .byte	$7C
06650 16BD                        CC            .byte	$CC
06651 16BE                        CC            .byte	$CC
06652 16BF                        78            .byte	$78
06653 16C0                        00            .byte	0
06654                                           ! 1122  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16C1                        00            .byte	0
06656 16C2                        00            .byte	0
06657 16C3                        7E            .byte	$7E
06658 16C4                        DB            .byte	$DB
06659 16C5                        DB            .byte	$DB
06660 16C6                        7E            .byte	$7E
06661 16C7                        00            .byte	0
06662 16C8                        00            .byte	0
06663                                           ! 1123  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16C9                        06            .byte	6
06665 16CA                        0C            .byte	$C
06666 16CB                        7E            .byte	$7E
06667 16CC                        DB            .byte	$DB
06668 16CD                        DB            .byte	$DB
06669 16CE                        7E            .byte	$7E
06670 16CF                        60            .byte	$60
06671 16D0                        C0            .byte	$C0
06672                                           ! 1124  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16D1                        38            .byte	$38
06674 16D2                        60            .byte	$60
06675 16D3                        C0            .byte	$C0
06676 16D4                        F8            .byte	$F8
06677 16D5                        C0            .byte	$C0
06678 16D6                        60            .byte	$60
06679 16D7                        38            .byte	$38
06680 16D8                        00            .byte	0
06681                                           ! 1125  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16D9                        78            .byte	$78
06683 16DA                        CC            .byte	$CC
06684 16DB                        CC            .byte	$CC
06685 16DC                        CC            .byte	$CC
06686 16DD                        CC            .byte	$CC
06687 16DE                        CC            .byte	$CC
06688 16DF                        CC            .byte	$CC
06689 16E0                        00            .byte	0
06690                                           ! 1126  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16E1                        00            .byte	0
06692 16E2                        FC            .byte	$FC
06693 16E3                        00            .byte	0
06694 16E4                        FC            .byte	$FC
06695 16E5                        00            .byte	0
06696 16E6                        FC            .byte	$FC
06697 16E7                        00            .byte	0
06698 16E8                        00            .byte	0
06699                                           ! 1127  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16E9                        30            .byte	$30
06701 16EA                        30            .byte	$30
06702 16EB                        FC            .byte	$FC
06703 16EC                        30            .byte	$30
06704 16ED                        30            .byte	$30
06705 16EE                        00            .byte	0
06706 16EF                        FC            .byte	$FC
06707 16F0                        00            .byte	0
06708                                           ! 1128  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16F1                        60            .byte	$60
06710 16F2                        30            .byte	$30
06711 16F3                        18            .byte	$18
06712 16F4                        30            .byte	$30
06713 16F5                        60            .byte	$60
06714 16F6                        00            .byte	0
06715 16F7                        FC            .byte	$FC
06716 16F8                        00            .byte	0
06717                                           ! 1129  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 16F9                        18            .byte	$18
06719 16FA                        30            .byte	$30
06720 16FB                        60            .byte	$60
06721 16FC                        30            .byte	$30
06722 16FD                        18            .byte	$18
06723 16FE                        00            .byte	0
06724 16FF                        FC            .byte	$FC
06725 1700                        00            .byte	0
06726                                           ! 1130  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 1701                        0E            .byte	$E
06728 1702                        1B            .byte	$1B
06729 1703                        1B            .byte	$1B
06730 1704                        18            .byte	$18
06731 1705                        18            .byte	$18
06732 1706                        18            .byte	$18
06733 1707                        18            .byte	$18
06734 1708                        18            .byte	$18
06735                                           ! 1131  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1709                        18            .byte	$18
06737 170A                        18            .byte	$18
06738 170B                        18            .byte	$18
06739 170C                        18            .byte	$18
06740 170D                        18            .byte	$18
06741 170E                        D8            .byte	$D8
06742 170F                        D8            .byte	$D8
06743 1710                        70            .byte	$70
06744                                           ! 1132  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 1711                        30            .byte	$30
06746 1712                        30            .byte	$30
06747 1713                        00            .byte	0
06748 1714                        FC            .byte	$FC
06749 1715                        00            .byte	0
06750 1716                        30            .byte	$30
06751 1717                        30            .byte	$30
06752 1718                        00            .byte	0
06753                                           ! 1133  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1719                        00            .byte	0
06755 171A                        76            .byte	$76
06756 171B                        DC            .byte	$DC
06757 171C                        00            .byte	0
06758 171D                        76            .byte	$76
06759 171E                        DC            .byte	$DC
06760 171F                        00            .byte	0
06761 1720                        00            .byte	0
06762                                           ! 1134  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 1721                        38            .byte	$38
06764 1722                        6C            .byte	$6C
06765 1723                        6C            .byte	$6C
06766 1724                        38            .byte	$38
06767 1725                        00            .byte	0
06768 1726                        00            .byte	0
06769 1727                        00            .byte	0
06770 1728                        00            .byte	0
06771                                           ! 1135  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1729                        00            .byte	0
06773 172A                        00            .byte	0
06774 172B                        00            .byte	0
06775 172C                        18            .byte	$18
06776 172D                        18            .byte	$18
06777 172E                        00            .byte	0
06778 172F                        00            .byte	0
06779 1730                        00            .byte	0
06780                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 1731                        00            .byte	0
06782 1732                        00            .byte	0
06783 1733                        00            .byte	0
06784 1734                        00            .byte	0
06785 1735                        18            .byte	$18
06786 1736                        00            .byte	0
06787 1737                        00            .byte	0
06788 1738                        00            .byte	0
06789                                           ! 1137  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1739                        0F            .byte	$F
06791 173A                        0C            .byte	$C
06792 173B                        0C            .byte	$C
06793 173C                        0C            .byte	$C
06794 173D                        EC            .byte	$EC
06795 173E                        6C            .byte	$6C
06796 173F                        3C            .byte	$3C
06797 1740                        1C            .byte	$1C
06798                                           ! 1138  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 1741                        78            .byte	$78
06800 1742                        6C            .byte	$6C
06801 1743                        6C            .byte	$6C
06802 1744                        6C            .byte	$6C
06803 1745                        6C            .byte	$6C
06804 1746                        00            .byte	0
06805 1747                        00            .byte	0
06806 1748                        00            .byte	0
06807                                           ! 1139  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1749                        70            .byte	$70
06809 174A                        18            .byte	$18
06810 174B                        30            .byte	$30
06811 174C                        60            .byte	$60
06812 174D                        78            .byte	$78
06813 174E                        00            .byte	0
06814 174F                        00            .byte	0
06815 1750                        00            .byte	0
06816                                           ! 1140  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 1751                        00            .byte	0
06818 1752                        00            .byte	0
06819 1753                        3C            .byte	$3C
06820 1754                        3C            .byte	$3C
06821 1755                        3C            .byte	$3C
06822 1756                        3C            .byte	$3C
06823 1757                        00            .byte	0
06824 1758                        00            .byte	0
06825                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1759                        00            .byte	0
06827 175A                        00            .byte	0
06828 175B                        00            .byte	0
06829 175C                        00            .byte	0
06830 175D                        00            .byte	0
06831 175E                        00            .byte	0
06832 175F                        00            .byte	0
06833                                           ! 1142 };
06834 1760                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1143 static Bit8u vgafont14[256*14]=
06837                                           ! 1144 {
06838                       00001761            _vgafont14:
06839                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 1761                        00            .byte	0
06841 1762                        00            .byte	0
06842 1763                        00            .byte	0
06843 1764                        00            .byte	0
06844 1765                        00            .byte	0
06845 1766                        00            .byte	0
06846 1767                        00            .byte	0
06847 1768                        00            .byte	0
06848 1769                        00            .byte	0
06849 176A                        00            .byte	0
06850 176B                        00            .byte	0
06851 176C                        00            .byte	0
06852 176D                        00            .byte	0
06853 176E                        00            .byte	0
06854                                           ! 1146  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 176F                        00            .byte	0
06856 1770                        00            .byte	0
06857 1771                        7E            .byte	$7E
06858 1772                        81            .byte	$81
06859 1773                        A5            .byte	$A5
06860 1774                        81            .byte	$81
06861 1775                        81            .byte	$81
06862 1776                        BD            .byte	$BD
06863 1777                        99            .byte	$99
06864 1778                        81            .byte	$81
06865 1779                        7E            .byte	$7E
06866 177A                        00            .byte	0
06867 177B                        00            .byte	0
06868 177C                        00            .byte	0
06869                                           ! 1147  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 177D                        00            .byte	0
06871 177E                        00            .byte	0
06872 177F                        7E            .byte	$7E
06873 1780                        FF            .byte	$FF
06874 1781                        DB            .byte	$DB
06875 1782                        FF            .byte	$FF
06876 1783                        FF            .byte	$FF
06877 1784                        C3            .byte	$C3
06878 1785                        E7            .byte	$E7
06879 1786                        FF            .byte	$FF
06880 1787                        7E            .byte	$7E
06881 1788                        00            .byte	0
06882 1789                        00            .byte	0
06883 178A                        00            .byte	0
06884                                           ! 1148  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 178B                        00            .byte	0
06886 178C                        00            .byte	0
06887 178D                        00            .byte	0
06888 178E                        6C            .byte	$6C
06889 178F                        FE            .byte	$FE
06890 1790                        FE            .byte	$FE
06891 1791                        FE            .byte	$FE
06892 1792                        FE            .byte	$FE
06893 1793                        7C            .byte	$7C
06894 1794                        38            .byte	$38
06895 1795                        10            .byte	$10
06896 1796                        00            .byte	0
06897 1797                        00            .byte	0
06898 1798                        00            .byte	0
06899                                           ! 1149  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06900 1799                        00            .byte	0
06901 179A                        00            .byte	0
06902 179B                        00            .byte	0
06903 179C                        10            .byte	$10
06904 179D                        38            .byte	$38
06905 179E                        7C            .byte	$7C
06906 179F                        FE            .byte	$FE
06907 17A0                        7C            .byte	$7C
06908 17A1                        38            .byte	$38
06909 17A2                        10            .byte	$10
06910 17A3                        00            .byte	0
06911 17A4                        00            .byte	0
06912 17A5                        00            .byte	0
06913 17A6                        00            .byte	0
06914                                           ! 1150  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0
06915 17A7                        00            .byte	0
06916 17A8                        00            .byte	0
06917 17A9                        18            .byte	$18
06918 17AA                        3C            .byte	$3C
06919 17AB                        3C            .byte	$3C
06920 17AC                        E7            .byte	$E7
06921 17AD                        E7            .byte	$E7
06922 17AE                        E7            .byte	$E7
06923 17AF                        18            .byte	$18
06924 17B0                        18            .byte	$18
06925 17B1                        3C            .byte	$3C
06926                                           ! 1150 x00, 0x00, 0x00,
06927 17B2                        00            .byte	0
06928 17B3                        00            .byte	0
06929 17B4                        00            .byte	0
06930                                           ! 1151  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17B5                        00            .byte	0
06932 17B6                        00            .byte	0
06933 17B7                        18            .byte	$18
06934 17B8                        3C            .byte	$3C
06935 17B9                        7E            .byte	$7E
06936 17BA                        FF            .byte	$FF
06937 17BB                        FF            .byte	$FF
06938 17BC                        7E            .byte	$7E
06939 17BD                        18            .byte	$18
06940 17BE                        18            .byte	$18
06941 17BF                        3C            .byte	$3C
06942 17C0                        00            .byte	0
06943 17C1                        00            .byte	0
06944 17C2                        00            .byte	0
06945                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17C3                        00            .byte	0
06947 17C4                        00            .byte	0
06948 17C5                        00            .byte	0
06949 17C6                        00            .byte	0
06950 17C7                        00            .byte	0
06951 17C8                        18            .byte	$18
06952 17C9                        3C            .byte	$3C
06953 17CA                        3C            .byte	$3C
06954 17CB                        18            .byte	$18
06955 17CC                        00            .byte	0
06956 17CD                        00            .byte	0
06957 17CE                        00            .byte	0
06958 17CF                        00            .byte	0
06959 17D0                        00            .byte	0
06960                                           ! 1153  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17D1                        FF            .byte	$FF
06962 17D2                        FF            .byte	$FF
06963 17D3                        FF            .byte	$FF
06964 17D4                        FF            .byte	$FF
06965 17D5                        FF            .byte	$FF
06966 17D6                        E7            .byte	$E7
06967 17D7                        C3            .byte	$C3
06968 17D8                        C3            .byte	$C3
06969 17D9                        E7            .byte	$E7
06970 17DA                        FF            .byte	$FF
06971 17DB                        FF            .byte	$FF
06972 17DC                        FF            .byte	$FF
06973 17DD                        FF            .byte	$FF
06974 17DE                        FF            .byte	$FF
06975                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17DF                        00            .byte	0
06977 17E0                        00            .byte	0
06978 17E1                        00            .byte	0
06979 17E2                        00            .byte	0
06980 17E3                        3C            .byte	$3C
06981 17E4                        66            .byte	$66
06982 17E5                        42            .byte	$42
06983 17E6                        42            .byte	$42
06984 17E7                        66            .byte	$66
06985 17E8                        3C            .byte	$3C
06986 17E9                        00            .byte	0
06987 17EA                        00            .byte	0
06988 17EB                        00            .byte	0
06989 17EC                        00            .byte	0
06990                                           ! 1155  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17ED                        FF            .byte	$FF
06992 17EE                        FF            .byte	$FF
06993 17EF                        FF            .byte	$FF
06994 17F0                        FF            .byte	$FF
06995 17F1                        C3            .byte	$C3
06996 17F2                        99            .byte	$99
06997 17F3                        BD            .byte	$BD
06998 17F4                        BD            .byte	$BD
06999 17F5                        99            .byte	$99
07000 17F6                        C3            .byte	$C3
07001 17F7                        FF            .byte	$FF
07002 17F8                        FF            .byte	$FF
07003 17F9                        FF            .byte	$FF
07004 17FA                        FF            .byte	$FF
07005                                           ! 1156  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 17FB                        00            .byte	0
07007 17FC                        00            .byte	0
07008 17FD                        1E            .byte	$1E
07009 17FE                        0E            .byte	$E
07010 17FF                        1A            .byte	$1A
07011 1800                        32            .byte	$32
07012 1801                        78            .byte	$78
07013 1802                        CC            .byte	$CC
07014 1803                        CC            .byte	$CC
07015 1804                        CC            .byte	$CC
07016 1805                        78            .byte	$78
07017 1806                        00            .byte	0
07018 1807                        00            .byte	0
07019 1808                        00            .byte	0
07020                                           ! 1157  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1809                        00            .byte	0
07022 180A                        00            .byte	0
07023 180B                        3C            .byte	$3C
07024 180C                        66            .byte	$66
07025 180D                        66            .byte	$66
07026 180E                        66            .byte	$66
07027 180F                        3C            .byte	$3C
07028 1810                        18            .byte	$18
07029 1811                        7E            .byte	$7E
07030 1812                        18            .byte	$18
07031 1813                        18            .byte	$18
07032 1814                        00            .byte	0
07033 1815                        00            .byte	0
07034 1816                        00            .byte	0
07035                                           ! 1158  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 1817                        00            .byte	0
07037 1818                        00            .byte	0
07038 1819                        3F            .byte	$3F
07039 181A                        33            .byte	$33
07040 181B                        3F            .byte	$3F
07041 181C                        30            .byte	$30
07042 181D                        30            .byte	$30
07043 181E                        30            .byte	$30
07044 181F                        70            .byte	$70
07045 1820                        F0            .byte	$F0
07046 1821                        E0            .byte	$E0
07047 1822                        00            .byte	0
07048 1823                        00            .byte	0
07049 1824                        00            .byte	0
07050                                           ! 1159  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 1825                        00            .byte	0
07052 1826                        00            .byte	0
07053 1827                        7F            .byte	$7F
07054 1828                        63            .byte	$63
07055 1829                        7F            .byte	$7F
07056 182A                        63            .byte	$63
07057 182B                        63            .byte	$63
07058 182C                        63            .byte	$63
07059 182D                        67            .byte	$67
07060 182E                        E7            .byte	$E7
07061 182F                        E6            .byte	$E6
07062 1830                        C0            .byte	$C0
07063 1831                        00            .byte	0
07064 1832                        00            .byte	0
07065                                           ! 1160  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 1833                        00            .byte	0
07067 1834                        00            .byte	0
07068 1835                        18            .byte	$18
07069 1836                        18            .byte	$18
07070 1837                        DB            .byte	$DB
07071 1838                        3C            .byte	$3C
07072 1839                        E7            .byte	$E7
07073 183A                        3C            .byte	$3C
07074 183B                        DB            .byte	$DB
07075 183C                        18            .byte	$18
07076 183D                        18            .byte	$18
07077 183E                        00            .byte	0
07078 183F                        00            .byte	0
07079 1840                        00            .byte	0
07080                                           ! 1161  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 1841                        00            .byte	0
07082 1842                        00            .byte	0
07083 1843                        80            .byte	$80
07084 1844                        C0            .byte	$C0
07085 1845                        E0            .byte	$E0
07086 1846                        F8            .byte	$F8
07087 1847                        FE            .byte	$FE
07088 1848                        F8            .byte	$F8
07089 1849                        E0            .byte	$E0
07090 184A                        C0            .byte	$C0
07091 184B                        80            .byte	$80
07092 184C                        00            .byte	0
07093 184D                        00            .byte	0
07094 184E                        00            .byte	0
07095                                           ! 1162  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 184F                        00            .byte	0
07097 1850                        00            .byte	0
07098 1851                        02            .byte	2
07099 1852                        06            .byte	6
07100 1853                        0E            .byte	$E
07101 1854                        3E            .byte	$3E
07102 1855                        FE            .byte	$FE
07103 1856                        3E            .byte	$3E
07104 1857                        0E            .byte	$E
07105 1858                        06            .byte	6
07106 1859                        02            .byte	2
07107 185A                        00            .byte	0
07108 185B                        00            .byte	0
07109 185C                        00            .byte	0
07110                                           ! 1163  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 185D                        00            .byte	0
07112 185E                        00            .byte	0
07113 185F                        18            .byte	$18
07114 1860                        3C            .byte	$3C
07115 1861                        7E            .byte	$7E
07116 1862                        18            .byte	$18
07117 1863                        18            .byte	$18
07118 1864                        18            .byte	$18
07119 1865                        7E            .byte	$7E
07120 1866                        3C            .byte	$3C
07121 1867                        18            .byte	$18
07122 1868                        00            .byte	0
07123 1869                        00            .byte	0
07124 186A                        00            .byte	0
07125                                           ! 1164  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 186B                        00            .byte	0
07127 186C                        00            .byte	0
07128 186D                        66            .byte	$66
07129 186E                        66            .byte	$66
07130 186F                        66            .byte	$66
07131 1870                        66            .byte	$66
07132 1871                        66            .byte	$66
07133 1872                        66            .byte	$66
07134 1873                        00            .byte	0
07135 1874                        66            .byte	$66
07136 1875                        66            .byte	$66
07137 1876                        00            .byte	0
07138 1877                        00            .byte	0
07139 1878                        00            .byte	0
07140                                           ! 1165  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1879                        00            .byte	0
07142 187A                        00            .byte	0
07143 187B                        7F            .byte	$7F
07144 187C                        DB            .byte	$DB
07145 187D                        DB            .byte	$DB
07146 187E                        DB            .byte	$DB
07147 187F                        7B            .byte	$7B
07148 1880                        1B            .byte	$1B
07149 1881                        1B            .byte	$1B
07150 1882                        1B            .byte	$1B
07151 1883                        1B            .byte	$1B
07152 1884                        00            .byte	0
07153 1885                        00            .byte	0
07154 1886                        00            .byte	0
07155                                           ! 1166  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 1887                        00            .byte	0
07157 1888                        7C            .byte	$7C
07158 1889                        C6            .byte	$C6
07159 188A                        60            .byte	$60
07160 188B                        38            .byte	$38
07161 188C                        6C            .byte	$6C
07162 188D                        C6            .byte	$C6
07163 188E                        C6            .byte	$C6
07164 188F                        6C            .byte	$6C
07165 1890                        38            .byte	$38
07166 1891                        0C            .byte	$C
07167 1892                        C6            .byte	$C6
07168 1893                        7C            .byte	$7C
07169 1894                        00            .byte	0
07170                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 1895                        00            .byte	0
07172 1896                        00            .byte	0
07173 1897                        00            .byte	0
07174 1898                        00            .byte	0
07175 1899                        00            .byte	0
07176 189A                        00            .byte	0
07177 189B                        00            .byte	0
07178 189C                        00            .byte	0
07179 189D                        FE            .byte	$FE
07180 189E                        FE            .byte	$FE
07181 189F                        FE            .byte	$FE
07182 18A0                        00            .byte	0
07183 18A1                        00            .byte	0
07184 18A2                        00            .byte	0
07185                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 18A3                        00            .byte	0
07187 18A4                        00            .byte	0
07188 18A5                        18            .byte	$18
07189 18A6                        3C            .byte	$3C
07190 18A7                        7E            .byte	$7E
07191 18A8                        18            .byte	$18
07192 18A9                        18            .byte	$18
07193 18AA                        18            .byte	$18
07194 18AB                        7E            .byte	$7E
07195 18AC                        3C            .byte	$3C
07196 18AD                        18            .byte	$18
07197 18AE                        7E            .byte	$7E
07198 18AF                        00            .byte	0
07199 18B0                        00            .byte	0
07200                                           ! 1169  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18B1                        00            .byte	0
07202 18B2                        00            .byte	0
07203 18B3                        18            .byte	$18
07204 18B4                        3C            .byte	$3C
07205 18B5                        7E            .byte	$7E
07206 18B6                        18            .byte	$18
07207 18B7                        18            .byte	$18
07208 18B8                        18            .byte	$18
07209 18B9                        18            .byte	$18
07210 18BA                        18            .byte	$18
07211 18BB                        18            .byte	$18
07212 18BC                        00            .byte	0
07213 18BD                        00            .byte	0
07214 18BE                        00            .byte	0
07215                                           ! 1170  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18BF                        00            .byte	0
07217 18C0                        00            .byte	0
07218 18C1                        18            .byte	$18
07219 18C2                        18            .byte	$18
07220 18C3                        18            .byte	$18
07221 18C4                        18            .byte	$18
07222 18C5                        18            .byte	$18
07223 18C6                        18            .byte	$18
07224 18C7                        7E            .byte	$7E
07225 18C8                        3C            .byte	$3C
07226 18C9                        18            .byte	$18
07227 18CA                        00            .byte	0
07228 18CB                        00            .byte	0
07229 18CC                        00            .byte	0
07230                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18CD                        00            .byte	0
07232 18CE                        00            .byte	0
07233 18CF                        00            .byte	0
07234 18D0                        00            .byte	0
07235 18D1                        18            .byte	$18
07236 18D2                        0C            .byte	$C
07237 18D3                        FE            .byte	$FE
07238 18D4                        0C            .byte	$C
07239 18D5                        18            .byte	$18
07240 18D6                        00            .byte	0
07241 18D7                        00            .byte	0
07242 18D8                        00            .byte	0
07243 18D9                        00            .byte	0
07244 18DA                        00            .byte	0
07245                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18DB                        00            .byte	0
07247 18DC                        00            .byte	0
07248 18DD                        00            .byte	0
07249 18DE                        00            .byte	0
07250 18DF                        30            .byte	$30
07251 18E0                        60            .byte	$60
07252 18E1                        FE            .byte	$FE
07253 18E2                        60            .byte	$60
07254 18E3                        30            .byte	$30
07255 18E4                        00            .byte	0
07256 18E5                        00            .byte	0
07257 18E6                        00            .byte	0
07258 18E7                        00            .byte	0
07259 18E8                        00            .byte	0
07260                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07261 18E9                        00            .byte	0
07262 18EA                        00            .byte	0
07263 18EB                        00            .byte	0
07264 18EC                        00            .byte	0
07265 18ED                        00            .byte	0
07266 18EE                        C0            .byte	$C0
07267 18EF                        C0            .byte	$C0
07268 18F0                        C0            .byte	$C0
07269 18F1                        FE            .byte	$FE
07270 18F2                        00            .byte	0
07271 18F3                        00            .byte	0
07272 18F4                        00            .byte	0
07273 18F5                        00            .byte	0
07274 18F6                        00            .byte	0
07275                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x0
07276 18F7                        00            .byte	0
07277 18F8                        00            .byte	0
07278 18F9                        00            .byte	0
07279 18FA                        00            .byte	0
07280 18FB                        28            .byte	$28
07281 18FC                        6C            .byte	$6C
07282 18FD                        FE            .byte	$FE
07283 18FE                        6C            .byte	$6C
07284 18FF                        28            .byte	$28
07285 1900                        00            .byte	0
07286 1901                        00            .byte	0
07287 1902                        00            .byte	0
07288                                           ! 1174 0, 0x00,
07289 1903                        00            .byte	0
07290 1904                        00            .byte	0
07291                                           ! 1175  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 1905                        00            .byte	0
07293 1906                        00            .byte	0
07294 1907                        00            .byte	0
07295 1908                        10            .byte	$10
07296 1909                        38            .byte	$38
07297 190A                        38            .byte	$38
07298 190B                        7C            .byte	$7C
07299 190C                        7C            .byte	$7C
07300 190D                        FE            .byte	$FE
07301 190E                        FE            .byte	$FE
07302 190F                        00            .byte	0
07303 1910                        00            .byte	0
07304 1911                        00            .byte	0
07305 1912                        00            .byte	0
07306                                           ! 1176  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 1913                        00            .byte	0
07308 1914                        00            .byte	0
07309 1915                        00            .byte	0
07310 1916                        FE            .byte	$FE
07311 1917                        FE            .byte	$FE
07312 1918                        7C            .byte	$7C
07313 1919                        7C            .byte	$7C
07314 191A                        38            .byte	$38
07315 191B                        38            .byte	$38
07316 191C                        10            .byte	$10
07317 191D                        00            .byte	0
07318 191E                        00            .byte	0
07319 191F                        00            .byte	0
07320 1920                        00            .byte	0
07321                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 1921                        00            .byte	0
07323 1922                        00            .byte	0
07324 1923                        00            .byte	0
07325 1924                        00            .byte	0
07326 1925                        00            .byte	0
07327 1926                        00            .byte	0
07328 1927                        00            .byte	0
07329 1928                        00            .byte	0
07330 1929                        00            .byte	0
07331 192A                        00            .byte	0
07332 192B                        00            .byte	0
07333 192C                        00            .byte	0
07334 192D                        00            .byte	0
07335 192E                        00            .byte	0
07336                                           ! 1178  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 192F                        00            .byte	0
07338 1930                        00            .byte	0
07339 1931                        18            .byte	$18
07340 1932                        3C            .byte	$3C
07341 1933                        3C            .byte	$3C
07342 1934                        3C            .byte	$3C
07343 1935                        18            .byte	$18
07344 1936                        18            .byte	$18
07345 1937                        00            .byte	0
07346 1938                        18            .byte	$18
07347 1939                        18            .byte	$18
07348 193A                        00            .byte	0
07349 193B                        00            .byte	0
07350 193C                        00            .byte	0
07351                                           ! 1179  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 193D                        00            .byte	0
07353 193E                        66            .byte	$66
07354 193F                        66            .byte	$66
07355 1940                        66            .byte	$66
07356 1941                        24            .byte	$24
07357 1942                        00            .byte	0
07358 1943                        00            .byte	0
07359 1944                        00            .byte	0
07360 1945                        00            .byte	0
07361 1946                        00            .byte	0
07362 1947                        00            .byte	0
07363 1948                        00            .byte	0
07364 1949                        00            .byte	0
07365 194A                        00            .byte	0
07366                                           ! 1180  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 194B                        00            .byte	0
07368 194C                        00            .byte	0
07369 194D                        6C            .byte	$6C
07370 194E                        6C            .byte	$6C
07371 194F                        FE            .byte	$FE
07372 1950                        6C            .byte	$6C
07373 1951                        6C            .byte	$6C
07374 1952                        6C            .byte	$6C
07375 1953                        FE            .byte	$FE
07376 1954                        6C            .byte	$6C
07377 1955                        6C            .byte	$6C
07378 1956                        00            .byte	0
07379 1957                        00            .byte	0
07380 1958                        00            .byte	0
07381                                           ! 1181  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1959                        18            .byte	$18
07383 195A                        18            .byte	$18
07384 195B                        7C            .byte	$7C
07385 195C                        C6            .byte	$C6
07386 195D                        C2            .byte	$C2
07387 195E                        C0            .byte	$C0
07388 195F                        7C            .byte	$7C
07389 1960                        06            .byte	6
07390 1961                        86            .byte	$86
07391 1962                        C6            .byte	$C6
07392 1963                        7C            .byte	$7C
07393 1964                        18            .byte	$18
07394 1965                        18            .byte	$18
07395 1966                        00            .byte	0
07396                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 1967                        00            .byte	0
07398 1968                        00            .byte	0
07399 1969                        00            .byte	0
07400 196A                        00            .byte	0
07401 196B                        C2            .byte	$C2
07402 196C                        C6            .byte	$C6
07403 196D                        0C            .byte	$C
07404 196E                        18            .byte	$18
07405 196F                        30            .byte	$30
07406 1970                        66            .byte	$66
07407 1971                        C6            .byte	$C6
07408 1972                        00            .byte	0
07409 1973                        00            .byte	0
07410 1974                        00            .byte	0
07411                                           ! 1183  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 1975                        00            .byte	0
07413 1976                        00            .byte	0
07414 1977                        38            .byte	$38
07415 1978                        6C            .byte	$6C
07416 1979                        6C            .byte	$6C
07417 197A                        38            .byte	$38
07418 197B                        76            .byte	$76
07419 197C                        DC            .byte	$DC
07420 197D                        CC            .byte	$CC
07421 197E                        CC            .byte	$CC
07422 197F                        76            .byte	$76
07423 1980                        00            .byte	0
07424 1981                        00            .byte	0
07425 1982                        00            .byte	0
07426                                           ! 1184  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 1983                        00            .byte	0
07428 1984                        30            .byte	$30
07429 1985                        30            .byte	$30
07430 1986                        30            .byte	$30
07431 1987                        60            .byte	$60
07432 1988                        00            .byte	0
07433 1989                        00            .byte	0
07434 198A                        00            .byte	0
07435 198B                        00            .byte	0
07436 198C                        00            .byte	0
07437 198D                        00            .byte	0
07438 198E                        00            .byte	0
07439 198F                        00            .byte	0
07440 1990                        00            .byte	0
07441                                           ! 1185  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 1991                        00            .byte	0
07443 1992                        00            .byte	0
07444 1993                        0C            .byte	$C
07445 1994                        18            .byte	$18
07446 1995                        30            .byte	$30
07447 1996                        30            .byte	$30
07448 1997                        30            .byte	$30
07449 1998                        30            .byte	$30
07450 1999                        30            .byte	$30
07451 199A                        18            .byte	$18
07452 199B                        0C            .byte	$C
07453 199C                        00            .byte	0
07454 199D                        00            .byte	0
07455 199E                        00            .byte	0
07456                                           ! 1186  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 199F                        00            .byte	0
07458 19A0                        00            .byte	0
07459 19A1                        30            .byte	$30
07460 19A2                        18            .byte	$18
07461 19A3                        0C            .byte	$C
07462 19A4                        0C            .byte	$C
07463 19A5                        0C            .byte	$C
07464 19A6                        0C            .byte	$C
07465 19A7                        0C            .byte	$C
07466 19A8                        18            .byte	$18
07467 19A9                        30            .byte	$30
07468 19AA                        00            .byte	0
07469 19AB                        00            .byte	0
07470 19AC                        00            .byte	0
07471                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19AD                        00            .byte	0
07473 19AE                        00            .byte	0
07474 19AF                        00            .byte	0
07475 19B0                        00            .byte	0
07476 19B1                        66            .byte	$66
07477 19B2                        3C            .byte	$3C
07478 19B3                        FF            .byte	$FF
07479 19B4                        3C            .byte	$3C
07480 19B5                        66            .byte	$66
07481 19B6                        00            .byte	0
07482 19B7                        00            .byte	0
07483 19B8                        00            .byte	0
07484 19B9                        00            .byte	0
07485 19BA                        00            .byte	0
07486                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19BB                        00            .byte	0
07488 19BC                        00            .byte	0
07489 19BD                        00            .byte	0
07490 19BE                        00            .byte	0
07491 19BF                        18            .byte	$18
07492 19C0                        18            .byte	$18
07493 19C1                        7E            .byte	$7E
07494 19C2                        18            .byte	$18
07495 19C3                        18            .byte	$18
07496 19C4                        00            .byte	0
07497 19C5                        00            .byte	0
07498 19C6                        00            .byte	0
07499 19C7                        00            .byte	0
07500 19C8                        00            .byte	0
07501                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19C9                        00            .byte	0
07503 19CA                        00            .byte	0
07504 19CB                        00            .byte	0
07505 19CC                        00            .byte	0
07506 19CD                        00            .byte	0
07507 19CE                        00            .byte	0
07508 19CF                        00            .byte	0
07509 19D0                        00            .byte	0
07510 19D1                        18            .byte	$18
07511 19D2                        18            .byte	$18
07512 19D3                        18            .byte	$18
07513 19D4                        30            .byte	$30
07514 19D5                        00            .byte	0
07515 19D6                        00            .byte	0
07516                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19D7                        00            .byte	0
07518 19D8                        00            .byte	0
07519 19D9                        00            .byte	0
07520 19DA                        00            .byte	0
07521 19DB                        00            .byte	0
07522 19DC                        00            .byte	0
07523 19DD                        FE            .byte	$FE
07524 19DE                        00            .byte	0
07525 19DF                        00            .byte	0
07526 19E0                        00            .byte	0
07527 19E1                        00            .byte	0
07528 19E2                        00            .byte	0
07529 19E3                        00            .byte	0
07530 19E4                        00            .byte	0
07531                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19E5                        00            .byte	0
07533 19E6                        00            .byte	0
07534 19E7                        00            .byte	0
07535 19E8                        00            .byte	0
07536 19E9                        00            .byte	0
07537 19EA                        00            .byte	0
07538 19EB                        00            .byte	0
07539 19EC                        00            .byte	0
07540 19ED                        00            .byte	0
07541 19EE                        18            .byte	$18
07542 19EF                        18            .byte	$18
07543 19F0                        00            .byte	0
07544 19F1                        00            .byte	0
07545 19F2                        00            .byte	0
07546                                           ! 1192  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19F3                        00            .byte	0
07548 19F4                        00            .byte	0
07549 19F5                        02            .byte	2
07550 19F6                        06            .byte	6
07551 19F7                        0C            .byte	$C
07552 19F8                        18            .byte	$18
07553 19F9                        30            .byte	$30
07554 19FA                        60            .byte	$60
07555 19FB                        C0            .byte	$C0
07556 19FC                        80            .byte	$80
07557 19FD                        00            .byte	0
07558 19FE                        00            .byte	0
07559 19FF                        00            .byte	0
07560 1A00                        00            .byte	0
07561                                           ! 1193  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 1A01                        00            .byte	0
07563 1A02                        00            .byte	0
07564 1A03                        7C            .byte	$7C
07565 1A04                        C6            .byte	$C6
07566 1A05                        CE            .byte	$CE
07567 1A06                        DE            .byte	$DE
07568 1A07                        F6            .byte	$F6
07569 1A08                        E6            .byte	$E6
07570 1A09                        C6            .byte	$C6
07571 1A0A                        C6            .byte	$C6
07572 1A0B                        7C            .byte	$7C
07573 1A0C                        00            .byte	0
07574 1A0D                        00            .byte	0
07575 1A0E                        00            .byte	0
07576                                           ! 1194  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A0F                        00            .byte	0
07578 1A10                        00            .byte	0
07579 1A11                        18            .byte	$18
07580 1A12                        38            .byte	$38
07581 1A13                        78            .byte	$78
07582 1A14                        18            .byte	$18
07583 1A15                        18            .byte	$18
07584 1A16                        18            .byte	$18
07585 1A17                        18            .byte	$18
07586 1A18                        18            .byte	$18
07587 1A19                        7E            .byte	$7E
07588 1A1A                        00            .byte	0
07589 1A1B                        00            .byte	0
07590 1A1C                        00            .byte	0
07591                                           ! 1195  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A1D                        00            .byte	0
07593 1A1E                        00            .byte	0
07594 1A1F                        7C            .byte	$7C
07595 1A20                        C6            .byte	$C6
07596 1A21                        06            .byte	6
07597 1A22                        0C            .byte	$C
07598 1A23                        18            .byte	$18
07599 1A24                        30            .byte	$30
07600 1A25                        60            .byte	$60
07601 1A26                        C6            .byte	$C6
07602 1A27                        FE            .byte	$FE
07603 1A28                        00            .byte	0
07604 1A29                        00            .byte	0
07605 1A2A                        00            .byte	0
07606                                           ! 1196  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A2B                        00            .byte	0
07608 1A2C                        00            .byte	0
07609 1A2D                        7C            .byte	$7C
07610 1A2E                        C6            .byte	$C6
07611 1A2F                        06            .byte	6
07612 1A30                        06            .byte	6
07613 1A31                        3C            .byte	$3C
07614 1A32                        06            .byte	6
07615 1A33                        06            .byte	6
07616 1A34                        C6            .byte	$C6
07617 1A35                        7C            .byte	$7C
07618 1A36                        00            .byte	0
07619 1A37                        00            .byte	0
07620 1A38                        00            .byte	0
07621                                           ! 1197  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07622 1A39                        00            .byte	0
07623 1A3A                        00            .byte	0
07624 1A3B                        0C            .byte	$C
07625 1A3C                        1C            .byte	$1C
07626 1A3D                        3C            .byte	$3C
07627 1A3E                        6C            .byte	$6C
07628 1A3F                        CC            .byte	$CC
07629 1A40                        FE            .byte	$FE
07630 1A41                        0C            .byte	$C
07631 1A42                        0C            .byte	$C
07632 1A43                        1E            .byte	$1E
07633 1A44                        00            .byte	0
07634 1A45                        00            .byte	0
07635 1A46                        00            .byte	0
07636                                           ! 1198  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07637 1A47                        00            .byte	0
07638 1A48                        00            .byte	0
07639 1A49                        FE            .byte	$FE
07640 1A4A                        C0            .byte	$C0
07641 1A4B                        C0            .byte	$C0
07642 1A4C                        C0            .byte	$C0
07643 1A4D                        FC            .byte	$FC
07644 1A4E                        06            .byte	6
07645 1A4F                        06            .byte	6
07646 1A50                        C6            .byte	$C6
07647 1A51                        7C            .byte	$7C
07648 1A52                        00            .byte	0
07649 1A53                        00            .byte	0
07650                                           ! 1198 
07651 1A54                        00            .byte	0
07652                                           ! 1199  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A55                        00            .byte	0
07654 1A56                        00            .byte	0
07655 1A57                        38            .byte	$38
07656 1A58                        60            .byte	$60
07657 1A59                        C0            .byte	$C0
07658 1A5A                        C0            .byte	$C0
07659 1A5B                        FC            .byte	$FC
07660 1A5C                        C6            .byte	$C6
07661 1A5D                        C6            .byte	$C6
07662 1A5E                        C6            .byte	$C6
07663 1A5F                        7C            .byte	$7C
07664 1A60                        00            .byte	0
07665 1A61                        00            .byte	0
07666 1A62                        00            .byte	0
07667                                           ! 1200  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A63                        00            .byte	0
07669 1A64                        00            .byte	0
07670 1A65                        FE            .byte	$FE
07671 1A66                        C6            .byte	$C6
07672 1A67                        06            .byte	6
07673 1A68                        0C            .byte	$C
07674 1A69                        18            .byte	$18
07675 1A6A                        30            .byte	$30
07676 1A6B                        30            .byte	$30
07677 1A6C                        30            .byte	$30
07678 1A6D                        30            .byte	$30
07679 1A6E                        00            .byte	0
07680 1A6F                        00            .byte	0
07681 1A70                        00            .byte	0
07682                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A71                        00            .byte	0
07684 1A72                        00            .byte	0
07685 1A73                        7C            .byte	$7C
07686 1A74                        C6            .byte	$C6
07687 1A75                        C6            .byte	$C6
07688 1A76                        C6            .byte	$C6
07689 1A77                        7C            .byte	$7C
07690 1A78                        C6            .byte	$C6
07691 1A79                        C6            .byte	$C6
07692 1A7A                        C6            .byte	$C6
07693 1A7B                        7C            .byte	$7C
07694 1A7C                        00            .byte	0
07695 1A7D                        00            .byte	0
07696 1A7E                        00            .byte	0
07697                                           ! 1202  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A7F                        00            .byte	0
07699 1A80                        00            .byte	0
07700 1A81                        7C            .byte	$7C
07701 1A82                        C6            .byte	$C6
07702 1A83                        C6            .byte	$C6
07703 1A84                        C6            .byte	$C6
07704 1A85                        7E            .byte	$7E
07705 1A86                        06            .byte	6
07706 1A87                        06            .byte	6
07707 1A88                        0C            .byte	$C
07708 1A89                        78            .byte	$78
07709 1A8A                        00            .byte	0
07710 1A8B                        00            .byte	0
07711 1A8C                        00            .byte	0
07712                                           ! 1203  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A8D                        00            .byte	0
07714 1A8E                        00            .byte	0
07715 1A8F                        00            .byte	0
07716 1A90                        18            .byte	$18
07717 1A91                        18            .byte	$18
07718 1A92                        00            .byte	0
07719 1A93                        00            .byte	0
07720 1A94                        00            .byte	0
07721 1A95                        18            .byte	$18
07722 1A96                        18            .byte	$18
07723 1A97                        00            .byte	0
07724 1A98                        00            .byte	0
07725 1A99                        00            .byte	0
07726 1A9A                        00            .byte	0
07727                                           ! 1204  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1A9B                        00            .byte	0
07729 1A9C                        00            .byte	0
07730 1A9D                        00            .byte	0
07731 1A9E                        18            .byte	$18
07732 1A9F                        18            .byte	$18
07733 1AA0                        00            .byte	0
07734 1AA1                        00            .byte	0
07735 1AA2                        00            .byte	0
07736 1AA3                        18            .byte	$18
07737 1AA4                        18            .byte	$18
07738 1AA5                        30            .byte	$30
07739 1AA6                        00            .byte	0
07740 1AA7                        00            .byte	0
07741 1AA8                        00            .byte	0
07742                                           ! 1205  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AA9                        00            .byte	0
07744 1AAA                        00            .byte	0
07745 1AAB                        06            .byte	6
07746 1AAC                        0C            .byte	$C
07747 1AAD                        18            .byte	$18
07748 1AAE                        30            .byte	$30
07749 1AAF                        60            .byte	$60
07750 1AB0                        30            .byte	$30
07751 1AB1                        18            .byte	$18
07752 1AB2                        0C            .byte	$C
07753 1AB3                        06            .byte	6
07754 1AB4                        00            .byte	0
07755 1AB5                        00            .byte	0
07756 1AB6                        00            .byte	0
07757                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1AB7                        00            .byte	0
07759 1AB8                        00            .byte	0
07760 1AB9                        00            .byte	0
07761 1ABA                        00            .byte	0
07762 1ABB                        00            .byte	0
07763 1ABC                        7E            .byte	$7E
07764 1ABD                        00            .byte	0
07765 1ABE                        00            .byte	0
07766 1ABF                        7E            .byte	$7E
07767 1AC0                        00            .byte	0
07768 1AC1                        00            .byte	0
07769 1AC2                        00            .byte	0
07770 1AC3                        00            .byte	0
07771 1AC4                        00            .byte	0
07772                                           ! 1207  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1AC5                        00            .byte	0
07774 1AC6                        00            .byte	0
07775 1AC7                        60            .byte	$60
07776 1AC8                        30            .byte	$30
07777 1AC9                        18            .byte	$18
07778 1ACA                        0C            .byte	$C
07779 1ACB                        06            .byte	6
07780 1ACC                        0C            .byte	$C
07781 1ACD                        18            .byte	$18
07782 1ACE                        30            .byte	$30
07783 1ACF                        60            .byte	$60
07784 1AD0                        00            .byte	0
07785 1AD1                        00            .byte	0
07786 1AD2                        00            .byte	0
07787                                           ! 1208  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1AD3                        00            .byte	0
07789 1AD4                        00            .byte	0
07790 1AD5                        7C            .byte	$7C
07791 1AD6                        C6            .byte	$C6
07792 1AD7                        C6            .byte	$C6
07793 1AD8                        0C            .byte	$C
07794 1AD9                        18            .byte	$18
07795 1ADA                        18            .byte	$18
07796 1ADB                        00            .byte	0
07797 1ADC                        18            .byte	$18
07798 1ADD                        18            .byte	$18
07799 1ADE                        00            .byte	0
07800 1ADF                        00            .byte	0
07801 1AE0                        00            .byte	0
07802                                           ! 1209  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1AE1                        00            .byte	0
07804 1AE2                        00            .byte	0
07805 1AE3                        7C            .byte	$7C
07806 1AE4                        C6            .byte	$C6
07807 1AE5                        C6            .byte	$C6
07808 1AE6                        DE            .byte	$DE
07809 1AE7                        DE            .byte	$DE
07810 1AE8                        DE            .byte	$DE
07811 1AE9                        DC            .byte	$DC
07812 1AEA                        C0            .byte	$C0
07813 1AEB                        7C            .byte	$7C
07814 1AEC                        00            .byte	0
07815 1AED                        00            .byte	0
07816 1AEE                        00            .byte	0
07817                                           ! 1210  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AEF                        00            .byte	0
07819 1AF0                        00            .byte	0
07820 1AF1                        10            .byte	$10
07821 1AF2                        38            .byte	$38
07822 1AF3                        6C            .byte	$6C
07823 1AF4                        C6            .byte	$C6
07824 1AF5                        C6            .byte	$C6
07825 1AF6                        FE            .byte	$FE
07826 1AF7                        C6            .byte	$C6
07827 1AF8                        C6            .byte	$C6
07828 1AF9                        C6            .byte	$C6
07829 1AFA                        00            .byte	0
07830 1AFB                        00            .byte	0
07831 1AFC                        00            .byte	0
07832                                           ! 1211  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1AFD                        00            .byte	0
07834 1AFE                        00            .byte	0
07835 1AFF                        FC            .byte	$FC
07836 1B00                        66            .byte	$66
07837 1B01                        66            .byte	$66
07838 1B02                        66            .byte	$66
07839 1B03                        7C            .byte	$7C
07840 1B04                        66            .byte	$66
07841 1B05                        66            .byte	$66
07842 1B06                        66            .byte	$66
07843 1B07                        FC            .byte	$FC
07844 1B08                        00            .byte	0
07845 1B09                        00            .byte	0
07846 1B0A                        00            .byte	0
07847                                           ! 1212  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B0B                        00            .byte	0
07849 1B0C                        00            .byte	0
07850 1B0D                        3C            .byte	$3C
07851 1B0E                        66            .byte	$66
07852 1B0F                        C2            .byte	$C2
07853 1B10                        C0            .byte	$C0
07854 1B11                        C0            .byte	$C0
07855 1B12                        C0            .byte	$C0
07856 1B13                        C2            .byte	$C2
07857 1B14                        66            .byte	$66
07858 1B15                        3C            .byte	$3C
07859 1B16                        00            .byte	0
07860 1B17                        00            .byte	0
07861 1B18                        00            .byte	0
07862                                           ! 1213  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B19                        00            .byte	0
07864 1B1A                        00            .byte	0
07865 1B1B                        F8            .byte	$F8
07866 1B1C                        6C            .byte	$6C
07867 1B1D                        66            .byte	$66
07868 1B1E                        66            .byte	$66
07869 1B1F                        66            .byte	$66
07870 1B20                        66            .byte	$66
07871 1B21                        66            .byte	$66
07872 1B22                        6C            .byte	$6C
07873 1B23                        F8            .byte	$F8
07874 1B24                        00            .byte	0
07875 1B25                        00            .byte	0
07876 1B26                        00            .byte	0
07877                                           ! 1214  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B27                        00            .byte	0
07879 1B28                        00            .byte	0
07880 1B29                        FE            .byte	$FE
07881 1B2A                        66            .byte	$66
07882 1B2B                        62            .byte	$62
07883 1B2C                        68            .byte	$68
07884 1B2D                        78            .byte	$78
07885 1B2E                        68            .byte	$68
07886 1B2F                        62            .byte	$62
07887 1B30                        66            .byte	$66
07888 1B31                        FE            .byte	$FE
07889 1B32                        00            .byte	0
07890 1B33                        00            .byte	0
07891 1B34                        00            .byte	0
07892                                           ! 1215  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B35                        00            .byte	0
07894 1B36                        00            .byte	0
07895 1B37                        FE            .byte	$FE
07896 1B38                        66            .byte	$66
07897 1B39                        62            .byte	$62
07898 1B3A                        68            .byte	$68
07899 1B3B                        78            .byte	$78
07900 1B3C                        68            .byte	$68
07901 1B3D                        60            .byte	$60
07902 1B3E                        60            .byte	$60
07903 1B3F                        F0            .byte	$F0
07904 1B40                        00            .byte	0
07905 1B41                        00            .byte	0
07906 1B42                        00            .byte	0
07907                                           ! 1216  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B43                        00            .byte	0
07909 1B44                        00            .byte	0
07910 1B45                        3C            .byte	$3C
07911 1B46                        66            .byte	$66
07912 1B47                        C2            .byte	$C2
07913 1B48                        C0            .byte	$C0
07914 1B49                        C0            .byte	$C0
07915 1B4A                        DE            .byte	$DE
07916 1B4B                        C6            .byte	$C6
07917 1B4C                        66            .byte	$66
07918 1B4D                        3A            .byte	$3A
07919 1B4E                        00            .byte	0
07920 1B4F                        00            .byte	0
07921 1B50                        00            .byte	0
07922                                           ! 1217  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B51                        00            .byte	0
07924 1B52                        00            .byte	0
07925 1B53                        C6            .byte	$C6
07926 1B54                        C6            .byte	$C6
07927 1B55                        C6            .byte	$C6
07928 1B56                        C6            .byte	$C6
07929 1B57                        FE            .byte	$FE
07930 1B58                        C6            .byte	$C6
07931 1B59                        C6            .byte	$C6
07932 1B5A                        C6            .byte	$C6
07933 1B5B                        C6            .byte	$C6
07934 1B5C                        00            .byte	0
07935 1B5D                        00            .byte	0
07936 1B5E                        00            .byte	0
07937                                           ! 1218  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B5F                        00            .byte	0
07939 1B60                        00            .byte	0
07940 1B61                        3C            .byte	$3C
07941 1B62                        18            .byte	$18
07942 1B63                        18            .byte	$18
07943 1B64                        18            .byte	$18
07944 1B65                        18            .byte	$18
07945 1B66                        18            .byte	$18
07946 1B67                        18            .byte	$18
07947 1B68                        18            .byte	$18
07948 1B69                        3C            .byte	$3C
07949 1B6A                        00            .byte	0
07950 1B6B                        00            .byte	0
07951 1B6C                        00            .byte	0
07952                                           ! 1219  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B6D                        00            .byte	0
07954 1B6E                        00            .byte	0
07955 1B6F                        1E            .byte	$1E
07956 1B70                        0C            .byte	$C
07957 1B71                        0C            .byte	$C
07958 1B72                        0C            .byte	$C
07959 1B73                        0C            .byte	$C
07960 1B74                        0C            .byte	$C
07961 1B75                        CC            .byte	$CC
07962 1B76                        CC            .byte	$CC
07963 1B77                        78            .byte	$78
07964 1B78                        00            .byte	0
07965 1B79                        00            .byte	0
07966 1B7A                        00            .byte	0
07967                                           ! 1220  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B7B                        00            .byte	0
07969 1B7C                        00            .byte	0
07970 1B7D                        E6            .byte	$E6
07971 1B7E                        66            .byte	$66
07972 1B7F                        6C            .byte	$6C
07973 1B80                        6C            .byte	$6C
07974 1B81                        78            .byte	$78
07975 1B82                        6C            .byte	$6C
07976 1B83                        6C            .byte	$6C
07977 1B84                        66            .byte	$66
07978 1B85                        E6            .byte	$E6
07979 1B86                        00            .byte	0
07980 1B87                        00            .byte	0
07981 1B88                        00            .byte	0
07982                                           ! 1221  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07983 1B89                        00            .byte	0
07984 1B8A                        00            .byte	0
07985 1B8B                        F0            .byte	$F0
07986 1B8C                        60            .byte	$60
07987 1B8D                        60            .byte	$60
07988 1B8E                        60            .byte	$60
07989 1B8F                        60            .byte	$60
07990 1B90                        60            .byte	$60
07991 1B91                        62            .byte	$62
07992 1B92                        66            .byte	$66
07993 1B93                        FE            .byte	$FE
07994 1B94                        00            .byte	0
07995 1B95                        00            .byte	0
07996 1B96                        00            .byte	0
07997                                           ! 1222  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07998 1B97                        00            .byte	0
07999 1B98                        00            .byte	0
08000 1B99                        C6            .byte	$C6
08001 1B9A                        EE            .byte	$EE
08002 1B9B                        FE            .byte	$FE
08003 1B9C                        FE            .byte	$FE
08004 1B9D                        D6            .byte	$D6
08005 1B9E                        C6            .byte	$C6
08006 1B9F                        C6            .byte	$C6
08007 1BA0                        C6            .byte	$C6
08008 1BA1                        C6            .byte	$C6
08009 1BA2                        00            .byte	0
08010 1BA3                        00            .byte	0
08011 1BA4                        00            .byte	0
08012                                           ! 1223  0x00, 
08013 1BA5                        00            .byte	0
08014                                           ! 1223 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08015 1BA6                        00            .byte	0
08016 1BA7                        C6            .byte	$C6
08017 1BA8                        E6            .byte	$E6
08018 1BA9                        F6            .byte	$F6
08019 1BAA                        FE            .byte	$FE
08020 1BAB                        DE            .byte	$DE
08021 1BAC                        CE            .byte	$CE
08022 1BAD                        C6            .byte	$C6
08023 1BAE                        C6            .byte	$C6
08024 1BAF                        C6            .byte	$C6
08025 1BB0                        00            .byte	0
08026 1BB1                        00            .byte	0
08027 1BB2                        00            .byte	0
08028                                           ! 1224  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BB3                        00            .byte	0
08030 1BB4                        00            .byte	0
08031 1BB5                        38            .byte	$38
08032 1BB6                        6C            .byte	$6C
08033 1BB7                        C6            .byte	$C6
08034 1BB8                        C6            .byte	$C6
08035 1BB9                        C6            .byte	$C6
08036 1BBA                        C6            .byte	$C6
08037 1BBB                        C6            .byte	$C6
08038 1BBC                        6C            .byte	$6C
08039 1BBD                        38            .byte	$38
08040 1BBE                        00            .byte	0
08041 1BBF                        00            .byte	0
08042 1BC0                        00            .byte	0
08043                                           ! 1225  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BC1                        00            .byte	0
08045 1BC2                        00            .byte	0
08046 1BC3                        FC            .byte	$FC
08047 1BC4                        66            .byte	$66
08048 1BC5                        66            .byte	$66
08049 1BC6                        66            .byte	$66
08050 1BC7                        7C            .byte	$7C
08051 1BC8                        60            .byte	$60
08052 1BC9                        60            .byte	$60
08053 1BCA                        60            .byte	$60
08054 1BCB                        F0            .byte	$F0
08055 1BCC                        00            .byte	0
08056 1BCD                        00            .byte	0
08057 1BCE                        00            .byte	0
08058                                           ! 1226  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BCF                        00            .byte	0
08060 1BD0                        00            .byte	0
08061 1BD1                        7C            .byte	$7C
08062 1BD2                        C6            .byte	$C6
08063 1BD3                        C6            .byte	$C6
08064 1BD4                        C6            .byte	$C6
08065 1BD5                        C6            .byte	$C6
08066 1BD6                        D6            .byte	$D6
08067 1BD7                        DE            .byte	$DE
08068 1BD8                        7C            .byte	$7C
08069 1BD9                        0C            .byte	$C
08070 1BDA                        0E            .byte	$E
08071 1BDB                        00            .byte	0
08072 1BDC                        00            .byte	0
08073                                           ! 1227  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BDD                        00            .byte	0
08075 1BDE                        00            .byte	0
08076 1BDF                        FC            .byte	$FC
08077 1BE0                        66            .byte	$66
08078 1BE1                        66            .byte	$66
08079 1BE2                        66            .byte	$66
08080 1BE3                        7C            .byte	$7C
08081 1BE4                        6C            .byte	$6C
08082 1BE5                        66            .byte	$66
08083 1BE6                        66            .byte	$66
08084 1BE7                        E6            .byte	$E6
08085 1BE8                        00            .byte	0
08086 1BE9                        00            .byte	0
08087 1BEA                        00            .byte	0
08088                                           ! 1228  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BEB                        00            .byte	0
08090 1BEC                        00            .byte	0
08091 1BED                        7C            .byte	$7C
08092 1BEE                        C6            .byte	$C6
08093 1BEF                        C6            .byte	$C6
08094 1BF0                        60            .byte	$60
08095 1BF1                        38            .byte	$38
08096 1BF2                        0C            .byte	$C
08097 1BF3                        C6            .byte	$C6
08098 1BF4                        C6            .byte	$C6
08099 1BF5                        7C            .byte	$7C
08100 1BF6                        00            .byte	0
08101 1BF7                        00            .byte	0
08102 1BF8                        00            .byte	0
08103                                           ! 1229  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1BF9                        00            .byte	0
08105 1BFA                        00            .byte	0
08106 1BFB                        7E            .byte	$7E
08107 1BFC                        7E            .byte	$7E
08108 1BFD                        5A            .byte	$5A
08109 1BFE                        18            .byte	$18
08110 1BFF                        18            .byte	$18
08111 1C00                        18            .byte	$18
08112 1C01                        18            .byte	$18
08113 1C02                        18            .byte	$18
08114 1C03                        3C            .byte	$3C
08115 1C04                        00            .byte	0
08116 1C05                        00            .byte	0
08117 1C06                        00            .byte	0
08118                                           ! 1230  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C07                        00            .byte	0
08120 1C08                        00            .byte	0
08121 1C09                        C6            .byte	$C6
08122 1C0A                        C6            .byte	$C6
08123 1C0B                        C6            .byte	$C6
08124 1C0C                        C6            .byte	$C6
08125 1C0D                        C6            .byte	$C6
08126 1C0E                        C6            .byte	$C6
08127 1C0F                        C6            .byte	$C6
08128 1C10                        C6            .byte	$C6
08129 1C11                        7C            .byte	$7C
08130 1C12                        00            .byte	0
08131 1C13                        00            .byte	0
08132 1C14                        00            .byte	0
08133                                           ! 1231  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C15                        00            .byte	0
08135 1C16                        00            .byte	0
08136 1C17                        C6            .byte	$C6
08137 1C18                        C6            .byte	$C6
08138 1C19                        C6            .byte	$C6
08139 1C1A                        C6            .byte	$C6
08140 1C1B                        C6            .byte	$C6
08141 1C1C                        C6            .byte	$C6
08142 1C1D                        6C            .byte	$6C
08143 1C1E                        38            .byte	$38
08144 1C1F                        10            .byte	$10
08145 1C20                        00            .byte	0
08146 1C21                        00            .byte	0
08147 1C22                        00            .byte	0
08148                                           ! 1232  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C23                        00            .byte	0
08150 1C24                        00            .byte	0
08151 1C25                        C6            .byte	$C6
08152 1C26                        C6            .byte	$C6
08153 1C27                        C6            .byte	$C6
08154 1C28                        C6            .byte	$C6
08155 1C29                        D6            .byte	$D6
08156 1C2A                        D6            .byte	$D6
08157 1C2B                        FE            .byte	$FE
08158 1C2C                        7C            .byte	$7C
08159 1C2D                        6C            .byte	$6C
08160 1C2E                        00            .byte	0
08161 1C2F                        00            .byte	0
08162 1C30                        00            .byte	0
08163                                           ! 1233  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C31                        00            .byte	0
08165 1C32                        00            .byte	0
08166 1C33                        C6            .byte	$C6
08167 1C34                        C6            .byte	$C6
08168 1C35                        6C            .byte	$6C
08169 1C36                        38            .byte	$38
08170 1C37                        38            .byte	$38
08171 1C38                        38            .byte	$38
08172 1C39                        6C            .byte	$6C
08173 1C3A                        C6            .byte	$C6
08174 1C3B                        C6            .byte	$C6
08175 1C3C                        00            .byte	0
08176 1C3D                        00            .byte	0
08177 1C3E                        00            .byte	0
08178                                           ! 1234  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C3F                        00            .byte	0
08180 1C40                        00            .byte	0
08181 1C41                        66            .byte	$66
08182 1C42                        66            .byte	$66
08183 1C43                        66            .byte	$66
08184 1C44                        66            .byte	$66
08185 1C45                        3C            .byte	$3C
08186 1C46                        18            .byte	$18
08187 1C47                        18            .byte	$18
08188 1C48                        18            .byte	$18
08189 1C49                        3C            .byte	$3C
08190 1C4A                        00            .byte	0
08191 1C4B                        00            .byte	0
08192 1C4C                        00            .byte	0
08193                                           ! 1235  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C4D                        00            .byte	0
08195 1C4E                        00            .byte	0
08196 1C4F                        FE            .byte	$FE
08197 1C50                        C6            .byte	$C6
08198 1C51                        8C            .byte	$8C
08199 1C52                        18            .byte	$18
08200 1C53                        30            .byte	$30
08201 1C54                        60            .byte	$60
08202 1C55                        C2            .byte	$C2
08203 1C56                        C6            .byte	$C6
08204 1C57                        FE            .byte	$FE
08205 1C58                        00            .byte	0
08206 1C59                        00            .byte	0
08207 1C5A                        00            .byte	0
08208                                           ! 1236  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C5B                        00            .byte	0
08210 1C5C                        00            .byte	0
08211 1C5D                        3C            .byte	$3C
08212 1C5E                        30            .byte	$30
08213 1C5F                        30            .byte	$30
08214 1C60                        30            .byte	$30
08215 1C61                        30            .byte	$30
08216 1C62                        30            .byte	$30
08217 1C63                        30            .byte	$30
08218 1C64                        30            .byte	$30
08219 1C65                        3C            .byte	$3C
08220 1C66                        00            .byte	0
08221 1C67                        00            .byte	0
08222 1C68                        00            .byte	0
08223                                           ! 1237  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C69                        00            .byte	0
08225 1C6A                        00            .byte	0
08226 1C6B                        80            .byte	$80
08227 1C6C                        C0            .byte	$C0
08228 1C6D                        E0            .byte	$E0
08229 1C6E                        70            .byte	$70
08230 1C6F                        38            .byte	$38
08231 1C70                        1C            .byte	$1C
08232 1C71                        0E            .byte	$E
08233 1C72                        06            .byte	6
08234 1C73                        02            .byte	2
08235 1C74                        00            .byte	0
08236 1C75                        00            .byte	0
08237 1C76                        00            .byte	0
08238                                           ! 1238  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C77                        00            .byte	0
08240 1C78                        00            .byte	0
08241 1C79                        3C            .byte	$3C
08242 1C7A                        0C            .byte	$C
08243 1C7B                        0C            .byte	$C
08244 1C7C                        0C            .byte	$C
08245 1C7D                        0C            .byte	$C
08246 1C7E                        0C            .byte	$C
08247 1C7F                        0C            .byte	$C
08248 1C80                        0C            .byte	$C
08249 1C81                        3C            .byte	$3C
08250 1C82                        00            .byte	0
08251 1C83                        00            .byte	0
08252 1C84                        00            .byte	0
08253                                           ! 1239  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C85                        10            .byte	$10
08255 1C86                        38            .byte	$38
08256 1C87                        6C            .byte	$6C
08257 1C88                        C6            .byte	$C6
08258 1C89                        00            .byte	0
08259 1C8A                        00            .byte	0
08260 1C8B                        00            .byte	0
08261 1C8C                        00            .byte	0
08262 1C8D                        00            .byte	0
08263 1C8E                        00            .byte	0
08264 1C8F                        00            .byte	0
08265 1C90                        00            .byte	0
08266 1C91                        00            .byte	0
08267 1C92                        00            .byte	0
08268                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C93                        00            .byte	0
08270 1C94                        00            .byte	0
08271 1C95                        00            .byte	0
08272 1C96                        00            .byte	0
08273 1C97                        00            .byte	0
08274 1C98                        00            .byte	0
08275 1C99                        00            .byte	0
08276 1C9A                        00            .byte	0
08277 1C9B                        00            .byte	0
08278 1C9C                        00            .byte	0
08279 1C9D                        00            .byte	0
08280 1C9E                        00            .byte	0
08281 1C9F                        FF            .byte	$FF
08282 1CA0                        00            .byte	0
08283                                           ! 1241  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1CA1                        30            .byte	$30
08285 1CA2                        30            .byte	$30
08286 1CA3                        18            .byte	$18
08287 1CA4                        00            .byte	0
08288 1CA5                        00            .byte	0
08289 1CA6                        00            .byte	0
08290 1CA7                        00            .byte	0
08291 1CA8                        00            .byte	0
08292 1CA9                        00            .byte	0
08293 1CAA                        00            .byte	0
08294 1CAB                        00            .byte	0
08295 1CAC                        00            .byte	0
08296 1CAD                        00            .byte	0
08297 1CAE                        00            .byte	0
08298                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CAF                        00            .byte	0
08300 1CB0                        00            .byte	0
08301 1CB1                        00            .byte	0
08302 1CB2                        00            .byte	0
08303 1CB3                        00            .byte	0
08304 1CB4                        78            .byte	$78
08305 1CB5                        0C            .byte	$C
08306 1CB6                        7C            .byte	$7C
08307 1CB7                        CC            .byte	$CC
08308 1CB8                        CC            .byte	$CC
08309 1CB9                        76            .byte	$76
08310 1CBA                        00            .byte	0
08311 1CBB                        00            .byte	0
08312 1CBC                        00            .byte	0
08313                                           ! 1243  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CBD                        00            .byte	0
08315 1CBE                        00            .byte	0
08316 1CBF                        E0            .byte	$E0
08317 1CC0                        60            .byte	$60
08318 1CC1                        60            .byte	$60
08319 1CC2                        78            .byte	$78
08320 1CC3                        6C            .byte	$6C
08321 1CC4                        66            .byte	$66
08322 1CC5                        66            .byte	$66
08323 1CC6                        66            .byte	$66
08324 1CC7                        7C            .byte	$7C
08325 1CC8                        00            .byte	0
08326 1CC9                        00            .byte	0
08327 1CCA                        00            .byte	0
08328                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CCB                        00            .byte	0
08330 1CCC                        00            .byte	0
08331 1CCD                        00            .byte	0
08332 1CCE                        00            .byte	0
08333 1CCF                        00            .byte	0
08334 1CD0                        7C            .byte	$7C
08335 1CD1                        C6            .byte	$C6
08336 1CD2                        C0            .byte	$C0
08337 1CD3                        C0            .byte	$C0
08338 1CD4                        C6            .byte	$C6
08339 1CD5                        7C            .byte	$7C
08340 1CD6                        00            .byte	0
08341 1CD7                        00            .byte	0
08342 1CD8                        00            .byte	0
08343                                           ! 1245  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CD9                        00            .byte	0
08345 1CDA                        00            .byte	0
08346 1CDB                        1C            .byte	$1C
08347 1CDC                        0C            .byte	$C
08348 1CDD                        0C            .byte	$C
08349 1CDE                        3C            .byte	$3C
08350 1CDF                        6C            .byte	$6C
08351 1CE0                        CC            .byte	$CC
08352 1CE1                        CC            .byte	$CC
08353 1CE2                        CC            .byte	$CC
08354 1CE3                        76            .byte	$76
08355 1CE4                        00            .byte	0
08356 1CE5                        00            .byte	0
08357 1CE6                        00            .byte	0
08358                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08359 1CE7                        00            .byte	0
08360 1CE8                        00            .byte	0
08361 1CE9                        00            .byte	0
08362 1CEA                        00            .byte	0
08363 1CEB                        00            .byte	0
08364 1CEC                        7C            .byte	$7C
08365 1CED                        C6            .byte	$C6
08366 1CEE                        FE            .byte	$FE
08367 1CEF                        C0            .byte	$C0
08368 1CF0                        C6            .byte	$C6
08369 1CF1                        7C            .byte	$7C
08370 1CF2                        00            .byte	0
08371 1CF3                        00            .byte	0
08372 1CF4                        00            .byte	0
08373                                           ! 1247  0x00, 0x00, 0x
08374 1CF5                        00            .byte	0
08375 1CF6                        00            .byte	0
08376                                           ! 1247 38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08377 1CF7                        38            .byte	$38
08378 1CF8                        6C            .byte	$6C
08379 1CF9                        64            .byte	$64
08380 1CFA                        60            .byte	$60
08381 1CFB                        F0            .byte	$F0
08382 1CFC                        60            .byte	$60
08383 1CFD                        60            .byte	$60
08384 1CFE                        60            .byte	$60
08385 1CFF                        F0            .byte	$F0
08386 1D00                        00            .byte	0
08387 1D01                        00            .byte	0
08388 1D02                        00            .byte	0
08389                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1D03                        00            .byte	0
08391 1D04                        00            .byte	0
08392 1D05                        00            .byte	0
08393 1D06                        00            .byte	0
08394 1D07                        00            .byte	0
08395 1D08                        76            .byte	$76
08396 1D09                        CC            .byte	$CC
08397 1D0A                        CC            .byte	$CC
08398 1D0B                        CC            .byte	$CC
08399 1D0C                        7C            .byte	$7C
08400 1D0D                        0C            .byte	$C
08401 1D0E                        CC            .byte	$CC
08402 1D0F                        78            .byte	$78
08403 1D10                        00            .byte	0
08404                                           ! 1249  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D11                        00            .byte	0
08406 1D12                        00            .byte	0
08407 1D13                        E0            .byte	$E0
08408 1D14                        60            .byte	$60
08409 1D15                        60            .byte	$60
08410 1D16                        6C            .byte	$6C
08411 1D17                        76            .byte	$76
08412 1D18                        66            .byte	$66
08413 1D19                        66            .byte	$66
08414 1D1A                        66            .byte	$66
08415 1D1B                        E6            .byte	$E6
08416 1D1C                        00            .byte	0
08417 1D1D                        00            .byte	0
08418 1D1E                        00            .byte	0
08419                                           ! 1250  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D1F                        00            .byte	0
08421 1D20                        00            .byte	0
08422 1D21                        18            .byte	$18
08423 1D22                        18            .byte	$18
08424 1D23                        00            .byte	0
08425 1D24                        38            .byte	$38
08426 1D25                        18            .byte	$18
08427 1D26                        18            .byte	$18
08428 1D27                        18            .byte	$18
08429 1D28                        18            .byte	$18
08430 1D29                        3C            .byte	$3C
08431 1D2A                        00            .byte	0
08432 1D2B                        00            .byte	0
08433 1D2C                        00            .byte	0
08434                                           ! 1251  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D2D                        00            .byte	0
08436 1D2E                        00            .byte	0
08437 1D2F                        06            .byte	6
08438 1D30                        06            .byte	6
08439 1D31                        00            .byte	0
08440 1D32                        0E            .byte	$E
08441 1D33                        06            .byte	6
08442 1D34                        06            .byte	6
08443 1D35                        06            .byte	6
08444 1D36                        06            .byte	6
08445 1D37                        66            .byte	$66
08446 1D38                        66            .byte	$66
08447 1D39                        3C            .byte	$3C
08448 1D3A                        00            .byte	0
08449                                           ! 1252  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D3B                        00            .byte	0
08451 1D3C                        00            .byte	0
08452 1D3D                        E0            .byte	$E0
08453 1D3E                        60            .byte	$60
08454 1D3F                        60            .byte	$60
08455 1D40                        66            .byte	$66
08456 1D41                        6C            .byte	$6C
08457 1D42                        78            .byte	$78
08458 1D43                        6C            .byte	$6C
08459 1D44                        66            .byte	$66
08460 1D45                        E6            .byte	$E6
08461 1D46                        00            .byte	0
08462 1D47                        00            .byte	0
08463 1D48                        00            .byte	0
08464                                           ! 1253  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D49                        00            .byte	0
08466 1D4A                        00            .byte	0
08467 1D4B                        38            .byte	$38
08468 1D4C                        18            .byte	$18
08469 1D4D                        18            .byte	$18
08470 1D4E                        18            .byte	$18
08471 1D4F                        18            .byte	$18
08472 1D50                        18            .byte	$18
08473 1D51                        18            .byte	$18
08474 1D52                        18            .byte	$18
08475 1D53                        3C            .byte	$3C
08476 1D54                        00            .byte	0
08477 1D55                        00            .byte	0
08478 1D56                        00            .byte	0
08479                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D57                        00            .byte	0
08481 1D58                        00            .byte	0
08482 1D59                        00            .byte	0
08483 1D5A                        00            .byte	0
08484 1D5B                        00            .byte	0
08485 1D5C                        EC            .byte	$EC
08486 1D5D                        FE            .byte	$FE
08487 1D5E                        D6            .byte	$D6
08488 1D5F                        D6            .byte	$D6
08489 1D60                        D6            .byte	$D6
08490 1D61                        C6            .byte	$C6
08491 1D62                        00            .byte	0
08492 1D63                        00            .byte	0
08493 1D64                        00            .byte	0
08494                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D65                        00            .byte	0
08496 1D66                        00            .byte	0
08497 1D67                        00            .byte	0
08498 1D68                        00            .byte	0
08499 1D69                        00            .byte	0
08500 1D6A                        DC            .byte	$DC
08501 1D6B                        66            .byte	$66
08502 1D6C                        66            .byte	$66
08503 1D6D                        66            .byte	$66
08504 1D6E                        66            .byte	$66
08505 1D6F                        66            .byte	$66
08506 1D70                        00            .byte	0
08507 1D71                        00            .byte	0
08508 1D72                        00            .byte	0
08509                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D73                        00            .byte	0
08511 1D74                        00            .byte	0
08512 1D75                        00            .byte	0
08513 1D76                        00            .byte	0
08514 1D77                        00            .byte	0
08515 1D78                        7C            .byte	$7C
08516 1D79                        C6            .byte	$C6
08517 1D7A                        C6            .byte	$C6
08518 1D7B                        C6            .byte	$C6
08519 1D7C                        C6            .byte	$C6
08520 1D7D                        7C            .byte	$7C
08521 1D7E                        00            .byte	0
08522 1D7F                        00            .byte	0
08523 1D80                        00            .byte	0
08524                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D81                        00            .byte	0
08526 1D82                        00            .byte	0
08527 1D83                        00            .byte	0
08528 1D84                        00            .byte	0
08529 1D85                        00            .byte	0
08530 1D86                        DC            .byte	$DC
08531 1D87                        66            .byte	$66
08532 1D88                        66            .byte	$66
08533 1D89                        66            .byte	$66
08534 1D8A                        7C            .byte	$7C
08535 1D8B                        60            .byte	$60
08536 1D8C                        60            .byte	$60
08537 1D8D                        F0            .byte	$F0
08538 1D8E                        00            .byte	0
08539                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D8F                        00            .byte	0
08541 1D90                        00            .byte	0
08542 1D91                        00            .byte	0
08543 1D92                        00            .byte	0
08544 1D93                        00            .byte	0
08545 1D94                        76            .byte	$76
08546 1D95                        CC            .byte	$CC
08547 1D96                        CC            .byte	$CC
08548 1D97                        CC            .byte	$CC
08549 1D98                        7C            .byte	$7C
08550 1D99                        0C            .byte	$C
08551 1D9A                        0C            .byte	$C
08552 1D9B                        1E            .byte	$1E
08553 1D9C                        00            .byte	0
08554                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1D9D                        00            .byte	0
08556 1D9E                        00            .byte	0
08557 1D9F                        00            .byte	0
08558 1DA0                        00            .byte	0
08559 1DA1                        00            .byte	0
08560 1DA2                        DC            .byte	$DC
08561 1DA3                        76            .byte	$76
08562 1DA4                        66            .byte	$66
08563 1DA5                        60            .byte	$60
08564 1DA6                        60            .byte	$60
08565 1DA7                        F0            .byte	$F0
08566 1DA8                        00            .byte	0
08567 1DA9                        00            .byte	0
08568 1DAA                        00            .byte	0
08569                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DAB                        00            .byte	0
08571 1DAC                        00            .byte	0
08572 1DAD                        00            .byte	0
08573 1DAE                        00            .byte	0
08574 1DAF                        00            .byte	0
08575 1DB0                        7C            .byte	$7C
08576 1DB1                        C6            .byte	$C6
08577 1DB2                        70            .byte	$70
08578 1DB3                        1C            .byte	$1C
08579 1DB4                        C6            .byte	$C6
08580 1DB5                        7C            .byte	$7C
08581 1DB6                        00            .byte	0
08582 1DB7                        00            .byte	0
08583 1DB8                        00            .byte	0
08584                                           ! 1261  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DB9                        00            .byte	0
08586 1DBA                        00            .byte	0
08587 1DBB                        10            .byte	$10
08588 1DBC                        30            .byte	$30
08589 1DBD                        30            .byte	$30
08590 1DBE                        FC            .byte	$FC
08591 1DBF                        30            .byte	$30
08592 1DC0                        30            .byte	$30
08593 1DC1                        30            .byte	$30
08594 1DC2                        36            .byte	$36
08595 1DC3                        1C            .byte	$1C
08596 1DC4                        00            .byte	0
08597 1DC5                        00            .byte	0
08598 1DC6                        00            .byte	0
08599                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DC7                        00            .byte	0
08601 1DC8                        00            .byte	0
08602 1DC9                        00            .byte	0
08603 1DCA                        00            .byte	0
08604 1DCB                        00            .byte	0
08605 1DCC                        CC            .byte	$CC
08606 1DCD                        CC            .byte	$CC
08607 1DCE                        CC            .byte	$CC
08608 1DCF                        CC            .byte	$CC
08609 1DD0                        CC            .byte	$CC
08610 1DD1                        76            .byte	$76
08611 1DD2                        00            .byte	0
08612 1DD3                        00            .byte	0
08613 1DD4                        00            .byte	0
08614                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DD5                        00            .byte	0
08616 1DD6                        00            .byte	0
08617 1DD7                        00            .byte	0
08618 1DD8                        00            .byte	0
08619 1DD9                        00            .byte	0
08620 1DDA                        66            .byte	$66
08621 1DDB                        66            .byte	$66
08622 1DDC                        66            .byte	$66
08623 1DDD                        66            .byte	$66
08624 1DDE                        3C            .byte	$3C
08625 1DDF                        18            .byte	$18
08626 1DE0                        00            .byte	0
08627 1DE1                        00            .byte	0
08628 1DE2                        00            .byte	0
08629                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DE3                        00            .byte	0
08631 1DE4                        00            .byte	0
08632 1DE5                        00            .byte	0
08633 1DE6                        00            .byte	0
08634 1DE7                        00            .byte	0
08635 1DE8                        C6            .byte	$C6
08636 1DE9                        C6            .byte	$C6
08637 1DEA                        D6            .byte	$D6
08638 1DEB                        D6            .byte	$D6
08639 1DEC                        FE            .byte	$FE
08640 1DED                        6C            .byte	$6C
08641 1DEE                        00            .byte	0
08642 1DEF                        00            .byte	0
08643 1DF0                        00            .byte	0
08644                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DF1                        00            .byte	0
08646 1DF2                        00            .byte	0
08647 1DF3                        00            .byte	0
08648 1DF4                        00            .byte	0
08649 1DF5                        00            .byte	0
08650 1DF6                        C6            .byte	$C6
08651 1DF7                        6C            .byte	$6C
08652 1DF8                        38            .byte	$38
08653 1DF9                        38            .byte	$38
08654 1DFA                        6C            .byte	$6C
08655 1DFB                        C6            .byte	$C6
08656 1DFC                        00            .byte	0
08657 1DFD                        00            .byte	0
08658 1DFE                        00            .byte	0
08659                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1DFF                        00            .byte	0
08661 1E00                        00            .byte	0
08662 1E01                        00            .byte	0
08663 1E02                        00            .byte	0
08664 1E03                        00            .byte	0
08665 1E04                        C6            .byte	$C6
08666 1E05                        C6            .byte	$C6
08667 1E06                        C6            .byte	$C6
08668 1E07                        C6            .byte	$C6
08669 1E08                        7E            .byte	$7E
08670 1E09                        06            .byte	6
08671 1E0A                        0C            .byte	$C
08672 1E0B                        F8            .byte	$F8
08673 1E0C                        00            .byte	0
08674                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E0D                        00            .byte	0
08676 1E0E                        00            .byte	0
08677 1E0F                        00            .byte	0
08678 1E10                        00            .byte	0
08679 1E11                        00            .byte	0
08680 1E12                        FE            .byte	$FE
08681 1E13                        CC            .byte	$CC
08682 1E14                        18            .byte	$18
08683 1E15                        30            .byte	$30
08684 1E16                        66            .byte	$66
08685 1E17                        FE            .byte	$FE
08686 1E18                        00            .byte	0
08687 1E19                        00            .byte	0
08688 1E1A                        00            .byte	0
08689                                           ! 1268  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E1B                        00            .byte	0
08691 1E1C                        00            .byte	0
08692 1E1D                        0E            .byte	$E
08693 1E1E                        18            .byte	$18
08694 1E1F                        18            .byte	$18
08695 1E20                        18            .byte	$18
08696 1E21                        70            .byte	$70
08697 1E22                        18            .byte	$18
08698 1E23                        18            .byte	$18
08699 1E24                        18            .byte	$18
08700 1E25                        0E            .byte	$E
08701 1E26                        00            .byte	0
08702 1E27                        00            .byte	0
08703 1E28                        00            .byte	0
08704                                           ! 1269  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E29                        00            .byte	0
08706 1E2A                        00            .byte	0
08707 1E2B                        18            .byte	$18
08708 1E2C                        18            .byte	$18
08709 1E2D                        18            .byte	$18
08710 1E2E                        18            .byte	$18
08711 1E2F                        00            .byte	0
08712 1E30                        18            .byte	$18
08713 1E31                        18            .byte	$18
08714 1E32                        18            .byte	$18
08715 1E33                        18            .byte	$18
08716 1E34                        00            .byte	0
08717 1E35                        00            .byte	0
08718 1E36                        00            .byte	0
08719                                           ! 1270  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08720 1E37                        00            .byte	0
08721 1E38                        00            .byte	0
08722 1E39                        70            .byte	$70
08723 1E3A                        18            .byte	$18
08724 1E3B                        18            .byte	$18
08725 1E3C                        18            .byte	$18
08726 1E3D                        0E            .byte	$E
08727 1E3E                        18            .byte	$18
08728 1E3F                        18            .byte	$18
08729 1E40                        18            .byte	$18
08730 1E41                        70            .byte	$70
08731 1E42                        00            .byte	0
08732 1E43                        00            .byte	0
08733 1E44                        00            .byte	0
08734                                           ! 1271  0x00, 0x00, 0x76, 0xdc
08735 1E45                        00            .byte	0
08736 1E46                        00            .byte	0
08737 1E47                        76            .byte	$76
08738                                           ! 1271 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08739 1E48                        DC            .byte	$DC
08740 1E49                        00            .byte	0
08741 1E4A                        00            .byte	0
08742 1E4B                        00            .byte	0
08743 1E4C                        00            .byte	0
08744 1E4D                        00            .byte	0
08745 1E4E                        00            .byte	0
08746 1E4F                        00            .byte	0
08747 1E50                        00            .byte	0
08748 1E51                        00            .byte	0
08749 1E52                        00            .byte	0
08750                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E53                        00            .byte	0
08752 1E54                        00            .byte	0
08753 1E55                        00            .byte	0
08754 1E56                        00            .byte	0
08755 1E57                        10            .byte	$10
08756 1E58                        38            .byte	$38
08757 1E59                        6C            .byte	$6C
08758 1E5A                        C6            .byte	$C6
08759 1E5B                        C6            .byte	$C6
08760 1E5C                        FE            .byte	$FE
08761 1E5D                        00            .byte	0
08762 1E5E                        00            .byte	0
08763 1E5F                        00            .byte	0
08764 1E60                        00            .byte	0
08765                                           ! 1273  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E61                        00            .byte	0
08767 1E62                        00            .byte	0
08768 1E63                        3C            .byte	$3C
08769 1E64                        66            .byte	$66
08770 1E65                        C2            .byte	$C2
08771 1E66                        C0            .byte	$C0
08772 1E67                        C0            .byte	$C0
08773 1E68                        C2            .byte	$C2
08774 1E69                        66            .byte	$66
08775 1E6A                        3C            .byte	$3C
08776 1E6B                        0C            .byte	$C
08777 1E6C                        06            .byte	6
08778 1E6D                        7C            .byte	$7C
08779 1E6E                        00            .byte	0
08780                                           ! 1274  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E6F                        00            .byte	0
08782 1E70                        00            .byte	0
08783 1E71                        CC            .byte	$CC
08784 1E72                        CC            .byte	$CC
08785 1E73                        00            .byte	0
08786 1E74                        CC            .byte	$CC
08787 1E75                        CC            .byte	$CC
08788 1E76                        CC            .byte	$CC
08789 1E77                        CC            .byte	$CC
08790 1E78                        CC            .byte	$CC
08791 1E79                        76            .byte	$76
08792 1E7A                        00            .byte	0
08793 1E7B                        00            .byte	0
08794 1E7C                        00            .byte	0
08795                                           ! 1275  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E7D                        00            .byte	0
08797 1E7E                        0C            .byte	$C
08798 1E7F                        18            .byte	$18
08799 1E80                        30            .byte	$30
08800 1E81                        00            .byte	0
08801 1E82                        7C            .byte	$7C
08802 1E83                        C6            .byte	$C6
08803 1E84                        FE            .byte	$FE
08804 1E85                        C0            .byte	$C0
08805 1E86                        C6            .byte	$C6
08806 1E87                        7C            .byte	$7C
08807 1E88                        00            .byte	0
08808 1E89                        00            .byte	0
08809 1E8A                        00            .byte	0
08810                                           ! 1276  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E8B                        00            .byte	0
08812 1E8C                        10            .byte	$10
08813 1E8D                        38            .byte	$38
08814 1E8E                        6C            .byte	$6C
08815 1E8F                        00            .byte	0
08816 1E90                        78            .byte	$78
08817 1E91                        0C            .byte	$C
08818 1E92                        7C            .byte	$7C
08819 1E93                        CC            .byte	$CC
08820 1E94                        CC            .byte	$CC
08821 1E95                        76            .byte	$76
08822 1E96                        00            .byte	0
08823 1E97                        00            .byte	0
08824 1E98                        00            .byte	0
08825                                           ! 1277  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1E99                        00            .byte	0
08827 1E9A                        00            .byte	0
08828 1E9B                        CC            .byte	$CC
08829 1E9C                        CC            .byte	$CC
08830 1E9D                        00            .byte	0
08831 1E9E                        78            .byte	$78
08832 1E9F                        0C            .byte	$C
08833 1EA0                        7C            .byte	$7C
08834 1EA1                        CC            .byte	$CC
08835 1EA2                        CC            .byte	$CC
08836 1EA3                        76            .byte	$76
08837 1EA4                        00            .byte	0
08838 1EA5                        00            .byte	0
08839 1EA6                        00            .byte	0
08840                                           ! 1278  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EA7                        00            .byte	0
08842 1EA8                        60            .byte	$60
08843 1EA9                        30            .byte	$30
08844 1EAA                        18            .byte	$18
08845 1EAB                        00            .byte	0
08846 1EAC                        78            .byte	$78
08847 1EAD                        0C            .byte	$C
08848 1EAE                        7C            .byte	$7C
08849 1EAF                        CC            .byte	$CC
08850 1EB0                        CC            .byte	$CC
08851 1EB1                        76            .byte	$76
08852 1EB2                        00            .byte	0
08853 1EB3                        00            .byte	0
08854 1EB4                        00            .byte	0
08855                                           ! 1279  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EB5                        00            .byte	0
08857 1EB6                        38            .byte	$38
08858 1EB7                        6C            .byte	$6C
08859 1EB8                        38            .byte	$38
08860 1EB9                        00            .byte	0
08861 1EBA                        78            .byte	$78
08862 1EBB                        0C            .byte	$C
08863 1EBC                        7C            .byte	$7C
08864 1EBD                        CC            .byte	$CC
08865 1EBE                        CC            .byte	$CC
08866 1EBF                        76            .byte	$76
08867 1EC0                        00            .byte	0
08868 1EC1                        00            .byte	0
08869 1EC2                        00            .byte	0
08870                                           ! 1280  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1EC3                        00            .byte	0
08872 1EC4                        00            .byte	0
08873 1EC5                        00            .byte	0
08874 1EC6                        00            .byte	0
08875 1EC7                        3C            .byte	$3C
08876 1EC8                        66            .byte	$66
08877 1EC9                        60            .byte	$60
08878 1ECA                        66            .byte	$66
08879 1ECB                        3C            .byte	$3C
08880 1ECC                        0C            .byte	$C
08881 1ECD                        06            .byte	6
08882 1ECE                        3C            .byte	$3C
08883 1ECF                        00            .byte	0
08884 1ED0                        00            .byte	0
08885                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ED1                        00            .byte	0
08887 1ED2                        10            .byte	$10
08888 1ED3                        38            .byte	$38
08889 1ED4                        6C            .byte	$6C
08890 1ED5                        00            .byte	0
08891 1ED6                        7C            .byte	$7C
08892 1ED7                        C6            .byte	$C6
08893 1ED8                        FE            .byte	$FE
08894 1ED9                        C0            .byte	$C0
08895 1EDA                        C6            .byte	$C6
08896 1EDB                        7C            .byte	$7C
08897 1EDC                        00            .byte	0
08898 1EDD                        00            .byte	0
08899 1EDE                        00            .byte	0
08900                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EDF                        00            .byte	0
08902 1EE0                        00            .byte	0
08903 1EE1                        CC            .byte	$CC
08904 1EE2                        CC            .byte	$CC
08905 1EE3                        00            .byte	0
08906 1EE4                        7C            .byte	$7C
08907 1EE5                        C6            .byte	$C6
08908 1EE6                        FE            .byte	$FE
08909 1EE7                        C0            .byte	$C0
08910 1EE8                        C6            .byte	$C6
08911 1EE9                        7C            .byte	$7C
08912 1EEA                        00            .byte	0
08913 1EEB                        00            .byte	0
08914 1EEC                        00            .byte	0
08915                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EED                        00            .byte	0
08917 1EEE                        60            .byte	$60
08918 1EEF                        30            .byte	$30
08919 1EF0                        18            .byte	$18
08920 1EF1                        00            .byte	0
08921 1EF2                        7C            .byte	$7C
08922 1EF3                        C6            .byte	$C6
08923 1EF4                        FE            .byte	$FE
08924 1EF5                        C0            .byte	$C0
08925 1EF6                        C6            .byte	$C6
08926 1EF7                        7C            .byte	$7C
08927 1EF8                        00            .byte	0
08928 1EF9                        00            .byte	0
08929 1EFA                        00            .byte	0
08930                                           ! 1284  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1EFB                        00            .byte	0
08932 1EFC                        00            .byte	0
08933 1EFD                        66            .byte	$66
08934 1EFE                        66            .byte	$66
08935 1EFF                        00            .byte	0
08936 1F00                        38            .byte	$38
08937 1F01                        18            .byte	$18
08938 1F02                        18            .byte	$18
08939 1F03                        18            .byte	$18
08940 1F04                        18            .byte	$18
08941 1F05                        3C            .byte	$3C
08942 1F06                        00            .byte	0
08943 1F07                        00            .byte	0
08944 1F08                        00            .byte	0
08945                                           ! 1285  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F09                        00            .byte	0
08947 1F0A                        18            .byte	$18
08948 1F0B                        3C            .byte	$3C
08949 1F0C                        66            .byte	$66
08950 1F0D                        00            .byte	0
08951 1F0E                        38            .byte	$38
08952 1F0F                        18            .byte	$18
08953 1F10                        18            .byte	$18
08954 1F11                        18            .byte	$18
08955 1F12                        18            .byte	$18
08956 1F13                        3C            .byte	$3C
08957 1F14                        00            .byte	0
08958 1F15                        00            .byte	0
08959 1F16                        00            .byte	0
08960                                           ! 1286  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F17                        00            .byte	0
08962 1F18                        60            .byte	$60
08963 1F19                        30            .byte	$30
08964 1F1A                        18            .byte	$18
08965 1F1B                        00            .byte	0
08966 1F1C                        38            .byte	$38
08967 1F1D                        18            .byte	$18
08968 1F1E                        18            .byte	$18
08969 1F1F                        18            .byte	$18
08970 1F20                        18            .byte	$18
08971 1F21                        3C            .byte	$3C
08972 1F22                        00            .byte	0
08973 1F23                        00            .byte	0
08974 1F24                        00            .byte	0
08975                                           ! 1287  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F25                        00            .byte	0
08977 1F26                        C6            .byte	$C6
08978 1F27                        C6            .byte	$C6
08979 1F28                        10            .byte	$10
08980 1F29                        38            .byte	$38
08981 1F2A                        6C            .byte	$6C
08982 1F2B                        C6            .byte	$C6
08983 1F2C                        C6            .byte	$C6
08984 1F2D                        FE            .byte	$FE
08985 1F2E                        C6            .byte	$C6
08986 1F2F                        C6            .byte	$C6
08987 1F30                        00            .byte	0
08988 1F31                        00            .byte	0
08989 1F32                        00            .byte	0
08990                                           ! 1288  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F33                        38            .byte	$38
08992 1F34                        6C            .byte	$6C
08993 1F35                        38            .byte	$38
08994 1F36                        00            .byte	0
08995 1F37                        38            .byte	$38
08996 1F38                        6C            .byte	$6C
08997 1F39                        C6            .byte	$C6
08998 1F3A                        C6            .byte	$C6
08999 1F3B                        FE            .byte	$FE
09000 1F3C                        C6            .byte	$C6
09001 1F3D                        C6            .byte	$C6
09002 1F3E                        00            .byte	0
09003 1F3F                        00            .byte	0
09004 1F40                        00            .byte	0
09005                                           ! 1289  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F41                        18            .byte	$18
09007 1F42                        30            .byte	$30
09008 1F43                        60            .byte	$60
09009 1F44                        00            .byte	0
09010 1F45                        FE            .byte	$FE
09011 1F46                        66            .byte	$66
09012 1F47                        60            .byte	$60
09013 1F48                        7C            .byte	$7C
09014 1F49                        60            .byte	$60
09015 1F4A                        66            .byte	$66
09016 1F4B                        FE            .byte	$FE
09017 1F4C                        00            .byte	0
09018 1F4D                        00            .byte	0
09019 1F4E                        00            .byte	0
09020                                           ! 1290  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F4F                        00            .byte	0
09022 1F50                        00            .byte	0
09023 1F51                        00            .byte	0
09024 1F52                        00            .byte	0
09025 1F53                        CC            .byte	$CC
09026 1F54                        76            .byte	$76
09027 1F55                        36            .byte	$36
09028 1F56                        7E            .byte	$7E
09029 1F57                        D8            .byte	$D8
09030 1F58                        D8            .byte	$D8
09031 1F59                        6E            .byte	$6E
09032 1F5A                        00            .byte	0
09033 1F5B                        00            .byte	0
09034 1F5C                        00            .byte	0
09035                                           ! 1291  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F5D                        00            .byte	0
09037 1F5E                        00            .byte	0
09038 1F5F                        3E            .byte	$3E
09039 1F60                        6C            .byte	$6C
09040 1F61                        CC            .byte	$CC
09041 1F62                        CC            .byte	$CC
09042 1F63                        FE            .byte	$FE
09043 1F64                        CC            .byte	$CC
09044 1F65                        CC            .byte	$CC
09045 1F66                        CC            .byte	$CC
09046 1F67                        CE            .byte	$CE
09047 1F68                        00            .byte	0
09048 1F69                        00            .byte	0
09049 1F6A                        00            .byte	0
09050                                           ! 1292  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F6B                        00            .byte	0
09052 1F6C                        10            .byte	$10
09053 1F6D                        38            .byte	$38
09054 1F6E                        6C            .byte	$6C
09055 1F6F                        00            .byte	0
09056 1F70                        7C            .byte	$7C
09057 1F71                        C6            .byte	$C6
09058 1F72                        C6            .byte	$C6
09059 1F73                        C6            .byte	$C6
09060 1F74                        C6            .byte	$C6
09061 1F75                        7C            .byte	$7C
09062 1F76                        00            .byte	0
09063 1F77                        00            .byte	0
09064 1F78                        00            .byte	0
09065                                           ! 1293  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F79                        00            .byte	0
09067 1F7A                        00            .byte	0
09068 1F7B                        C6            .byte	$C6
09069 1F7C                        C6            .byte	$C6
09070 1F7D                        00            .byte	0
09071 1F7E                        7C            .byte	$7C
09072 1F7F                        C6            .byte	$C6
09073 1F80                        C6            .byte	$C6
09074 1F81                        C6            .byte	$C6
09075 1F82                        C6            .byte	$C6
09076 1F83                        7C            .byte	$7C
09077 1F84                        00            .byte	0
09078 1F85                        00            .byte	0
09079 1F86                        00            .byte	0
09080                                           ! 1294  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09081 1F87                        00            .byte	0
09082 1F88                        60            .byte	$60
09083 1F89                        30            .byte	$30
09084 1F8A                        18            .byte	$18
09085 1F8B                        00            .byte	0
09086 1F8C                        7C            .byte	$7C
09087 1F8D                        C6            .byte	$C6
09088 1F8E                        C6            .byte	$C6
09089 1F8F                        C6            .byte	$C6
09090 1F90                        C6            .byte	$C6
09091 1F91                        7C            .byte	$7C
09092 1F92                        00            .byte	0
09093 1F93                        00            .byte	0
09094 1F94                        00            .byte	0
09095                                           ! 1295  0x00, 0x30, 0x78, 0xcc, 0x00, 
09096 1F95                        00            .byte	0
09097 1F96                        30            .byte	$30
09098 1F97                        78            .byte	$78
09099 1F98                        CC            .byte	$CC
09100 1F99                        00            .byte	0
09101                                           ! 1295 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09102 1F9A                        CC            .byte	$CC
09103 1F9B                        CC            .byte	$CC
09104 1F9C                        CC            .byte	$CC
09105 1F9D                        CC            .byte	$CC
09106 1F9E                        CC            .byte	$CC
09107 1F9F                        76            .byte	$76
09108 1FA0                        00            .byte	0
09109 1FA1                        00            .byte	0
09110 1FA2                        00            .byte	0
09111                                           ! 1296  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1FA3                        00            .byte	0
09113 1FA4                        60            .byte	$60
09114 1FA5                        30            .byte	$30
09115 1FA6                        18            .byte	$18
09116 1FA7                        00            .byte	0
09117 1FA8                        CC            .byte	$CC
09118 1FA9                        CC            .byte	$CC
09119 1FAA                        CC            .byte	$CC
09120 1FAB                        CC            .byte	$CC
09121 1FAC                        CC            .byte	$CC
09122 1FAD                        76            .byte	$76
09123 1FAE                        00            .byte	0
09124 1FAF                        00            .byte	0
09125 1FB0                        00            .byte	0
09126                                           ! 1297  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FB1                        00            .byte	0
09128 1FB2                        00            .byte	0
09129 1FB3                        C6            .byte	$C6
09130 1FB4                        C6            .byte	$C6
09131 1FB5                        00            .byte	0
09132 1FB6                        C6            .byte	$C6
09133 1FB7                        C6            .byte	$C6
09134 1FB8                        C6            .byte	$C6
09135 1FB9                        C6            .byte	$C6
09136 1FBA                        7E            .byte	$7E
09137 1FBB                        06            .byte	6
09138 1FBC                        0C            .byte	$C
09139 1FBD                        78            .byte	$78
09140 1FBE                        00            .byte	0
09141                                           ! 1298  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FBF                        00            .byte	0
09143 1FC0                        C6            .byte	$C6
09144 1FC1                        C6            .byte	$C6
09145 1FC2                        38            .byte	$38
09146 1FC3                        6C            .byte	$6C
09147 1FC4                        C6            .byte	$C6
09148 1FC5                        C6            .byte	$C6
09149 1FC6                        C6            .byte	$C6
09150 1FC7                        C6            .byte	$C6
09151 1FC8                        6C            .byte	$6C
09152 1FC9                        38            .byte	$38
09153 1FCA                        00            .byte	0
09154 1FCB                        00            .byte	0
09155 1FCC                        00            .byte	0
09156                                           ! 1299  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FCD                        00            .byte	0
09158 1FCE                        C6            .byte	$C6
09159 1FCF                        C6            .byte	$C6
09160 1FD0                        00            .byte	0
09161 1FD1                        C6            .byte	$C6
09162 1FD2                        C6            .byte	$C6
09163 1FD3                        C6            .byte	$C6
09164 1FD4                        C6            .byte	$C6
09165 1FD5                        C6            .byte	$C6
09166 1FD6                        C6            .byte	$C6
09167 1FD7                        7C            .byte	$7C
09168 1FD8                        00            .byte	0
09169 1FD9                        00            .byte	0
09170 1FDA                        00            .byte	0
09171                                           ! 1300  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FDB                        00            .byte	0
09173 1FDC                        18            .byte	$18
09174 1FDD                        18            .byte	$18
09175 1FDE                        3C            .byte	$3C
09176 1FDF                        66            .byte	$66
09177 1FE0                        60            .byte	$60
09178 1FE1                        60            .byte	$60
09179 1FE2                        66            .byte	$66
09180 1FE3                        3C            .byte	$3C
09181 1FE4                        18            .byte	$18
09182 1FE5                        18            .byte	$18
09183 1FE6                        00            .byte	0
09184 1FE7                        00            .byte	0
09185 1FE8                        00            .byte	0
09186                                           ! 1301  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FE9                        00            .byte	0
09188 1FEA                        38            .byte	$38
09189 1FEB                        6C            .byte	$6C
09190 1FEC                        64            .byte	$64
09191 1FED                        60            .byte	$60
09192 1FEE                        F0            .byte	$F0
09193 1FEF                        60            .byte	$60
09194 1FF0                        60            .byte	$60
09195 1FF1                        60            .byte	$60
09196 1FF2                        E6            .byte	$E6
09197 1FF3                        FC            .byte	$FC
09198 1FF4                        00            .byte	0
09199 1FF5                        00            .byte	0
09200 1FF6                        00            .byte	0
09201                                           ! 1302  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FF7                        00            .byte	0
09203 1FF8                        00            .byte	0
09204 1FF9                        66            .byte	$66
09205 1FFA                        66            .byte	$66
09206 1FFB                        3C            .byte	$3C
09207 1FFC                        18            .byte	$18
09208 1FFD                        7E            .byte	$7E
09209 1FFE                        18            .byte	$18
09210 1FFF                        7E            .byte	$7E
09211 2000                        18            .byte	$18
09212 2001                        18            .byte	$18
09213 2002                        00            .byte	0
09214 2003                        00            .byte	0
09215 2004                        00            .byte	0
09216                                           ! 1303  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 2005                        00            .byte	0
09218 2006                        F8            .byte	$F8
09219 2007                        CC            .byte	$CC
09220 2008                        CC            .byte	$CC
09221 2009                        F8            .byte	$F8
09222 200A                        C4            .byte	$C4
09223 200B                        CC            .byte	$CC
09224 200C                        DE            .byte	$DE
09225 200D                        CC            .byte	$CC
09226 200E                        CC            .byte	$CC
09227 200F                        C6            .byte	$C6
09228 2010                        00            .byte	0
09229 2011                        00            .byte	0
09230 2012                        00            .byte	0
09231                                           ! 1304  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 2013                        00            .byte	0
09233 2014                        0E            .byte	$E
09234 2015                        1B            .byte	$1B
09235 2016                        18            .byte	$18
09236 2017                        18            .byte	$18
09237 2018                        18            .byte	$18
09238 2019                        7E            .byte	$7E
09239 201A                        18            .byte	$18
09240 201B                        18            .byte	$18
09241 201C                        18            .byte	$18
09242 201D                        18            .byte	$18
09243 201E                        D8            .byte	$D8
09244 201F                        70            .byte	$70
09245 2020                        00            .byte	0
09246                                           ! 1305  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 2021                        00            .byte	0
09248 2022                        18            .byte	$18
09249 2023                        30            .byte	$30
09250 2024                        60            .byte	$60
09251 2025                        00            .byte	0
09252 2026                        78            .byte	$78
09253 2027                        0C            .byte	$C
09254 2028                        7C            .byte	$7C
09255 2029                        CC            .byte	$CC
09256 202A                        CC            .byte	$CC
09257 202B                        76            .byte	$76
09258 202C                        00            .byte	0
09259 202D                        00            .byte	0
09260 202E                        00            .byte	0
09261                                           ! 1306  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 202F                        00            .byte	0
09263 2030                        0C            .byte	$C
09264 2031                        18            .byte	$18
09265 2032                        30            .byte	$30
09266 2033                        00            .byte	0
09267 2034                        38            .byte	$38
09268 2035                        18            .byte	$18
09269 2036                        18            .byte	$18
09270 2037                        18            .byte	$18
09271 2038                        18            .byte	$18
09272 2039                        3C            .byte	$3C
09273 203A                        00            .byte	0
09274 203B                        00            .byte	0
09275 203C                        00            .byte	0
09276                                           ! 1307  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 203D                        00            .byte	0
09278 203E                        18            .byte	$18
09279 203F                        30            .byte	$30
09280 2040                        60            .byte	$60
09281 2041                        00            .byte	0
09282 2042                        7C            .byte	$7C
09283 2043                        C6            .byte	$C6
09284 2044                        C6            .byte	$C6
09285 2045                        C6            .byte	$C6
09286 2046                        C6            .byte	$C6
09287 2047                        7C            .byte	$7C
09288 2048                        00            .byte	0
09289 2049                        00            .byte	0
09290 204A                        00            .byte	0
09291                                           ! 1308  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 204B                        00            .byte	0
09293 204C                        18            .byte	$18
09294 204D                        30            .byte	$30
09295 204E                        60            .byte	$60
09296 204F                        00            .byte	0
09297 2050                        CC            .byte	$CC
09298 2051                        CC            .byte	$CC
09299 2052                        CC            .byte	$CC
09300 2053                        CC            .byte	$CC
09301 2054                        CC            .byte	$CC
09302 2055                        76            .byte	$76
09303 2056                        00            .byte	0
09304 2057                        00            .byte	0
09305 2058                        00            .byte	0
09306                                           ! 1309  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2059                        00            .byte	0
09308 205A                        00            .byte	0
09309 205B                        76            .byte	$76
09310 205C                        DC            .byte	$DC
09311 205D                        00            .byte	0
09312 205E                        DC            .byte	$DC
09313 205F                        66            .byte	$66
09314 2060                        66            .byte	$66
09315 2061                        66            .byte	$66
09316 2062                        66            .byte	$66
09317 2063                        66            .byte	$66
09318 2064                        00            .byte	0
09319 2065                        00            .byte	0
09320 2066                        00            .byte	0
09321                                           ! 1310  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 2067                        76            .byte	$76
09323 2068                        DC            .byte	$DC
09324 2069                        00            .byte	0
09325 206A                        C6            .byte	$C6
09326 206B                        E6            .byte	$E6
09327 206C                        F6            .byte	$F6
09328 206D                        FE            .byte	$FE
09329 206E                        DE            .byte	$DE
09330 206F                        CE            .byte	$CE
09331 2070                        C6            .byte	$C6
09332 2071                        C6            .byte	$C6
09333 2072                        00            .byte	0
09334 2073                        00            .byte	0
09335 2074                        00            .byte	0
09336                                           ! 1311  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 2075                        00            .byte	0
09338 2076                        3C            .byte	$3C
09339 2077                        6C            .byte	$6C
09340 2078                        6C            .byte	$6C
09341 2079                        3E            .byte	$3E
09342 207A                        00            .byte	0
09343 207B                        7E            .byte	$7E
09344 207C                        00            .byte	0
09345 207D                        00            .byte	0
09346 207E                        00            .byte	0
09347 207F                        00            .byte	0
09348 2080                        00            .byte	0
09349 2081                        00            .byte	0
09350 2082                        00            .byte	0
09351                                           ! 1312  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 2083                        00            .byte	0
09353 2084                        38            .byte	$38
09354 2085                        6C            .byte	$6C
09355 2086                        6C            .byte	$6C
09356 2087                        38            .byte	$38
09357 2088                        00            .byte	0
09358 2089                        7C            .byte	$7C
09359 208A                        00            .byte	0
09360 208B                        00            .byte	0
09361 208C                        00            .byte	0
09362 208D                        00            .byte	0
09363 208E                        00            .byte	0
09364 208F                        00            .byte	0
09365 2090                        00            .byte	0
09366                                           ! 1313  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 2091                        00            .byte	0
09368 2092                        00            .byte	0
09369 2093                        30            .byte	$30
09370 2094                        30            .byte	$30
09371 2095                        00            .byte	0
09372 2096                        30            .byte	$30
09373 2097                        30            .byte	$30
09374 2098                        60            .byte	$60
09375 2099                        C6            .byte	$C6
09376 209A                        C6            .byte	$C6
09377 209B                        7C            .byte	$7C
09378 209C                        00            .byte	0
09379 209D                        00            .byte	0
09380 209E                        00            .byte	0
09381                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 209F                        00            .byte	0
09383 20A0                        00            .byte	0
09384 20A1                        00            .byte	0
09385 20A2                        00            .byte	0
09386 20A3                        00            .byte	0
09387 20A4                        00            .byte	0
09388 20A5                        FE            .byte	$FE
09389 20A6                        C0            .byte	$C0
09390 20A7                        C0            .byte	$C0
09391 20A8                        C0            .byte	$C0
09392 20A9                        00            .byte	0
09393 20AA                        00            .byte	0
09394 20AB                        00            .byte	0
09395 20AC                        00            .byte	0
09396                                           ! 1315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20AD                        00            .byte	0
09398 20AE                        00            .byte	0
09399 20AF                        00            .byte	0
09400 20B0                        00            .byte	0
09401 20B1                        00            .byte	0
09402 20B2                        00            .byte	0
09403 20B3                        FE            .byte	$FE
09404 20B4                        06            .byte	6
09405 20B5                        06            .byte	6
09406 20B6                        06            .byte	6
09407 20B7                        00            .byte	0
09408 20B8                        00            .byte	0
09409 20B9                        00            .byte	0
09410 20BA                        00            .byte	0
09411                                           ! 1316  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20BB                        00            .byte	0
09413 20BC                        C0            .byte	$C0
09414 20BD                        C0            .byte	$C0
09415 20BE                        C6            .byte	$C6
09416 20BF                        CC            .byte	$CC
09417 20C0                        D8            .byte	$D8
09418 20C1                        30            .byte	$30
09419 20C2                        60            .byte	$60
09420 20C3                        DC            .byte	$DC
09421 20C4                        86            .byte	$86
09422 20C5                        0C            .byte	$C
09423 20C6                        18            .byte	$18
09424 20C7                        3E            .byte	$3E
09425 20C8                        00            .byte	0
09426                                           ! 1317  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20C9                        00            .byte	0
09428 20CA                        C0            .byte	$C0
09429 20CB                        C0            .byte	$C0
09430 20CC                        C6            .byte	$C6
09431 20CD                        CC            .byte	$CC
09432 20CE                        D8            .byte	$D8
09433 20CF                        30            .byte	$30
09434 20D0                        66            .byte	$66
09435 20D1                        CE            .byte	$CE
09436 20D2                        9E            .byte	$9E
09437 20D3                        3E            .byte	$3E
09438 20D4                        06            .byte	6
09439 20D5                        06            .byte	6
09440 20D6                        00            .byte	0
09441                                           ! 1318  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09442 20D7                        00            .byte	0
09443 20D8                        00            .byte	0
09444 20D9                        18            .byte	$18
09445 20DA                        18            .byte	$18
09446 20DB                        00            .byte	0
09447 20DC                        18            .byte	$18
09448 20DD                        18            .byte	$18
09449 20DE                        3C            .byte	$3C
09450 20DF                        3C            .byte	$3C
09451 20E0                        3C            .byte	$3C
09452 20E1                        18            .byte	$18
09453 20E2                        00            .byte	0
09454 20E3                        00            .byte	0
09455 20E4                        00            .byte	0
09456                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0x
09457 20E5                        00            .byte	0
09458 20E6                        00            .byte	0
09459 20E7                        00            .byte	0
09460 20E8                        00            .byte	0
09461 20E9                        36            .byte	$36
09462 20EA                        6C            .byte	$6C
09463                                           ! 1319 d8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09464 20EB                        D8            .byte	$D8
09465 20EC                        6C            .byte	$6C
09466 20ED                        36            .byte	$36
09467 20EE                        00            .byte	0
09468 20EF                        00            .byte	0
09469 20F0                        00            .byte	0
09470 20F1                        00            .byte	0
09471 20F2                        00            .byte	0
09472                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20F3                        00            .byte	0
09474 20F4                        00            .byte	0
09475 20F5                        00            .byte	0
09476 20F6                        00            .byte	0
09477 20F7                        D8            .byte	$D8
09478 20F8                        6C            .byte	$6C
09479 20F9                        36            .byte	$36
09480 20FA                        6C            .byte	$6C
09481 20FB                        D8            .byte	$D8
09482 20FC                        00            .byte	0
09483 20FD                        00            .byte	0
09484 20FE                        00            .byte	0
09485 20FF                        00            .byte	0
09486 2100                        00            .byte	0
09487                                           ! 1321  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 2101                        11            .byte	$11
09489 2102                        44            .byte	$44
09490 2103                        11            .byte	$11
09491 2104                        44            .byte	$44
09492 2105                        11            .byte	$11
09493 2106                        44            .byte	$44
09494 2107                        11            .byte	$11
09495 2108                        44            .byte	$44
09496 2109                        11            .byte	$11
09497 210A                        44            .byte	$44
09498 210B                        11            .byte	$11
09499 210C                        44            .byte	$44
09500 210D                        11            .byte	$11
09501 210E                        44            .byte	$44
09502                                           ! 1322  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 210F                        55            .byte	$55
09504 2110                        AA            .byte	$AA
09505 2111                        55            .byte	$55
09506 2112                        AA            .byte	$AA
09507 2113                        55            .byte	$55
09508 2114                        AA            .byte	$AA
09509 2115                        55            .byte	$55
09510 2116                        AA            .byte	$AA
09511 2117                        55            .byte	$55
09512 2118                        AA            .byte	$AA
09513 2119                        55            .byte	$55
09514 211A                        AA            .byte	$AA
09515 211B                        55            .byte	$55
09516 211C                        AA            .byte	$AA
09517                                           ! 1323  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 211D                        DD            .byte	$DD
09519 211E                        77            .byte	$77
09520 211F                        DD            .byte	$DD
09521 2120                        77            .byte	$77
09522 2121                        DD            .byte	$DD
09523 2122                        77            .byte	$77
09524 2123                        DD            .byte	$DD
09525 2124                        77            .byte	$77
09526 2125                        DD            .byte	$DD
09527 2126                        77            .byte	$77
09528 2127                        DD            .byte	$DD
09529 2128                        77            .byte	$77
09530 2129                        DD            .byte	$DD
09531 212A                        77            .byte	$77
09532                                           ! 1324  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 212B                        18            .byte	$18
09534 212C                        18            .byte	$18
09535 212D                        18            .byte	$18
09536 212E                        18            .byte	$18
09537 212F                        18            .byte	$18
09538 2130                        18            .byte	$18
09539 2131                        18            .byte	$18
09540 2132                        18            .byte	$18
09541 2133                        18            .byte	$18
09542 2134                        18            .byte	$18
09543 2135                        18            .byte	$18
09544 2136                        18            .byte	$18
09545 2137                        18            .byte	$18
09546 2138                        18            .byte	$18
09547                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2139                        18            .byte	$18
09549 213A                        18            .byte	$18
09550 213B                        18            .byte	$18
09551 213C                        18            .byte	$18
09552 213D                        18            .byte	$18
09553 213E                        18            .byte	$18
09554 213F                        18            .byte	$18
09555 2140                        F8            .byte	$F8
09556 2141                        18            .byte	$18
09557 2142                        18            .byte	$18
09558 2143                        18            .byte	$18
09559 2144                        18            .byte	$18
09560 2145                        18            .byte	$18
09561 2146                        18            .byte	$18
09562                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 2147                        18            .byte	$18
09564 2148                        18            .byte	$18
09565 2149                        18            .byte	$18
09566 214A                        18            .byte	$18
09567 214B                        18            .byte	$18
09568 214C                        F8            .byte	$F8
09569 214D                        18            .byte	$18
09570 214E                        F8            .byte	$F8
09571 214F                        18            .byte	$18
09572 2150                        18            .byte	$18
09573 2151                        18            .byte	$18
09574 2152                        18            .byte	$18
09575 2153                        18            .byte	$18
09576 2154                        18            .byte	$18
09577                                           ! 1327  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 2155                        36            .byte	$36
09579 2156                        36            .byte	$36
09580 2157                        36            .byte	$36
09581 2158                        36            .byte	$36
09582 2159                        36            .byte	$36
09583 215A                        36            .byte	$36
09584 215B                        36            .byte	$36
09585 215C                        F6            .byte	$F6
09586 215D                        36            .byte	$36
09587 215E                        36            .byte	$36
09588 215F                        36            .byte	$36
09589 2160                        36            .byte	$36
09590 2161                        36            .byte	$36
09591 2162                        36            .byte	$36
09592                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 2163                        00            .byte	0
09594 2164                        00            .byte	0
09595 2165                        00            .byte	0
09596 2166                        00            .byte	0
09597 2167                        00            .byte	0
09598 2168                        00            .byte	0
09599 2169                        00            .byte	0
09600 216A                        FE            .byte	$FE
09601 216B                        36            .byte	$36
09602 216C                        36            .byte	$36
09603 216D                        36            .byte	$36
09604 216E                        36            .byte	$36
09605 216F                        36            .byte	$36
09606 2170                        36            .byte	$36
09607                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 2171                        00            .byte	0
09609 2172                        00            .byte	0
09610 2173                        00            .byte	0
09611 2174                        00            .byte	0
09612 2175                        00            .byte	0
09613 2176                        F8            .byte	$F8
09614 2177                        18            .byte	$18
09615 2178                        F8            .byte	$F8
09616 2179                        18            .byte	$18
09617 217A                        18            .byte	$18
09618 217B                        18            .byte	$18
09619 217C                        18            .byte	$18
09620 217D                        18            .byte	$18
09621 217E                        18            .byte	$18
09622                                           ! 1330  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 217F                        36            .byte	$36
09624 2180                        36            .byte	$36
09625 2181                        36            .byte	$36
09626 2182                        36            .byte	$36
09627 2183                        36            .byte	$36
09628 2184                        F6            .byte	$F6
09629 2185                        06            .byte	6
09630 2186                        F6            .byte	$F6
09631 2187                        36            .byte	$36
09632 2188                        36            .byte	$36
09633 2189                        36            .byte	$36
09634 218A                        36            .byte	$36
09635 218B                        36            .byte	$36
09636 218C                        36            .byte	$36
09637                                           ! 1331  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 218D                        36            .byte	$36
09639 218E                        36            .byte	$36
09640 218F                        36            .byte	$36
09641 2190                        36            .byte	$36
09642 2191                        36            .byte	$36
09643 2192                        36            .byte	$36
09644 2193                        36            .byte	$36
09645 2194                        36            .byte	$36
09646 2195                        36            .byte	$36
09647 2196                        36            .byte	$36
09648 2197                        36            .byte	$36
09649 2198                        36            .byte	$36
09650 2199                        36            .byte	$36
09651 219A                        36            .byte	$36
09652                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 219B                        00            .byte	0
09654 219C                        00            .byte	0
09655 219D                        00            .byte	0
09656 219E                        00            .byte	0
09657 219F                        00            .byte	0
09658 21A0                        FE            .byte	$FE
09659 21A1                        06            .byte	6
09660 21A2                        F6            .byte	$F6
09661 21A3                        36            .byte	$36
09662 21A4                        36            .byte	$36
09663 21A5                        36            .byte	$36
09664 21A6                        36            .byte	$36
09665 21A7                        36            .byte	$36
09666 21A8                        36            .byte	$36
09667                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21A9                        36            .byte	$36
09669 21AA                        36            .byte	$36
09670 21AB                        36            .byte	$36
09671 21AC                        36            .byte	$36
09672 21AD                        36            .byte	$36
09673 21AE                        F6            .byte	$F6
09674 21AF                        06            .byte	6
09675 21B0                        FE            .byte	$FE
09676 21B1                        00            .byte	0
09677 21B2                        00            .byte	0
09678 21B3                        00            .byte	0
09679 21B4                        00            .byte	0
09680 21B5                        00            .byte	0
09681 21B6                        00            .byte	0
09682                                           ! 1334  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21B7                        36            .byte	$36
09684 21B8                        36            .byte	$36
09685 21B9                        36            .byte	$36
09686 21BA                        36            .byte	$36
09687 21BB                        36            .byte	$36
09688 21BC                        36            .byte	$36
09689 21BD                        36            .byte	$36
09690 21BE                        FE            .byte	$FE
09691 21BF                        00            .byte	0
09692 21C0                        00            .byte	0
09693 21C1                        00            .byte	0
09694 21C2                        00            .byte	0
09695 21C3                        00            .byte	0
09696 21C4                        00            .byte	0
09697                                           ! 1335  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21C5                        18            .byte	$18
09699 21C6                        18            .byte	$18
09700 21C7                        18            .byte	$18
09701 21C8                        18            .byte	$18
09702 21C9                        18            .byte	$18
09703 21CA                        F8            .byte	$F8
09704 21CB                        18            .byte	$18
09705 21CC                        F8            .byte	$F8
09706 21CD                        00            .byte	0
09707 21CE                        00            .byte	0
09708 21CF                        00            .byte	0
09709 21D0                        00            .byte	0
09710 21D1                        00            .byte	0
09711 21D2                        00            .byte	0
09712                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21D3                        00            .byte	0
09714 21D4                        00            .byte	0
09715 21D5                        00            .byte	0
09716 21D6                        00            .byte	0
09717 21D7                        00            .byte	0
09718 21D8                        00            .byte	0
09719 21D9                        00            .byte	0
09720 21DA                        F8            .byte	$F8
09721 21DB                        18            .byte	$18
09722 21DC                        18            .byte	$18
09723 21DD                        18            .byte	$18
09724 21DE                        18            .byte	$18
09725 21DF                        18            .byte	$18
09726 21E0                        18            .byte	$18
09727                                           ! 1337  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21E1                        18            .byte	$18
09729 21E2                        18            .byte	$18
09730 21E3                        18            .byte	$18
09731 21E4                        18            .byte	$18
09732 21E5                        18            .byte	$18
09733 21E6                        18            .byte	$18
09734 21E7                        18            .byte	$18
09735 21E8                        1F            .byte	$1F
09736 21E9                        00            .byte	0
09737 21EA                        00            .byte	0
09738 21EB                        00            .byte	0
09739 21EC                        00            .byte	0
09740 21ED                        00            .byte	0
09741 21EE                        00            .byte	0
09742                                           ! 1338  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21EF                        18            .byte	$18
09744 21F0                        18            .byte	$18
09745 21F1                        18            .byte	$18
09746 21F2                        18            .byte	$18
09747 21F3                        18            .byte	$18
09748 21F4                        18            .byte	$18
09749 21F5                        18            .byte	$18
09750 21F6                        FF            .byte	$FF
09751 21F7                        00            .byte	0
09752 21F8                        00            .byte	0
09753 21F9                        00            .byte	0
09754 21FA                        00            .byte	0
09755 21FB                        00            .byte	0
09756 21FC                        00            .byte	0
09757                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 21FD                        00            .byte	0
09759 21FE                        00            .byte	0
09760 21FF                        00            .byte	0
09761 2200                        00            .byte	0
09762 2201                        00            .byte	0
09763 2202                        00            .byte	0
09764 2203                        00            .byte	0
09765 2204                        FF            .byte	$FF
09766 2205                        18            .byte	$18
09767 2206                        18            .byte	$18
09768 2207                        18            .byte	$18
09769 2208                        18            .byte	$18
09770 2209                        18            .byte	$18
09771 220A                        18            .byte	$18
09772                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 220B                        18            .byte	$18
09774 220C                        18            .byte	$18
09775 220D                        18            .byte	$18
09776 220E                        18            .byte	$18
09777 220F                        18            .byte	$18
09778 2210                        18            .byte	$18
09779 2211                        18            .byte	$18
09780 2212                        1F            .byte	$1F
09781 2213                        18            .byte	$18
09782 2214                        18            .byte	$18
09783 2215                        18            .byte	$18
09784 2216                        18            .byte	$18
09785 2217                        18            .byte	$18
09786 2218                        18            .byte	$18
09787                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2219                        00            .byte	0
09789 221A                        00            .byte	0
09790 221B                        00            .byte	0
09791 221C                        00            .byte	0
09792 221D                        00            .byte	0
09793 221E                        00            .byte	0
09794 221F                        00            .byte	0
09795 2220                        FF            .byte	$FF
09796 2221                        00            .byte	0
09797 2222                        00            .byte	0
09798 2223                        00            .byte	0
09799 2224                        00            .byte	0
09800 2225                        00            .byte	0
09801 2226                        00            .byte	0
09802                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09803 2227                        18            .byte	$18
09804 2228                        18            .byte	$18
09805 2229                        18            .byte	$18
09806 222A                        18            .byte	$18
09807 222B                        18            .byte	$18
09808 222C                        18            .byte	$18
09809 222D                        18            .byte	$18
09810 222E                        FF            .byte	$FF
09811 222F                        18            .byte	$18
09812 2230                        18            .byte	$18
09813 2231                        18            .byte	$18
09814 2232                        18            .byte	$18
09815 2233                        18            .byte	$18
09816 2234                        18            .byte	$18
09817                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f
09818 2235                        18            .byte	$18
09819 2236                        18            .byte	$18
09820 2237                        18            .byte	$18
09821 2238                        18            .byte	$18
09822 2239                        18            .byte	$18
09823 223A                        1F            .byte	$1F
09824 223B                        18            .byte	$18
09825                                           ! 1343 , 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09826 223C                        1F            .byte	$1F
09827 223D                        18            .byte	$18
09828 223E                        18            .byte	$18
09829 223F                        18            .byte	$18
09830 2240                        18            .byte	$18
09831 2241                        18            .byte	$18
09832 2242                        18            .byte	$18
09833                                           ! 1344  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 2243                        36            .byte	$36
09835 2244                        36            .byte	$36
09836 2245                        36            .byte	$36
09837 2246                        36            .byte	$36
09838 2247                        36            .byte	$36
09839 2248                        36            .byte	$36
09840 2249                        36            .byte	$36
09841 224A                        37            .byte	$37
09842 224B                        36            .byte	$36
09843 224C                        36            .byte	$36
09844 224D                        36            .byte	$36
09845 224E                        36            .byte	$36
09846 224F                        36            .byte	$36
09847 2250                        36            .byte	$36
09848                                           ! 1345  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 2251                        36            .byte	$36
09850 2252                        36            .byte	$36
09851 2253                        36            .byte	$36
09852 2254                        36            .byte	$36
09853 2255                        36            .byte	$36
09854 2256                        37            .byte	$37
09855 2257                        30            .byte	$30
09856 2258                        3F            .byte	$3F
09857 2259                        00            .byte	0
09858 225A                        00            .byte	0
09859 225B                        00            .byte	0
09860 225C                        00            .byte	0
09861 225D                        00            .byte	0
09862 225E                        00            .byte	0
09863                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 225F                        00            .byte	0
09865 2260                        00            .byte	0
09866 2261                        00            .byte	0
09867 2262                        00            .byte	0
09868 2263                        00            .byte	0
09869 2264                        3F            .byte	$3F
09870 2265                        30            .byte	$30
09871 2266                        37            .byte	$37
09872 2267                        36            .byte	$36
09873 2268                        36            .byte	$36
09874 2269                        36            .byte	$36
09875 226A                        36            .byte	$36
09876 226B                        36            .byte	$36
09877 226C                        36            .byte	$36
09878                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 226D                        36            .byte	$36
09880 226E                        36            .byte	$36
09881 226F                        36            .byte	$36
09882 2270                        36            .byte	$36
09883 2271                        36            .byte	$36
09884 2272                        F7            .byte	$F7
09885 2273                        00            .byte	0
09886 2274                        FF            .byte	$FF
09887 2275                        00            .byte	0
09888 2276                        00            .byte	0
09889 2277                        00            .byte	0
09890 2278                        00            .byte	0
09891 2279                        00            .byte	0
09892 227A                        00            .byte	0
09893                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 227B                        00            .byte	0
09895 227C                        00            .byte	0
09896 227D                        00            .byte	0
09897 227E                        00            .byte	0
09898 227F                        00            .byte	0
09899 2280                        FF            .byte	$FF
09900 2281                        00            .byte	0
09901 2282                        F7            .byte	$F7
09902 2283                        36            .byte	$36
09903 2284                        36            .byte	$36
09904 2285                        36            .byte	$36
09905 2286                        36            .byte	$36
09906 2287                        36            .byte	$36
09907 2288                        36            .byte	$36
09908                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2289                        36            .byte	$36
09910 228A                        36            .byte	$36
09911 228B                        36            .byte	$36
09912 228C                        36            .byte	$36
09913 228D                        36            .byte	$36
09914 228E                        37            .byte	$37
09915 228F                        30            .byte	$30
09916 2290                        37            .byte	$37
09917 2291                        36            .byte	$36
09918 2292                        36            .byte	$36
09919 2293                        36            .byte	$36
09920 2294                        36            .byte	$36
09921 2295                        36            .byte	$36
09922 2296                        36            .byte	$36
09923                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 2297                        00            .byte	0
09925 2298                        00            .byte	0
09926 2299                        00            .byte	0
09927 229A                        00            .byte	0
09928 229B                        00            .byte	0
09929 229C                        FF            .byte	$FF
09930 229D                        00            .byte	0
09931 229E                        FF            .byte	$FF
09932 229F                        00            .byte	0
09933 22A0                        00            .byte	0
09934 22A1                        00            .byte	0
09935 22A2                        00            .byte	0
09936 22A3                        00            .byte	0
09937 22A4                        00            .byte	0
09938                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22A5                        36            .byte	$36
09940 22A6                        36            .byte	$36
09941 22A7                        36            .byte	$36
09942 22A8                        36            .byte	$36
09943 22A9                        36            .byte	$36
09944 22AA                        F7            .byte	$F7
09945 22AB                        00            .byte	0
09946 22AC                        F7            .byte	$F7
09947 22AD                        36            .byte	$36
09948 22AE                        36            .byte	$36
09949 22AF                        36            .byte	$36
09950 22B0                        36            .byte	$36
09951 22B1                        36            .byte	$36
09952 22B2                        36            .byte	$36
09953                                           ! 1352  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22B3                        18            .byte	$18
09955 22B4                        18            .byte	$18
09956 22B5                        18            .byte	$18
09957 22B6                        18            .byte	$18
09958 22B7                        18            .byte	$18
09959 22B8                        FF            .byte	$FF
09960 22B9                        00            .byte	0
09961 22BA                        FF            .byte	$FF
09962 22BB                        00            .byte	0
09963 22BC                        00            .byte	0
09964 22BD                        00            .byte	0
09965 22BE                        00            .byte	0
09966 22BF                        00            .byte	0
09967 22C0                        00            .byte	0
09968                                           ! 1353  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22C1                        36            .byte	$36
09970 22C2                        36            .byte	$36
09971 22C3                        36            .byte	$36
09972 22C4                        36            .byte	$36
09973 22C5                        36            .byte	$36
09974 22C6                        36            .byte	$36
09975 22C7                        36            .byte	$36
09976 22C8                        FF            .byte	$FF
09977 22C9                        00            .byte	0
09978 22CA                        00            .byte	0
09979 22CB                        00            .byte	0
09980 22CC                        00            .byte	0
09981 22CD                        00            .byte	0
09982 22CE                        00            .byte	0
09983                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22CF                        00            .byte	0
09985 22D0                        00            .byte	0
09986 22D1                        00            .byte	0
09987 22D2                        00            .byte	0
09988 22D3                        00            .byte	0
09989 22D4                        FF            .byte	$FF
09990 22D5                        00            .byte	0
09991 22D6                        FF            .byte	$FF
09992 22D7                        18            .byte	$18
09993 22D8                        18            .byte	$18
09994 22D9                        18            .byte	$18
09995 22DA                        18            .byte	$18
09996 22DB                        18            .byte	$18
09997 22DC                        18            .byte	$18
09998                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22DD                        00            .byte	0
10000 22DE                        00            .byte	0
10001 22DF                        00            .byte	0
10002 22E0                        00            .byte	0
10003 22E1                        00            .byte	0
10004 22E2                        00            .byte	0
10005 22E3                        00            .byte	0
10006 22E4                        FF            .byte	$FF
10007 22E5                        36            .byte	$36
10008 22E6                        36            .byte	$36
10009 22E7                        36            .byte	$36
10010 22E8                        36            .byte	$36
10011 22E9                        36            .byte	$36
10012 22EA                        36            .byte	$36
10013                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22EB                        36            .byte	$36
10015 22EC                        36            .byte	$36
10016 22ED                        36            .byte	$36
10017 22EE                        36            .byte	$36
10018 22EF                        36            .byte	$36
10019 22F0                        36            .byte	$36
10020 22F1                        36            .byte	$36
10021 22F2                        3F            .byte	$3F
10022 22F3                        00            .byte	0
10023 22F4                        00            .byte	0
10024 22F5                        00            .byte	0
10025 22F6                        00            .byte	0
10026 22F7                        00            .byte	0
10027 22F8                        00            .byte	0
10028                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 22F9                        18            .byte	$18
10030 22FA                        18            .byte	$18
10031 22FB                        18            .byte	$18
10032 22FC                        18            .byte	$18
10033 22FD                        18            .byte	$18
10034 22FE                        1F            .byte	$1F
10035 22FF                        18            .byte	$18
10036 2300                        1F            .byte	$1F
10037 2301                        00            .byte	0
10038 2302                        00            .byte	0
10039 2303                        00            .byte	0
10040 2304                        00            .byte	0
10041 2305                        00            .byte	0
10042 2306                        00            .byte	0
10043                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 2307                        00            .byte	0
10045 2308                        00            .byte	0
10046 2309                        00            .byte	0
10047 230A                        00            .byte	0
10048 230B                        00            .byte	0
10049 230C                        1F            .byte	$1F
10050 230D                        18            .byte	$18
10051 230E                        1F            .byte	$1F
10052 230F                        18            .byte	$18
10053 2310                        18            .byte	$18
10054 2311                        18            .byte	$18
10055 2312                        18            .byte	$18
10056 2313                        18            .byte	$18
10057 2314                        18            .byte	$18
10058                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 2315                        00            .byte	0
10060 2316                        00            .byte	0
10061 2317                        00            .byte	0
10062 2318                        00            .byte	0
10063 2319                        00            .byte	0
10064 231A                        00            .byte	0
10065 231B                        00            .byte	0
10066 231C                        3F            .byte	$3F
10067 231D                        36            .byte	$36
10068 231E                        36            .byte	$36
10069 231F                        36            .byte	$36
10070 2320                        36            .byte	$36
10071 2321                        36            .byte	$36
10072 2322                        36            .byte	$36
10073                                           ! 1360  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 2323                        36            .byte	$36
10075 2324                        36            .byte	$36
10076 2325                        36            .byte	$36
10077 2326                        36            .byte	$36
10078 2327                        36            .byte	$36
10079 2328                        36            .byte	$36
10080 2329                        36            .byte	$36
10081 232A                        FF            .byte	$FF
10082 232B                        36            .byte	$36
10083 232C                        36            .byte	$36
10084 232D                        36            .byte	$36
10085 232E                        36            .byte	$36
10086 232F                        36            .byte	$36
10087 2330                        36            .byte	$36
10088                                           ! 1361  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 2331                        18            .byte	$18
10090 2332                        18            .byte	$18
10091 2333                        18            .byte	$18
10092 2334                        18            .byte	$18
10093 2335                        18            .byte	$18
10094 2336                        FF            .byte	$FF
10095 2337                        18            .byte	$18
10096 2338                        FF            .byte	$FF
10097 2339                        18            .byte	$18
10098 233A                        18            .byte	$18
10099 233B                        18            .byte	$18
10100 233C                        18            .byte	$18
10101 233D                        18            .byte	$18
10102 233E                        18            .byte	$18
10103                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 233F                        18            .byte	$18
10105 2340                        18            .byte	$18
10106 2341                        18            .byte	$18
10107 2342                        18            .byte	$18
10108 2343                        18            .byte	$18
10109 2344                        18            .byte	$18
10110 2345                        18            .byte	$18
10111 2346                        F8            .byte	$F8
10112 2347                        00            .byte	0
10113 2348                        00            .byte	0
10114 2349                        00            .byte	0
10115 234A                        00            .byte	0
10116 234B                        00            .byte	0
10117 234C                        00            .byte	0
10118                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 234D                        00            .byte	0
10120 234E                        00            .byte	0
10121 234F                        00            .byte	0
10122 2350                        00            .byte	0
10123 2351                        00            .byte	0
10124 2352                        00            .byte	0
10125 2353                        00            .byte	0
10126 2354                        1F            .byte	$1F
10127 2355                        18            .byte	$18
10128 2356                        18            .byte	$18
10129 2357                        18            .byte	$18
10130 2358                        18            .byte	$18
10131 2359                        18            .byte	$18
10132 235A                        18            .byte	$18
10133                                           ! 1364  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 235B                        FF            .byte	$FF
10135 235C                        FF            .byte	$FF
10136 235D                        FF            .byte	$FF
10137 235E                        FF            .byte	$FF
10138 235F                        FF            .byte	$FF
10139 2360                        FF            .byte	$FF
10140 2361                        FF            .byte	$FF
10141 2362                        FF            .byte	$FF
10142 2363                        FF            .byte	$FF
10143 2364                        FF            .byte	$FF
10144 2365                        FF            .byte	$FF
10145 2366                        FF            .byte	$FF
10146 2367                        FF            .byte	$FF
10147 2368                        FF            .byte	$FF
10148                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2369                        00            .byte	0
10150 236A                        00            .byte	0
10151 236B                        00            .byte	0
10152 236C                        00            .byte	0
10153 236D                        00            .byte	0
10154 236E                        00            .byte	0
10155 236F                        00            .byte	0
10156 2370                        FF            .byte	$FF
10157 2371                        FF            .byte	$FF
10158 2372                        FF            .byte	$FF
10159 2373                        FF            .byte	$FF
10160 2374                        FF            .byte	$FF
10161 2375                        FF            .byte	$FF
10162 2376                        FF            .byte	$FF
10163                                           ! 1366  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10164 2377                        F0            .byte	$F0
10165 2378                        F0            .byte	$F0
10166 2379                        F0            .byte	$F0
10167 237A                        F0            .byte	$F0
10168 237B                        F0            .byte	$F0
10169 237C                        F0            .byte	$F0
10170 237D                        F0            .byte	$F0
10171 237E                        F0            .byte	$F0
10172 237F                        F0            .byte	$F0
10173 2380                        F0            .byte	$F0
10174 2381                        F0            .byte	$F0
10175 2382                        F0            .byte	$F0
10176 2383                        F0            .byte	$F0
10177 2384                        F0            .byte	$F0
10178                                           ! 1367  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
10179 2385                        0F            .byte	$F
10180 2386                        0F            .byte	$F
10181 2387                        0F            .byte	$F
10182 2388                        0F            .byte	$F
10183 2389                        0F            .byte	$F
10184 238A                        0F            .byte	$F
10185 238B                        0F            .byte	$F
10186 238C                        0F            .byte	$F
10187 238D                        0F            .byte	$F
10188                                           ! 1367 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10189 238E                        0F            .byte	$F
10190 238F                        0F            .byte	$F
10191 2390                        0F            .byte	$F
10192 2391                        0F            .byte	$F
10193 2392                        0F            .byte	$F
10194                                           ! 1368  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 2393                        FF            .byte	$FF
10196 2394                        FF            .byte	$FF
10197 2395                        FF            .byte	$FF
10198 2396                        FF            .byte	$FF
10199 2397                        FF            .byte	$FF
10200 2398                        FF            .byte	$FF
10201 2399                        FF            .byte	$FF
10202 239A                        00            .byte	0
10203 239B                        00            .byte	0
10204 239C                        00            .byte	0
10205 239D                        00            .byte	0
10206 239E                        00            .byte	0
10207 239F                        00            .byte	0
10208 23A0                        00            .byte	0
10209                                           ! 1369  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 23A1                        00            .byte	0
10211 23A2                        00            .byte	0
10212 23A3                        00            .byte	0
10213 23A4                        00            .byte	0
10214 23A5                        00            .byte	0
10215 23A6                        76            .byte	$76
10216 23A7                        DC            .byte	$DC
10217 23A8                        D8            .byte	$D8
10218 23A9                        D8            .byte	$D8
10219 23AA                        DC            .byte	$DC
10220 23AB                        76            .byte	$76
10221 23AC                        00            .byte	0
10222 23AD                        00            .byte	0
10223 23AE                        00            .byte	0
10224                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23AF                        00            .byte	0
10226 23B0                        00            .byte	0
10227 23B1                        00            .byte	0
10228 23B2                        00            .byte	0
10229 23B3                        7C            .byte	$7C
10230 23B4                        C6            .byte	$C6
10231 23B5                        FC            .byte	$FC
10232 23B6                        C6            .byte	$C6
10233 23B7                        C6            .byte	$C6
10234 23B8                        FC            .byte	$FC
10235 23B9                        C0            .byte	$C0
10236 23BA                        C0            .byte	$C0
10237 23BB                        40            .byte	$40
10238 23BC                        00            .byte	0
10239                                           ! 1371  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23BD                        00            .byte	0
10241 23BE                        00            .byte	0
10242 23BF                        FE            .byte	$FE
10243 23C0                        C6            .byte	$C6
10244 23C1                        C6            .byte	$C6
10245 23C2                        C0            .byte	$C0
10246 23C3                        C0            .byte	$C0
10247 23C4                        C0            .byte	$C0
10248 23C5                        C0            .byte	$C0
10249 23C6                        C0            .byte	$C0
10250 23C7                        C0            .byte	$C0
10251 23C8                        00            .byte	0
10252 23C9                        00            .byte	0
10253 23CA                        00            .byte	0
10254                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23CB                        00            .byte	0
10256 23CC                        00            .byte	0
10257 23CD                        00            .byte	0
10258 23CE                        00            .byte	0
10259 23CF                        FE            .byte	$FE
10260 23D0                        6C            .byte	$6C
10261 23D1                        6C            .byte	$6C
10262 23D2                        6C            .byte	$6C
10263 23D3                        6C            .byte	$6C
10264 23D4                        6C            .byte	$6C
10265 23D5                        6C            .byte	$6C
10266 23D6                        00            .byte	0
10267 23D7                        00            .byte	0
10268 23D8                        00            .byte	0
10269                                           ! 1373  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23D9                        00            .byte	0
10271 23DA                        00            .byte	0
10272 23DB                        FE            .byte	$FE
10273 23DC                        C6            .byte	$C6
10274 23DD                        60            .byte	$60
10275 23DE                        30            .byte	$30
10276 23DF                        18            .byte	$18
10277 23E0                        30            .byte	$30
10278 23E1                        60            .byte	$60
10279 23E2                        C6            .byte	$C6
10280 23E3                        FE            .byte	$FE
10281 23E4                        00            .byte	0
10282 23E5                        00            .byte	0
10283 23E6                        00            .byte	0
10284                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23E7                        00            .byte	0
10286 23E8                        00            .byte	0
10287 23E9                        00            .byte	0
10288 23EA                        00            .byte	0
10289 23EB                        00            .byte	0
10290 23EC                        7E            .byte	$7E
10291 23ED                        D8            .byte	$D8
10292 23EE                        D8            .byte	$D8
10293 23EF                        D8            .byte	$D8
10294 23F0                        D8            .byte	$D8
10295 23F1                        70            .byte	$70
10296 23F2                        00            .byte	0
10297 23F3                        00            .byte	0
10298 23F4                        00            .byte	0
10299                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23F5                        00            .byte	0
10301 23F6                        00            .byte	0
10302 23F7                        00            .byte	0
10303 23F8                        00            .byte	0
10304 23F9                        66            .byte	$66
10305 23FA                        66            .byte	$66
10306 23FB                        66            .byte	$66
10307 23FC                        66            .byte	$66
10308 23FD                        7C            .byte	$7C
10309 23FE                        60            .byte	$60
10310 23FF                        60            .byte	$60
10311 2400                        C0            .byte	$C0
10312 2401                        00            .byte	0
10313 2402                        00            .byte	0
10314                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 2403                        00            .byte	0
10316 2404                        00            .byte	0
10317 2405                        00            .byte	0
10318 2406                        00            .byte	0
10319 2407                        76            .byte	$76
10320 2408                        DC            .byte	$DC
10321 2409                        18            .byte	$18
10322 240A                        18            .byte	$18
10323 240B                        18            .byte	$18
10324 240C                        18            .byte	$18
10325 240D                        18            .byte	$18
10326 240E                        00            .byte	0
10327 240F                        00            .byte	0
10328 2410                        00            .byte	0
10329                                           ! 1377  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 2411                        00            .byte	0
10331 2412                        00            .byte	0
10332 2413                        7E            .byte	$7E
10333 2414                        18            .byte	$18
10334 2415                        3C            .byte	$3C
10335 2416                        66            .byte	$66
10336 2417                        66            .byte	$66
10337 2418                        66            .byte	$66
10338 2419                        3C            .byte	$3C
10339 241A                        18            .byte	$18
10340 241B                        7E            .byte	$7E
10341 241C                        00            .byte	0
10342 241D                        00            .byte	0
10343 241E                        00            .byte	0
10344                                           ! 1378  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 241F                        00            .byte	0
10346 2420                        00            .byte	0
10347 2421                        38            .byte	$38
10348 2422                        6C            .byte	$6C
10349 2423                        C6            .byte	$C6
10350 2424                        C6            .byte	$C6
10351 2425                        FE            .byte	$FE
10352 2426                        C6            .byte	$C6
10353 2427                        C6            .byte	$C6
10354 2428                        6C            .byte	$6C
10355 2429                        38            .byte	$38
10356 242A                        00            .byte	0
10357 242B                        00            .byte	0
10358 242C                        00            .byte	0
10359                                           ! 1379  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 242D                        00            .byte	0
10361 242E                        00            .byte	0
10362 242F                        38            .byte	$38
10363 2430                        6C            .byte	$6C
10364 2431                        C6            .byte	$C6
10365 2432                        C6            .byte	$C6
10366 2433                        C6            .byte	$C6
10367 2434                        6C            .byte	$6C
10368 2435                        6C            .byte	$6C
10369 2436                        6C            .byte	$6C
10370 2437                        EE            .byte	$EE
10371 2438                        00            .byte	0
10372 2439                        00            .byte	0
10373 243A                        00            .byte	0
10374                                           ! 1380  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 243B                        00            .byte	0
10376 243C                        00            .byte	0
10377 243D                        1E            .byte	$1E
10378 243E                        30            .byte	$30
10379 243F                        18            .byte	$18
10380 2440                        0C            .byte	$C
10381 2441                        3E            .byte	$3E
10382 2442                        66            .byte	$66
10383 2443                        66            .byte	$66
10384 2444                        66            .byte	$66
10385 2445                        3C            .byte	$3C
10386 2446                        00            .byte	0
10387 2447                        00            .byte	0
10388 2448                        00            .byte	0
10389                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2449                        00            .byte	0
10391 244A                        00            .byte	0
10392 244B                        00            .byte	0
10393 244C                        00            .byte	0
10394 244D                        00            .byte	0
10395 244E                        7E            .byte	$7E
10396 244F                        DB            .byte	$DB
10397 2450                        DB            .byte	$DB
10398 2451                        7E            .byte	$7E
10399 2452                        00            .byte	0
10400 2453                        00            .byte	0
10401 2454                        00            .byte	0
10402 2455                        00            .byte	0
10403 2456                        00            .byte	0
10404                                           ! 1382  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 2457                        00            .byte	0
10406 2458                        00            .byte	0
10407 2459                        03            .byte	3
10408 245A                        06            .byte	6
10409 245B                        7E            .byte	$7E
10410 245C                        DB            .byte	$DB
10411 245D                        DB            .byte	$DB
10412 245E                        F3            .byte	$F3
10413 245F                        7E            .byte	$7E
10414 2460                        60            .byte	$60
10415 2461                        C0            .byte	$C0
10416 2462                        00            .byte	0
10417 2463                        00            .byte	0
10418 2464                        00            .byte	0
10419                                           ! 1383  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 2465                        00            .byte	0
10421 2466                        00            .byte	0
10422 2467                        1C            .byte	$1C
10423 2468                        30            .byte	$30
10424 2469                        60            .byte	$60
10425 246A                        60            .byte	$60
10426 246B                        7C            .byte	$7C
10427 246C                        60            .byte	$60
10428 246D                        60            .byte	$60
10429 246E                        30            .byte	$30
10430 246F                        1C            .byte	$1C
10431 2470                        00            .byte	0
10432 2471                        00            .byte	0
10433 2472                        00            .byte	0
10434                                           ! 1384  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 2473                        00            .byte	0
10436 2474                        00            .byte	0
10437 2475                        00            .byte	0
10438 2476                        7C            .byte	$7C
10439 2477                        C6            .byte	$C6
10440 2478                        C6            .byte	$C6
10441 2479                        C6            .byte	$C6
10442 247A                        C6            .byte	$C6
10443 247B                        C6            .byte	$C6
10444 247C                        C6            .byte	$C6
10445 247D                        C6            .byte	$C6
10446 247E                        00            .byte	0
10447 247F                        00            .byte	0
10448 2480                        00            .byte	0
10449                                           ! 1385  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 2481                        00            .byte	0
10451 2482                        00            .byte	0
10452 2483                        00            .byte	0
10453 2484                        FE            .byte	$FE
10454 2485                        00            .byte	0
10455 2486                        00            .byte	0
10456 2487                        FE            .byte	$FE
10457 2488                        00            .byte	0
10458 2489                        00            .byte	0
10459 248A                        FE            .byte	$FE
10460 248B                        00            .byte	0
10461 248C                        00            .byte	0
10462 248D                        00            .byte	0
10463 248E                        00            .byte	0
10464                                           ! 1386  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 248F                        00            .byte	0
10466 2490                        00            .byte	0
10467 2491                        00            .byte	0
10468 2492                        18            .byte	$18
10469 2493                        18            .byte	$18
10470 2494                        7E            .byte	$7E
10471 2495                        18            .byte	$18
10472 2496                        18            .byte	$18
10473 2497                        00            .byte	0
10474 2498                        00            .byte	0
10475 2499                        FF            .byte	$FF
10476 249A                        00            .byte	0
10477 249B                        00            .byte	0
10478 249C                        00            .byte	0
10479                                           ! 1387  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 249D                        00            .byte	0
10481 249E                        00            .byte	0
10482 249F                        30            .byte	$30
10483 24A0                        18            .byte	$18
10484 24A1                        0C            .byte	$C
10485 24A2                        06            .byte	6
10486 24A3                        0C            .byte	$C
10487 24A4                        18            .byte	$18
10488 24A5                        30            .byte	$30
10489 24A6                        00            .byte	0
10490 24A7                        7E            .byte	$7E
10491 24A8                        00            .byte	0
10492 24A9                        00            .byte	0
10493 24AA                        00            .byte	0
10494                                           ! 1388  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24AB                        00            .byte	0
10496 24AC                        00            .byte	0
10497 24AD                        0C            .byte	$C
10498 24AE                        18            .byte	$18
10499 24AF                        30            .byte	$30
10500 24B0                        60            .byte	$60
10501 24B1                        30            .byte	$30
10502 24B2                        18            .byte	$18
10503 24B3                        0C            .byte	$C
10504 24B4                        00            .byte	0
10505 24B5                        7E            .byte	$7E
10506 24B6                        00            .byte	0
10507 24B7                        00            .byte	0
10508 24B8                        00            .byte	0
10509                                           ! 1389  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24B9                        00            .byte	0
10511 24BA                        00            .byte	0
10512 24BB                        0E            .byte	$E
10513 24BC                        1B            .byte	$1B
10514 24BD                        1B            .byte	$1B
10515 24BE                        18            .byte	$18
10516 24BF                        18            .byte	$18
10517 24C0                        18            .byte	$18
10518 24C1                        18            .byte	$18
10519 24C2                        18            .byte	$18
10520 24C3                        18            .byte	$18
10521 24C4                        18            .byte	$18
10522 24C5                        18            .byte	$18
10523 24C6                        18            .byte	$18
10524                                           ! 1390  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10525 24C7                        18            .byte	$18
10526 24C8                        18            .byte	$18
10527 24C9                        18            .byte	$18
10528 24CA                        18            .byte	$18
10529 24CB                        18            .byte	$18
10530 24CC                        18            .byte	$18
10531 24CD                        18            .byte	$18
10532 24CE                        18            .byte	$18
10533 24CF                        D8            .byte	$D8
10534 24D0                        D8            .byte	$D8
10535 24D1                        70            .byte	$70
10536 24D2                        00            .byte	0
10537 24D3                        00            .byte	0
10538 24D4                        00            .byte	0
10539                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x
10540 24D5                        00            .byte	0
10541 24D6                        00            .byte	0
10542 24D7                        00            .byte	0
10543 24D8                        18            .byte	$18
10544 24D9                        18            .byte	$18
10545 24DA                        00            .byte	0
10546 24DB                        7E            .byte	$7E
10547 24DC                        00            .byte	0
10548 24DD                        18            .byte	$18
10549 24DE                        18            .byte	$18
10550                                           ! 1391 00, 0x00, 0x00, 0x00,
10551 24DF                        00            .byte	0
10552 24E0                        00            .byte	0
10553 24E1                        00            .byte	0
10554 24E2                        00            .byte	0
10555                                           ! 1392  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24E3                        00            .byte	0
10557 24E4                        00            .byte	0
10558 24E5                        00            .byte	0
10559 24E6                        00            .byte	0
10560 24E7                        76            .byte	$76
10561 24E8                        DC            .byte	$DC
10562 24E9                        00            .byte	0
10563 24EA                        76            .byte	$76
10564 24EB                        DC            .byte	$DC
10565 24EC                        00            .byte	0
10566 24ED                        00            .byte	0
10567 24EE                        00            .byte	0
10568 24EF                        00            .byte	0
10569 24F0                        00            .byte	0
10570                                           ! 1393  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24F1                        00            .byte	0
10572 24F2                        38            .byte	$38
10573 24F3                        6C            .byte	$6C
10574 24F4                        6C            .byte	$6C
10575 24F5                        38            .byte	$38
10576 24F6                        00            .byte	0
10577 24F7                        00            .byte	0
10578 24F8                        00            .byte	0
10579 24F9                        00            .byte	0
10580 24FA                        00            .byte	0
10581 24FB                        00            .byte	0
10582 24FC                        00            .byte	0
10583 24FD                        00            .byte	0
10584 24FE                        00            .byte	0
10585                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 24FF                        00            .byte	0
10587 2500                        00            .byte	0
10588 2501                        00            .byte	0
10589 2502                        00            .byte	0
10590 2503                        00            .byte	0
10591 2504                        00            .byte	0
10592 2505                        18            .byte	$18
10593 2506                        18            .byte	$18
10594 2507                        00            .byte	0
10595 2508                        00            .byte	0
10596 2509                        00            .byte	0
10597 250A                        00            .byte	0
10598 250B                        00            .byte	0
10599 250C                        00            .byte	0
10600                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 250D                        00            .byte	0
10602 250E                        00            .byte	0
10603 250F                        00            .byte	0
10604 2510                        00            .byte	0
10605 2511                        00            .byte	0
10606 2512                        00            .byte	0
10607 2513                        00            .byte	0
10608 2514                        18            .byte	$18
10609 2515                        00            .byte	0
10610 2516                        00            .byte	0
10611 2517                        00            .byte	0
10612 2518                        00            .byte	0
10613 2519                        00            .byte	0
10614 251A                        00            .byte	0
10615                                           ! 1396  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 251B                        00            .byte	0
10617 251C                        0F            .byte	$F
10618 251D                        0C            .byte	$C
10619 251E                        0C            .byte	$C
10620 251F                        0C            .byte	$C
10621 2520                        0C            .byte	$C
10622 2521                        0C            .byte	$C
10623 2522                        EC            .byte	$EC
10624 2523                        6C            .byte	$6C
10625 2524                        3C            .byte	$3C
10626 2525                        1C            .byte	$1C
10627 2526                        00            .byte	0
10628 2527                        00            .byte	0
10629 2528                        00            .byte	0
10630                                           ! 1397  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2529                        00            .byte	0
10632 252A                        D8            .byte	$D8
10633 252B                        6C            .byte	$6C
10634 252C                        6C            .byte	$6C
10635 252D                        6C            .byte	$6C
10636 252E                        6C            .byte	$6C
10637 252F                        6C            .byte	$6C
10638 2530                        00            .byte	0
10639 2531                        00            .byte	0
10640 2532                        00            .byte	0
10641 2533                        00            .byte	0
10642 2534                        00            .byte	0
10643 2535                        00            .byte	0
10644 2536                        00            .byte	0
10645                                           ! 1398  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 2537                        00            .byte	0
10647 2538                        70            .byte	$70
10648 2539                        D8            .byte	$D8
10649 253A                        30            .byte	$30
10650 253B                        60            .byte	$60
10651 253C                        C8            .byte	$C8
10652 253D                        F8            .byte	$F8
10653 253E                        00            .byte	0
10654 253F                        00            .byte	0
10655 2540                        00            .byte	0
10656 2541                        00            .byte	0
10657 2542                        00            .byte	0
10658 2543                        00            .byte	0
10659 2544                        00            .byte	0
10660                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 2545                        00            .byte	0
10662 2546                        00            .byte	0
10663 2547                        00            .byte	0
10664 2548                        00            .byte	0
10665 2549                        7C            .byte	$7C
10666 254A                        7C            .byte	$7C
10667 254B                        7C            .byte	$7C
10668 254C                        7C            .byte	$7C
10669 254D                        7C            .byte	$7C
10670 254E                        7C            .byte	$7C
10671 254F                        00            .byte	0
10672 2550                        00            .byte	0
10673 2551                        00            .byte	0
10674 2552                        00            .byte	0
10675                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 2553                        00            .byte	0
10677 2554                        00            .byte	0
10678 2555                        00            .byte	0
10679 2556                        00            .byte	0
10680 2557                        00            .byte	0
10681 2558                        00            .byte	0
10682 2559                        00            .byte	0
10683 255A                        00            .byte	0
10684 255B                        00            .byte	0
10685 255C                        00            .byte	0
10686 255D                        00            .byte	0
10687 255E                        00            .byte	0
10688 255F                        00            .byte	0
10689                                           ! 1401 };
10690 2560                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1402 static Bit8u vgafont16[256*16]=
10693                                           ! 1403 {
10694                       00002561            _vgafont16:
10695                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 2561                        00            .byte	0
10697 2562                        00            .byte	0
10698 2563                        00            .byte	0
10699 2564                        00            .byte	0
10700 2565                        00            .byte	0
10701 2566                        00            .byte	0
10702 2567                        00            .byte	0
10703 2568                        00            .byte	0
10704 2569                        00            .byte	0
10705 256A                        00            .byte	0
10706 256B                        00            .byte	0
10707 256C                        00            .byte	0
10708 256D                        00            .byte	0
10709 256E                        00            .byte	0
10710 256F                        00            .byte	0
10711 2570                        00            .byte	0
10712                                           ! 1405  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 2571                        00            .byte	0
10714 2572                        00            .byte	0
10715 2573                        7E            .byte	$7E
10716 2574                        81            .byte	$81
10717 2575                        A5            .byte	$A5
10718 2576                        81            .byte	$81
10719 2577                        81            .byte	$81
10720 2578                        BD            .byte	$BD
10721 2579                        99            .byte	$99
10722 257A                        81            .byte	$81
10723 257B                        81            .byte	$81
10724 257C                        7E            .byte	$7E
10725 257D                        00            .byte	0
10726 257E                        00            .byte	0
10727 257F                        00            .byte	0
10728 2580                        00            .byte	0
10729                                           ! 1406  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 2581                        00            .byte	0
10731 2582                        00            .byte	0
10732 2583                        7E            .byte	$7E
10733 2584                        FF            .byte	$FF
10734 2585                        DB            .byte	$DB
10735 2586                        FF            .byte	$FF
10736 2587                        FF            .byte	$FF
10737 2588                        C3            .byte	$C3
10738 2589                        E7            .byte	$E7
10739 258A                        FF            .byte	$FF
10740 258B                        FF            .byte	$FF
10741 258C                        7E            .byte	$7E
10742 258D                        00            .byte	0
10743 258E                        00            .byte	0
10744 258F                        00            .byte	0
10745 2590                        00            .byte	0
10746                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 2591                        00            .byte	0
10748 2592                        00            .byte	0
10749 2593                        00            .byte	0
10750 2594                        00            .byte	0
10751 2595                        6C            .byte	$6C
10752 2596                        FE            .byte	$FE
10753 2597                        FE            .byte	$FE
10754 2598                        FE            .byte	$FE
10755 2599                        FE            .byte	$FE
10756 259A                        7C            .byte	$7C
10757 259B                        38            .byte	$38
10758 259C                        10            .byte	$10
10759 259D                        00            .byte	0
10760 259E                        00            .byte	0
10761 259F                        00            .byte	0
10762 25A0                        00            .byte	0
10763                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 25A1                        00            .byte	0
10765 25A2                        00            .byte	0
10766 25A3                        00            .byte	0
10767 25A4                        00            .byte	0
10768 25A5                        10            .byte	$10
10769 25A6                        38            .byte	$38
10770 25A7                        7C            .byte	$7C
10771 25A8                        FE            .byte	$FE
10772 25A9                        7C            .byte	$7C
10773 25AA                        38            .byte	$38
10774 25AB                        10            .byte	$10
10775 25AC                        00            .byte	0
10776 25AD                        00            .byte	0
10777 25AE                        00            .byte	0
10778 25AF                        00            .byte	0
10779 25B0                        00            .byte	0
10780                                           ! 1409  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25B1                        00            .byte	0
10782 25B2                        00            .byte	0
10783 25B3                        00            .byte	0
10784 25B4                        18            .byte	$18
10785 25B5                        3C            .byte	$3C
10786 25B6                        3C            .byte	$3C
10787 25B7                        E7            .byte	$E7
10788 25B8                        E7            .byte	$E7
10789 25B9                        E7            .byte	$E7
10790 25BA                        18            .byte	$18
10791 25BB                        18            .byte	$18
10792 25BC                        3C            .byte	$3C
10793 25BD                        00            .byte	0
10794 25BE                        00            .byte	0
10795 25BF                        00            .byte	0
10796 25C0                        00            .byte	0
10797                                           ! 1410  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25C1                        00            .byte	0
10799 25C2                        00            .byte	0
10800 25C3                        00            .byte	0
10801 25C4                        18            .byte	$18
10802 25C5                        3C            .byte	$3C
10803 25C6                        7E            .byte	$7E
10804 25C7                        FF            .byte	$FF
10805 25C8                        FF            .byte	$FF
10806 25C9                        7E            .byte	$7E
10807 25CA                        18            .byte	$18
10808 25CB                        18            .byte	$18
10809 25CC                        3C            .byte	$3C
10810 25CD                        00            .byte	0
10811 25CE                        00            .byte	0
10812 25CF                        00            .byte	0
10813 25D0                        00            .byte	0
10814                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25D1                        00            .byte	0
10816 25D2                        00            .byte	0
10817 25D3                        00            .byte	0
10818 25D4                        00            .byte	0
10819 25D5                        00            .byte	0
10820 25D6                        00            .byte	0
10821 25D7                        18            .byte	$18
10822 25D8                        3C            .byte	$3C
10823 25D9                        3C            .byte	$3C
10824 25DA                        18            .byte	$18
10825 25DB                        00            .byte	0
10826 25DC                        00            .byte	0
10827 25DD                        00            .byte	0
10828 25DE                        00            .byte	0
10829 25DF                        00            .byte	0
10830 25E0                        00            .byte	0
10831                                           ! 1412  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25E1                        FF            .byte	$FF
10833 25E2                        FF            .byte	$FF
10834 25E3                        FF            .byte	$FF
10835 25E4                        FF            .byte	$FF
10836 25E5                        FF            .byte	$FF
10837 25E6                        FF            .byte	$FF
10838 25E7                        E7            .byte	$E7
10839 25E8                        C3            .byte	$C3
10840 25E9                        C3            .byte	$C3
10841 25EA                        E7            .byte	$E7
10842 25EB                        FF            .byte	$FF
10843 25EC                        FF            .byte	$FF
10844 25ED                        FF            .byte	$FF
10845 25EE                        FF            .byte	$FF
10846 25EF                        FF            .byte	$FF
10847 25F0                        FF            .byte	$FF
10848                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25F1                        00            .byte	0
10850 25F2                        00            .byte	0
10851 25F3                        00            .byte	0
10852 25F4                        00            .byte	0
10853 25F5                        00            .byte	0
10854 25F6                        3C            .byte	$3C
10855 25F7                        66            .byte	$66
10856 25F8                        42            .byte	$42
10857 25F9                        42            .byte	$42
10858 25FA                        66            .byte	$66
10859 25FB                        3C            .byte	$3C
10860 25FC                        00            .byte	0
10861 25FD                        00            .byte	0
10862 25FE                        00            .byte	0
10863 25FF                        00            .byte	0
10864 2600                        00            .byte	0
10865                                           ! 1414  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 2601                        FF            .byte	$FF
10867 2602                        FF            .byte	$FF
10868 2603                        FF            .byte	$FF
10869 2604                        FF            .byte	$FF
10870 2605                        FF            .byte	$FF
10871 2606                        C3            .byte	$C3
10872 2607                        99            .byte	$99
10873 2608                        BD            .byte	$BD
10874 2609                        BD            .byte	$BD
10875 260A                        99            .byte	$99
10876 260B                        C3            .byte	$C3
10877 260C                        FF            .byte	$FF
10878 260D                        FF            .byte	$FF
10879 260E                        FF            .byte	$FF
10880 260F                        FF            .byte	$FF
10881 2610                        FF            .byte	$FF
10882                                           ! 1415  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10883 2611                        00            .byte	0
10884 2612                        00            .byte	0
10885 2613                        1E            .byte	$1E
10886 2614                        0E            .byte	$E
10887 2615                        1A            .byte	$1A
10888 2616                        32            .byte	$32
10889 2617                        78            .byte	$78
10890 2618                        CC            .byte	$CC
10891 2619                        CC            .byte	$CC
10892 261A                        CC            .byte	$CC
10893 261B                        CC            .byte	$CC
10894 261C                        78            .byte	$78
10895 261D                        00            .byte	0
10896 261E                        00            .byte	0
10897 261F                        00            .byte	0
10898 2620                        00            .byte	0
10899                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 
10900 2621                        00            .byte	0
10901 2622                        00            .byte	0
10902 2623                        3C            .byte	$3C
10903 2624                        66            .byte	$66
10904 2625                        66            .byte	$66
10905 2626                        66            .byte	$66
10906 2627                        66            .byte	$66
10907 2628                        3C            .byte	$3C
10908 2629                        18            .byte	$18
10909 262A                        7E            .byte	$7E
10910                                           ! 1416 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10911 262B                        18            .byte	$18
10912 262C                        18            .byte	$18
10913 262D                        00            .byte	0
10914 262E                        00            .byte	0
10915 262F                        00            .byte	0
10916 2630                        00            .byte	0
10917                                           ! 1417  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 2631                        00            .byte	0
10919 2632                        00            .byte	0
10920 2633                        3F            .byte	$3F
10921 2634                        33            .byte	$33
10922 2635                        3F            .byte	$3F
10923 2636                        30            .byte	$30
10924 2637                        30            .byte	$30
10925 2638                        30            .byte	$30
10926 2639                        30            .byte	$30
10927 263A                        70            .byte	$70
10928 263B                        F0            .byte	$F0
10929 263C                        E0            .byte	$E0
10930 263D                        00            .byte	0
10931 263E                        00            .byte	0
10932 263F                        00            .byte	0
10933 2640                        00            .byte	0
10934                                           ! 1418  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 2641                        00            .byte	0
10936 2642                        00            .byte	0
10937 2643                        7F            .byte	$7F
10938 2644                        63            .byte	$63
10939 2645                        7F            .byte	$7F
10940 2646                        63            .byte	$63
10941 2647                        63            .byte	$63
10942 2648                        63            .byte	$63
10943 2649                        63            .byte	$63
10944 264A                        67            .byte	$67
10945 264B                        E7            .byte	$E7
10946 264C                        E6            .byte	$E6
10947 264D                        C0            .byte	$C0
10948 264E                        00            .byte	0
10949 264F                        00            .byte	0
10950 2650                        00            .byte	0
10951                                           ! 1419  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 2651                        00            .byte	0
10953 2652                        00            .byte	0
10954 2653                        00            .byte	0
10955 2654                        18            .byte	$18
10956 2655                        18            .byte	$18
10957 2656                        DB            .byte	$DB
10958 2657                        3C            .byte	$3C
10959 2658                        E7            .byte	$E7
10960 2659                        3C            .byte	$3C
10961 265A                        DB            .byte	$DB
10962 265B                        18            .byte	$18
10963 265C                        18            .byte	$18
10964 265D                        00            .byte	0
10965 265E                        00            .byte	0
10966 265F                        00            .byte	0
10967 2660                        00            .byte	0
10968                                           ! 1420  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 2661                        00            .byte	0
10970 2662                        80            .byte	$80
10971 2663                        C0            .byte	$C0
10972 2664                        E0            .byte	$E0
10973 2665                        F0            .byte	$F0
10974 2666                        F8            .byte	$F8
10975 2667                        FE            .byte	$FE
10976 2668                        F8            .byte	$F8
10977 2669                        F0            .byte	$F0
10978 266A                        E0            .byte	$E0
10979 266B                        C0            .byte	$C0
10980 266C                        80            .byte	$80
10981 266D                        00            .byte	0
10982 266E                        00            .byte	0
10983 266F                        00            .byte	0
10984 2670                        00            .byte	0
10985                                           ! 1421  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 2671                        00            .byte	0
10987 2672                        02            .byte	2
10988 2673                        06            .byte	6
10989 2674                        0E            .byte	$E
10990 2675                        1E            .byte	$1E
10991 2676                        3E            .byte	$3E
10992 2677                        FE            .byte	$FE
10993 2678                        3E            .byte	$3E
10994 2679                        1E            .byte	$1E
10995 267A                        0E            .byte	$E
10996 267B                        06            .byte	6
10997 267C                        02            .byte	2
10998 267D                        00            .byte	0
10999 267E                        00            .byte	0
11000 267F                        00            .byte	0
11001 2680                        00            .byte	0
11002                                           ! 1422  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 2681                        00            .byte	0
11004 2682                        00            .byte	0
11005 2683                        18            .byte	$18
11006 2684                        3C            .byte	$3C
11007 2685                        7E            .byte	$7E
11008 2686                        18            .byte	$18
11009 2687                        18            .byte	$18
11010 2688                        18            .byte	$18
11011 2689                        7E            .byte	$7E
11012 268A                        3C            .byte	$3C
11013 268B                        18            .byte	$18
11014 268C                        00            .byte	0
11015 268D                        00            .byte	0
11016 268E                        00            .byte	0
11017 268F                        00            .byte	0
11018 2690                        00            .byte	0
11019                                           ! 1423  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 2691                        00            .byte	0
11021 2692                        00            .byte	0
11022 2693                        66            .byte	$66
11023 2694                        66            .byte	$66
11024 2695                        66            .byte	$66
11025 2696                        66            .byte	$66
11026 2697                        66            .byte	$66
11027 2698                        66            .byte	$66
11028 2699                        66            .byte	$66
11029 269A                        00            .byte	0
11030 269B                        66            .byte	$66
11031 269C                        66            .byte	$66
11032 269D                        00            .byte	0
11033 269E                        00            .byte	0
11034 269F                        00            .byte	0
11035 26A0                        00            .byte	0
11036                                           ! 1424  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 26A1                        00            .byte	0
11038 26A2                        00            .byte	0
11039 26A3                        7F            .byte	$7F
11040 26A4                        DB            .byte	$DB
11041 26A5                        DB            .byte	$DB
11042 26A6                        DB            .byte	$DB
11043 26A7                        7B            .byte	$7B
11044 26A8                        1B            .byte	$1B
11045 26A9                        1B            .byte	$1B
11046 26AA                        1B            .byte	$1B
11047 26AB                        1B            .byte	$1B
11048 26AC                        1B            .byte	$1B
11049 26AD                        00            .byte	0
11050 26AE                        00            .byte	0
11051 26AF                        00            .byte	0
11052 26B0                        00            .byte	0
11053                                           ! 1425  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26B1                        00            .byte	0
11055 26B2                        7C            .byte	$7C
11056 26B3                        C6            .byte	$C6
11057 26B4                        60            .byte	$60
11058 26B5                        38            .byte	$38
11059 26B6                        6C            .byte	$6C
11060 26B7                        C6            .byte	$C6
11061 26B8                        C6            .byte	$C6
11062 26B9                        6C            .byte	$6C
11063 26BA                        38            .byte	$38
11064 26BB                        0C            .byte	$C
11065 26BC                        C6            .byte	$C6
11066 26BD                        7C            .byte	$7C
11067 26BE                        00            .byte	0
11068 26BF                        00            .byte	0
11069 26C0                        00            .byte	0
11070                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26C1                        00            .byte	0
11072 26C2                        00            .byte	0
11073 26C3                        00            .byte	0
11074 26C4                        00            .byte	0
11075 26C5                        00            .byte	0
11076 26C6                        00            .byte	0
11077 26C7                        00            .byte	0
11078 26C8                        00            .byte	0
11079 26C9                        FE            .byte	$FE
11080 26CA                        FE            .byte	$FE
11081 26CB                        FE            .byte	$FE
11082 26CC                        FE            .byte	$FE
11083 26CD                        00            .byte	0
11084 26CE                        00            .byte	0
11085 26CF                        00            .byte	0
11086 26D0                        00            .byte	0
11087                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26D1                        00            .byte	0
11089 26D2                        00            .byte	0
11090 26D3                        18            .byte	$18
11091 26D4                        3C            .byte	$3C
11092 26D5                        7E            .byte	$7E
11093 26D6                        18            .byte	$18
11094 26D7                        18            .byte	$18
11095 26D8                        18            .byte	$18
11096 26D9                        7E            .byte	$7E
11097 26DA                        3C            .byte	$3C
11098 26DB                        18            .byte	$18
11099 26DC                        7E            .byte	$7E
11100 26DD                        00            .byte	0
11101 26DE                        00            .byte	0
11102 26DF                        00            .byte	0
11103 26E0                        00            .byte	0
11104                                           ! 1428  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26E1                        00            .byte	0
11106 26E2                        00            .byte	0
11107 26E3                        18            .byte	$18
11108 26E4                        3C            .byte	$3C
11109 26E5                        7E            .byte	$7E
11110 26E6                        18            .byte	$18
11111 26E7                        18            .byte	$18
11112 26E8                        18            .byte	$18
11113 26E9                        18            .byte	$18
11114 26EA                        18            .byte	$18
11115 26EB                        18            .byte	$18
11116 26EC                        18            .byte	$18
11117 26ED                        00            .byte	0
11118 26EE                        00            .byte	0
11119 26EF                        00            .byte	0
11120 26F0                        00            .byte	0
11121                                           ! 1429  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26F1                        00            .byte	0
11123 26F2                        00            .byte	0
11124 26F3                        18            .byte	$18
11125 26F4                        18            .byte	$18
11126 26F5                        18            .byte	$18
11127 26F6                        18            .byte	$18
11128 26F7                        18            .byte	$18
11129 26F8                        18            .byte	$18
11130 26F9                        18            .byte	$18
11131 26FA                        7E            .byte	$7E
11132 26FB                        3C            .byte	$3C
11133 26FC                        18            .byte	$18
11134 26FD                        00            .byte	0
11135 26FE                        00            .byte	0
11136 26FF                        00            .byte	0
11137 2700                        00            .byte	0
11138                                           ! 1430  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 2701                        00            .byte	0
11140 2702                        00            .byte	0
11141 2703                        00            .byte	0
11142 2704                        00            .byte	0
11143 2705                        00            .byte	0
11144 2706                        18            .byte	$18
11145 2707                        0C            .byte	$C
11146 2708                        FE            .byte	$FE
11147 2709                        0C            .byte	$C
11148 270A                        18            .byte	$18
11149 270B                        00            .byte	0
11150 270C                        00            .byte	0
11151 270D                        00            .byte	0
11152 270E                        00            .byte	0
11153 270F                        00            .byte	0
11154 2710                        00            .byte	0
11155                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 2711                        00            .byte	0
11157 2712                        00            .byte	0
11158 2713                        00            .byte	0
11159 2714                        00            .byte	0
11160 2715                        00            .byte	0
11161 2716                        30            .byte	$30
11162 2717                        60            .byte	$60
11163 2718                        FE            .byte	$FE
11164 2719                        60            .byte	$60
11165 271A                        30            .byte	$30
11166 271B                        00            .byte	0
11167 271C                        00            .byte	0
11168 271D                        00            .byte	0
11169 271E                        00            .byte	0
11170 271F                        00            .byte	0
11171 2720                        00            .byte	0
11172                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 2721                        00            .byte	0
11174 2722                        00            .byte	0
11175 2723                        00            .byte	0
11176 2724                        00            .byte	0
11177 2725                        00            .byte	0
11178 2726                        00            .byte	0
11179 2727                        C0            .byte	$C0
11180 2728                        C0            .byte	$C0
11181 2729                        C0            .byte	$C0
11182 272A                        FE            .byte	$FE
11183 272B                        00            .byte	0
11184 272C                        00            .byte	0
11185 272D                        00            .byte	0
11186 272E                        00            .byte	0
11187 272F                        00            .byte	0
11188 2730                        00            .byte	0
11189                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 2731                        00            .byte	0
11191 2732                        00            .byte	0
11192 2733                        00            .byte	0
11193 2734                        00            .byte	0
11194 2735                        00            .byte	0
11195 2736                        24            .byte	$24
11196 2737                        66            .byte	$66
11197 2738                        FF            .byte	$FF
11198 2739                        66            .byte	$66
11199 273A                        24            .byte	$24
11200 273B                        00            .byte	0
11201 273C                        00            .byte	0
11202 273D                        00            .byte	0
11203 273E                        00            .byte	0
11204 273F                        00            .byte	0
11205 2740                        00            .byte	0
11206                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 2741                        00            .byte	0
11208 2742                        00            .byte	0
11209 2743                        00            .byte	0
11210 2744                        00            .byte	0
11211 2745                        10            .byte	$10
11212 2746                        38            .byte	$38
11213 2747                        38            .byte	$38
11214 2748                        7C            .byte	$7C
11215 2749                        7C            .byte	$7C
11216 274A                        FE            .byte	$FE
11217 274B                        FE            .byte	$FE
11218 274C                        00            .byte	0
11219 274D                        00            .byte	0
11220 274E                        00            .byte	0
11221 274F                        00            .byte	0
11222 2750                        00            .byte	0
11223                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 2751                        00            .byte	0
11225 2752                        00            .byte	0
11226 2753                        00            .byte	0
11227 2754                        00            .byte	0
11228 2755                        FE            .byte	$FE
11229 2756                        FE            .byte	$FE
11230 2757                        7C            .byte	$7C
11231 2758                        7C            .byte	$7C
11232 2759                        38            .byte	$38
11233 275A                        38            .byte	$38
11234 275B                        10            .byte	$10
11235 275C                        00            .byte	0
11236 275D                        00            .byte	0
11237 275E                        00            .byte	0
11238 275F                        00            .byte	0
11239 2760                        00            .byte	0
11240                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 2761                        00            .byte	0
11242 2762                        00            .byte	0
11243 2763                        00            .byte	0
11244 2764                        00            .byte	0
11245 2765                        00            .byte	0
11246 2766                        00            .byte	0
11247 2767                        00            .byte	0
11248 2768                        00            .byte	0
11249 2769                        00            .byte	0
11250 276A                        00            .byte	0
11251 276B                        00            .byte	0
11252 276C                        00            .byte	0
11253 276D                        00            .byte	0
11254 276E                        00            .byte	0
11255 276F                        00            .byte	0
11256 2770                        00            .byte	0
11257                                           ! 1437  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18,
11258 2771                        00            .byte	0
11259 2772                        00            .byte	0
11260 2773                        18            .byte	$18
11261 2774                        3C            .byte	$3C
11262 2775                        3C            .byte	$3C
11263 2776                        3C            .byte	$3C
11264 2777                        18            .byte	$18
11265 2778                        18            .byte	$18
11266 2779                        18            .byte	$18
11267 277A                        00            .byte	0
11268 277B                        18            .byte	$18
11269                                           ! 1437  0x00, 0x00, 0x00, 0x00,
11270 277C                        18            .byte	$18
11271 277D                        00            .byte	0
11272 277E                        00            .byte	0
11273 277F                        00            .byte	0
11274 2780                        00            .byte	0
11275                                           ! 1438  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 2781                        00            .byte	0
11277 2782                        66            .byte	$66
11278 2783                        66            .byte	$66
11279 2784                        66            .byte	$66
11280 2785                        24            .byte	$24
11281 2786                        00            .byte	0
11282 2787                        00            .byte	0
11283 2788                        00            .byte	0
11284 2789                        00            .byte	0
11285 278A                        00            .byte	0
11286 278B                        00            .byte	0
11287 278C                        00            .byte	0
11288 278D                        00            .byte	0
11289 278E                        00            .byte	0
11290 278F                        00            .byte	0
11291 2790                        00            .byte	0
11292                                           ! 1439  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 2791                        00            .byte	0
11294 2792                        00            .byte	0
11295 2793                        00            .byte	0
11296 2794                        6C            .byte	$6C
11297 2795                        6C            .byte	$6C
11298 2796                        FE            .byte	$FE
11299 2797                        6C            .byte	$6C
11300 2798                        6C            .byte	$6C
11301 2799                        6C            .byte	$6C
11302 279A                        FE            .byte	$FE
11303 279B                        6C            .byte	$6C
11304 279C                        6C            .byte	$6C
11305 279D                        00            .byte	0
11306 279E                        00            .byte	0
11307 279F                        00            .byte	0
11308 27A0                        00            .byte	0
11309                                           ! 1440  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 27A1                        18            .byte	$18
11311 27A2                        18            .byte	$18
11312 27A3                        7C            .byte	$7C
11313 27A4                        C6            .byte	$C6
11314 27A5                        C2            .byte	$C2
11315 27A6                        C0            .byte	$C0
11316 27A7                        7C            .byte	$7C
11317 27A8                        06            .byte	6
11318 27A9                        06            .byte	6
11319 27AA                        86            .byte	$86
11320 27AB                        C6            .byte	$C6
11321 27AC                        7C            .byte	$7C
11322 27AD                        18            .byte	$18
11323 27AE                        18            .byte	$18
11324 27AF                        00            .byte	0
11325 27B0                        00            .byte	0
11326                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27B1                        00            .byte	0
11328 27B2                        00            .byte	0
11329 27B3                        00            .byte	0
11330 27B4                        00            .byte	0
11331 27B5                        C2            .byte	$C2
11332 27B6                        C6            .byte	$C6
11333 27B7                        0C            .byte	$C
11334 27B8                        18            .byte	$18
11335 27B9                        30            .byte	$30
11336 27BA                        60            .byte	$60
11337 27BB                        C6            .byte	$C6
11338 27BC                        86            .byte	$86
11339 27BD                        00            .byte	0
11340 27BE                        00            .byte	0
11341 27BF                        00            .byte	0
11342 27C0                        00            .byte	0
11343                                           ! 1442  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27C1                        00            .byte	0
11345 27C2                        00            .byte	0
11346 27C3                        38            .byte	$38
11347 27C4                        6C            .byte	$6C
11348 27C5                        6C            .byte	$6C
11349 27C6                        38            .byte	$38
11350 27C7                        76            .byte	$76
11351 27C8                        DC            .byte	$DC
11352 27C9                        CC            .byte	$CC
11353 27CA                        CC            .byte	$CC
11354 27CB                        CC            .byte	$CC
11355 27CC                        76            .byte	$76
11356 27CD                        00            .byte	0
11357 27CE                        00            .byte	0
11358 27CF                        00            .byte	0
11359 27D0                        00            .byte	0
11360                                           ! 1443  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27D1                        00            .byte	0
11362 27D2                        30            .byte	$30
11363 27D3                        30            .byte	$30
11364 27D4                        30            .byte	$30
11365 27D5                        60            .byte	$60
11366 27D6                        00            .byte	0
11367 27D7                        00            .byte	0
11368 27D8                        00            .byte	0
11369 27D9                        00            .byte	0
11370 27DA                        00            .byte	0
11371 27DB                        00            .byte	0
11372 27DC                        00            .byte	0
11373 27DD                        00            .byte	0
11374 27DE                        00            .byte	0
11375 27DF                        00            .byte	0
11376 27E0                        00            .byte	0
11377                                           ! 1444  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27E1                        00            .byte	0
11379 27E2                        00            .byte	0
11380 27E3                        0C            .byte	$C
11381 27E4                        18            .byte	$18
11382 27E5                        30            .byte	$30
11383 27E6                        30            .byte	$30
11384 27E7                        30            .byte	$30
11385 27E8                        30            .byte	$30
11386 27E9                        30            .byte	$30
11387 27EA                        30            .byte	$30
11388 27EB                        18            .byte	$18
11389 27EC                        0C            .byte	$C
11390 27ED                        00            .byte	0
11391 27EE                        00            .byte	0
11392 27EF                        00            .byte	0
11393 27F0                        00            .byte	0
11394                                           ! 1445  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27F1                        00            .byte	0
11396 27F2                        00            .byte	0
11397 27F3                        30            .byte	$30
11398 27F4                        18            .byte	$18
11399 27F5                        0C            .byte	$C
11400 27F6                        0C            .byte	$C
11401 27F7                        0C            .byte	$C
11402 27F8                        0C            .byte	$C
11403 27F9                        0C            .byte	$C
11404 27FA                        0C            .byte	$C
11405 27FB                        18            .byte	$18
11406 27FC                        30            .byte	$30
11407 27FD                        00            .byte	0
11408 27FE                        00            .byte	0
11409 27FF                        00            .byte	0
11410 2800                        00            .byte	0
11411                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 2801                        00            .byte	0
11413 2802                        00            .byte	0
11414 2803                        00            .byte	0
11415 2804                        00            .byte	0
11416 2805                        00            .byte	0
11417 2806                        66            .byte	$66
11418 2807                        3C            .byte	$3C
11419 2808                        FF            .byte	$FF
11420 2809                        3C            .byte	$3C
11421 280A                        66            .byte	$66
11422 280B                        00            .byte	0
11423 280C                        00            .byte	0
11424 280D                        00            .byte	0
11425 280E                        00            .byte	0
11426 280F                        00            .byte	0
11427 2810                        00            .byte	0
11428                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 2811                        00            .byte	0
11430 2812                        00            .byte	0
11431 2813                        00            .byte	0
11432 2814                        00            .byte	0
11433 2815                        00            .byte	0
11434 2816                        18            .byte	$18
11435 2817                        18            .byte	$18
11436 2818                        7E            .byte	$7E
11437 2819                        18            .byte	$18
11438 281A                        18            .byte	$18
11439 281B                        00            .byte	0
11440 281C                        00            .byte	0
11441 281D                        00            .byte	0
11442 281E                        00            .byte	0
11443 281F                        00            .byte	0
11444 2820                        00            .byte	0
11445                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 2821                        00            .byte	0
11447 2822                        00            .byte	0
11448 2823                        00            .byte	0
11449 2824                        00            .byte	0
11450 2825                        00            .byte	0
11451 2826                        00            .byte	0
11452 2827                        00            .byte	0
11453 2828                        00            .byte	0
11454 2829                        00            .byte	0
11455 282A                        18            .byte	$18
11456 282B                        18            .byte	$18
11457 282C                        18            .byte	$18
11458 282D                        30            .byte	$30
11459 282E                        00            .byte	0
11460 282F                        00            .byte	0
11461 2830                        00            .byte	0
11462                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 2831                        00            .byte	0
11464 2832                        00            .byte	0
11465 2833                        00            .byte	0
11466 2834                        00            .byte	0
11467 2835                        00            .byte	0
11468 2836                        00            .byte	0
11469 2837                        00            .byte	0
11470 2838                        FE            .byte	$FE
11471 2839                        00            .byte	0
11472 283A                        00            .byte	0
11473 283B                        00            .byte	0
11474 283C                        00            .byte	0
11475 283D                        00            .byte	0
11476 283E                        00            .byte	0
11477 283F                        00            .byte	0
11478 2840                        00            .byte	0
11479                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 2841                        00            .byte	0
11481 2842                        00            .byte	0
11482 2843                        00            .byte	0
11483 2844                        00            .byte	0
11484 2845                        00            .byte	0
11485 2846                        00            .byte	0
11486 2847                        00            .byte	0
11487 2848                        00            .byte	0
11488 2849                        00            .byte	0
11489 284A                        00            .byte	0
11490 284B                        18            .byte	$18
11491 284C                        18            .byte	$18
11492 284D                        00            .byte	0
11493 284E                        00            .byte	0
11494 284F                        00            .byte	0
11495 2850                        00            .byte	0
11496                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 2851                        00            .byte	0
11498 2852                        00            .byte	0
11499 2853                        00            .byte	0
11500 2854                        00            .byte	0
11501 2855                        02            .byte	2
11502 2856                        06            .byte	6
11503 2857                        0C            .byte	$C
11504 2858                        18            .byte	$18
11505 2859                        30            .byte	$30
11506 285A                        60            .byte	$60
11507 285B                        C0            .byte	$C0
11508 285C                        80            .byte	$80
11509 285D                        00            .byte	0
11510 285E                        00            .byte	0
11511 285F                        00            .byte	0
11512 2860                        00            .byte	0
11513                                           ! 1452  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 2861                        00            .byte	0
11515 2862                        00            .byte	0
11516 2863                        3C            .byte	$3C
11517 2864                        66            .byte	$66
11518 2865                        C3            .byte	$C3
11519 2866                        C3            .byte	$C3
11520 2867                        DB            .byte	$DB
11521 2868                        DB            .byte	$DB
11522 2869                        C3            .byte	$C3
11523 286A                        C3            .byte	$C3
11524 286B                        66            .byte	$66
11525 286C                        3C            .byte	$3C
11526 286D                        00            .byte	0
11527 286E                        00            .byte	0
11528 286F                        00            .byte	0
11529 2870                        00            .byte	0
11530                                           ! 1453  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 2871                        00            .byte	0
11532 2872                        00            .byte	0
11533 2873                        18            .byte	$18
11534 2874                        38            .byte	$38
11535 2875                        78            .byte	$78
11536 2876                        18            .byte	$18
11537 2877                        18            .byte	$18
11538 2878                        18            .byte	$18
11539 2879                        18            .byte	$18
11540 287A                        18            .byte	$18
11541 287B                        18            .byte	$18
11542 287C                        7E            .byte	$7E
11543 287D                        00            .byte	0
11544 287E                        00            .byte	0
11545 287F                        00            .byte	0
11546 2880                        00            .byte	0
11547                                           ! 1454  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 2881                        00            .byte	0
11549 2882                        00            .byte	0
11550 2883                        7C            .byte	$7C
11551 2884                        C6            .byte	$C6
11552 2885                        06            .byte	6
11553 2886                        0C            .byte	$C
11554 2887                        18            .byte	$18
11555 2888                        30            .byte	$30
11556 2889                        60            .byte	$60
11557 288A                        C0            .byte	$C0
11558 288B                        C6            .byte	$C6
11559 288C                        FE            .byte	$FE
11560 288D                        00            .byte	0
11561 288E                        00            .byte	0
11562 288F                        00            .byte	0
11563 2890                        00            .byte	0
11564                                           ! 1455  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 2891                        00            .byte	0
11566 2892                        00            .byte	0
11567 2893                        7C            .byte	$7C
11568 2894                        C6            .byte	$C6
11569 2895                        06            .byte	6
11570 2896                        06            .byte	6
11571 2897                        3C            .byte	$3C
11572 2898                        06            .byte	6
11573 2899                        06            .byte	6
11574 289A                        06            .byte	6
11575 289B                        C6            .byte	$C6
11576 289C                        7C            .byte	$7C
11577 289D                        00            .byte	0
11578 289E                        00            .byte	0
11579 289F                        00            .byte	0
11580 28A0                        00            .byte	0
11581                                           ! 1456  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 28A1                        00            .byte	0
11583 28A2                        00            .byte	0
11584 28A3                        0C            .byte	$C
11585 28A4                        1C            .byte	$1C
11586 28A5                        3C            .byte	$3C
11587 28A6                        6C            .byte	$6C
11588 28A7                        CC            .byte	$CC
11589 28A8                        FE            .byte	$FE
11590 28A9                        0C            .byte	$C
11591 28AA                        0C            .byte	$C
11592 28AB                        0C            .byte	$C
11593 28AC                        1E            .byte	$1E
11594 28AD                        00            .byte	0
11595 28AE                        00            .byte	0
11596 28AF                        00            .byte	0
11597 28B0                        00            .byte	0
11598                                           ! 1457  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11599 28B1                        00            .byte	0
11600 28B2                        00            .byte	0
11601 28B3                        FE            .byte	$FE
11602 28B4                        C0            .byte	$C0
11603 28B5                        C0            .byte	$C0
11604 28B6                        C0            .byte	$C0
11605 28B7                        FC            .byte	$FC
11606 28B8                        06            .byte	6
11607 28B9                        06            .byte	6
11608 28BA                        06            .byte	6
11609 28BB                        C6            .byte	$C6
11610 28BC                        7C            .byte	$7C
11611 28BD                        00            .byte	0
11612 28BE                        00            .byte	0
11613 28BF                        00            .byte	0
11614 28C0                        00            .byte	0
11615                                           ! 1458  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00
11616 28C1                        00            .byte	0
11617 28C2                        00            .byte	0
11618 28C3                        38            .byte	$38
11619 28C4                        60            .byte	$60
11620 28C5                        C0            .byte	$C0
11621 28C6                        C0            .byte	$C0
11622 28C7                        FC            .byte	$FC
11623 28C8                        C6            .byte	$C6
11624 28C9                        C6            .byte	$C6
11625 28CA                        C6            .byte	$C6
11626 28CB                        C6            .byte	$C6
11627 28CC                        7C            .byte	$7C
11628 28CD                        00            .byte	0
11629                                           ! 1458 , 0x00, 0x00,
11630 28CE                        00            .byte	0
11631 28CF                        00            .byte	0
11632 28D0                        00            .byte	0
11633                                           ! 1459  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28D1                        00            .byte	0
11635 28D2                        00            .byte	0
11636 28D3                        FE            .byte	$FE
11637 28D4                        C6            .byte	$C6
11638 28D5                        06            .byte	6
11639 28D6                        06            .byte	6
11640 28D7                        0C            .byte	$C
11641 28D8                        18            .byte	$18
11642 28D9                        30            .byte	$30
11643 28DA                        30            .byte	$30
11644 28DB                        30            .byte	$30
11645 28DC                        30            .byte	$30
11646 28DD                        00            .byte	0
11647 28DE                        00            .byte	0
11648 28DF                        00            .byte	0
11649 28E0                        00            .byte	0
11650                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28E1                        00            .byte	0
11652 28E2                        00            .byte	0
11653 28E3                        7C            .byte	$7C
11654 28E4                        C6            .byte	$C6
11655 28E5                        C6            .byte	$C6
11656 28E6                        C6            .byte	$C6
11657 28E7                        7C            .byte	$7C
11658 28E8                        C6            .byte	$C6
11659 28E9                        C6            .byte	$C6
11660 28EA                        C6            .byte	$C6
11661 28EB                        C6            .byte	$C6
11662 28EC                        7C            .byte	$7C
11663 28ED                        00            .byte	0
11664 28EE                        00            .byte	0
11665 28EF                        00            .byte	0
11666 28F0                        00            .byte	0
11667                                           ! 1461  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28F1                        00            .byte	0
11669 28F2                        00            .byte	0
11670 28F3                        7C            .byte	$7C
11671 28F4                        C6            .byte	$C6
11672 28F5                        C6            .byte	$C6
11673 28F6                        C6            .byte	$C6
11674 28F7                        7E            .byte	$7E
11675 28F8                        06            .byte	6
11676 28F9                        06            .byte	6
11677 28FA                        06            .byte	6
11678 28FB                        0C            .byte	$C
11679 28FC                        78            .byte	$78
11680 28FD                        00            .byte	0
11681 28FE                        00            .byte	0
11682 28FF                        00            .byte	0
11683 2900                        00            .byte	0
11684                                           ! 1462  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 2901                        00            .byte	0
11686 2902                        00            .byte	0
11687 2903                        00            .byte	0
11688 2904                        00            .byte	0
11689 2905                        18            .byte	$18
11690 2906                        18            .byte	$18
11691 2907                        00            .byte	0
11692 2908                        00            .byte	0
11693 2909                        00            .byte	0
11694 290A                        18            .byte	$18
11695 290B                        18            .byte	$18
11696 290C                        00            .byte	0
11697 290D                        00            .byte	0
11698 290E                        00            .byte	0
11699 290F                        00            .byte	0
11700 2910                        00            .byte	0
11701                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 2911                        00            .byte	0
11703 2912                        00            .byte	0
11704 2913                        00            .byte	0
11705 2914                        00            .byte	0
11706 2915                        18            .byte	$18
11707 2916                        18            .byte	$18
11708 2917                        00            .byte	0
11709 2918                        00            .byte	0
11710 2919                        00            .byte	0
11711 291A                        18            .byte	$18
11712 291B                        18            .byte	$18
11713 291C                        30            .byte	$30
11714 291D                        00            .byte	0
11715 291E                        00            .byte	0
11716 291F                        00            .byte	0
11717 2920                        00            .byte	0
11718                                           ! 1464  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 2921                        00            .byte	0
11720 2922                        00            .byte	0
11721 2923                        00            .byte	0
11722 2924                        06            .byte	6
11723 2925                        0C            .byte	$C
11724 2926                        18            .byte	$18
11725 2927                        30            .byte	$30
11726 2928                        60            .byte	$60
11727 2929                        30            .byte	$30
11728 292A                        18            .byte	$18
11729 292B                        0C            .byte	$C
11730 292C                        06            .byte	6
11731 292D                        00            .byte	0
11732 292E                        00            .byte	0
11733 292F                        00            .byte	0
11734 2930                        00            .byte	0
11735                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 2931                        00            .byte	0
11737 2932                        00            .byte	0
11738 2933                        00            .byte	0
11739 2934                        00            .byte	0
11740 2935                        00            .byte	0
11741 2936                        7E            .byte	$7E
11742 2937                        00            .byte	0
11743 2938                        00            .byte	0
11744 2939                        7E            .byte	$7E
11745 293A                        00            .byte	0
11746 293B                        00            .byte	0
11747 293C                        00            .byte	0
11748 293D                        00            .byte	0
11749 293E                        00            .byte	0
11750 293F                        00            .byte	0
11751 2940                        00            .byte	0
11752                                           ! 1466  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 2941                        00            .byte	0
11754 2942                        00            .byte	0
11755 2943                        00            .byte	0
11756 2944                        60            .byte	$60
11757 2945                        30            .byte	$30
11758 2946                        18            .byte	$18
11759 2947                        0C            .byte	$C
11760 2948                        06            .byte	6
11761 2949                        0C            .byte	$C
11762 294A                        18            .byte	$18
11763 294B                        30            .byte	$30
11764 294C                        60            .byte	$60
11765 294D                        00            .byte	0
11766 294E                        00            .byte	0
11767 294F                        00            .byte	0
11768 2950                        00            .byte	0
11769                                           ! 1467  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 2951                        00            .byte	0
11771 2952                        00            .byte	0
11772 2953                        7C            .byte	$7C
11773 2954                        C6            .byte	$C6
11774 2955                        C6            .byte	$C6
11775 2956                        0C            .byte	$C
11776 2957                        18            .byte	$18
11777 2958                        18            .byte	$18
11778 2959                        18            .byte	$18
11779 295A                        00            .byte	0
11780 295B                        18            .byte	$18
11781 295C                        18            .byte	$18
11782 295D                        00            .byte	0
11783 295E                        00            .byte	0
11784 295F                        00            .byte	0
11785 2960                        00            .byte	0
11786                                           ! 1468  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 2961                        00            .byte	0
11788 2962                        00            .byte	0
11789 2963                        00            .byte	0
11790 2964                        7C            .byte	$7C
11791 2965                        C6            .byte	$C6
11792 2966                        C6            .byte	$C6
11793 2967                        DE            .byte	$DE
11794 2968                        DE            .byte	$DE
11795 2969                        DE            .byte	$DE
11796 296A                        DC            .byte	$DC
11797 296B                        C0            .byte	$C0
11798 296C                        7C            .byte	$7C
11799 296D                        00            .byte	0
11800 296E                        00            .byte	0
11801 296F                        00            .byte	0
11802 2970                        00            .byte	0
11803                                           ! 1469  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 2971                        00            .byte	0
11805 2972                        00            .byte	0
11806 2973                        10            .byte	$10
11807 2974                        38            .byte	$38
11808 2975                        6C            .byte	$6C
11809 2976                        C6            .byte	$C6
11810 2977                        C6            .byte	$C6
11811 2978                        FE            .byte	$FE
11812 2979                        C6            .byte	$C6
11813 297A                        C6            .byte	$C6
11814 297B                        C6            .byte	$C6
11815 297C                        C6            .byte	$C6
11816 297D                        00            .byte	0
11817 297E                        00            .byte	0
11818 297F                        00            .byte	0
11819 2980                        00            .byte	0
11820                                           ! 1470  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 2981                        00            .byte	0
11822 2982                        00            .byte	0
11823 2983                        FC            .byte	$FC
11824 2984                        66            .byte	$66
11825 2985                        66            .byte	$66
11826 2986                        66            .byte	$66
11827 2987                        7C            .byte	$7C
11828 2988                        66            .byte	$66
11829 2989                        66            .byte	$66
11830 298A                        66            .byte	$66
11831 298B                        66            .byte	$66
11832 298C                        FC            .byte	$FC
11833 298D                        00            .byte	0
11834 298E                        00            .byte	0
11835 298F                        00            .byte	0
11836 2990                        00            .byte	0
11837                                           ! 1471  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 2991                        00            .byte	0
11839 2992                        00            .byte	0
11840 2993                        3C            .byte	$3C
11841 2994                        66            .byte	$66
11842 2995                        C2            .byte	$C2
11843 2996                        C0            .byte	$C0
11844 2997                        C0            .byte	$C0
11845 2998                        C0            .byte	$C0
11846 2999                        C0            .byte	$C0
11847 299A                        C2            .byte	$C2
11848 299B                        66            .byte	$66
11849 299C                        3C            .byte	$3C
11850 299D                        00            .byte	0
11851 299E                        00            .byte	0
11852 299F                        00            .byte	0
11853 29A0                        00            .byte	0
11854                                           ! 1472  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 29A1                        00            .byte	0
11856 29A2                        00            .byte	0
11857 29A3                        F8            .byte	$F8
11858 29A4                        6C            .byte	$6C
11859 29A5                        66            .byte	$66
11860 29A6                        66            .byte	$66
11861 29A7                        66            .byte	$66
11862 29A8                        66            .byte	$66
11863 29A9                        66            .byte	$66
11864 29AA                        66            .byte	$66
11865 29AB                        6C            .byte	$6C
11866 29AC                        F8            .byte	$F8
11867 29AD                        00            .byte	0
11868 29AE                        00            .byte	0
11869 29AF                        00            .byte	0
11870 29B0                        00            .byte	0
11871                                           ! 1473  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29B1                        00            .byte	0
11873 29B2                        00            .byte	0
11874 29B3                        FE            .byte	$FE
11875 29B4                        66            .byte	$66
11876 29B5                        62            .byte	$62
11877 29B6                        68            .byte	$68
11878 29B7                        78            .byte	$78
11879 29B8                        68            .byte	$68
11880 29B9                        60            .byte	$60
11881 29BA                        62            .byte	$62
11882 29BB                        66            .byte	$66
11883 29BC                        FE            .byte	$FE
11884 29BD                        00            .byte	0
11885 29BE                        00            .byte	0
11886 29BF                        00            .byte	0
11887 29C0                        00            .byte	0
11888                                           ! 1474  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29C1                        00            .byte	0
11890 29C2                        00            .byte	0
11891 29C3                        FE            .byte	$FE
11892 29C4                        66            .byte	$66
11893 29C5                        62            .byte	$62
11894 29C6                        68            .byte	$68
11895 29C7                        78            .byte	$78
11896 29C8                        68            .byte	$68
11897 29C9                        60            .byte	$60
11898 29CA                        60            .byte	$60
11899 29CB                        60            .byte	$60
11900 29CC                        F0            .byte	$F0
11901 29CD                        00            .byte	0
11902 29CE                        00            .byte	0
11903 29CF                        00            .byte	0
11904 29D0                        00            .byte	0
11905                                           ! 1475  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29D1                        00            .byte	0
11907 29D2                        00            .byte	0
11908 29D3                        3C            .byte	$3C
11909 29D4                        66            .byte	$66
11910 29D5                        C2            .byte	$C2
11911 29D6                        C0            .byte	$C0
11912 29D7                        C0            .byte	$C0
11913 29D8                        DE            .byte	$DE
11914 29D9                        C6            .byte	$C6
11915 29DA                        C6            .byte	$C6
11916 29DB                        66            .byte	$66
11917 29DC                        3A            .byte	$3A
11918 29DD                        00            .byte	0
11919 29DE                        00            .byte	0
11920 29DF                        00            .byte	0
11921 29E0                        00            .byte	0
11922                                           ! 1476  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29E1                        00            .byte	0
11924 29E2                        00            .byte	0
11925 29E3                        C6            .byte	$C6
11926 29E4                        C6            .byte	$C6
11927 29E5                        C6            .byte	$C6
11928 29E6                        C6            .byte	$C6
11929 29E7                        FE            .byte	$FE
11930 29E8                        C6            .byte	$C6
11931 29E9                        C6            .byte	$C6
11932 29EA                        C6            .byte	$C6
11933 29EB                        C6            .byte	$C6
11934 29EC                        C6            .byte	$C6
11935 29ED                        00            .byte	0
11936 29EE                        00            .byte	0
11937 29EF                        00            .byte	0
11938 29F0                        00            .byte	0
11939                                           ! 1477  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29F1                        00            .byte	0
11941 29F2                        00            .byte	0
11942 29F3                        3C            .byte	$3C
11943 29F4                        18            .byte	$18
11944 29F5                        18            .byte	$18
11945 29F6                        18            .byte	$18
11946 29F7                        18            .byte	$18
11947 29F8                        18            .byte	$18
11948 29F9                        18            .byte	$18
11949 29FA                        18            .byte	$18
11950 29FB                        18            .byte	$18
11951 29FC                        3C            .byte	$3C
11952 29FD                        00            .byte	0
11953 29FE                        00            .byte	0
11954 29FF                        00            .byte	0
11955 2A00                        00            .byte	0
11956                                           ! 1478  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11957 2A01                        00            .byte	0
11958 2A02                        00            .byte	0
11959 2A03                        1E            .byte	$1E
11960 2A04                        0C            .byte	$C
11961 2A05                        0C            .byte	$C
11962 2A06                        0C            .byte	$C
11963 2A07                        0C            .byte	$C
11964 2A08                        0C            .byte	$C
11965 2A09                        CC            .byte	$CC
11966 2A0A                        CC            .byte	$CC
11967 2A0B                        CC            .byte	$CC
11968 2A0C                        78            .byte	$78
11969 2A0D                        00            .byte	0
11970 2A0E                        00            .byte	0
11971 2A0F                        00            .byte	0
11972 2A10                        00            .byte	0
11973                                           ! 1479  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x0
11974 2A11                        00            .byte	0
11975 2A12                        00            .byte	0
11976 2A13                        E6            .byte	$E6
11977 2A14                        66            .byte	$66
11978 2A15                        66            .byte	$66
11979 2A16                        6C            .byte	$6C
11980 2A17                        78            .byte	$78
11981 2A18                        78            .byte	$78
11982 2A19                        6C            .byte	$6C
11983 2A1A                        66            .byte	$66
11984 2A1B                        66            .byte	$66
11985 2A1C                        E6            .byte	$E6
11986 2A1D                        00            .byte	0
11987 2A1E                        00            .byte	0
11988 2A1F                        00            .byte	0
11989                                           ! 1479 0,
11990 2A20                        00            .byte	0
11991                                           ! 1480  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A21                        00            .byte	0
11993 2A22                        00            .byte	0
11994 2A23                        F0            .byte	$F0
11995 2A24                        60            .byte	$60
11996 2A25                        60            .byte	$60
11997 2A26                        60            .byte	$60
11998 2A27                        60            .byte	$60
11999 2A28                        60            .byte	$60
12000 2A29                        60            .byte	$60
12001 2A2A                        62            .byte	$62
12002 2A2B                        66            .byte	$66
12003 2A2C                        FE            .byte	$FE
12004 2A2D                        00            .byte	0
12005 2A2E                        00            .byte	0
12006 2A2F                        00            .byte	0
12007 2A30                        00            .byte	0
12008                                           ! 1481  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A31                        00            .byte	0
12010 2A32                        00            .byte	0
12011 2A33                        C3            .byte	$C3
12012 2A34                        E7            .byte	$E7
12013 2A35                        FF            .byte	$FF
12014 2A36                        FF            .byte	$FF
12015 2A37                        DB            .byte	$DB
12016 2A38                        C3            .byte	$C3
12017 2A39                        C3            .byte	$C3
12018 2A3A                        C3            .byte	$C3
12019 2A3B                        C3            .byte	$C3
12020 2A3C                        C3            .byte	$C3
12021 2A3D                        00            .byte	0
12022 2A3E                        00            .byte	0
12023 2A3F                        00            .byte	0
12024 2A40                        00            .byte	0
12025                                           ! 1482  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A41                        00            .byte	0
12027 2A42                        00            .byte	0
12028 2A43                        C6            .byte	$C6
12029 2A44                        E6            .byte	$E6
12030 2A45                        F6            .byte	$F6
12031 2A46                        FE            .byte	$FE
12032 2A47                        DE            .byte	$DE
12033 2A48                        CE            .byte	$CE
12034 2A49                        C6            .byte	$C6
12035 2A4A                        C6            .byte	$C6
12036 2A4B                        C6            .byte	$C6
12037 2A4C                        C6            .byte	$C6
12038 2A4D                        00            .byte	0
12039 2A4E                        00            .byte	0
12040 2A4F                        00            .byte	0
12041 2A50                        00            .byte	0
12042                                           ! 1483  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A51                        00            .byte	0
12044 2A52                        00            .byte	0
12045 2A53                        7C            .byte	$7C
12046 2A54                        C6            .byte	$C6
12047 2A55                        C6            .byte	$C6
12048 2A56                        C6            .byte	$C6
12049 2A57                        C6            .byte	$C6
12050 2A58                        C6            .byte	$C6
12051 2A59                        C6            .byte	$C6
12052 2A5A                        C6            .byte	$C6
12053 2A5B                        C6            .byte	$C6
12054 2A5C                        7C            .byte	$7C
12055 2A5D                        00            .byte	0
12056 2A5E                        00            .byte	0
12057 2A5F                        00            .byte	0
12058 2A60                        00            .byte	0
12059                                           ! 1484  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A61                        00            .byte	0
12061 2A62                        00            .byte	0
12062 2A63                        FC            .byte	$FC
12063 2A64                        66            .byte	$66
12064 2A65                        66            .byte	$66
12065 2A66                        66            .byte	$66
12066 2A67                        7C            .byte	$7C
12067 2A68                        60            .byte	$60
12068 2A69                        60            .byte	$60
12069 2A6A                        60            .byte	$60
12070 2A6B                        60            .byte	$60
12071 2A6C                        F0            .byte	$F0
12072 2A6D                        00            .byte	0
12073 2A6E                        00            .byte	0
12074 2A6F                        00            .byte	0
12075 2A70                        00            .byte	0
12076                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A71                        00            .byte	0
12078 2A72                        00            .byte	0
12079 2A73                        7C            .byte	$7C
12080 2A74                        C6            .byte	$C6
12081 2A75                        C6            .byte	$C6
12082 2A76                        C6            .byte	$C6
12083 2A77                        C6            .byte	$C6
12084 2A78                        C6            .byte	$C6
12085 2A79                        C6            .byte	$C6
12086 2A7A                        D6            .byte	$D6
12087 2A7B                        DE            .byte	$DE
12088 2A7C                        7C            .byte	$7C
12089 2A7D                        0C            .byte	$C
12090 2A7E                        0E            .byte	$E
12091 2A7F                        00            .byte	0
12092 2A80                        00            .byte	0
12093                                           ! 1486  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A81                        00            .byte	0
12095 2A82                        00            .byte	0
12096 2A83                        FC            .byte	$FC
12097 2A84                        66            .byte	$66
12098 2A85                        66            .byte	$66
12099 2A86                        66            .byte	$66
12100 2A87                        7C            .byte	$7C
12101 2A88                        6C            .byte	$6C
12102 2A89                        66            .byte	$66
12103 2A8A                        66            .byte	$66
12104 2A8B                        66            .byte	$66
12105 2A8C                        E6            .byte	$E6
12106 2A8D                        00            .byte	0
12107 2A8E                        00            .byte	0
12108 2A8F                        00            .byte	0
12109 2A90                        00            .byte	0
12110                                           ! 1487  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A91                        00            .byte	0
12112 2A92                        00            .byte	0
12113 2A93                        7C            .byte	$7C
12114 2A94                        C6            .byte	$C6
12115 2A95                        C6            .byte	$C6
12116 2A96                        60            .byte	$60
12117 2A97                        38            .byte	$38
12118 2A98                        0C            .byte	$C
12119 2A99                        06            .byte	6
12120 2A9A                        C6            .byte	$C6
12121 2A9B                        C6            .byte	$C6
12122 2A9C                        7C            .byte	$7C
12123 2A9D                        00            .byte	0
12124 2A9E                        00            .byte	0
12125 2A9F                        00            .byte	0
12126 2AA0                        00            .byte	0
12127                                           ! 1488  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2AA1                        00            .byte	0
12129 2AA2                        00            .byte	0
12130 2AA3                        FF            .byte	$FF
12131 2AA4                        DB            .byte	$DB
12132 2AA5                        99            .byte	$99
12133 2AA6                        18            .byte	$18
12134 2AA7                        18            .byte	$18
12135 2AA8                        18            .byte	$18
12136 2AA9                        18            .byte	$18
12137 2AAA                        18            .byte	$18
12138 2AAB                        18            .byte	$18
12139 2AAC                        3C            .byte	$3C
12140 2AAD                        00            .byte	0
12141 2AAE                        00            .byte	0
12142 2AAF                        00            .byte	0
12143 2AB0                        00            .byte	0
12144                                           ! 1489  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AB1                        00            .byte	0
12146 2AB2                        00            .byte	0
12147 2AB3                        C6            .byte	$C6
12148 2AB4                        C6            .byte	$C6
12149 2AB5                        C6            .byte	$C6
12150 2AB6                        C6            .byte	$C6
12151 2AB7                        C6            .byte	$C6
12152 2AB8                        C6            .byte	$C6
12153 2AB9                        C6            .byte	$C6
12154 2ABA                        C6            .byte	$C6
12155 2ABB                        C6            .byte	$C6
12156 2ABC                        7C            .byte	$7C
12157 2ABD                        00            .byte	0
12158 2ABE                        00            .byte	0
12159 2ABF                        00            .byte	0
12160 2AC0                        00            .byte	0
12161                                           ! 1490  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2AC1                        00            .byte	0
12163 2AC2                        00            .byte	0
12164 2AC3                        C3            .byte	$C3
12165 2AC4                        C3            .byte	$C3
12166 2AC5                        C3            .byte	$C3
12167 2AC6                        C3            .byte	$C3
12168 2AC7                        C3            .byte	$C3
12169 2AC8                        C3            .byte	$C3
12170 2AC9                        C3            .byte	$C3
12171 2ACA                        66            .byte	$66
12172 2ACB                        3C            .byte	$3C
12173 2ACC                        18            .byte	$18
12174 2ACD                        00            .byte	0
12175 2ACE                        00            .byte	0
12176 2ACF                        00            .byte	0
12177 2AD0                        00            .byte	0
12178                                           ! 1491  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2AD1                        00            .byte	0
12180 2AD2                        00            .byte	0
12181 2AD3                        C3            .byte	$C3
12182 2AD4                        C3            .byte	$C3
12183 2AD5                        C3            .byte	$C3
12184 2AD6                        C3            .byte	$C3
12185 2AD7                        C3            .byte	$C3
12186 2AD8                        DB            .byte	$DB
12187 2AD9                        DB            .byte	$DB
12188 2ADA                        FF            .byte	$FF
12189 2ADB                        66            .byte	$66
12190 2ADC                        66            .byte	$66
12191 2ADD                        00            .byte	0
12192 2ADE                        00            .byte	0
12193 2ADF                        00            .byte	0
12194 2AE0                        00            .byte	0
12195                                           ! 1492  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2AE1                        00            .byte	0
12197 2AE2                        00            .byte	0
12198 2AE3                        C3            .byte	$C3
12199 2AE4                        C3            .byte	$C3
12200 2AE5                        66            .byte	$66
12201 2AE6                        3C            .byte	$3C
12202 2AE7                        18            .byte	$18
12203 2AE8                        18            .byte	$18
12204 2AE9                        3C            .byte	$3C
12205 2AEA                        66            .byte	$66
12206 2AEB                        C3            .byte	$C3
12207 2AEC                        C3            .byte	$C3
12208 2AED                        00            .byte	0
12209 2AEE                        00            .byte	0
12210 2AEF                        00            .byte	0
12211 2AF0                        00            .byte	0
12212                                           ! 1493  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AF1                        00            .byte	0
12214 2AF2                        00            .byte	0
12215 2AF3                        C3            .byte	$C3
12216 2AF4                        C3            .byte	$C3
12217 2AF5                        C3            .byte	$C3
12218 2AF6                        66            .byte	$66
12219 2AF7                        3C            .byte	$3C
12220 2AF8                        18            .byte	$18
12221 2AF9                        18            .byte	$18
12222 2AFA                        18            .byte	$18
12223 2AFB                        18            .byte	$18
12224 2AFC                        3C            .byte	$3C
12225 2AFD                        00            .byte	0
12226 2AFE                        00            .byte	0
12227 2AFF                        00            .byte	0
12228 2B00                        00            .byte	0
12229                                           ! 1494  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2B01                        00            .byte	0
12231 2B02                        00            .byte	0
12232 2B03                        FF            .byte	$FF
12233 2B04                        C3            .byte	$C3
12234 2B05                        86            .byte	$86
12235 2B06                        0C            .byte	$C
12236 2B07                        18            .byte	$18
12237 2B08                        30            .byte	$30
12238 2B09                        60            .byte	$60
12239 2B0A                        C1            .byte	$C1
12240 2B0B                        C3            .byte	$C3
12241 2B0C                        FF            .byte	$FF
12242 2B0D                        00            .byte	0
12243 2B0E                        00            .byte	0
12244 2B0F                        00            .byte	0
12245 2B10                        00            .byte	0
12246                                           ! 1495  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B11                        00            .byte	0
12248 2B12                        00            .byte	0
12249 2B13                        3C            .byte	$3C
12250 2B14                        30            .byte	$30
12251 2B15                        30            .byte	$30
12252 2B16                        30            .byte	$30
12253 2B17                        30            .byte	$30
12254 2B18                        30            .byte	$30
12255 2B19                        30            .byte	$30
12256 2B1A                        30            .byte	$30
12257 2B1B                        30            .byte	$30
12258 2B1C                        3C            .byte	$3C
12259 2B1D                        00            .byte	0
12260 2B1E                        00            .byte	0
12261 2B1F                        00            .byte	0
12262 2B20                        00            .byte	0
12263                                           ! 1496  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B21                        00            .byte	0
12265 2B22                        00            .byte	0
12266 2B23                        00            .byte	0
12267 2B24                        80            .byte	$80
12268 2B25                        C0            .byte	$C0
12269 2B26                        E0            .byte	$E0
12270 2B27                        70            .byte	$70
12271 2B28                        38            .byte	$38
12272 2B29                        1C            .byte	$1C
12273 2B2A                        0E            .byte	$E
12274 2B2B                        06            .byte	6
12275 2B2C                        02            .byte	2
12276 2B2D                        00            .byte	0
12277 2B2E                        00            .byte	0
12278 2B2F                        00            .byte	0
12279 2B30                        00            .byte	0
12280                                           ! 1497  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B31                        00            .byte	0
12282 2B32                        00            .byte	0
12283 2B33                        3C            .byte	$3C
12284 2B34                        0C            .byte	$C
12285 2B35                        0C            .byte	$C
12286 2B36                        0C            .byte	$C
12287 2B37                        0C            .byte	$C
12288 2B38                        0C            .byte	$C
12289 2B39                        0C            .byte	$C
12290 2B3A                        0C            .byte	$C
12291 2B3B                        0C            .byte	$C
12292 2B3C                        3C            .byte	$3C
12293 2B3D                        00            .byte	0
12294 2B3E                        00            .byte	0
12295 2B3F                        00            .byte	0
12296 2B40                        00            .byte	0
12297                                           ! 1498  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B41                        10            .byte	$10
12299 2B42                        38            .byte	$38
12300 2B43                        6C            .byte	$6C
12301 2B44                        C6            .byte	$C6
12302 2B45                        00            .byte	0
12303 2B46                        00            .byte	0
12304 2B47                        00            .byte	0
12305 2B48                        00            .byte	0
12306 2B49                        00            .byte	0
12307 2B4A                        00            .byte	0
12308 2B4B                        00            .byte	0
12309 2B4C                        00            .byte	0
12310 2B4D                        00            .byte	0
12311 2B4E                        00            .byte	0
12312 2B4F                        00            .byte	0
12313 2B50                        00            .byte	0
12314                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B51                        00            .byte	0
12316 2B52                        00            .byte	0
12317 2B53                        00            .byte	0
12318 2B54                        00            .byte	0
12319 2B55                        00            .byte	0
12320 2B56                        00            .byte	0
12321 2B57                        00            .byte	0
12322 2B58                        00            .byte	0
12323 2B59                        00            .byte	0
12324 2B5A                        00            .byte	0
12325 2B5B                        00            .byte	0
12326 2B5C                        00            .byte	0
12327 2B5D                        00            .byte	0
12328 2B5E                        FF            .byte	$FF
12329 2B5F                        00            .byte	0
12330 2B60                        00            .byte	0
12331                                           ! 1500  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12332 2B61                        30            .byte	$30
12333 2B62                        30            .byte	$30
12334 2B63                        18            .byte	$18
12335 2B64                        00            .byte	0
12336 2B65                        00            .byte	0
12337 2B66                        00            .byte	0
12338 2B67                        00            .byte	0
12339 2B68                        00            .byte	0
12340 2B69                        00            .byte	0
12341 2B6A                        00            .byte	0
12342 2B6B                        00            .byte	0
12343 2B6C                        00            .byte	0
12344 2B6D                        00            .byte	0
12345 2B6E                        00            .byte	0
12346 2B6F                        00            .byte	0
12347 2B70                        00            .byte	0
12348                                           ! 1501  0x00, 0
12349 2B71                        00            .byte	0
12350                                           ! 1501 x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12351 2B72                        00            .byte	0
12352 2B73                        00            .byte	0
12353 2B74                        00            .byte	0
12354 2B75                        00            .byte	0
12355 2B76                        78            .byte	$78
12356 2B77                        0C            .byte	$C
12357 2B78                        7C            .byte	$7C
12358 2B79                        CC            .byte	$CC
12359 2B7A                        CC            .byte	$CC
12360 2B7B                        CC            .byte	$CC
12361 2B7C                        76            .byte	$76
12362 2B7D                        00            .byte	0
12363 2B7E                        00            .byte	0
12364 2B7F                        00            .byte	0
12365 2B80                        00            .byte	0
12366                                           ! 1502  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B81                        00            .byte	0
12368 2B82                        00            .byte	0
12369 2B83                        E0            .byte	$E0
12370 2B84                        60            .byte	$60
12371 2B85                        60            .byte	$60
12372 2B86                        78            .byte	$78
12373 2B87                        6C            .byte	$6C
12374 2B88                        66            .byte	$66
12375 2B89                        66            .byte	$66
12376 2B8A                        66            .byte	$66
12377 2B8B                        66            .byte	$66
12378 2B8C                        7C            .byte	$7C
12379 2B8D                        00            .byte	0
12380 2B8E                        00            .byte	0
12381 2B8F                        00            .byte	0
12382 2B90                        00            .byte	0
12383                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B91                        00            .byte	0
12385 2B92                        00            .byte	0
12386 2B93                        00            .byte	0
12387 2B94                        00            .byte	0
12388 2B95                        00            .byte	0
12389 2B96                        7C            .byte	$7C
12390 2B97                        C6            .byte	$C6
12391 2B98                        C0            .byte	$C0
12392 2B99                        C0            .byte	$C0
12393 2B9A                        C0            .byte	$C0
12394 2B9B                        C6            .byte	$C6
12395 2B9C                        7C            .byte	$7C
12396 2B9D                        00            .byte	0
12397 2B9E                        00            .byte	0
12398 2B9F                        00            .byte	0
12399 2BA0                        00            .byte	0
12400                                           ! 1504  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2BA1                        00            .byte	0
12402 2BA2                        00            .byte	0
12403 2BA3                        1C            .byte	$1C
12404 2BA4                        0C            .byte	$C
12405 2BA5                        0C            .byte	$C
12406 2BA6                        3C            .byte	$3C
12407 2BA7                        6C            .byte	$6C
12408 2BA8                        CC            .byte	$CC
12409 2BA9                        CC            .byte	$CC
12410 2BAA                        CC            .byte	$CC
12411 2BAB                        CC            .byte	$CC
12412 2BAC                        76            .byte	$76
12413 2BAD                        00            .byte	0
12414 2BAE                        00            .byte	0
12415 2BAF                        00            .byte	0
12416 2BB0                        00            .byte	0
12417                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BB1                        00            .byte	0
12419 2BB2                        00            .byte	0
12420 2BB3                        00            .byte	0
12421 2BB4                        00            .byte	0
12422 2BB5                        00            .byte	0
12423 2BB6                        7C            .byte	$7C
12424 2BB7                        C6            .byte	$C6
12425 2BB8                        FE            .byte	$FE
12426 2BB9                        C0            .byte	$C0
12427 2BBA                        C0            .byte	$C0
12428 2BBB                        C6            .byte	$C6
12429 2BBC                        7C            .byte	$7C
12430 2BBD                        00            .byte	0
12431 2BBE                        00            .byte	0
12432 2BBF                        00            .byte	0
12433 2BC0                        00            .byte	0
12434                                           ! 1506  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BC1                        00            .byte	0
12436 2BC2                        00            .byte	0
12437 2BC3                        38            .byte	$38
12438 2BC4                        6C            .byte	$6C
12439 2BC5                        64            .byte	$64
12440 2BC6                        60            .byte	$60
12441 2BC7                        F0            .byte	$F0
12442 2BC8                        60            .byte	$60
12443 2BC9                        60            .byte	$60
12444 2BCA                        60            .byte	$60
12445 2BCB                        60            .byte	$60
12446 2BCC                        F0            .byte	$F0
12447 2BCD                        00            .byte	0
12448 2BCE                        00            .byte	0
12449 2BCF                        00            .byte	0
12450 2BD0                        00            .byte	0
12451                                           ! 1507  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BD1                        00            .byte	0
12453 2BD2                        00            .byte	0
12454 2BD3                        00            .byte	0
12455 2BD4                        00            .byte	0
12456 2BD5                        00            .byte	0
12457 2BD6                        76            .byte	$76
12458 2BD7                        CC            .byte	$CC
12459 2BD8                        CC            .byte	$CC
12460 2BD9                        CC            .byte	$CC
12461 2BDA                        CC            .byte	$CC
12462 2BDB                        CC            .byte	$CC
12463 2BDC                        7C            .byte	$7C
12464 2BDD                        0C            .byte	$C
12465 2BDE                        CC            .byte	$CC
12466 2BDF                        78            .byte	$78
12467 2BE0                        00            .byte	0
12468                                           ! 1508  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BE1                        00            .byte	0
12470 2BE2                        00            .byte	0
12471 2BE3                        E0            .byte	$E0
12472 2BE4                        60            .byte	$60
12473 2BE5                        60            .byte	$60
12474 2BE6                        6C            .byte	$6C
12475 2BE7                        76            .byte	$76
12476 2BE8                        66            .byte	$66
12477 2BE9                        66            .byte	$66
12478 2BEA                        66            .byte	$66
12479 2BEB                        66            .byte	$66
12480 2BEC                        E6            .byte	$E6
12481 2BED                        00            .byte	0
12482 2BEE                        00            .byte	0
12483 2BEF                        00            .byte	0
12484 2BF0                        00            .byte	0
12485                                           ! 1509  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BF1                        00            .byte	0
12487 2BF2                        00            .byte	0
12488 2BF3                        18            .byte	$18
12489 2BF4                        18            .byte	$18
12490 2BF5                        00            .byte	0
12491 2BF6                        38            .byte	$38
12492 2BF7                        18            .byte	$18
12493 2BF8                        18            .byte	$18
12494 2BF9                        18            .byte	$18
12495 2BFA                        18            .byte	$18
12496 2BFB                        18            .byte	$18
12497 2BFC                        3C            .byte	$3C
12498 2BFD                        00            .byte	0
12499 2BFE                        00            .byte	0
12500 2BFF                        00            .byte	0
12501 2C00                        00            .byte	0
12502                                           ! 1510  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2C01                        00            .byte	0
12504 2C02                        00            .byte	0
12505 2C03                        06            .byte	6
12506 2C04                        06            .byte	6
12507 2C05                        00            .byte	0
12508 2C06                        0E            .byte	$E
12509 2C07                        06            .byte	6
12510 2C08                        06            .byte	6
12511 2C09                        06            .byte	6
12512 2C0A                        06            .byte	6
12513 2C0B                        06            .byte	6
12514 2C0C                        06            .byte	6
12515 2C0D                        66            .byte	$66
12516 2C0E                        66            .byte	$66
12517 2C0F                        3C            .byte	$3C
12518 2C10                        00            .byte	0
12519                                           ! 1511  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C11                        00            .byte	0
12521 2C12                        00            .byte	0
12522 2C13                        E0            .byte	$E0
12523 2C14                        60            .byte	$60
12524 2C15                        60            .byte	$60
12525 2C16                        66            .byte	$66
12526 2C17                        6C            .byte	$6C
12527 2C18                        78            .byte	$78
12528 2C19                        78            .byte	$78
12529 2C1A                        6C            .byte	$6C
12530 2C1B                        66            .byte	$66
12531 2C1C                        E6            .byte	$E6
12532 2C1D                        00            .byte	0
12533 2C1E                        00            .byte	0
12534 2C1F                        00            .byte	0
12535 2C20                        00            .byte	0
12536                                           ! 1512  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C21                        00            .byte	0
12538 2C22                        00            .byte	0
12539 2C23                        38            .byte	$38
12540 2C24                        18            .byte	$18
12541 2C25                        18            .byte	$18
12542 2C26                        18            .byte	$18
12543 2C27                        18            .byte	$18
12544 2C28                        18            .byte	$18
12545 2C29                        18            .byte	$18
12546 2C2A                        18            .byte	$18
12547 2C2B                        18            .byte	$18
12548 2C2C                        3C            .byte	$3C
12549 2C2D                        00            .byte	0
12550 2C2E                        00            .byte	0
12551 2C2F                        00            .byte	0
12552 2C30                        00            .byte	0
12553                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C31                        00            .byte	0
12555 2C32                        00            .byte	0
12556 2C33                        00            .byte	0
12557 2C34                        00            .byte	0
12558 2C35                        00            .byte	0
12559 2C36                        E6            .byte	$E6
12560 2C37                        FF            .byte	$FF
12561 2C38                        DB            .byte	$DB
12562 2C39                        DB            .byte	$DB
12563 2C3A                        DB            .byte	$DB
12564 2C3B                        DB            .byte	$DB
12565 2C3C                        DB            .byte	$DB
12566 2C3D                        00            .byte	0
12567 2C3E                        00            .byte	0
12568 2C3F                        00            .byte	0
12569 2C40                        00            .byte	0
12570                                           ! 1514  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C41                        00            .byte	0
12572 2C42                        00            .byte	0
12573 2C43                        00            .byte	0
12574 2C44                        00            .byte	0
12575 2C45                        00            .byte	0
12576 2C46                        DC            .byte	$DC
12577 2C47                        66            .byte	$66
12578 2C48                        66            .byte	$66
12579 2C49                        66            .byte	$66
12580 2C4A                        66            .byte	$66
12581 2C4B                        66            .byte	$66
12582 2C4C                        66            .byte	$66
12583 2C4D                        00            .byte	0
12584 2C4E                        00            .byte	0
12585 2C4F                        00            .byte	0
12586 2C50                        00            .byte	0
12587                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C51                        00            .byte	0
12589 2C52                        00            .byte	0
12590 2C53                        00            .byte	0
12591 2C54                        00            .byte	0
12592 2C55                        00            .byte	0
12593 2C56                        7C            .byte	$7C
12594 2C57                        C6            .byte	$C6
12595 2C58                        C6            .byte	$C6
12596 2C59                        C6            .byte	$C6
12597 2C5A                        C6            .byte	$C6
12598 2C5B                        C6            .byte	$C6
12599 2C5C                        7C            .byte	$7C
12600 2C5D                        00            .byte	0
12601 2C5E                        00            .byte	0
12602 2C5F                        00            .byte	0
12603 2C60                        00            .byte	0
12604                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C61                        00            .byte	0
12606 2C62                        00            .byte	0
12607 2C63                        00            .byte	0
12608 2C64                        00            .byte	0
12609 2C65                        00            .byte	0
12610 2C66                        DC            .byte	$DC
12611 2C67                        66            .byte	$66
12612 2C68                        66            .byte	$66
12613 2C69                        66            .byte	$66
12614 2C6A                        66            .byte	$66
12615 2C6B                        66            .byte	$66
12616 2C6C                        7C            .byte	$7C
12617 2C6D                        60            .byte	$60
12618 2C6E                        60            .byte	$60
12619 2C6F                        F0            .byte	$F0
12620 2C70                        00            .byte	0
12621                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C71                        00            .byte	0
12623 2C72                        00            .byte	0
12624 2C73                        00            .byte	0
12625 2C74                        00            .byte	0
12626 2C75                        00            .byte	0
12627 2C76                        76            .byte	$76
12628 2C77                        CC            .byte	$CC
12629 2C78                        CC            .byte	$CC
12630 2C79                        CC            .byte	$CC
12631 2C7A                        CC            .byte	$CC
12632 2C7B                        CC            .byte	$CC
12633 2C7C                        7C            .byte	$7C
12634 2C7D                        0C            .byte	$C
12635 2C7E                        0C            .byte	$C
12636 2C7F                        1E            .byte	$1E
12637 2C80                        00            .byte	0
12638                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C81                        00            .byte	0
12640 2C82                        00            .byte	0
12641 2C83                        00            .byte	0
12642 2C84                        00            .byte	0
12643 2C85                        00            .byte	0
12644 2C86                        DC            .byte	$DC
12645 2C87                        76            .byte	$76
12646 2C88                        66            .byte	$66
12647 2C89                        60            .byte	$60
12648 2C8A                        60            .byte	$60
12649 2C8B                        60            .byte	$60
12650 2C8C                        F0            .byte	$F0
12651 2C8D                        00            .byte	0
12652 2C8E                        00            .byte	0
12653 2C8F                        00            .byte	0
12654 2C90                        00            .byte	0
12655                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C91                        00            .byte	0
12657 2C92                        00            .byte	0
12658 2C93                        00            .byte	0
12659 2C94                        00            .byte	0
12660 2C95                        00            .byte	0
12661 2C96                        7C            .byte	$7C
12662 2C97                        C6            .byte	$C6
12663 2C98                        60            .byte	$60
12664 2C99                        38            .byte	$38
12665 2C9A                        0C            .byte	$C
12666 2C9B                        C6            .byte	$C6
12667 2C9C                        7C            .byte	$7C
12668 2C9D                        00            .byte	0
12669 2C9E                        00            .byte	0
12670 2C9F                        00            .byte	0
12671 2CA0                        00            .byte	0
12672                                           ! 1520  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2CA1                        00            .byte	0
12674 2CA2                        00            .byte	0
12675 2CA3                        10            .byte	$10
12676 2CA4                        30            .byte	$30
12677 2CA5                        30            .byte	$30
12678 2CA6                        FC            .byte	$FC
12679 2CA7                        30            .byte	$30
12680 2CA8                        30            .byte	$30
12681 2CA9                        30            .byte	$30
12682 2CAA                        30            .byte	$30
12683 2CAB                        36            .byte	$36
12684 2CAC                        1C            .byte	$1C
12685 2CAD                        00            .byte	0
12686 2CAE                        00            .byte	0
12687 2CAF                        00            .byte	0
12688 2CB0                        00            .byte	0
12689                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12690 2CB1                        00            .byte	0
12691 2CB2                        00            .byte	0
12692 2CB3                        00            .byte	0
12693 2CB4                        00            .byte	0
12694 2CB5                        00            .byte	0
12695 2CB6                        CC            .byte	$CC
12696 2CB7                        CC            .byte	$CC
12697 2CB8                        CC            .byte	$CC
12698 2CB9                        CC            .byte	$CC
12699 2CBA                        CC            .byte	$CC
12700 2CBB                        CC            .byte	$CC
12701 2CBC                        76            .byte	$76
12702 2CBD                        00            .byte	0
12703 2CBE                        00            .byte	0
12704 2CBF                        00            .byte	0
12705 2CC0                        00            .byte	0
12706                                           ! 1522  0x00, 0x00, 0x00, 
12707 2CC1                        00            .byte	0
12708 2CC2                        00            .byte	0
12709 2CC3                        00            .byte	0
12710                                           ! 1522 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12711 2CC4                        00            .byte	0
12712 2CC5                        00            .byte	0
12713 2CC6                        C3            .byte	$C3
12714 2CC7                        C3            .byte	$C3
12715 2CC8                        C3            .byte	$C3
12716 2CC9                        C3            .byte	$C3
12717 2CCA                        66            .byte	$66
12718 2CCB                        3C            .byte	$3C
12719 2CCC                        18            .byte	$18
12720 2CCD                        00            .byte	0
12721 2CCE                        00            .byte	0
12722 2CCF                        00            .byte	0
12723 2CD0                        00            .byte	0
12724                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CD1                        00            .byte	0
12726 2CD2                        00            .byte	0
12727 2CD3                        00            .byte	0
12728 2CD4                        00            .byte	0
12729 2CD5                        00            .byte	0
12730 2CD6                        C3            .byte	$C3
12731 2CD7                        C3            .byte	$C3
12732 2CD8                        C3            .byte	$C3
12733 2CD9                        DB            .byte	$DB
12734 2CDA                        DB            .byte	$DB
12735 2CDB                        FF            .byte	$FF
12736 2CDC                        66            .byte	$66
12737 2CDD                        00            .byte	0
12738 2CDE                        00            .byte	0
12739 2CDF                        00            .byte	0
12740 2CE0                        00            .byte	0
12741                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CE1                        00            .byte	0
12743 2CE2                        00            .byte	0
12744 2CE3                        00            .byte	0
12745 2CE4                        00            .byte	0
12746 2CE5                        00            .byte	0
12747 2CE6                        C3            .byte	$C3
12748 2CE7                        66            .byte	$66
12749 2CE8                        3C            .byte	$3C
12750 2CE9                        18            .byte	$18
12751 2CEA                        3C            .byte	$3C
12752 2CEB                        66            .byte	$66
12753 2CEC                        C3            .byte	$C3
12754 2CED                        00            .byte	0
12755 2CEE                        00            .byte	0
12756 2CEF                        00            .byte	0
12757 2CF0                        00            .byte	0
12758                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CF1                        00            .byte	0
12760 2CF2                        00            .byte	0
12761 2CF3                        00            .byte	0
12762 2CF4                        00            .byte	0
12763 2CF5                        00            .byte	0
12764 2CF6                        C6            .byte	$C6
12765 2CF7                        C6            .byte	$C6
12766 2CF8                        C6            .byte	$C6
12767 2CF9                        C6            .byte	$C6
12768 2CFA                        C6            .byte	$C6
12769 2CFB                        C6            .byte	$C6
12770 2CFC                        7E            .byte	$7E
12771 2CFD                        06            .byte	6
12772 2CFE                        0C            .byte	$C
12773 2CFF                        F8            .byte	$F8
12774 2D00                        00            .byte	0
12775                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2D01                        00            .byte	0
12777 2D02                        00            .byte	0
12778 2D03                        00            .byte	0
12779 2D04                        00            .byte	0
12780 2D05                        00            .byte	0
12781 2D06                        FE            .byte	$FE
12782 2D07                        CC            .byte	$CC
12783 2D08                        18            .byte	$18
12784 2D09                        30            .byte	$30
12785 2D0A                        60            .byte	$60
12786 2D0B                        C6            .byte	$C6
12787 2D0C                        FE            .byte	$FE
12788 2D0D                        00            .byte	0
12789 2D0E                        00            .byte	0
12790 2D0F                        00            .byte	0
12791 2D10                        00            .byte	0
12792                                           ! 1527  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D11                        00            .byte	0
12794 2D12                        00            .byte	0
12795 2D13                        0E            .byte	$E
12796 2D14                        18            .byte	$18
12797 2D15                        18            .byte	$18
12798 2D16                        18            .byte	$18
12799 2D17                        70            .byte	$70
12800 2D18                        18            .byte	$18
12801 2D19                        18            .byte	$18
12802 2D1A                        18            .byte	$18
12803 2D1B                        18            .byte	$18
12804 2D1C                        0E            .byte	$E
12805 2D1D                        00            .byte	0
12806 2D1E                        00            .byte	0
12807 2D1F                        00            .byte	0
12808 2D20                        00            .byte	0
12809                                           ! 1528  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D21                        00            .byte	0
12811 2D22                        00            .byte	0
12812 2D23                        18            .byte	$18
12813 2D24                        18            .byte	$18
12814 2D25                        18            .byte	$18
12815 2D26                        18            .byte	$18
12816 2D27                        00            .byte	0
12817 2D28                        18            .byte	$18
12818 2D29                        18            .byte	$18
12819 2D2A                        18            .byte	$18
12820 2D2B                        18            .byte	$18
12821 2D2C                        18            .byte	$18
12822 2D2D                        00            .byte	0
12823 2D2E                        00            .byte	0
12824 2D2F                        00            .byte	0
12825 2D30                        00            .byte	0
12826                                           ! 1529  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D31                        00            .byte	0
12828 2D32                        00            .byte	0
12829 2D33                        70            .byte	$70
12830 2D34                        18            .byte	$18
12831 2D35                        18            .byte	$18
12832 2D36                        18            .byte	$18
12833 2D37                        0E            .byte	$E
12834 2D38                        18            .byte	$18
12835 2D39                        18            .byte	$18
12836 2D3A                        18            .byte	$18
12837 2D3B                        18            .byte	$18
12838 2D3C                        70            .byte	$70
12839 2D3D                        00            .byte	0
12840 2D3E                        00            .byte	0
12841 2D3F                        00            .byte	0
12842 2D40                        00            .byte	0
12843                                           ! 1530  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D41                        00            .byte	0
12845 2D42                        00            .byte	0
12846 2D43                        76            .byte	$76
12847 2D44                        DC            .byte	$DC
12848 2D45                        00            .byte	0
12849 2D46                        00            .byte	0
12850 2D47                        00            .byte	0
12851 2D48                        00            .byte	0
12852 2D49                        00            .byte	0
12853 2D4A                        00            .byte	0
12854 2D4B                        00            .byte	0
12855 2D4C                        00            .byte	0
12856 2D4D                        00            .byte	0
12857 2D4E                        00            .byte	0
12858 2D4F                        00            .byte	0
12859 2D50                        00            .byte	0
12860                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D51                        00            .byte	0
12862 2D52                        00            .byte	0
12863 2D53                        00            .byte	0
12864 2D54                        00            .byte	0
12865 2D55                        10            .byte	$10
12866 2D56                        38            .byte	$38
12867 2D57                        6C            .byte	$6C
12868 2D58                        C6            .byte	$C6
12869 2D59                        C6            .byte	$C6
12870 2D5A                        C6            .byte	$C6
12871 2D5B                        FE            .byte	$FE
12872 2D5C                        00            .byte	0
12873 2D5D                        00            .byte	0
12874 2D5E                        00            .byte	0
12875 2D5F                        00            .byte	0
12876 2D60                        00            .byte	0
12877                                           ! 1532  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D61                        00            .byte	0
12879 2D62                        00            .byte	0
12880 2D63                        3C            .byte	$3C
12881 2D64                        66            .byte	$66
12882 2D65                        C2            .byte	$C2
12883 2D66                        C0            .byte	$C0
12884 2D67                        C0            .byte	$C0
12885 2D68                        C0            .byte	$C0
12886 2D69                        C2            .byte	$C2
12887 2D6A                        66            .byte	$66
12888 2D6B                        3C            .byte	$3C
12889 2D6C                        0C            .byte	$C
12890 2D6D                        06            .byte	6
12891 2D6E                        7C            .byte	$7C
12892 2D6F                        00            .byte	0
12893 2D70                        00            .byte	0
12894                                           ! 1533  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D71                        00            .byte	0
12896 2D72                        00            .byte	0
12897 2D73                        CC            .byte	$CC
12898 2D74                        00            .byte	0
12899 2D75                        00            .byte	0
12900 2D76                        CC            .byte	$CC
12901 2D77                        CC            .byte	$CC
12902 2D78                        CC            .byte	$CC
12903 2D79                        CC            .byte	$CC
12904 2D7A                        CC            .byte	$CC
12905 2D7B                        CC            .byte	$CC
12906 2D7C                        76            .byte	$76
12907 2D7D                        00            .byte	0
12908 2D7E                        00            .byte	0
12909 2D7F                        00            .byte	0
12910 2D80                        00            .byte	0
12911                                           ! 1534  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D81                        00            .byte	0
12913 2D82                        0C            .byte	$C
12914 2D83                        18            .byte	$18
12915 2D84                        30            .byte	$30
12916 2D85                        00            .byte	0
12917 2D86                        7C            .byte	$7C
12918 2D87                        C6            .byte	$C6
12919 2D88                        FE            .byte	$FE
12920 2D89                        C0            .byte	$C0
12921 2D8A                        C0            .byte	$C0
12922 2D8B                        C6            .byte	$C6
12923 2D8C                        7C            .byte	$7C
12924 2D8D                        00            .byte	0
12925 2D8E                        00            .byte	0
12926 2D8F                        00            .byte	0
12927 2D90                        00            .byte	0
12928                                           ! 1535  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D91                        00            .byte	0
12930 2D92                        10            .byte	$10
12931 2D93                        38            .byte	$38
12932 2D94                        6C            .byte	$6C
12933 2D95                        00            .byte	0
12934 2D96                        78            .byte	$78
12935 2D97                        0C            .byte	$C
12936 2D98                        7C            .byte	$7C
12937 2D99                        CC            .byte	$CC
12938 2D9A                        CC            .byte	$CC
12939 2D9B                        CC            .byte	$CC
12940 2D9C                        76            .byte	$76
12941 2D9D                        00            .byte	0
12942 2D9E                        00            .byte	0
12943 2D9F                        00            .byte	0
12944 2DA0                        00            .byte	0
12945                                           ! 1536  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2DA1                        00            .byte	0
12947 2DA2                        00            .byte	0
12948 2DA3                        CC            .byte	$CC
12949 2DA4                        00            .byte	0
12950 2DA5                        00            .byte	0
12951 2DA6                        78            .byte	$78
12952 2DA7                        0C            .byte	$C
12953 2DA8                        7C            .byte	$7C
12954 2DA9                        CC            .byte	$CC
12955 2DAA                        CC            .byte	$CC
12956 2DAB                        CC            .byte	$CC
12957 2DAC                        76            .byte	$76
12958 2DAD                        00            .byte	0
12959 2DAE                        00            .byte	0
12960 2DAF                        00            .byte	0
12961 2DB0                        00            .byte	0
12962                                           ! 1537  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DB1                        00            .byte	0
12964 2DB2                        60            .byte	$60
12965 2DB3                        30            .byte	$30
12966 2DB4                        18            .byte	$18
12967 2DB5                        00            .byte	0
12968 2DB6                        78            .byte	$78
12969 2DB7                        0C            .byte	$C
12970 2DB8                        7C            .byte	$7C
12971 2DB9                        CC            .byte	$CC
12972 2DBA                        CC            .byte	$CC
12973 2DBB                        CC            .byte	$CC
12974 2DBC                        76            .byte	$76
12975 2DBD                        00            .byte	0
12976 2DBE                        00            .byte	0
12977 2DBF                        00            .byte	0
12978 2DC0                        00            .byte	0
12979                                           ! 1538  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DC1                        00            .byte	0
12981 2DC2                        38            .byte	$38
12982 2DC3                        6C            .byte	$6C
12983 2DC4                        38            .byte	$38
12984 2DC5                        00            .byte	0
12985 2DC6                        78            .byte	$78
12986 2DC7                        0C            .byte	$C
12987 2DC8                        7C            .byte	$7C
12988 2DC9                        CC            .byte	$CC
12989 2DCA                        CC            .byte	$CC
12990 2DCB                        CC            .byte	$CC
12991 2DCC                        76            .byte	$76
12992 2DCD                        00            .byte	0
12993 2DCE                        00            .byte	0
12994 2DCF                        00            .byte	0
12995 2DD0                        00            .byte	0
12996                                           ! 1539  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DD1                        00            .byte	0
12998 2DD2                        00            .byte	0
12999 2DD3                        00            .byte	0
13000 2DD4                        00            .byte	0
13001 2DD5                        3C            .byte	$3C
13002 2DD6                        66            .byte	$66
13003 2DD7                        60            .byte	$60
13004 2DD8                        60            .byte	$60
13005 2DD9                        66            .byte	$66
13006 2DDA                        3C            .byte	$3C
13007 2DDB                        0C            .byte	$C
13008 2DDC                        06            .byte	6
13009 2DDD                        3C            .byte	$3C
13010 2DDE                        00            .byte	0
13011 2DDF                        00            .byte	0
13012 2DE0                        00            .byte	0
13013                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DE1                        00            .byte	0
13015 2DE2                        10            .byte	$10
13016 2DE3                        38            .byte	$38
13017 2DE4                        6C            .byte	$6C
13018 2DE5                        00            .byte	0
13019 2DE6                        7C            .byte	$7C
13020 2DE7                        C6            .byte	$C6
13021 2DE8                        FE            .byte	$FE
13022 2DE9                        C0            .byte	$C0
13023 2DEA                        C0            .byte	$C0
13024 2DEB                        C6            .byte	$C6
13025 2DEC                        7C            .byte	$7C
13026 2DED                        00            .byte	0
13027 2DEE                        00            .byte	0
13028 2DEF                        00            .byte	0
13029 2DF0                        00            .byte	0
13030                                           ! 1541  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DF1                        00            .byte	0
13032 2DF2                        00            .byte	0
13033 2DF3                        C6            .byte	$C6
13034 2DF4                        00            .byte	0
13035 2DF5                        00            .byte	0
13036 2DF6                        7C            .byte	$7C
13037 2DF7                        C6            .byte	$C6
13038 2DF8                        FE            .byte	$FE
13039 2DF9                        C0            .byte	$C0
13040 2DFA                        C0            .byte	$C0
13041 2DFB                        C6            .byte	$C6
13042 2DFC                        7C            .byte	$7C
13043 2DFD                        00            .byte	0
13044 2DFE                        00            .byte	0
13045 2DFF                        00            .byte	0
13046 2E00                        00            .byte	0
13047                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13048 2E01                        00            .byte	0
13049 2E02                        60            .byte	$60
13050 2E03                        30            .byte	$30
13051 2E04                        18            .byte	$18
13052 2E05                        00            .byte	0
13053 2E06                        7C            .byte	$7C
13054 2E07                        C6            .byte	$C6
13055 2E08                        FE            .byte	$FE
13056 2E09                        C0            .byte	$C0
13057 2E0A                        C0            .byte	$C0
13058 2E0B                        C6            .byte	$C6
13059 2E0C                        7C            .byte	$7C
13060 2E0D                        00            .byte	0
13061 2E0E                        00            .byte	0
13062 2E0F                        00            .byte	0
13063 2E10                        00            .byte	0
13064                                           ! 1543  0x00, 0x00, 0x66, 0x00, 0x00,
13065 2E11                        00            .byte	0
13066 2E12                        00            .byte	0
13067 2E13                        66            .byte	$66
13068 2E14                        00            .byte	0
13069                                           ! 1543  0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E15                        00            .byte	0
13071 2E16                        38            .byte	$38
13072 2E17                        18            .byte	$18
13073 2E18                        18            .byte	$18
13074 2E19                        18            .byte	$18
13075 2E1A                        18            .byte	$18
13076 2E1B                        18            .byte	$18
13077 2E1C                        3C            .byte	$3C
13078 2E1D                        00            .byte	0
13079 2E1E                        00            .byte	0
13080 2E1F                        00            .byte	0
13081 2E20                        00            .byte	0
13082                                           ! 1544  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E21                        00            .byte	0
13084 2E22                        18            .byte	$18
13085 2E23                        3C            .byte	$3C
13086 2E24                        66            .byte	$66
13087 2E25                        00            .byte	0
13088 2E26                        38            .byte	$38
13089 2E27                        18            .byte	$18
13090 2E28                        18            .byte	$18
13091 2E29                        18            .byte	$18
13092 2E2A                        18            .byte	$18
13093 2E2B                        18            .byte	$18
13094 2E2C                        3C            .byte	$3C
13095 2E2D                        00            .byte	0
13096 2E2E                        00            .byte	0
13097 2E2F                        00            .byte	0
13098 2E30                        00            .byte	0
13099                                           ! 1545  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E31                        00            .byte	0
13101 2E32                        60            .byte	$60
13102 2E33                        30            .byte	$30
13103 2E34                        18            .byte	$18
13104 2E35                        00            .byte	0
13105 2E36                        38            .byte	$38
13106 2E37                        18            .byte	$18
13107 2E38                        18            .byte	$18
13108 2E39                        18            .byte	$18
13109 2E3A                        18            .byte	$18
13110 2E3B                        18            .byte	$18
13111 2E3C                        3C            .byte	$3C
13112 2E3D                        00            .byte	0
13113 2E3E                        00            .byte	0
13114 2E3F                        00            .byte	0
13115 2E40                        00            .byte	0
13116                                           ! 1546  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E41                        00            .byte	0
13118 2E42                        C6            .byte	$C6
13119 2E43                        00            .byte	0
13120 2E44                        10            .byte	$10
13121 2E45                        38            .byte	$38
13122 2E46                        6C            .byte	$6C
13123 2E47                        C6            .byte	$C6
13124 2E48                        C6            .byte	$C6
13125 2E49                        FE            .byte	$FE
13126 2E4A                        C6            .byte	$C6
13127 2E4B                        C6            .byte	$C6
13128 2E4C                        C6            .byte	$C6
13129 2E4D                        00            .byte	0
13130 2E4E                        00            .byte	0
13131 2E4F                        00            .byte	0
13132 2E50                        00            .byte	0
13133                                           ! 1547  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E51                        38            .byte	$38
13135 2E52                        6C            .byte	$6C
13136 2E53                        38            .byte	$38
13137 2E54                        00            .byte	0
13138 2E55                        38            .byte	$38
13139 2E56                        6C            .byte	$6C
13140 2E57                        C6            .byte	$C6
13141 2E58                        C6            .byte	$C6
13142 2E59                        FE            .byte	$FE
13143 2E5A                        C6            .byte	$C6
13144 2E5B                        C6            .byte	$C6
13145 2E5C                        C6            .byte	$C6
13146 2E5D                        00            .byte	0
13147 2E5E                        00            .byte	0
13148 2E5F                        00            .byte	0
13149 2E60                        00            .byte	0
13150                                           ! 1548  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E61                        18            .byte	$18
13152 2E62                        30            .byte	$30
13153 2E63                        60            .byte	$60
13154 2E64                        00            .byte	0
13155 2E65                        FE            .byte	$FE
13156 2E66                        66            .byte	$66
13157 2E67                        60            .byte	$60
13158 2E68                        7C            .byte	$7C
13159 2E69                        60            .byte	$60
13160 2E6A                        60            .byte	$60
13161 2E6B                        66            .byte	$66
13162 2E6C                        FE            .byte	$FE
13163 2E6D                        00            .byte	0
13164 2E6E                        00            .byte	0
13165 2E6F                        00            .byte	0
13166 2E70                        00            .byte	0
13167                                           ! 1549  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E71                        00            .byte	0
13169 2E72                        00            .byte	0
13170 2E73                        00            .byte	0
13171 2E74                        00            .byte	0
13172 2E75                        00            .byte	0
13173 2E76                        6E            .byte	$6E
13174 2E77                        3B            .byte	$3B
13175 2E78                        1B            .byte	$1B
13176 2E79                        7E            .byte	$7E
13177 2E7A                        D8            .byte	$D8
13178 2E7B                        DC            .byte	$DC
13179 2E7C                        77            .byte	$77
13180 2E7D                        00            .byte	0
13181 2E7E                        00            .byte	0
13182 2E7F                        00            .byte	0
13183 2E80                        00            .byte	0
13184                                           ! 1550  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E81                        00            .byte	0
13186 2E82                        00            .byte	0
13187 2E83                        3E            .byte	$3E
13188 2E84                        6C            .byte	$6C
13189 2E85                        CC            .byte	$CC
13190 2E86                        CC            .byte	$CC
13191 2E87                        FE            .byte	$FE
13192 2E88                        CC            .byte	$CC
13193 2E89                        CC            .byte	$CC
13194 2E8A                        CC            .byte	$CC
13195 2E8B                        CC            .byte	$CC
13196 2E8C                        CE            .byte	$CE
13197 2E8D                        00            .byte	0
13198 2E8E                        00            .byte	0
13199 2E8F                        00            .byte	0
13200 2E90                        00            .byte	0
13201                                           ! 1551  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E91                        00            .byte	0
13203 2E92                        10            .byte	$10
13204 2E93                        38            .byte	$38
13205 2E94                        6C            .byte	$6C
13206 2E95                        00            .byte	0
13207 2E96                        7C            .byte	$7C
13208 2E97                        C6            .byte	$C6
13209 2E98                        C6            .byte	$C6
13210 2E99                        C6            .byte	$C6
13211 2E9A                        C6            .byte	$C6
13212 2E9B                        C6            .byte	$C6
13213 2E9C                        7C            .byte	$7C
13214 2E9D                        00            .byte	0
13215 2E9E                        00            .byte	0
13216 2E9F                        00            .byte	0
13217 2EA0                        00            .byte	0
13218                                           ! 1552  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2EA1                        00            .byte	0
13220 2EA2                        00            .byte	0
13221 2EA3                        C6            .byte	$C6
13222 2EA4                        00            .byte	0
13223 2EA5                        00            .byte	0
13224 2EA6                        7C            .byte	$7C
13225 2EA7                        C6            .byte	$C6
13226 2EA8                        C6            .byte	$C6
13227 2EA9                        C6            .byte	$C6
13228 2EAA                        C6            .byte	$C6
13229 2EAB                        C6            .byte	$C6
13230 2EAC                        7C            .byte	$7C
13231 2EAD                        00            .byte	0
13232 2EAE                        00            .byte	0
13233 2EAF                        00            .byte	0
13234 2EB0                        00            .byte	0
13235                                           ! 1553  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EB1                        00            .byte	0
13237 2EB2                        60            .byte	$60
13238 2EB3                        30            .byte	$30
13239 2EB4                        18            .byte	$18
13240 2EB5                        00            .byte	0
13241 2EB6                        7C            .byte	$7C
13242 2EB7                        C6            .byte	$C6
13243 2EB8                        C6            .byte	$C6
13244 2EB9                        C6            .byte	$C6
13245 2EBA                        C6            .byte	$C6
13246 2EBB                        C6            .byte	$C6
13247 2EBC                        7C            .byte	$7C
13248 2EBD                        00            .byte	0
13249 2EBE                        00            .byte	0
13250 2EBF                        00            .byte	0
13251 2EC0                        00            .byte	0
13252                                           ! 1554  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EC1                        00            .byte	0
13254 2EC2                        30            .byte	$30
13255 2EC3                        78            .byte	$78
13256 2EC4                        CC            .byte	$CC
13257 2EC5                        00            .byte	0
13258 2EC6                        CC            .byte	$CC
13259 2EC7                        CC            .byte	$CC
13260 2EC8                        CC            .byte	$CC
13261 2EC9                        CC            .byte	$CC
13262 2ECA                        CC            .byte	$CC
13263 2ECB                        CC            .byte	$CC
13264 2ECC                        76            .byte	$76
13265 2ECD                        00            .byte	0
13266 2ECE                        00            .byte	0
13267 2ECF                        00            .byte	0
13268 2ED0                        00            .byte	0
13269                                           ! 1555  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ED1                        00            .byte	0
13271 2ED2                        60            .byte	$60
13272 2ED3                        30            .byte	$30
13273 2ED4                        18            .byte	$18
13274 2ED5                        00            .byte	0
13275 2ED6                        CC            .byte	$CC
13276 2ED7                        CC            .byte	$CC
13277 2ED8                        CC            .byte	$CC
13278 2ED9                        CC            .byte	$CC
13279 2EDA                        CC            .byte	$CC
13280 2EDB                        CC            .byte	$CC
13281 2EDC                        76            .byte	$76
13282 2EDD                        00            .byte	0
13283 2EDE                        00            .byte	0
13284 2EDF                        00            .byte	0
13285 2EE0                        00            .byte	0
13286                                           ! 1556  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EE1                        00            .byte	0
13288 2EE2                        00            .byte	0
13289 2EE3                        C6            .byte	$C6
13290 2EE4                        00            .byte	0
13291 2EE5                        00            .byte	0
13292 2EE6                        C6            .byte	$C6
13293 2EE7                        C6            .byte	$C6
13294 2EE8                        C6            .byte	$C6
13295 2EE9                        C6            .byte	$C6
13296 2EEA                        C6            .byte	$C6
13297 2EEB                        C6            .byte	$C6
13298 2EEC                        7E            .byte	$7E
13299 2EED                        06            .byte	6
13300 2EEE                        0C            .byte	$C
13301 2EEF                        78            .byte	$78
13302 2EF0                        00            .byte	0
13303                                           ! 1557  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EF1                        00            .byte	0
13305 2EF2                        C6            .byte	$C6
13306 2EF3                        00            .byte	0
13307 2EF4                        7C            .byte	$7C
13308 2EF5                        C6            .byte	$C6
13309 2EF6                        C6            .byte	$C6
13310 2EF7                        C6            .byte	$C6
13311 2EF8                        C6            .byte	$C6
13312 2EF9                        C6            .byte	$C6
13313 2EFA                        C6            .byte	$C6
13314 2EFB                        C6            .byte	$C6
13315 2EFC                        7C            .byte	$7C
13316 2EFD                        00            .byte	0
13317 2EFE                        00            .byte	0
13318 2EFF                        00            .byte	0
13319 2F00                        00            .byte	0
13320                                           ! 1558  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2F01                        00            .byte	0
13322 2F02                        C6            .byte	$C6
13323 2F03                        00            .byte	0
13324 2F04                        C6            .byte	$C6
13325 2F05                        C6            .byte	$C6
13326 2F06                        C6            .byte	$C6
13327 2F07                        C6            .byte	$C6
13328 2F08                        C6            .byte	$C6
13329 2F09                        C6            .byte	$C6
13330 2F0A                        C6            .byte	$C6
13331 2F0B                        C6            .byte	$C6
13332 2F0C                        7C            .byte	$7C
13333 2F0D                        00            .byte	0
13334 2F0E                        00            .byte	0
13335 2F0F                        00            .byte	0
13336 2F10                        00            .byte	0
13337                                           ! 1559  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F11                        00            .byte	0
13339 2F12                        18            .byte	$18
13340 2F13                        18            .byte	$18
13341 2F14                        7E            .byte	$7E
13342 2F15                        C3            .byte	$C3
13343 2F16                        C0            .byte	$C0
13344 2F17                        C0            .byte	$C0
13345 2F18                        C0            .byte	$C0
13346 2F19                        C3            .byte	$C3
13347 2F1A                        7E            .byte	$7E
13348 2F1B                        18            .byte	$18
13349 2F1C                        18            .byte	$18
13350 2F1D                        00            .byte	0
13351 2F1E                        00            .byte	0
13352 2F1F                        00            .byte	0
13353 2F20                        00            .byte	0
13354                                           ! 1560  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F21                        00            .byte	0
13356 2F22                        38            .byte	$38
13357 2F23                        6C            .byte	$6C
13358 2F24                        64            .byte	$64
13359 2F25                        60            .byte	$60
13360 2F26                        F0            .byte	$F0
13361 2F27                        60            .byte	$60
13362 2F28                        60            .byte	$60
13363 2F29                        60            .byte	$60
13364 2F2A                        60            .byte	$60
13365 2F2B                        E6            .byte	$E6
13366 2F2C                        FC            .byte	$FC
13367 2F2D                        00            .byte	0
13368 2F2E                        00            .byte	0
13369 2F2F                        00            .byte	0
13370 2F30                        00            .byte	0
13371                                           ! 1561  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F31                        00            .byte	0
13373 2F32                        00            .byte	0
13374 2F33                        C3            .byte	$C3
13375 2F34                        66            .byte	$66
13376 2F35                        3C            .byte	$3C
13377 2F36                        18            .byte	$18
13378 2F37                        FF            .byte	$FF
13379 2F38                        18            .byte	$18
13380 2F39                        FF            .byte	$FF
13381 2F3A                        18            .byte	$18
13382 2F3B                        18            .byte	$18
13383 2F3C                        18            .byte	$18
13384 2F3D                        00            .byte	0
13385 2F3E                        00            .byte	0
13386 2F3F                        00            .byte	0
13387 2F40                        00            .byte	0
13388                                           ! 1562  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F41                        00            .byte	0
13390 2F42                        FC            .byte	$FC
13391 2F43                        66            .byte	$66
13392 2F44                        66            .byte	$66
13393 2F45                        7C            .byte	$7C
13394 2F46                        62            .byte	$62
13395 2F47                        66            .byte	$66
13396 2F48                        6F            .byte	$6F
13397 2F49                        66            .byte	$66
13398 2F4A                        66            .byte	$66
13399 2F4B                        66            .byte	$66
13400 2F4C                        F3            .byte	$F3
13401 2F4D                        00            .byte	0
13402 2F4E                        00            .byte	0
13403 2F4F                        00            .byte	0
13404 2F50                        00            .byte	0
13405                                           ! 1563  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13406 2F51                        00            .byte	0
13407 2F52                        0E            .byte	$E
13408 2F53                        1B            .byte	$1B
13409 2F54                        18            .byte	$18
13410 2F55                        18            .byte	$18
13411 2F56                        18            .byte	$18
13412 2F57                        7E            .byte	$7E
13413 2F58                        18            .byte	$18
13414 2F59                        18            .byte	$18
13415 2F5A                        18            .byte	$18
13416 2F5B                        18            .byte	$18
13417 2F5C                        18            .byte	$18
13418 2F5D                        D8            .byte	$D8
13419 2F5E                        70            .byte	$70
13420 2F5F                        00            .byte	0
13421 2F60                        00            .byte	0
13422                                           ! 1564  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c
13423 2F61                        00            .byte	0
13424 2F62                        18            .byte	$18
13425 2F63                        30            .byte	$30
13426 2F64                        60            .byte	$60
13427 2F65                        00            .byte	0
13428 2F66                        78            .byte	$78
13429                                           ! 1564 , 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13430 2F67                        0C            .byte	$C
13431 2F68                        7C            .byte	$7C
13432 2F69                        CC            .byte	$CC
13433 2F6A                        CC            .byte	$CC
13434 2F6B                        CC            .byte	$CC
13435 2F6C                        76            .byte	$76
13436 2F6D                        00            .byte	0
13437 2F6E                        00            .byte	0
13438 2F6F                        00            .byte	0
13439 2F70                        00            .byte	0
13440                                           ! 1565  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F71                        00            .byte	0
13442 2F72                        0C            .byte	$C
13443 2F73                        18            .byte	$18
13444 2F74                        30            .byte	$30
13445 2F75                        00            .byte	0
13446 2F76                        38            .byte	$38
13447 2F77                        18            .byte	$18
13448 2F78                        18            .byte	$18
13449 2F79                        18            .byte	$18
13450 2F7A                        18            .byte	$18
13451 2F7B                        18            .byte	$18
13452 2F7C                        3C            .byte	$3C
13453 2F7D                        00            .byte	0
13454 2F7E                        00            .byte	0
13455 2F7F                        00            .byte	0
13456 2F80                        00            .byte	0
13457                                           ! 1566  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F81                        00            .byte	0
13459 2F82                        18            .byte	$18
13460 2F83                        30            .byte	$30
13461 2F84                        60            .byte	$60
13462 2F85                        00            .byte	0
13463 2F86                        7C            .byte	$7C
13464 2F87                        C6            .byte	$C6
13465 2F88                        C6            .byte	$C6
13466 2F89                        C6            .byte	$C6
13467 2F8A                        C6            .byte	$C6
13468 2F8B                        C6            .byte	$C6
13469 2F8C                        7C            .byte	$7C
13470 2F8D                        00            .byte	0
13471 2F8E                        00            .byte	0
13472 2F8F                        00            .byte	0
13473 2F90                        00            .byte	0
13474                                           ! 1567  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F91                        00            .byte	0
13476 2F92                        18            .byte	$18
13477 2F93                        30            .byte	$30
13478 2F94                        60            .byte	$60
13479 2F95                        00            .byte	0
13480 2F96                        CC            .byte	$CC
13481 2F97                        CC            .byte	$CC
13482 2F98                        CC            .byte	$CC
13483 2F99                        CC            .byte	$CC
13484 2F9A                        CC            .byte	$CC
13485 2F9B                        CC            .byte	$CC
13486 2F9C                        76            .byte	$76
13487 2F9D                        00            .byte	0
13488 2F9E                        00            .byte	0
13489 2F9F                        00            .byte	0
13490 2FA0                        00            .byte	0
13491                                           ! 1568  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2FA1                        00            .byte	0
13493 2FA2                        00            .byte	0
13494 2FA3                        76            .byte	$76
13495 2FA4                        DC            .byte	$DC
13496 2FA5                        00            .byte	0
13497 2FA6                        DC            .byte	$DC
13498 2FA7                        66            .byte	$66
13499 2FA8                        66            .byte	$66
13500 2FA9                        66            .byte	$66
13501 2FAA                        66            .byte	$66
13502 2FAB                        66            .byte	$66
13503 2FAC                        66            .byte	$66
13504 2FAD                        00            .byte	0
13505 2FAE                        00            .byte	0
13506 2FAF                        00            .byte	0
13507 2FB0                        00            .byte	0
13508                                           ! 1569  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FB1                        76            .byte	$76
13510 2FB2                        DC            .byte	$DC
13511 2FB3                        00            .byte	0
13512 2FB4                        C6            .byte	$C6
13513 2FB5                        E6            .byte	$E6
13514 2FB6                        F6            .byte	$F6
13515 2FB7                        FE            .byte	$FE
13516 2FB8                        DE            .byte	$DE
13517 2FB9                        CE            .byte	$CE
13518 2FBA                        C6            .byte	$C6
13519 2FBB                        C6            .byte	$C6
13520 2FBC                        C6            .byte	$C6
13521 2FBD                        00            .byte	0
13522 2FBE                        00            .byte	0
13523 2FBF                        00            .byte	0
13524 2FC0                        00            .byte	0
13525                                           ! 1570  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FC1                        00            .byte	0
13527 2FC2                        3C            .byte	$3C
13528 2FC3                        6C            .byte	$6C
13529 2FC4                        6C            .byte	$6C
13530 2FC5                        3E            .byte	$3E
13531 2FC6                        00            .byte	0
13532 2FC7                        7E            .byte	$7E
13533 2FC8                        00            .byte	0
13534 2FC9                        00            .byte	0
13535 2FCA                        00            .byte	0
13536 2FCB                        00            .byte	0
13537 2FCC                        00            .byte	0
13538 2FCD                        00            .byte	0
13539 2FCE                        00            .byte	0
13540 2FCF                        00            .byte	0
13541 2FD0                        00            .byte	0
13542                                           ! 1571  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FD1                        00            .byte	0
13544 2FD2                        38            .byte	$38
13545 2FD3                        6C            .byte	$6C
13546 2FD4                        6C            .byte	$6C
13547 2FD5                        38            .byte	$38
13548 2FD6                        00            .byte	0
13549 2FD7                        7C            .byte	$7C
13550 2FD8                        00            .byte	0
13551 2FD9                        00            .byte	0
13552 2FDA                        00            .byte	0
13553 2FDB                        00            .byte	0
13554 2FDC                        00            .byte	0
13555 2FDD                        00            .byte	0
13556 2FDE                        00            .byte	0
13557 2FDF                        00            .byte	0
13558 2FE0                        00            .byte	0
13559                                           ! 1572  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FE1                        00            .byte	0
13561 2FE2                        00            .byte	0
13562 2FE3                        30            .byte	$30
13563 2FE4                        30            .byte	$30
13564 2FE5                        00            .byte	0
13565 2FE6                        30            .byte	$30
13566 2FE7                        30            .byte	$30
13567 2FE8                        60            .byte	$60
13568 2FE9                        C0            .byte	$C0
13569 2FEA                        C6            .byte	$C6
13570 2FEB                        C6            .byte	$C6
13571 2FEC                        7C            .byte	$7C
13572 2FED                        00            .byte	0
13573 2FEE                        00            .byte	0
13574 2FEF                        00            .byte	0
13575 2FF0                        00            .byte	0
13576                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FF1                        00            .byte	0
13578 2FF2                        00            .byte	0
13579 2FF3                        00            .byte	0
13580 2FF4                        00            .byte	0
13581 2FF5                        00            .byte	0
13582 2FF6                        00            .byte	0
13583 2FF7                        FE            .byte	$FE
13584 2FF8                        C0            .byte	$C0
13585 2FF9                        C0            .byte	$C0
13586 2FFA                        C0            .byte	$C0
13587 2FFB                        C0            .byte	$C0
13588 2FFC                        00            .byte	0
13589 2FFD                        00            .byte	0
13590 2FFE                        00            .byte	0
13591 2FFF                        00            .byte	0
13592 3000                        00            .byte	0
13593                                           ! 1574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 3001                        00            .byte	0
13595 3002                        00            .byte	0
13596 3003                        00            .byte	0
13597 3004                        00            .byte	0
13598 3005                        00            .byte	0
13599 3006                        00            .byte	0
13600 3007                        FE            .byte	$FE
13601 3008                        06            .byte	6
13602 3009                        06            .byte	6
13603 300A                        06            .byte	6
13604 300B                        06            .byte	6
13605 300C                        00            .byte	0
13606 300D                        00            .byte	0
13607 300E                        00            .byte	0
13608 300F                        00            .byte	0
13609 3010                        00            .byte	0
13610                                           ! 1575  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 3011                        00            .byte	0
13612 3012                        C0            .byte	$C0
13613 3013                        C0            .byte	$C0
13614 3014                        C2            .byte	$C2
13615 3015                        C6            .byte	$C6
13616 3016                        CC            .byte	$CC
13617 3017                        18            .byte	$18
13618 3018                        30            .byte	$30
13619 3019                        60            .byte	$60
13620 301A                        CE            .byte	$CE
13621 301B                        9B            .byte	$9B
13622 301C                        06            .byte	6
13623 301D                        0C            .byte	$C
13624 301E                        1F            .byte	$1F
13625 301F                        00            .byte	0
13626 3020                        00            .byte	0
13627                                           ! 1576  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 3021                        00            .byte	0
13629 3022                        C0            .byte	$C0
13630 3023                        C0            .byte	$C0
13631 3024                        C2            .byte	$C2
13632 3025                        C6            .byte	$C6
13633 3026                        CC            .byte	$CC
13634 3027                        18            .byte	$18
13635 3028                        30            .byte	$30
13636 3029                        66            .byte	$66
13637 302A                        CE            .byte	$CE
13638 302B                        96            .byte	$96
13639 302C                        3E            .byte	$3E
13640 302D                        06            .byte	6
13641 302E                        06            .byte	6
13642 302F                        00            .byte	0
13643 3030                        00            .byte	0
13644                                           ! 1577  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 3031                        00            .byte	0
13646 3032                        00            .byte	0
13647 3033                        18            .byte	$18
13648 3034                        18            .byte	$18
13649 3035                        00            .byte	0
13650 3036                        18            .byte	$18
13651 3037                        18            .byte	$18
13652 3038                        18            .byte	$18
13653 3039                        3C            .byte	$3C
13654 303A                        3C            .byte	$3C
13655 303B                        3C            .byte	$3C
13656 303C                        18            .byte	$18
13657 303D                        00            .byte	0
13658 303E                        00            .byte	0
13659 303F                        00            .byte	0
13660 3040                        00            .byte	0
13661                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 3041                        00            .byte	0
13663 3042                        00            .byte	0
13664 3043                        00            .byte	0
13665 3044                        00            .byte	0
13666 3045                        00            .byte	0
13667 3046                        36            .byte	$36
13668 3047                        6C            .byte	$6C
13669 3048                        D8            .byte	$D8
13670 3049                        6C            .byte	$6C
13671 304A                        36            .byte	$36
13672 304B                        00            .byte	0
13673 304C                        00            .byte	0
13674 304D                        00            .byte	0
13675 304E                        00            .byte	0
13676 304F                        00            .byte	0
13677 3050                        00            .byte	0
13678                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 3051                        00            .byte	0
13680 3052                        00            .byte	0
13681 3053                        00            .byte	0
13682 3054                        00            .byte	0
13683 3055                        00            .byte	0
13684 3056                        D8            .byte	$D8
13685 3057                        6C            .byte	$6C
13686 3058                        36            .byte	$36
13687 3059                        6C            .byte	$6C
13688 305A                        D8            .byte	$D8
13689 305B                        00            .byte	0
13690 305C                        00            .byte	0
13691 305D                        00            .byte	0
13692 305E                        00            .byte	0
13693 305F                        00            .byte	0
13694 3060                        00            .byte	0
13695                                           ! 1580  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 3061                        11            .byte	$11
13697 3062                        44            .byte	$44
13698 3063                        11            .byte	$11
13699 3064                        44            .byte	$44
13700 3065                        11            .byte	$11
13701 3066                        44            .byte	$44
13702 3067                        11            .byte	$11
13703 3068                        44            .byte	$44
13704 3069                        11            .byte	$11
13705 306A                        44            .byte	$44
13706 306B                        11            .byte	$11
13707 306C                        44            .byte	$44
13708 306D                        11            .byte	$11
13709 306E                        44            .byte	$44
13710 306F                        11            .byte	$11
13711 3070                        44            .byte	$44
13712                                           ! 1581  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 3071                        55            .byte	$55
13714 3072                        AA            .byte	$AA
13715 3073                        55            .byte	$55
13716 3074                        AA            .byte	$AA
13717 3075                        55            .byte	$55
13718 3076                        AA            .byte	$AA
13719 3077                        55            .byte	$55
13720 3078                        AA            .byte	$AA
13721 3079                        55            .byte	$55
13722 307A                        AA            .byte	$AA
13723 307B                        55            .byte	$55
13724 307C                        AA            .byte	$AA
13725 307D                        55            .byte	$55
13726 307E                        AA            .byte	$AA
13727 307F                        55            .byte	$55
13728 3080                        AA            .byte	$AA
13729                                           ! 1582  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 3081                        DD            .byte	$DD
13731 3082                        77            .byte	$77
13732 3083                        DD            .byte	$DD
13733 3084                        77            .byte	$77
13734 3085                        DD            .byte	$DD
13735 3086                        77            .byte	$77
13736 3087                        DD            .byte	$DD
13737 3088                        77            .byte	$77
13738 3089                        DD            .byte	$DD
13739 308A                        77            .byte	$77
13740 308B                        DD            .byte	$DD
13741 308C                        77            .byte	$77
13742 308D                        DD            .byte	$DD
13743 308E                        77            .byte	$77
13744 308F                        DD            .byte	$DD
13745 3090                        77            .byte	$77
13746                                           ! 1583  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 3091                        18            .byte	$18
13748 3092                        18            .byte	$18
13749 3093                        18            .byte	$18
13750 3094                        18            .byte	$18
13751 3095                        18            .byte	$18
13752 3096                        18            .byte	$18
13753 3097                        18            .byte	$18
13754 3098                        18            .byte	$18
13755 3099                        18            .byte	$18
13756 309A                        18            .byte	$18
13757 309B                        18            .byte	$18
13758 309C                        18            .byte	$18
13759 309D                        18            .byte	$18
13760 309E                        18            .byte	$18
13761 309F                        18            .byte	$18
13762 30A0                        18            .byte	$18
13763                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 30A1                        18            .byte	$18
13765 30A2                        18            .byte	$18
13766 30A3                        18            .byte	$18
13767 30A4                        18            .byte	$18
13768 30A5                        18            .byte	$18
13769 30A6                        18            .byte	$18
13770 30A7                        18            .byte	$18
13771 30A8                        F8            .byte	$F8
13772 30A9                        18            .byte	$18
13773 30AA                        18            .byte	$18
13774 30AB                        18            .byte	$18
13775 30AC                        18            .byte	$18
13776 30AD                        18            .byte	$18
13777 30AE                        18            .byte	$18
13778 30AF                        18            .byte	$18
13779 30B0                        18            .byte	$18
13780                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x1
13781 30B1                        18            .byte	$18
13782 30B2                        18            .byte	$18
13783 30B3                        18            .byte	$18
13784 30B4                        18            .byte	$18
13785 30B5                        18            .byte	$18
13786 30B6                        F8            .byte	$F8
13787 30B7                        18            .byte	$18
13788 30B8                        F8            .byte	$F8
13789                                           ! 1585 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13790 30B9                        18            .byte	$18
13791 30BA                        18            .byte	$18
13792 30BB                        18            .byte	$18
13793 30BC                        18            .byte	$18
13794 30BD                        18            .byte	$18
13795 30BE                        18            .byte	$18
13796 30BF                        18            .byte	$18
13797 30C0                        18            .byte	$18
13798                                           ! 1586  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30C1                        36            .byte	$36
13800 30C2                        36            .byte	$36
13801 30C3                        36            .byte	$36
13802 30C4                        36            .byte	$36
13803 30C5                        36            .byte	$36
13804 30C6                        36            .byte	$36
13805 30C7                        36            .byte	$36
13806 30C8                        F6            .byte	$F6
13807 30C9                        36            .byte	$36
13808 30CA                        36            .byte	$36
13809 30CB                        36            .byte	$36
13810 30CC                        36            .byte	$36
13811 30CD                        36            .byte	$36
13812 30CE                        36            .byte	$36
13813 30CF                        36            .byte	$36
13814 30D0                        36            .byte	$36
13815                                           ! 1587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30D1                        00            .byte	0
13817 30D2                        00            .byte	0
13818 30D3                        00            .byte	0
13819 30D4                        00            .byte	0
13820 30D5                        00            .byte	0
13821 30D6                        00            .byte	0
13822 30D7                        00            .byte	0
13823 30D8                        FE            .byte	$FE
13824 30D9                        36            .byte	$36
13825 30DA                        36            .byte	$36
13826 30DB                        36            .byte	$36
13827 30DC                        36            .byte	$36
13828 30DD                        36            .byte	$36
13829 30DE                        36            .byte	$36
13830 30DF                        36            .byte	$36
13831 30E0                        36            .byte	$36
13832                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30E1                        00            .byte	0
13834 30E2                        00            .byte	0
13835 30E3                        00            .byte	0
13836 30E4                        00            .byte	0
13837 30E5                        00            .byte	0
13838 30E6                        F8            .byte	$F8
13839 30E7                        18            .byte	$18
13840 30E8                        F8            .byte	$F8
13841 30E9                        18            .byte	$18
13842 30EA                        18            .byte	$18
13843 30EB                        18            .byte	$18
13844 30EC                        18            .byte	$18
13845 30ED                        18            .byte	$18
13846 30EE                        18            .byte	$18
13847 30EF                        18            .byte	$18
13848 30F0                        18            .byte	$18
13849                                           ! 1589  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30F1                        36            .byte	$36
13851 30F2                        36            .byte	$36
13852 30F3                        36            .byte	$36
13853 30F4                        36            .byte	$36
13854 30F5                        36            .byte	$36
13855 30F6                        F6            .byte	$F6
13856 30F7                        06            .byte	6
13857 30F8                        F6            .byte	$F6
13858 30F9                        36            .byte	$36
13859 30FA                        36            .byte	$36
13860 30FB                        36            .byte	$36
13861 30FC                        36            .byte	$36
13862 30FD                        36            .byte	$36
13863 30FE                        36            .byte	$36
13864 30FF                        36            .byte	$36
13865 3100                        36            .byte	$36
13866                                           ! 1590  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 3101                        36            .byte	$36
13868 3102                        36            .byte	$36
13869 3103                        36            .byte	$36
13870 3104                        36            .byte	$36
13871 3105                        36            .byte	$36
13872 3106                        36            .byte	$36
13873 3107                        36            .byte	$36
13874 3108                        36            .byte	$36
13875 3109                        36            .byte	$36
13876 310A                        36            .byte	$36
13877 310B                        36            .byte	$36
13878 310C                        36            .byte	$36
13879 310D                        36            .byte	$36
13880 310E                        36            .byte	$36
13881 310F                        36            .byte	$36
13882 3110                        36            .byte	$36
13883                                           ! 1591  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 3111                        00            .byte	0
13885 3112                        00            .byte	0
13886 3113                        00            .byte	0
13887 3114                        00            .byte	0
13888 3115                        00            .byte	0
13889 3116                        FE            .byte	$FE
13890 3117                        06            .byte	6
13891 3118                        F6            .byte	$F6
13892 3119                        36            .byte	$36
13893 311A                        36            .byte	$36
13894 311B                        36            .byte	$36
13895 311C                        36            .byte	$36
13896 311D                        36            .byte	$36
13897 311E                        36            .byte	$36
13898 311F                        36            .byte	$36
13899 3120                        36            .byte	$36
13900                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 3121                        36            .byte	$36
13902 3122                        36            .byte	$36
13903 3123                        36            .byte	$36
13904 3124                        36            .byte	$36
13905 3125                        36            .byte	$36
13906 3126                        F6            .byte	$F6
13907 3127                        06            .byte	6
13908 3128                        FE            .byte	$FE
13909 3129                        00            .byte	0
13910 312A                        00            .byte	0
13911 312B                        00            .byte	0
13912 312C                        00            .byte	0
13913 312D                        00            .byte	0
13914 312E                        00            .byte	0
13915 312F                        00            .byte	0
13916 3130                        00            .byte	0
13917                                           ! 1593  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 3131                        36            .byte	$36
13919 3132                        36            .byte	$36
13920 3133                        36            .byte	$36
13921 3134                        36            .byte	$36
13922 3135                        36            .byte	$36
13923 3136                        36            .byte	$36
13924 3137                        36            .byte	$36
13925 3138                        FE            .byte	$FE
13926 3139                        00            .byte	0
13927 313A                        00            .byte	0
13928 313B                        00            .byte	0
13929 313C                        00            .byte	0
13930 313D                        00            .byte	0
13931 313E                        00            .byte	0
13932 313F                        00            .byte	0
13933 3140                        00            .byte	0
13934                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 3141                        18            .byte	$18
13936 3142                        18            .byte	$18
13937 3143                        18            .byte	$18
13938 3144                        18            .byte	$18
13939 3145                        18            .byte	$18
13940 3146                        F8            .byte	$F8
13941 3147                        18            .byte	$18
13942 3148                        F8            .byte	$F8
13943 3149                        00            .byte	0
13944 314A                        00            .byte	0
13945 314B                        00            .byte	0
13946 314C                        00            .byte	0
13947 314D                        00            .byte	0
13948 314E                        00            .byte	0
13949 314F                        00            .byte	0
13950 3150                        00            .byte	0
13951                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 3151                        00            .byte	0
13953 3152                        00            .byte	0
13954 3153                        00            .byte	0
13955 3154                        00            .byte	0
13956 3155                        00            .byte	0
13957 3156                        00            .byte	0
13958 3157                        00            .byte	0
13959 3158                        F8            .byte	$F8
13960 3159                        18            .byte	$18
13961 315A                        18            .byte	$18
13962 315B                        18            .byte	$18
13963 315C                        18            .byte	$18
13964 315D                        18            .byte	$18
13965 315E                        18            .byte	$18
13966 315F                        18            .byte	$18
13967 3160                        18            .byte	$18
13968                                           ! 1596  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 3161                        18            .byte	$18
13970 3162                        18            .byte	$18
13971 3163                        18            .byte	$18
13972 3164                        18            .byte	$18
13973 3165                        18            .byte	$18
13974 3166                        18            .byte	$18
13975 3167                        18            .byte	$18
13976 3168                        1F            .byte	$1F
13977 3169                        00            .byte	0
13978 316A                        00            .byte	0
13979 316B                        00            .byte	0
13980 316C                        00            .byte	0
13981 316D                        00            .byte	0
13982 316E                        00            .byte	0
13983 316F                        00            .byte	0
13984 3170                        00            .byte	0
13985                                           ! 1597  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 3171                        18            .byte	$18
13987 3172                        18            .byte	$18
13988 3173                        18            .byte	$18
13989 3174                        18            .byte	$18
13990 3175                        18            .byte	$18
13991 3176                        18            .byte	$18
13992 3177                        18            .byte	$18
13993 3178                        FF            .byte	$FF
13994 3179                        00            .byte	0
13995 317A                        00            .byte	0
13996 317B                        00            .byte	0
13997 317C                        00            .byte	0
13998 317D                        00            .byte	0
13999 317E                        00            .byte	0
14000 317F                        00            .byte	0
14001 3180                        00            .byte	0
14002                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 3181                        00            .byte	0
14004 3182                        00            .byte	0
14005 3183                        00            .byte	0
14006 3184                        00            .byte	0
14007 3185                        00            .byte	0
14008 3186                        00            .byte	0
14009 3187                        00            .byte	0
14010 3188                        FF            .byte	$FF
14011 3189                        18            .byte	$18
14012 318A                        18            .byte	$18
14013 318B                        18            .byte	$18
14014 318C                        18            .byte	$18
14015 318D                        18            .byte	$18
14016 318E                        18            .byte	$18
14017 318F                        18            .byte	$18
14018 3190                        18            .byte	$18
14019                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 3191                        18            .byte	$18
14021 3192                        18            .byte	$18
14022 3193                        18            .byte	$18
14023 3194                        18            .byte	$18
14024 3195                        18            .byte	$18
14025 3196                        18            .byte	$18
14026 3197                        18            .byte	$18
14027 3198                        1F            .byte	$1F
14028 3199                        18            .byte	$18
14029 319A                        18            .byte	$18
14030 319B                        18            .byte	$18
14031 319C                        18            .byte	$18
14032 319D                        18            .byte	$18
14033 319E                        18            .byte	$18
14034 319F                        18            .byte	$18
14035 31A0                        18            .byte	$18
14036                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 31A1                        00            .byte	0
14038 31A2                        00            .byte	0
14039 31A3                        00            .byte	0
14040 31A4                        00            .byte	0
14041 31A5                        00            .byte	0
14042 31A6                        00            .byte	0
14043 31A7                        00            .byte	0
14044 31A8                        FF            .byte	$FF
14045 31A9                        00            .byte	0
14046 31AA                        00            .byte	0
14047 31AB                        00            .byte	0
14048 31AC                        00            .byte	0
14049 31AD                        00            .byte	0
14050 31AE                        00            .byte	0
14051 31AF                        00            .byte	0
14052 31B0                        00            .byte	0
14053                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31B1                        18            .byte	$18
14055 31B2                        18            .byte	$18
14056 31B3                        18            .byte	$18
14057 31B4                        18            .byte	$18
14058 31B5                        18            .byte	$18
14059 31B6                        18            .byte	$18
14060 31B7                        18            .byte	$18
14061 31B8                        FF            .byte	$FF
14062 31B9                        18            .byte	$18
14063 31BA                        18            .byte	$18
14064 31BB                        18            .byte	$18
14065 31BC                        18            .byte	$18
14066 31BD                        18            .byte	$18
14067 31BE                        18            .byte	$18
14068 31BF                        18            .byte	$18
14069 31C0                        18            .byte	$18
14070                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31C1                        18            .byte	$18
14072 31C2                        18            .byte	$18
14073 31C3                        18            .byte	$18
14074 31C4                        18            .byte	$18
14075 31C5                        18            .byte	$18
14076 31C6                        1F            .byte	$1F
14077 31C7                        18            .byte	$18
14078 31C8                        1F            .byte	$1F
14079 31C9                        18            .byte	$18
14080 31CA                        18            .byte	$18
14081 31CB                        18            .byte	$18
14082 31CC                        18            .byte	$18
14083 31CD                        18            .byte	$18
14084 31CE                        18            .byte	$18
14085 31CF                        18            .byte	$18
14086 31D0                        18            .byte	$18
14087                                           ! 1603  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31D1                        36            .byte	$36
14089 31D2                        36            .byte	$36
14090 31D3                        36            .byte	$36
14091 31D4                        36            .byte	$36
14092 31D5                        36            .byte	$36
14093 31D6                        36            .byte	$36
14094 31D7                        36            .byte	$36
14095 31D8                        37            .byte	$37
14096 31D9                        36            .byte	$36
14097 31DA                        36            .byte	$36
14098 31DB                        36            .byte	$36
14099 31DC                        36            .byte	$36
14100 31DD                        36            .byte	$36
14101 31DE                        36            .byte	$36
14102 31DF                        36            .byte	$36
14103 31E0                        36            .byte	$36
14104                                           ! 1604  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31E1                        36            .byte	$36
14106 31E2                        36            .byte	$36
14107 31E3                        36            .byte	$36
14108 31E4                        36            .byte	$36
14109 31E5                        36            .byte	$36
14110 31E6                        37            .byte	$37
14111 31E7                        30            .byte	$30
14112 31E8                        3F            .byte	$3F
14113 31E9                        00            .byte	0
14114 31EA                        00            .byte	0
14115 31EB                        00            .byte	0
14116 31EC                        00            .byte	0
14117 31ED                        00            .byte	0
14118 31EE                        00            .byte	0
14119 31EF                        00            .byte	0
14120 31F0                        00            .byte	0
14121                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14122 31F1                        00            .byte	0
14123 31F2                        00            .byte	0
14124 31F3                        00            .byte	0
14125 31F4                        00            .byte	0
14126 31F5                        00            .byte	0
14127 31F6                        3F            .byte	$3F
14128 31F7                        30            .byte	$30
14129 31F8                        37            .byte	$37
14130 31F9                        36            .byte	$36
14131 31FA                        36            .byte	$36
14132 31FB                        36            .byte	$36
14133 31FC                        36            .byte	$36
14134 31FD                        36            .byte	$36
14135 31FE                        36            .byte	$36
14136 31FF                        36            .byte	$36
14137 3200                        36            .byte	$36
14138                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x
14139 3201                        36            .byte	$36
14140 3202                        36            .byte	$36
14141 3203                        36            .byte	$36
14142 3204                        36            .byte	$36
14143 3205                        36            .byte	$36
14144 3206                        F7            .byte	$F7
14145 3207                        00            .byte	0
14146 3208                        FF            .byte	$FF
14147 3209                        00            .byte	0
14148 320A                        00            .byte	0
14149                                           ! 1606 00, 0x00, 0x00, 0x00, 0x00, 0x00,
14150 320B                        00            .byte	0
14151 320C                        00            .byte	0
14152 320D                        00            .byte	0
14153 320E                        00            .byte	0
14154 320F                        00            .byte	0
14155 3210                        00            .byte	0
14156                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 3211                        00            .byte	0
14158 3212                        00            .byte	0
14159 3213                        00            .byte	0
14160 3214                        00            .byte	0
14161 3215                        00            .byte	0
14162 3216                        FF            .byte	$FF
14163 3217                        00            .byte	0
14164 3218                        F7            .byte	$F7
14165 3219                        36            .byte	$36
14166 321A                        36            .byte	$36
14167 321B                        36            .byte	$36
14168 321C                        36            .byte	$36
14169 321D                        36            .byte	$36
14170 321E                        36            .byte	$36
14171 321F                        36            .byte	$36
14172 3220                        36            .byte	$36
14173                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 3221                        36            .byte	$36
14175 3222                        36            .byte	$36
14176 3223                        36            .byte	$36
14177 3224                        36            .byte	$36
14178 3225                        36            .byte	$36
14179 3226                        37            .byte	$37
14180 3227                        30            .byte	$30
14181 3228                        37            .byte	$37
14182 3229                        36            .byte	$36
14183 322A                        36            .byte	$36
14184 322B                        36            .byte	$36
14185 322C                        36            .byte	$36
14186 322D                        36            .byte	$36
14187 322E                        36            .byte	$36
14188 322F                        36            .byte	$36
14189 3230                        36            .byte	$36
14190                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 3231                        00            .byte	0
14192 3232                        00            .byte	0
14193 3233                        00            .byte	0
14194 3234                        00            .byte	0
14195 3235                        00            .byte	0
14196 3236                        FF            .byte	$FF
14197 3237                        00            .byte	0
14198 3238                        FF            .byte	$FF
14199 3239                        00            .byte	0
14200 323A                        00            .byte	0
14201 323B                        00            .byte	0
14202 323C                        00            .byte	0
14203 323D                        00            .byte	0
14204 323E                        00            .byte	0
14205 323F                        00            .byte	0
14206 3240                        00            .byte	0
14207                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 3241                        36            .byte	$36
14209 3242                        36            .byte	$36
14210 3243                        36            .byte	$36
14211 3244                        36            .byte	$36
14212 3245                        36            .byte	$36
14213 3246                        F7            .byte	$F7
14214 3247                        00            .byte	0
14215 3248                        F7            .byte	$F7
14216 3249                        36            .byte	$36
14217 324A                        36            .byte	$36
14218 324B                        36            .byte	$36
14219 324C                        36            .byte	$36
14220 324D                        36            .byte	$36
14221 324E                        36            .byte	$36
14222 324F                        36            .byte	$36
14223 3250                        36            .byte	$36
14224                                           ! 1611  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 3251                        18            .byte	$18
14226 3252                        18            .byte	$18
14227 3253                        18            .byte	$18
14228 3254                        18            .byte	$18
14229 3255                        18            .byte	$18
14230 3256                        FF            .byte	$FF
14231 3257                        00            .byte	0
14232 3258                        FF            .byte	$FF
14233 3259                        00            .byte	0
14234 325A                        00            .byte	0
14235 325B                        00            .byte	0
14236 325C                        00            .byte	0
14237 325D                        00            .byte	0
14238 325E                        00            .byte	0
14239 325F                        00            .byte	0
14240 3260                        00            .byte	0
14241                                           ! 1612  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 3261                        36            .byte	$36
14243 3262                        36            .byte	$36
14244 3263                        36            .byte	$36
14245 3264                        36            .byte	$36
14246 3265                        36            .byte	$36
14247 3266                        36            .byte	$36
14248 3267                        36            .byte	$36
14249 3268                        FF            .byte	$FF
14250 3269                        00            .byte	0
14251 326A                        00            .byte	0
14252 326B                        00            .byte	0
14253 326C                        00            .byte	0
14254 326D                        00            .byte	0
14255 326E                        00            .byte	0
14256 326F                        00            .byte	0
14257 3270                        00            .byte	0
14258                                           ! 1613  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 3271                        00            .byte	0
14260 3272                        00            .byte	0
14261 3273                        00            .byte	0
14262 3274                        00            .byte	0
14263 3275                        00            .byte	0
14264 3276                        FF            .byte	$FF
14265 3277                        00            .byte	0
14266 3278                        FF            .byte	$FF
14267 3279                        18            .byte	$18
14268 327A                        18            .byte	$18
14269 327B                        18            .byte	$18
14270 327C                        18            .byte	$18
14271 327D                        18            .byte	$18
14272 327E                        18            .byte	$18
14273 327F                        18            .byte	$18
14274 3280                        18            .byte	$18
14275                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 3281                        00            .byte	0
14277 3282                        00            .byte	0
14278 3283                        00            .byte	0
14279 3284                        00            .byte	0
14280 3285                        00            .byte	0
14281 3286                        00            .byte	0
14282 3287                        00            .byte	0
14283 3288                        FF            .byte	$FF
14284 3289                        36            .byte	$36
14285 328A                        36            .byte	$36
14286 328B                        36            .byte	$36
14287 328C                        36            .byte	$36
14288 328D                        36            .byte	$36
14289 328E                        36            .byte	$36
14290 328F                        36            .byte	$36
14291 3290                        36            .byte	$36
14292                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 3291                        36            .byte	$36
14294 3292                        36            .byte	$36
14295 3293                        36            .byte	$36
14296 3294                        36            .byte	$36
14297 3295                        36            .byte	$36
14298 3296                        36            .byte	$36
14299 3297                        36            .byte	$36
14300 3298                        3F            .byte	$3F
14301 3299                        00            .byte	0
14302 329A                        00            .byte	0
14303 329B                        00            .byte	0
14304 329C                        00            .byte	0
14305 329D                        00            .byte	0
14306 329E                        00            .byte	0
14307 329F                        00            .byte	0
14308 32A0                        00            .byte	0
14309                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 32A1                        18            .byte	$18
14311 32A2                        18            .byte	$18
14312 32A3                        18            .byte	$18
14313 32A4                        18            .byte	$18
14314 32A5                        18            .byte	$18
14315 32A6                        1F            .byte	$1F
14316 32A7                        18            .byte	$18
14317 32A8                        1F            .byte	$1F
14318 32A9                        00            .byte	0
14319 32AA                        00            .byte	0
14320 32AB                        00            .byte	0
14321 32AC                        00            .byte	0
14322 32AD                        00            .byte	0
14323 32AE                        00            .byte	0
14324 32AF                        00            .byte	0
14325 32B0                        00            .byte	0
14326                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32B1                        00            .byte	0
14328 32B2                        00            .byte	0
14329 32B3                        00            .byte	0
14330 32B4                        00            .byte	0
14331 32B5                        00            .byte	0
14332 32B6                        1F            .byte	$1F
14333 32B7                        18            .byte	$18
14334 32B8                        1F            .byte	$1F
14335 32B9                        18            .byte	$18
14336 32BA                        18            .byte	$18
14337 32BB                        18            .byte	$18
14338 32BC                        18            .byte	$18
14339 32BD                        18            .byte	$18
14340 32BE                        18            .byte	$18
14341 32BF                        18            .byte	$18
14342 32C0                        18            .byte	$18
14343                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32C1                        00            .byte	0
14345 32C2                        00            .byte	0
14346 32C3                        00            .byte	0
14347 32C4                        00            .byte	0
14348 32C5                        00            .byte	0
14349 32C6                        00            .byte	0
14350 32C7                        00            .byte	0
14351 32C8                        3F            .byte	$3F
14352 32C9                        36            .byte	$36
14353 32CA                        36            .byte	$36
14354 32CB                        36            .byte	$36
14355 32CC                        36            .byte	$36
14356 32CD                        36            .byte	$36
14357 32CE                        36            .byte	$36
14358 32CF                        36            .byte	$36
14359 32D0                        36            .byte	$36
14360                                           ! 1619  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32D1                        36            .byte	$36
14362 32D2                        36            .byte	$36
14363 32D3                        36            .byte	$36
14364 32D4                        36            .byte	$36
14365 32D5                        36            .byte	$36
14366 32D6                        36            .byte	$36
14367 32D7                        36            .byte	$36
14368 32D8                        FF            .byte	$FF
14369 32D9                        36            .byte	$36
14370 32DA                        36            .byte	$36
14371 32DB                        36            .byte	$36
14372 32DC                        36            .byte	$36
14373 32DD                        36            .byte	$36
14374 32DE                        36            .byte	$36
14375 32DF                        36            .byte	$36
14376 32E0                        36            .byte	$36
14377                                           ! 1620  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32E1                        18            .byte	$18
14379 32E2                        18            .byte	$18
14380 32E3                        18            .byte	$18
14381 32E4                        18            .byte	$18
14382 32E5                        18            .byte	$18
14383 32E6                        FF            .byte	$FF
14384 32E7                        18            .byte	$18
14385 32E8                        FF            .byte	$FF
14386 32E9                        18            .byte	$18
14387 32EA                        18            .byte	$18
14388 32EB                        18            .byte	$18
14389 32EC                        18            .byte	$18
14390 32ED                        18            .byte	$18
14391 32EE                        18            .byte	$18
14392 32EF                        18            .byte	$18
14393 32F0                        18            .byte	$18
14394                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32F1                        18            .byte	$18
14396 32F2                        18            .byte	$18
14397 32F3                        18            .byte	$18
14398 32F4                        18            .byte	$18
14399 32F5                        18            .byte	$18
14400 32F6                        18            .byte	$18
14401 32F7                        18            .byte	$18
14402 32F8                        F8            .byte	$F8
14403 32F9                        00            .byte	0
14404 32FA                        00            .byte	0
14405 32FB                        00            .byte	0
14406 32FC                        00            .byte	0
14407 32FD                        00            .byte	0
14408 32FE                        00            .byte	0
14409 32FF                        00            .byte	0
14410 3300                        00            .byte	0
14411                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 3301                        00            .byte	0
14413 3302                        00            .byte	0
14414 3303                        00            .byte	0
14415 3304                        00            .byte	0
14416 3305                        00            .byte	0
14417 3306                        00            .byte	0
14418 3307                        00            .byte	0
14419 3308                        1F            .byte	$1F
14420 3309                        18            .byte	$18
14421 330A                        18            .byte	$18
14422 330B                        18            .byte	$18
14423 330C                        18            .byte	$18
14424 330D                        18            .byte	$18
14425 330E                        18            .byte	$18
14426 330F                        18            .byte	$18
14427 3310                        18            .byte	$18
14428                                           ! 1623  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 3311                        FF            .byte	$FF
14430 3312                        FF            .byte	$FF
14431 3313                        FF            .byte	$FF
14432 3314                        FF            .byte	$FF
14433 3315                        FF            .byte	$FF
14434 3316                        FF            .byte	$FF
14435 3317                        FF            .byte	$FF
14436 3318                        FF            .byte	$FF
14437 3319                        FF            .byte	$FF
14438 331A                        FF            .byte	$FF
14439 331B                        FF            .byte	$FF
14440 331C                        FF            .byte	$FF
14441 331D                        FF            .byte	$FF
14442 331E                        FF            .byte	$FF
14443 331F                        FF            .byte	$FF
14444 3320                        FF            .byte	$FF
14445                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 3321                        00            .byte	0
14447 3322                        00            .byte	0
14448 3323                        00            .byte	0
14449 3324                        00            .byte	0
14450 3325                        00            .byte	0
14451 3326                        00            .byte	0
14452 3327                        00            .byte	0
14453 3328                        FF            .byte	$FF
14454 3329                        FF            .byte	$FF
14455 332A                        FF            .byte	$FF
14456 332B                        FF            .byte	$FF
14457 332C                        FF            .byte	$FF
14458 332D                        FF            .byte	$FF
14459 332E                        FF            .byte	$FF
14460 332F                        FF            .byte	$FF
14461 3330                        FF            .byte	$FF
14462                                           ! 1625  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 3331                        F0            .byte	$F0
14464 3332                        F0            .byte	$F0
14465 3333                        F0            .byte	$F0
14466 3334                        F0            .byte	$F0
14467 3335                        F0            .byte	$F0
14468 3336                        F0            .byte	$F0
14469 3337                        F0            .byte	$F0
14470 3338                        F0            .byte	$F0
14471 3339                        F0            .byte	$F0
14472 333A                        F0            .byte	$F0
14473 333B                        F0            .byte	$F0
14474 333C                        F0            .byte	$F0
14475 333D                        F0            .byte	$F0
14476 333E                        F0            .byte	$F0
14477 333F                        F0            .byte	$F0
14478 3340                        F0            .byte	$F0
14479                                           ! 1626  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14480 3341                        0F            .byte	$F
14481 3342                        0F            .byte	$F
14482 3343                        0F            .byte	$F
14483 3344                        0F            .byte	$F
14484 3345                        0F            .byte	$F
14485 3346                        0F            .byte	$F
14486 3347                        0F            .byte	$F
14487 3348                        0F            .byte	$F
14488 3349                        0F            .byte	$F
14489 334A                        0F            .byte	$F
14490 334B                        0F            .byte	$F
14491 334C                        0F            .byte	$F
14492 334D                        0F            .byte	$F
14493 334E                        0F            .byte	$F
14494 334F                        0F            .byte	$F
14495 3350                        0F            .byte	$F
14496                                           ! 1627  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0
14497 3351                        FF            .byte	$FF
14498 3352                        FF            .byte	$FF
14499 3353                        FF            .byte	$FF
14500 3354                        FF            .byte	$FF
14501 3355                        FF            .byte	$FF
14502 3356                        FF            .byte	$FF
14503 3357                        FF            .byte	$FF
14504 3358                        00            .byte	0
14505 3359                        00            .byte	0
14506 335A                        00            .byte	0
14507 335B                        00            .byte	0
14508 335C                        00            .byte	0
14509                                           ! 1627 x00, 0x00, 0x00, 0x00,
14510 335D                        00            .byte	0
14511 335E                        00            .byte	0
14512 335F                        00            .byte	0
14513 3360                        00            .byte	0
14514                                           ! 1628  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 3361                        00            .byte	0
14516 3362                        00            .byte	0
14517 3363                        00            .byte	0
14518 3364                        00            .byte	0
14519 3365                        00            .byte	0
14520 3366                        76            .byte	$76
14521 3367                        DC            .byte	$DC
14522 3368                        D8            .byte	$D8
14523 3369                        D8            .byte	$D8
14524 336A                        D8            .byte	$D8
14525 336B                        DC            .byte	$DC
14526 336C                        76            .byte	$76
14527 336D                        00            .byte	0
14528 336E                        00            .byte	0
14529 336F                        00            .byte	0
14530 3370                        00            .byte	0
14531                                           ! 1629  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 3371                        00            .byte	0
14533 3372                        00            .byte	0
14534 3373                        78            .byte	$78
14535 3374                        CC            .byte	$CC
14536 3375                        CC            .byte	$CC
14537 3376                        CC            .byte	$CC
14538 3377                        D8            .byte	$D8
14539 3378                        CC            .byte	$CC
14540 3379                        C6            .byte	$C6
14541 337A                        C6            .byte	$C6
14542 337B                        C6            .byte	$C6
14543 337C                        CC            .byte	$CC
14544 337D                        00            .byte	0
14545 337E                        00            .byte	0
14546 337F                        00            .byte	0
14547 3380                        00            .byte	0
14548                                           ! 1630  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 3381                        00            .byte	0
14550 3382                        00            .byte	0
14551 3383                        FE            .byte	$FE
14552 3384                        C6            .byte	$C6
14553 3385                        C6            .byte	$C6
14554 3386                        C0            .byte	$C0
14555 3387                        C0            .byte	$C0
14556 3388                        C0            .byte	$C0
14557 3389                        C0            .byte	$C0
14558 338A                        C0            .byte	$C0
14559 338B                        C0            .byte	$C0
14560 338C                        C0            .byte	$C0
14561 338D                        00            .byte	0
14562 338E                        00            .byte	0
14563 338F                        00            .byte	0
14564 3390                        00            .byte	0
14565                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 3391                        00            .byte	0
14567 3392                        00            .byte	0
14568 3393                        00            .byte	0
14569 3394                        00            .byte	0
14570 3395                        FE            .byte	$FE
14571 3396                        6C            .byte	$6C
14572 3397                        6C            .byte	$6C
14573 3398                        6C            .byte	$6C
14574 3399                        6C            .byte	$6C
14575 339A                        6C            .byte	$6C
14576 339B                        6C            .byte	$6C
14577 339C                        6C            .byte	$6C
14578 339D                        00            .byte	0
14579 339E                        00            .byte	0
14580 339F                        00            .byte	0
14581 33A0                        00            .byte	0
14582                                           ! 1632  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 33A1                        00            .byte	0
14584 33A2                        00            .byte	0
14585 33A3                        00            .byte	0
14586 33A4                        FE            .byte	$FE
14587 33A5                        C6            .byte	$C6
14588 33A6                        60            .byte	$60
14589 33A7                        30            .byte	$30
14590 33A8                        18            .byte	$18
14591 33A9                        30            .byte	$30
14592 33AA                        60            .byte	$60
14593 33AB                        C6            .byte	$C6
14594 33AC                        FE            .byte	$FE
14595 33AD                        00            .byte	0
14596 33AE                        00            .byte	0
14597 33AF                        00            .byte	0
14598 33B0                        00            .byte	0
14599                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33B1                        00            .byte	0
14601 33B2                        00            .byte	0
14602 33B3                        00            .byte	0
14603 33B4                        00            .byte	0
14604 33B5                        00            .byte	0
14605 33B6                        7E            .byte	$7E
14606 33B7                        D8            .byte	$D8
14607 33B8                        D8            .byte	$D8
14608 33B9                        D8            .byte	$D8
14609 33BA                        D8            .byte	$D8
14610 33BB                        D8            .byte	$D8
14611 33BC                        70            .byte	$70
14612 33BD                        00            .byte	0
14613 33BE                        00            .byte	0
14614 33BF                        00            .byte	0
14615 33C0                        00            .byte	0
14616                                           ! 1634  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33C1                        00            .byte	0
14618 33C2                        00            .byte	0
14619 33C3                        00            .byte	0
14620 33C4                        00            .byte	0
14621 33C5                        66            .byte	$66
14622 33C6                        66            .byte	$66
14623 33C7                        66            .byte	$66
14624 33C8                        66            .byte	$66
14625 33C9                        66            .byte	$66
14626 33CA                        7C            .byte	$7C
14627 33CB                        60            .byte	$60
14628 33CC                        60            .byte	$60
14629 33CD                        C0            .byte	$C0
14630 33CE                        00            .byte	0
14631 33CF                        00            .byte	0
14632 33D0                        00            .byte	0
14633                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33D1                        00            .byte	0
14635 33D2                        00            .byte	0
14636 33D3                        00            .byte	0
14637 33D4                        00            .byte	0
14638 33D5                        76            .byte	$76
14639 33D6                        DC            .byte	$DC
14640 33D7                        18            .byte	$18
14641 33D8                        18            .byte	$18
14642 33D9                        18            .byte	$18
14643 33DA                        18            .byte	$18
14644 33DB                        18            .byte	$18
14645 33DC                        18            .byte	$18
14646 33DD                        00            .byte	0
14647 33DE                        00            .byte	0
14648 33DF                        00            .byte	0
14649 33E0                        00            .byte	0
14650                                           ! 1636  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33E1                        00            .byte	0
14652 33E2                        00            .byte	0
14653 33E3                        00            .byte	0
14654 33E4                        7E            .byte	$7E
14655 33E5                        18            .byte	$18
14656 33E6                        3C            .byte	$3C
14657 33E7                        66            .byte	$66
14658 33E8                        66            .byte	$66
14659 33E9                        66            .byte	$66
14660 33EA                        3C            .byte	$3C
14661 33EB                        18            .byte	$18
14662 33EC                        7E            .byte	$7E
14663 33ED                        00            .byte	0
14664 33EE                        00            .byte	0
14665 33EF                        00            .byte	0
14666 33F0                        00            .byte	0
14667                                           ! 1637  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33F1                        00            .byte	0
14669 33F2                        00            .byte	0
14670 33F3                        00            .byte	0
14671 33F4                        38            .byte	$38
14672 33F5                        6C            .byte	$6C
14673 33F6                        C6            .byte	$C6
14674 33F7                        C6            .byte	$C6
14675 33F8                        FE            .byte	$FE
14676 33F9                        C6            .byte	$C6
14677 33FA                        C6            .byte	$C6
14678 33FB                        6C            .byte	$6C
14679 33FC                        38            .byte	$38
14680 33FD                        00            .byte	0
14681 33FE                        00            .byte	0
14682 33FF                        00            .byte	0
14683 3400                        00            .byte	0
14684                                           ! 1638  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 3401                        00            .byte	0
14686 3402                        00            .byte	0
14687 3403                        38            .byte	$38
14688 3404                        6C            .byte	$6C
14689 3405                        C6            .byte	$C6
14690 3406                        C6            .byte	$C6
14691 3407                        C6            .byte	$C6
14692 3408                        6C            .byte	$6C
14693 3409                        6C            .byte	$6C
14694 340A                        6C            .byte	$6C
14695 340B                        6C            .byte	$6C
14696 340C                        EE            .byte	$EE
14697 340D                        00            .byte	0
14698 340E                        00            .byte	0
14699 340F                        00            .byte	0
14700 3410                        00            .byte	0
14701                                           ! 1639  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 3411                        00            .byte	0
14703 3412                        00            .byte	0
14704 3413                        1E            .byte	$1E
14705 3414                        30            .byte	$30
14706 3415                        18            .byte	$18
14707 3416                        0C            .byte	$C
14708 3417                        3E            .byte	$3E
14709 3418                        66            .byte	$66
14710 3419                        66            .byte	$66
14711 341A                        66            .byte	$66
14712 341B                        66            .byte	$66
14713 341C                        3C            .byte	$3C
14714 341D                        00            .byte	0
14715 341E                        00            .byte	0
14716 341F                        00            .byte	0
14717 3420                        00            .byte	0
14718                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 3421                        00            .byte	0
14720 3422                        00            .byte	0
14721 3423                        00            .byte	0
14722 3424                        00            .byte	0
14723 3425                        00            .byte	0
14724 3426                        7E            .byte	$7E
14725 3427                        DB            .byte	$DB
14726 3428                        DB            .byte	$DB
14727 3429                        DB            .byte	$DB
14728 342A                        7E            .byte	$7E
14729 342B                        00            .byte	0
14730 342C                        00            .byte	0
14731 342D                        00            .byte	0
14732 342E                        00            .byte	0
14733 342F                        00            .byte	0
14734 3430                        00            .byte	0
14735                                           ! 1641  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 3431                        00            .byte	0
14737 3432                        00            .byte	0
14738 3433                        00            .byte	0
14739 3434                        03            .byte	3
14740 3435                        06            .byte	6
14741 3436                        7E            .byte	$7E
14742 3437                        DB            .byte	$DB
14743 3438                        DB            .byte	$DB
14744 3439                        F3            .byte	$F3
14745 343A                        7E            .byte	$7E
14746 343B                        60            .byte	$60
14747 343C                        C0            .byte	$C0
14748 343D                        00            .byte	0
14749 343E                        00            .byte	0
14750 343F                        00            .byte	0
14751 3440                        00            .byte	0
14752                                           ! 1642  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 3441                        00            .byte	0
14754 3442                        00            .byte	0
14755 3443                        1C            .byte	$1C
14756 3444                        30            .byte	$30
14757 3445                        60            .byte	$60
14758 3446                        60            .byte	$60
14759 3447                        7C            .byte	$7C
14760 3448                        60            .byte	$60
14761 3449                        60            .byte	$60
14762 344A                        60            .byte	$60
14763 344B                        30            .byte	$30
14764 344C                        1C            .byte	$1C
14765 344D                        00            .byte	0
14766 344E                        00            .byte	0
14767 344F                        00            .byte	0
14768 3450                        00            .byte	0
14769                                           ! 1643  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 3451                        00            .byte	0
14771 3452                        00            .byte	0
14772 3453                        00            .byte	0
14773 3454                        7C            .byte	$7C
14774 3455                        C6            .byte	$C6
14775 3456                        C6            .byte	$C6
14776 3457                        C6            .byte	$C6
14777 3458                        C6            .byte	$C6
14778 3459                        C6            .byte	$C6
14779 345A                        C6            .byte	$C6
14780 345B                        C6            .byte	$C6
14781 345C                        C6            .byte	$C6
14782 345D                        00            .byte	0
14783 345E                        00            .byte	0
14784 345F                        00            .byte	0
14785 3460                        00            .byte	0
14786                                           ! 1644  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 3461                        00            .byte	0
14788 3462                        00            .byte	0
14789 3463                        00            .byte	0
14790 3464                        00            .byte	0
14791 3465                        FE            .byte	$FE
14792 3466                        00            .byte	0
14793 3467                        00            .byte	0
14794 3468                        FE            .byte	$FE
14795 3469                        00            .byte	0
14796 346A                        00            .byte	0
14797 346B                        FE            .byte	$FE
14798 346C                        00            .byte	0
14799 346D                        00            .byte	0
14800 346E                        00            .byte	0
14801 346F                        00            .byte	0
14802 3470                        00            .byte	0
14803                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 3471                        00            .byte	0
14805 3472                        00            .byte	0
14806 3473                        00            .byte	0
14807 3474                        00            .byte	0
14808 3475                        18            .byte	$18
14809 3476                        18            .byte	$18
14810 3477                        7E            .byte	$7E
14811 3478                        18            .byte	$18
14812 3479                        18            .byte	$18
14813 347A                        00            .byte	0
14814 347B                        00            .byte	0
14815 347C                        FF            .byte	$FF
14816 347D                        00            .byte	0
14817 347E                        00            .byte	0
14818 347F                        00            .byte	0
14819 3480                        00            .byte	0
14820                                           ! 1646  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 3481                        00            .byte	0
14822 3482                        00            .byte	0
14823 3483                        00            .byte	0
14824 3484                        30            .byte	$30
14825 3485                        18            .byte	$18
14826 3486                        0C            .byte	$C
14827 3487                        06            .byte	6
14828 3488                        0C            .byte	$C
14829 3489                        18            .byte	$18
14830 348A                        30            .byte	$30
14831 348B                        00            .byte	0
14832 348C                        7E            .byte	$7E
14833 348D                        00            .byte	0
14834 348E                        00            .byte	0
14835 348F                        00            .byte	0
14836 3490                        00            .byte	0
14837                                           ! 1647  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14838 3491                        00            .byte	0
14839 3492                        00            .byte	0
14840 3493                        00            .byte	0
14841 3494                        0C            .byte	$C
14842 3495                        18            .byte	$18
14843 3496                        30            .byte	$30
14844 3497                        60            .byte	$60
14845 3498                        30            .byte	$30
14846 3499                        18            .byte	$18
14847 349A                        0C            .byte	$C
14848 349B                        00            .byte	0
14849 349C                        7E            .byte	$7E
14850 349D                        00            .byte	0
14851 349E                        00            .byte	0
14852 349F                        00            .byte	0
14853 34A0                        00            .byte	0
14854                                           ! 1648  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
14855 34A1                        00            .byte	0
14856 34A2                        00            .byte	0
14857 34A3                        0E            .byte	$E
14858 34A4                        1B            .byte	$1B
14859 34A5                        1B            .byte	$1B
14860 34A6                        18            .byte	$18
14861 34A7                        18            .byte	$18
14862 34A8                        18            .byte	$18
14863 34A9                        18            .byte	$18
14864 34AA                        18            .byte	$18
14865 34AB                        18            .byte	$18
14866 34AC                        18            .byte	$18
14867 34AD                        18            .byte	$18
14868 34AE                        18            .byte	$18
14869                                           ! 1648 0x18, 0x18,
14870 34AF                        18            .byte	$18
14871 34B0                        18            .byte	$18
14872                                           ! 1649  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34B1                        18            .byte	$18
14874 34B2                        18            .byte	$18
14875 34B3                        18            .byte	$18
14876 34B4                        18            .byte	$18
14877 34B5                        18            .byte	$18
14878 34B6                        18            .byte	$18
14879 34B7                        18            .byte	$18
14880 34B8                        18            .byte	$18
14881 34B9                        D8            .byte	$D8
14882 34BA                        D8            .byte	$D8
14883 34BB                        D8            .byte	$D8
14884 34BC                        70            .byte	$70
14885 34BD                        00            .byte	0
14886 34BE                        00            .byte	0
14887 34BF                        00            .byte	0
14888 34C0                        00            .byte	0
14889                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34C1                        00            .byte	0
14891 34C2                        00            .byte	0
14892 34C3                        00            .byte	0
14893 34C4                        00            .byte	0
14894 34C5                        18            .byte	$18
14895 34C6                        18            .byte	$18
14896 34C7                        00            .byte	0
14897 34C8                        7E            .byte	$7E
14898 34C9                        00            .byte	0
14899 34CA                        18            .byte	$18
14900 34CB                        18            .byte	$18
14901 34CC                        00            .byte	0
14902 34CD                        00            .byte	0
14903 34CE                        00            .byte	0
14904 34CF                        00            .byte	0
14905 34D0                        00            .byte	0
14906                                           ! 1651  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34D1                        00            .byte	0
14908 34D2                        00            .byte	0
14909 34D3                        00            .byte	0
14910 34D4                        00            .byte	0
14911 34D5                        00            .byte	0
14912 34D6                        76            .byte	$76
14913 34D7                        DC            .byte	$DC
14914 34D8                        00            .byte	0
14915 34D9                        76            .byte	$76
14916 34DA                        DC            .byte	$DC
14917 34DB                        00            .byte	0
14918 34DC                        00            .byte	0
14919 34DD                        00            .byte	0
14920 34DE                        00            .byte	0
14921 34DF                        00            .byte	0
14922 34E0                        00            .byte	0
14923                                           ! 1652  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34E1                        00            .byte	0
14925 34E2                        38            .byte	$38
14926 34E3                        6C            .byte	$6C
14927 34E4                        6C            .byte	$6C
14928 34E5                        38            .byte	$38
14929 34E6                        00            .byte	0
14930 34E7                        00            .byte	0
14931 34E8                        00            .byte	0
14932 34E9                        00            .byte	0
14933 34EA                        00            .byte	0
14934 34EB                        00            .byte	0
14935 34EC                        00            .byte	0
14936 34ED                        00            .byte	0
14937 34EE                        00            .byte	0
14938 34EF                        00            .byte	0
14939 34F0                        00            .byte	0
14940                                           ! 1653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34F1                        00            .byte	0
14942 34F2                        00            .byte	0
14943 34F3                        00            .byte	0
14944 34F4                        00            .byte	0
14945 34F5                        00            .byte	0
14946 34F6                        00            .byte	0
14947 34F7                        00            .byte	0
14948 34F8                        18            .byte	$18
14949 34F9                        18            .byte	$18
14950 34FA                        00            .byte	0
14951 34FB                        00            .byte	0
14952 34FC                        00            .byte	0
14953 34FD                        00            .byte	0
14954 34FE                        00            .byte	0
14955 34FF                        00            .byte	0
14956 3500                        00            .byte	0
14957                                           ! 1654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 3501                        00            .byte	0
14959 3502                        00            .byte	0
14960 3503                        00            .byte	0
14961 3504                        00            .byte	0
14962 3505                        00            .byte	0
14963 3506                        00            .byte	0
14964 3507                        00            .byte	0
14965 3508                        00            .byte	0
14966 3509                        18            .byte	$18
14967 350A                        00            .byte	0
14968 350B                        00            .byte	0
14969 350C                        00            .byte	0
14970 350D                        00            .byte	0
14971 350E                        00            .byte	0
14972 350F                        00            .byte	0
14973 3510                        00            .byte	0
14974                                           ! 1655  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 3511                        00            .byte	0
14976 3512                        0F            .byte	$F
14977 3513                        0C            .byte	$C
14978 3514                        0C            .byte	$C
14979 3515                        0C            .byte	$C
14980 3516                        0C            .byte	$C
14981 3517                        0C            .byte	$C
14982 3518                        EC            .byte	$EC
14983 3519                        6C            .byte	$6C
14984 351A                        6C            .byte	$6C
14985 351B                        3C            .byte	$3C
14986 351C                        1C            .byte	$1C
14987 351D                        00            .byte	0
14988 351E                        00            .byte	0
14989 351F                        00            .byte	0
14990 3520                        00            .byte	0
14991                                           ! 1656  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 3521                        00            .byte	0
14993 3522                        D8            .byte	$D8
14994 3523                        6C            .byte	$6C
14995 3524                        6C            .byte	$6C
14996 3525                        6C            .byte	$6C
14997 3526                        6C            .byte	$6C
14998 3527                        6C            .byte	$6C
14999 3528                        00            .byte	0
15000 3529                        00            .byte	0
15001 352A                        00            .byte	0
15002 352B                        00            .byte	0
15003 352C                        00            .byte	0
15004 352D                        00            .byte	0
15005 352E                        00            .byte	0
15006 352F                        00            .byte	0
15007 3530                        00            .byte	0
15008                                           ! 1657  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 3531                        00            .byte	0
15010 3532                        70            .byte	$70
15011 3533                        D8            .byte	$D8
15012 3534                        30            .byte	$30
15013 3535                        60            .byte	$60
15014 3536                        C8            .byte	$C8
15015 3537                        F8            .byte	$F8
15016 3538                        00            .byte	0
15017 3539                        00            .byte	0
15018 353A                        00            .byte	0
15019 353B                        00            .byte	0
15020 353C                        00            .byte	0
15021 353D                        00            .byte	0
15022 353E                        00            .byte	0
15023 353F                        00            .byte	0
15024 3540                        00            .byte	0
15025                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 3541                        00            .byte	0
15027 3542                        00            .byte	0
15028 3543                        00            .byte	0
15029 3544                        00            .byte	0
15030 3545                        7C            .byte	$7C
15031 3546                        7C            .byte	$7C
15032 3547                        7C            .byte	$7C
15033 3548                        7C            .byte	$7C
15034 3549                        7C            .byte	$7C
15035 354A                        7C            .byte	$7C
15036 354B                        7C            .byte	$7C
15037 354C                        00            .byte	0
15038 354D                        00            .byte	0
15039 354E                        00            .byte	0
15040 354F                        00            .byte	0
15041 3550                        00            .byte	0
15042                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 3551                        00            .byte	0
15044 3552                        00            .byte	0
15045 3553                        00            .byte	0
15046 3554                        00            .byte	0
15047 3555                        00            .byte	0
15048 3556                        00            .byte	0
15049 3557                        00            .byte	0
15050 3558                        00            .byte	0
15051 3559                        00            .byte	0
15052 355A                        00            .byte	0
15053 355B                        00            .byte	0
15054 355C                        00            .byte	0
15055 355D                        00            .byte	0
15056 355E                        00            .byte	0
15057 355F                        00            .byte	0
15058                                           ! 1660 };
15059 3560                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1661 static Bit8u vgafont14alt[1]={0x00};
15062                       00003561            _vgafont14alt:
15063 3561                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1662 static Bit8u vgafont16alt[1]={0x00};
15066                       00003562            _vgafont16alt:
15067 3562                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1663 #asm
15070                                           !BCC_ASM
15071                       00003563            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 3563           BA                   03C2    mov dx, #0x3C2
15074 3566           B0                     C3    mov al, #0xC3
15075 3568           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3569           BA                   03C4    mov dx, #0x3C4
15078 356C           B0                     04    mov al, #0x04
15079 356E           EE                           outb dx,al
15080 356F           BA                   03C5    mov dx, #0x3C5
15081 3572           B0                     02    mov al, #0x02
15082 3574           EE                           outb dx,al
15083 3575           BB                   357F    mov bx, #msg_vga_init
15084 3578           53                           push bx
15085 3579           E8         46FB              call _printf
15086 357C           44                           inc sp
15087 357D           44                           inc sp
15088 357E           C3                           ret
15089                       0000357F            msg_vga_init:
15090 357F                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
15091 35BF                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1685 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1686 #asm
15095                                           !BCC_ASM
15096                       000035C2            init_bios_area:
15097 35C2           1E                           push ds
15098 35C3           B8                   0040    mov ax, # 0x40
15099 35C6           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 35C8           BB                   0010    mov bx, # 0x10
15102 35CB           8B07                         mov ax, [bx]
15103 35CD           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 35D0           0D                   0020    or ax, #0x0020
15106 35D3           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35D5           BB                   0085    mov bx, # 0x85
15110 35D8           B0                     10    mov al, #0x10
15111 35DA           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35DC           BB                   0087    mov bx, # 0x87
15114 35DF           B0                     60    mov al, #0x60
15115 35E1           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35E3           BB                   0088    mov bx, # 0x88
15118 35E6           B0                     F9    mov al, #0xf9
15119 35E8           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35EA           BB                   0089    mov bx, # 0x89
15122 35ED           B0                     51    mov al, #0x51
15123 35EF           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35F1           BB                   0065    mov bx, # 0x65
15126 35F4           B0                     09    mov al, #0x09
15127 35F6           8807                         mov [bx], al
15128 35F8           1F                           pop ds
15129 35F9           C3                           ret
15130                       000035FA            _video_save_pointer_table:
15131 35FA                      0291              .word _video_param_table
15132 35FC                      C000              .word 0xc000
15133 35FE                      0000              .word 0
15134 3600                      0000              .word 0
15135 3602                      0000              .word 0
15136 3604                      0000              .word 0
15137 3606                      0000              .word 0
15138 3608                      0000              .word 0
15139 360A                      0000              .word 0
15140 360C                      0000              .word 0
15141 360E                      0000              .word 0
15142 3610                      0000              .word 0
15143 3612                      0000              .word 0
15144 3614                      0000              .word 0
15145                                           ! 1736 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1737 static void display_splash_screen()
15148                                           ! 1738 {
15149                                           
15150                       00003616            _display_splash_screen:
15151                                           ! 1739 }
15152 3616           C3                         ret
15153                                           ! 1740 static void display_info()
15154                                           ! 1741 {
15155                       00003617            _display_info:
15156                                           ! 1742 #asm
15157                                           !BCC_ASM
15158 3617           B8                   C000   mov ax,#0xc000
15159 361A           8ED8                        mov ds,ax
15160 361C           BE                   0022   mov si,#vgabios_name
15161 361F           E8         0013             call _display_string
15162 3622           BE                   0038   mov si,#vgabios_version
15163 3625           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 3628           BE                   007E   mov si,#vgabios_license
15169 362B           E8         0007             call _display_string
15170 362E           BE                   00B3   mov si,#vgabios_website
15171 3631           E8         0001             call _display_string
15172                                           ! 1757 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1758 }
15175 3634           C3                         ret
15176                                           ! 1759 static void display_string()
15177                                           ! 1760 {
15178                       00003635            _display_string:
15179                                           ! 1761 #asm
15180                                           !BCC_ASM
15181 3635           8CD8                        mov ax,ds
15182 3637           8EC0                        mov es,ax
15183 3639           89F7                        mov di,si
15184 363B           31C9                        xor cx,cx
15185 363D           F7D1                        not cx
15186 363F           30C0                        xor al,al
15187 3641           FC                          cld
15188 3642           F2                          repne
15189 3643           AE                           scasb
15190 3644           F7D1                        not cx
15191 3646           49                          dec cx
15192 3647           51                          push cx
15193 3648           B8                   0300   mov ax,#0x0300
15194 364B           BB                   0000   mov bx,#0x0000
15195 364E           CD                     10   int #0x10
15196 3650           59                          pop cx
15197 3651           B8                   1301   mov ax,#0x1301
15198 3654           BB                   000B   mov bx,#0x000b
15199 3657           89F5                        mov bp,si
15200 3659           CD                     10   int #0x10
15201                                           ! 1782 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1783 }
15204 365B           C3                         ret
15205                                           ! 1784 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1785   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       0000365C            _int10_func:
15208                                           !BCC_EOS
15209                                           ! 1786 {
15210                                           ! 1787  switch(( AX >> 8 ))
15211 365C           55                         push	bp
15212 365D           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 365F           8B46         12            mov	ax,$12[bp]
15215 3662           88E0                       mov	al,ah
15216 3664           30E4                       xor	ah,ah
15217                                           ! 1788   {
15218 3666           E9         04D7            br 	.3
15219                                           ! 1789    case 0x00:
15220                                           ! 1790      biosfn_set_video_mode(( AX & 0x00ff ));
15221                       00003669            .4:
15222                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15223 3669           8A46         12            mov	al,$12[bp]
15224                                           ! Debug: list unsigned char = al+0 (used reg = )
15225 366C           30E4                       xor	ah,ah
15226 366E           50                         push	ax
15227                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15228 366F           E8         0524            call	_biosfn_set_video_mode
15229 3672           44                         inc	sp
15230 3673           44                         inc	sp
15231                                           !BCC_EOS
15232                                           ! 1791      switch(( AX & 0x00ff )&0x7F)
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15234 3674           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15236 3677           24                     7F  and	al,*$7F
15237                                           ! 1792       {case 6:
15238 3679           EB           24            jmp .7
15239                                           ! 1793         AX = ((AX & 0xff00) | (0x3F));
15240                       0000367B            .8:
15241                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15242 367B           8B46         12            mov	ax,$12[bp]
15243 367E           30C0                       xor	al,al
15244                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15245 3680           0C                     3F  or	al,*$3F
15246                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15247 3682           8946         12            mov	$12[bp],ax
15248                                           !BCC_EOS
15249                                           ! 1794         break;
15250 3685           EB           3D            jmp .5
15251                                           !BCC_EOS
15252                                           ! 1795        case 0:
15253                                           ! 1796        case 1:
15254                       00003687            .9:
15255                                           ! 1797        case 2:
15256                       00003687            .A:
15257                                           ! 1798        case 3:
15258                       00003687            .B:
15259                                           ! 1799        case 4:
15260                       00003687            .C:
15261                                           ! 1800        case 5:
15262                       00003687            .D:
15263                                           ! 1801        case 7:
15264                       00003687            .E:
15265                                           ! 1802         AX = ((AX & 0xff00) | (0x30));
15266                       00003687            .F:
15267                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15268 3687           8B46         12            mov	ax,$12[bp]
15269 368A           30C0                       xor	al,al
15270                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15271 368C           0C                     30  or	al,*$30
15272                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15273 368E           8946         12            mov	$12[bp],ax
15274                                           !BCC_EOS
15275                                           ! 1803         break;
15276 3691           EB           31            jmp .5
15277                                           !BCC_EOS
15278                                           ! 1804       default:
15279                                           ! 1805         AX = ((AX & 0xff00) | (0x20));
15280                       00003693            .10:
15281                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15282 3693           8B46         12            mov	ax,$12[bp]
15283 3696           30C0                       xor	al,al
15284                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15285 3698           0C                     20  or	al,*$20
15286                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15287 369A           8946         12            mov	$12[bp],ax
15288                                           !BCC_EOS
15289                                           ! 1806       }
15290                                           ! 1807      break;
15291 369D           EB           25            jmp .5
15292                       0000369F            .7:
15293 369F           2C                     00  sub	al,*0
15294 36A1           72           F0            jb 	.10
15295 36A3           3C                     07  cmp	al,*7
15296 36A5           77           1B            ja  	.11
15297 36A7           30E4                       xor	ah,ah
15298 36A9           D1E0                       shl	ax,*1
15299 36AB           89C3                       mov	bx,ax
15300 36AD           2E                         seg	cs
15301 36AE           FFA7       36B2            br	.12[bx]
15302                       000036B2            .12:
15303 36B2                      3687            .word	.9
15304 36B4                      3687            .word	.A
15305 36B6                      3687            .word	.B
15306 36B8                      3687            .word	.C
15307 36BA                      3687            .word	.D
15308 36BC                      3687            .word	.E
15309 36BE                      367B            .word	.8
15310 36C0                      3687            .word	.F
15311                       000036C2            .11:
15312 36C2           EB           CF            jmp	.10
15313                       000036C4            .5:
15314 36C4           E9         04CD            br 	.1
15315                                           !BCC_EOS
15316                                           ! 1808    case 0x01:
15317                                           ! 1809      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15318                       000036C7            .13:
15319                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15320 36C7           8A46         10            mov	al,$10[bp]
15321                                           ! Debug: list unsigned char = al+0 (used reg = )
15322 36CA           30E4                       xor	ah,ah
15323 36CC           50                         push	ax
15324                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15325 36CD           8B46         10            mov	ax,$10[bp]
15326 36D0           88E0                       mov	al,ah
15327 36D2           30E4                       xor	ah,ah
15328                                           ! Debug: list unsigned int = ax+0 (used reg = )
15329 36D4           50                         push	ax
15330                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15331 36D5           E8         0B56            call	_biosfn_set_cursor_shape
15332 36D8           83C4                   04  add	sp,*4
15333                                           !BCC_EOS
15334                                           ! 1810      break;
15335 36DB           E9         04B6            br 	.1
15336                                           !BCC_EOS
15337                                           ! 1811    case 0x02:
15338                                           ! 1812      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15339                       000036DE            .14:
15340                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15341 36DE           FF76         0E            push	$E[bp]
15342                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15343 36E1           8B46         0C            mov	ax,$C[bp]
15344 36E4           88E0                       mov	al,ah
15345 36E6           30E4                       xor	ah,ah
15346                                           ! Debug: list unsigned int = ax+0 (used reg = )
15347 36E8           50                         push	ax
15348                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15349 36E9           E8         0C5D            call	_biosfn_set_cursor_pos
15350 36EC           83C4                   04  add	sp,*4
15351                                           !BCC_EOS
15352                                           ! 1813      break;
15353 36EF           E9         04A2            br 	.1
15354                                           !BCC_EOS
15355                                           ! 1814    case 0x03:
15356                                           ! 1815      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15357                       000036F2            .15:
15358                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15359 36F2           8D5E         0E            lea	bx,$E[bp]
15360 36F5           53                         push	bx
15361                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15362 36F6           8D5E         10            lea	bx,$10[bp]
15363 36F9           53                         push	bx
15364                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15365 36FA           8B46         0C            mov	ax,$C[bp]
15366 36FD           88E0                       mov	al,ah
15367 36FF           30E4                       xor	ah,ah
15368                                           ! Debug: list unsigned int = ax+0 (used reg = )
15369 3701           50                         push	ax
15370                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15371 3702           E8         0D44            call	_biosfn_get_cursor_pos
15372 3705           83C4                   06  add	sp,*6
15373                                           !BCC_EOS
15374                                           ! 1816      break;
15375 3708           E9         0489            br 	.1
15376                                           !BCC_EOS
15377                                           ! 1817    case 0x04:
15378                                           ! 1818      AX=0x00;
15379                       0000370B            .16:
15380                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15381 370B           31C0                       xor	ax,ax
15382 370D           8946         12            mov	$12[bp],ax
15383                                           !BCC_EOS
15384                                           ! 1819      BX=0x00;
15385                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15386 3710           31C0                       xor	ax,ax
15387 3712           8946         0C            mov	$C[bp],ax
15388                                           !BCC_EOS
15389                                           ! 1820      CX=0x00;
15390                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15391 3715           31C0                       xor	ax,ax
15392 3717           8946         10            mov	$10[bp],ax
15393                                           !BCC_EOS
15394                                           ! 1821      DX=0x00;
15395                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15396 371A           31C0                       xor	ax,ax
15397 371C           8946         0E            mov	$E[bp],ax
15398                                           !BCC_EOS
15399                                           ! 1822      break;
15400 371F           E9         0472            br 	.1
15401                                           !BCC_EOS
15402                                           ! 1823    case 0x05:
15403                                           ! 1824      biosfn_set_active_page(( AX & 0x00ff ));
15404                       00003722            .17:
15405                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15406 3722           8A46         12            mov	al,$12[bp]
15407                                           ! Debug: list unsigned char = al+0 (used reg = )
15408 3725           30E4                       xor	ah,ah
15409 3727           50                         push	ax
15410                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15411 3728           E8         0D93            call	_biosfn_set_active_page
15412 372B           44                         inc	sp
15413 372C           44                         inc	sp
15414                                           !BCC_EOS
15415                                           ! 1825      break;
15416 372D           E9         0464            br 	.1
15417                                           !BCC_EOS
15418                                           ! 1826    case 0x06:
15419                                           ! 1827      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8
15420                       00003730            .18:
15421                                           ! 1827  ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15422                                           ! Debug: list int = const 1 (used reg = )
15423 3730           B8                   0001  mov	ax,*1
15424 3733           50                         push	ax
15425                                           ! Debug: list int = const $FF (used reg = )
15426 3734           B8                   00FF  mov	ax,#$FF
15427 3737           50                         push	ax
15428                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15429 3738           8A46         0E            mov	al,$E[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 373B           30E4                       xor	ah,ah
15432 373D           50                         push	ax
15433                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15434 373E           8B46         0E            mov	ax,$E[bp]
15435 3741           88E0                       mov	al,ah
15436 3743           30E4                       xor	ah,ah
15437                                           ! Debug: list unsigned int = ax+0 (used reg = )
15438 3745           50                         push	ax
15439                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15440 3746           8A46         10            mov	al,$10[bp]
15441                                           ! Debug: list unsigned char = al+0 (used reg = )
15442 3749           30E4                       xor	ah,ah
15443 374B           50                         push	ax
15444                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15445 374C           8B46         10            mov	ax,$10[bp]
15446 374F           88E0                       mov	al,ah
15447 3751           30E4                       xor	ah,ah
15448                                           ! Debug: list unsigned int = ax+0 (used reg = )
15449 3753           50                         push	ax
15450                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15451 3754           8B46         0C            mov	ax,$C[bp]
15452 3757           88E0                       mov	al,ah
15453 3759           30E4                       xor	ah,ah
15454                                           ! Debug: list unsigned int = ax+0 (used reg = )
15455 375B           50                         push	ax
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15457 375C           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 375F           30E4                       xor	ah,ah
15460 3761           50                         push	ax
15461                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15462 3762           E8         11DC            call	_biosfn_scroll
15463 3765           83C4                   10  add	sp,*$10
15464                                           !BCC_EOS
15465                                           ! 1828      break;
15466 3768           E9         0429            br 	.1
15467                                           !BCC_EOS
15468                                           ! 1829    case 0x07:
15469                                           ! 1830      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15470                       0000376B            .19:
15471                                           ! Debug: list int = const 0 (used reg = )
15472 376B           31C0                       xor	ax,ax
15473 376D           50                         push	ax
15474                                           ! Debug: list int = const $FF (used reg = )
15475 376E           B8                   00FF  mov	ax,#$FF
15476 3771           50                         push	ax
15477                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15478 3772           8A46         0E            mov	al,$E[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3775           30E4                       xor	ah,ah
15481 3777           50                         push	ax
15482                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15483 3778           8B46         0E            mov	ax,$E[bp]
15484 377B           88E0                       mov	al,ah
15485 377D           30E4                       xor	ah,ah
15486                                           ! Debug: list unsigned int = ax+0 (used reg = )
15487 377F           50                         push	ax
15488                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15489 3780           8A46         10            mov	al,$10[bp]
15490                                           ! Debug: list unsigned char = al+0 (used reg = )
15491 3783           30E4                       xor	ah,ah
15492 3785           50                         push	ax
15493                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15494 3786           8B46         10            mov	ax,$10[bp]
15495 3789           88E0                       mov	al,ah
15496 378B           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 378D           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15500 378E           8B46         0C            mov	ax,$C[bp]
15501 3791           88E0                       mov	al,ah
15502 3793           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 3795           50                         push	ax
15505                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15506 3796           8A46         12            mov	al,$12[bp]
15507                                           ! Debug: list unsigned char = al+0 (used reg = )
15508 3799           30E4                       xor	ah,ah
15509 379B           50                         push	ax
15510                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15511 379C           E8         11A2            call	_biosfn_scroll
15512 379F           83C4                   10  add	sp,*$10
15513                                           !BCC_EOS
15514                                           ! 1831      break;
15515 37A2           E9         03EF            br 	.1
15516                                           !BCC_EOS
15517                                           ! 1832    case 0x08:
15518                                           ! 1833      biosfn_read_char_attr(( BX >> 8 ),&AX);
15519                       000037A5            .1A:
15520                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15521 37A5           8D5E         12            lea	bx,$12[bp]
15522 37A8           53                         push	bx
15523                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15524 37A9           8B46         0C            mov	ax,$C[bp]
15525 37AC           88E0                       mov	al,ah
15526 37AE           30E4                       xor	ah,ah
15527                                           ! Debug: list unsigned int = ax+0 (used reg = )
15528 37B0           50                         push	ax
15529                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15530 37B1           E8         1893            call	_biosfn_read_char_attr
15531 37B4           83C4                   04  add	sp,*4
15532                                           !BCC_EOS
15533                                           ! 1834      break;
15534 37B7           E9         03DA            br 	.1
15535                                           !BCC_EOS
15536                                           ! 1835    case 0x09:
15537                                           ! 1836      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15538                       000037BA            .1B:
15539                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15540 37BA           FF76         10            push	$10[bp]
15541                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15542 37BD           8A46         0C            mov	al,$C[bp]
15543                                           ! Debug: list unsigned char = al+0 (used reg = )
15544 37C0           30E4                       xor	ah,ah
15545 37C2           50                         push	ax
15546                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15547 37C3           8B46         0C            mov	ax,$C[bp]
15548 37C6           88E0                       mov	al,ah
15549 37C8           30E4                       xor	ah,ah
15550                                           ! Debug: list unsigned int = ax+0 (used reg = )
15551 37CA           50                         push	ax
15552                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15553 37CB           8A46         12            mov	al,$12[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 37CE           30E4                       xor	ah,ah
15556 37D0           50                         push	ax
15557                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15558 37D1           E8         1DB8            call	_biosfn_write_char_attr
15559 37D4           83C4                   08  add	sp,*8
15560                                           !BCC_EOS
15561                                           ! 1837      break;
15562 37D7           E9         03BA            br 	.1
15563                                           !BCC_EOS
15564                                           ! 1838    case 0x0A:
15565                                           ! 1839      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15566                       000037DA            .1C:
15567                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15568 37DA           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15570 37DD           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37E0           30E4                       xor	ah,ah
15573 37E2           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15575 37E3           8B46         0C            mov	ax,$C[bp]
15576 37E6           88E0                       mov	al,ah
15577 37E8           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 37EA           50                         push	ax
15580                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15581 37EB           8A46         12            mov	al,$12[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 37EE           30E4                       xor	ah,ah
15584 37F0           50                         push	ax
15585                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15586 37F1           E8         1F8A            call	_biosfn_write_char_only
15587 37F4           83C4                   08  add	sp,*8
15588                                           !BCC_EOS
15589                                           ! 1840      break;
15590 37F7           E9         039A            br 	.1
15591                                           !BCC_EOS
15592                                           ! 1841    case 0x0C:
15593                                           ! 1842      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15594                       000037FA            .1D:
15595                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15596 37FA           FF76         0E            push	$E[bp]
15597                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15598 37FD           FF76         10            push	$10[bp]
15599                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15600 3800           8A46         12            mov	al,$12[bp]
15601                                           ! Debug: list unsigned char = al+0 (used reg = )
15602 3803           30E4                       xor	ah,ah
15603 3805           50                         push	ax
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15605 3806           8B46         0C            mov	ax,$C[bp]
15606 3809           88E0                       mov	al,ah
15607 380B           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 380D           50                         push	ax
15610                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15611 380E           E8         21DB            call	_biosfn_write_pixel
15612 3811           83C4                   08  add	sp,*8
15613                                           !BCC_EOS
15614                                           ! 1843      break;
15615 3814           E9         037D            br 	.1
15616                                           !BCC_EOS
15617                                           ! 1844    case 0x0D:
15618                                           ! 1845      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15619                       00003817            .1E:
15620                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15621 3817           8D5E         12            lea	bx,$12[bp]
15622 381A           53                         push	bx
15623                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15624 381B           FF76         0E            push	$E[bp]
15625                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15626 381E           FF76         10            push	$10[bp]
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15628 3821           8B46         0C            mov	ax,$C[bp]
15629 3824           88E0                       mov	al,ah
15630 3826           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 3828           50                         push	ax
15633                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15634 3829           E8         245C            call	_biosfn_read_pixel
15635 382C           83C4                   08  add	sp,*8
15636                                           !BCC_EOS
15637                                           ! 1846      break;
15638 382F           E9         0362            br 	.1
15639                                           !BCC_EOS
15640                                           ! 1847    case 0x0E:
15641                                           ! 1848      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15642                       00003832            .1F:
15643                                           ! Debug: list int = const 2 (used reg = )
15644 3832           B8                   0002  mov	ax,*2
15645 3835           50                         push	ax
15646                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15647 3836           8A46         0C            mov	al,$C[bp]
15648                                           ! Debug: list unsigned char = al+0 (used reg = )
15649 3839           30E4                       xor	ah,ah
15650 383B           50                         push	ax
15651                                           ! Debug: list int = const $FF (used reg = )
15652 383C           B8                   00FF  mov	ax,#$FF
15653 383F           50                         push	ax
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15655 3840           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 3843           30E4                       xor	ah,ah
15658 3845           50                         push	ax
15659                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15660 3846           E8         2645            call	_biosfn_write_teletype
15661 3849           83C4                   08  add	sp,*8
15662                                           !BCC_EOS
15663                                           ! 1849      break;
15664 384C           E9         0345            br 	.1
15665                                           !BCC_EOS
15666                                           ! 1850    case 0x10:
15667                                           ! 1851      biosfn_perform_gray_scale_summing(BX,CX);
15668                       0000384F            .20:
15669                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15670 384F           FF76         10            push	$10[bp]
15671                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15672 3852           FF76         0C            push	$C[bp]
15673                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15674 3855           E8         2C89            call	_biosfn_perform_gray_scale_summing
15675 3858           83C4                   04  add	sp,*4
15676                                           !BCC_EOS
15677                                           ! 1852      break;
15678 385B           E9         0336            br 	.1
15679                                           !BCC_EOS
15680                                           ! 1853    case 0x11:
15681                                           ! 1854      switch(( AX & 0x00ff ))
15682                       0000385E            .21:
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15684 385E           8A46         12            mov	al,$12[bp]
15685                                           ! 1855       {
15686 3861           E9         00E1            br 	.24
15687                                           ! 1856        case 0x00:
15688                                           ! 1857        case 0x10:
15689                       00003864            .25:
15690                                           ! 1858         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15691                       00003864            .26:
15692                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15693 3864           8B46         0C            mov	ax,$C[bp]
15694 3867           88E0                       mov	al,ah
15695 3869           30E4                       xor	ah,ah
15696                                           ! Debug: list unsigned int = ax+0 (used reg = )
15697 386B           50                         push	ax
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15699 386C           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 386F           30E4                       xor	ah,ah
15702 3871           50                         push	ax
15703                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15704 3872           FF76         0E            push	$E[bp]
15705                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15706 3875           FF76         10            push	$10[bp]
15707                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15708 3878           FF76         08            push	8[bp]
15709                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15710 387B           FF76         16            push	$16[bp]
15711                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15712 387E           8A46         12            mov	al,$12[bp]
15713                                           ! Debug: list unsigned char = al+0 (used reg = )
15714 3881           30E4                       xor	ah,ah
15715 3883           50                         push	ax
15716                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15717 3884           E8         2F01            call	_biosfn_load_text_user_pat
15718 3887           83C4                   0E  add	sp,*$E
15719                                           !BCC_EOS
15720                                           ! 1859         break;
15721 388A           E9         010C            br 	.22
15722                                           !BCC_EOS
15723                                           ! 1860        case 0x01:
15724                                           ! 1861        case 0x11:
15725                       0000388D            .27:
15726                                           ! 1862         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15727                       0000388D            .28:
15728                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15729 388D           8A46         0C            mov	al,$C[bp]
15730                                           ! Debug: list unsigned char = al+0 (used reg = )
15731 3890           30E4                       xor	ah,ah
15732 3892           50                         push	ax
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15734 3893           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 3896           30E4                       xor	ah,ah
15737 3898           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15739 3899           E8         2F88            call	_biosfn_load_text_8_14_pat
15740 389C           83C4                   04  add	sp,*4
15741                                           !BCC_EOS
15742                                           ! 1863         break;
15743 389F           E9         00F7            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1864        case 0x02:
15746                                           ! 1865        case 0x12:
15747                       000038A2            .29:
15748                                           ! 1866         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       000038A2            .2A:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 38A2           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 38A5           30E4                       xor	ah,ah
15754 38A7           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 38A8           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 38AB           30E4                       xor	ah,ah
15759 38AD           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15761 38AE           E8         300A            call	_biosfn_load_text_8_8_pat
15762 38B1           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1867         break;
15765 38B4           E9         00E2            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1868        case 0x04:
15768                                           ! 1869        case 0x14:
15769                       000038B7            .2B:
15770                                           ! 1870         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       000038B7            .2C:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 38B7           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 38BA           30E4                       xor	ah,ah
15776 38BC           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 38BD           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 38C0           30E4                       xor	ah,ah
15781 38C2           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15783 38C3           E8         3093            call	_biosfn_load_text_8_16_pat
15784 38C6           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1871         break;
15787 38C9           E9         00CD            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1872        case 0x20:
15790                                           ! 1873         biosfn_load_gfx_8_8_chars(ES,BP);
15791                       000038CC            .2D:
15792                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15793 38CC           FF76         08            push	8[bp]
15794                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15795 38CF           FF76         16            push	$16[bp]
15796                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15797 38D2           E8         3115            call	_biosfn_load_gfx_8_8_chars
15798 38D5           83C4                   04  add	sp,*4
15799                                           !BCC_EOS
15800                                           ! 1874         break;
15801 38D8           E9         00BE            br 	.22
15802                                           !BCC_EOS
15803                                           ! 1875        case 0x21:
15804                                           ! 1876         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15805                       000038DB            .2E:
15806                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15807 38DB           8A46         0E            mov	al,$E[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 38DE           30E4                       xor	ah,ah
15810 38E0           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15812 38E1           8A46         0C            mov	al,$C[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 38E4           30E4                       xor	ah,ah
15815 38E6           50                         push	ax
15816                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15817 38E7           FF76         10            push	$10[bp]
15818                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15819 38EA           FF76         08            push	8[bp]
15820                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15821 38ED           FF76         16            push	$16[bp]
15822                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15823 38F0           E8         30F8            call	_biosfn_load_gfx_user_chars
15824 38F3           83C4                   0A  add	sp,*$A
15825                                           !BCC_EOS
15826                                           ! 1877         break;
15827 38F6           E9         00A0            br 	.22
15828                                           !BCC_EOS
15829                                           ! 1878        case 0x22:
15830                                           ! 1879         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15831                       000038F9            .2F:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 38F9           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38FC           30E4                       xor	ah,ah
15836 38FE           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15838 38FF           E8         30EA            call	_biosfn_load_gfx_8_14_chars
15839 3902           44                         inc	sp
15840 3903           44                         inc	sp
15841                                           !BCC_EOS
15842                                           ! 1880         break;
15843 3904           E9         0092            br 	.22
15844                                           !BCC_EOS
15845                                           ! 1881        case 0x23:
15846                                           ! 1882         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15847                       00003907            .30:
15848                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15849 3907           8A46         0C            mov	al,$C[bp]
15850                                           ! Debug: list unsigned char = al+0 (used reg = )
15851 390A           30E4                       xor	ah,ah
15852 390C           50                         push	ax
15853                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15854 390D           E8         30DD            call	_biosfn_load_gfx_8_8_dd_chars
15855 3910           44                         inc	sp
15856 3911           44                         inc	sp
15857                                           !BCC_EOS
15858                                           ! 1883         break;
15859 3912           E9         0084            br 	.22
15860                                           !BCC_EOS
15861                                           ! 1884        case 0x24:
15862                                           ! 1885         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15863                       00003915            .31:
15864                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15865 3915           8A46         0C            mov	al,$C[bp]
15866                                           ! Debug: list unsigned char = al+0 (used reg = )
15867 3918           30E4                       xor	ah,ah
15868 391A           50                         push	ax
15869                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15870 391B           E8         30D0            call	_biosfn_load_gfx_8_16_chars
15871 391E           44                         inc	sp
15872 391F           44                         inc	sp
15873                                           !BCC_EOS
15874                                           ! 1886         break;
15875 3920           E9         0076            br 	.22
15876                                           !BCC_EOS
15877                                           ! 1887        case 0x30:
15878                                           ! 1888         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15879                       00003923            .32:
15880                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15881 3923           8D5E         0E            lea	bx,$E[bp]
15882 3926           53                         push	bx
15883                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15884 3927           8D5E         10            lea	bx,$10[bp]
15885 392A           53                         push	bx
15886                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15887 392B           8D5E         08            lea	bx,8[bp]
15888 392E           53                         push	bx
15889                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15890 392F           8D5E         16            lea	bx,$16[bp]
15891 3932           53                         push	bx
15892                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15893 3933           8B46         0C            mov	ax,$C[bp]
15894 3936           88E0                       mov	al,ah
15895 3938           30E4                       xor	ah,ah
15896                                           ! Debug: list unsigned int = ax+0 (used reg = )
15897 393A           50                         push	ax
15898                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15899 393B           E8         30B1            call	_biosfn_get_font_info
15900 393E           83C4                   0A  add	sp,*$A
15901                                           !BCC_EOS
15902                                           ! 1889         break;
15903 3941           EB           56            jmp .22
15904                                           !BCC_EOS
15905                                           ! 1890       }
15906                                           ! 1891      break;
15907 3943           EB           54            jmp .22
15908                       00003945            .24:
15909 3945           2C                     00  sub	al,*0
15910 3947         0F84         FF19            beq 	.25
15911 394B           2C                     01  sub	al,*1
15912 394D         0F84         FF3C            beq 	.27
15913 3951           2C                     01  sub	al,*1
15914 3953         0F84         FF4B            beq 	.29
15915 3957           2C                     02  sub	al,*2
15916 3959         0F84         FF5A            beq 	.2B
15917 395D           2C                     0C  sub	al,*$C
15918 395F         0F84         FF01            beq 	.26
15919 3963           2C                     01  sub	al,*1
15920 3965         0F84         FF24            beq 	.28
15921 3969           2C                     01  sub	al,*1
15922 396B         0F84         FF33            beq 	.2A
15923 396F           2C                     02  sub	al,*2
15924 3971         0F84         FF42            beq 	.2C
15925 3975           2C                     0C  sub	al,*$C
15926 3977         0F84         FF51            beq 	.2D
15927 397B           2C                     01  sub	al,*1
15928 397D         0F84         FF5A            beq 	.2E
15929 3981           2C                     01  sub	al,*1
15930 3983         0F84         FF72            beq 	.2F
15931 3987           2C                     01  sub	al,*1
15932 3989         0F84         FF7A            beq 	.30
15933 398D           2C                     01  sub	al,*1
15934 398F         0F84         FF82            beq 	.31
15935 3993           2C                     0C  sub	al,*$C
15936 3995         0F84         FF8A            beq 	.32
15937                       00003999            .22:
15938 3999           E9         01F8            br 	.1
15939                                           !BCC_EOS
15940                                           ! 1892    case 0x12:
15941                                           ! 1893      switch(( BX & 0x00ff ))
15942                       0000399C            .33:
15943                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15944 399C           8A46         0C            mov	al,$C[bp]
15945                                           ! 1894       {
15946 399F           EB           3C            jmp .36
15947                                           ! 1895        case 0x20:
15948                                           ! 1896         biosfn_alternate_prtsc();
15949                       000039A1            .37:
15950                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15951 39A1           E8         3225            call	_biosfn_alternate_prtsc
15952                                           !BCC_EOS
15953                                           ! 1897         break;
15954 39A4           EB           43            jmp .34
15955                                           !BCC_EOS
15956                                           ! 1898        case 0
15957                                           ! 1898 x35:
15958                                           ! 1899         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15959                       000039A6            .38:
15960                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15961 39A6           FF76         0E            push	$E[bp]
15962                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15963 39A9           FF76         16            push	$16[bp]
15964                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15965 39AC           8A46         12            mov	al,$12[bp]
15966                                           ! Debug: list unsigned char = al+0 (used reg = )
15967 39AF           30E4                       xor	ah,ah
15968 39B1           50                         push	ax
15969                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15970 39B2           E8         32EE            call	_biosfn_switch_video_interface
15971 39B5           83C4                   06  add	sp,*6
15972                                           !BCC_EOS
15973                                           ! 1900         AX = ((AX & 0xff00) | (0x12));
15974                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15975 39B8           8B46         12            mov	ax,$12[bp]
15976 39BB           30C0                       xor	al,al
15977                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15978 39BD           0C                     12  or	al,*$12
15979                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15980 39BF           8946         12            mov	$12[bp],ax
15981                                           !BCC_EOS
15982                                           ! 1901         break;
15983 39C2           EB           25            jmp .34
15984                                           !BCC_EOS
15985                                           ! 1902        case 0x36:
15986                                           ! 1903         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15987                       000039C4            .39:
15988                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15989 39C4           8A46         12            mov	al,$12[bp]
15990                                           ! Debug: list unsigned char = al+0 (used reg = )
15991 39C7           30E4                       xor	ah,ah
15992 39C9           50                         push	ax
15993                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15994 39CA           E8         32D7            call	_biosfn_enable_video_refresh_control
15995 39CD           44                         inc	sp
15996 39CE           44                         inc	sp
15997                                           !BCC_EOS
15998                                           ! 1904         AX = ((AX & 0xff00) | (0x12));
15999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16000 39CF           8B46         12            mov	ax,$12[bp]
16001 39D2           30C0                       xor	al,al
16002                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16003 39D4           0C                     12  or	al,*$12
16004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16005 39D6           8946         12            mov	$12[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1905         break;
16008 39D9           EB           0E            jmp .34
16009                                           !BCC_EOS
16010                                           ! 1906       }
16011                                           ! 1907      break;
16012 39DB           EB           0C            jmp .34
16013                       000039DD            .36:
16014 39DD           2C                     20  sub	al,*$20
16015 39DF           74           C0            je 	.37
16016 39E1           2C                     15  sub	al,*$15
16017 39E3           74           C1            je 	.38
16018 39E5           2C                     01  sub	al,*1
16019 39E7           74           DB            je 	.39
16020                       000039E9            .34:
16021 39E9           E9         01A8            br 	.1
16022                                           !BCC_EOS
16023                                           ! 1908    case 0x13:
16024                                           ! 1909      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16025                       000039EC            .3A:
16026                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16027 39EC           FF76         08            push	8[bp]
16028                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16029 39EF           FF76         16            push	$16[bp]
16030                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16031 39F2           8A46         0E            mov	al,$E[bp]
16032                                           ! Debug: list unsigned char = al+0 (used reg = )
16033 39F5           30E4                       xor	ah,ah
16034 39F7           50                         push	ax
16035                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16036 39F8           8B46         0E            mov	ax,$E[bp]
16037 39FB           88E0                       mov	al,ah
16038 39FD           30E4                       xor	ah,ah
16039                                           ! Debug: list unsigned int = ax+0 (used reg = )
16040 39FF           50                         push	ax
16041                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16042 3A00           FF76         10            push	$10[bp]
16043                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16044 3A03           8A46         0C            mov	al,$C[bp]
16045                                           ! Debug: list unsigned char = al+0 (used reg = )
16046 3A06           30E4                       xor	ah,ah
16047 3A08           50                         push	ax
16048                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16049 3A09           8B46         0C            mov	ax,$C[bp]
16050 3A0C           88E0                       mov	al,ah
16051 3A0E           30E4                       xor	ah,ah
16052                                           ! Debug: list unsigned int = ax+0 (used reg = )
16053 3A10           50                         push	ax
16054                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16055 3A11           8A46         12            mov	al,$12[bp]
16056                                           ! Debug: list unsigned char = al+0 (used reg = )
16057 3A14           30E4                       xor	ah,ah
16058 3A16           50                         push	ax
16059                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16060 3A17           E8         328B            call	_biosfn_write_string
16061 3A1A           83C4                   10  add	sp,*$10
16062                                           !BCC_EOS
16063                                           ! 1910      break;
16064 3A1D           E9         0174            br 	.1
16065                                           !BCC_EOS
16066                                           ! 1911    case 0x1B:
16067                                           ! 1912      biosfn_read_state_info(BX,ES,DI);
16068                       00003A20            .3B:
16069                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16070 3A20           FF76         04            push	4[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 3A23           FF76         16            push	$16[bp]
16073                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16074 3A26           FF76         0C            push	$C[bp]
16075                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16076 3A29           E8         3385            call	_biosfn_read_state_info
16077 3A2C           83C4                   06  add	sp,*6
16078                                           !BCC_EOS
16079                                           ! 1913      AX = ((AX & 0xff00) | (0x1B));
16080                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16081 3A2F           8B46         12            mov	ax,$12[bp]
16082 3A32           30C0                       xor	al,al
16083                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16084 3A34           0C                     1B  or	al,*$1B
16085                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16086 3A36           8946         12            mov	$12[bp],ax
16087                                           !BCC_EOS
16088                                           ! 1914      break;
16089 3A39           E9         0158            br 	.1
16090                                           !BCC_EOS
16091                                           ! 1915    case 0x1C:
16092                                           ! 1916      switch(( AX & 0x00ff ))
16093                       00003A3C            .3C:
16094                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16095 3A3C           8A46         12            mov	al,$12[bp]
16096                                           ! 1917       {
16097 3A3F           EB           33            jmp .3F
16098                                           ! 1918        case 0x00:
16099                                           ! 1919         biosfn_read_video_state_size(CX,&BX);
16100                       00003A41            .40:
16101                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16102 3A41           8D5E         0C            lea	bx,$C[bp]
16103 3A44           53                         push	bx
16104                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16105 3A45           FF76         10            push	$10[bp]
16106                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16107 3A48           E8         34E5            call	_biosfn_read_video_state_size
16108 3A4B           83C4                   04  add	sp,*4
16109                                           !BCC_EOS
16110                                           ! 1920         break;
16111 3A4E           EB           30            jmp .3D
16112                                           !BCC_EOS
16113                                           ! 1921        case 0x01:
16114                                           ! 1922         biosfn_save_video_state(CX,ES,BX);
16115                       00003A50            .41:
16116                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16117 3A50           FF76         0C            push	$C[bp]
16118                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16119 3A53           FF76         16            push	$16[bp]
16120                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16121 3A56           FF76         10            push	$10[bp]
16122                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16123 3A59           E8         34F8            call	_biosfn_save_video_state
16124 3A5C           83C4                   06  add	sp,*6
16125                                           !BCC_EOS
16126                                           ! 1923         break;
16127 3A5F           EB           1F            jmp .3D
16128                                           !BCC_EOS
16129                                           ! 1924        case 0x02:
16130                                           ! 1925         biosfn_restore_video_state(CX,ES,BX);
16131                       00003A61            .42:
16132                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16133 3A61           FF76         0C            push	$C[bp]
16134                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16135 3A64           FF76         16            push	$16[bp]
16136                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16137 3A67           FF76         10            push	$10[bp]
16138                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16139 3A6A           E8         3AB1            call	_biosfn_restore_video_state
16140 3A6D           83C4                   06  add	sp,*6
16141                                           !BCC_EOS
16142                                           ! 1926         break;
16143 3A70           EB           0E            jmp .3D
16144                                           !BCC_EOS
16145                                           ! 1927       }
16146                                           ! 1928      AX = ((AX & 0xff00) | (0x1C));
16147 3A72           EB           0C            jmp .3D
16148                       00003A74            .3F:
16149 3A74           2C                     00  sub	al,*0
16150 3A76           74           C9            je 	.40
16151 3A78           2C                     01  sub	al,*1
16152 3A7A           74           D4            je 	.41
16153 3A7C           2C                     01  sub	al,*1
16154 3A7E           74           E1            je 	.42
16155                       00003A80            .3D:
16156                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16157 3A80           8B46         12            mov	ax,$12[bp]
16158 3A83           30C0                       xor	al,al
16159                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16160 3A85           0C                     1C  or	al,*$1C
16161                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16162 3A87           8946         12            mov	$12[bp],ax
16163                                           !BCC_EOS
16164                                           ! 1929      break;
16165 3A8A           E9         0107            br 	.1
16166                                           !BCC_EOS
16167                                           ! 1930    case 0x4f:
16168                                           ! 1931      if (vbe_has_vbe_display()) {
16169                       00003A8D            .43:
16170                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16171 3A8D           E8         5C5E            call	_vbe_has_vbe_display
16172 3A90           85C0                       test	ax,ax
16173 3A92         0F84         00A0            beq 	.44
16174                       00003A96            .45:
16175                                           ! 1932        switch(( AX & 0x00ff ))
16176                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16177 3A96           8A46         12            mov	al,$12[bp]
16178                                           ! 1933        {
16179 3A99           EB           6E            jmp .48
16180                                           ! 1934          case 0x00:
16181                                           ! 1935           vbe_biosfn_return_controller_information(&AX,ES,DI);
16182                       00003A9B            .49:
16183                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16184 3A9B           FF76         04            push	4[bp]
16185                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16186 3A9E           FF76         16            push	$16[bp]
16187                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16188 3AA1           8D5E         12            lea	bx,$12[bp]
16189 3AA4           53                         push	bx
16190                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16191 3AA5           E8         5CBD            call	_vbe_biosfn_return_controller_information
16192 3AA8           83C4                   06  add	sp,*6
16193                                           !BCC_EOS
16194                                           ! 1936           break;
16195 3AAB           E9         0086            br 	.46
16196                                           !BCC_EOS
16197                                           ! 1937          case 0x01:
16198                                           ! 1938           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16199                       00003AAE            .4A:
16200                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16201 3AAE           FF76         04            push	4[bp]
16202                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16203 3AB1           FF76         16            push	$16[bp]
16204                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16205 3AB4           FF76         10            push	$10[bp]
16206                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16207 3AB7           8D5E         12            lea	bx,$12[bp]
16208 3ABA           53                         push	bx
16209                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16210 3ABB           E8         5EFF            call	_vbe_biosfn_return_mode_information
16211 3ABE           83C4                   08  add	sp,*8
16212                                           !BCC_EOS
16213                                           ! 1939           break;
16214 3AC1           EB           71            jmp .46
16215                                           !BCC_EOS
16216                                           ! 1940          case 0x02:
16217                                           ! 1941           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16218                       00003AC3            .4B:
16219                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16220 3AC3           FF76         04            push	4[bp]
16221                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16222 3AC6           FF76         16            push	$16[bp]
16223                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16224 3AC9           FF76         0C            push	$C[bp]
16225                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16226 3ACC           8D5E         12            lea	bx,$12[bp]
16227 3ACF           53                         push	bx
16228                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16229 3AD0           E8         6006            call	_vbe_biosfn_set_mode
16230 3AD3           83C4                   08  add	sp,*8
16231                                           !BCC_EOS
16232                                           ! 1942           break;
16233 3AD6           EB           5C            jmp .46
16234                                           !BCC_EOS
16235                                           ! 1943          case 0x04:
16236                                           ! 1944           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16237                       00003AD8            .4C:
16238                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16239 3AD8           8D5E         0C            lea	bx,$C[bp]
16240 3ADB           53                         push	bx
16241                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16242 3ADC           FF76         16            push	$16[bp]
16243                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16244 3ADF           FF76         0E            push	$E[bp]
16245                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16246 3AE2           FF76         10            push	$10[bp]
16247                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16248 3AE5           8D5E         12            lea	bx,$12[bp]
16249 3AE8           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16251 3AE9           E8         6321            call	_vbe_biosfn_save_restore_state
16252 3AEC           83C4                   0A  add	sp,*$A
16253                                           !BCC_EOS
16254                                           ! 1945           break;
16255 3AEF           EB           43            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1946          case 0x09:
16258                                           ! 1947           AX=0x100;
16259                       00003AF1            .4D:
16260                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16261 3AF1           B8                   0100  mov	ax,#$100
16262 3AF4           8946         12            mov	$12[bp],ax
16263                                           !BCC_EOS
16264                                           ! 1948           break;
16265 3AF7           EB           3B            jmp .46
16266                                           !BCC_EOS
16267                                           ! 1949          case 0x0A:
16268                                           ! 1950           AX=0x100;
16269                       00003AF9            .4E:
16270                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16271 3AF9           B8                   0100  mov	ax,#$100
16272 3AFC           8946         12            mov	$12[bp],ax
16273                                           !BCC_EOS
16274                                           ! 1951           break;
16275 3AFF           EB           33            jmp .46
16276                                           !BCC_EOS
16277                                           ! 1952          default:
16278                                           ! 1953           AX=0x100;
16279                       00003B01            .4F:
16280                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16281 3B01           B8                   0100  mov	ax,#$100
16282 3B04           8946         12            mov	$12[bp],ax
16283                                           !BCC_EOS
16284                                           ! 1954           }
16285                                           ! 1955         }
16286 3B07           EB           2B            jmp .46
16287                       00003B09            .48:
16288 3B09           2C                     00  sub	al,*0
16289 3B0B           72           F4            jb 	.4F
16290 3B0D           3C                     0A  cmp	al,*$A
16291 3B0F           77           21            ja  	.50
16292 3B11           30E4                       xor	ah,ah
16293 3B13           D1E0                       shl	ax,*1
16294 3B15           89C3                       mov	bx,ax
16295 3B17           2E                         seg	cs
16296 3B18           FFA7       3B1C            br	.51[bx]
16297                       00003B1C            .51:
16298 3B1C                      3A9B            .word	.49
16299 3B1E                      3AAE            .word	.4A
16300 3B20                      3AC3            .word	.4B
16301 3B22                      3B01            .word	.4F
16302 3B24                      3AD8            .word	.4C
16303 3B26                      3B01            .word	.4F
16304 3B28                      3B01            .word	.4F
16305 3B2A                      3B01            .word	.4F
16306 3B2C                      3B01            .word	.4F
16307 3B2E                      3AF1            .word	.4D
16308 3B30                      3AF9            .word	.4E
16309                       00003B32            .50:
16310 3B32           EB           CD            jmp	.4F
16311                       00003B34            .46:
16312                                           ! 1956         else {
16313 3B34           EB           06            jmp .52
16314                       00003B36            .44:
16315                                           ! 1957           AX=0x0100;
16316                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16317 3B36           B8                   0100  mov	ax,#$100
16318 3B39           8946         12            mov	$12[bp],ax
16319                                           !BCC_EOS
16320                                           ! 1958           }
16321                                           ! 1959         break;
16322                       00003B3C            .52:
16323 3B3C           EB           56            jmp .1
16324                                           !BCC_EOS
16325                                           ! 1960   }
16326                                           ! 1961 }
16327 3B3E           EB           54            jmp .1
16328                       00003B40            .3:
16329 3B40           2D                   0000  sub	ax,*0
16330 3B43           7C           4F            jl  	.1
16331 3B45           3D                   001C  cmp	ax,*$1C
16332 3B48           77           43            ja  	.53
16333 3B4A           D1E0                       shl	ax,*1
16334 3B4C           89C3                       mov	bx,ax
16335 3B4E           2E                         seg	cs
16336 3B4F           FFA7       3B53            br	.54[bx]
16337                       00003B53            .54:
16338 3B53                      3669            .word	.4
16339 3B55                      36C7            .word	.13
16340 3B57                      36DE            .word	.14
16341 3B59                      36F2            .word	.15
16342 3B5B                      370B            .word	.16
16343 3B5D                      3722            .word	.17
16344 3B5F                      3730            .word	.18
16345 3B61                      376B            .word	.19
16346 3B63                      37A5            .word	.1A
16347 3B65                      37BA            .word	.1B
16348 3B67                      37DA            .word	.1C
16349 3B69                      3B94            .word	.1
16350 3B6B                      37FA            .word	.1D
16351 3B6D                      3817            .word	.1E
16352 3B6F                      3832            .word	.1F
16353 3B71                      3B94            .word	.1
16354 3B73                      384F            .word	.20
16355 3B75                      385E            .word	.21
16356 3B77                      399C            .word	.33
16357 3B79                      39EC            .word	.3A
16358 3B7B                      3B94            .word	.1
16359 3B7D                      3B94            .word	.1
16360 3B7F                      3B94            .word	.1
16361 3B81                      3B94            .word	.1
16362 3B83                      3B94            .word	.1
16363 3B85                      3B94            .word	.1
16364 3B87                      3B94            .word	.1
16365 3B89                      3A20            .word	.3B
16366 3B8B                      3A3C            .word	.3C
16367                       00003B8D            .53:
16368 3B8D           2D                   004F  sub	ax,*$4F
16369 3B90         0F84         FEF9            beq 	.43
16370                       00003B94            .1:
16371                       FFFFFFFE            ..FFFF	=	-2
16372 3B94           5D                         pop	bp
16373 3B95           C3                         ret
16374                                           ! 1962 static void biosfn_set_video_mode(mode) Bit8u mode;
16375                                           ! Register BX used in function int10_func
16376                       00003B96            _biosfn_set_video_mode:
16377                                           !BCC_EOS
16378                                           ! 1963 {
16379                                           ! 1964  Bit8u noclearmem=mode&0x80;
16380 3B96           55                         push	bp
16381 3B97           89E5                       mov	bp,sp
16382 3B99           4C                         dec	sp
16383                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16384 3B9A           8A46         04            mov	al,4[bp]
16385 3B9D           24                     80  and	al,#$80
16386                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16387 3B9F           8846         FF            mov	-1[bp],al
16388                                           !BCC_EOS
16389                                           ! 1965  Bit8u line,mmask,*palette,vpti;
16390                                           !BCC_EOS
16391                                           ! 1966  Bit16u i,twidth,theightm1,cheight;
16392                                           !BCC_EOS
16393                                           ! 1967  Bit8u modeset_ctl,video_ctl,vga_switches;
16394                                           !BCC_EOS
16395                                           ! 1968  Bit16u crtc_addr;
16396                                           !BCC_EOS
16397                                           ! 1969  if (vbe_has_vbe_display()) {
16398 3BA2           83C4                   EB  add	sp,*-$15
16399                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16400 3BA5           E8         5B46            call	_vbe_has_vbe_display
16401 3BA8           85C0                       test	ax,ax
16402 3BAA           74           08            je  	.55
16403                       00003BAC            .56:
16404                                           ! 1970    dispi_set_enable(0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3BAC           31C0                       xor	ax,ax
16407 3BAE           50                         push	ax
16408                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16409 3BAF           E8         5909            call	_dispi_set_enable
16410 3BB2           44                         inc	sp
16411 3BB3           44                         inc	sp
16412                                           !BCC_EOS
16413                                           ! 1971   }
16414                                           ! 1972  mode=mode&0x7f;
16415                       00003BB4            .55:
16416                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16417 3BB4           8A46         04            mov	al,4[bp]
16418 3BB7           24                     7F  and	al,*$7F
16419                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16420 3BB9           8846         04            mov	4[bp],al
16421                                           !BCC_EOS
16422                                           ! 1973  line=find_vga_entry(mode);
16423                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16424 3BBC           8A46         04            mov	al,4[bp]
16425 3BBF           30E4                       xor	ah,ah
16426 3BC1           50                         push	ax
16427                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16428 3BC2           E8         3F37            call	_find_vga_entry
16429 3BC5           44                         inc	sp
16430 3BC6           44                         inc	sp
16431                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16432 3BC7           8846         FE            mov	-2[bp],al
16433                                           !BCC_EOS
16434                                           ! 1974  if(line==0xFF)
16435                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16436 3BCA           8A46         FE            mov	al,-2[bp]
16437 3BCD           3C                     FF  cmp	al,#$FF
16438 3BCF           75           04            jne 	.57
16439                       00003BD1            .58:
16440                                           ! 1975   return;
16441 3BD1           89EC                       mov	sp,bp
16442 3BD3           5D                         pop	bp
16443 3BD4           C3                         ret
16444                                           !BCC_EOS
16445                                           ! 1976  vpti=line_to_vpti[line];
16446                       00003BD5            .57:
16447                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16448 3BD5           8A46         FE            mov	al,-2[bp]
16449 3BD8           30E4                       xor	ah,ah
16450 3BDA           89C3                       mov	bx,ax
16451                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16452 3BDC           8A87       027D            mov	al,_line_to_vpti[bx]
16453 3BE0           8846         F9            mov	-7[bp],al
16454                                           !BCC_EOS
16455                                           ! 1977  twidth=video_param_table[vpti].twidth;
16456                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16457 3BE3           8A46         F9            mov	al,-7[bp]
16458 3BE6           30E4                       xor	ah,ah
16459 3BE8           B1                     06  mov	cl,*6
16460 3BEA           D3E0                       shl	ax,cl
16461 3BEC           89C3                       mov	bx,ax
16462                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16463 3BEE           8A87       0291            mov	al,_video_param_table[bx]
16464 3BF2           30E4                       xor	ah,ah
16465 3BF4           8946         F4            mov	-$C[bp],ax
16466                                           !BCC_EOS
16467                                           ! 1978  theightm1=video_param_table[vpti].theightm1;
16468                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16469 3BF7           8A46         F9            mov	al,-7[bp]
16470 3BFA           30E4                       xor	ah,ah
16471 3BFC           B1                     06  mov	cl,*6
16472 3BFE           D3E0                       shl	ax,cl
16473 3C00           89C3                       mov	bx,ax
16474 3C02           81C3                 0291  add	bx,#_video_param_table
16475                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16476 3C06           8A47         01            mov	al,1[bx]
16477 3C09           30E4                       xor	ah,ah
16478 3C0B           8946         F2            mov	-$E[bp],ax
16479                                           !BCC_EOS
16480                                           ! 1979  cheight=video_param_table[vp
16481                                           ! 1979 ti].cheight;
16482                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16483 3C0E           8A46         F9            mov	al,-7[bp]
16484 3C11           30E4                       xor	ah,ah
16485 3C13           B1                     06  mov	cl,*6
16486 3C15           D3E0                       shl	ax,cl
16487 3C17           89C3                       mov	bx,ax
16488 3C19           81C3                 0291  add	bx,#_video_param_table
16489                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16490 3C1D           8A47         02            mov	al,2[bx]
16491 3C20           30E4                       xor	ah,ah
16492 3C22           8946         F0            mov	-$10[bp],ax
16493                                           !BCC_EOS
16494                                           ! 1980  video_ctl=read_byte(0x40,0x87);
16495                                           ! Debug: list int = const $87 (used reg = )
16496 3C25           B8                   0087  mov	ax,#$87
16497 3C28           50                         push	ax
16498                                           ! Debug: list int = const $40 (used reg = )
16499 3C29           B8                   0040  mov	ax,*$40
16500 3C2C           50                         push	ax
16501                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16502 3C2D           E8         3FB8            call	_read_byte
16503 3C30           83C4                   04  add	sp,*4
16504                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16505 3C33           8846         EE            mov	-$12[bp],al
16506                                           !BCC_EOS
16507                                           ! 1981  vga_switches=read_byte(0x40,0x88);
16508                                           ! Debug: list int = const $88 (used reg = )
16509 3C36           B8                   0088  mov	ax,#$88
16510 3C39           50                         push	ax
16511                                           ! Debug: list int = const $40 (used reg = )
16512 3C3A           B8                   0040  mov	ax,*$40
16513 3C3D           50                         push	ax
16514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16515 3C3E           E8         3FA7            call	_read_byte
16516 3C41           83C4                   04  add	sp,*4
16517                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16518 3C44           8846         ED            mov	-$13[bp],al
16519                                           !BCC_EOS
16520                                           ! 1982  modeset_ctl=read_byte(0x40,0x89);
16521                                           ! Debug: list int = const $89 (used reg = )
16522 3C47           B8                   0089  mov	ax,#$89
16523 3C4A           50                         push	ax
16524                                           ! Debug: list int = const $40 (used reg = )
16525 3C4B           B8                   0040  mov	ax,*$40
16526 3C4E           50                         push	ax
16527                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16528 3C4F           E8         3F96            call	_read_byte
16529 3C52           83C4                   04  add	sp,*4
16530                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16531 3C55           8846         EF            mov	-$11[bp],al
16532                                           !BCC_EOS
16533                                           ! 1983  if((modeset_ctl&0x08)==0)
16534                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16535 3C58           8A46         EF            mov	al,-$11[bp]
16536 3C5B           24                     08  and	al,*8
16537                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16538 3C5D           84C0                       test	al,al
16539 3C5F         0F85         0145            bne 	.59
16540                       00003C63            .5A:
16541                                           ! 1984   {
16542                                           ! 1985    outb(0x3c6,vga_modes[line].pelmask);
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C63           8A46         FE            mov	al,-2[bp]
16545 3C66           30E4                       xor	ah,ah
16546 3C68           B1                     03  mov	cl,*3
16547 3C6A           D3E0                       shl	ax,cl
16548 3C6C           89C3                       mov	bx,ax
16549 3C6E           81C3                 01FD  add	bx,#_vga_modes
16550                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16551 3C72           8A47         06            mov	al,6[bx]
16552 3C75           30E4                       xor	ah,ah
16553 3C77           50                         push	ax
16554                                           ! Debug: list int = const $3C6 (used reg = )
16555 3C78           B8                   03C6  mov	ax,#$3C6
16556 3C7B           50                         push	ax
16557                                           ! Debug: func () void = outb+0 (used reg = )
16558 3C7C           E8         3FD5            call	_outb
16559 3C7F           83C4                   04  add	sp,*4
16560                                           !BCC_EOS
16561                                           ! 1986    outb(0x3c8,0x00);
16562                                           ! Debug: list int = const 0 (used reg = )
16563 3C82           31C0                       xor	ax,ax
16564 3C84           50                         push	ax
16565                                           ! Debug: list int = const $3C8 (used reg = )
16566 3C85           B8                   03C8  mov	ax,#$3C8
16567 3C88           50                         push	ax
16568                                           ! Debug: func () void = outb+0 (used reg = )
16569 3C89           E8         3FC8            call	_outb
16570 3C8C           83C4                   04  add	sp,*4
16571                                           !BCC_EOS
16572                                           ! 1987    switch(vga_modes[line].dacmodel)
16573                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16574 3C8F           8A46         FE            mov	al,-2[bp]
16575 3C92           30E4                       xor	ah,ah
16576 3C94           B1                     03  mov	cl,*3
16577 3C96           D3E0                       shl	ax,cl
16578 3C98           89C3                       mov	bx,ax
16579 3C9A           81C3                 01FD  add	bx,#_vga_modes
16580 3C9E           8A47         07            mov	al,7[bx]
16581                                           ! 1988     {case 0:
16582 3CA1           EB           22            jmp .5D
16583                                           ! 1989       palette=&palette0;
16584                       00003CA3            .5E:
16585                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3CA3           BB                   0A11  mov	bx,#_palette0
16587 3CA6           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1990       break;
16590 3CA9           EB           2A            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1991      case 1:
16593                                           ! 1992       palette=&palette1;
16594                       00003CAB            .5F:
16595                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16596 3CAB           BB                   0AD1  mov	bx,#_palette1
16597 3CAE           895E         FA            mov	-6[bp],bx
16598                                           !BCC_EOS
16599                                           ! 1993       break;
16600 3CB1           EB           22            jmp .5B
16601                                           !BCC_EOS
16602                                           ! 1994      case 2:
16603                                           ! 1995       palette=&palette2;
16604                       00003CB3            .60:
16605                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16606 3CB3           BB                   0B91  mov	bx,#_palette2
16607 3CB6           895E         FA            mov	-6[bp],bx
16608                                           !BCC_EOS
16609                                           ! 1996       break;
16610 3CB9           EB           1A            jmp .5B
16611                                           !BCC_EOS
16612                                           ! 1997      case 3:
16613                                           ! 1998       palette=&palette3;
16614                       00003CBB            .61:
16615                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16616 3CBB           BB                   0C51  mov	bx,#_palette3
16617 3CBE           895E         FA            mov	-6[bp],bx
16618                                           !BCC_EOS
16619                                           ! 1999       break;
16620 3CC1           EB           12            jmp .5B
16621                                           !BCC_EOS
16622                                           ! 2000     }
16623                                           ! 2001    for(i=0;i<0x0100;i++)
16624 3CC3           EB           10            jmp .5B
16625                       00003CC5            .5D:
16626 3CC5           2C                     00  sub	al,*0
16627 3CC7           74           DA            je 	.5E
16628 3CC9           2C                     01  sub	al,*1
16629 3CCB           74           DE            je 	.5F
16630 3CCD           2C                     01  sub	al,*1
16631 3CCF           74           E2            je 	.60
16632 3CD1           2C                     01  sub	al,*1
16633 3CD3           74           E6            je 	.61
16634                       00003CD5            .5B:
16635                       FFFFFFE8            ..FFFE	=	-$18
16636                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16637 3CD5           31C0                       xor	ax,ax
16638 3CD7           8946         F6            mov	-$A[bp],ax
16639                                           !BCC_EOS
16640                                           !BCC_EOS
16641                                           ! 2002     {if(i<=dac_regs[vga_modes[line].dacmodel])
16642 3CDA           E9         00AB            br 	.64
16643                       00003CDD            .65:
16644                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16645 3CDD           8A46         FE            mov	al,-2[bp]
16646 3CE0           30E4                       xor	ah,ah
16647 3CE2           B1                     03  mov	cl,*3
16648 3CE4           D3E0                       shl	ax,cl
16649 3CE6           89C3                       mov	bx,ax
16650 3CE8           81C3                 01FD  add	bx,#_vga_modes
16651                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16652 3CEC           8A47         07            mov	al,7[bx]
16653 3CEF           30E4                       xor	ah,ah
16654 3CF1           89C3                       mov	bx,ax
16655                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16656 3CF3           8A87       028D            mov	al,_dac_regs[bx]
16657 3CF7           30E4                       xor	ah,ah
16658 3CF9           3B46         F6            cmp	ax,-$A[bp]
16659 3CFC           72           5C            jb  	.66
16660                       00003CFE            .67:
16661                                           ! 2003       {outb(0x3c9,palette[(i*3)+0]);
16662                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16663 3CFE           8B46         F6            mov	ax,-$A[bp]
16664 3D01           89C2                       mov	dx,ax
16665 3D03           D1E0                       shl	ax,*1
16666 3D05           01D0                       add	ax,dx
16667                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16668                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16669 3D07           0346         FA            add	ax,-6[bp]
16670 3D0A           89C3                       mov	bx,ax
16671                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16672 3D0C           8A07                       mov	al,[bx]
16673 3D0E           30E4                       xor	ah,ah
16674 3D10           50                         push	ax
16675                                           ! Debug: list int = const $3C9 (used reg = )
16676 3D11           B8                   03C9  mov	ax,#$3C9
16677 3D14           50                         push	ax
16678                                           ! Debug: func () void = outb+0 (used reg = )
16679 3D15           E8         3F3C            call	_outb
16680 3D18           83C4                   04  add	sp,*4
16681                                           !BCC_EOS
16682                                           ! 2004        outb(0x3c9,palette[(i*3)+1]);
16683                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16684 3D1B           8B46         F6            mov	ax,-$A[bp]
16685 3D1E           89C2                       mov	dx,ax
16686 3D20           D1E0                       shl	ax,*1
16687 3D22           01D0                       add	ax,dx
16688                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16689                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16690 3D24           40                         inc	ax
16691 3D25           0346         FA            add	ax,-6[bp]
16692 3D28           89C3                       mov	bx,ax
16693                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16694 3D2A           8A07                       mov	al,[bx]
16695 3D2C           30E4                       xor	ah,ah
16696 3D2E           50                         push	ax
16697                                           ! Debug: list int = const $3C9 (used reg = )
16698 3D2F           B8                   03C9  mov	ax,#$3C9
16699 3D32           50                         push	ax
16700                                           ! Debug: func () void = outb+0 (used reg = )
16701 3D33           E8         3F1E            call	_outb
16702 3D36           83C4                   04  add	sp,*4
16703                                           !BCC_EOS
16704                                           ! 2005        outb(0x3c9,palette[(i*3)+2]);
16705                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16706 3D39           8B46         F6            mov	ax,-$A[bp]
16707 3D3C           89C2                       mov	dx,ax
16708 3D3E           D1E0                       shl	ax,*1
16709 3D40           01D0                       add	ax,dx
16710                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16711                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D42           40                         inc	ax
16713 3D43           40                         inc	ax
16714 3D44           0346         FA            add	ax,-6[bp]
16715 3D47           89C3                       mov	bx,ax
16716                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16717 3D49           8A07                       mov	al,[bx]
16718 3D4B           30E4                       xor	ah,ah
16719 3D4D           50                         push	ax
16720                                           ! Debug: list int = const $3C9 (used reg = )
16721 3D4E           B8                   03C9  mov	ax,#$3C9
16722 3D51           50                         push	ax
16723                                           ! Debug: func () void = outb+0 (used reg = )
16724 3D52           E8         3EFF            call	_outb
16725 3D55           83C4                   04  add	sp,*4
16726                                           !BCC_EOS
16727                                           ! 2006       }
16728                                           ! 2007      else
16729                                           ! 2008       {outb(0x3c9,0);
16730 3D58           EB           27            jmp .68
16731                       00003D5A            .66:
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3D5A           31C0                       xor	ax,ax
16734 3D5C           50                         push	ax
16735                                           ! Debug: list int = const $3C9 (used reg = )
16736 3D5D           B8                   03C9  mov	ax,#$3C9
16737 3D60           50                         push	ax
16738                                           ! Debug: func () void = outb+0 (used reg = )
16739 3D61           E8         3EF0            call	_outb
16740 3D64           83C4                   04  add	sp,*4
16741                                           !BCC_EOS
16742                                           ! 2009        outb(0x3c9,0);
16743                                           ! Debug: list int = const 0 (used reg = )
16744 3D67           31C0                       xor	ax,ax
16745 3D69           50                         push	ax
16746                                           ! Debug: list int = const $3C9 (used reg = )
16747 3D6A           B8                   03C9  mov	ax,#$3C9
16748 3D6D           50                         push	ax
16749                                           ! Debug: func () void = outb+0 (used reg = )
16750 3D6E           E8         3EE3            call	_outb
16751 3D71           83C4                   04  add	sp,*4
16752                                           !BCC_EOS
16753                                           ! 2010        outb(0x3c9,0);
16754                                           ! Debug: list int = const 0 (used reg = )
16755 3D74           31C0                       xor	ax,ax
16756 3D76           50                         push	ax
16757                                           ! Debug: list int = const $3C9 (used reg = )
16758 3D77           B8                   03C9  mov	ax,#$3C9
16759 3D7A           50                         push	ax
16760                                           ! Debug: func () void = outb+0 (used reg = )
16761 3D7B           E8         3ED6            call	_outb
16762 3D7E           83C4                   04  add	sp,*4
16763                                           !BCC_EOS
16764                                           ! 2011       }
16765                                           ! 2012     }
16766                       00003D81            .68:
16767                                           ! 2013    if((modeset_ctl&0x02)==0x02)
16768                       00003D81            .63:
16769                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16770 3D81           8B46         F6            mov	ax,-$A[bp]
16771 3D84           40                         inc	ax
16772 3D85           8946         F6            mov	-$A[bp],ax
16773                       00003D88            .64:
16774                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16775 3D88           8B46         F6            mov	ax,-$A[bp]
16776 3D8B           3D                   0100  cmp	ax,#$100
16777 3D8E         0F82         FF4B            blo 	.65
16778                       00003D92            .69:
16779                       00003D92            .62:
16780                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D92           8A46         EF            mov	al,-$11[bp]
16782 3D95           24                     02  and	al,*2
16783                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16784 3D97           3C                     02  cmp	al,*2
16785 3D99           75           0D            jne 	.6A
16786                       00003D9B            .6B:
16787                                           ! 2014     {
16788                                           ! 2015      biosfn_perform_gray_scale_summing(0x00, 0x100);
16789                                           ! Debug: list int = const $100 (used reg = )
16790 3D9B           B8                   0100  mov	ax,#$100
16791 3D9E           50                         push	ax
16792                                           ! Debug: list int = const 0 (used reg = )
16793 3D9F           31C0                       xor	ax,ax
16794 3DA1           50                         push	ax
16795                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16796 3DA2           E8         273C            call	_biosfn_perform_gray_scale_summing
16797 3DA5           83C4                   04  add	sp,*4
16798                                           !BCC_EOS
16799                                           ! 2016     }
16800                                           ! 2017   }
16801                       00003DA8            .6A:
16802                                           ! 2018  inb(0x3da);
16803                       00003DA8            .59:
16804                                           ! Debug: list int = const $3DA (used reg = )
16805 3DA8           B8                   03DA  mov	ax,#$3DA
16806 3DAB           50                         push	ax
16807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16808 3DAC           E8         3E8F            call	_inb
16809 3DAF           44                         inc	sp
16810 3DB0           44                         inc	sp
16811                                           !BCC_EOS
16812                                           ! 2019  for(i=0;i<=0x13;i++)
16813                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16814 3DB1           31C0                       xor	ax,ax
16815 3DB3           8946         F6            mov	-$A[bp],ax
16816                                           !BCC_EOS
16817                                           !BCC_EOS
16818                                           ! 2020   {outb(0x3c0,i);
16819 3DB6           EB           38            jmp .6E
16820                       00003DB8            .6F:
16821                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16822 3DB8           FF76         F6            push	-$A[bp]
16823                                           ! Debug: list int = const $3C0 (used reg = )
16824 3DBB           B8                   03C0  mov	ax,#$3C0
16825 3DBE           50                         push	ax
16826                                           ! Debug: func () void = outb+0 (used reg = )
16827 3DBF           E8         3E92            call	_outb
16828 3DC2           83C4                   04  add	sp,*4
16829                                           !BCC_EOS
16830                                           ! 2021    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16831                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16832 3DC5           8A46         F9            mov	al,-7[bp]
16833 3DC8           30E4                       xor	ah,ah
16834 3DCA           B1                     06  mov	cl,*6
16835 3DCC           D3E0                       shl	ax,cl
16836 3DCE           89C3                       mov	bx,ax
16837 3DD0           81C3                 0291  add	bx,#_video_param_table
16838                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16839 3DD4           8B46         F6            mov	ax,-$A[bp]
16840 3DD7           01C3                       add	bx,ax
16841                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16842 3DD9           8A47         23            mov	al,$23[bx]
16843 3DDC           30E4                       xor	ah,ah
16844 3DDE           50                         push	ax
16845                                           ! Debug: list int = const $3C0 (used reg = )
16846 3DDF           B8                   03C0  mov	ax,#$3C0
16847 3DE2           50                         push	ax
16848                                           ! Debug: func () void = outb+0 (used reg = )
16849 3DE3           E8         3E6E            call	_outb
16850 3DE6           83C4                   04  add	sp,*4
16851                                           !BCC_EOS
16852                                           ! 2022   }
16853                                           ! 2023  outb(0x3c0,0x14);
16854                       00003DE9            .6D:
16855                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16856 3DE9           8B46         F6            mov	ax,-$A[bp]
16857 3DEC           40                         inc	ax
16858 3DED           8946         F6            mov	-$A[bp],ax
16859                       00003DF0            .6E:
16860                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16861 3DF0           8B46         F6            mov	ax,-$A[bp]
16862 3DF3           3D                   0013  cmp	ax,*$13
16863 3DF6           76           C0            jbe	.6F
16864                       00003DF8            .70:
16865                       00003DF8            .6C:
16866                                           ! Debug: list int = const $14 (used reg = )
16867 3DF8           B8                   0014  mov	ax,*$14
16868 3DFB           50                         push	ax
16869                                           ! Debug: list int = const $3C0 (used reg = )
16870 3DFC           B8                   03C0  mov	ax,#$3C0
16871 3DFF           50                         push	ax
16872                                           ! Debug: func () void = outb+0 (used reg = )
16873 3E00           E8         3E51            call	_outb
16874 3E03           83C4                   04  add	sp,*4
16875                                           !BCC_EOS
16876                                           ! 2024  outb(0x3c0,0x00);
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3E06           31C0                       xor	ax,ax
16879 3E08           50                         push	ax
16880                                           ! Debug: list int = const $3C0 (used reg = )
16881 3E09           B8                   03C0  mov	ax,#$3C0
16882 3E0C           50                         push	ax
16883                                           ! Debug: func () void = outb+0 (used reg = )
16884 3E0D           E8         3E44            call	_outb
16885 3E10           83C4                   04  add	sp,*4
16886                                           !BCC_EOS
16887                                           ! 2025  outb(0x3c4,0);
16888                                           ! Debug: list int = const 0 (used reg = )
16889 3E13           31C0                       xor	ax,ax
16890 3E15           50                         push	ax
16891                                           ! Debug: list int = const $3C4 (used reg = )
16892 3E16           B8                   03C4  mov	ax,#$3C4
16893 3E19           50                         push	ax
16894                                           ! Debug: func () void = outb+0 (used reg = )
16895 3E1A           E8         3E37            call	_outb
16896 3E1D           83C4                   04  add	sp,*4
16897                                           !BCC_EOS
16898                                           ! 2026  outb(0x3c5,0x03);
16899                                           ! Debug: list int = const 3 (used reg = )
16900 3E20           B8                   0003  mov	ax,*3
16901 3E23           50                         push	ax
16902                                           ! Debug: list int = const $3C5 (used reg = )
16903 3E24           B8                   03C5  mov	ax,#$3C5
16904 3E27           50                         push	ax
16905                                           ! Debug: func () void = outb+0 (used reg = )
16906 3E28           E8         3E29            call	_outb
16907 3E2B           83C4                   04  add	sp,*4
16908                                           !BCC_EOS
16909                                           ! 2027  for(i=1;i<=4;i++)
16910                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16911 3E2E           B8                   0001  mov	ax,*1
16912 3E31           8946         F6            mov	-$A[bp],ax
16913                                           !BCC_EOS
16914                                           !BCC_EOS
16915                                           ! 2028   {outb(0x3c4,i);
16916 3E34           EB           3F            jmp .73
16917                       00003E36            .74:
16918                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16919 3E36           FF76         F6            push	-$A[bp]
16920                                           ! Debug: list int = const $3C4 (used reg = )
16921 3E39           B8                   03C4  mov	ax,#$3C4
16922 3E3C           50                         push	ax
16923                                           ! Debug: func () void = outb+0 (used reg = )
16924 3E3D           E8         3E14            call	_outb
16925 3E40           83C4                   04  add	sp,*4
16926                                           !BCC_EOS
16927                                           ! 2029    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16928                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16929 3E43           8B46         F6            mov	ax,-$A[bp]
16930 3E46           48                         dec	ax
16931 3E47           50                         push	ax
16932                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16933 3E48           8A46         F9            mov	al,-7[bp]
16934 3E4B           30E4                       xor	ah,ah
16935 3E4D           B1                     06  mov	cl,*6
16936 3E4F           D3E0                       shl	ax,cl
16937 3E51           89C3                       mov	bx,ax
16938 3E53           81C3                 0291  add	bx,#_video_param_table
16939                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16940 3E57           8B46         E8            mov	ax,-$18[bp]
16941 3E5A           01C3                       add	bx,ax
16942 3E5C           44                         inc	sp
16943 3E5D           44                         inc	sp
16944                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16945 3E5E           8A47         05            mov	al,5[bx]
16946 3E61           30E4                       xor	ah,ah
16947 3E63           50                         push	ax
16948                                           ! Debug: list int = const $3C5 (used reg = )
16949 3E64           B8                   03C5  mov	ax,#$3C5
16950 3E67           50                         push	ax
16951                                           ! Debug: func () void = outb+0 (used reg = )
16952 3E68           E8         3DE9            call	_outb
16953 3E6B           83C4                   04  add	sp,*4
16954                                           !BCC_EOS
16955                                           ! 2030   }
16956                                           ! 2031  for(i=0;i<=8;i++)
16957                       00003E6E            .72:
16958                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16959 3E6E           8B46         F6            mov	ax,-$A[bp]
16960 3E71           40                         inc	ax
16961 3E72           8946         F6            mov	-$A[bp],ax
16962                       00003E75            .73:
16963                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16964 3E75           8B46         F6            mov	ax,-$A[bp]
16965 3E78           3D                   0004  cmp	ax,*4
16966 3E7B           76           B9            jbe	.74
16967                       00003E7D            .75:
16968                       00003E7D            .71:
16969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16970 3E7D           31C0                       xor	ax,ax
16971 3E7F           8946         F6            mov	-$A[bp],ax
16972                                           !BCC_EOS
16973                                           !BCC_EOS
16974                                           ! 2032   {outb(0x3ce,i);
16975 3E82           EB           38            jmp .78
16976                       00003E84            .79:
16977                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16978 3E84           FF76         F6            push	-$A[bp]
16979                                           ! Debug: list int = const $3CE (used reg = )
16980 3E87           B8                   03CE  mov	ax,#$3CE
16981 3E8A           50                         push	ax
16982                                           ! Debug: func () void = outb+0 (used reg = )
16983 3E8B           E8         3DC6            call	_outb
16984 3E8E           83C4                   04  add	sp,*4
16985                                           !BCC_EOS
16986                                           ! 2033    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16987                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16988 3E91           8A46         F9            mov	al,-7[bp]
16989 3E94           30E4                       xor	ah,ah
16990 3E96           B1                     06  mov	cl,*6
16991 3E98           D3E0                       shl	ax,cl
16992 3E9A           89C3                       mov	bx,ax
16993 3E9C           81C3                 0291  add	bx,#_video_param_table
16994                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16995 3EA0           8B46         F6            mov	ax,-$A[bp]
16996 3EA3           01C3                       add	bx,ax
16997                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16998 3EA5           8A47         37            mov	al,$37[bx]
16999 3EA8           30E4                       xor	ah,ah
17000 3EAA           50                         push	ax
17001                                           ! Debug: list int = const $3CF (used reg = )
17002 3EAB           B8                   03CF  mov	ax,#$3CF
17003 3EAE           50                         push	ax
17004                                           ! Debug: func () void = outb+0 (used reg = )
17005 3EAF           E8         3DA2            call	_outb
17006 3EB2           83C4                   04  add	sp,*4
17007                                           !BCC_EOS
17008                                           ! 2034   }
17009                                           ! 2035  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17010                       00003EB5            .77:
17011                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17012 3EB5           8B46         F6            mov	ax,-$A[bp]
17013 3EB8           40                         inc	ax
17014 3EB9           8946         F6            mov	-$A[bp],ax
17015                       00003EBC            .78:
17016                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17017 3EBC           8B46         F6            mov	ax,-$A[bp]
17018 3EBF           3D                   0008  cmp	ax,*8
17019 3EC2           76           C0            jbe	.79
17020                       00003EC4            .7A:
17021                       00003EC4            .76:
17022                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17023 3EC4           8A46         FE            mov	al,-2[bp]
17024 3EC7           30E4                       xor	ah,ah
17025 3EC9           B1                     03  mov	cl,*3
17026 3ECB           D3E0                       shl	ax,cl
17027 3ECD           89C3                       mov	bx,ax
17028 3ECF           81C3                 01FD  add	bx,#_vga_modes
17029                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17030 3ED3           8A47         02            mov	al,2[bx]
17031 3ED6           3C                     01  cmp	al,*1
17032 3ED8           75           05            jne 	.7B
17033                       00003EDA            .7C:
17034 3EDA           B8                   03B4  mov	ax,#$3B4
17035 3EDD           EB           03            jmp .7D
17036                       00003EDF            .7B:
17037 3EDF           B8                   03D4  mov	ax,#$3D4
17038                       00003EE2            .7D:
17039                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17040 3EE2           8946         EA            mov	-$16[bp],ax
17041                                           !BCC_EOS
17042                                           ! 2036  outw(crtc_addr,0x0011);
17043                                           ! Debug: list int = const $11 (used reg = )
17044 3EE5           B8                   0011  mov	ax,*$11
17045 3EE8           50                         push	ax
17046                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17047 3EE9           FF76         EA            push	-$16[bp]
17048                                           ! Debug: func () void = outw+0 (used reg = )
17049 3EEC           E8         3D75            call	_outw
17050 3EEF           83C4                   04  add	sp,*4
17051                                           !BCC_EOS
17052                                           ! 2037  for(i=0;i<=0x18;i++)
17053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17054 3EF2           31C0                       xor	ax,ax
17055 3EF4           8946         F6            mov	-$A[bp],ax
17056                                           !BCC_EOS
17057                                           !BCC_EOS
17058                                           ! 2038   {outb(crtc_addr,i);
17059 3EF7           EB           38            jmp .80
17060                       00003EF9            .81:
17061                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17062 3EF9           FF76         F6            push	-$A[bp]
17063                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17064 3EFC           FF76         EA            push	-$16[bp]
17065                                           ! Debug: func () void = outb+0 (used reg = )
17066 3EFF           E8         3D52            call	_outb
17067 3F02           83C4                   04  add	sp,*4
17068                                           !BCC_EOS
17069                                           ! 2039    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17070                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17071 3F05           8A46         F9            mov	al,-7[bp]
17072 3F08           30E4                       xor	ah,ah
17073 3F0A           B1                     06  mov	cl,*6
17074 3F0C           D3E0                       shl	ax,cl
17075 3F0E           89C3                       mov	bx,ax
17076 3F10           81C3                 0291  add	bx,#_video_param_table
17077                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17078 3F14           8B46         F6            mov	ax,-$A[bp]
17079 3F17           01C3                       add	bx,ax
17080                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17081 3F19           8A47         0A            mov	al,$A[bx]
17082 3F1C           30E4                       xor	ah,ah
17083 3F1E           50                         push	ax
17084                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17085 3F1F           8B46         EA            mov	ax,-$16[bp]
17086                                           ! Debug: list unsigned int = ax+1 (used reg = )
17087 3F22           40                         inc	ax
17088 3F23           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3F24           E8         3D2D            call	_outb
17091 3F27           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2040   }
17094                                           ! 2041  outb(0x3c2,video_param_table[vpti].miscreg);
17095                       00003F2A            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3F2A           8B46         F6            mov	ax,-$A[bp]
17098 3F2D           40                         inc	ax
17099 3F2E           8946         F6            mov	-$A[bp],ax
17100                       00003F31            .80:
17101                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17102 3F31           8B46         F6            mov	ax,-$A[bp]
17103 3F34           3D                   0018  cmp	ax,*$18
17104 3F37           76           C0            jbe	.81
17105                       00003F39            .82:
17106                       00003F39            .7E:
17107                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17108 3F39           8A46         F9            mov	al,-7[bp]
17109 3F3C           30E4                       xor	ah,ah
17110 3F3E           B1                     06  mov	cl,*6
17111 3F40           D3E0                       shl	ax,cl
17112 3F42           89C3                       mov	bx,ax
17113 3F44           81C3                 0291  add	bx,#_video_param_table
17114                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17115 3F48           8A47         09            mov	al,9[bx]
17116 3F4B           30E4                       xor	ah,ah
17117 3F4D           50                         push	ax
17118                                           ! Debug: list int = const $3C2 (used reg = )
17119 3F4E           B8                   03C2  mov	ax,#$3C2
17120 3F51           50                         push	ax
17121                                           ! Debug: func () void = outb+0 (used reg = )
17122 3F52           E8         3CFF            call	_outb
17123 3F55           83C4                   04  add	sp,*4
17124                                           !BCC_EOS
17125                                           ! 2042  outb(0x3c0,0x20);
17126                                           ! Debug: list int = const $20 (used reg = )
17127 3F58           B8                   0020  mov	ax,*$20
17128 3F5B           50                         push	ax
17129                                           ! Debug: list int = const $3C0 (used reg = )
17130 3F5C           B8                   03C0  mov	ax,#$3C0
17131 3F5F           50                         push	ax
17132                                           ! Debug: func () void = outb+0 (used reg = )
17133 3F60           E8         3CF1            call	_outb
17134 3F63           83C4                   04  add	sp,*4
17135                                           !BCC_EOS
17136                                           ! 2043  inb(0x3da);
17137                                           ! Debug: list int = const $3DA (used reg = )
17138 3F66           B8                   03DA  mov	ax,#$3DA
17139 3F69           50                         push	ax
17140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17141 3F6A           E8         3CD1            call	_inb
17142 3F6D           44                         inc	sp
17143 3F6E           44                         inc	sp
17144                                           !BCC_EOS
17145                                           ! 2044  if(noclearmem==0x00)
17146                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17147 3F6F           8A46         FF            mov	al,-1[bp]
17148 3F72           84C0                       test	al,al
17149 3F74         0F85         00C1            bne 	.83
17150                       00003F78            .84:
17151                                           ! 2045   {
17152                                           ! 2046    if(vga_modes[line].class==0x00)
17153                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17154 3F78           8A46         FE            mov	al,-2[bp]
17155 3F7B           30E4                       xor	ah,ah
17156 3F7D           B1                     03  mov	cl,*3
17157 3F7F           D3E0                       shl	ax,cl
17158 3F81           89C3                       mov	bx,ax
17159 3F83           81C3                 01FD  add	bx,#_vga_modes
17160                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17161 3F87           8A47         01            mov	al,1[bx]
17162 3F8A           84C0                       test	al,al
17163 3F8C           75           26            jne 	.85
17164                       00003F8E            .86:
17165                                           ! 2047     {
17166                                           ! 2048      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17167                                           ! Debug: list int = const $4000 (used reg = )
17168 3F8E           B8                   4000  mov	ax,#$4000
17169 3F91           50                         push	ax
17170                                           ! Debug: list int = const $720 (used reg = )
17171 3F92           B8                   0720  mov	ax,#$720
17172 3F95           50                         push	ax
17173                                           ! Debug: list int = const 0 (used reg = )
17174 3F96           31C0                       xor	ax,ax
17175 3F98           50                         push	ax
17176                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17177 3F99           8A46         FE            mov	al,-2[bp]
17178 3F9C           30E4                       xor	ah,ah
17179 3F9E           B1                     03  mov	cl,*3
17180 3FA0           D3E0                       shl	ax,cl
17181 3FA2           89C3                       mov	bx,ax
17182 3FA4           81C3                 01FD  add	bx,#_vga_modes
17183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17184 3FA8           FF77         04            push	4[bx]
17185                                           ! Debug: func () void = memsetw+0 (used reg = )
17186 3FAB           E8         3BB5            call	_memsetw
17187 3FAE           83C4                   08  add	sp,*8
17188                                           !BCC_EOS
17189                                           ! 2049     }
17190                                           ! 2050    else
17191                                           ! 2051     {
17192 3FB1           E9         0085            br 	.87
17193                       00003FB4            .85:
17194                                           ! 2052      if(mode<0x0d)
17195                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17196 3FB4           8A46         04            mov	al,4[bp]
17197 3FB7           3C                     0D  cmp	al,*$D
17198 3FB9           73           24            jae 	.88
17199                       00003FBB            .89:
17200                                           ! 2053       {
17201                                           ! 2054        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17202                                           ! Debug: list int = const $4000 (used reg = )
17203 3FBB           B8                   4000  mov	ax,#$4000
17204 3FBE           50                         push	ax
17205                                           ! Debug: list int = const 0 (used reg = )
17206 3FBF           31C0                       xor	ax,ax
17207 3FC1           50                         push	ax
17208                                           ! Debug: list int = const 0 (used reg = )
17209 3FC2           31C0                       xor	ax,ax
17210 3FC4           50                         push	ax
17211                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17212 3FC5           8A46         FE            mov	al,-2[bp]
17213 3FC8           30E4                       xor	ah,ah
17214 3FCA           B1                     03  mov	cl,*3
17215 3FCC           D3E0                       shl	ax,cl
17216 3FCE           89C3                       mov	bx,ax
17217 3FD0           81C3                 01FD  add	bx,#_vga_modes
17218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17219 3FD4           FF77         04            push	4[bx]
17220                                           ! Debug: func () void = memsetw+0 (used reg = )
17221 3FD7           E8         3B89            call	_memsetw
17222 3FDA           83C4                   08  add	sp,*8
17223                                           !BCC_EOS
17224                                           ! 2055       }
17225                                           ! 2056      else
17226                                           ! 2057       {
17227 3FDD           EB           5A            jmp .8A
17228                       00003FDF            .88:
17229                                           ! 2058        outb( 0x3c4, 0x02 );
17230                                           ! Debug: list int = const 2 (used reg = )
17231 3FDF           B8                   0002  mov	ax,*2
17232 3FE2           50                         push	ax
17233                                           ! Debug: list int = const $3C4 (used reg = )
17234 3FE3           B8                   03C4  mov	ax,#$3C4
17235 3FE6           50                         push	ax
17236                                           ! Debug: func () void = outb+0 (used reg = )
17237 3FE7           E8         3C6A            call	_outb
17238 3FEA           83C4                   04  add	sp,*4
17239                                           !BCC_EOS
17240                                           ! 2059        mmask = inb( 0x3c5 );
17241                                           ! Debug: list int = const $3C5 (used reg = )
17242 3FED           B8                   03C5  mov	ax,#$3C5
17243 3FF0           50                         push	ax
17244                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17245 3FF1           E8         3C4A            call	_inb
17246 3FF4           44                         inc	sp
17247 3FF5           44                         inc	sp
17248                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17249 3FF6           8846         FD            mov	-3[bp],al
17250                                           !BCC_EOS
17251                                           ! 2060        outb( 0x3c5, 0x0f );
17252                                           ! Debug: list int = const $F (used reg = )
17253 3FF9           B8                   000F  mov	ax,*$F
17254 3FFC           50                         push	ax
17255                                           ! Debug: list int = const $3C5 (used reg = )
17256 3FFD           B8                   03C5  mov	ax,#$3C5
17257 4000           50                         push	ax
17258                                           ! Debug: func () void = outb+0 (used reg = )
17259 4001           E8         3C50            call	_outb
17260 4004           83C4                   04  add	sp,*4
17261                                           !BCC_EOS
17262                                           ! 2061        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17263                                           ! Debug: list unsigned int = const $8000 (used reg = )
17264 4007           B8                   8000  mov	ax,#$8000
17265 400A           50                         push	ax
17266                                           ! Debug: list int = const 0 (used reg = )
17267 400B           31C0                       xor	ax,ax
17268 400D           50                         push	ax
17269                                           ! Debug: list int = const 0 (used reg = )
17270 400E           31C0                       xor	ax,ax
17271 4010           50                         push	ax
17272                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17273 4011           8A46         FE            mov	al,-2[bp]
17274 4014           30E4                       xor	ah,ah
17275 4016           B1                     03  mov	cl,*3
17276 4018           D3E0                       shl	ax,cl
17277 401A           89C3                       mov	bx,ax
17278 401C           81C3                 01FD  add	bx,#_vga_modes
17279                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17280 4020           FF77         04            push	4[bx]
17281                                           ! Debug: func () void = memsetw+0 (used reg = )
17282 4023           E8         3B3D            call	_memsetw
17283 4026           83C4                   08  add	sp,*8
17284                                           !BCC_EOS
17285                                           ! 2062        outb( 0x3c5, mmask );
17286                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17287 4029           8A46         FD            mov	al,-3[bp]
17288 402C           30E4                       xor	ah,ah
17289 402E           50                         push	ax
17290                                           ! Debug: list int = const $3C5 (used reg = )
17291 402F           B8                   03C5  mov	ax,#$3C5
17292 4032           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 4033           E8         3C1E            call	_outb
17295 4036           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2063       }
17298                                           ! 2064     }
17299                       00004039            .8A:
17300                                           ! 2065   }
17301                       00004039            .87:
17302                                           ! 2066  write_byte(0x40,0x49,mode);
17303                       00004039            .83:
17304                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17305 4039           8A46         04            mov	al,4[bp]
17306 403C           30E4                       xor	ah,ah
17307 403E           50                         push	ax
17308                                           ! Debug: list int = const $49 (used reg = )
17309 403F           B8                   0049  mov	ax,*$49
17310 4042           50                         push	ax
17311                                           ! Debug: list int = const $40 (used reg = )
17312 4043           B8                   0040  mov	ax,*$40
17313 4046           50                         push	ax
17314                                           ! Debug: func () void = write_byte+0 (used reg = )
17315 4047           E8         3BC4            call	_write_byte
17316 404A           83C4                   06  add	sp,*6
17317                                           !BCC_EOS
17318                                           ! 2067  write_word(0x40,0x4A,twidth);
17319                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17320 404D           FF76         F4            push	-$C[bp]
17321                                           ! Debug: list int = const $4A (used reg = )
17322 4050           B8                   004A  mov	ax,*$4A
17323 4053           50                         push	ax
17324                                           ! Debug: list int = const $40 (used reg = )
17325 4054           B8                   0040  mov	ax,*$40
17326 4057           50                         push	ax
17327                                           ! Debug: func () void = write_word+0 (used reg = )
17328 4058           E8         3BCB            call	_write_word
17329 405B           83C4                   06  add	sp,*6
17330                                           !BCC_EOS
17331                                           ! 2068  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17332                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17333 405E           8A46         F9            mov	al,-7[bp]
17334 4061           30E4                       xor	ah,ah
17335 4063           B1                     06  mov	cl,*6
17336 4065           D3E0                       shl	ax,cl
17337 4067           89C3                       mov	bx,ax
17338 4069           81C3                 0291  add	bx,#_video_param_table
17339                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17340                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17341                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17342 406D           FF77         03            push	3[bx]
17343                                           ! Debug: list int = const $4C (used reg = )
17344 4070           B8                   004C  mov	ax,*$4C
17345 4073           50                         push	ax
17346                                           ! Debug: list int = const $40 (used reg = )
17347 4074           B8                   0040  mov	ax,*$40
17348 4077           50                         push	ax
17349                                           ! Debug: func () void = write_word+0 (used reg = )
17350 4078           E8         3BAB            call	_write_word
17351 407B           83C4                   06  add	sp,*6
17352                                           !BCC_EOS
17353                                           ! 2069  wr
17354                                           ! 2069 ite_word(0x40,0x63,crtc_addr);
17355                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17356 407E           FF76         EA            push	-$16[bp]
17357                                           ! Debug: list int = const $63 (used reg = )
17358 4081           B8                   0063  mov	ax,*$63
17359 4084           50                         push	ax
17360                                           ! Debug: list int = const $40 (used reg = )
17361 4085           B8                   0040  mov	ax,*$40
17362 4088           50                         push	ax
17363                                           ! Debug: func () void = write_word+0 (used reg = )
17364 4089           E8         3B9A            call	_write_word
17365 408C           83C4                   06  add	sp,*6
17366                                           !BCC_EOS
17367                                           ! 2070  write_byte(0x40,0x84,theightm1);
17368                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17369 408F           FF76         F2            push	-$E[bp]
17370                                           ! Debug: list int = const $84 (used reg = )
17371 4092           B8                   0084  mov	ax,#$84
17372 4095           50                         push	ax
17373                                           ! Debug: list int = const $40 (used reg = )
17374 4096           B8                   0040  mov	ax,*$40
17375 4099           50                         push	ax
17376                                           ! Debug: func () void = write_byte+0 (used reg = )
17377 409A           E8         3B71            call	_write_byte
17378 409D           83C4                   06  add	sp,*6
17379                                           !BCC_EOS
17380                                           ! 2071  write_word(0x40,0x85,cheight);
17381                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17382 40A0           FF76         F0            push	-$10[bp]
17383                                           ! Debug: list int = const $85 (used reg = )
17384 40A3           B8                   0085  mov	ax,#$85
17385 40A6           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 40A7           B8                   0040  mov	ax,*$40
17388 40AA           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 40AB           E8         3B78            call	_write_word
17391 40AE           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 2072  write_byte(0x40,0x87,(0x60|noclearmem));
17394                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17395                                           ! Debug: expression subtree swapping
17396 40B1           8A46         FF            mov	al,-1[bp]
17397 40B4           0C                     60  or	al,*$60
17398                                           ! Debug: list unsigned char = al+0 (used reg = )
17399 40B6           30E4                       xor	ah,ah
17400 40B8           50                         push	ax
17401                                           ! Debug: list int = const $87 (used reg = )
17402 40B9           B8                   0087  mov	ax,#$87
17403 40BC           50                         push	ax
17404                                           ! Debug: list int = const $40 (used reg = )
17405 40BD           B8                   0040  mov	ax,*$40
17406 40C0           50                         push	ax
17407                                           ! Debug: func () void = write_byte+0 (used reg = )
17408 40C1           E8         3B4A            call	_write_byte
17409 40C4           83C4                   06  add	sp,*6
17410                                           !BCC_EOS
17411                                           ! 2073  write_byte(0x40,0x88,0xF9);
17412                                           ! Debug: list int = const $F9 (used reg = )
17413 40C7           B8                   00F9  mov	ax,#$F9
17414 40CA           50                         push	ax
17415                                           ! Debug: list int = const $88 (used reg = )
17416 40CB           B8                   0088  mov	ax,#$88
17417 40CE           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40CF           B8                   0040  mov	ax,*$40
17420 40D2           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40D3           E8         3B38            call	_write_byte
17423 40D6           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2074  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17426                                           ! Debug: list int = const $89 (used reg = )
17427 40D9           B8                   0089  mov	ax,#$89
17428 40DC           50                         push	ax
17429                                           ! Debug: list int = const $40 (used reg = )
17430 40DD           B8                   0040  mov	ax,*$40
17431 40E0           50                         push	ax
17432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17433 40E1           E8         3B04            call	_read_byte
17434 40E4           83C4                   04  add	sp,*4
17435                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17436 40E7           24                     7F  and	al,*$7F
17437                                           ! Debug: list unsigned char = al+0 (used reg = )
17438 40E9           30E4                       xor	ah,ah
17439 40EB           50                         push	ax
17440                                           ! Debug: list int = const $89 (used reg = )
17441 40EC           B8                   0089  mov	ax,#$89
17442 40EF           50                         push	ax
17443                                           ! Debug: list int = const $40 (used reg = )
17444 40F0           B8                   0040  mov	ax,*$40
17445 40F3           50                         push	ax
17446                                           ! Debug: func () void = write_byte+0 (used reg = )
17447 40F4           E8         3B17            call	_write_byte
17448 40F7           83C4                   06  add	sp,*6
17449                                           !BCC_EOS
17450                                           ! 2075  write_byte(0x40,0x8A,0x08);
17451                                           ! Debug: list int = const 8 (used reg = )
17452 40FA           B8                   0008  mov	ax,*8
17453 40FD           50                         push	ax
17454                                           ! Debug: list int = const $8A (used reg = )
17455 40FE           B8                   008A  mov	ax,#$8A
17456 4101           50                         push	ax
17457                                           ! Debug: list int = const $40 (used reg = )
17458 4102           B8                   0040  mov	ax,*$40
17459 4105           50                         push	ax
17460                                           ! Debug: func () void = write_byte+0 (used reg = )
17461 4106           E8         3B05            call	_write_byte
17462 4109           83C4                   06  add	sp,*6
17463                                           !BCC_EOS
17464                                           ! 2076  write_word(0x40,0xA8, video_save_pointer_table);
17465                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17466 410C           BB                   35FA  mov	bx,#_video_save_pointer_table
17467 410F           53                         push	bx
17468                                           ! Debug: list int = const $A8 (used reg = )
17469 4110           B8                   00A8  mov	ax,#$A8
17470 4113           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 4114           B8                   0040  mov	ax,*$40
17473 4117           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 4118           E8         3B0B            call	_write_word
17476 411B           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2077  write_word(0x40,0xA8 +2, 0xc000);
17479                                           ! Debug: list unsigned int = const $C000 (used reg = )
17480 411E           B8                   C000  mov	ax,#$C000
17481 4121           50                         push	ax
17482                                           ! Debug: list int = const $AA (used reg = )
17483 4122           B8                   00AA  mov	ax,#$AA
17484 4125           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 4126           B8                   0040  mov	ax,*$40
17487 4129           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 412A           E8         3AF9            call	_write_word
17490 412D           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2078  write_byte(0x40,0x65,0x00);
17493                                           ! Debug: list int = const 0 (used reg = )
17494 4130           31C0                       xor	ax,ax
17495 4132           50                         push	ax
17496                                           ! Debug: list int = const $65 (used reg = )
17497 4133           B8                   0065  mov	ax,*$65
17498 4136           50                         push	ax
17499                                           ! Debug: list int = const $40 (used reg = )
17500 4137           B8                   0040  mov	ax,*$40
17501 413A           50                         push	ax
17502                                           ! Debug: func () void = write_byte+0 (used reg = )
17503 413B           E8         3AD0            call	_write_byte
17504 413E           83C4                   06  add	sp,*6
17505                                           !BCC_EOS
17506                                           ! 2079  write_byte(0x40,0x66,0x00);
17507                                           ! Debug: list int = const 0 (used reg = )
17508 4141           31C0                       xor	ax,ax
17509 4143           50                         push	ax
17510                                           ! Debug: list int = const $66 (used reg = )
17511 4144           B8                   0066  mov	ax,*$66
17512 4147           50                         push	ax
17513                                           ! Debug: list int = const $40 (used reg = )
17514 4148           B8                   0040  mov	ax,*$40
17515 414B           50                         push	ax
17516                                           ! Debug: func () void = write_byte+0 (used reg = )
17517 414C           E8         3ABF            call	_write_byte
17518 414F           83C4                   06  add	sp,*6
17519                                           !BCC_EOS
17520                                           ! 2080  if(vga_modes[line].class==0x00)
17521                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17522 4152           8A46         FE            mov	al,-2[bp]
17523 4155           30E4                       xor	ah,ah
17524 4157           B1                     03  mov	cl,*3
17525 4159           D3E0                       shl	ax,cl
17526 415B           89C3                       mov	bx,ax
17527 415D           81C3                 01FD  add	bx,#_vga_modes
17528                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17529 4161           8A47         01            mov	al,1[bx]
17530 4164           84C0                       test	al,al
17531 4166           75           0E            jne 	.8B
17532                       00004168            .8C:
17533                                           ! 2081   {
17534                                           ! 2082    biosfn_set_cursor_shape(0x06,0x07);
17535                                           ! Debug: list int = const 7 (used reg = )
17536 4168           B8                   0007  mov	ax,*7
17537 416B           50                         push	ax
17538                                           ! Debug: list int = const 6 (used reg = )
17539 416C           B8                   0006  mov	ax,*6
17540 416F           50                         push	ax
17541                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17542 4170           E8         00BB            call	_biosfn_set_cursor_shape
17543 4173           83C4                   04  add	sp,*4
17544                                           !BCC_EOS
17545                                           ! 2083   }
17546                                           ! 2084  for(i=0;i<8;i++)
17547                       00004176            .8B:
17548                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17549 4176           31C0                       xor	ax,ax
17550 4178           8946         F6            mov	-$A[bp],ax
17551                                           !BCC_EOS
17552                                           !BCC_EOS
17553                                           ! 2085   biosfn_set_cursor_pos(i,0x0000);
17554 417B           EB           13            jmp .8F
17555                       0000417D            .90:
17556                                           ! Debug: list int = const 0 (used reg = )
17557 417D           31C0                       xor	ax,ax
17558 417F           50                         push	ax
17559                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17560 4180           FF76         F6            push	-$A[bp]
17561                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17562 4183           E8         01C3            call	_biosfn_set_cursor_pos
17563 4186           83C4                   04  add	sp,*4
17564                                           !BCC_EOS
17565                                           ! 2086  biosfn_set_active_page(0x00);
17566                       00004189            .8E:
17567                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17568 4189           8B46         F6            mov	ax,-$A[bp]
17569 418C           40                         inc	ax
17570 418D           8946         F6            mov	-$A[bp],ax
17571                       00004190            .8F:
17572                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17573 4190           8B46         F6            mov	ax,-$A[bp]
17574 4193           3D                   0008  cmp	ax,*8
17575 4196           72           E5            jb 	.90
17576                       00004198            .91:
17577                       00004198            .8D:
17578                                           ! Debug: list int = const 0 (used reg = )
17579 4198           31C0                       xor	ax,ax
17580 419A           50                         push	ax
17581                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17582 419B           E8         0320            call	_biosfn_set_active_page
17583 419E           44                         inc	sp
17584 419F           44                         inc	sp
17585                                           !BCC_EOS
17586                                           ! 2087  if(vga_modes[line].class==0x00)
17587                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17588 41A0           8A46         FE            mov	al,-2[bp]
17589 41A3           30E4                       xor	ah,ah
17590 41A5           B1                     03  mov	cl,*3
17591 41A7           D3E0                       shl	ax,cl
17592 41A9           89C3                       mov	bx,ax
17593 41AB           81C3                 01FD  add	bx,#_vga_modes
17594                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17595 41AF           8A47         01            mov	al,1[bx]
17596 41B2           84C0                       test	al,al
17597 41B4           75           0E            jne 	.92
17598                       000041B6            .93:
17599                                           ! 2088   {
17600                                           ! 2089 #asm
17601                                           !BCC_EOS
17602                                           !BCC_ASM
17603                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17604                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17605                       00000008            _biosfn_set_video_mode.theightm1	set	8
17606                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17607                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17608                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17609                       00000014            _biosfn_set_video_mode.line	set	$14
17610                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17611                       00000006            _biosfn_set_video_mode.cheight	set	6
17612                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17613                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17614                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17615                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17616                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17617                       0000000C            _biosfn_set_video_mode.i	set	$C
17618                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17619                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17620                       00000004            .biosfn_set_video_mode.mode	set	4
17621                       00000010            _biosfn_set_video_mode.palette	set	$10
17622                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17623                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17624                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17625                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17626                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17627                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17628                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17629                       00000013            _biosfn_set_video_mode.mmask	set	$13
17630                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17631                                             ;; copy and activate 8x16 font
17632 41B6           B8                   1104    mov ax, #0x1104
17633 41B9           B3                     00    mov bl, #0x00
17634 41BB           CD                     10    int #0x10
17635 41BD           B8                   1103    mov ax, #0x1103
17636 41C0           B3                     00    mov bl, #0x00
17637 41C2           CD                     10    int #0x10
17638                                           ! 2097 endasm
17639                                           !BCC_ENDASM
17640                                           !BCC_EOS
17641                                           ! 2098   }
17642                                           ! 2099 #asm
17643                       000041C4            .92:
17644                                           !BCC_EOS
17645                                           !BCC_ASM
17646                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17647                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17648                       00000008            _biosfn_set_video_mode.theightm1	set	8
17649                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17650                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17651                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17652                       00000014            _biosfn_set_video_mode.line	set	$14
17653                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17654                       00000006            _biosfn_set_video_mode.cheight	set	6
17655                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17656                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17657                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17658                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17659                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17660                       0000000C            _biosfn_set_video_mode.i	set	$C
17661                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17662                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17663                       00000004            .biosfn_set_video_mode.mode	set	4
17664                       00000010            _biosfn_set_video_mode.palette	set	$10
17665                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17666                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17667                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17668                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17669                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17670                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17671                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17672                       00000013            _biosfn_set_video_mode.mmask	set	$13
17673                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17674                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41C4           1E                           push ds
 +a   41C5           31C0                         xor ax, ax
 +a   41C7           8ED8                         mov ds, ax
 +a   41C9           B8                   1361    mov ax,  #_vgafont8+128*8
 +a   41CC           A3         007C              mov 0x1f*4, ax
 +a   41CF           B8                   C000    mov ax,  #0xC000
 +a   41D2           A3         007E              mov 0x1f*4+2, ax
 +a   41D5           1F                           pop ds
17675                                           ! 2101 endasm
17676                                           !BCC_ENDASM
17677                                           !BCC_EOS
17678                                           ! 2102   switch(cheight)
17679 41D6           8B46         F0            mov	ax,-$10[bp]
17680                                           ! 2103    {case 8:
17681 41D9           E9         003F            br 	.96
17682                                           ! 2104 #asm
17683                       000041DC            .97:
17684                                           !BCC_EOS
17685                                           !BCC_ASM
17686                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17687                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17688                       00000008            _biosfn_set_video_mode.theightm1	set	8
17689                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17690                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17691                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17692                       00000014            _biosfn_set_video_mode.line	set	$14
17693                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17694                       00000006            _biosfn_set_video_mode.cheight	set	6
17695                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17696                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17697                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17698                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17699                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17700                       0000000C            _biosfn_set_video_mode.i	set	$C
17701                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17702                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17703                       00000004            .biosfn_set_video_mode.mode	set	4
17704                       00000010            _biosfn_set_video_mode.palette	set	$10
17705                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17706                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17707                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17708                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17709                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17710                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17711                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17712                       00000013            _biosfn_set_video_mode.mmask	set	$13
17713                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17714                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41DC           1E                           push ds
 +a   41DD           31C0                         xor ax, ax
 +a   41DF           8ED8                         mov ds, ax
 +a   41E1           B8                   0F61    mov ax,  #_vgafont8
 +a   41E4           A3         010C              mov 0x43*4, ax
 +a   41E7           B8                   C000    mov ax,  #0xC000
 +a   41EA           A3         010E              mov 0x43*4+2, ax
 +a   41ED           1F                           pop ds
17715                                           ! 2106 endasm
17716                                           !BCC_ENDASM
17717                                           !BCC_EOS
17718                                           ! 2107      break;
17719 41EE           E9         0039            br 	.94
17720                                           !BCC_EOS
17721                                           ! 2108     case 14:
17722                                           ! 2109 #asm
17723                       000041F1            .98:
17724                                           !BCC_EOS
17725                                           !BCC_ASM
17726                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17727                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17728                       00000008            _biosfn_set_video_mode.theightm1	set	8
17729                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17730                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17731                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17732                       00000014            _biosfn_set_video_mode.line	set	$14
17733                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17734                       00000006            _biosfn_set_video_mode.cheight	set	6
17735                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17736                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17737                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17738                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17739                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17740                       0000000C            _biosfn_set_video_mode.i	set	$C
17741                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17742                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17743                       00000004            .biosfn_set_video_mode.mode	set	4
17744                       00000010            _biosfn_set_video_mode.palette	set	$10
17745                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17746                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17747                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17748                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17749                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17750                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17751                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17752                       00000013            _biosfn_set_video_mode.mmask	set	$13
17753                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17754                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41F1           1E                           push ds
 +a   41F2           31C0                         xor ax, ax
 +a   41F4           8ED8                         mov ds, ax
 +a   41F6           B8                   1761    mov ax,  #_vgafont14
 +a   41F9           A3         010C              mov 0x43*4, ax
 +a   41FC           B8                   C000    mov ax,  #0xC000
 +a   41FF           A3         010E              mov 0x43*4+2, ax
 +a   4202           1F                           pop ds
17755                                           ! 2111 endasm
17756                                           !BCC_ENDASM
17757                                           !BCC_EOS
17758                                           ! 2112      break;
17759 4203           EB           25            jmp .94
17760                                           !BCC_EOS
17761                                           ! 2113     case 16:
17762                                           ! 2114 #asm
17763                       00004205            .99:
17764                                           !BCC_EOS
17765                                           !BCC_ASM
17766                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17767                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17768                       00000008            _biosfn_set_video_mode.theightm1	set	8
17769                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17770                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17771                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17772                       00000014            _biosfn_set_video_mode.line	set	$14
17773                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17774                       00000006            _biosfn_set_video_mode.cheight	set	6
17775                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17776                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17777                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17778                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17779                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17780                       0000000C            _biosfn_set_video_mode.i	set	$C
17781                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17782                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17783                       00000004            .biosfn_set_video_mode.mode	set	4
17784                       00000010            _biosfn_set_video_mode.palette	set	$10
17785                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17786                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17787                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17788                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17789                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17790                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17791                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17792                       00000013            _biosfn_set_video_mode.mmask	set	$13
17793                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17794                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4205           1E                           push ds
 +a   4206           31C0                         xor ax, ax
 +a   4208           8ED8                         mov ds, ax
 +a   420A           B8                   2561    mov ax,  #_vgafont16
 +a   420D           A3         010C              mov 0x43*4, ax
 +a   4210           B8                   C000    mov ax,  #0xC000
 +a   4213           A3         010E              mov 0x43*4+2, ax
 +a   4216           1F                           pop ds
17795                                           ! 2116 endasm
17796                                           !BCC_ENDASM
17797                                           !BCC_EOS
17798                                           ! 2117      break;
17799 4217           EB           11            jmp .94
17800                                           !BCC_EOS
17801                                           ! 2118    }
17802                                           ! 2119 }
17803 4219           EB           0F            jmp .94
17804                       0000421B            .96:
17805 421B           2D                   0008  sub	ax,*8
17806 421E           74           BC            je 	.97
17807 4220           2D                   0006  sub	ax,*6
17808 4223           74           CC            je 	.98
17809 4225           2D                   0002  sub	ax,*2
17810 4228           74           DB            je 	.99
17811                       0000422A            .94:
17812                       FFFFFFE8            ..FFFD	=	-$18
17813 422A           89EC                       mov	sp,bp
17814 422C           5D                         pop	bp
17815 422D           C3                         ret
17816                                           ! 2120 static void biosfn_set_cursor_shape (CH,CL)
17817                                           ! Register BX used in function biosfn_set_video_mode
17818                                           ! 2121 Bit8u CH;Bit8u CL;
17819                       0000422E            _biosfn_set_cursor_shape:
17820                                           !BCC_EOS
17821                                           !BCC_EOS
17822                                           ! 2122 {Bit16u cheight,curs,crtc_addr;
17823                                           !BCC_EOS
17824                                           ! 2123  Bit8u modeset_ctl;
17825                                           !BCC_EOS
17826                                           ! 2124  CH&=0x3f;
17827 422E           55                         push	bp
17828 422F           89E5                       mov	bp,sp
17829 4231           83C4                   F8  add	sp,*-8
17830                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17831 4234           8A46         04            mov	al,4[bp]
17832 4237           24                     3F  and	al,*$3F
17833 4239           8846         04            mov	4[bp],al
17834                                           !BCC_EOS
17835                                           ! 2125  CL&=0x1f;
17836                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17837 423C           8A46         06            mov	al,6[bp]
17838 423F           24                     1F  and	al,*$1F
17839 4241           8846         06            mov	6[bp],al
17840                                           !BCC_EOS
17841                                           ! 2126  curs=(CH<<8)+CL;
17842                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17843 4244           8A46         04            mov	al,4[bp]
17844 4247           30E4                       xor	ah,ah
17845 4249           88C4                       mov	ah,al
17846 424B           30C0                       xor	al,al
17847                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17848 424D           0246         06            add	al,6[bp]
17849 4250           80D4                   00  adc	ah,*0
17850                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17851 4253           8946         FC            mov	-4[bp],ax
17852                                           !BCC_EOS
17853                                           ! 2127  write_word(0x40,0x60,curs);
17854                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17855 4256           FF76         FC            push	-4[bp]
17856                                           ! Debug: list int = const $60 (used reg = )
17857 4259           B8                   0060  mov	ax,*$60
17858 425C           50                         push	ax
17859                                           ! Debug: list int = const $40 (used reg = )
17860 425D           B8                   0040  mov	ax,*$40
17861 4260           50                         push	ax
17862                                           ! Debug: func () void = write_word+0 (used reg = )
17863 4261           E8         39C2            call	_write_word
17864 4264           83C4                   06  add	sp,*6
17865                                           !BCC_EOS
17866                                           ! 2128  modeset_ctl=read_byte(0x40,0x89);
17867                                           ! Debug: list int = const $89 (used reg = )
17868 4267           B8                   0089  mov	ax,#$89
17869 426A           50                         push	ax
17870                                           ! Debug: list int = const $40 (used reg = )
17871 426B           B8                   0040  mov	ax,*$40
17872 426E           50                         push	ax
17873                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17874 426F           E8         3976            call	_read_byte
17875 4272           83C4                   04  add	sp,*4
17876                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17877 4275           8846         F9            mov	-7[bp],al
17878                                           !BCC_EOS
17879                                           ! 2129  cheight = read_word(0x40,0x85);
17880                                           ! Debug: list int = const $85 (used reg = )
17881 4278           B8                   0085  mov	ax,#$85
17882 427B           50                         push	ax
17883                                           ! Debug: list int = const $40 (used reg = )
17884 427C           B8                   0040  mov	ax,*$40
17885 427F           50                         push	ax
17886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17887 4280           E8         3978            call	_read_word
17888 4283           83C4                   04  add	sp,*4
17889                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17890 4286           8946         FE            mov	-2[bp],ax
17891                                           !BCC_EOS
17892                                           ! 2130  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17893                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17894 4289           8A46         F9            mov	al,-7[bp]
17895 428C           24                     01  and	al,*1
17896 428E           84C0                       test	al,al
17897 4290           74           66            je  	.9A
17898                       00004292            .9E:
17899                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17900 4292           8B46         FE            mov	ax,-2[bp]
17901 4295           3D                   0008  cmp	ax,*8
17902 4298           76           5E            jbe 	.9A
17903                       0000429A            .9D:
17904                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17905 429A           8A46         06            mov	al,6[bp]
17906 429D           3C                     08  cmp	al,*8
17907 429F           73           57            jae 	.9A
17908                       000042A1            .9C:
17909                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17910 42A1           8A46         04            mov	al,4[bp]
17911 42A4           3C                     20  cmp	al,*$20
17912 42A6           73           50            jae 	.9A
17913                       000042A8            .9B:
17914                                           ! 2131   {
17915                                           ! 2132    if(CL!=(CH+1))
17916                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17917 42A8           8A46         04            mov	al,4[bp]
17918 42AB           30E4                       xor	ah,ah
17919                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17920                                           ! Debug: expression subtree swapping
17921 42AD           40                         inc	ax
17922 42AE           50                         push	ax
17923 42AF           8A46         06            mov	al,6[bp]
17924 42B2           30E4                       xor	ah,ah
17925 42B4           3B46         F6            cmp	ax,-$A[bp]
17926 42B7           8D66         F8            lea	sp,-8[bp]
17927 42BA           74           15            je  	.9F
17928                       000042BC            .A0:
17929                                           ! 2133     {
17930                                           ! 2134      CH = ((CH+1) * cheight / 8) -1;
17931                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17932 42BC           8A46         04            mov	al,4[bp]
17933 42BF           30E4                       xor	ah,ah
17934                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17935 42C1           40                         inc	ax
17936 42C2           8B4E         FE            mov	cx,-2[bp]
17937 42C5           F7E9                       imul	cx
17938                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17939 42C7           B1                     03  mov	cl,*3
17940 42C9           D3E8                       shr	ax,cl
17941                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17942                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17943 42CB           48                         dec	ax
17944 42CC           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2135     }
17947                                           ! 2136    else
17948                                           ! 2137     {
17949 42CF           EB           14            jmp .A1
17950                       000042D1            .9F:
17951                                           ! 2138      CH = ((CL+1) * cheight / 8) - 2;
17952                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42D1           8A46         06            mov	al,6[bp]
17954 42D4           30E4                       xor	ah,ah
17955                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17956 42D6           40                         inc	ax
17957 42D7           8B4E         FE            mov	cx,-2[bp]
17958 42DA           F7E9                       imul	cx
17959                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17960 42DC           B1                     03  mov	cl,*3
17961 42DE           D3E8                       shr	ax,cl
17962                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17963                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17964 42E0           48                         dec	ax
17965 42E1           48                         dec	ax
17966 42E2           8846         04            mov	4[bp],al
17967                                           !BCC_EOS
17968                                           ! 2139     }
17969                                           ! 2140    CL = ((CL+1) * cheight / 8) - 1;
17970                       000042E5            .A1:
17971                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17972 42E5           8A46         06            mov	al,6[bp]
17973 42E8           30E4                       xor	ah,ah
17974                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17975 42EA           40                         inc	ax
17976 42EB           8B4E         FE            mov	cx,-2[bp]
17977 42EE           F7E9                       imul	cx
17978                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17979 42F0           B1                     03  mov	cl,*3
17980 42F2           D3E8                       shr	ax,cl
17981                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17982                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17983 42F4           48                         dec	ax
17984 42F5           8846         06            mov	6[bp],al
17985                                           !BCC_EOS
17986                                           ! 2141   }
17987                                           ! 2142  crtc_addr=read_word(0x40,0x63);
17988                       000042F8            .9A:
17989                                           ! Debug: list int = const $63 (used reg = )
17990 42F8           B8                   0063  mov	ax,*$63
17991 42FB           50                         push	ax
17992                                           ! Debug: list int = const $40 (used reg = )
17993 42FC           B8                   0040  mov	ax,*$40
17994 42FF           50                         push	ax
17995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17996 4300           E8         38F8            call	_read_word
17997 4303           83C4                   04  add	sp,*4
17998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17999 4306           8946         FA            mov	-6[bp],ax
18000                                           !BCC_EOS
18001                                           ! 2143  outb(crtc_addr,0x0a);
18002                                           ! Debug: list int = const $A (used reg = )
18003 4309           B8                   000A  mov	ax,*$A
18004 430C           50                         push	ax
18005                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18006 430D           FF76         FA            push	-6[bp]
18007                                           ! Debug: func () void = outb+0 (used reg = )
18008 4310           E8         3941            call	_outb
18009 4313           83C4                   04  add	sp,*4
18010                                           !BCC_EOS
18011                                           ! 2144  outb(crtc_addr+1,CH);
18012                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18013 4316           8A46         04            mov	al,4[bp]
18014 4319           30E4                       xor	ah,ah
18015 431B           50                         push	ax
18016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18017 431C           8B46         FA            mov	ax,-6[bp]
18018                                           ! Debug: list unsigned int = ax+1 (used reg = )
18019 431F           40                         inc	ax
18020 4320           50                         push	ax
18021                                           ! Debug: func () void = outb+0 (used reg = )
18022 4321           E8         3930            call	_outb
18023 4324           83C4                   04  add	sp,*4
18024                                           !BCC_EOS
18025                                           ! 2145  outb(crtc_addr,0x0b);
18026                                           ! Debug: list int = const $B (used reg = )
18027 4327           B8                   000B  mov	ax,*$B
18028 432A           50                         push	ax
18029                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18030 432B           FF76         FA            push	-6[bp]
18031                                           ! Debug: func () void = outb+0 (used reg = )
18032 432E           E8         3923            call	_outb
18033 4331           83C4                   04  add	sp,*4
18034                                           !BCC_EOS
18035                                           ! 2146  outb(crtc_addr+1,CL);
18036                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18037 4334           8A46         06            mov	al,6[bp]
18038 4337           30E4                       xor	ah,ah
18039 4339           50                         push	ax
18040                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18041 433A           8B46         FA            mov	ax,-6[bp]
18042                                           ! Debug: list unsigned int = ax+1 (used reg = )
18043 433D           40                         inc	ax
18044 433E           50                         push	ax
18045                                           ! Debug: func () void = outb+0 (used reg = )
18046 433F           E8         3912            call	_outb
18047 4342           83C4                   04  add	sp,*4
18048                                           !BCC_EOS
18049                                           ! 2147 }
18050 4345           89EC                       mov	sp,bp
18051 4347           5D                         pop	bp
18052 4348           C3                         ret
18053                                           ! 2148 static void biosfn_set_cursor_pos (page, cursor)
18054                                           ! 2149 Bit8u page;Bit16u cursor;
18055                       00004349            _biosfn_set_cursor_pos:
18056                                           !BCC_EOS
18057                                           !BCC_EOS
18058                                           ! 2150 {
18059                                           ! 2151  Bit8u xcurs,ycurs,current;
18060                                           !BCC_EOS
18061                                           ! 2152  Bit16u nbcols,nbrows,address,crtc_addr;
18062                                           !BCC_EOS
18063                                           ! 2153  if(page>7)return;
18064 4349           55                         push	bp
18065 434A           89E5                       mov	bp,sp
18066 434C           83C4                   F4  add	sp,*-$C
18067                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18068 434F           8A46         04            mov	al,4[bp]
18069 4352           3C                     07  cmp	al,*7
18070 4354           76           04            jbe 	.A2
18071                       00004356            .A3:
18072 4356           89EC                       mov	sp,bp
18073 4358           5D                         pop	bp
18074 4359           C3                         ret
18075                                           !BCC_EOS
18076                                           ! 2154  write_word(0x40, 0x50 +2*page, cursor);
18077                       0000435A            .A2:
18078                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18079 435A           FF76         06            push	6[bp]
18080                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18081                                           ! Debug: expression subtree swapping
18082 435D           8A46         04            mov	al,4[bp]
18083 4360           30E4                       xor	ah,ah
18084 4362           D1E0                       shl	ax,*1
18085                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18086                                           ! Debug: expression subtree swapping
18087                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18088 4364           05                   0050  add	ax,*$50
18089 4367           50                         push	ax
18090                                           ! Debug: list int = const $40 (used reg = )
18091 4368           B8                   0040  mov	ax,*$40
18092 436B           50                         push	ax
18093                                           ! Debug: func () void = write_word+0 (used reg = )
18094 436C           E8         38B7            call	_write_word
18095 436F           83C4                   06  add	sp,*6
18096                                           !BCC_EOS
18097                                           ! 2155  current=read_byte(0x40,0x62);
18098                                           ! Debug: list int = const $62 (used reg = )
18099 4372           B8                   0062  mov	ax,*$62
18100 4375           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 4376           B8                   0040  mov	ax,*$40
18103 4379           50                         push	ax
18104                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18105 437A           E8         386B            call	_read_byte
18106 437D           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18108 4380           8846         FD            mov	-3[bp],al
18109                                           !BCC_EOS
18110                                           ! 2156  if(page==current)
18111                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18112 4383           8A46         04            mov	al,4[bp]
18113 4386           3A46         FD            cmp	al,-3[bp]
18114 4389         0F85         00B8            bne 	.A4
18115                       0000438D            .A5:
18116                                           ! 2157   {
18117                                           ! 2158    nbcols=read_word(0x40,0x4A);
18118                                           ! Debug: list int = const $4A (used reg = )
18119 438D           B8                   004A  mov	ax,*$4A
18120 4390           50                         push	ax
18121                                           ! Debug: list int = const $40 (used reg = )
18122 4391           B8                   0040  mov	ax,*$40
18123 4394           50                         push	ax
18124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18125 4395           E8         3863            call	_read_word
18126 4398           83C4                   04  add	sp,*4
18127                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18128 439B           8946         FA            mov	-6[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2159    nbrows=read_byte(0x40,0x84)+1;
18131                                           ! Debug: list int = const $84 (used reg = )
18132 439E           B8                   0084  mov	ax,#$84
18133 43A1           50                         push	ax
18134                                           ! Debug: list int = const $40 (used reg = )
18135 43A2           B8                   0040  mov	ax,*$40
18136 43A5           50                         push	ax
18137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18138 43A6           E8         383F            call	_read_byte
18139 43A9           83C4                   04  add	sp,*4
18140                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18141 43AC           30E4                       xor	ah,ah
18142                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18143 43AE           40                         inc	ax
18144 43AF           8946         F8            mov	-8[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2160    xcurs=cursor&0x00ff;ycurs=(cursor
18147                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18148 43B2           8A46         06            mov	al,6[bp]
18149                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18150 43B5           8846         FF            mov	-1[bp],al
18151                                           !BCC_EOS
18152                                           ! 2160 &0xff00)>>8;
18153                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18154 43B8           8B46         06            mov	ax,6[bp]
18155 43BB           30C0                       xor	al,al
18156                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18157 43BD           88E0                       mov	al,ah
18158 43BF           30E4                       xor	ah,ah
18159                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18160 43C1           8846         FE            mov	-2[bp],al
18161                                           !BCC_EOS
18162                                           ! 2161    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18163                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18164 43C4           8A46         FE            mov	al,-2[bp]
18165 43C7           30E4                       xor	ah,ah
18166 43C9           8B4E         FA            mov	cx,-6[bp]
18167 43CC           F7E9                       imul	cx
18168 43CE           50                         push	ax
18169                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18170 43CF           8B46         FA            mov	ax,-6[bp]
18171 43D2           8B4E         F8            mov	cx,-8[bp]
18172 43D5           F7E9                       imul	cx
18173                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18174 43D7           0C                     FF  or	al,#$FF
18175                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18176                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18177 43D9           89C3                       mov	bx,ax
18178 43DB           8A46         04            mov	al,4[bp]
18179 43DE           30E4                       xor	ah,ah
18180 43E0           93                         xchg	ax,bx
18181 43E1           40                         inc	ax
18182 43E2           89D9                       mov	cx,bx
18183 43E4           F7E9                       imul	cx
18184                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18185 43E6           0246         FF            add	al,-1[bp]
18186 43E9           80D4                   00  adc	ah,*0
18187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18188 43EC           0346         F2            add	ax,-$E[bp]
18189 43EF           44                         inc	sp
18190 43F0           44                         inc	sp
18191                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18192 43F1           8946         F6            mov	-$A[bp],ax
18193                                           !BCC_EOS
18194                                           ! 2162    crtc_addr=read_word(0x40,0x63);
18195                                           ! Debug: list int = const $63 (used reg = )
18196 43F4           B8                   0063  mov	ax,*$63
18197 43F7           50                         push	ax
18198                                           ! Debug: list int = const $40 (used reg = )
18199 43F8           B8                   0040  mov	ax,*$40
18200 43FB           50                         push	ax
18201                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18202 43FC           E8         37FC            call	_read_word
18203 43FF           83C4                   04  add	sp,*4
18204                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18205 4402           8946         F4            mov	-$C[bp],ax
18206                                           !BCC_EOS
18207                                           ! 2163    outb(crtc_addr,0x0e);
18208                                           ! Debug: list int = const $E (used reg = )
18209 4405           B8                   000E  mov	ax,*$E
18210 4408           50                         push	ax
18211                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18212 4409           FF76         F4            push	-$C[bp]
18213                                           ! Debug: func () void = outb+0 (used reg = )
18214 440C           E8         3845            call	_outb
18215 440F           83C4                   04  add	sp,*4
18216                                           !BCC_EOS
18217                                           ! 2164    outb(crtc_addr+1,(address&0xff00)>>8);
18218                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18219 4412           8B46         F6            mov	ax,-$A[bp]
18220 4415           30C0                       xor	al,al
18221                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18222 4417           88E0                       mov	al,ah
18223 4419           30E4                       xor	ah,ah
18224                                           ! Debug: list unsigned int = ax+0 (used reg = )
18225 441B           50                         push	ax
18226                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18227 441C           8B46         F4            mov	ax,-$C[bp]
18228                                           ! Debug: list unsigned int = ax+1 (used reg = )
18229 441F           40                         inc	ax
18230 4420           50                         push	ax
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 4421           E8         3830            call	_outb
18233 4424           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2165    outb(crtc_addr,0x0f);
18236                                           ! Debug: list int = const $F (used reg = )
18237 4427           B8                   000F  mov	ax,*$F
18238 442A           50                         push	ax
18239                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18240 442B           FF76         F4            push	-$C[bp]
18241                                           ! Debug: func () void = outb+0 (used reg = )
18242 442E           E8         3823            call	_outb
18243 4431           83C4                   04  add	sp,*4
18244                                           !BCC_EOS
18245                                           ! 2166    outb(crtc_addr+1,address&0x00ff);
18246                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18247 4434           8A46         F6            mov	al,-$A[bp]
18248                                           ! Debug: list unsigned char = al+0 (used reg = )
18249 4437           30E4                       xor	ah,ah
18250 4439           50                         push	ax
18251                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18252 443A           8B46         F4            mov	ax,-$C[bp]
18253                                           ! Debug: list unsigned int = ax+1 (used reg = )
18254 443D           40                         inc	ax
18255 443E           50                         push	ax
18256                                           ! Debug: func () void = outb+0 (used reg = )
18257 443F           E8         3812            call	_outb
18258 4442           83C4                   04  add	sp,*4
18259                                           !BCC_EOS
18260                                           ! 2167   }
18261                                           ! 2168 }
18262                       00004445            .A4:
18263 4445           89EC                       mov	sp,bp
18264 4447           5D                         pop	bp
18265 4448           C3                         ret
18266                                           ! 2169 static void biosfn_get_cursor_pos (page,shape, pos)
18267                                           ! Register BX used in function biosfn_set_cursor_pos
18268                                           ! 2170 Bit8u page;Bit16u *shape;Bit16u *pos;
18269                       00004449            _biosfn_get_cursor_pos:
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           !BCC_EOS
18273                                           ! 2171 {
18274                                           ! 2172  Bit16u ss=get_SS();
18275 4449           55                         push	bp
18276 444A           89E5                       mov	bp,sp
18277 444C           4C                         dec	sp
18278 444D           4C                         dec	sp
18279                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18280 444E           E8         3823            call	_get_SS
18281                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18282 4451           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2173  write_word(ss, shape, 0);
18285                                           ! Debug: list int = const 0 (used reg = )
18286 4454           31C0                       xor	ax,ax
18287 4456           50                         push	ax
18288                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18289 4457           FF76         06            push	6[bp]
18290                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18291 445A           FF76         FE            push	-2[bp]
18292                                           ! Debug: func () void = write_word+0 (used reg = )
18293 445D           E8         37C6            call	_write_word
18294 4460           83C4                   06  add	sp,*6
18295                                           !BCC_EOS
18296                                           ! 2174  write_word(ss, pos, 0);
18297                                           ! Debug: list int = const 0 (used reg = )
18298 4463           31C0                       xor	ax,ax
18299 4465           50                         push	ax
18300                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18301 4466           FF76         08            push	8[bp]
18302                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18303 4469           FF76         FE            push	-2[bp]
18304                                           ! Debug: func () void = write_word+0 (used reg = )
18305 446C           E8         37B7            call	_write_word
18306 446F           83C4                   06  add	sp,*6
18307                                           !BCC_EOS
18308                                           ! 2175  if(page>7)return;
18309                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18310 4472           8A46         04            mov	al,4[bp]
18311 4475           3C                     07  cmp	al,*7
18312 4477           76           04            jbe 	.A6
18313                       00004479            .A7:
18314 4479           89EC                       mov	sp,bp
18315 447B           5D                         pop	bp
18316 447C           C3                         ret
18317                                           !BCC_EOS
18318                                           ! 2176  write_word(ss,shape,read_word(0x40,0x60));
18319                       0000447D            .A6:
18320                                           ! Debug: list int = const $60 (used reg = )
18321 447D           B8                   0060  mov	ax,*$60
18322 4480           50                         push	ax
18323                                           ! Debug: list int = const $40 (used reg = )
18324 4481           B8                   0040  mov	ax,*$40
18325 4484           50                         push	ax
18326                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18327 4485           E8         3773            call	_read_word
18328 4488           83C4                   04  add	sp,*4
18329                                           ! Debug: list unsigned short = ax+0 (used reg = )
18330 448B           50                         push	ax
18331                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18332 448C           FF76         06            push	6[bp]
18333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18334 448F           FF76         FE            push	-2[bp]
18335                                           ! Debug: func () void = write_word+0 (used reg = )
18336 4492           E8         3791            call	_write_word
18337 4495           83C4                   06  add	sp,*6
18338                                           !BCC_EOS
18339                                           ! 2177  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18340                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18341 4498           8A46         04            mov	al,4[bp]
18342 449B           30E4                       xor	ah,ah
18343 449D           D1E0                       shl	ax,*1
18344                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18345                                           ! Debug: expression subtree swapping
18346                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18347 449F           05                   0050  add	ax,*$50
18348 44A2           50                         push	ax
18349                                           ! Debug: list int = const $40 (used reg = )
18350 44A3           B8                   0040  mov	ax,*$40
18351 44A6           50                         push	ax
18352                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18353 44A7           E8         3751            call	_read_word
18354 44AA           83C4                   04  add	sp,*4
18355                                           ! Debug: list unsigned short = ax+0 (used reg = )
18356 44AD           50                         push	ax
18357                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18358 44AE           FF76         08            push	8[bp]
18359                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18360 44B1           FF76         FE            push	-2[bp]
18361                                           ! Debug: func () void = write_word+0 (used reg = )
18362 44B4           E8         376F            call	_write_word
18363 44B7           83C4                   06  add	sp,*6
18364                                           !BCC_EOS
18365                                           ! 2178 }
18366 44BA           89EC                       mov	sp,bp
18367 44BC           5D                         pop	bp
18368 44BD           C3                         ret
18369                                           ! 2179 static void biosfn_set_active_page (page)
18370                                           ! 2180 Bit8u page;
18371                       000044BE            _biosfn_set_active_page:
18372                                           !BCC_EOS
18373                                           ! 2181 {
18374                                           ! 2182  Bit16u cursor,dummy,crtc_addr;
18375                                           !BCC_EOS
18376                                           ! 2183  Bit16u nbcols,nbrows,address;
18377                                           !BCC_EOS
18378                                           ! 2184  Bit8u mode,line;
18379                                           !BCC_EOS
18380                                           ! 2185  if(page>7)return;
18381 44BE           55                         push	bp
18382 44BF           89E5                       mov	bp,sp
18383 44C1           83C4                   F2  add	sp,*-$E
18384                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18385 44C4           8A46         04            mov	al,4[bp]
18386 44C7           3C                     07  cmp	al,*7
18387 44C9           76           04            jbe 	.A8
18388                       000044CB            .A9:
18389 44CB           89EC                       mov	sp,bp
18390 44CD           5D                         pop	bp
18391 44CE           C3                         ret
18392                                           !BCC_EOS
18393                                           ! 2186  mode=read_byte(0x40,0x49);
18394                       000044CF            .A8:
18395                                           ! Debug: list int = const $49 (used reg = )
18396 44CF           B8                   0049  mov	ax,*$49
18397 44D2           50                         push	ax
18398                                           ! Debug: list int = const $40 (used reg = )
18399 44D3           B8                   0040  mov	ax,*$40
18400 44D6           50                         push	ax
18401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18402 44D7           E8         370E            call	_read_byte
18403 44DA           83C4                   04  add	sp,*4
18404                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18405 44DD           8846         F3            mov	-$D[bp],al
18406                                           !BCC_EOS
18407                                           ! 2187  line=find_vga_entry(mode);
18408                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18409 44E0           8A46         F3            mov	al,-$D[bp]
18410 44E3           30E4                       xor	ah,ah
18411 44E5           50                         push	ax
18412                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18413 44E6           E8         3613            call	_find_vga_entry
18414 44E9           44                         inc	sp
18415 44EA           44                         inc	sp
18416                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18417 44EB           8846         F2            mov	-$E[bp],al
18418                                           !BCC_EOS
18419                                           ! 2188  if(line==0xFF)return;
18420                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18421 44EE           8A46         F2            mov	al,-$E[bp]
18422 44F1           3C                     FF  cmp	al,#$FF
18423 44F3           75           04            jne 	.AA
18424                       000044F5            .AB:
18425 44F5           89EC                       mov	sp,bp
18426 44F7           5D                         pop	bp
18427 44F8           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2189  biosfn_get_cursor_pos(page,&dummy,&cursor);
18430                       000044F9            .AA:
18431                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18432 44F9           8D5E         FE            lea	bx,-2[bp]
18433 44FC           53                         push	bx
18434                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18435 44FD           8D5E         FC            lea	bx,-4[bp]
18436 4500           53                         push	bx
18437                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18438 4501           8A46         04            mov	al,4[bp]
18439 4504           30E4                       xor	ah,ah
18440 4506           50                         push	ax
18441                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18442 4507           E8         FF3F            call	_biosfn_get_cursor_pos
18443 450A           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2190  if(vga_modes[line].class==0x00)
18446                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18447 450D           8A46         F2            mov	al,-$E[bp]
18448 4510           30E4                       xor	ah,ah
18449 4512           B1                     03  mov	cl,*3
18450 4514           D3E0                       shl	ax,cl
18451 4516           89C3                       mov	bx,ax
18452 4518           81C3                 01FD  add	bx,#_vga_modes
18453                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18454 451C           8A47         01            mov	al,1[bx]
18455 451F           84C0                       test	al,al
18456 4521           75           6E            jne 	.AC
18457                       00004523            .AD:
18458                                           ! 2191   {
18459                                           ! 2192    nbcols=read_word(0x40,0x4A);
18460                                           ! Debug: list int = const $4A (used reg = )
18461 4523           B8                   004A  mov	ax,*$4A
18462 4526           50                         push	ax
18463                                           ! Debug: list int = const $40 (used reg = )
18464 4527           B8                   0040  mov	ax,*$40
18465 452A           50                         push	ax
18466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18467 452B           E8         36CD            call	_read_word
18468 452E           83C4                   04  add	sp,*4
18469                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18470 4531           8946         F8            mov	-8[bp],ax
18471                                           !BCC_EOS
18472                                           ! 2193    nbrows=read_byte(0x40,0x84)+1;
18473                                           ! Debug: list int = const $84 (used reg = )
18474 4534           B8                   0084  mov	ax,#$84
18475 4537           50                         push	ax
18476                                           ! Debug: list int = const $40 (used reg = )
18477 4538           B8                   0040  mov	ax,*$40
18478 453B           50                         push	ax
18479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18480 453C           E8         36A9            call	_read_byte
18481 453F           83C4                   04  add	sp,*4
18482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18483 4542           30E4                       xor	ah,ah
18484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18485 4544           40                         inc	ax
18486 4545           8946         F6            mov	-$A[bp],ax
18487                                           !BCC_EOS
18488                                           ! 2194    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18489                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18490 4548           8B46         F8            mov	ax,-8[bp]
18491 454B           8B4E         F6            mov	cx,-$A[bp]
18492 454E           F7E9                       imul	cx
18493                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18494 4550           D1E0                       shl	ax,*1
18495                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18496 4552           0C                     FF  or	al,#$FF
18497                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18498                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18499 4554           89C3                       mov	bx,ax
18500 4556           8A46         04            mov	al,4[bp]
18501 4559           30E4                       xor	ah,ah
18502 455B           93                         xchg	ax,bx
18503 455C           40                         inc	ax
18504 455D           89D9                       mov	cx,bx
18505 455F           F7E9                       imul	cx
18506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18507 4561           8946         F4            mov	-$C[bp],ax
18508                                           !BCC_EOS
18509                                           ! 2195    write_word(0x40,0x4E,address);
18510                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18511 4564           FF76         F4            push	-$C[bp]
18512                                           ! Debug: list int = const $4E (used reg = )
18513 4567           B8                   004E  mov	ax,*$4E
18514 456A           50                         push	ax
18515                                           ! Debug: list int = const $40 (used reg = )
18516 456B           B8                   0040  mov	ax,*$40
18517 456E           50                         push	ax
18518                                           ! Debug: func () void = write_word+0 (used reg = )
18519 456F           E8         36B4            call	_write_word
18520 4572           83C4                   06  add	sp,*6
18521                                           !BCC_EOS
18522                                           ! 2196    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18523                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18524 4575           8B46         F8            mov	ax,-8[bp]
18525 4578           8B4E         F6            mov	cx,-$A[bp]
18526 457B           F7E9                       imul	cx
18527                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18528 457D           0C                     FF  or	al,#$FF
18529                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18530                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18531 457F           89C3                       mov	bx,ax
18532 4581           8A46         04            mov	al,4[bp]
18533 4584           30E4                       xor	ah,ah
18534 4586           93                         xchg	ax,bx
18535 4587           40                         inc	ax
18536 4588           89D9                       mov	cx,bx
18537 458A           F7E9                       imul	cx
18538                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18539 458C           8946         F4            mov	-$C[bp],ax
18540                                           !BCC_EOS
18541                                           ! 2197   }
18542                                           ! 2198  else
18543                                           ! 2199   {
18544 458F           EB           24            jmp .AE
18545                       00004591            .AC:
18546                                           ! 2200    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18547                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18548 4591           8A46         F2            mov	al,-$E[bp]
18549 4594           30E4                       xor	ah,ah
18550 4596           89C3                       mov	bx,ax
18551                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18552 4598           8A87       027D            mov	al,_line_to_vpti[bx]
18553 459C           30E4                       xor	ah,ah
18554 459E           B1                     06  mov	cl,*6
18555 45A0           D3E0                       shl	ax,cl
18556 45A2           89C3                       mov	bx,ax
18557 45A4           81C3                 0291  add	bx,#_video_param_table
18558                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18559                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18560                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18561 45A8           8A46         04            mov	al,4[bp]
18562 45AB           30E4                       xor	ah,ah
18563 45AD           8B4F         03            mov	cx,3[bx]
18564 45B0           F7E9                       imul	cx
18565                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18566 45B2           8946         F4            mov	-$C[bp],ax
18567                                           !BCC_EOS
18568                                           ! 2201   }
18569                                           ! 2202  crtc_addr=read_word(0x40,0x63);
18570                       000045B5            .AE:
18571                                           ! Debug: list int = const $63 (used reg = )
18572 45B5           B8                   0063  mov	ax,*$63
18573 45B8           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 45B9           B8                   0040  mov	ax,*$40
18576 45BC           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 45BD           E8         363B            call	_read_word
18579 45C0           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18581 45C3           8946         FA            mov	-6[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2203  outb(crtc_addr,0x0c);
18584                                           ! Debug: list int = const $C (used reg = )
18585 45C6           B8                   000C  mov	ax,*$C
18586 45C9           50                         push	ax
18587                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18588 45CA           FF76         FA            push	-6[bp]
18589                                           ! Debug: func () void = outb+0 (used reg = )
18590 45CD           E8         3684            call	_outb
18591 45D0           83C4                   04  add	sp,*4
18592                                           !BCC_EOS
18593                                           ! 2204  outb(crtc_addr+1,(address&0xff00)>>8);
18594                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18595 45D3           8B46         F4            mov	ax,-$C[bp]
18596 45D6           30C0                       xor	al,al
18597                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18598 45D8           88E0                       mov	al,ah
18599 45DA           30E4                       xor	ah,ah
18600                                           ! Debug: list unsigned int = ax+0 (used reg = )
18601 45DC           50                         push	ax
18602                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18603 45DD           8B46         FA            mov	ax,-6[bp]
18604                                           ! Debug: list unsigned int = ax+1 (used reg = )
18605 45E0           40                         inc	ax
18606 45E1           50                         push	ax
18607                                           ! Debug: func () void = outb+0 (used reg = )
18608 45E2           E8         366F            call	_outb
18609 45E5           83C4                   04  add	sp,*4
18610                                           !BCC_EOS
18611                                           ! 2205  outb(crtc_addr,0x0d);
18612                                           ! Debug: list int = const $D (used reg = )
18613 45E8           B8                   000D  mov	ax,*$D
18614 45EB           50                         push	ax
18615                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18616 45EC           FF76         FA            push	-6[bp]
18617                                           ! Debug: func () void = outb+0 (used reg = )
18618 45EF           E8         3662            call	_outb
18619 45F2           83C4                   04  add	sp,*4
18620                                           !BCC_EOS
18621                                           ! 2206  outb(crtc_addr+1,address&0x00ff);
18622                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18623 45F5           8A46         F4            mov	al,-$C[bp]
18624                                           ! Debug: list unsigned char = al+0 (used reg = )
18625 45F8           30E4                       xor	ah,ah
18626 45FA           50                         push	ax
18627                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18628 45FB           8B46         FA            mov	ax,-6[bp]
18629                                           ! Debug: list unsigned int = ax+1 (used reg = )
18630 45FE           40                         inc	ax
18631 45FF           50                         push	ax
18632                                           ! Debug: func () void = outb+0 (used reg = )
18633 4600           E8         3651            call	_outb
18634 4603           83C4                   04  add	sp,*4
18635                                           !BCC_EOS
18636                                           ! 2207  write_byte(0x40,0x62,page);
18637                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18638 4606           8A46         04            mov	al,4[bp]
18639 4609           30E4                       xor	ah,ah
18640 460B           50                         push	ax
18641                                           ! Debug: list int = const $62 (used reg = )
18642 460C           B8                   0062  mov	ax,*$62
18643 460F           50                         push	ax
18644                                           ! Debug: list int = const $40 (used reg = )
18645 4610           B8                   0040  mov	ax,*$40
18646 4613           50                         push	ax
18647                                           ! Debug: func () void = write_byte+0 (used reg = )
18648 4614           E8         35F7            call	_write_byte
18649 4617           83C4                   06  add	sp,*6
18650                                           !BCC_EOS
18651                                           ! 2208  biosfn_set_cursor_pos(page,cursor);
18652                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18653 461A           FF76         FE            push	-2[bp]
18654                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18655 461D           8A46         04            mov	al,4[bp]
18656 4620           30E4                       xor	ah,ah
18657 4622           50                         push	ax
18658                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18659 4623           E8         FD23            call	_biosfn_set_cursor_pos
18660 4626           83C4                   04  add	sp,*4
18661                                           !BCC_EOS
18662                                           ! 2209 }
18663 4629           89EC                       mov	sp,bp
18664 462B           5D                         pop	bp
18665 462C           C3                         ret
18666                                           ! 2210 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18667                                           ! Register BX used in function biosfn_set_active_page
18668                                           ! 2211 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18669                       0000462D            _vgamem_copy_pl4:
18670                                           !BCC_EOS
18671                                           !BCC_EOS
18672                                           !BCC_EOS
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           ! 2212 {
18677                                           ! 2213  Bit16u src,dest;
18678                                           !BCC_EOS
18679                                           ! 2214  Bit8u i;
18680                                           !BCC_EOS
18681                                           ! 2215  src=ysrc*cheight*nbcols+xstart;
18682 462D           55                         push	bp
18683 462E           89E5                       mov	bp,sp
18684 4630           83C4                   FA  add	sp,*-6
18685                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18686 4633           8A46         0E            mov	al,$E[bp]
18687 4636           30E4                       xor	ah,ah
18688 4638           89C3                       mov	bx,ax
18689 463A           8A46         06            mov	al,6[bp]
18690 463D           30E4                       xor	ah,ah
18691 463F           89D9                       mov	cx,bx
18692 4641           F7E9                       imul	cx
18693                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18694 4643           89C3                       mov	bx,ax
18695 4645           8A46         0C            mov	al,$C[bp]
18696 4648           30E4                       xor	ah,ah
18697 464A           93                         xchg	ax,bx
18698 464B           89D9                       mov	cx,bx
18699 464D           F7E9                       imul	cx
18700                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18701 464F           0246         04            add	al,4[bp]
18702 4652           80D4                   00  adc	ah,*0
18703                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18704 4655           8946         FE            mov	-2[bp],ax
18705                                           !BCC_EOS
18706                                           ! 2216  dest=ydest*cheight*nbcols+xstart;
18707                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18708 4658           8A46         0E            mov	al,$E[bp]
18709 465B           30E4                       xor	ah,ah
18710 465D           89C3                       mov	bx,ax
18711 465F           8A46         08            mov	al,8[bp]
18712 4662           30E4                       xor	ah,ah
18713 4664           89D9                       mov	cx,bx
18714 4666           F7E9                       imul	cx
18715                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18716 4668           89C3                       mov	bx,ax
18717 466A           8A46         0C            mov	al,$C[bp]
18718 466D           30E4                       xor	ah,ah
18719 466F           93                         xchg	ax,bx
18720 4670           89D9                       mov	cx,bx
18721 4672           F7E9                       imul	cx
18722                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18723 4674           0246         04            add	al,4[bp]
18724 4677           80D4                   00  adc	ah,*0
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18726 467A           8946         FC            mov	-4[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2217  outw(0x3ce, 0x0105);
18729                                           ! Debug: list int = const $105 (used reg = )
18730 467D           B8                   0105  mov	ax,#$105
18731 4680           50                         push	ax
18732                                           ! Debug: list int = const $3CE (used reg = )
18733 4681           B8                   03CE  mov	ax,#$3CE
18734 4684           50                         push	ax
18735                                           ! Debug: func () void = outw+0 (used reg = )
18736 4685           E8         35DC            call	_outw
18737 4688           83C4                   04  add	sp,*4
18738                                           !BCC_EOS
18739                                           ! 2218  for(i=0;i<cheight;i++)
18740                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18741 468B           30C0                       xor	al,al
18742 468D           8846         FB            mov	-5[bp],al
18743                                           !BCC_EOS
18744                                           !BCC_EOS
18745                                           ! 2219   {
18746 4690           EB           43            jmp .B1
18747                       00004692            .B2:
18748                                           ! 2220    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18749                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18750 4692           8A46         0A            mov	al,$A[bp]
18751 4695           30E4                       xor	ah,ah
18752 4697           50                         push	ax
18753                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18754 4698           8A46         0C            mov	al,$C[bp]
18755 469B           30E4                       xor	ah,ah
18756 469D           89C3                       mov	bx,ax
18757 469F           8A46         FB            mov	al,-5[bp]
18758 46A2           30E4                       xor	ah,ah
18759 46A4           89D9                       mov	cx,bx
18760 46A6           F7E9                       imul	cx
18761                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18762                                           ! Debug: expression subtree swapping
18763 46A8           0346         FE            add	ax,-2[bp]
18764                                           ! Debug: list unsigned int = ax+0 (used reg = )
18765 46AB           50                         push	ax
18766                                           ! Debug: list unsigned int = const $A000 (used reg = )
18767 46AC           B8                   A000  mov	ax,#$A000
18768 46AF           50                         push	ax
18769                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18770 46B0           8A46         0C            mov	al,$C[bp]
18771 46B3           30E4                       xor	ah,ah
18772 46B5           89C3                       mov	bx,ax
18773 46B7           8A46         FB            mov	al,-5[bp]
18774 46BA           30E4                       xor	ah,ah
18775 46BC           89D9                       mov	cx,bx
18776 46BE           F7E9                       imul	cx
18777                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18778                                           ! Debug: expression subtree swapping
18779 46C0           0346         FC            add	ax,-4[bp]
18780                                           ! Debug: list unsigned int = ax+0 (used reg = )
18781 46C3           50                         push	ax
18782                                           ! Debug: list unsigned int = const $A000 (used reg = )
18783 46C4           B8                   A000  mov	ax,#$A000
18784 46C7           50                         push	ax
18785                                           ! Debug: func () void = memcpyb+0 (used reg = )
18786 46C8           E8         34BD            call	_memcpyb
18787 46CB           83C4                   0A  add	sp,*$A
18788                                           !BCC_EOS
18789                                           ! 2221   }
18790                                           ! 2222  outw(0x3ce, 0x0005);
18791                       000046CE            .B0:
18792                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18793 46CE           8A46         FB            mov	al,-5[bp]
18794 46D1           40                         inc	ax
18795 46D2           8846         FB            mov	-5[bp],al
18796                       000046D5            .B1:
18797                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18798 46D5           8A46         FB            mov	al,-5[bp]
18799 46D8           3A46         0E            cmp	al,$E[bp]
18800 46DB           72           B5            jb 	.B2
18801                       000046DD            .B3:
18802                       000046DD            .AF:
18803                                           ! Debug: list int = const 5 (used reg = )
18804 46DD           B8                   0005  mov	ax,*5
18805 46E0           50                         push	ax
18806                                           ! Debug: list int = const $3CE (used reg = )
18807 46E1           B8                   03CE  mov	ax,#$3CE
18808 46E4           50                         push	ax
18809                                           ! Debug: func () void = outw+0 (used reg = )
18810 46E5           E8         357C            call	_outw
18811 46E8           83C4                   04  add	sp,*4
18812                                           !BCC_EOS
18813                                           ! 2223 }
18814 46EB           89EC                       mov	sp,bp
18815 46ED           5D                         pop	bp
18816 46EE           C3                         ret
18817                                           ! 2224 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18818                                           ! Register BX used in function vgamem_copy_pl4
18819                                           ! 2225 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18820                       000046EF            _vgamem_fill_pl4:
18821                                           !BCC_EOS
18822                                           !BCC_EOS
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           ! 2226 {
18828                                           ! 2227  Bit16u dest;
18829                                           !BCC_EOS
18830                                           ! 2228  Bit8u i;
18831                                           !BCC_EOS
18832                                           ! 2229  dest=ystart*cheight*nbcols+xstart;
18833 46EF           55                         push	bp
18834 46F0           89E5                       mov	bp,sp
18835 46F2           83C4                   FC  add	sp,*-4
18836                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18837 46F5           8A46         0C            mov	al,$C[bp]
18838 46F8           30E4                       xor	ah,ah
18839 46FA           89C3                       mov	bx,ax
18840 46FC           8A46         06            mov	al,6[bp]
18841 46FF           30E4                       xor	ah,ah
18842 4701           89D9                       mov	cx,bx
18843 4703           F7E9                       imul	cx
18844                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18845 4705           89C3                       mov	bx,ax
18846 4707           8A46         0A            mov	al,$A[bp]
18847 470A           30E4                       xor	ah,ah
18848 470C           93                         xchg	ax,bx
18849 470D           89D9                       mov	cx,bx
18850 470F           F7E9                       imul	cx
18851                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18852 4711           0246         04            add	al,4[bp]
18853 4714           80D4                   00  adc	ah,*0
18854                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18855 4717           8946         FE            mov	-2[bp],ax
18856                                           !BCC_EOS
18857                                           ! 2230  outw(0x3ce, 0x0205);
18858                                           ! Debug: list int = const $205 (used reg = )
18859 471A           B8                   0205  mov	ax,#$205
18860 471D           50                         push	ax
18861                                           ! Debug: list int = const $3CE (used reg = )
18862 471E           B8                   03CE  mov	ax,#$3CE
18863 4721           50                         push	ax
18864                                           ! Debug: func () void = outw+0 (used reg = )
18865 4722           E8         353F            call	_outw
18866 4725           83C4                   04  add	sp,*4
18867                                           !BCC_EOS
18868                                           ! 2231  for(i=0;i<cheight;i++)
18869                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18870 4728           30C0                       xor	al,al
18871 472A           8846         FD            mov	-3[bp],al
18872                                           !BCC_EOS
18873                                           !BCC_EOS
18874                                           ! 2232   {
18875 472D           EB           31            jmp .B6
18876                       0000472F            .B7:
18877                                           ! 2233    memsetb(0xa000,dest+i*nbcols,attr,cols);
18878                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18879 472F           8A46         08            mov	al,8[bp]
18880 4732           30E4                       xor	ah,ah
18881 4734           50                         push	ax
18882                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18883 4735           8A46         0E            mov	al,$E[bp]
18884 4738           30E4                       xor	ah,ah
18885 473A           50                         push	ax
18886                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18887 473B           8A46         0A            mov	al,$A[bp]
18888 473E           30E4                       xor	ah,ah
18889 4740           89C3                       mov	bx,ax
18890 4742           8A46         FD            mov	al,-3[bp]
18891 4745           30E4                       xor	ah,ah
18892 4747           89D9                       mov	cx,bx
18893 4749           F7E9                       imul	cx
18894                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18895                                           ! Debug: expression subtree swapping
18896 474B           0346         FE            add	ax,-2[bp]
18897                                           ! Debug: list unsigned int = ax+0 (used reg = )
18898 474E           50                         push	ax
18899                                           ! Debug: list unsigned int = const $A000 (used reg = )
18900 474F           B8                   A000  mov	ax,#$A000
18901 4752           50                         push	ax
18902                                           ! Debug: func () void = memsetb+0 (used reg = )
18903 4753           E8         33E8            call	_memsetb
18904 4756           83C4                   08  add	sp,*8
18905                                           !BCC_EOS
18906                                           ! 2234   }
18907                                           ! 2234 
18908                                           ! 2235  outw(0x3ce, 0x0005);
18909                       00004759            .B5:
18910                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18911 4759           8A46         FD            mov	al,-3[bp]
18912 475C           40                         inc	ax
18913 475D           8846         FD            mov	-3[bp],al
18914                       00004760            .B6:
18915                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18916 4760           8A46         FD            mov	al,-3[bp]
18917 4763           3A46         0C            cmp	al,$C[bp]
18918 4766           72           C7            jb 	.B7
18919                       00004768            .B8:
18920                       00004768            .B4:
18921                                           ! Debug: list int = const 5 (used reg = )
18922 4768           B8                   0005  mov	ax,*5
18923 476B           50                         push	ax
18924                                           ! Debug: list int = const $3CE (used reg = )
18925 476C           B8                   03CE  mov	ax,#$3CE
18926 476F           50                         push	ax
18927                                           ! Debug: func () void = outw+0 (used reg = )
18928 4770           E8         34F1            call	_outw
18929 4773           83C4                   04  add	sp,*4
18930                                           !BCC_EOS
18931                                           ! 2236 }
18932 4776           89EC                       mov	sp,bp
18933 4778           5D                         pop	bp
18934 4779           C3                         ret
18935                                           ! 2237 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18936                                           ! Register BX used in function vgamem_fill_pl4
18937                                           ! 2238 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18938                       0000477A            _vgamem_copy_cga:
18939                                           !BCC_EOS
18940                                           !BCC_EOS
18941                                           !BCC_EOS
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           ! 2239 {
18946                                           ! 2240  Bit16u src,dest;
18947                                           !BCC_EOS
18948                                           ! 2241  Bit8u i;
18949                                           !BCC_EOS
18950                                           ! 2242  src=((ysrc*cheight*nbcols)>>1)+xstart;
18951 477A           55                         push	bp
18952 477B           89E5                       mov	bp,sp
18953 477D           83C4                   FA  add	sp,*-6
18954                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18955 4780           8A46         0E            mov	al,$E[bp]
18956 4783           30E4                       xor	ah,ah
18957 4785           89C3                       mov	bx,ax
18958 4787           8A46         06            mov	al,6[bp]
18959 478A           30E4                       xor	ah,ah
18960 478C           89D9                       mov	cx,bx
18961 478E           F7E9                       imul	cx
18962                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18963 4790           89C3                       mov	bx,ax
18964 4792           8A46         0C            mov	al,$C[bp]
18965 4795           30E4                       xor	ah,ah
18966 4797           93                         xchg	ax,bx
18967 4798           89D9                       mov	cx,bx
18968 479A           F7E9                       imul	cx
18969                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18970 479C           D1E8                       shr	ax,*1
18971                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18972 479E           0246         04            add	al,4[bp]
18973 47A1           80D4                   00  adc	ah,*0
18974                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18975 47A4           8946         FE            mov	-2[bp],ax
18976                                           !BCC_EOS
18977                                           ! 2243  dest=((ydest*cheight*nbcols)>>1)+xstart;
18978                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18979 47A7           8A46         0E            mov	al,$E[bp]
18980 47AA           30E4                       xor	ah,ah
18981 47AC           89C3                       mov	bx,ax
18982 47AE           8A46         08            mov	al,8[bp]
18983 47B1           30E4                       xor	ah,ah
18984 47B3           89D9                       mov	cx,bx
18985 47B5           F7E9                       imul	cx
18986                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18987 47B7           89C3                       mov	bx,ax
18988 47B9           8A46         0C            mov	al,$C[bp]
18989 47BC           30E4                       xor	ah,ah
18990 47BE           93                         xchg	ax,bx
18991 47BF           89D9                       mov	cx,bx
18992 47C1           F7E9                       imul	cx
18993                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18994 47C3           D1E8                       shr	ax,*1
18995                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18996 47C5           0246         04            add	al,4[bp]
18997 47C8           80D4                   00  adc	ah,*0
18998                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18999 47CB           8946         FC            mov	-4[bp],ax
19000                                           !BCC_EOS
19001                                           ! 2244  for(i=0;i<cheight;i++)
19002                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19003 47CE           30C0                       xor	al,al
19004 47D0           8846         FB            mov	-5[bp],al
19005                                           !BCC_EOS
19006                                           !BCC_EOS
19007                                           ! 2245   {
19008 47D3           E9         00A8            br 	.BB
19009                       000047D6            .BC:
19010                                           ! 2246    if (i & 1)
19011                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19012 47D6           8A46         FB            mov	al,-5[bp]
19013 47D9           24                     01  and	al,*1
19014 47DB           84C0                       test	al,al
19015 47DD           74           56            je  	.BD
19016                       000047DF            .BE:
19017                                           ! 2247      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19018                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19019 47DF           8A46         0A            mov	al,$A[bp]
19020 47E2           30E4                       xor	ah,ah
19021 47E4           50                         push	ax
19022                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19023 47E5           8A46         FB            mov	al,-5[bp]
19024 47E8           30E4                       xor	ah,ah
19025 47EA           D1E8                       shr	ax,*1
19026                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19027 47EC           89C3                       mov	bx,ax
19028 47EE           8A46         0C            mov	al,$C[bp]
19029 47F1           30E4                       xor	ah,ah
19030 47F3           93                         xchg	ax,bx
19031 47F4           89D9                       mov	cx,bx
19032 47F6           F7E9                       imul	cx
19033 47F8           50                         push	ax
19034                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19035                                           ! Debug: expression subtree swapping
19036 47F9           8B46         FE            mov	ax,-2[bp]
19037                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19038 47FC           05                   2000  add	ax,#$2000
19039 47FF           0346         F6            add	ax,-$A[bp]
19040 4802           44                         inc	sp
19041 4803           44                         inc	sp
19042                                           ! Debug: list unsigned int = ax+0 (used reg = )
19043 4804           50                         push	ax
19044                                           ! Debug: list unsigned int = const $B800 (used reg = )
19045 4805           B8                   B800  mov	ax,#$B800
19046 4808           50                         push	ax
19047                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19048 4809           8A46         FB            mov	al,-5[bp]
19049 480C           30E4                       xor	ah,ah
19050 480E           D1E8                       shr	ax,*1
19051                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19052 4810           89C3                       mov	bx,ax
19053 4812           8A46         0C            mov	al,$C[bp]
19054 4815           30E4                       xor	ah,ah
19055 4817           93                         xchg	ax,bx
19056 4818           89D9                       mov	cx,bx
19057 481A           F7E9                       imul	cx
19058 481C           50                         push	ax
19059                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19060                                           ! Debug: expression subtree swapping
19061 481D           8B46         FC            mov	ax,-4[bp]
19062                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19063 4820           05                   2000  add	ax,#$2000
19064 4823           0346         F2            add	ax,-$E[bp]
19065 4826           44                         inc	sp
19066 4827           44                         inc	sp
19067                                           ! Debug: list unsigned int = ax+0 (used reg = )
19068 4828           50                         push	ax
19069                                           ! Debug: list unsigned int = const $B800 (used reg = )
19070 4829           B8                   B800  mov	ax,#$B800
19071 482C           50                         push	ax
19072                                           ! Debug: func () void = memcpyb+0 (used reg = )
19073 482D           E8         3358            call	_memcpyb
19074 4830           83C4                   0A  add	sp,*$A
19075                                           !BCC_EOS
19076                                           ! 2248    else
19077                                           ! 2249      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19078 4833           EB           42            jmp .BF
19079                       00004835            .BD:
19080                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19081 4835           8A46         0A            mov	al,$A[bp]
19082 4838           30E4                       xor	ah,ah
19083 483A           50                         push	ax
19084                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19085 483B           8A46         FB            mov	al,-5[bp]
19086 483E           30E4                       xor	ah,ah
19087 4840           D1E8                       shr	ax,*1
19088                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19089 4842           89C3                       mov	bx,ax
19090 4844           8A46         0C            mov	al,$C[bp]
19091 4847           30E4                       xor	ah,ah
19092 4849           93                         xchg	ax,bx
19093 484A           89D9                       mov	cx,bx
19094 484C           F7E9                       imul	cx
19095                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19096                                           ! Debug: expression subtree swapping
19097 484E           0346         FE            add	ax,-2[bp]
19098                                           ! Debug: list unsigned int = ax+0 (used reg = )
19099 4851           50                         push	ax
19100                                           ! Debug: list unsigned int = const $B800 (used reg = )
19101 4852           B8                   B800  mov	ax,#$B800
19102 4855           50                         push	ax
19103                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19104 4856           8A46         FB            mov	al,-5[bp]
19105 4859           30E4                       xor	ah,ah
19106 485B           D1E8                       shr	ax,*1
19107                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19108 485D           89C3                       mov	bx,ax
19109 485F           8A46         0C            mov	al,$C[bp]
19110 4862           30E4                       xor	ah,ah
19111 4864           93                         xchg	ax,bx
19112 4865           89D9                       mov	cx,bx
19113 4867           F7E9                       imul	cx
19114                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19115                                           ! Debug: expression subtree swapping
19116 4869           0346         FC            add	ax,-4[bp]
19117                                           ! Debug: list unsigned int = ax+0 (used reg = )
19118 486C           50                         push	ax
19119                                           ! Debug: list unsigned int = const $B800 (used reg = )
19120 486D           B8                   B800  mov	ax,#$B800
19121 4870           50                         push	ax
19122                                           ! Debug: func () void = memcpyb+0 (used reg = )
19123 4871           E8         3314            call	_memcpyb
19124 4874           83C4                   0A  add	sp,*$A
19125                                           !BCC_EOS
19126                                           ! 2250   }
19127                       00004877            .BF:
19128                                           ! 2251 }
19129                       00004877            .BA:
19130                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19131 4877           8A46         FB            mov	al,-5[bp]
19132 487A           40                         inc	ax
19133 487B           8846         FB            mov	-5[bp],al
19134                       0000487E            .BB:
19135                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19136 487E           8A46         FB            mov	al,-5[bp]
19137 4881           3A46         0E            cmp	al,$E[bp]
19138 4884         0F82         FF4E            blo 	.BC
19139                       00004888            .C0:
19140                       00004888            .B9:
19141 4888           89EC                       mov	sp,bp
19142 488A           5D                         pop	bp
19143 488B           C3                         ret
19144                                           ! 2252 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19145                                           ! Register BX used in function vgamem_copy_cga
19146                                           ! 2253 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19147                       0000488C            _vgamem_fill_cga:
19148                                           !BCC_EOS
19149                                           !BCC_EOS
19150                                           !BCC_EOS
19151                                           !BCC_EOS
19152                                           !BCC_EOS
19153                                           !BCC_EOS
19154                                           ! 2254 {
19155                                           ! 2255  Bit16u dest;
19156                                           !BCC_EOS
19157                                           ! 2256  Bit8u i;
19158                                           !BCC_EOS
19159                                           ! 2257  dest=((ystart*cheight*nbcols)>>1)+xstart;
19160 488C           55                         push	bp
19161 488D           89E5                       mov	bp,sp
19162 488F           83C4                   FC  add	sp,*-4
19163                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19164 4892           8A46         0C            mov	al,$C[bp]
19165 4895           30E4                       xor	ah,ah
19166 4897           89C3                       mov	bx,ax
19167 4899           8A46         06            mov	al,6[bp]
19168 489C           30E4                       xor	ah,ah
19169 489E           89D9                       mov	cx,bx
19170 48A0           F7E9                       imul	cx
19171                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19172 48A2           89C3                       mov	bx,ax
19173 48A4           8A46         0A            mov	al,$A[bp]
19174 48A7           30E4                       xor	ah,ah
19175 48A9           93                         xchg	ax,bx
19176 48AA           89D9                       mov	cx,bx
19177 48AC           F7E9                       imul	cx
19178                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19179 48AE           D1E8                       shr	ax,*1
19180                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19181 48B0           0246         04            add	al,4[bp]
19182 48B3           80D4                   00  adc	ah,*0
19183                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19184 48B6           8946         FE            mov	-2[bp],ax
19185                                           !BCC_EOS
19186                                           ! 2258  for(i=0;i<cheight;i++)
19187                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19188 48B9           30C0                       xor	al,al
19189 48BB           8846         FD            mov	-3[bp],al
19190                                           !BCC_EOS
19191                                           !BCC_EOS
19192                                           ! 2259   {
19193 48BE           EB           75            jmp .C3
19194                       000048C0            .C4:
19195                                           ! 2260    if (i & 1)
19196                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19197 48C0           8A46         FD            mov	al,-3[bp]
19198 48C3           24                     01  and	al,*1
19199 48C5           84C0                       test	al,al
19200 48C7           74           38            je  	.C5
19201                       000048C9            .C6:
19202                                           ! 2261      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19203                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19204 48C9           8A46         08            mov	al,8[bp]
19205 48CC           30E4                       xor	ah,ah
19206 48CE           50                         push	ax
19207                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19208 48CF           8A46         0E            mov	al,$E[bp]
19209 48D2           30E4                       xor	ah,ah
19210 48D4           50                         push	ax
19211                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19212 48D5           8A46         FD            mov	al,-3[bp]
19213 48D8           30E4                       xor	ah,ah
19214 48DA           D1E8                       shr	ax,*1
19215                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19216 48DC           89C3                       mov	bx,ax
19217 48DE           8A46         0A            mov	al,$A[bp]
19218 48E1           30E4                       xor	ah,ah
19219 48E3           93                         xchg	ax,bx
19220 48E4           89D9                       mov	cx,bx
19221 48E6           F7E9                       imul	cx
19222 48E8           50                         push	ax
19223                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19224                                           ! Debug: expression subtree swapping
19225 48E9           8B46         FE            mov	ax,-2[bp]
19226                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19227 48EC           05                   2000  add	ax,#$2000
19228 48EF           0346         F6            add	ax,-$A[bp]
19229 48F2           44                         inc	sp
19230 48F3           44                         inc	sp
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 48F4           50                         push	ax
19233                                           ! Debug: list unsigned int = const $B800 (used reg = )
19234 48F5           B8                   B800  mov	ax,#$B800
19235 48F8           50                         push	ax
19236                                           ! Debug: func () void = memsetb+0 (used reg = )
19237 48F9           E8         3242            call	_memsetb
19238 48FC           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2262    else
19241                                           ! 2263      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19242 48FF           EB           2D            jmp .C7
19243                       00004901            .C5:
19244                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19245 4901           8A46         08            mov	al,8[bp]
19246 4904           30E4                       xor	ah,ah
19247 4906           50                         push	ax
19248                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19249 4907           8A46         0E            mov	al,$E[bp]
19250 490A           30E4                       xor	ah,ah
19251 490C           50                         push	ax
19252                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19253 490D           8A46         FD            mov	al,-3[bp]
19254 4910           30E4                       xor	ah,ah
19255 4912           D1E8                       shr	ax,*1
19256                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19257 4914           89C3                       mov	bx,ax
19258 4916           8A46         0A            mov	al,$A[bp]
19259 4919           30E4                       xor	ah,ah
19260 491B           93                         xchg	ax,bx
19261 491C           89D9                       mov	cx,bx
19262 491E           F7E9                       imul	cx
19263                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19264                                           ! Debug: expression subtree swapping
19265 4920           0346         FE            add	ax,-2[bp]
19266                                           ! Debug: list unsigned int = ax+0 (used reg = )
19267 4923           50                         push	ax
19268                                           ! Debug: list unsigned int = const $B800 (used reg = )
19269 4924           B8                   B800  mov	ax,#$B800
19270 4927           50                         push	ax
19271                                           ! Debug: func () void = memsetb+0 (used reg = )
19272 4928           E8         3213            call	_memsetb
19273 492B           83C4                   08  add	sp,*8
19274                                           !BCC_EOS
19275                                           ! 2264   }
19276                       0000492E            .C7:
19277                                           ! 2265 }
19278                       0000492E            .C2:
19279                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19280 492E           8A46         FD            mov	al,-3[bp]
19281 4931           40                         inc	ax
19282 4932           8846         FD            mov	-3[bp],al
19283                       00004935            .C3:
19284                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19285 4935           8A46         FD            mov	al,-3[bp]
19286 4938           3A46         0C            cmp	al,$C[bp]
19287 493B           72           83            jb 	.C4
19288                       0000493D            .C8:
19289                       0000493D            .C1:
19290 493D           89EC                       mov	sp,bp
19291 493F           5D                         pop	bp
19292 4940           C3                         ret
19293                                           ! 2266 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19294                                           ! Register BX used in function vgamem_fill_cga
19295                                           ! 2267 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19296                       00004941            _biosfn_scroll:
19297                                           !BCC_EOS
19298                                           !BCC_EOS
19299                                           !BCC_EOS
19300                                           !BCC_EOS
19301                                           !BCC_EOS
19302                                           !BCC_EOS
19303                                           !BCC_EOS
19304                                           !BCC_EOS
19305                                           ! 2268 {
19306                                           ! 2269  Bit8u mode,line,cheight,bpp,cols;
19307                                           !BCC_EOS
19308                                           ! 2270  Bit16u nbcols,nbrows,i;
19309                                           !BCC_EOS
19310                                           ! 2271  Bit16u address;
19311                                           !BCC_EOS
19312                                           ! 2272  if(rul>rlr)return;
19313 4941           55                         push	bp
19314 4942           89E5                       mov	bp,sp
19315 4944           83C4                   F2  add	sp,*-$E
19316                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19317 4947           8A46         08            mov	al,8[bp]
19318 494A           3A46         0C            cmp	al,$C[bp]
19319 494D           76           04            jbe 	.C9
19320                       0000494F            .CA:
19321 494F           89EC                       mov	sp,bp
19322 4951           5D                         pop	bp
19323 4952           C3                         ret
19324                                           !BCC_EOS
19325                                           ! 2273  if(cul>clr)return;
19326                       00004953            .C9:
19327                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19328 4953           8A46         0A            mov	al,$A[bp]
19329 4956           3A46         0E            cmp	al,$E[bp]
19330 4959           76           04            jbe 	.CB
19331                       0000495B            .CC:
19332 495B           89EC                       mov	sp,bp
19333 495D           5D                         pop	bp
19334 495E           C3                         ret
19335                                           !BCC_EOS
19336                                           ! 2274  mode=read_byte(0x40,0x49);
19337                       0000495F            .CB:
19338                                           ! Debug: list int = const $49 (used reg = )
19339 495F           B8                   0049  mov	ax,*$49
19340 4962           50                         push	ax
19341                                           ! Debug: list int = const $40 (used reg = )
19342 4963           B8                   0040  mov	ax,*$40
19343 4966           50                         push	ax
19344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19345 4967           E8         327E            call	_read_byte
19346 496A           83C4                   04  add	sp,*4
19347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19348 496D           8846         FF            mov	-1[bp],al
19349                                           !BCC_EOS
19350                                           ! 2275  line=find_vga_entry(mode);
19351                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19352 4970           8A46         FF            mov	al,-1[bp]
19353 4973           30E4                       xor	ah,ah
19354 4975           50                         push	ax
19355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19356 4976           E8         3183            call	_find_vga_entry
19357 4979           44                         inc	sp
19358 497A           44                         inc	sp
19359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19360 497B           8846         FE            mov	-2[bp],al
19361                                           !BCC_EOS
19362                                           ! 2276  if(line==0xFF)return;
19363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19364 497E           8A46         FE            mov	al,-2[bp]
19365 4981           3C                     FF  cmp	al,#$FF
19366 4983           75           04            jne 	.CD
19367                       00004985            .CE:
19368 4985           89EC                       mov	sp,bp
19369 4987           5D                         pop	bp
19370 4988           C3                         ret
19371                                           !BCC_EOS
19372                                           ! 2277  nbrows=read_byte(0x40,0x84)+1;
19373                       00004989            .CD:
19374                                           ! Debug: list int = const $84 (used reg = )
19375 4989           B8                   0084  mov	ax,#$84
19376 498C           50                         push	ax
19377                                           ! Debug: list int = const $40 (used reg = )
19378 498D           B8                   0040  mov	ax,*$40
19379 4990           50                         push	ax
19380                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19381 4991           E8         3254            call	_read_byte
19382 4994           83C4                   04  add	sp,*4
19383                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19384 4997           30E4                       xor	ah,ah
19385                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19386 4999           40                         inc	ax
19387 499A           8946         F6            mov	-$A[bp],ax
19388                                           !BCC_EOS
19389                                           ! 2278  nbcols=read_word(0x40,0x4A);
19390                                           ! Debug: list int = const $4A (used reg = )
19391 499D           B8                   004A  mov	ax,*$4A
19392 49A0           50                         push	ax
19393                                           ! Debug: list int = const $40 (used reg = )
19394 49A1           B8                   0040  mov	ax,*$40
19395 49A4           50                         push	ax
19396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19397 49A5           E8         3253            call	_read_word
19398 49A8           83C4                   04  add	sp,*4
19399                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19400 49AB           8946         F8            mov	-8[bp],ax
19401                                           !BCC_EOS
19402                                           ! 2279  if(page==0xFF)
19403                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19404 49AE           8A46         10            mov	al,$10[bp]
19405 49B1           3C                     FF  cmp	al,#$FF
19406 49B3           75           11            jne 	.CF
19407                       000049B5            .D0:
19408                                           ! 2280   page=read_byte(0x40,0x62);
19409                                           ! Debug: list int = const $62 (used reg = )
19410 49B5           B8                   0062  mov	ax,*$62
19411 49B8           50                         push	ax
19412                                           ! Debug: list int = const $40 (used reg = )
19413 49B9           B8                   0040  mov	ax,*$40
19414 49BC           50                         push	ax
19415                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19416 49BD           E8         3228            call	_read_byte
19417 49C0           83C4                   04  add	sp,*4
19418                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19419 49C3           8846         10            mov	$10[bp],al
19420                                           !BCC_EOS
19421                                           ! 2281  if(rlr>=nbrows)rlr=nbrows-1;
19422                       000049C6            .CF:
19423                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19424 49C6           8A46         0C            mov	al,$C[bp]
19425 49C9           30E4                       xor	ah,ah
19426 49CB           3B46         F6            cmp	ax,-$A[bp]
19427 49CE           72           07            jb  	.D1
19428                       000049D0            .D2:
19429                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19430 49D0           8B46         F6            mov	ax,-$A[bp]
19431                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19432 49D3           48                         dec	ax
19433 49D4           8846         0C            mov	$C[bp],al
19434                                           !BCC_EOS
19435                                           ! 2282  if(clr>=nbcols)clr=nbcols-1;
19436                       000049D7            .D1:
19437                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19438 49D7           8A46         0E            mov	al,$E[bp]
19439 49DA           30E4                       xor	ah,ah
19440 49DC           3B46         F8            cmp	ax,-8[bp]
19441 49DF           72           07            jb  	.D3
19442                       000049E1            .D4:
19443                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19444 49E1           8B46         F8            mov	ax,-8[bp]
19445                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19446 49E4           48                         dec	ax
19447 49E5           8846         0E            mov	$E[bp],al
19448                                           !BCC_EOS
19449                                           ! 2283  if(nblines>nbrows)nblines=0;
19450                       000049E8            .D3:
19451                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19452 49E8           8A46         04            mov	al,4[bp]
19453 49EB           30E4                       xor	ah,ah
19454 49ED           3B46         F6            cmp	ax,-$A[bp]
19455 49F0           76           05            jbe 	.D5
19456                       000049F2            .D6:
19457                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 49F2           30C0                       xor	al,al
19459 49F4           8846         04            mov	4[bp],al
19460                                           !BCC_EOS
19461                                           ! 2284  cols=clr-cul+1;
19462                       000049F7            .D5:
19463                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19464 49F7           8A46         0E            mov	al,$E[bp]
19465 49FA           30E4                       xor	ah,ah
19466 49FC           2A46         0A            sub	al,$A[bp]
19467 49FF           80DC                   00  sbb	ah,*0
19468                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19469                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19470 4A02           40                         inc	ax
19471 4A03           8846         FB            mov	-5[bp],al
19472                                           !BCC_EOS
19473                                           ! 2285  if(vga_modes[line].class==0x00)
19474                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19475 4A06           8A46         FE            mov	al,-2[bp]
19476 4A09           30E4                       xor	ah,ah
19477 4A0B           B1                     03  mov	cl,*3
19478 4A0D           D3E0                       shl	ax,cl
19479 4A0F           89C3                       mov	bx,ax
19480 4A11           81C3                 01FD  add	bx,#_vga_modes
19481                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19482 4A15           8A47         01            mov	al,1[bx]
19483 4A18           84C0                       test	al,al
19484 4A1A         0F85         0250            bne 	.D7
19485                       00004A1E            .D8:
19486                                           ! 2286   {
19487                                           ! 2287    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19488                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 4A1E           8B46         F8            mov	ax,-8[bp]
19490 4A21           8B4E         F6            mov	cx,-$A[bp]
19491 4A24           F7E9                       imul	cx
19492                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19493 4A26           D1E0                       shl	ax,*1
19494                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19495 4A28           0C                     FF  or	al,#$FF
19496                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19497                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19498 4A2A           89C3                       mov	bx,ax
19499 4A2C           8A46         10            mov	al,$10[bp]
19500 4A2F           30E4                       xor	ah,ah
19501 4A31           93                         xchg	ax,bx
19502 4A32           40                         inc	ax
19503 4A33           89D9                       mov	cx,bx
19504 4A35           F7E9                       imul	cx
19505                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19506 4A37           8946         F2            mov	-$E[bp],ax
19507                                           !BCC_EOS
19508                                           ! 2288    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19509                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19510 4A3A           8A46         04            mov	al,4[bp]
19511 4A3D           84C0                       test	al,al
19512 4A3F           75           67            jne 	.D9
19513                       00004A41            .DE:
19514                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19515 4A41           8A46         08            mov	al,8[bp]
19516 4A44           84C0                       test	al,al
19517 4A46           75           60            jne 	.D9
19518                       00004A48            .DD:
19519                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19520 4A48           8A46         0A            mov	al,$A[bp]
19521 4A4B           84C0                       test	al,al
19522 4A4D           75           59            jne 	.D9
19523                       00004A4F            .DC:
19524                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19525 4A4F           8B46         F6            mov	ax,-$A[bp]
19526                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19527                                           ! Debug: expression subtree swapping
19528 4A52           48                         dec	ax
19529 4A53           50                         push	ax
19530 4A54           8A46         0C            mov	al,$C[bp]
19531 4A57           30E4                       xor	ah,ah
19532 4A59           3B46         F0            cmp	ax,-$10[bp]
19533 4A5C           8D66         F2            lea	sp,-$E[bp]
19534 4A5F           75           47            jne 	.D9
19535                       00004A61            .DB:
19536                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19537 4A61           8B46         F8            mov	ax,-8[bp]
19538                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19539                                           ! Debug: expression subtree swapping
19540 4A64           48                         dec	ax
19541 4A65           50                         push	ax
19542 4A66           8A46         0E            mov	al,$E[bp]
19543 4A69           30E4                       xor	ah,ah
19544 4A6B           3B46         F0            cmp	ax,-$10[bp]
19545 4A6E           8D66         F2            lea	sp,-$E[bp]
19546 4A71           75           35            jne 	.D9
19547                       00004A73            .DA:
19548                                           ! 2289     {
19549                                           ! 2290      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19550                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A73           8B46         F6            mov	ax,-$A[bp]
19552 4A76           8B4E         F8            mov	cx,-8[bp]
19553 4A79           F7E9                       imul	cx
19554                                           ! Debug: list unsigned int = ax+0 (used reg = )
19555 4A7B           50                         push	ax
19556                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19557 4A7C           8A46         06            mov	al,6[bp]
19558 4A7F           30E4                       xor	ah,ah
19559                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19560 4A81           B9                   0100  mov	cx,#$100
19561 4A84           F7E9                       imul	cx
19562                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19563                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19564 4A86           05                   0020  add	ax,*$20
19565 4A89           50                         push	ax
19566                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19567 4A8A           FF76         F2            push	-$E[bp]
19568                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19569 4A8D           8A46         FE            mov	al,-2[bp]
19570 4A90           30E4                       xor	ah,ah
19571 4A92           B1                     03  mov	cl,*3
19572 4A94           D3E0                       shl	ax,cl
19573 4A96           89C3                       mov	bx,ax
19574 4A98           81C3                 01FD  add	bx,#_vga_modes
19575                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19576 4A9C           FF77         04            push	4[bx]
19577                                           ! Debug: func () void = memsetw+0 (used reg = )
19578 4A9F           E8         30C1            call	_memsetw
19579 4AA2           83C4                   08  add	sp,*8
19580                                           !BCC_EOS
19581                                           ! 2291     }
19582                                           ! 2292    else
19583                                           ! 2293     {
19584 4AA5           E9         01C3            br 	.DF
19585                       00004AA8            .D9:
19586                                           ! 2294      if(dir==1)
19587                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19588 4AA8           8A46         12            mov	al,$12[bp]
19589 4AAB           3C                     01  cmp	al,*1
19590 4AAD         0F85         00DC            bne 	.E0
19591                       00004AB1            .E1:
19592                                           ! 2295       {for(i=rul;i<=rlr;i++)
19593                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19594 4AB1           8A46         08            mov	al,8[bp]
19595 4AB4           30E4                       xor	ah,ah
19596 4AB6           8946         F4            mov	-$C[bp],ax
19597                                           !BCC_EOS
19598                                           !BCC_EOS
19599                                           ! 2296         {
19600 4AB9           E9         00C2            br 	.E4
19601                       00004ABC            .E5:
19602                                           ! 2297          if((i+nblines>rlr)||(nblines==0))
19603                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19604 4ABC           8B46         F4            mov	ax,-$C[bp]
19605 4ABF           0246         04            add	al,4[bp]
19606 4AC2           80D4                   00  adc	ah,*0
19607                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19608 4AC5           50                         push	ax
19609 4AC6           8A46         0C            mov	al,$C[bp]
19610 4AC9           30E4                       xor	ah,ah
19611 4ACB           3B46         F0            cmp	ax,-$10[bp]
19612 4ACE           8D66         F2            lea	sp,-$E[bp]
19613 4AD1           72           07            jb  	.E7
19614                       00004AD3            .E8:
19615                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19616 4AD3           8A46         04            mov	al,4[bp]
19617 4AD6           84C0                       test	al,al
19618 4AD8           75           42            jne 	.E6
19619                       00004ADA            .E7:
19620                                           ! 2298           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19621                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19622 4ADA           8A46         FB            mov	al,-5[bp]
19623 4ADD           30E4                       xor	ah,ah
19624 4ADF           50                         push	ax
19625                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19626 4AE0           8A46         06            mov	al,6[bp]
19627 4AE3           30E4                       xor	ah,ah
19628                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19629 4AE5           B9                   0100  mov	cx,#$100
19630 4AE8           F7E9                       imul	cx
19631                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19632                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19633 4AEA           05                   0020  add	ax,*$20
19634 4AED           50                         push	ax
19635                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19636 4AEE           8B46         F4            mov	ax,-$C[bp]
19637 4AF1           8B4E         F8            mov	cx,-8[bp]
19638 4AF4           F7E9                       imul	cx
19639                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19640 4AF6           0246         0A            add	al,$A[bp]
19641 4AF9           80D4                   00  adc	ah,*0
19642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19643 4AFC           D1E0                       shl	ax,*1
19644                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AFE           0346         F2            add	ax,-$E[bp]
19647                                           ! Debug: list unsigned int = ax+0 (used reg = )
19648 4B01           50                         push	ax
19649                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19650 4B02           8A46         FE            mov	al,-2[bp]
19651 4B05           30E4                       xor	ah,ah
19652 4B07           B1                     03  mov	cl,*3
19653 4B09           D3E0                       shl	ax,cl
19654 4B0B           89C3                       mov	bx,ax
19655 4B0D           81C3                 01FD  add	bx,#_vga_modes
19656                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19657 4B11           FF77         04            push	4[bx]
19658                                           ! Debug: func () void = memsetw+0 (used reg = )
19659 4B14           E8         304C            call	_memsetw
19660 4B17           83C4                   08  add	sp,*8
19661                                           !BCC_EOS
19662                                           ! 2299          else
19663                                           ! 2300           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19664 4B1A           EB           5B            jmp .E9
19665                       00004B1C            .E6:
19666                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19667 4B1C           8A46         FB            mov	al,-5[bp]
19668 4B1F           30E4                       xor	ah,ah
19669 4B21           50                         push	ax
19670                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19671 4B22           8B46         F4            mov	ax,-$C[bp]
19672 4B25           0246         04            add	al,4[bp]
19673 4B28           80D4                   00  adc	ah,*0
19674                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19675 4B2B           8B4E         F8            mov	cx,-8[bp]
19676 4B2E           F7E9                       imul	cx
19677                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19678 4B30           0246         0A            add	al,$A[bp]
19679 4B33           80D4                   00  adc	ah,*0
19680                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19681 4B36           D1E0                       shl	ax,*1
19682                                           ! Debug: list unsigned int = ax+0 (used reg = )
19683 4B38           50                         push	ax
19684                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19685 4B39           8A46         FE            mov	al,-2[bp]
19686 4B3C           30E4                       xor	ah,ah
19687 4B3E           B1                     03  mov	cl,*3
19688 4B40           D3E0                       shl	ax,cl
19689 4B42           89C3                       mov	bx,ax
19690 4B44           81C3                 01FD  add	bx,#_vga_modes
19691                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19692 4B48           FF77         04            push	4[bx]
19693                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19694 4B4B           8B46         F4            mov	ax,-$C[bp]
19695 4B4E           8B4E         F8            mov	cx,-8[bp]
19696 4B51           F7E9                       imul	cx
19697                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19698 4B53           0246         0A            add	al,$A[bp]
19699 4B56           80D4                   00  adc	ah,*0
19700                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19701 4B59           D1E0                       shl	ax,*1
19702                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19703                                           ! Debug: expression subtree swapping
19704 4B5B           0346         F2            add	ax,-$E[bp]
19705                                           ! Debug: list unsigned int = ax+0 (used reg = )
19706 4B5E           50                         push	ax
19707                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B5F           8A46         FE            mov	al,-2[bp]
19709 4B62           30E4                       xor	ah,ah
19710 4B64           B1                     03  mov	cl,*3
19711 4B66           D3E0                       shl	ax,cl
19712 4B68           89C3                       mov	bx,ax
19713 4B6A           81C3                 01FD  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B6E           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memcpyw+0 (used reg = )
19717 4B71           E8         3044            call	_memcpyw
19718 4B74           83C4                   0A  add	sp,*$A
19719                                           !BCC_EOS
19720                                           ! 2301         }
19721                       00004B77            .E9:
19722                                           ! 2302       }
19723                       00004B77            .E3:
19724                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19725 4B77           8B46         F4            mov	ax,-$C[bp]
19726 4B7A           40                         inc	ax
19727 4B7B           8946         F4            mov	-$C[bp],ax
19728                       00004B7E            .E4:
19729                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19730 4B7E           8A46         0C            mov	al,$C[bp]
19731 4B81           30E4                       xor	ah,ah
19732 4B83           3B46         F4            cmp	ax,-$C[bp]
19733 4B86         0F83         FF32            bhis	.E5
19734                       00004B8A            .EA:
19735                       00004B8A            .E2:
19736                                           ! 2303      
19737                                           ! 2303 else
19738                                           ! 2304       {for(i=rlr;i>=rul;i--)
19739 4B8A           E9         00DE            br 	.EB
19740                       00004B8D            .E0:
19741                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19742 4B8D           8A46         0C            mov	al,$C[bp]
19743 4B90           30E4                       xor	ah,ah
19744 4B92           8946         F4            mov	-$C[bp],ax
19745                                           !BCC_EOS
19746                                           !BCC_EOS
19747                                           ! 2305         {
19748 4B95           E9         00C7            br 	.EE
19749                       00004B98            .EF:
19750                                           ! 2306          if((i<rul+nblines)||(nblines==0))
19751                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19752 4B98           8A46         08            mov	al,8[bp]
19753 4B9B           30E4                       xor	ah,ah
19754 4B9D           0246         04            add	al,4[bp]
19755 4BA0           80D4                   00  adc	ah,*0
19756                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19757 4BA3           3B46         F4            cmp	ax,-$C[bp]
19758 4BA6           77           07            ja  	.F1
19759                       00004BA8            .F2:
19760                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19761 4BA8           8A46         04            mov	al,4[bp]
19762 4BAB           84C0                       test	al,al
19763 4BAD           75           42            jne 	.F0
19764                       00004BAF            .F1:
19765                                           ! 2307           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19766                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19767 4BAF           8A46         FB            mov	al,-5[bp]
19768 4BB2           30E4                       xor	ah,ah
19769 4BB4           50                         push	ax
19770                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19771 4BB5           8A46         06            mov	al,6[bp]
19772 4BB8           30E4                       xor	ah,ah
19773                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19774 4BBA           B9                   0100  mov	cx,#$100
19775 4BBD           F7E9                       imul	cx
19776                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19777                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19778 4BBF           05                   0020  add	ax,*$20
19779 4BC2           50                         push	ax
19780                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19781 4BC3           8B46         F4            mov	ax,-$C[bp]
19782 4BC6           8B4E         F8            mov	cx,-8[bp]
19783 4BC9           F7E9                       imul	cx
19784                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19785 4BCB           0246         0A            add	al,$A[bp]
19786 4BCE           80D4                   00  adc	ah,*0
19787                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19788 4BD1           D1E0                       shl	ax,*1
19789                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19790                                           ! Debug: expression subtree swapping
19791 4BD3           0346         F2            add	ax,-$E[bp]
19792                                           ! Debug: list unsigned int = ax+0 (used reg = )
19793 4BD6           50                         push	ax
19794                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19795 4BD7           8A46         FE            mov	al,-2[bp]
19796 4BDA           30E4                       xor	ah,ah
19797 4BDC           B1                     03  mov	cl,*3
19798 4BDE           D3E0                       shl	ax,cl
19799 4BE0           89C3                       mov	bx,ax
19800 4BE2           81C3                 01FD  add	bx,#_vga_modes
19801                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19802 4BE6           FF77         04            push	4[bx]
19803                                           ! Debug: func () void = memsetw+0 (used reg = )
19804 4BE9           E8         2F77            call	_memsetw
19805 4BEC           83C4                   08  add	sp,*8
19806                                           !BCC_EOS
19807                                           ! 2308          else
19808                                           ! 2309           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19809 4BEF           EB           5B            jmp .F3
19810                       00004BF1            .F0:
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BF1           8A46         FB            mov	al,-5[bp]
19813 4BF4           30E4                       xor	ah,ah
19814 4BF6           50                         push	ax
19815                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19816 4BF7           8B46         F4            mov	ax,-$C[bp]
19817 4BFA           2A46         04            sub	al,4[bp]
19818 4BFD           80DC                   00  sbb	ah,*0
19819                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19820 4C00           8B4E         F8            mov	cx,-8[bp]
19821 4C03           F7E9                       imul	cx
19822                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19823 4C05           0246         0A            add	al,$A[bp]
19824 4C08           80D4                   00  adc	ah,*0
19825                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19826 4C0B           D1E0                       shl	ax,*1
19827                                           ! Debug: list unsigned int = ax+0 (used reg = )
19828 4C0D           50                         push	ax
19829                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19830 4C0E           8A46         FE            mov	al,-2[bp]
19831 4C11           30E4                       xor	ah,ah
19832 4C13           B1                     03  mov	cl,*3
19833 4C15           D3E0                       shl	ax,cl
19834 4C17           89C3                       mov	bx,ax
19835 4C19           81C3                 01FD  add	bx,#_vga_modes
19836                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19837 4C1D           FF77         04            push	4[bx]
19838                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19839 4C20           8B46         F4            mov	ax,-$C[bp]
19840 4C23           8B4E         F8            mov	cx,-8[bp]
19841 4C26           F7E9                       imul	cx
19842                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19843 4C28           0246         0A            add	al,$A[bp]
19844 4C2B           80D4                   00  adc	ah,*0
19845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19846 4C2E           D1E0                       shl	ax,*1
19847                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19848                                           ! Debug: expression subtree swapping
19849 4C30           0346         F2            add	ax,-$E[bp]
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4C33           50                         push	ax
19852                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19853 4C34           8A46         FE            mov	al,-2[bp]
19854 4C37           30E4                       xor	ah,ah
19855 4C39           B1                     03  mov	cl,*3
19856 4C3B           D3E0                       shl	ax,cl
19857 4C3D           89C3                       mov	bx,ax
19858 4C3F           81C3                 01FD  add	bx,#_vga_modes
19859                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19860 4C43           FF77         04            push	4[bx]
19861                                           ! Debug: func () void = memcpyw+0 (used reg = )
19862 4C46           E8         2F6F            call	_memcpyw
19863 4C49           83C4                   0A  add	sp,*$A
19864                                           !BCC_EOS
19865                                           ! 2310          if (i>rlr) break;
19866                       00004C4C            .F3:
19867                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19868 4C4C           8A46         0C            mov	al,$C[bp]
19869 4C4F           30E4                       xor	ah,ah
19870 4C51           3B46         F4            cmp	ax,-$C[bp]
19871 4C54           73           02            jae 	.F4
19872                       00004C56            .F5:
19873 4C56           EB           13            jmp .EC
19874                                           !BCC_EOS
19875                                           ! 2311         }
19876                       00004C58            .F4:
19877                                           ! 2312       }
19878                       00004C58            .ED:
19879                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19880 4C58           8B46         F4            mov	ax,-$C[bp]
19881 4C5B           48                         dec	ax
19882 4C5C           8946         F4            mov	-$C[bp],ax
19883                       00004C5F            .EE:
19884                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19885 4C5F           8A46         08            mov	al,8[bp]
19886 4C62           30E4                       xor	ah,ah
19887 4C64           3B46         F4            cmp	ax,-$C[bp]
19888 4C67         0F86         FF2D            blos	.EF
19889                       00004C6B            .F6:
19890                       00004C6B            .EC:
19891                                           ! 2313     }
19892                       00004C6B            .EB:
19893                                           ! 2314   }
19894                       00004C6B            .DF:
19895                                           ! 2315  else
19896                                           ! 2316   {
19897 4C6B           E9         03D5            br 	.F7
19898                       00004C6E            .D7:
19899                                           ! 2317    cheight=video_param_table[line_to_vpti[line]].cheight;
19900                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19901 4C6E           8A46         FE            mov	al,-2[bp]
19902 4C71           30E4                       xor	ah,ah
19903 4C73           89C3                       mov	bx,ax
19904                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19905 4C75           8A87       027D            mov	al,_line_to_vpti[bx]
19906 4C79           30E4                       xor	ah,ah
19907 4C7B           B1                     06  mov	cl,*6
19908 4C7D           D3E0                       shl	ax,cl
19909 4C7F           89C3                       mov	bx,ax
19910 4C81           81C3                 0291  add	bx,#_video_param_table
19911                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19912 4C85           8A47         02            mov	al,2[bx]
19913 4C88           8846         FD            mov	-3[bp],al
19914                                           !BCC_EOS
19915                                           ! 2318    switch(vga_modes[line].memmodel)
19916                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19917 4C8B           8A46         FE            mov	al,-2[bp]
19918 4C8E           30E4                       xor	ah,ah
19919 4C90           B1                     03  mov	cl,*3
19920 4C92           D3E0                       shl	ax,cl
19921 4C94           89C3                       mov	bx,ax
19922 4C96           81C3                 01FD  add	bx,#_vga_modes
19923 4C9A           8A47         02            mov	al,2[bx]
19924                                           ! 2319     {
19925 4C9D           E9         0391            br 	.FA
19926                                           ! 2320      case 0x04:
19927                                           ! 2321      case 0x03:
19928                       00004CA0            .FB:
19929                                           ! 2322        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19930                       00004CA0            .FC:
19931                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19932 4CA0           8A46         04            mov	al,4[bp]
19933 4CA3           84C0                       test	al,al
19934 4CA5         0F85         0089            bne 	.FD
19935                       00004CA9            .102:
19936                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19937 4CA9           8A46         08            mov	al,8[bp]
19938 4CAC           84C0                       test	al,al
19939 4CAE         0F85         0080            bne 	.FD
19940                       00004CB2            .101:
19941                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19942 4CB2           8A46         0A            mov	al,$A[bp]
19943 4CB5           84C0                       test	al,al
19944 4CB7           75           79            jne 	.FD
19945                       00004CB9            .100:
19946                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19947 4CB9           8B46         F6            mov	ax,-$A[bp]
19948                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19949                                           ! Debug: expression subtree swapping
19950 4CBC           48                         dec	ax
19951 4CBD           50                         push	ax
19952 4CBE           8A46         0C            mov	al,$C[bp]
19953 4CC1           30E4                       xor	ah,ah
19954 4CC3           3B46         F0            cmp	ax,0+..FFFC[bp]
19955 4CC6           8D66         F2            lea	sp,2+..FFFC[bp]
19956 4CC9           75           67            jne 	.FD
19957                       00004CCB            .FF:
19958                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19959 4CCB           8B46         F8            mov	ax,-8[bp]
19960                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19961                                           ! Debug: expression subtree swapping
19962 4CCE           48                         dec	ax
19963 4CCF           50                         push	ax
19964 4CD0           8A46         0E            mov	al,$E[bp]
19965 4CD3           30E4                       xor	ah,ah
19966 4CD5           3B46         F0            cmp	ax,0+..FFFC[bp]
19967 4CD8           8D66         F2            lea	sp,2+..FFFC[bp]
19968 4CDB           75           55            jne 	.FD
19969                       00004CDD            .FE:
19970                                           ! 2323         {
19971                                           ! 2324          outw(0x3ce, 0x0205);
19972                                           ! Debug: list int = const $205 (used reg = )
19973 4CDD           B8                   0205  mov	ax,#$205
19974 4CE0           50                         push	ax
19975                                           ! Debug: list int = const $3CE (used reg = )
19976 4CE1           B8                   03CE  mov	ax,#$3CE
19977 4CE4           50                         push	ax
19978                                           ! Debug: func () void = outw+0 (used reg = )
19979 4CE5           E8         2F7C            call	_outw
19980 4CE8           83C4                   04  add	sp,*4
19981                                           !BCC_EOS
19982                                           ! 2325          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19983                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19984 4CEB           8B46         F6            mov	ax,-$A[bp]
19985 4CEE           8B4E         F8            mov	cx,-8[bp]
19986 4CF1           F7E9                       imul	cx
19987                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19988 4CF3           89C3                       mov	bx,ax
19989 4CF5           8A46         FD            mov	al,-3[bp]
19990 4CF8           30E4                       xor	ah,ah
19991 4CFA           93                         xchg	ax,bx
19992 4CFB           89D9                       mov	cx,bx
19993 4CFD           F7E9                       imul	cx
19994                                           ! Debug: list unsigned int = ax+0 (used reg = )
19995 4CFF           50                         push	ax
19996                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19997 4D00           8A46         06            mov	al,6[bp]
19998 4D03           30E4                       xor	ah,ah
19999 4D05           50                         push	ax
20000                                           ! Debug: list int = const 0 (used reg = )
20001 4D06           31C0                       xor	ax,ax
20002 4D08           50                         push	ax
20003                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20004 4D09           8A46         FE            mov	al,-2[bp]
20005 4D0C           30E4                       xor	ah,ah
20006 4D0E           B1                     03  mov	cl,*3
20007 4D10           D3E0                       shl	ax,cl
20008 4D12           89C3                       mov	bx,ax
20009 4D14           81C3                 01FD  add	bx,#_vga_modes
20010                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20011 4D18           FF77         04            push	4[bx]
20012                                           ! Debug: func () void = memsetb+0 (used reg = )
20013 4D1B           E8         2E20            call	_memsetb
20014 4D1E           83C4                   08  add	sp,*8
20015                                           !BCC_EOS
20016                                           ! 2326          outw(0x3ce, 0x0005);
20017                                           ! Debug: list int = const 5 (used reg = )
20018 4D21           B8                   0005  mov	ax,*5
20019 4D24           50                         push	ax
20020                                           ! Debug: list int = const $3CE (used reg = )
20021 4D25           B8                   03CE  mov	ax,#$3CE
20022 4D28           50                         push	ax
20023                                           ! Debug: func () void = outw+0 (used reg = )
20024 4D29           E8         2F38            call	_outw
20025 4D2C           83C4                   04  add	sp,*4
20026                                           !BCC_EOS
20027                                           ! 2327         }
20028                                           ! 2328        else
20029                                           ! 2329         {
20030 4D2F           E9         0121            br 	.103
20031                       00004D32            .FD:
20032                                           ! 2330          if(dir==1)
20033                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20034 4D32           8A46         12            mov	al,$12[bp]
20035 4D35           3C                     01  cmp	al,*1
20036 4D37         0F85         008A            bne 	.104
20037                       00004D3B            .105:
20038                                           ! 2331           {for(i=rul;i<=rlr;i++)
20039                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20040 4D3B           8A46         08            mov	al,8[bp]
20041 4D3E           30E4                       xor	ah,ah
20042 4D40           8946         F4            mov	-$C[bp],ax
20043                                           !BCC_EOS
20044                                           !BCC_EOS
20045                                           ! 2332             {
20046 4D43           EB           73            jmp .108
20047                       00004D45            .109:
20048                                           ! 2333              if((i+nblines>rlr)||(nblines==0))
20049                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20050 4D45           8B46         F4            mov	ax,-$C[bp]
20051 4D48           0246         04            add	al,4[bp]
20052 4D4B           80D4                   00  adc	ah,*0
20053                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20054 4D4E           50                         push	ax
20055 4D4F           8A46         0C            mov	al,$C[bp]
20056 4D52           30E4                       xor	ah,ah
20057 4D54           3B46         F0            cmp	ax,0+..FFFC[bp]
20058 4D57           8D66         F2            lea	sp,2+..FFFC[bp]
20059 4D5A           72           07            jb  	.10B
20060                       00004D5C            .10C:
20061                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20062 4D5C           8A46         04            mov	al,4[bp]
20063 4D5F           84C0                       test	al,al
20064 4D61           75           26            jne 	.10A
20065                       00004D63            .10B:
20066                                           ! 2334               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20067                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20068 4D63           8A46         06            mov	al,6[bp]
20069 4D66           30E4                       xor	ah,ah
20070 4D68           50                         push	ax
20071                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20072 4D69           8A46         FD            mov	al,-3[bp]
20073 4D6C           30E4                       xor	ah,ah
20074 4D6E           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20076 4D6F           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20078 4D72           8A46         FB            mov	al,-5[bp]
20079 4D75           30E4                       xor	ah,ah
20080 4D77           50                         push	ax
20081                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20082 4D78           FF76         F4            push	-$C[bp]
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4D7B           8A46         0A            mov	al,$A[bp]
20085 4D7E           30E4                       xor	ah,ah
20086 4D80           50                         push	ax
20087                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20088 4D81           E8         F96B            call	_vgamem_fill_pl4
20089 4D84           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2335              else
20092                                           ! 2336               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20093 4D87           EB           28            jmp .10D
20094                       00004D89            .10A:
20095                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20096 4D89           8A46         FD            mov	al,-3[bp]
20097 4D8C           30E4                       xor	ah,ah
20098 4D8E           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20100 4D8F           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20102 4D92           8A46         FB            mov	al,-5[bp]
20103 4D95           30E4                       xor	ah,ah
20104 4D97           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20106 4D98           FF76         F4            push	-$C[bp]
20107                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20108 4D9B           8B46         F4            mov	ax,-$C[bp]
20109 4D9E           0246         04            add	al,4[bp]
20110 4DA1           80D4                   00  adc	ah,*0
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4DA4           50                         push	ax
20113                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20114 4DA5           8A46         0A            mov	al,$A[bp]
20115 4DA8           30E4                       xor	ah,ah
20116 4DAA           50                         push	ax
20117                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20118 4DAB           E8         F87F            call	_vgamem_copy_pl4
20119 4DAE           83C4                   0C  add	sp,*$C
20120                                           !BCC_EOS
20121                                           ! 2337             }
20122                       00004DB1            .10D:
20123                                           ! 2338           }
20124                       00004DB1            .107:
20125                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20126 4DB1           8B46         F4            mov	ax,-$C[bp]
20127 4DB4           40                         inc	ax
20128 4DB5           8946         F4            mov	-$C[bp],ax
20129                       00004DB8            .108:
20130                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20131 4DB8           8A46         0C            mov	al,$C[bp]
20132 4DBB           30E4                       xor	ah,ah
20133 4DBD           3B46         F4            cmp	ax,-$C[bp]
20134 4DC0           73           83            jae	.109
20135                       00004DC2            .10E:
20136                       00004DC2            .106:
20137                                           ! 2339          else
20138                                           ! 2340           {for(i=rlr;i>=rul;i--)
20139 4DC2           E9         008E            br 	.10F
20140                       00004DC5            .104:
20141                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20142 4DC5           8A46         0C            mov	al,$C[bp]
20143 4DC8           30E4                       xor	ah,ah
20144 4DCA           8946         F4            mov	-$C[bp],ax
20145                                           !BCC_EOS
20146                                           !BCC_EOS
20147                                           ! 2341             {
20148 4DCD           EB           78            jmp .112
20149                       00004DCF            .113:
20150                                           ! 2342              if((i<rul+nblines)||(nblines==0))
20151                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20152 4DCF           8A46         08            mov	al,8[bp]
20153 4DD2           30E4                       xor	ah,ah
20154 4DD4           0246         04            add	al,4[bp]
20155 4DD7           80D4                   00  adc	ah,*0
20156                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20157 4DDA           3B46         F4            cmp	ax,-$C[bp]
20158 4DDD           77           07            ja  	.115
20159                       00004DDF            .116:
20160                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20161 4DDF           8A46         04            mov	al,4[bp]
20162 4DE2           84C0                       test	al,al
20163 4DE4           75           26            jne 	.114
20164                       00004DE6            .115:
20165                                           ! 2343               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20166                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20167 4DE6           8A46         06            mov	al,6[bp]
20168 4DE9           30E4                       xor	ah,ah
20169 4DEB           50                         push	ax
20170                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20171 4DEC           8A46         FD            mov	al,-3[bp]
20172 4DEF           30E4                       xor	ah,ah
20173 4DF1           50                         push	ax
20174                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20175 4DF2           FF76         F8            push	-8[bp]
20176                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20177 4DF5           8A46         FB            mov	al,-5[bp]
20178 4DF8           30E4                       xor	ah,ah
20179 4DFA           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4DFB           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4DFE           8A46         0A            mov	al,$A[bp]
20184 4E01           30E4                       xor	ah,ah
20185 4E03           50                         push	ax
20186                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20187 4E04           E8         F8E8            call	_vgamem_fill_pl4
20188 4E07           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2344              else
20191                                           ! 2345               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20192 4E0A           EB           28            jmp .117
20193                       00004E0C            .114:
20194                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20195 4E0C           8A46         FD            mov	al,-3[bp]
20196 4E0F           30E4                       xor	ah,ah
20197 4E11           50                         push	ax
20198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20199 4E12           FF76         F8            push	-8[bp]
20200                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20201 4E15           8A46         FB            mov	al,-5[bp]
20202 4E18           30E4                       xor	ah,ah
20203 4E1A           50                         push	ax
20204                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20205 4E1B           8B46         F4            mov	ax,-$C[bp]
20206 4E1E           2A46         04            sub	al,4[bp]
20207 4E21           80DC                   00  sbb	ah,*0
20208                                           ! Debug: list unsigned int = ax+0 (used reg = )
20209 4E24           50                         push	ax
20210                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20211 4E25           FF76         F4            push	-$C[bp]
20212                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20213 4E28           8A46         0A            mov	al,$A[bp]
20214 4E2B           30E4                       xor	ah,ah
20215 4E2D           50                         push	ax
20216                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20217 4E2E           E8         F7FC            call	_vgamem_copy_pl4
20218 4E31           83C4                   0C  add	sp,*$C
20219                                           !BCC_EOS
20220                                           ! 2346              if (i>rlr) break;
20221                       00004E34            .117:
20222                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20223 4E34           8A46         0C            mov	al,$C[bp]
20224 4E37           30E4                       xor	ah,ah
20225 4E39           3B46         F4            cmp	ax,-$C[bp]
20226 4E3C           73           02            jae 	.118
20227                       00004E3E            .119:
20228 4E3E           EB           13            jmp .110
20229                                           !BCC_EOS
20230                                           ! 2347             }
20231                       00004E40            .118:
20232                                           ! 2348           }
20233                       00004E40            .111:
20234                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20235 4E40           8B46         F4            mov	ax,-$C[bp]
20236 4E43           48                         dec	ax
20237 4E44           8946         F4            mov	-$C[bp],ax
20238                       00004E47            .112:
20239                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20240 4E47           8A46         08            mov	al,8[bp]
20241 4E4A           30E4                       xor	ah,ah
20242 4E4C           3B46         F4            cmp	ax,-$C[bp]
20243 4E4F         0F86         FF7C            blos	.113
20244                       00004E53            .11A:
20245                       00004E53            .110:
20246                                           ! 2349         }
20247                       00004E53            .10F:
20248                                           ! 2350        break;
20249                       00004E53            .103:
20250 4E53           E9         01ED            br 	.F8
20251                                           !BCC_EOS
20252                                           ! 2351      case 0x02:
20253                                           ! 2352        bpp=vga_modes[line].pixbits;
20254                       00004E56            .11B:
20255                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20256 4E56           8A46         FE            mov	al,-2[bp]
20257 4E59           30E4                       xor	ah,ah
20258 4E5B           B1                     03  mov	cl,*3
20259 4E5D           D3E0                       shl	ax,cl
20260 4E5F           89C3                       mov	bx,ax
20261 4E61           81C3                 01FD  add	bx,#_vga_modes
20262                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20263 4E65           8A47         03            mov	al,3[bx]
20264 4E68           8846         FC            mov	-4[bp],al
20265                                           !BCC_EOS
20266                                           ! 2353        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20267                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20268 4E6B           8A46         04            mov	al,4[bp]
20269 4E6E           84C0                       test	al,al
20270 4E70           75           77            jne 	.11C
20271                       00004E72            .121:
20272                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20273 4E72           8A46         08            mov	al,8[bp]
20274 4E75           84C0                       test	al,al
20275 4E77           75           70            jne 	.11C
20276                       00004E79            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20278 4E79           8A46         0A            mov	al,$A[bp]
20279 4E7C           84C0                       test	al,al
20280 4E7E           75           69            jne 	.11C
20281                       00004E80            .11F:
20282                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20283 4E80           8B46         F6            mov	ax,-$A[bp]
20284                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4E83           48                         dec	ax
20287 4E84           50                         push	ax
20288 4E85           8A46         0C            mov	al,$C[bp]
20289 4E88           30E4                       xor	ah,ah
20290 4E8A           3B46         F0            cmp	ax,0+..FFFC[bp]
20291 4E8D           8D66         F2            lea	sp,2+..FFFC[bp]
20292 4E90           75           57            jne 	.11C
20293                       00004E92            .11E:
20294                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20295 4E92           8B46         F8            mov	ax,-8[bp]
20296                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20297                                           ! Debug: expression subtree swapping
20298 4E95           48                         dec	ax
20299 4E96           50                         push	ax
20300 4E97           8A46         0E            mov	al,$E[bp]
20301 4E9A           30E4                       xor	ah,ah
20302 4E9C           3B46         F0            cmp	ax,0+..FFFC[bp]
20303 4E9F           8D66         F2            lea	sp,2+..FFFC[bp]
20304 4EA2           75           45            jne 	.11C
20305                       00004EA4            .11D:
20306                                           ! 2354         {
20307                                           ! 2355          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20308                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20309 4EA4           8B46         F6            mov	ax,-$A[bp]
20310 4EA7           8B4E         F8            mov	cx,-8[bp]
20311 4EAA           F7E9                       imul	cx
20312                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20313 4EAC           89C3                       mov	bx,ax
20314 4EAE           8A46         FD            mov	al,-3[bp]
20315 4EB1           30E4                       xor	ah,ah
20316 4EB3           93                         xchg	ax,bx
20317 4EB4           89D9                       mov	cx,bx
20318 4EB6           F7E9                       imul	cx
20319                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20320 4EB8           89C3                       mov	bx,ax
20321 4EBA           8A46         FC            mov	al,-4[bp]
20322 4EBD           30E4                       xor	ah,ah
20323 4EBF           93                         xchg	ax,bx
20324 4EC0           89D9                       mov	cx,bx
20325 4EC2           F7E9                       imul	cx
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4EC4           50                         push	ax
20328                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20329 4EC5           8A46         06            mov	al,6[bp]
20330 4EC8           30E4                       xor	ah,ah
20331 4ECA           50                         push	ax
20332                                           ! Debug: list int = const 0 (used reg = )
20333 4ECB           31C0                       xor	ax,ax
20334 4ECD           50                         push	ax
20335                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20336 4ECE           8A46         FE            mov	al,-2[bp]
20337 4ED1           30E4                       xor	ah,ah
20338 4ED3           B1                     03  mov	cl,*3
20339 4ED5           D3E0                       shl	ax,cl
20340 4ED7           89C3                       mov	bx,ax
20341 4ED9           81C3                 01FD  add	bx,#_vga_modes
20342                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20343 4EDD           FF77         04            push	4[bx]
20344                                           ! Debug: func () void = memsetb+0 (used reg = )
20345 4EE0           E8         2C5B            call	_memsetb
20346 4EE3           83C4                   08  add	sp,*8
20347                                           !BCC_EOS
20348                                           ! 2356         }
20349                                           ! 2357        else
20350                                           ! 2358         {
20351 4EE6           E9         0144            br 	.122
20352                       00004EE9            .11C:
20353                                           ! 2359          if(bpp==2)
20354                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20355 4EE9           8A46         FC            mov	al,-4[bp]
20356 4EEC           3C                     02  cmp	al,*2
20357 4EEE           75           1C            jne 	.123
20358                       00004EF0            .124:
20359                                           ! 2360           {
20360                                           ! 2361            cul<<=1;
20361                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20362 4EF0           8A46         0A            mov	al,$A[bp]
20363 4EF3           30E4                       xor	ah,ah
20364 4EF5           D1E0                       shl	ax,*1
20365 4EF7           8846         0A            mov	$A[bp],al
20366                                           !BCC_EOS
20367                                           ! 2362            cols<<=1;
20368                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20369 4EFA           8A46         FB            mov	al,-5[bp]
20370 4EFD           30E4                       xor	ah,ah
20371 4EFF           D1E0                       shl	ax,*1
20372 4F01           8846         FB            mov	-5[bp],al
20373                                           !BCC_EOS
20374                                           ! 2363            nbcols<<=1;
20375                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20376 4F04           8B46         F8            mov	ax,-8[bp]
20377 4F07           D1E0                       shl	ax,*1
20378 4F09           8946         F8            mov	-8[bp],ax
20379                                           !BCC_EOS
20380                                           ! 2364           }
20381                                           ! 2365          if(dir==1)
20382                       00004F0C            .123:
20383                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20384 4F0C           8A46         12            mov	al,$12[bp]
20385 4F0F           3C                     01  cmp	al,*1
20386 4F11         0F85         008A            bne 	.125
20387                       00004F15            .126:
20388                                           ! 2366           {for(i=rul;i<=rlr;i++)
20389                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20390 4F15           8A46         08            mov	al,8[bp]
20391 4F18           30E4                       xor	ah,ah
20392 4F1A           8946         F4            mov	-$C[bp],ax
20393                                           !BCC_EOS
20394                                           !BCC_EOS
20395                                           ! 2367             {
20396 4F1D           EB           73            jmp .129
20397                       00004F1F            .12A:
20398                                           ! 2368              if((i+nblines>rlr)||(nblines==0))
20399                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20400 4F1F           8B46         F4            mov	ax,-$C[bp]
20401 4F22           0246         04            add	al,4[bp]
20402 4F25           80D4                   00  adc	ah,*0
20403                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20404 4F28           50                         push	ax
20405 4F29           8A46         0C            mov	al,$C[bp]
20406 4F2C           30E4                       xor	ah,ah
20407 4F2E           3B46         F0            cmp	ax,0+..FFFC[bp]
20408 4F31           8D66         F2            lea	sp,2+..FFFC[bp]
20409 4F34           72           07            jb  	.12C
20410                       00004F36            .12D:
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4F36           8A46         04            mov	al,4[bp]
20413 4F39           84C0                       test	al,al
20414 4F3B           75           26            jne 	.12B
20415                       00004F3D            .12C:
20416                                           ! 2369               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20417                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20418 4F3D           8A46         06            mov	al,6[bp]
20419 4F40           30E4                       xor	ah,ah
20420 4F42           50                         push	ax
20421                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20422 4F43           8A46         FD            mov	al,-3[bp]
20423 4F46           30E4                       xor	ah,ah
20424 4F48           50                         push	ax
20425                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20426 4F49           FF76         F8            push	-8[bp]
20427                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20428 4F4C           8A46         FB            mov	al,-5[bp]
20429 4F4F           30E4                       xor	ah,ah
20430 4F51           50                         push	ax
20431                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20432 4F52           FF76         F4            push	-$C[bp]
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F55           8A46         0A            mov	al,$A[bp]
20435 4F58           30E4                       xor	ah,ah
20436 4F5A           50                         push	ax
20437                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20438 4F5B           E8         F92E            call	_vgamem_fill_cga
20439 4F5E           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2370              else
20442                                           ! 2371               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20443 4F61           EB           28            jmp .12E
20444                       00004F63            .12B:
20445                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20446 4F63           8A46         FD            mov	al,-3[bp]
20447 4F66           30E4                       xor	ah,ah
20448 4F68           50                         push	ax
20449                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20450 4F69           FF76         F8            push	-8[bp]
20451                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20452 4F6C           8A46         FB            mov	al,-5[bp]
20453 4F6F           30E4                       xor	ah,ah
20454 4F71           50                         push	ax
20455                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20456 4F72           FF76         F4            push	-$C[bp]
20457                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20458 4F75           8B46         F4            mov	ax,-$C[bp]
20459 4F78           0246         04            add	al,4[bp]
20460 4F7B           80D4                   00  adc	ah,*0
20461                                           ! Debug: list unsigned int = ax+0 (used reg = )
20462 4F7E           50                         push	ax
20463                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20464 4F7F           8A46         0A            mov	al,$A[bp]
20465 4F82           30E4                       xor	ah,ah
20466 4F84           50                         push	ax
20467                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20468 4F85           E8         F7F2            call	_vgamem_copy_cga
20469 4F88           83C4                   0C  add	sp,*$C
20470                                           !BCC_EOS
20471                                           ! 2372             }
20472                       00004F8B            .12E:
20473                                           ! 2373           }
20474                       00004F8B            .128:
20475                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20476 4F8B           8B46         F4            mov	ax,-$C[bp]
20477 4F8E           40                         inc	ax
20478 4F8F           8946         F4            mov	-$C[bp],ax
20479                       00004F92            .129:
20480                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20481 4F92           8A46         0C            mov	al,$C[bp]
20482 4F95           30E4                       xor	ah,ah
20483 4F97           3B46         F4            cmp	ax,-$C[bp]
20484 4F9A           73           83            jae	.12A
20485                       00004F9C            .12F:
20486                       00004F9C            .127:
20487                                           ! 2374          else
20488                                           ! 2375           {for(
20489 4F9C           E9         008E            br 	.130
20490                       00004F9F            .125:
20491                                           ! 2375 i=rlr;i>=rul;i--)
20492                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20493 4F9F           8A46         0C            mov	al,$C[bp]
20494 4FA2           30E4                       xor	ah,ah
20495 4FA4           8946         F4            mov	-$C[bp],ax
20496                                           !BCC_EOS
20497                                           !BCC_EOS
20498                                           ! 2376             {
20499 4FA7           EB           78            jmp .133
20500                       00004FA9            .134:
20501                                           ! 2377              if((i<rul+nblines)||(nblines==0))
20502                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20503 4FA9           8A46         08            mov	al,8[bp]
20504 4FAC           30E4                       xor	ah,ah
20505 4FAE           0246         04            add	al,4[bp]
20506 4FB1           80D4                   00  adc	ah,*0
20507                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20508 4FB4           3B46         F4            cmp	ax,-$C[bp]
20509 4FB7           77           07            ja  	.136
20510                       00004FB9            .137:
20511                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20512 4FB9           8A46         04            mov	al,4[bp]
20513 4FBC           84C0                       test	al,al
20514 4FBE           75           26            jne 	.135
20515                       00004FC0            .136:
20516                                           ! 2378               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20517                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20518 4FC0           8A46         06            mov	al,6[bp]
20519 4FC3           30E4                       xor	ah,ah
20520 4FC5           50                         push	ax
20521                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20522 4FC6           8A46         FD            mov	al,-3[bp]
20523 4FC9           30E4                       xor	ah,ah
20524 4FCB           50                         push	ax
20525                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20526 4FCC           FF76         F8            push	-8[bp]
20527                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20528 4FCF           8A46         FB            mov	al,-5[bp]
20529 4FD2           30E4                       xor	ah,ah
20530 4FD4           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 4FD5           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 4FD8           8A46         0A            mov	al,$A[bp]
20535 4FDB           30E4                       xor	ah,ah
20536 4FDD           50                         push	ax
20537                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20538 4FDE           E8         F8AB            call	_vgamem_fill_cga
20539 4FE1           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2379              else
20542                                           ! 2380               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20543 4FE4           EB           28            jmp .138
20544                       00004FE6            .135:
20545                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20546 4FE6           8A46         FD            mov	al,-3[bp]
20547 4FE9           30E4                       xor	ah,ah
20548 4FEB           50                         push	ax
20549                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20550 4FEC           FF76         F8            push	-8[bp]
20551                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20552 4FEF           8A46         FB            mov	al,-5[bp]
20553 4FF2           30E4                       xor	ah,ah
20554 4FF4           50                         push	ax
20555                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20556 4FF5           8B46         F4            mov	ax,-$C[bp]
20557 4FF8           2A46         04            sub	al,4[bp]
20558 4FFB           80DC                   00  sbb	ah,*0
20559                                           ! Debug: list unsigned int = ax+0 (used reg = )
20560 4FFE           50                         push	ax
20561                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20562 4FFF           FF76         F4            push	-$C[bp]
20563                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20564 5002           8A46         0A            mov	al,$A[bp]
20565 5005           30E4                       xor	ah,ah
20566 5007           50                         push	ax
20567                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20568 5008           E8         F76F            call	_vgamem_copy_cga
20569 500B           83C4                   0C  add	sp,*$C
20570                                           !BCC_EOS
20571                                           ! 2381              if (i>rlr) break;
20572                       0000500E            .138:
20573                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20574 500E           8A46         0C            mov	al,$C[bp]
20575 5011           30E4                       xor	ah,ah
20576 5013           3B46         F4            cmp	ax,-$C[bp]
20577 5016           73           02            jae 	.139
20578                       00005018            .13A:
20579 5018           EB           13            jmp .131
20580                                           !BCC_EOS
20581                                           ! 2382             }
20582                       0000501A            .139:
20583                                           ! 2383           }
20584                       0000501A            .132:
20585                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20586 501A           8B46         F4            mov	ax,-$C[bp]
20587 501D           48                         dec	ax
20588 501E           8946         F4            mov	-$C[bp],ax
20589                       00005021            .133:
20590                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20591 5021           8A46         08            mov	al,8[bp]
20592 5024           30E4                       xor	ah,ah
20593 5026           3B46         F4            cmp	ax,-$C[bp]
20594 5029         0F86         FF7C            blos	.134
20595                       0000502D            .13B:
20596                       0000502D            .131:
20597                                           ! 2384         }
20598                       0000502D            .130:
20599                                           ! 2385        break;
20600                       0000502D            .122:
20601 502D           EB           14            jmp .F8
20602                                           !BCC_EOS
20603                                           ! 2386     }
20604                                           ! 2387   }
20605 502F           EB           12            jmp .F8
20606                       00005031            .FA:
20607 5031           2C                     02  sub	al,*2
20608 5033         0F84         FE1F            beq 	.11B
20609 5037           2C                     01  sub	al,*1
20610 5039         0F84         FC63            beq 	.FC
20611 503D           2C                     01  sub	al,*1
20612 503F         0F84         FC5D            beq 	.FB
20613                       00005043            .F8:
20614                       FFFFFFF0            ..FFFC	=	-$10
20615                                           ! 2388 }
20616                       00005043            .F7:
20617 5043           89EC                       mov	sp,bp
20618 5045           5D                         pop	bp
20619 5046           C3                         ret
20620                                           ! 2389 static void biosfn_read_char_attr (page,car)
20621                                           ! Register BX used in function biosfn_scroll
20622                                           ! 2390 Bit8u page;Bit16u *car;
20623                       00005047            _biosfn_read_char_attr:
20624                                           !BCC_EOS
20625                                           !BCC_EOS
20626                                           ! 2391 {Bit16u ss=get_SS();
20627 5047           55                         push	bp
20628 5048           89E5                       mov	bp,sp
20629 504A           4C                         dec	sp
20630 504B           4C                         dec	sp
20631                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20632 504C           E8         2C25            call	_get_SS
20633                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20634 504F           8946         FE            mov	-2[bp],ax
20635                                           !BCC_EOS
20636                                           ! 2392  Bit8u xcurs,ycurs,mode,line;
20637                                           !BCC_EOS
20638                                           ! 2393  Bit16u nbcols,nbrows,address;
20639                                           !BCC_EOS
20640                                           ! 2394  Bit16u cursor,dummy;
20641                                           !BCC_EOS
20642                                           ! 2395  mode=read_byte(0x40,0x49);
20643 5052           83C4                   F2  add	sp,*-$E
20644                                           ! Debug: list int = const $49 (used reg = )
20645 5055           B8                   0049  mov	ax,*$49
20646 5058           50                         push	ax
20647                                           ! Debug: list int = const $40 (used reg = )
20648 5059           B8                   0040  mov	ax,*$40
20649 505C           50                         push	ax
20650                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20651 505D           E8         2B88            call	_read_byte
20652 5060           83C4                   04  add	sp,*4
20653                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20654 5063           8846         FB            mov	-5[bp],al
20655                                           !BCC_EOS
20656                                           ! 2396  line=find_vga_entry(mode);
20657                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20658 5066           8A46         FB            mov	al,-5[bp]
20659 5069           30E4                       xor	ah,ah
20660 506B           50                         push	ax
20661                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20662 506C           E8         2A8D            call	_find_vga_entry
20663 506F           44                         inc	sp
20664 5070           44                         inc	sp
20665                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20666 5071           8846         FA            mov	-6[bp],al
20667                                           !BCC_EOS
20668                                           ! 2397  if(line==0xFF)return;
20669                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20670 5074           8A46         FA            mov	al,-6[bp]
20671 5077           3C                     FF  cmp	al,#$FF
20672 5079           75           04            jne 	.13C
20673                       0000507B            .13D:
20674 507B           89EC                       mov	sp,bp
20675 507D           5D                         pop	bp
20676 507E           C3                         ret
20677                                           !BCC_EOS
20678                                           ! 2398  biosfn_get_cursor_pos(page,&dummy,&cursor);
20679                       0000507F            .13C:
20680                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20681 507F           8D5E         F2            lea	bx,-$E[bp]
20682 5082           53                         push	bx
20683                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20684 5083           8D5E         F0            lea	bx,-$10[bp]
20685 5086           53                         push	bx
20686                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20687 5087           8A46         04            mov	al,4[bp]
20688 508A           30E4                       xor	ah,ah
20689 508C           50                         push	ax
20690                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20691 508D           E8         F3B9            call	_biosfn_get_cursor_pos
20692 5090           83C4                   06  add	sp,*6
20693                                           !BCC_EOS
20694                                           ! 2399  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20695                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20696 5093           8A46         F2            mov	al,-$E[bp]
20697                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20698 5096           8846         FD            mov	-3[bp],al
20699                                           !BCC_EOS
20700                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20701 5099           8B46         F2            mov	ax,-$E[bp]
20702 509C           30C0                       xor	al,al
20703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20704 509E           88E0                       mov	al,ah
20705 50A0           30E4                       xor	ah,ah
20706                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20707 50A2           8846         FC            mov	-4[bp],al
20708                                           !BCC_EOS
20709                                           ! 2400  nbrows=read_byte(0x40,0x84)+1;
20710                                           ! Debug: list int = const $84 (used reg = )
20711 50A5           B8                   0084  mov	ax,#$84
20712 50A8           50                         push	ax
20713                                           ! Debug: list int = const $40 (used reg = )
20714 50A9           B8                   0040  mov	ax,*$40
20715 50AC           50                         push	ax
20716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20717 50AD           E8         2B38            call	_read_byte
20718 50B0           83C4                   04  add	sp,*4
20719                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20720 50B3           30E4                       xor	ah,ah
20721                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20722 50B5           40                         inc	ax
20723 50B6           8946         F6            mov	-$A[bp],ax
20724                                           !BCC_EOS
20725                                           ! 2401  nbcols=read_word(0x40,0x4A);
20726                                           ! Debug: list int = const $4A (used reg = )
20727 50B9           B8                   004A  mov	ax,*$4A
20728 50BC           50                         push	ax
20729                                           ! Debug: list int = const $40 (used reg = )
20730 50BD           B8                   0040  mov	ax,*$40
20731 50C0           50                         push	ax
20732                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20733 50C1           E8         2B37            call	_read_word
20734 50C4           83C4                   04  add	sp,*4
20735                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20736 50C7           8946         F8            mov	-8[bp],ax
20737                                           !BCC_EOS
20738                                           ! 2402  if(vga_modes[line].class==0x00)
20739                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20740 50CA           8A46         FA            mov	al,-6[bp]
20741 50CD           30E4                       xor	ah,ah
20742 50CF           B1                     03  mov	cl,*3
20743 50D1           D3E0                       shl	ax,cl
20744 50D3           89C3                       mov	bx,ax
20745 50D5           81C3                 01FD  add	bx,#_vga_modes
20746                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20747 50D9           8A47         01            mov	al,1[bx]
20748 50DC           84C0                       test	al,al
20749 50DE           75           5E            jne 	.13E
20750                       000050E0            .13F:
20751                                           ! 2403   {
20752                                           ! 2404    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20753                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20754 50E0           8A46         FC            mov	al,-4[bp]
20755 50E3           30E4                       xor	ah,ah
20756 50E5           8B4E         F8            mov	cx,-8[bp]
20757 50E8           F7E9                       imul	cx
20758                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20759                                           ! Debug: expression subtree swapping
20760 50EA           0246         FD            add	al,-3[bp]
20761 50ED           80D4                   00  adc	ah,*0
20762                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20763 50F0           D1E0                       shl	ax,*1
20764 50F2           50                         push	ax
20765                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20766 50F3           8B46         F8            mov	ax,-8[bp]
20767 50F6           8B4E         F6            mov	cx,-$A[bp]
20768 50F9           F7E9                       imul	cx
20769                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20770 50FB           D1E0                       shl	ax,*1
20771                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20772 50FD           0C                     FF  or	al,#$FF
20773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20774                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20775 50FF           89C3                       mov	bx,ax
20776 5101           8A46         04            mov	al,4[bp]
20777 5104           30E4                       xor	ah,ah
20778 5106           93                         xchg	ax,bx
20779 5107           40                         inc	ax
20780 5108           89D9                       mov	cx,bx
20781 510A           F7E9                       imul	cx
20782                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20783 510C           0346         EE            add	ax,-$12[bp]
20784 510F           44                         inc	sp
20785 5110           44                         inc	sp
20786                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20787 5111           8946         F4            mov	-$C[bp],ax
20788                                           !BCC_EOS
20789                                           ! 2405    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20790                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20791 5114           FF76         F4            push	-$C[bp]
20792                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20793 5117           8A46         FA            mov	al,-6[bp]
20794 511A           30E4                       xor	ah,ah
20795 511C           B1                     03  mov	cl,*3
20796 511E           D3E0                       shl	ax,cl
20797 5120           89C3                       mov	bx,ax
20798 5122           81C3                 01FD  add	bx,#_vga_modes
20799                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20800 5126           FF77         04            push	4[bx]
20801                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20802 5129           E8         2ACF            call	_read_word
20803 512C           83C4                   04  add	sp,*4
20804                                           ! Debug: list unsigned short = ax+0 (used reg = )
20805 512F           50                         push	ax
20806                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20807 5130           FF76         06            push	6[bp]
20808                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20809 5133           FF76         FE            push	-2[bp]
20810                                           ! Debug: func () void = write_word+0 (used reg = )
20811 5136           E8         2AED            call	_write_word
20812 5139           83C4                   06  add	sp,*6
20813                                           !BCC_EOS
20814                                           ! 2406   }
20815                                           ! 2407  else
20816                                           ! 2408   {
20817 513C           EB           00            jmp .140
20818                       0000513E            .13E:
20819                                           ! 2409   }
20820                                           ! 2410 }
20821                       0000513E            .140:
20822 513E           89EC                       mov	sp,bp
20823 5140           5D                         pop	bp
20824 5141           C3                         ret
20825                                           ! 2411 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20826                                           ! Register BX used in function biosfn_read_char_attr
20827                                           ! 2412 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20828                       00005142            _write_gfx_char_pl4:
20829                                           !BCC_EOS
20830                                           !BCC_EOS
20831                                           !BCC_EOS
20832                                           !BCC_EOS
20833                                           !BCC_EOS
20834                                           !BCC_EOS
20835                                           ! 2413 {
20836                                           ! 2414  Bit8u i,j,mask;
20837                                           !BCC_EOS
20838                                           ! 2415  Bit8u *fdata;
20839                                           !BCC_EOS
20840                                           ! 2416  Bit16u addr,dest,src;
20841                                           !BCC_EOS
20842                                           ! 2417  switch(cheight)
20843 5142           55                         push	bp
20844 5143           89E5                       mov	bp,sp
20845 5145           83C4                   F4  add	sp,*-$C
20846 5148           8A46         0E            mov	al,$E[bp]
20847                                           ! 2418   {case 14:
20848 514B           EB           18            jmp .143
20849                                           ! 2419     fdata = &vgafont14;
20850                       0000514D            .144:
20851                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20852 514D           BB                   1761  mov	bx,#_vgafont14
20853 5150           895E         FA            mov	-6[bp],bx
20854                                           !BCC_EOS
20855                                           ! 2420     break;
20856 5153           EB           1A            jmp .141
20857                                           !BCC_EOS
20858                                           ! 2421    case 16:
20859                                           ! 2422     fdata = &vgafont16;
20860                       00005155            .145:
20861                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20862 5155           BB                   2561  mov	bx,#_vgafont16
20863 5158           895E         FA            mov	-6[bp],bx
20864                                           !BCC_EOS
20865                                           ! 2423     break;
20866 515B           EB           12            jmp .141
20867                                           !BCC_EOS
20868                                           ! 2424    default:
20869                                           ! 2425     fdata = &vgafont8;
20870                       0000515D            .146:
20871                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20872 515D           BB                   0F61  mov	bx,#_vgafont8
20873 5160           895E         FA            mov	-6[bp],bx
20874                                           !BCC_EOS
20875                                           ! 2426   }
20876                                           ! 2427  addr=xcurs+ycurs*cheight*nbcols;
20877 5163           EB           0A            jmp .141
20878                       00005165            .143:
20879 5165           2C                     0E  sub	al,*$E
20880 5167           74           E4            je 	.144
20881 5169           2C                     02  sub	al,*2
20882 516B           74           E8            je 	.145
20883 516D           EB           EE            jmp	.146
20884                       0000516F            .141:
20885                       FFFFFFF2            ..FFFB	=	-$E
20886                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20887 516F           8A46         0E            mov	al,$E[bp]
20888 5172           30E4                       xor	ah,ah
20889 5174           89C3                       mov	bx,ax
20890 5176           8A46         0A            mov	al,$A[bp]
20891 5179           30E4                       xor	ah,ah
20892 517B           89D9                       mov	cx,bx
20893 517D           F7E9                       imul	cx
20894                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20895 517F           89C3                       mov	bx,ax
20896 5181           8A46         0C            mov	al,$C[bp]
20897 5184           30E4                       xor	ah,ah
20898 5186           93                         xchg	ax,bx
20899 5187           89D9                       mov	cx,bx
20900 5189           F7E9                       imul	cx
20901                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20902                                           ! Debug: expression subtree swapping
20903 518B           0246         08            add	al,8[bp]
20904 518E           80D4                   00  adc	ah,*0
20905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20906 5191           8946         F8            mov	-8[bp],ax
20907                                           !BCC_EOS
20908                                           ! 2428  src = car * cheight;
20909                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20910 5194           8A46         0E            mov	al,$E[bp]
20911 5197           30E4                       xor	ah,ah
20912 5199           89C3                       mov	bx,ax
20913 519B           8A46         04            mov	al,4[bp]
20914 519E           30E4                       xor	ah,ah
20915 51A0           89D9                       mov	cx,bx
20916 51A2           F7E9                       imul	cx
20917                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20918 51A4           8946         F4            mov	-$C[bp],ax
20919                                           !BCC_EOS
20920                                           ! 2429  outw(0x3c4, 0x0f02);
20921                                           ! Debug: list int = const $F02 (used reg = )
20922 51A7           B8                   0F02  mov	ax,#$F02
20923 51AA           50                         push	ax
20924                                           ! Debug: list int = const $3C4 (used reg = )
20925 51AB           B8                   03C4  mov	ax,#$3C4
20926 51AE           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51AF           E8         2AB2            call	_outw
20929 51B2           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2430  outw(0x3ce, 0x0205);
20932                                           ! Debug: list int = const $205 (used reg = )
20933 51B5           B8                   0205  mov	ax,#$205
20934 51B8           50                         push	ax
20935                                           ! Debug: list int = const $3CE (used reg = )
20936 51B9           B8                   03CE  mov	ax,#$3CE
20937 51BC           50                         push	ax
20938                                           ! Debug: func () void = outw+0 (used reg = )
20939 51BD           E8         2AA4            call	_outw
20940 51C0           83C4                   04  add	sp,*4
20941                                           !BCC_EOS
20942                                           ! 2431  if(attr&0x80)
20943                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20944 51C3           8A46         06            mov	al,6[bp]
20945 51C6           24                     80  and	al,#$80
20946 51C8           84C0                       test	al,al
20947 51CA           74           10            je  	.147
20948                       000051CC            .148:
20949                                           ! 2432   {
20950                                           ! 2433    outw(0x3ce, 0x1803);
20951                                           ! Debug: list int = const $1803 (used reg = )
20952 51CC           B8                   1803  mov	ax,#$1803
20953 51CF           50                         push	ax
20954                                           ! Debug: list int = const $3CE (used reg = )
20955 51D0           B8                   03CE  mov	ax,#$3CE
20956 51D3           50                         push	ax
20957                                           ! Debug: func () void = outw+0 (used reg = )
20958 51D4           E8         2A8D            call	_outw
20959 51D7           83C4                   04  add	sp,*4
20960                                           !BCC_EOS
20961                                           ! 2434   }
20962                                           ! 2435  else
20963                                           ! 2436   {
20964 51DA           EB           0E            jmp .149
20965                       000051DC            .147:
20966                                           ! 2437    outw(0x3ce, 0x0003);
20967                                           ! Debug: list int = const 3 (used reg = )
20968 51DC           B8                   0003  mov	ax,*3
20969 51DF           50                         push	ax
20970                                           ! Debug: list int = const $3CE (used reg = )
20971 51E0           B8                   03CE  mov	ax,#$3CE
20972 51E3           50                         push	ax
20973                                           ! Debug: func () void = outw+0 (used reg = )
20974 51E4           E8         2A7D            call	_outw
20975 51E7           83C4                   04  add	sp,*4
20976                                           !BCC_EOS
20977                                           ! 2438   }
20978                                           ! 2439  for(i=0;i<cheight;i++)
20979                       000051EA            .149:
20980                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20981 51EA           30C0                       xor	al,al
20982 51EC           8846         FF            mov	-1[bp],al
20983                                           !BCC_EOS
20984                                           !BCC_EOS
20985                                           ! 2440   {
20986 51EF           E9         00A6            br 	.14C
20987                       000051F2            .14D:
20988                                           ! 2441    dest=addr+i*nbcols;
20989                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20990 51F2           8A46         0C            mov	al,$C[bp]
20991 51F5           30E4                       xor	ah,ah
20992 51F7           89C3                       mov	bx,ax
20993 51F9           8A46         FF            mov	al,-1[bp]
20994 51FC           30E4                       xor	ah,ah
20995 51FE           89D9                       mov	cx,bx
20996 5200           F7E9                       imul	cx
20997                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20998                                           ! Debug: expression subtree swapping
20999 5202           0346         F8            add	ax,-8[bp]
21000                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21001 5205           8946         F6            mov	-$A[bp],ax
21002                                           !BCC_EOS
21003                                           ! 2442    for(j=0;j<8;j++)
21004                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21005 5208           30C0                       xor	al,al
21006 520A           8846         FE            mov	-2[bp],al
21007                                           !BCC_EOS
21008                                           !BCC_EOS
21009                                           ! 2443     {
21010 520D           EB           79            jmp .150
21011                       0000520F            .151:
21012                                           ! 2444      mask=0x80>>j;
21013                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21014 520F           8A46         FE            mov	al,-2[bp]
21015 5212           30E4                       xor	ah,ah
21016 5214           89C3                       mov	bx,ax
21017 5216           B8                   0080  mov	ax,#$80
21018 5219           89D9                       mov	cx,bx
21019 521B           D3F8                       sar	ax,cl
21020                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21021 521D           8846         FD            mov	-3[bp],al
21022                                           !BCC_EOS
21023                                           ! 2445      outw(0x3ce, (mask << 8) | 0x08);
21024                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21025 5220           8A46         FD            mov	al,-3[bp]
21026 5223           30E4                       xor	ah,ah
21027 5225           88C4                       mov	ah,al
21028 5227           30C0                       xor	al,al
21029                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21030 5229           0C                     08  or	al,*8
21031                                           ! Debug: list unsigned int = ax+0 (used reg = )
21032 522B           50                         push	ax
21033                                           ! Debug: list int = const $3CE (used reg = )
21034 522C           B8                   03CE  mov	ax,#$3CE
21035 522F           50                         push	ax
21036                                           ! Debug: func () void = outw+0 (used reg = )
21037 5230           E8         2A31            call	_outw
21038 5233           83C4                   04  add	sp,*4
21039                                           !BCC_EOS
21040                                           ! 2446      read_byte(0xa000,dest);
21041                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21042 5236           FF76         F6            push	-$A[bp]
21043                                           ! Debug: list unsigned int = const $A000 (used reg = )
21044 5239           B8                   A000  mov	ax,#$A000
21045 523C           50                         push	ax
21046                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21047 523D           E8         29A8            call	_read_byte
21048 5240           83C4                   04  add	sp,*4
21049                                           !BCC_EOS
21050                                           ! 2447      if(fdata[src+i]&mask)
21051                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21052 5243           8B46         F4            mov	ax,-$C[bp]
21053 5246           0246         FF            add	al,-1[bp]
21054 5249           80D4                   00  adc	ah,*0
21055                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21056 524C           0346         FA            add	ax,-6[bp]
21057 524F           89C3                       mov	bx,ax
21058                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21059 5251           8A07                       mov	al,[bx]
21060 5253           2246         FD            and	al,-3[bp]
21061 5256           84C0                       test	al,al
21062 5258           74           17            je  	.152
21063                       0000525A            .153:
21064                                           ! 2448       {
21065                                           ! 2449        write_byte(0xa000,dest,attr&0x0f);
21066                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21067 525A           8A46         06            mov	al,6[bp]
21068 525D           24                     0F  and	al,*$F
21069                                           ! Debug: list unsigned char = al+0 (used reg = )
21070 525F           30E4                       xor	ah,ah
21071 5261           50                         push	ax
21072                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21073 5262           FF76         F6            push	-$A[bp]
21074                                           ! Debug: list unsigned int = const $A000 (used reg = )
21075 5265           B8                   A000  mov	ax,#$A000
21076 5268           50                         push	ax
21077                                           ! Debug: func () void = write_byte+0 (used reg = )
21078 5269           E8         29A2            call	_write_byte
21079 526C           83C4                   06  add	sp,*6
21080                                           !BCC_EOS
21081                                           ! 2450       }
21082                                           ! 2451      else
21083                                           ! 2452       {
21084 526F           EB           10            jmp .154
21085                       00005271            .152:
21086                                           ! 2453        write_byte(0xa000,dest,0x00);
21087                                           ! Debug: list int = const 0 (used reg = )
21088 5271           31C0                       xor	ax,ax
21089 5273           50                         push	ax
21090                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21091 5274           FF76         F6            push	-$A[bp]
21092                                           ! Debug: list unsigned int = const $A000 (used reg = )
21093 5277           B8                   A000  mov	ax,#$A000
21094 527A           50                         push	ax
21095                                           ! Debug: func () void = write_byte+0 (used reg = )
21096 527B           E8         2990            call	_write_byte
21097 527E           83C4                   06  add	sp,*6
21098                                           !BCC_EOS
21099                                           ! 2454       }
21100                                           ! 2455     }
21101                       00005281            .154:
21102                                           ! 2456   }
21103                       00005281            .14F:
21104                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21105 5281           8A46         FE            mov	al,-2[bp]
21106 5284           40                         inc	ax
21107 5285           8846         FE            mov	-2[bp],al
21108                       00005288            .150:
21109                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21110 5288           8A46         FE            mov	al,-2[bp]
21111 528B           3C                     08  cmp	al,*8
21112 528D         0F82         FF7E            blo 	.151
21113                       00005291            .155:
21114                       00005291            .14E:
21115                                           ! 2457 #asm
21116                       00005291            .14B:
21117                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21118 5291           8A46         FF            mov	al,-1[bp]
21119 5294           40                         inc	ax
21120 5295           8846         FF            mov	-1[bp],al
21121                       00005298            .14C:
21122                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21123 5298           8A46         FF            mov	al,-1[bp]
21124 529B           3A46         0E            cmp	al,$E[bp]
21125 529E         0F82         FF50            blo 	.14D
21126                       000052A2            .156:
21127                       000052A2            .14A:
21128                                           !BCC_EOS
21129                                           !BCC_ASM
21130                       0000000A            _write_gfx_char_pl4.j	set	$A
21131                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21132                       00000006            _write_gfx_char_pl4.fdata	set	6
21133                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21134                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21135                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21136                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21137                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21138                       0000000B            _write_gfx_char_pl4.i	set	$B
21139                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21140                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21141                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21142                       00000009            _write_gfx_char_pl4.mask	set	9
21143                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21144                       00000002            _write_gfx_char_pl4.dest	set	2
21145                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21146                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21147                       00000008            .write_gfx_char_pl4.xcurs	set	8
21148                       00000000            _write_gfx_char_pl4.src	set	0
21149                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21150                       00000012            _write_gfx_char_pl4.attr	set	$12
21151                       00000006            .write_gfx_char_pl4.attr	set	6
21152                       00000010            _write_gfx_char_pl4.car	set	$10
21153                       00000004            .write_gfx_char_pl4.car	set	4
21154                       00000004            _write_gfx_char_pl4.addr	set	4
21155                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21156 52A2           BA                   03CE    mov dx, # 0x3ce
21157 52A5           B8                   FF08    mov ax, #0xff08
21158 52A8           EF                           out dx, ax
21159 52A9           B8                   0005    mov ax, #0x0005
21160 52AC           EF                           out dx, ax
21161 52AD           B8                   0003    mov ax, #0x0003
21162 52B0           EF                           out dx, ax
21163                                           ! 2465 endasm
21164                                           !BCC_ENDASM
21165                                           !BCC_EOS
21166                                           ! 2466 }
21167 52B1           89EC                       mov	sp,bp
21168 52B3           5D                         pop	bp
21169 52B4           C3                         ret
21170                                           ! 2467 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21171                                           ! Register BX used in function write_gfx_char_pl4
21172                                           ! 2468 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21173                       000052B5            _write_gfx_char_cga:
21174                                           !BCC_EOS
21175                                           !BCC_EOS
21176                                           !BCC_EOS
21177                                           !BCC_EOS
21178                                           !BCC_EOS
21179                                           !BCC_EOS
21180                                           ! 2469 {
21181                                           ! 2470  Bit8u i,j,
21182                                           ! 2470 mask,data;
21183                                           !BCC_EOS
21184                                           ! 2471  Bit8u *fdata;
21185                                           !BCC_EOS
21186                                           ! 2472  Bit16u addr,dest,src;
21187                                           !BCC_EOS
21188                                           ! 2473  fdata = &vgafont8;
21189 52B5           55                         push	bp
21190 52B6           89E5                       mov	bp,sp
21191 52B8           83C4                   F4  add	sp,*-$C
21192                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21193 52BB           BB                   0F61  mov	bx,#_vgafont8
21194 52BE           895E         FA            mov	-6[bp],bx
21195                                           !BCC_EOS
21196                                           ! 2474  addr=(xcurs*bpp)+ycurs*320;
21197                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21198 52C1           8A46         0A            mov	al,$A[bp]
21199 52C4           30E4                       xor	ah,ah
21200 52C6           B9                   0140  mov	cx,#$140
21201 52C9           F7E9                       imul	cx
21202 52CB           50                         push	ax
21203                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21204 52CC           8A46         0E            mov	al,$E[bp]
21205 52CF           30E4                       xor	ah,ah
21206 52D1           89C3                       mov	bx,ax
21207 52D3           8A46         08            mov	al,8[bp]
21208 52D6           30E4                       xor	ah,ah
21209 52D8           89D9                       mov	cx,bx
21210 52DA           F7E9                       imul	cx
21211                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21212 52DC           0346         F2            add	ax,-$E[bp]
21213 52DF           44                         inc	sp
21214 52E0           44                         inc	sp
21215                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21216 52E1           8946         F8            mov	-8[bp],ax
21217                                           !BCC_EOS
21218                                           ! 2475  src = car * 8;
21219                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21220 52E4           8A46         04            mov	al,4[bp]
21221 52E7           30E4                       xor	ah,ah
21222 52E9           B1                     03  mov	cl,*3
21223 52EB           D3E0                       shl	ax,cl
21224                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21225 52ED           8946         F4            mov	-$C[bp],ax
21226                                           !BCC_EOS
21227                                           ! 2476  for(i=0;i<8;i++)
21228                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21229 52F0           30C0                       xor	al,al
21230 52F2           8846         FF            mov	-1[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2477   {
21234 52F5           E9         01B3            br 	.159
21235                       000052F8            .15A:
21236                                           ! 2478    dest=addr+(i>>1)*80;
21237                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21238 52F8           8A46         FF            mov	al,-1[bp]
21239 52FB           30E4                       xor	ah,ah
21240 52FD           D1E8                       shr	ax,*1
21241                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21242 52FF           B9                   0050  mov	cx,*$50
21243 5302           F7E9                       imul	cx
21244                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21245                                           ! Debug: expression subtree swapping
21246 5304           0346         F8            add	ax,-8[bp]
21247                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21248 5307           8946         F6            mov	-$A[bp],ax
21249                                           !BCC_EOS
21250                                           ! 2479    if (i & 1) dest += 0x2000;
21251                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21252 530A           8A46         FF            mov	al,-1[bp]
21253 530D           24                     01  and	al,*1
21254 530F           84C0                       test	al,al
21255 5311           74           09            je  	.15B
21256                       00005313            .15C:
21257                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21258 5313           8B46         F6            mov	ax,-$A[bp]
21259 5316           05                   2000  add	ax,#$2000
21260 5319           8946         F6            mov	-$A[bp],ax
21261                                           !BCC_EOS
21262                                           ! 2480    mask = 0x80;
21263                       0000531C            .15B:
21264                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21265 531C           B0                     80  mov	al,#$80
21266 531E           8846         FD            mov	-3[bp],al
21267                                           !BCC_EOS
21268                                           ! 2481    if (bpp == 1)
21269                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21270 5321           8A46         0E            mov	al,$E[bp]
21271 5324           3C                     01  cmp	al,*1
21272 5326         0F85         00B3            bne 	.15D
21273                       0000532A            .15E:
21274                                           ! 2482     {
21275                                           ! 2483      if (attr & 0x80)
21276                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21277 532A           8A46         06            mov	al,6[bp]
21278 532D           24                     80  and	al,#$80
21279 532F           84C0                       test	al,al
21280 5331           74           12            je  	.15F
21281                       00005333            .160:
21282                                           ! 2484       {
21283                                           ! 2485        data = read_byte(0xb800,dest);
21284                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21285 5333           FF76         F6            push	-$A[bp]
21286                                           ! Debug: list unsigned int = const $B800 (used reg = )
21287 5336           B8                   B800  mov	ax,#$B800
21288 5339           50                         push	ax
21289                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21290 533A           E8         28AB            call	_read_byte
21291 533D           83C4                   04  add	sp,*4
21292                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21293 5340           8846         FC            mov	-4[bp],al
21294                                           !BCC_EOS
21295                                           ! 2486       }
21296                                           ! 2487      else
21297                                           ! 2488       {
21298 5343           EB           05            jmp .161
21299                       00005345            .15F:
21300                                           ! 2489        data = 0x00;
21301                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21302 5345           30C0                       xor	al,al
21303 5347           8846         FC            mov	-4[bp],al
21304                                           !BCC_EOS
21305                                           ! 2490       }
21306                                           ! 2491      for(j=0;j<8;j++)
21307                       0000534A            .161:
21308                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21309 534A           30C0                       xor	al,al
21310 534C           8846         FE            mov	-2[bp],al
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           ! 2492       {
21314 534F           EB           6F            jmp .164
21315                       00005351            .165:
21316                                           ! 2493        if (fdata[src+i] & mask)
21317                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21318 5351           8B46         F4            mov	ax,-$C[bp]
21319 5354           0246         FF            add	al,-1[bp]
21320 5357           80D4                   00  adc	ah,*0
21321                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21322 535A           0346         FA            add	ax,-6[bp]
21323 535D           89C3                       mov	bx,ax
21324                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21325 535F           8A07                       mov	al,[bx]
21326 5361           2246         FD            and	al,-3[bp]
21327 5364           84C0                       test	al,al
21328 5366           74           47            je  	.166
21329                       00005368            .167:
21330                                           ! 2494         {
21331                                           ! 2495          if (attr & 0x80)
21332                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21333 5368           8A46         06            mov	al,6[bp]
21334 536B           24                     80  and	al,#$80
21335 536D           84C0                       test	al,al
21336 536F           74           20            je  	.168
21337                       00005371            .169:
21338                                           ! 2496           {
21339                                           ! 2497            data ^= (attr & 0x01) << (7-j);
21340                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21341 5371           B8                   0007  mov	ax,*7
21342 5374           2A46         FE            sub	al,-2[bp]
21343 5377           80DC                   00  sbb	ah,*0
21344 537A           50                         push	ax
21345                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21346 537B           8A46         06            mov	al,6[bp]
21347 537E           24                     01  and	al,*1
21348                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21349 5380           30E4                       xor	ah,ah
21350 5382           8B4E         F2            mov	cx,-$E[bp]
21351 5385           D3E0                       shl	ax,cl
21352 5387           44                         inc	sp
21353 5388           44                         inc	sp
21354                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21355 5389           3246         FC            xor	al,-4[bp]
21356 538C           8846         FC            mov	-4[bp],al
21357                                           !BCC_EOS
21358                                           ! 2498           }
21359                                           ! 2499          else
21360                                           ! 2500           {
21361 538F           EB           1E            jmp .16A
21362                       00005391            .168:
21363                                           ! 2501            data |= (attr & 0x01) << (7-j);
21364                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21365 5391           B8                   0007  mov	ax,*7
21366 5394           2A46         FE            sub	al,-2[bp]
21367 5397           80DC                   00  sbb	ah,*0
21368 539A           50                         push	ax
21369                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21370 539B           8A46         06            mov	al,6[bp]
21371 539E           24                     01  and	al,*1
21372                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21373 53A0           30E4                       xor	ah,ah
21374 53A2           8B4E         F2            mov	cx,-$E[bp]
21375 53A5           D3E0                       shl	ax,cl
21376 53A7           44                         inc	sp
21377 53A8           44                         inc	sp
21378                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21379 53A9           0A46         FC            or	al,-4[bp]
21380 53AC           8846         FC            mov	-4[bp],al
21381                                           !BCC_EOS
21382                                           ! 2502           }
21383                                           ! 2503         }
21384                       000053AF            .16A:
21385                                           ! 2504        mask >>= 1;
21386                       000053AF            .166:
21387                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21388 53AF           8A46         FD            mov	al,-3[bp]
21389 53B2           30E4                       xor	ah,ah
21390 53B4           D1E8                       shr	ax,*1
21391 53B6           8846         FD            mov	-3[bp],al
21392                                           !BCC_EOS
21393                                           ! 2505       }
21394                                           ! 2506      write_byte(0xb800,dest,data);
21395                       000053B9            .163:
21396                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21397 53B9           8A46         FE            mov	al,-2[bp]
21398 53BC           40                         inc	ax
21399 53BD           8846         FE            mov	-2[bp],al
21400                       000053C0            .164:
21401                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21402 53C0           8A46         FE            mov	al,-2[bp]
21403 53C3           3C                     08  cmp	al,*8
21404 53C5           72           8A            jb 	.165
21405                       000053C7            .16B:
21406                       000053C7            .162:
21407                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21408 53C7           8A46         FC            mov	al,-4[bp]
21409 53CA           30E4                       xor	ah,ah
21410 53CC           50                         push	ax
21411                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21412 53CD           FF76         F6            push	-$A[bp]
21413                                           ! Debug: list unsigned int = const $B800 (used reg = )
21414 53D0           B8                   B800  mov	ax,#$B800
21415 53D3           50                         push	ax
21416                                           ! Debug: func () void = write_byte+0 (used reg = )
21417 53D4           E8         2837            call	_write_byte
21418 53D7           83C4                   06  add	sp,*6
21419                                           !BCC_EOS
21420                                           ! 2507     }
21421                                           ! 2508    else
21422                                           ! 2509     {
21423 53DA           E9         00C7            br 	.16C
21424                       000053DD            .15D:
21425                                           ! 2510      while (mask > 0)
21426                                           ! 2511       {
21427 53DD           E9         00BB            br 	.16E
21428                       000053E0            .16F:
21429                                           ! 2512        if (attr & 0x80)
21430                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21431 53E0           8A46         06            mov	al,6[bp]
21432 53E3           24                     80  and	al,#$80
21433 53E5           84C0                       test	al,al
21434 53E7           74           12            je  	.170
21435                       000053E9            .171:
21436                                           ! 2513         {
21437                                           ! 2514          data = read_byte(0xb800,dest);
21438                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21439 53E9           FF76         F6            push	-$A[bp]
21440                                           ! Debug: list unsigned int = const $B800 (used reg = )
21441 53EC           B8                   B800  mov	ax,#$B800
21442 53EF           50                         push	ax
21443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21444 53F0           E8         27F5            call	_read_byte
21445 53F3           83C4                   04  add	sp,*4
21446                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21447 53F6           8846         FC            mov	-4[bp],al
21448                                           !BCC_EOS
21449                                           ! 2515         }
21450                                           ! 2516        else
21451                                           ! 2517         {
21452 53F9           EB           05            jmp .172
21453                       000053FB            .170:
21454                                           ! 2518          data = 0x00;
21455                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21456 53FB           30C0                       xor	al,al
21457 53FD           8846         FC            mov	-4[bp],al
21458                                           !BCC_EOS
21459                                           ! 2519         }
21460                                           ! 2520        for(j=0;j<4;j++)
21461                       00005400            .172:
21462                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21463 5400           30C0                       xor	al,al
21464 5402           8846         FE            mov	-2[bp],al
21465                                           !BCC_EOS
21466                                           !BCC_EOS
21467                                           ! 2521         {
21468 5405           EB           73            jmp .175
21469                       00005407            .176:
21470                                           ! 2522          if (fdata[src+i] & mask)
21471                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21472 5407           8B46         F4            mov	ax,-$C[bp]
21473 540A           0246         FF            add	al,-1[bp]
21474 540D           80D4                   00  adc	ah,*0
21475                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21476 5410           0346         FA            add	ax,-6[bp]
21477 5413           89C3                       mov	bx,ax
21478                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21479 5415           8A07                       mov	al,[bx]
21480 5417           2246         FD            and	al,-3[bp]
21481 541A           84C0                       test	al,al
21482 541C           74           4B            je  	.177
21483                       0000541E            .178:
21484                                           ! 2523           {
21485                                           ! 2524            if (attr & 0x80)
21486                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21487 541E           8A46         06            mov	al,6[bp]
21488 5421           24                     80  and	al,#$80
21489 5423           84C0                       test	al,al
21490 5425           74           22            je  	.179
21491                       00005427            .17A:
21492                                           ! 2525             {
21493                                           ! 2526              data ^= (attr & 0x03) << ((3-j)*2);
21494                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21495 5427           B8                   0003  mov	ax,*3
21496 542A           2A46         FE            sub	al,-2[bp]
21497 542D           80DC                   00  sbb	ah,*0
21498                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21499 5430           D1E0                       shl	ax,*1
21500 5432           50                         push	ax
21501                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21502 5433           8A46         06            mov	al,6[bp]
21503 5436           24                     03  and	al,*3
21504                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21505 5438           30E4                       xor	ah,ah
21506 543A           8B4E         F2            mov	cx,-$E[bp]
21507 543D           D3E0                       shl	ax,cl
21508 543F           44                         inc	sp
21509 5440           44                         inc	sp
21510                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21511 5441           3246         FC            xor	al,-4[bp]
21512 5444           8846         FC            mov	-4[bp],al
21513                                           !BCC_EOS
21514                                           ! 2527             }
21515                                           ! 2528            else
21516                                           ! 2529             {
21517 5447           EB           20            jmp .17B
21518                       00005449            .179:
21519                                           ! 2530              data |= (attr & 0x03) << ((3-j)*2);
21520                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21521 5449           B8                   0003  mov	ax,*3
21522 544C           2A46         FE            sub	al,-2[bp]
21523 544F           80DC                   00  sbb	ah,*0
21524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21525 5452           D1E0                       shl	ax,*1
21526 5454           50                         push	ax
21527                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21528 5455           8A46         06            mov	al,6[bp]
21529 5458           24                     03  and	al,*3
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 545A           30E4                       xor	ah,ah
21532 545C           8B4E         F2            mov	cx,-$E[bp]
21533 545F           D3E0                       shl	ax,cl
21534 5461           44                         inc	sp
21535 5462           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 5463           0A46         FC            or	al,-4[bp]
21538 5466           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2531             }
21541                                           ! 2532           }
21542                       00005469            .17B:
21543                                           ! 2533          mask >>= 1;
21544                       00005469            .177:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 5469           8A46         FD            mov	al,-3[bp]
21547 546C           30E4                       xor	ah,ah
21548 546E           D1E8                       shr	ax,*1
21549 5470           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2534         }
21552                                           ! 2535        write_byte(0xb800,dest,data);
21553                       00005473            .174:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 5473           8A46         FE            mov	al,-2[bp]
21556 5476           40                         inc	ax
21557 5477           8846         FE            mov	-2[bp],al
21558                       0000547A            .175:
21559                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21560 547A           8A46         FE            mov	al,-2[bp]
21561 547D           3C                     04  cmp	al,*4
21562 547F           72           86            jb 	.176
21563                       00005481            .17C:
21564                       00005481            .173:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 5481           8A46         FC            mov	al,-4[bp]
21567 5484           30E4                       xor	ah,ah
21568 5486           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 5487           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 548A           B8                   B800  mov	ax,#$B800
21573 548D           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 548E           E8         277D            call	_write_byte
21576 5491           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2536        dest += 1;
21579                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21580 5494           8B46         F6            mov	ax,-$A[bp]
21581 5497           40                         inc	ax
21582 5498           8946         F6            mov	-$A[bp],ax
21583                                           !BCC_EOS
21584                                           ! 2537       }
21585                                           ! 2538     }
21586                       0000549B            .16E:
21587                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21588 549B           8A46         FD            mov	al,-3[bp]
21589 549E           84C0                       test	al,al
21590 54A0         0F85         FF3C            bne 	.16F
21591                       000054A4            .17D:
21592                       000054A4            .16D:
21593                                           ! 2539   }
21594                       000054A4            .16C:
21595                                           ! 2540 }
21596                       000054A4            .158:
21597                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21598 54A4           8A46         FF            mov	al,-1[bp]
21599 54A7           40                         inc	ax
21600 54A8           8846         FF            mov	-1[bp],al
21601                       000054AB            .159:
21602                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21603 54AB           8A46         FF            mov	al,-1[bp]
21604 54AE           3C                     08  cmp	al,*8
21605 54B0         0F82         FE44            blo 	.15A
21606                       000054B4            .17E:
21607                       000054B4            .157:
21608 54B4           89EC                       mov	sp,bp
21609 54B6           5D                         pop	bp
21610 54B7           C3                         ret
21611                                           ! 2541 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21612                                           ! Register BX used in function write_gfx_char_cga
21613                                           ! 2542 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21614                       000054B8            _write_gfx_char_lin:
21615                                           !BCC_EOS
21616                                           !BCC_EOS
21617                                           !BCC_EOS
21618                                           !BCC_EOS
21619                                           !BCC_EOS
21620                                           ! 2543 {
21621                                           ! 2544  Bit8u i,j,mask,data;
21622                                           !BCC_EOS
21623                                           ! 2545  Bit8u *fdata;
21624                                           !BCC_EOS
21625                                           ! 2546  Bit16u addr,dest,src;
21626                                           !BCC_EOS
21627                                           ! 2547  fdata = &vgafont8;
21628 54B8           55                         push	bp
21629 54B9           89E5                       mov	bp,sp
21630 54BB           83C4                   F4  add	sp,*-$C
21631                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21632 54BE           BB                   0F61  mov	bx,#_vgafont8
21633 54C1           895E         FA            mov	-6[bp],bx
21634                                           !BCC_EOS
21635                                           ! 2548  addr=xcurs*8+ycurs*nbcols*64;
21636                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21637 54C4           8A46         0C            mov	al,$C[bp]
21638 54C7           30E4                       xor	ah,ah
21639 54C9           89C3                       mov	bx,ax
21640 54CB           8A46         0A            mov	al,$A[bp]
21641 54CE           30E4                       xor	ah,ah
21642 54D0           89D9                       mov	cx,bx
21643 54D2           F7E9                       imul	cx
21644                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21645 54D4           B1                     06  mov	cl,*6
21646 54D6           D3E0                       shl	ax,cl
21647 54D8           50                         push	ax
21648                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21649 54D9           8A46         08            mov	al,8[bp]
21650 54DC           30E4                       xor	ah,ah
21651 54DE           B1                     03  mov	cl,*3
21652 54E0           D3E0                       shl	ax,cl
21653                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21654 54E2           0346         F2            add	ax,-$E[bp]
21655 54E5           44                         inc	sp
21656 54E6           44                         inc	sp
21657                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21658 54E7           8946         F8            mov	-8[bp],ax
21659                                           !BCC_EOS
21660                                           ! 2549  src = car * 8;
21661                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21662 54EA           8A46         04            mov	al,4[bp]
21663 54ED           30E4                       xor	ah,ah
21664 54EF           B1                     03  mov	cl,*3
21665 54F1           D3E0                       shl	ax,cl
21666                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21667 54F3           8946         F4            mov	-$C[bp],ax
21668                                           !BCC_EOS
21669                                           ! 2550  for(i=0;i<8;i++)
21670                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21671 54F6           30C0                       xor	al,al
21672 54F8           8846         FF            mov	-1[bp],al
21673                                           !BCC_EOS
21674                                           !BCC_EOS
21675                                           ! 2551   {
21676 54FB           E9         0081            br 	.181
21677                       000054FE            .182:
21678                                           ! 2552    dest=addr+i*nbcols*8;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21680 54FE           8A46         0C            mov	al,$C[bp]
21681 5501           30E4                       xor	ah,ah
21682 5503           89C3                       mov	bx,ax
21683 5505           8A46         FF            mov	al,-1[bp]
21684 5508           30E4                       xor	ah,ah
21685 550A           89D9                       mov	cx,bx
21686 550C           F7E9                       imul	cx
21687                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21688 550E           B1                     03  mov	cl,*3
21689 5510           D3E0                       shl	ax,cl
21690                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21691                                           ! Debug: expression subtree swapping
21692 5512           0346         F8            add	ax,-8[bp]
21693                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21694 5515           8946         F6            mov	-$A[bp],ax
21695                                           !BCC_EOS
21696                                           ! 2553    mask = 0x80;
21697                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21698 5518           B0                     80  mov	al,#$80
21699 551A           8846         FD            mov	-3[bp],al
21700                                           !BCC_EOS
21701                                           ! 2554    for(j=0;j<8;j++)
21702                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21703 551D           30C0                       xor	al,al
21704 551F           8846         FE            mov	-2[bp],al
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           ! 2555     {
21708 5522           EB           4D            jmp .185
21709                       00005524            .186:
21710                                           ! 2556      data = 0x00;
21711                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21712 5524           30C0                       xor	al,al
21713 5526           8846         FC            mov	-4[bp],al
21714                                           !BCC_EOS
21715                                           ! 2557      if (fdata[src+i] & mask)
21716                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21717 5529           8B46         F4            mov	ax,-$C[bp]
21718 552C           0246         FF            add	al,-1[bp]
21719 552F           80D4                   00  adc	ah,*0
21720                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21721 5532           0346         FA            add	ax,-6[bp]
21722 5535           89C3                       mov	bx,ax
21723                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21724 5537           8A07                       mov	al,[bx]
21725 5539           2246         FD            and	al,-3[bp]
21726 553C           84C0                       test	al,al
21727 553E           74           06            je  	.187
21728                       00005540            .188:
21729                                           ! 2558       {
21730                                           ! 2559        data = attr;
21731                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21732 5540           8A46         06            mov	al,6[bp]
21733 5543           8846         FC            mov	-4[bp],al
21734                                           !BCC_EOS
21735                                           ! 2560       }
21736                                           ! 2561      write_byte(0xa000,dest+j,data);
21737                       00005546            .187:
21738                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21739 5546           8A46         FC            mov	al,-4[bp]
21740 5549           30E4                       xor	ah,ah
21741 554B           50                         push	ax
21742                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21743 554C           8B46         F6            mov	ax,-$A[bp]
21744 554F           0246         FE            add	al,-2[bp]
21745 5552           80D4                   00  adc	ah,*0
21746                                           ! Debug: list unsigned int = ax+0 (used reg = )
21747 5555           50                         push	ax
21748                                           ! Debug: list unsigned int = const $A000 (used reg = )
21749 5556           B8                   A000  mov	ax,#$A000
21750 5559           50                         push	ax
21751                                           ! Debug: func () void = write_byte+0 (used reg = )
21752 555A           E8         26B1            call	_write_byte
21753 555D           83C4                   06  add	sp,*6
21754                                           !BCC_EOS
21755                                           ! 2562      mask >>= 1;
21756                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21757 5560           8A46         FD            mov	al,-3[bp]
21758 5563           30E4                       xor	ah,ah
21759 5565           D1E8                       shr	ax,*1
21760 5567           8846         FD            mov	-3[bp],al
21761                                           !BCC_EOS
21762                                           ! 2563     }
21763                                           ! 2564   }
21764                       0000556A            .184:
21765                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21766 556A           8A46         FE            mov	al,-2[bp]
21767 556D           40                         inc	ax
21768 556E           8846         FE            mov	-2[bp],al
21769                       00005571            .185:
21770                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21771 5571           8A46         FE            mov	al,-2[bp]
21772 5574           3C                     08  cmp	al,*8
21773 5576           72           AC            jb 	.186
21774                       00005578            .189:
21775                       00005578            .183:
21776                                           ! 2565 }
21777                       00005578            .180:
21778                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21779 5578           8A46         FF            mov	al,-1[bp]
21780 557B           40                         inc	ax
21781 557C           8846         FF            mov	-1[bp],al
21782                       0000557F            .181:
21783                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21784 557F           8A46         FF            mov	al,-1[bp]
21785 5582           3C                     08  cmp	al,*8
21786 5584         0F82         FF76            blo 	.182
21787                       00005588            .18A:
21788                       00005588            .17F:
21789 5588           89EC                       mov	sp,bp
21790 558A           5D                         pop	bp
21791 558B           C3                         ret
21792                                           ! 2566 static void biosfn_write_char_attr (car,page,attr,count)
21793                                           ! Register BX used in function write_gfx_char_lin
21794                                           ! 2567 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21795                       0000558C            _biosfn_write_char_attr:
21796                                           !BCC_EOS
21797                                           !BCC_EOS
21798                                           !BCC_EOS
21799                                           !BCC_EOS
21800                                           ! 2568 {
21801                                           ! 2569  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21802                                           !BCC_EOS
21803                                           ! 2570  Bit16u nbcols,nbrows,address;
21804                                           !BCC_EOS
21805                                           ! 2571  Bit16u cursor,dummy;
21806                                           !BCC_EOS
21807                                           ! 2572  mode=read_byte(0x40,0x49);
21808 558C           55                         push	bp
21809 558D           89E5                       mov	bp,sp
21810 558F           83C4                   F0  add	sp,*-$10
21811                                           ! Debug: list int = const $49 (used reg = )
21812 5592           B8                   0049  mov	ax,*$49
21813 5595           50                         push	ax
21814                                           ! Debug: list int = const $40 (used reg = )
21815 5596           B8                   0040  mov	ax,*$40
21816 5599           50                         push	ax
21817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21818 559A           E8         264B            call	_read_byte
21819 559D           83C4                   04  add	sp,*4
21820                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21821 55A0           8846         FC            mov	-4[bp],al
21822                                           !BCC_EOS
21823                                           ! 2573  line=find_vga_entry(mode);
21824                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21825 55A3           8A46         FC            mov	al,-4[bp]
21826 55A6           30E4                       xor	ah,ah
21827 55A8           50                         push	ax
21828                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21829 55A9           E8         2550            call	_find_vga_entry
21830 55AC           44                         inc	sp
21831 55AD           44                         inc	sp
21832                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21833 55AE           8846         FB            mov	-5[bp],al
21834                                           !BCC_EOS
21835                                           ! 2574  if(line==0xFF)return;
21836                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21837 55B1           8A46         FB            mov	al,-5[bp]
21838 55B4           3C                     FF  cmp	al,#$FF
21839 55B6           75           04            jne 	.18B
21840                       000055B8            .18C:
21841 55B8           89EC                       mov	sp,bp
21842 55BA           5D                         pop	bp
21843 55BB           C3                         ret
21844                                           !BCC_EOS
21845                                           ! 2575  biosfn_get_cursor_pos(page,&
21846                       000055BC            .18B:
21847                                           ! 2575 dummy,&cursor);
21848                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21849 55BC           8D5E         F2            lea	bx,-$E[bp]
21850 55BF           53                         push	bx
21851                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21852 55C0           8D5E         F0            lea	bx,-$10[bp]
21853 55C3           53                         push	bx
21854                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21855 55C4           8A46         06            mov	al,6[bp]
21856 55C7           30E4                       xor	ah,ah
21857 55C9           50                         push	ax
21858                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21859 55CA           E8         EE7C            call	_biosfn_get_cursor_pos
21860 55CD           83C4                   06  add	sp,*6
21861                                           !BCC_EOS
21862                                           ! 2576  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21863                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21864 55D0           8A46         F2            mov	al,-$E[bp]
21865                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21866 55D3           8846         FE            mov	-2[bp],al
21867                                           !BCC_EOS
21868                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21869 55D6           8B46         F2            mov	ax,-$E[bp]
21870 55D9           30C0                       xor	al,al
21871                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21872 55DB           88E0                       mov	al,ah
21873 55DD           30E4                       xor	ah,ah
21874                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21875 55DF           8846         FD            mov	-3[bp],al
21876                                           !BCC_EOS
21877                                           ! 2577  nbrows=read_byte(0x40,0x84)+1;
21878                                           ! Debug: list int = const $84 (used reg = )
21879 55E2           B8                   0084  mov	ax,#$84
21880 55E5           50                         push	ax
21881                                           ! Debug: list int = const $40 (used reg = )
21882 55E6           B8                   0040  mov	ax,*$40
21883 55E9           50                         push	ax
21884                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21885 55EA           E8         25FB            call	_read_byte
21886 55ED           83C4                   04  add	sp,*4
21887                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21888 55F0           30E4                       xor	ah,ah
21889                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21890 55F2           40                         inc	ax
21891 55F3           8946         F6            mov	-$A[bp],ax
21892                                           !BCC_EOS
21893                                           ! 2578  nbcols=read_word(0x40,0x4A);
21894                                           ! Debug: list int = const $4A (used reg = )
21895 55F6           B8                   004A  mov	ax,*$4A
21896 55F9           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 55FA           B8                   0040  mov	ax,*$40
21899 55FD           50                         push	ax
21900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21901 55FE           E8         25FA            call	_read_word
21902 5601           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21904 5604           8946         F8            mov	-8[bp],ax
21905                                           !BCC_EOS
21906                                           ! 2579  if(vga_modes[line].class==0x00)
21907                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21908 5607           8A46         FB            mov	al,-5[bp]
21909 560A           30E4                       xor	ah,ah
21910 560C           B1                     03  mov	cl,*3
21911 560E           D3E0                       shl	ax,cl
21912 5610           89C3                       mov	bx,ax
21913 5612           81C3                 01FD  add	bx,#_vga_modes
21914                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21915 5616           8A47         01            mov	al,1[bx]
21916 5619           84C0                       test	al,al
21917 561B           75           6A            jne 	.18D
21918                       0000561D            .18E:
21919                                           ! 2580   {
21920                                           ! 2581    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21921                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21922 561D           8A46         FD            mov	al,-3[bp]
21923 5620           30E4                       xor	ah,ah
21924 5622           8B4E         F8            mov	cx,-8[bp]
21925 5625           F7E9                       imul	cx
21926                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21927                                           ! Debug: expression subtree swapping
21928 5627           0246         FE            add	al,-2[bp]
21929 562A           80D4                   00  adc	ah,*0
21930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21931 562D           D1E0                       shl	ax,*1
21932 562F           50                         push	ax
21933                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21934 5630           8B46         F8            mov	ax,-8[bp]
21935 5633           8B4E         F6            mov	cx,-$A[bp]
21936 5636           F7E9                       imul	cx
21937                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21938 5638           D1E0                       shl	ax,*1
21939                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21940 563A           0C                     FF  or	al,#$FF
21941                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21942                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21943 563C           89C3                       mov	bx,ax
21944 563E           8A46         06            mov	al,6[bp]
21945 5641           30E4                       xor	ah,ah
21946 5643           93                         xchg	ax,bx
21947 5644           40                         inc	ax
21948 5645           89D9                       mov	cx,bx
21949 5647           F7E9                       imul	cx
21950                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21951 5649           0346         EE            add	ax,-$12[bp]
21952 564C           44                         inc	sp
21953 564D           44                         inc	sp
21954                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21955 564E           8946         F4            mov	-$C[bp],ax
21956                                           !BCC_EOS
21957                                           ! 2582    dummy=((Bit16u)attr<<8)+car;
21958                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21959 5651           8A46         08            mov	al,8[bp]
21960 5654           30E4                       xor	ah,ah
21961                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21962 5656           88C4                       mov	ah,al
21963 5658           30C0                       xor	al,al
21964                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21965 565A           0246         04            add	al,4[bp]
21966 565D           80D4                   00  adc	ah,*0
21967                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21968 5660           8946         F0            mov	-$10[bp],ax
21969                                           !BCC_EOS
21970                                           ! 2583    memsetw(vga_modes[line].sstart,address,dummy,count);
21971                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21972 5663           FF76         0A            push	$A[bp]
21973                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21974 5666           FF76         F0            push	-$10[bp]
21975                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21976 5669           FF76         F4            push	-$C[bp]
21977                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21978 566C           8A46         FB            mov	al,-5[bp]
21979 566F           30E4                       xor	ah,ah
21980 5671           B1                     03  mov	cl,*3
21981 5673           D3E0                       shl	ax,cl
21982 5675           89C3                       mov	bx,ax
21983 5677           81C3                 01FD  add	bx,#_vga_modes
21984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21985 567B           FF77         04            push	4[bx]
21986                                           ! Debug: func () void = memsetw+0 (used reg = )
21987 567E           E8         24E2            call	_memsetw
21988 5681           83C4                   08  add	sp,*8
21989                                           !BCC_EOS
21990                                           ! 2584   }
21991                                           ! 2585  else
21992                                           ! 2586   {
21993 5684           E9         00F3            br 	.18F
21994                       00005687            .18D:
21995                                           ! 2587    cheight=video_param_table[line_to_vpti[line]].cheight;
21996                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21997 5687           8A46         FB            mov	al,-5[bp]
21998 568A           30E4                       xor	ah,ah
21999 568C           89C3                       mov	bx,ax
22000                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22001 568E           8A87       027D            mov	al,_line_to_vpti[bx]
22002 5692           30E4                       xor	ah,ah
22003 5694           B1                     06  mov	cl,*6
22004 5696           D3E0                       shl	ax,cl
22005 5698           89C3                       mov	bx,ax
22006 569A           81C3                 0291  add	bx,#_video_param_table
22007                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22008 569E           8A47         02            mov	al,2[bx]
22009 56A1           8846         FF            mov	-1[bp],al
22010                                           !BCC_EOS
22011                                           ! 2588    bpp=vga_modes[line].pixbits;
22012                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22013 56A4           8A46         FB            mov	al,-5[bp]
22014 56A7           30E4                       xor	ah,ah
22015 56A9           B1                     03  mov	cl,*3
22016 56AB           D3E0                       shl	ax,cl
22017 56AD           89C3                       mov	bx,ax
22018 56AF           81C3                 01FD  add	bx,#_vga_modes
22019                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22020 56B3           8A47         03            mov	al,3[bx]
22021 56B6           8846         FA            mov	-6[bp],al
22022                                           !BCC_EOS
22023                                           ! 2589    while((count-->0) && (xcurs<nbcols))
22024                                           ! 2590     {
22025 56B9           E9         00A6            br 	.191
22026                       000056BC            .192:
22027                                           ! 2591      switch(vga_modes[line].memmodel)
22028                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22029 56BC           8A46         FB            mov	al,-5[bp]
22030 56BF           30E4                       xor	ah,ah
22031 56C1           B1                     03  mov	cl,*3
22032 56C3           D3E0                       shl	ax,cl
22033 56C5           89C3                       mov	bx,ax
22034 56C7           81C3                 01FD  add	bx,#_vga_modes
22035 56CB           8A47         02            mov	al,2[bx]
22036                                           ! 2592       {
22037 56CE           EB           77            jmp .195
22038                                           ! 2593        case 0x04:
22039                                           ! 2594        case 0x03:
22040                       000056D0            .196:
22041                                           ! 2595          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22042                       000056D0            .197:
22043                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22044 56D0           8A46         FF            mov	al,-1[bp]
22045 56D3           30E4                       xor	ah,ah
22046 56D5           50                         push	ax
22047                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22048 56D6           FF76         F8            push	-8[bp]
22049                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22050 56D9           8A46         FD            mov	al,-3[bp]
22051 56DC           30E4                       xor	ah,ah
22052 56DE           50                         push	ax
22053                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22054 56DF           8A46         FE            mov	al,-2[bp]
22055 56E2           30E4                       xor	ah,ah
22056 56E4           50                         push	ax
22057                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22058 56E5           8A46         08            mov	al,8[bp]
22059 56E8           30E4                       xor	ah,ah
22060 56EA           50                         push	ax
22061                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22062 56EB           8A46         04            mov	al,4[bp]
22063 56EE           30E4                       xor	ah,ah
22064 56F0           50                         push	ax
22065                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22066 56F1           E8         FA4E            call	_write_gfx_char_pl4
22067 56F4           83C4                   0C  add	sp,*$C
22068                                           !BCC_EOS
22069                                           ! 2596          break;
22070 56F7           EB           62            jmp .193
22071                                           !BCC_EOS
22072                                           ! 2597        case 0x02:
22073                                           ! 2598          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22074                       000056F9            .198:
22075                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22076 56F9           8A46         FA            mov	al,-6[bp]
22077 56FC           30E4                       xor	ah,ah
22078 56FE           50                         push	ax
22079                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22080 56FF           FF76         F8            push	-8[bp]
22081                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22082 5702           8A46         FD            mov	al,-3[bp]
22083 5705           30E4                       xor	ah,ah
22084 5707           50                         push	ax
22085                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22086 5708           8A46         FE            mov	al,-2[bp]
22087 570B           30E4                       xor	ah,ah
22088 570D           50                         push	ax
22089                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22090 570E           8A46         08            mov	al,8[bp]
22091 5711           30E4                       xor	ah,ah
22092 5713           50                         push	ax
22093                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22094 5714           8A46         04            mov	al,4[bp]
22095 5717           30E4                       xor	ah,ah
22096 5719           50                         push	ax
22097                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22098 571A           E8         FB98            call	_write_gfx_char_cga
22099 571D           83C4                   0C  add	sp,*$C
22100                                           !BCC_EOS
22101                                           ! 2599          break;
22102 5720           EB           39            jmp .193
22103                                           !BCC_EOS
22104                                           ! 2600        case 0x05:
22105                                           ! 2601          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22106                       00005722            .199:
22107                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22108 5722           FF76         F8            push	-8[bp]
22109                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22110 5725           8A46         FD            mov	al,-3[bp]
22111 5728           30E4                       xor	ah,ah
22112 572A           50                         push	ax
22113                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22114 572B           8A46         FE            mov	al,-2[bp]
22115 572E           30E4                       xor	ah,ah
22116 5730           50                         push	ax
22117                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22118 5731           8A46         08            mov	al,8[bp]
22119 5734           30E4                       xor	ah,ah
22120 5736           50                         push	ax
22121                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22122 5737           8A46         04            mov	al,4[bp]
22123 573A           30E4                       xor	ah,ah
22124 573C           50                         push	ax
22125                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22126 573D           E8         FD78            call	_write_gfx_char_lin
22127 5740           83C4                   0A  add	sp,*$A
22128                                           !BCC_EOS
22129                                           ! 2602          break;
22130 5743           EB           16            jmp .193
22131                                           !BCC_EOS
22132                                           ! 2603       }
22133                                           ! 2604      xcurs++;
22134 5745           EB           14            jmp .193
22135                       00005747            .195:
22136 5747           2C                     02  sub	al,*2
22137 5749           74           AE            je 	.198
22138 574B           2C                     01  sub	al,*1
22139 574D         0F84         FF7F            beq 	.197
22140 5751           2C                     01  sub	al,*1
22141 5753         0F84         FF79            beq 	.196
22142 5757           2C                     01  sub	al,*1
22143 5759           74           C7            je 	.199
22144                       0000575B            .193:
22145                       FFFFFFEE            ..FFFA	=	-$12
22146                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22147 575B           8A46         FE            mov	al,-2[bp]
22148 575E           40                         inc	ax
22149 575F           8846         FE            mov	-2[bp],al
22150                                           !BCC_EOS
22151                                           ! 2605     }
22152                                           ! 2606   }
22153                       00005762            .191:
22154                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22155 5762           8B46         0A            mov	ax,$A[bp]
22156 5765           48                         dec	ax
22157 5766           8946         0A            mov	$A[bp],ax
22158                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22159 5769           3D                   FFFF  cmp	ax,*-1
22160 576C           74           0C            je  	.19A
22161                       0000576E            .19B:
22162                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22163 576E           8A46         FE            mov	al,-2[bp]
22164 5771           30E4                       xor	ah,ah
22165 5773           3B46         F8            cmp	ax,-8[bp]
22166 5776         0F82         FF42            blo 	.192
22167                       0000577A            .19A:
22168                       0000577A            .190:
22169                                           ! 2607 }
22170                       0000577A            .18F:
22171 577A           89EC                       mov	sp,bp
22172 577C           5D                         pop	bp
22173 577D           C3                         ret
22174                                           ! 2608 static void biosfn_write_char_only (car,page,attr,count)
22175                                           ! Register BX used in function biosfn_write_char_attr
22176                                           ! 2609 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22177                       0000577E            _biosfn_write_char_only:
22178                                           !BCC_EOS
22179                                           !BCC_EOS
22180                                           !BCC_EOS
22181                                           !BCC_EOS
22182                                           ! 2610 {
22183                                           ! 2611  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22184                                           !BCC_EOS
22185                                           ! 2612  Bit16u nbcols,nbrows,address;
22186                                           !BCC_EOS
22187                                           ! 2613  Bit16u cursor,dummy;
22188                                           !BCC_EOS
22189                                           ! 2614  mode=read_byte(0x40,0x49);
22190 577E           55                         push	bp
22191 577F           89E5                       mov	bp,sp
22192 5781           83C4                   F0  add	sp,*-$10
22193                                           ! Debug: list int = const $49 (used reg = )
22194 5784           B8                   0049  mov	ax,*$49
22195 5787           50                         push	ax
22196                                           ! Debug: list int = const $40 (used reg = )
22197 5788           B8                   0040  mov	ax,*$40
22198 578B           50                         push	ax
22199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22200 578C           E8         2459            call	_read_byte
22201 578F           83C4                   04  add	sp,*4
22202                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22203 5792           8846         FC            mov	-4[bp],al
22204                                           !BCC_EOS
22205                                           ! 2615  line=find_vga_entry(mode);
22206                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22207 5795           8A46         FC            mov	al,-4[bp]
22208 5798           30E4                       xor	ah,ah
22209 579A           50                         push	ax
22210                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22211 579B           E8         235E            call	_find_vga_entry
22212 579E           44                         inc	sp
22213 579F           44                         inc	sp
22214                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22215 57A0           8846         FB            mov	-5[bp],al
22216                                           !BCC_EOS
22217                                           ! 2616  if(line==0xFF)return;
22218                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22219 57A3           8A46         FB            mov	al,-5[bp]
22220 57A6           3C                     FF  cmp	al,#$FF
22221 57A8           75           04            jne 	.19C
22222                       000057AA            .19D:
22223 57AA           89EC                       mov	sp,bp
22224 57AC           5D                         pop	bp
22225 57AD           C3                         ret
22226                                           !BCC_EOS
22227                                           ! 2617  biosfn_get_cursor_pos(page,&dummy,&cursor);
22228                       000057AE            .19C:
22229                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22230 57AE           8D5E         F2            lea	bx,-$E[bp]
22231 57B1           53                         push	bx
22232                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22233 57B2           8D5E         F0            lea	bx,-$10[bp]
22234 57B5           53                         push	bx
22235                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22236 57B6           8A46         06            mov	al,6[bp]
22237 57B9           30E4                       xor	ah,ah
22238 57BB           50                         push	ax
22239                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22240 57BC           E8         EC8A            call	_biosfn_get_cursor_pos
22241 57BF           83C4                   06  add	sp,*6
22242                                           !BCC_EOS
22243                                           ! 2618  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22244                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22245 57C2           8A46         F2            mov	al,-$E[bp]
22246                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22247 57C5           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22250 57C8           8B46         F2            mov	ax,-$E[bp]
22251 57CB           30C0                       xor	al,al
22252                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22253 57CD           88E0                       mov	al,ah
22254 57CF           30E4                       xor	ah,ah
22255                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22256 57D1           8846         FD            mov	-3[bp],al
22257                                           !BCC_EOS
22258                                           ! 2619  nbrows=read_byte(0x40,0x84)+1;
22259                                           ! Debug: list int = const $84 (used reg = )
22260 57D4           B8                   0084  mov	ax,#$84
22261 57D7           50                         push	ax
22262                                           ! Debug: list int = const $40 (used reg = )
22263 57D8           B8                   0040  mov	ax,*$40
22264 57DB           50                         push	ax
22265                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22266 57DC           E8         2409            call	_read_byte
22267 57DF           83C4                   04  add	sp,*4
22268                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22269 57E2           30E4                       xor	ah,ah
22270                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22271 57E4           40                         inc	ax
22272 57E5           8946         F6            mov	-$A[bp],ax
22273                                           !BCC_EOS
22274                                           ! 2620  nbcols=read_word(0x40,0x4A);
22275                                           ! Debug: list int = const $4A (used reg = )
22276 57E8           B8                   004A  mov	ax,*$4A
22277 57EB           50                         push	ax
22278                                           ! Debug: list int = const $40 (used reg = )
22279 57EC           B8                   0040  mov	ax,*$40
22280 57EF           50                         push	ax
22281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22282 57F0           E8         2408            call	_read_word
22283 57F3           83C4                   04  add	sp,*4
22284                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22285 57F6           8946         F8            mov	-8[bp],ax
22286                                           !BCC_EOS
22287                                           ! 2621  if(vga_modes[line].class==0x00)
22288                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22289 57F9           8A46         FB            mov	al,-5[bp]
22290 57FC           30E4                       xor	ah,ah
22291 57FE           B1                     03  mov	cl,*3
22292 5800           D3E0                       shl	ax,cl
22293 5802           89C3                       mov	bx,ax
22294 5804           81C3                 01FD  add	bx,#_vga_modes
22295                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22296 5808           8A47         01            mov	al,1[bx]
22297 580B           84C0                       test	al,al
22298 580D           75           6E            jne 	.19E
22299                       0000580F            .19F:
22300                                           ! 2622   {
22301                                           ! 2623    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22302                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22303 580F           8A46         FD            mov	al,-3[bp]
22304 5812           30E4                       xor	ah,ah
22305 5814           8B4E         F8            mov	cx,-8[bp]
22306 5817           F7E9                       imul	cx
22307                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22308                                           ! Debug: expression subtree swapping
22309 5819           0246         FE            add	al,-2[bp]
22310 581C           80D4                   00  adc	ah,*0
22311                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22312 581F           D1E0                       shl	ax,*1
22313 5821           50                         push	ax
22314                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22315 5822           8B46         F8            mov	ax,-8[bp]
22316 5825           8B4E         F6            mov	cx,-$A[bp]
22317 5828           F7E9                       imul	cx
22318                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22319 582A           D1E0                       shl	ax,*1
22320                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22321 582C           0C                     FF  or	al,#$FF
22322                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22323                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22324 582E           89C3                       mov	bx,ax
22325 5830           8A46         06            mov	al,6[bp]
22326 5833           30E4                       xor	ah,ah
22327 5835           93                         xchg	ax,bx
22328 5836           40                         inc	ax
22329 5837           89D9                       mov	cx,bx
22330 5839           F7E9                       imul	cx
22331                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22332 583B           0346         EE            add	ax,-$12[bp]
22333 583E           44                         inc	sp
22334 583F           44                         inc	sp
22335                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22336 5840           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2624    while(count-->0)
22339                                           ! 2625     {write_byte(vga_modes[line].sstart,address,car);
22340 5843           EB           29            jmp .1A1
22341                       00005845            .1A2:
22342                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22343 5845           8A46         04            mov	al,4[bp]
22344 5848           30E4                       xor	ah,ah
22345 584A           50                         push	ax
22346                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22347 584B           FF76         F4            push	-$C[bp]
22348                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22349 584E           8A46         FB            mov	al,-5[bp]
22350 5851           30E4                       xor	ah,ah
22351 5853           B1                     03  mov	cl,*3
22352 5855           D3E0                       shl	ax,cl
22353 5857           89C3                       mov	bx,ax
22354 5859           81C3                 01FD  add	bx,#_vga_modes
22355                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22356 585D           FF77         04            push	4[bx]
22357                                           ! Debug: func () void = write_byte+0 (used reg = )
22358 5860           E8         23AB            call	_write_byte
22359 5863           83C4                   06  add	sp,*6
22360                                           !BCC_EOS
22361                                           ! 2626      address+=2;
22362                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22363 5866           8B46         F4            mov	ax,-$C[bp]
22364 5869           40                         inc	ax
22365 586A           40                         inc	ax
22366 586B           8946         F4            mov	-$C[bp],ax
22367                                           !BCC_EOS
22368                                           ! 2627     }
22369                                           ! 2628   }
22370                       0000586E            .1A1:
22371                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22372 586E           8B46         0A            mov	ax,$A[bp]
22373 5871           48                         dec	ax
22374 5872           8946         0A            mov	$A[bp],ax
22375                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22376 5875           3D                   FFFF  cmp	ax,*-1
22377 5878           75           CB            jne	.1A2
22378                       0000587A            .1A3:
22379                       0000587A            .1A0:
22380                                           ! 2629  else
22381                                           ! 2630   {
22382 587A           E9         00F3            br 	.1A4
22383                       0000587D            .19E:
22384                                           ! 2631    cheight=video_param_table[line_to_vpti[line]].cheight;
22385                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22386 587D           8A46         FB            mov	al,-5[bp]
22387 5880           30E4                       xor	ah,ah
22388 5882           89C3                       mov	bx,ax
22389                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22390 5884           8A87       027D            mov	al,_line_to_vpti[bx]
22391 5888           30E4                       xor	ah,ah
22392 588A           B1                     06  mov	cl,*6
22393 588C           D3E0                       shl	ax,cl
22394 588E           89C3                       mov	bx,ax
22395 5890           81C3                 0291  add	bx,#_video_param_table
22396                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22397 5894           8A47         02            mov	al,2[bx]
22398 5897           8846         FF            mov	-1[bp],al
22399                                           !BCC_EOS
22400                                           ! 2632    bpp=vga_modes[line].pixbits;
22401                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22402 589A           8A46         FB            mov	al,-5[bp]
22403 589D           30E4                       xor	ah,ah
22404 589F           B1                     03  mov	cl,*3
22405 58A1           D3E0                       shl	ax,cl
22406 58A3           89C3                       mov	bx,ax
22407 58A5           81C3                 01FD  add	bx,#_vga_modes
22408                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22409 58A9           8A47         03            mov	al,3[bx]
22410 58AC           8846         FA            mov	-6[bp],al
22411                                           !BCC_EOS
22412                                           ! 2633    while((count-->0) && (xcurs<nbcols))
22413                                           ! 2634     {
22414 58AF           E9         00A6            br 	.1A6
22415                       000058B2            .1A7:
22416                                           ! 2635      switch(vga_modes[line].memmodel)
22417                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22418 58B2           8A46         FB            mov	al,-5[bp]
22419 58B5           30E4                       xor	ah,ah
22420 58B7           B1                     03  mov	cl,*3
22421 58B9           D3E0                       shl	ax,cl
22422 58BB           89C3                       mov	bx,ax
22423 58BD           81C3                 01FD  add	bx,#_vga_modes
22424 58C1           8A47         02            mov	al,2[bx]
22425                                           ! 2636       {
22426 58C4           EB           77            jmp .1AA
22427                                           ! 2637        case 0x04:
22428                                           ! 2638        case 0x03:
22429                       000058C6            .1AB:
22430                                           ! 2639          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22431                       000058C6            .1AC:
22432                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22433 58C6           8A46         FF            mov	al,-1[bp]
22434 58C9           30E4                       xor	ah,ah
22435 58CB           50                         push	ax
22436                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22437 58CC           FF76         F8            push	-8[bp]
22438                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22439 58CF           8A46         FD            mov	al,-3[bp]
22440 58D2           30E4                       xor	ah,ah
22441 58D4           50                         push	ax
22442                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22443 58D5           8A46         FE            mov	al,-2[bp]
22444 58D8           30E4                       xor	ah,ah
22445 58DA           50                         push	ax
22446                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22447 58DB           8A46         08            mov	al,8[bp]
22448 58DE           30E4                       xor	ah,ah
22449 58E0           50                         push	ax
22450                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22451 58E1           8A46         04            mov	al,4[bp]
22452 58E4           30E4                       xor	ah,ah
22453 58E6           50                         push	ax
22454                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22455 58E7           E8         F858            call	_write_gfx_char_pl4
22456 58EA           83C4                   0C  add	sp,*$C
22457                                           !BCC_EOS
22458                                           ! 2640          break;
22459 58ED           EB           62            jmp .1A8
22460                                           !BCC_EOS
22461                                           ! 2641        case 0x02:
22462                                           ! 2642          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22463                       000058EF            .1AD:
22464                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22465 58EF           8A46         FA            mov	al,-6[bp]
22466 58F2           30E4                       xor	ah,ah
22467 58F4           50                         push	ax
22468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22469 58F5           FF76         F8            push	-8[bp]
22470                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22471 58F8           8A46         FD            mov	al,-3[bp]
22472 58FB           30E4                       xor	ah,ah
22473 58FD           50                         push	ax
22474                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22475 58FE           8A46         FE            mov	al,-2[bp]
22476 5901           30E4                       xor	ah,ah
22477 5903           50                         push	ax
22478                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22479 5904           8A46         08            mov	al,8[bp]
22480 5907           30E4                       xor	ah,ah
22481 5909           50                         push	ax
22482                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22483 590A           8A46         04            mov	al,4[bp]
22484 590D           30E4                       xor	ah,ah
22485 590F           50                         push	ax
22486                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22487 5910           E8         F9A2            call	_write_gfx_char_cga
22488 5913           83C4                   0C  add	sp,*$C
22489                                           !BCC_EOS
22490                                           ! 2643          break;
22491 5916           EB           39            jmp .1A8
22492                                           !BCC_EOS
22493                                           ! 2644        case 0x05:
22494                                           ! 2645          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22495                       00005918            .1AE:
22496                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22497 5918           FF76         F8            push	-8[bp]
22498                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22499 591B           8A46         FD            mov	al,-3[bp]
22500 591E           30E4                       xor	ah,ah
22501 5920           50                         push	ax
22502                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22503 5921           8A46         FE            mov	al,-2[bp]
22504 5924           30E4                       xor	ah,ah
22505 5926           50                         push	ax
22506                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22507 5927           8A46         08            mov	al,8[bp]
22508 592A           30E4                       xor	ah,ah
22509 592C           50                         push	ax
22510                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22511 592D           8A46         04            mov	al,4[bp]
22512 5930           30E4                       xor	ah,ah
22513 5932           50                         push	ax
22514                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22515 5933           E8         FB82            call	_write_gfx_char_lin
22516 5936           83C4                   0A  add	sp,*$A
22517                                           !BCC_EOS
22518                                           ! 2646          break;
22519 5939           EB           16            jmp .1A8
22520                                           !BCC_EOS
22521                                           ! 2647       }
22522                                           ! 2648      xcurs++;
22523 593B           EB           14            jmp .1A8
22524                       0000593D            .1AA:
22525 593D           2C                     02  sub	al,*2
22526 593F           74           AE            je 	.1AD
22527 5941           2C                     01  sub	al,*1
22528 5943         0F84         FF7F            beq 	.1AC
22529 5947           2C                     01  sub	al,*1
22530 5949         0F84         FF79            beq 	.1AB
22531 594D           2C                     01  sub	al,*1
22532 594F           74           C7            je 	.1AE
22533                       00005951            .1A8:
22534                       FFFFFFEE            ..FFF9	=	-$12
22535                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22536 5951           8A46         FE            mov	al,-2[bp]
22537 5954           40                         inc	ax
22538 5955           8846         FE            mov	-2[bp],al
22539                                           !BCC_EOS
22540                                           ! 2649     }
22541                                           ! 2650   }
22542                       00005958            .1A6:
22543                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22544 5958           8B46         0A            mov	ax,$A[bp]
22545 595B           48                         dec	ax
22546 595C           8946         0A            mov	$A[bp],ax
22547                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22548 595F           3D                   FFFF  cmp	ax,*-1
22549 5962           74           0C            je  	.1AF
22550                       00005964            .1B0:
22551                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22552 5964           8A46         FE            mov	al,-2[bp]
22553 5967           30E4                       xor	ah,ah
22554 5969           3B46         F8            cmp	ax,-8[bp]
22555 596C         0F82         FF42            blo 	.1A7
22556                       00005970            .1AF:
22557                       00005970            .1A5:
22558                                           ! 2651 }
22559                       00005970            .1A4:
22560 5970           89EC                       mov	sp,bp
22561 5972           5D                         pop	bp
22562 5973           C3                         ret
22563                                           ! 2652 #asm
22564                                           !BCC_ASM
22565                       00000008            _biosfn_write_char_only.count	set	8
22566                       00000006            _biosfn_write_char_only.attr	set	6
22567                       00000004            _biosfn_write_char_only.page	set	4
22568                       00000002            _biosfn_write_char_only.car	set	2
22569                       00005974            biosfn_group_0B:
22570 5974           80FF                   00    cmp bh, #0x00
22571 5977           74           06              je biosfn_set_border_color
22572 5979           80FF                   01    cmp bh, #0x01
22573 597C           74           40              je biosfn_set_palette
22574 597E           C3                           ret
22575                       0000597F            biosfn_set_border_color:
22576 597F           50                           push ax
22577 5980           53                           push bx
22578 5981           51                           push cx
22579 5982           52                           push dx
22580 5983           BA                   03DA    mov dx, # 0x3da
22581 5986           EC                           in al, dx
22582 5987           BA                   03C0    mov dx, # 0x3c0
22583 598A           B0                     00    mov al, #0x00
22584 598C           EE                           out dx, al
22585 598D           88D8                         mov al, bl
22586 598F           24                     0F    and al, #0x0f
22587 5991           A8                     08    test al, #0x08
22588 5993           74           02              jz set_low_border
22589 5995           04                     08    add al, #0x08
22590                       00005997            set_low_border:
22591 5997           EE                           out dx, al
22592 5998           B1                     01    mov cl, #0x01
22593 599A           80E3                   10    and bl, #0x10
22594                       0000599D            set_intensity_loop:
22595 599D           BA                   03C0    mov dx, # 0x3c0
22596 59A0           88C8                         mov al, cl
22597 59A2           EE                           out dx, al
22598 59A3           BA                   03C1    mov dx, # 0x3c1
22599 59A6           EC                           in al, dx
22600 59A7           24                     EF    and al, #0xef
22601 59A9           08D8                         or al, bl
22602 59AB           BA                   03C0    mov dx, # 0x3c0
22603 59AE           EE                           out dx, al
22604 59AF           FEC1                         inc cl
22605 59B1           80F9                   04    cmp cl, #0x04
22606 59B4           75           E7              jne set_intensity_loop
22607 59B6           B0                     20    mov al, #0x20
22608 59B8           EE                           out dx, al
22609 59B9           5A                           pop dx
22610 59BA           59                           pop cx
22611 59BB           5B                           pop bx
22612 59BC           58                           pop ax
22613 59BD           C3                           ret
22614                       000059BE            biosfn_set_palette:
22615 59BE           50                           push ax
22616 59BF           53                           push bx
22617 59C0           51                           push cx
22618 59C1           52                           push dx
22619 59C2           BA                   03DA    mov dx, # 0x3da
22620 59C5           EC                           in al, dx
22621 59C6           B1                     01    mov cl, #0x01
22622 59C8           80E3                   01    and bl, #0x01
22623                       000059CB            set_cga_palette_loop:
22624 59CB           BA                   03C0    mov dx, # 0x3c0
22625 59CE           88C8                         mov al, cl
22626 59D0           EE                           out dx, al
22627 59D1           BA                   03C1    mov dx, # 0x3c1
22628 59D4           EC                           in al, dx
22629 59D5           24                     FE    and al, #0xfe
22630 59D7           08D8                         or al, bl
22631 59D9           BA                   03C0    mov dx, # 0x3c0
22632 59DC           EE                           out dx, al
22633 59DD           FEC1                         inc cl
22634 59DF           80F9                   04    cmp cl, #0x04
22635 59E2           75           E7              jne set_cga_palette_loop
22636 59E4           B0                     20    mov al, #0x20
22637 59E6           EE                           out dx, al
22638 59E7           5A                           pop dx
22639 59E8           59                           pop cx
22640 59E9           5B                           pop bx
22641 59EA           58                           pop ax
22642 59EB           C3                           ret
22643                                           ! 2727 endasm
22644                                           !BCC_ENDASM
22645                                           ! 2728 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22646                                           ! Register BX used in function biosfn_write_char_only
22647                       000059EC            _biosfn_write_pixel:
22648                                           !BCC_EOS
22649                                           !BCC_EOS
22650                                           !BCC_EOS
22651                                           !BCC_EOS
22652                                           ! 2729 {
22653                                           ! 2730  Bit8u mode,line,mask,attr,data;
22654                                           !BCC_EOS
22655                                           ! 2731  Bit16u addr;
22656                                           !BCC_EOS
22657                                           ! 2732  mode=read_byte(0x40,0x49);
22658 59EC           55                         push	bp
22659 59ED           89E5                       mov	bp,sp
22660 59EF           83C4                   F8  add	sp,*-8
22661                                           ! Debug: list int = const $49 (used reg = )
22662 59F2           B8                   0049  mov	ax,*$49
22663 59F5           50                         push	ax
22664                                           ! Debug: list int = const $40 (used reg = )
22665 59F6           B8                   0040  mov	ax,*$40
22666 59F9           50                         push	ax
22667                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22668 59FA           E8         21EB            call	_read_byte
22669 59FD           83C4                   04  add	sp,*4
22670                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22671 5A00           8846         FF            mov	-1[bp],al
22672                                           !BCC_EOS
22673                                           ! 2733  line=find_vga_entry(mode);
22674                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22675 5A03           8A46         FF            mov	al,-1[bp]
22676 5A06           30E4                       xor	ah,ah
22677 5A08           50                         push	ax
22678                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22679 5A09           E8         20F0            call	_find_vga_entry
22680 5A0C           44                         inc	sp
22681 5A0D           44                         inc	sp
22682                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22683 5A0E           8846         FE            mov	-2[bp],al
22684                                           !BCC_EOS
22685                                           ! 2734  if(line==0xFF)return;
22686                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22687 5A11           8A46         FE            mov	al,-2[bp]
22688 5A14           3C                     FF  cmp	al,#$FF
22689 5A16           75           04            jne 	.1B1
22690                       00005A18            .1B2:
22691 5A18           89EC                       mov	sp,bp
22692 5A1A           5D                         pop	bp
22693 5A1B           C3                         ret
22694                                           !BCC_EOS
22695                                           ! 2735  if(vga_modes[line].class==0x00)return;
22696                       00005A1C            .1B1:
22697                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22698 5A1C           8A46         FE            mov	al,-2[bp]
22699 5A1F           30E4                       xor	ah,ah
22700 5A21           B1                     03  mov	cl,*3
22701 5A23           D3E0                       shl	ax,cl
22702 5A25           89C3                       mov	bx,ax
22703 5A27           81C3                 01FD  add	bx,#_vga_modes
22704                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22705 5A2B           8A47         01            mov	al,1[bx]
22706 5A2E           84C0                       test	al,al
22707 5A30           75           04            jne 	.1B3
22708                       00005A32            .1B4:
22709 5A32           89EC                       mov	sp,bp
22710 5A34           5D                         pop	bp
22711 5A35           C3                         ret
22712                                           !BCC_EOS
22713                                           ! 2736  switch(vga_modes[line].memmodel)
22714                       00005A36            .1B3:
22715                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22716 5A36           8A46         FE            mov	al,-2[bp]
22717 5A39           30E4                       xor	ah,ah
22718 5A3B           B1                     03  mov	cl,*3
22719 5A3D           D3E0                       shl	ax,cl
22720 5A3F           89C3                       mov	bx,ax
22721 5A41           81C3                 01FD  add	bx,#_vga_modes
22722 5A45           8A47         02            mov	al,2[bx]
22723                                           ! 2737   {
22724 5A48           E9         0223            br 	.1B7
22725                                           ! 2738    case 0x04:
22726                                           ! 2739    case 0x03:
22727                       00005A4B            .1B8:
22728                                           ! 2740      addr = CX/8+DX*read_word(0x40,0x4A);
22729                       00005A4B            .1B9:
22730                                           ! Debug: list int = const $4A (used reg = )
22731 5A4B           B8                   004A  mov	ax,*$4A
22732 5A4E           50                         push	ax
22733                                           ! Debug: list int = const $40 (used reg = )
22734 5A4F           B8                   0040  mov	ax,*$40
22735 5A52           50                         push	ax
22736                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22737 5A53           E8         21A5            call	_read_word
22738 5A56           83C4                   04  add	sp,*4
22739                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22740                                           ! Debug: expression subtree swapping
22741 5A59           8B4E         0A            mov	cx,$A[bp]
22742 5A5C           F7E9                       imul	cx
22743 5A5E           50                         push	ax
22744                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22745 5A5F           8B46         08            mov	ax,8[bp]
22746 5A62           B1                     03  mov	cl,*3
22747 5A64           D3E8                       shr	ax,cl
22748                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22749 5A66           0346         F6            add	ax,0+..FFF8[bp]
22750 5A69           44                         inc	sp
22751 5A6A           44                         inc	sp
22752                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22753 5A6B           8946         F8            mov	-8[bp],ax
22754                                           !BCC_EOS
22755                                           ! 2741      mask = 0x80 >> (CX & 0x07);
22756                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22757 5A6E           8A46         08            mov	al,8[bp]
22758 5A71           24                     07  and	al,*7
22759                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22760 5A73           30E4                       xor	ah,ah
22761 5A75           89C3                       mov	bx,ax
22762 5A77           B8                   0080  mov	ax,#$80
22763 5A7A           89D9                       mov	cx,bx
22764 5A7C           D3F8                       sar	ax,cl
22765                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22766 5A7E           8846         FD            mov	-3[bp],al
22767                                           !BCC_EOS
22768                                           ! 2742      outw(0x3ce, (mask << 8) | 0x08);
22769                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22770 5A81           8A46         FD            mov	al,-3[bp]
22771 5A84           30E4                       xor	ah,ah
22772 5A86           88C4                       mov	ah,al
22773 5A88           30C0                       xor	al,al
22774                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22775 5A8A           0C                     08  or	al,*8
22776                                           ! Debug: list unsigned int = ax+0 (used reg = )
22777 5A8C           50                         push	ax
22778                                           ! Debug: list int = const $3CE (used reg = )
22779 5A8D           B8                   03CE  mov	ax,#$3CE
22780 5A90           50                         push	ax
22781                                           ! Debug: func () void = outw+0 (used reg = )
22782 5A91           E8         21D0            call	_outw
22783 5A94           83C4                   04  add	sp,*4
22784                                           !BCC_EOS
22785                                           ! 2743      outw(0x3ce, 0x0205);
22786                                           ! Debug: list int = const $205 (used reg = )
22787 5A97           B8                   0205  mov	ax,#$205
22788 5A9A           50                         push	ax
22789                                           ! Debug: list int = const $3CE (used reg = )
22790 5A9B           B8                   03CE  mov	ax,#$3CE
22791 5A9E           50                         push	ax
22792                                           ! Debug: func () void = outw+0 (used reg = )
22793 5A9F           E8         21C2            call	_outw
22794 5AA2           83C4                   04  add	sp,*4
22795                                           !BCC_EOS
22796                                           ! 2744      data = read_byte(0xa000,addr);
22797                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22798 5AA5           FF76         F8            push	-8[bp]
22799                                           ! Debug: list unsigned int = const $A000 (used reg = )
22800 5AA8           B8                   A000  mov	ax,#$A000
22801 5AAB           50                         push	ax
22802                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22803 5AAC           E8         2139            call	_read_byte
22804 5AAF           83C4                   04  add	sp,*4
22805                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22806 5AB2           8846         FB            mov	-5[bp],al
22807                                           !BCC_EOS
22808                                           ! 2745      if (AL & 0x80)
22809                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22810 5AB5           8A46         06            mov	al,6[bp]
22811 5AB8           24                     80  and	al,#$80
22812 5ABA           84C0                       test	al,al
22813 5ABC           74           0E            je  	.1BA
22814                       00005ABE            .1BB:
22815                                           ! 2746       {
22816                                           ! 2747        outw(0x3ce, 0x1803);
22817                                           ! Debug: list int = const $1803 (used reg = )
22818 5ABE           B8                   1803  mov	ax,#$1803
22819 5AC1           50                         push	ax
22820                                           ! Debug: list int = const $3CE (used reg = )
22821 5AC2           B8                   03CE  mov	ax,#$3CE
22822 5AC5           50                         push	ax
22823                                           ! Debug: func () void = outw+0 (used reg = )
22824 5AC6           E8         219B            call	_outw
22825 5AC9           83C4                   04  add	sp,*4
22826                                           !BCC_EOS
22827                                           ! 2748       }
22828                                           ! 2749      write_byte(0xa000,addr,AL);
22829                       00005ACC            .1BA:
22830                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22831 5ACC           8A46         06            mov	al,6[bp]
22832 5ACF           30E4                       xor	ah,ah
22833 5AD1           50                         push	ax
22834                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22835 5AD2           FF76         F8            push	-8[bp]
22836                                           ! Debug: list unsigned int = const $A000 (used reg = )
22837 5AD5           B8                   A000  mov	ax,#$A000
22838 5AD8           50                         push	ax
22839                                           ! Debug: func () void = write_byte+0 (used reg = )
22840 5AD9           E8         2132            call	_write_byte
22841 5ADC           83C4                   06  add	sp,*6
22842                                           !BCC_EOS
22843                                           ! 2750 #asm
22844                                           !BCC_EOS
22845                                           !BCC_ASM
22846                       0000000C            _biosfn_write_pixel.BH	set	$C
22847                       00000004            .biosfn_write_pixel.BH	set	4
22848                       00000010            _biosfn_write_pixel.CX	set	$10
22849                       00000008            .biosfn_write_pixel.CX	set	8
22850                       00000006            _biosfn_write_pixel.line	set	6
22851                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22852                       0000000E            _biosfn_write_pixel.AL	set	$E
22853                       00000006            .biosfn_write_pixel.AL	set	6
22854                       00000003            _biosfn_write_pixel.data	set	3
22855                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22856                       00000012            _biosfn_write_pixel.DX	set	$12
22857                       0000000A            .biosfn_write_pixel.DX	set	$A
22858                       00000005            _biosfn_write_pixel.mask	set	5
22859                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22860                       00000004            _biosfn_write_pixel.attr	set	4
22861                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22862                       00000007            _biosfn_write_pixel.mode	set	7
22863                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22864                       00000000            _biosfn_write_pixel.addr	set	0
22865                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22866 5ADF           BA                   03CE       mov dx, # 0x3ce
22867 5AE2           B8                   FF08       mov ax, #0xff08
22868 5AE5           EF                              out dx, ax
22869 5AE6           B8                   0005       mov ax, #0x0005
22870 5AE9           EF                              out dx, ax
22871 5AEA           B8                   0003       mov ax, #0x0003
22872 5AED           EF                              out dx, ax
22873                                           ! 2758 endasm
22874                                           !BCC_ENDASM
22875                                           !BCC_EOS
22876                                           ! 2759      break;
22877 5AEE           E9         0193            br 	.1B5
22878                                           !BCC_EOS
22879                                           ! 2760    case 0x02:
22880                                           ! 2761      if(vga_modes[line].pixbits==2)
22881                       00005AF1            .1BC:
22882                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22883 5AF1           8A46         FE            mov	al,-2[bp]
22884 5AF4           30E4                       xor	ah,ah
22885 5AF6           B1                     03  mov	cl,*3
22886 5AF8           D3E0                       shl	ax,cl
22887 5AFA           89C3                       mov	bx,ax
22888 5AFC           81C3                 01FD  add	bx,#_vga_modes
22889                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22890 5B00           8A47         03            mov	al,3[bx]
22891 5B03           3C                     02  cmp	al,*2
22892 5B05           75           1C            jne 	.1BD
22893                       00005B07            .1BE:
22894                                           ! 2762       {
22895                                           ! 2763        addr=(CX>>2)+(DX>>1)*80;
22896                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22897 5B07           8B46         0A            mov	ax,$A[bp]
22898 5B0A           D1E8                       shr	ax,*1
22899                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22900 5B0C           B9                   0050  mov	cx,*$50
22901 5B0F           F7E9                       imul	cx
22902 5B11           50                         push	ax
22903                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22904 5B12           8B46         08            mov	ax,8[bp]
22905 5B15           D1E8                       shr	ax,*1
22906 5B17           D1E8                       shr	ax,*1
22907                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22908 5B19           0346         F6            add	ax,0+..FFF8[bp]
22909 5B1C           44                         inc	sp
22910 5B1D           44                         inc	sp
22911                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22912 5B1E           8946         F8            mov	-8[bp],ax
22913                                           !BCC_EOS
22914                                           ! 2764       }
22915                                           ! 2765      else
22916                                           ! 2766       {
22917 5B21           EB           1A            jmp .1BF
22918                       00005B23            .1BD:
22919                                           ! 2767        addr=(CX>>3)+(DX>>1)*80;
22920                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22921 5B23           8B46         0A            mov	ax,$A[bp]
22922 5B26           D1E8                       shr	ax,*1
22923                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22924 5B28           B9                   0050  mov	cx,*$50
22925 5B2B           F7E9                       imul	cx
22926 5B2D           50                         push	ax
22927                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22928 5B2E           8B46         08            mov	ax,8[bp]
22929 5B31           B1                     03  mov	cl,*3
22930 5B33           D3E8                       shr	ax,cl
22931                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22932 5B35           0346         F6            add	ax,0+..FFF8[bp]
22933 5B38           44                         inc	sp
22934 5B39           44                         inc	sp
22935                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22936 5B3A           8946         F8            mov	-8[bp],ax
22937                                           !BCC_EOS
22938                                           ! 2768       }
22939                                           ! 2769      if (DX & 1) addr += 0x2000;
22940                       00005B3D            .1BF:
22941                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22942 5B3D           8A46         0A            mov	al,$A[bp]
22943 5B40           24                     01  and	al,*1
22944 5B42           84C0                       test	al,al
22945 5B44           74           09            je  	.1C0
22946                       00005B46            .1C1:
22947                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22948 5B46           8B46         F8            mov	ax,-8[bp]
22949 5B49           05                   2000  add	ax,#$2000
22950 5B4C           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2770      data = read_byte(0xb800,addr);
22953                       00005B4F            .1C0:
22954                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22955 5B4F           FF76         F8            push	-8[bp]
22956                                           ! Debug: list unsigned int = const $B800 (used reg = )
22957 5B52           B8                   B800  mov	ax,#$B800
22958 5B55           50                         push	ax
22959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22960 5B56           E8         208F            call	_read_byte
22961 5B59           83C4                   04  add	sp,*4
22962                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22963 5B5C           8846         FB            mov	-5[bp],al
22964                                           !BCC_EOS
22965                                           ! 2771      if(vg
22966                                           ! 2771 a_modes[line].pixbits==2)
22967                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22968 5B5F           8A46         FE            mov	al,-2[bp]
22969 5B62           30E4                       xor	ah,ah
22970 5B64           B1                     03  mov	cl,*3
22971 5B66           D3E0                       shl	ax,cl
22972 5B68           89C3                       mov	bx,ax
22973 5B6A           81C3                 01FD  add	bx,#_vga_modes
22974                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22975 5B6E           8A47         03            mov	al,3[bx]
22976 5B71           3C                     02  cmp	al,*2
22977 5B73           75           46            jne 	.1C2
22978                       00005B75            .1C3:
22979                                           ! 2772       {
22980                                           ! 2773        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22981                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22982 5B75           8A46         08            mov	al,8[bp]
22983 5B78           24                     03  and	al,*3
22984                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22985 5B7A           50                         push	ax
22986 5B7B           B8                   0003  mov	ax,*3
22987 5B7E           2A46         F6            sub	al,0+..FFF8[bp]
22988 5B81           80DC                   00  sbb	ah,*0
22989 5B84           44                         inc	sp
22990 5B85           44                         inc	sp
22991                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22992 5B86           D1E0                       shl	ax,*1
22993 5B88           50                         push	ax
22994                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22995 5B89           8A46         06            mov	al,6[bp]
22996 5B8C           24                     03  and	al,*3
22997                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22998 5B8E           30E4                       xor	ah,ah
22999 5B90           8B4E         F6            mov	cx,0+..FFF8[bp]
23000 5B93           D3E0                       shl	ax,cl
23001 5B95           44                         inc	sp
23002 5B96           44                         inc	sp
23003                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23004 5B97           8846         FC            mov	-4[bp],al
23005                                           !BCC_EOS
23006                                           ! 2774        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23007                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23008 5B9A           8A46         08            mov	al,8[bp]
23009 5B9D           24                     03  and	al,*3
23010                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23011 5B9F           50                         push	ax
23012 5BA0           B8                   0003  mov	ax,*3
23013 5BA3           2A46         F6            sub	al,0+..FFF8[bp]
23014 5BA6           80DC                   00  sbb	ah,*0
23015 5BA9           44                         inc	sp
23016 5BAA           44                         inc	sp
23017                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23018 5BAB           D1E0                       shl	ax,*1
23019                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23020 5BAD           89C3                       mov	bx,ax
23021 5BAF           B8                   0003  mov	ax,*3
23022 5BB2           89D9                       mov	cx,bx
23023 5BB4           D3E0                       shl	ax,cl
23024                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23025 5BB6           8846         FD            mov	-3[bp],al
23026                                           !BCC_EOS
23027                                           ! 2775       }
23028                                           ! 2776      else
23029                                           ! 2777       {
23030 5BB9           EB           40            jmp .1C4
23031                       00005BBB            .1C2:
23032                                           ! 2778        attr = (AL & 0x01) << (7 - (CX & 0x07));
23033                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23034 5BBB           8A46         08            mov	al,8[bp]
23035 5BBE           24                     07  and	al,*7
23036                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23037 5BC0           50                         push	ax
23038 5BC1           B8                   0007  mov	ax,*7
23039 5BC4           2A46         F6            sub	al,0+..FFF8[bp]
23040 5BC7           80DC                   00  sbb	ah,*0
23041 5BCA           44                         inc	sp
23042 5BCB           44                         inc	sp
23043 5BCC           50                         push	ax
23044                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23045 5BCD           8A46         06            mov	al,6[bp]
23046 5BD0           24                     01  and	al,*1
23047                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23048 5BD2           30E4                       xor	ah,ah
23049 5BD4           8B4E         F6            mov	cx,0+..FFF8[bp]
23050 5BD7           D3E0                       shl	ax,cl
23051 5BD9           44                         inc	sp
23052 5BDA           44                         inc	sp
23053                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23054 5BDB           8846         FC            mov	-4[bp],al
23055                                           !BCC_EOS
23056                                           ! 2779        mask = 0x01 << (7 - (CX & 0x07));
23057                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23058 5BDE           8A46         08            mov	al,8[bp]
23059 5BE1           24                     07  and	al,*7
23060                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23061 5BE3           50                         push	ax
23062 5BE4           B8                   0007  mov	ax,*7
23063 5BE7           2A46         F6            sub	al,0+..FFF8[bp]
23064 5BEA           80DC                   00  sbb	ah,*0
23065 5BED           44                         inc	sp
23066 5BEE           44                         inc	sp
23067                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23068 5BEF           89C3                       mov	bx,ax
23069 5BF1           B8                   0001  mov	ax,*1
23070 5BF4           89D9                       mov	cx,bx
23071 5BF6           D3E0                       shl	ax,cl
23072                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23073 5BF8           8846         FD            mov	-3[bp],al
23074                                           !BCC_EOS
23075                                           ! 2780       }
23076                                           ! 2781      if (AL & 0x80)
23077                       00005BFB            .1C4:
23078                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23079 5BFB           8A46         06            mov	al,6[bp]
23080 5BFE           24                     80  and	al,#$80
23081 5C00           84C0                       test	al,al
23082 5C02           74           0B            je  	.1C5
23083                       00005C04            .1C6:
23084                                           ! 2782       {
23085                                           ! 2783        data ^= attr;
23086                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23087 5C04           8A46         FB            mov	al,-5[bp]
23088 5C07           3246         FC            xor	al,-4[bp]
23089 5C0A           8846         FB            mov	-5[bp],al
23090                                           !BCC_EOS
23091                                           ! 2784       }
23092                                           ! 2785      else
23093                                           ! 2786       {
23094 5C0D           EB           16            jmp .1C7
23095                       00005C0F            .1C5:
23096                                           ! 2787        data &= ~mask;
23097                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23098 5C0F           8A46         FD            mov	al,-3[bp]
23099 5C12           30E4                       xor	ah,ah
23100 5C14           F7D0                       not	ax
23101                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23102 5C16           2246         FB            and	al,-5[bp]
23103 5C19           8846         FB            mov	-5[bp],al
23104                                           !BCC_EOS
23105                                           ! 2788        data |= attr;
23106                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23107 5C1C           8A46         FB            mov	al,-5[bp]
23108 5C1F           0A46         FC            or	al,-4[bp]
23109 5C22           8846         FB            mov	-5[bp],al
23110                                           !BCC_EOS
23111                                           ! 2789       }
23112                                           ! 2790      write_byte(0xb800,addr,data);
23113                       00005C25            .1C7:
23114                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23115 5C25           8A46         FB            mov	al,-5[bp]
23116 5C28           30E4                       xor	ah,ah
23117 5C2A           50                         push	ax
23118                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23119 5C2B           FF76         F8            push	-8[bp]
23120                                           ! Debug: list unsigned int = const $B800 (used reg = )
23121 5C2E           B8                   B800  mov	ax,#$B800
23122 5C31           50                         push	ax
23123                                           ! Debug: func () void = write_byte+0 (used reg = )
23124 5C32           E8         1FD9            call	_write_byte
23125 5C35           83C4                   06  add	sp,*6
23126                                           !BCC_EOS
23127                                           ! 2791      break;
23128 5C38           EB           4A            jmp .1B5
23129                                           !BCC_EOS
23130                                           ! 2792    case 0x05:
23131                                           ! 2793      addr=CX+DX*(read_word(0x40,0x4A)*8);
23132                       00005C3A            .1C8:
23133                                           ! Debug: list int = const $4A (used reg = )
23134 5C3A           B8                   004A  mov	ax,*$4A
23135 5C3D           50                         push	ax
23136                                           ! Debug: list int = const $40 (used reg = )
23137 5C3E           B8                   0040  mov	ax,*$40
23138 5C41           50                         push	ax
23139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23140 5C42           E8         1FB6            call	_read_word
23141 5C45           83C4                   04  add	sp,*4
23142                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23143 5C48           B1                     03  mov	cl,*3
23144 5C4A           D3E0                       shl	ax,cl
23145                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23146                                           ! Debug: expression subtree swapping
23147 5C4C           8B4E         0A            mov	cx,$A[bp]
23148 5C4F           F7E9                       imul	cx
23149                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23150                                           ! Debug: expression subtree swapping
23151 5C51           0346         08            add	ax,8[bp]
23152                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23153 5C54           8946         F8            mov	-8[bp],ax
23154                                           !BCC_EOS
23155                                           ! 2794      write_byte(0xa000,addr,AL);
23156                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23157 5C57           8A46         06            mov	al,6[bp]
23158 5C5A           30E4                       xor	ah,ah
23159 5C5C           50                         push	ax
23160                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23161 5C5D           FF76         F8            push	-8[bp]
23162                                           ! Debug: list unsigned int = const $A000 (used reg = )
23163 5C60           B8                   A000  mov	ax,#$A000
23164 5C63           50                         push	ax
23165                                           ! Debug: func () void = write_byte+0 (used reg = )
23166 5C64           E8         1FA7            call	_write_byte
23167 5C67           83C4                   06  add	sp,*6
23168                                           !BCC_EOS
23169                                           ! 2795      break;
23170 5C6A           EB           18            jmp .1B5
23171                                           !BCC_EOS
23172                                           ! 2796   }
23173                                           ! 2797 }
23174 5C6C           EB           16            jmp .1B5
23175                       00005C6E            .1B7:
23176 5C6E           2C                     02  sub	al,*2
23177 5C70         0F84         FE7D            beq 	.1BC
23178 5C74           2C                     01  sub	al,*1
23179 5C76         0F84         FDD1            beq 	.1B9
23180 5C7A           2C                     01  sub	al,*1
23181 5C7C         0F84         FDCB            beq 	.1B8
23182 5C80           2C                     01  sub	al,*1
23183 5C82           74           B6            je 	.1C8
23184                       00005C84            .1B5:
23185                       FFFFFFF6            ..FFF8	=	-$A
23186 5C84           89EC                       mov	sp,bp
23187 5C86           5D                         pop	bp
23188 5C87           C3                         ret
23189                                           ! 2798 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23190                                           ! Register BX used in function biosfn_write_pixel
23191                       00005C88            _biosfn_read_pixel:
23192                                           !BCC_EOS
23193                                           !BCC_EOS
23194                                           !BCC_EOS
23195                                           !BCC_EOS
23196                                           ! 2799 {
23197                                           ! 2800  Bit8u mode,line,mask,attr,data,i;
23198                                           !BCC_EOS
23199                                           ! 2801  Bit16u addr;
23200                                           !BCC_EOS
23201                                           ! 2802  Bit16u ss=get_SS();
23202 5C88           55                         push	bp
23203 5C89           89E5                       mov	bp,sp
23204 5C8B           83C4                   F6  add	sp,*-$A
23205                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23206 5C8E           E8         1FE3            call	_get_SS
23207                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23208 5C91           8946         F6            mov	-$A[bp],ax
23209                                           !BCC_EOS
23210                                           ! 2803  mode=read_byte(0x40,0x49);
23211                                           ! Debug: list int = const $49 (used reg = )
23212 5C94           B8                   0049  mov	ax,*$49
23213 5C97           50                         push	ax
23214                                           ! Debug: list int = const $40 (used reg = )
23215 5C98           B8                   0040  mov	ax,*$40
23216 5C9B           50                         push	ax
23217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23218 5C9C           E8         1F49            call	_read_byte
23219 5C9F           83C4                   04  add	sp,*4
23220                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23221 5CA2           8846         FF            mov	-1[bp],al
23222                                           !BCC_EOS
23223                                           ! 2804  line=find_vga_entry(mode);
23224                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23225 5CA5           8A46         FF            mov	al,-1[bp]
23226 5CA8           30E4                       xor	ah,ah
23227 5CAA           50                         push	ax
23228                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23229 5CAB           E8         1E4E            call	_find_vga_entry
23230 5CAE           44                         inc	sp
23231 5CAF           44                         inc	sp
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23233 5CB0           8846         FE            mov	-2[bp],al
23234                                           !BCC_EOS
23235                                           ! 2805  if(line==0xFF)return;
23236                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23237 5CB3           8A46         FE            mov	al,-2[bp]
23238 5CB6           3C                     FF  cmp	al,#$FF
23239 5CB8           75           04            jne 	.1C9
23240                       00005CBA            .1CA:
23241 5CBA           89EC                       mov	sp,bp
23242 5CBC           5D                         pop	bp
23243 5CBD           C3                         ret
23244                                           !BCC_EOS
23245                                           ! 2806  if(vga_modes[line].class==0x00)return;
23246                       00005CBE            .1C9:
23247                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23248 5CBE           8A46         FE            mov	al,-2[bp]
23249 5CC1           30E4                       xor	ah,ah
23250 5CC3           B1                     03  mov	cl,*3
23251 5CC5           D3E0                       shl	ax,cl
23252 5CC7           89C3                       mov	bx,ax
23253 5CC9           81C3                 01FD  add	bx,#_vga_modes
23254                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23255 5CCD           8A47         01            mov	al,1[bx]
23256 5CD0           84C0                       test	al,al
23257 5CD2           75           04            jne 	.1CB
23258                       00005CD4            .1CC:
23259 5CD4           89EC                       mov	sp,bp
23260 5CD6           5D                         pop	bp
23261 5CD7           C3                         ret
23262                                           !BCC_EOS
23263                                           ! 2807  switch(vga_modes[line].memmodel)
23264                       00005CD8            .1CB:
23265                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23266 5CD8           8A46         FE            mov	al,-2[bp]
23267 5CDB           30E4                       xor	ah,ah
23268 5CDD           B1                     03  mov	cl,*3
23269 5CDF           D3E0                       shl	ax,cl
23270 5CE1           89C3                       mov	bx,ax
23271 5CE3           81C3                 01FD  add	bx,#_vga_modes
23272 5CE7           8A47         02            mov	al,2[bx]
23273                                           ! 2808   {
23274 5CEA           E9         0167            br 	.1CF
23275                                           ! 2809    case 0x04:
23276                                           ! 2810    case 0x03:
23277                       00005CED            .1D0:
23278                                           ! 2811      addr = CX/8+DX*read_word(0x40,0x4A);
23279                       00005CED            .1D1:
23280                                           ! Debug: list int = const $4A (used reg = )
23281 5CED           B8                   004A  mov	ax,*$4A
23282 5CF0           50                         push	ax
23283                                           ! Debug: list int = const $40 (used reg = )
23284 5CF1           B8                   0040  mov	ax,*$40
23285 5CF4           50                         push	ax
23286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23287 5CF5           E8         1F03            call	_read_word
23288 5CF8           83C4                   04  add	sp,*4
23289                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23290                                           ! Debug: expression subtree swapping
23291 5CFB           8B4E         08            mov	cx,8[bp]
23292 5CFE           F7E9                       imul	cx
23293 5D00           50                         push	ax
23294                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23295 5D01           8B46         06            mov	ax,6[bp]
23296 5D04           B1                     03  mov	cl,*3
23297 5D06           D3E8                       shr	ax,cl
23298                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23299 5D08           0346         F4            add	ax,0+..FFF7[bp]
23300 5D0B           44                         inc	sp
23301 5D0C           44                         inc	sp
23302                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23303 5D0D           8946         F8            mov	-8[bp],ax
23304                                           !BCC_EOS
23305                                           ! 2812      mask = 0x80 >> (CX & 0x07);
23306                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23307 5D10           8A46         06            mov	al,6[bp]
23308 5D13           24                     07  and	al,*7
23309                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23310 5D15           30E4                       xor	ah,ah
23311 5D17           89C3                       mov	bx,ax
23312 5D19           B8                   0080  mov	ax,#$80
23313 5D1C           89D9                       mov	cx,bx
23314 5D1E           D3F8                       sar	ax,cl
23315                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23316 5D20           8846         FD            mov	-3[bp],al
23317                                           !BCC_EOS
23318                                           ! 2813      attr = 0x00;
23319                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23320 5D23           30C0                       xor	al,al
23321 5D25           8846         FC            mov	-4[bp],al
23322                                           !BCC_EOS
23323                                           ! 2814      for(i=0;i<4;i++)
23324                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23325 5D28           30C0                       xor	al,al
23326 5D2A           8846         FA            mov	-6[bp],al
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           ! 2815       {
23330 5D2D           EB           4B            jmp .1D4
23331                       00005D2F            .1D5:
23332                                           ! 2816        outw(0x3ce, (i << 8) | 0x04);
23333                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23334 5D2F           8A46         FA            mov	al,-6[bp]
23335 5D32           30E4                       xor	ah,ah
23336 5D34           88C4                       mov	ah,al
23337 5D36           30C0                       xor	al,al
23338                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23339 5D38           0C                     04  or	al,*4
23340                                           ! Debug: list unsigned int = ax+0 (used reg = )
23341 5D3A           50                         push	ax
23342                                           ! Debug: list int = const $3CE (used reg = )
23343 5D3B           B8                   03CE  mov	ax,#$3CE
23344 5D3E           50                         push	ax
23345                                           ! Debug: func () void = outw+0 (used reg = )
23346 5D3F           E8         1F22            call	_outw
23347 5D42           83C4                   04  add	sp,*4
23348                                           !BCC_EOS
23349                                           ! 2817        data = read_byte(0xa000,addr) & mask;
23350                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23351 5D45           FF76         F8            push	-8[bp]
23352                                           ! Debug: list unsigned int = const $A000 (used reg = )
23353 5D48           B8                   A000  mov	ax,#$A000
23354 5D4B           50                         push	ax
23355                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23356 5D4C           E8         1E99            call	_read_byte
23357 5D4F           83C4                   04  add	sp,*4
23358                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23359 5D52           2246         FD            and	al,-3[bp]
23360                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23361 5D55           8846         FB            mov	-5[bp],al
23362                                           !BCC_EOS
23363                                           ! 2818        if (data > 0) attr |= (0x01 << i);
23364                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23365 5D58           8A46         FB            mov	al,-5[bp]
23366 5D5B           84C0                       test	al,al
23367 5D5D           74           14            je  	.1D6
23368                       00005D5F            .1D7:
23369                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23370 5D5F           8A46         FA            mov	al,-6[bp]
23371 5D62           30E4                       xor	ah,ah
23372 5D64           89C3                       mov	bx,ax
23373 5D66           B8                   0001  mov	ax,*1
23374 5D69           89D9                       mov	cx,bx
23375 5D6B           D3E0                       shl	ax,cl
23376                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23377 5D6D           0A46         FC            or	al,-4[bp]
23378 5D70           8846         FC            mov	-4[bp],al
23379                                           !BCC_EOS
23380                                           ! 2819       }
23381                       00005D73            .1D6:
23382                                           ! 2820      break;
23383                       00005D73            .1D3:
23384                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23385 5D73           8A46         FA            mov	al,-6[bp]
23386 5D76           40                         inc	ax
23387 5D77           8846         FA            mov	-6[bp],al
23388                       00005D7A            .1D4:
23389                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23390 5D7A           8A46         FA            mov	al,-6[bp]
23391 5D7D           3C                     04  cmp	al,*4
23392 5D7F           72           AE            jb 	.1D5
23393                       00005D81            .1D8:
23394                       00005D81            .1D2:
23395 5D81           E9         00E8            br 	.1CD
23396                                           !BCC_EOS
23397                                           ! 2821    case 0x02:
23398                                           ! 2822      addr=(CX>>2)+(DX>>1)*80;
23399                       00005D84            .1D9:
23400                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23401 5D84           8B46         08            mov	ax,8[bp]
23402 5D87           D1E8                       shr	ax,*1
23403                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23404 5D89           B9                   0050  mov	cx,*$50
23405 5D8C           F7E9                       imul	cx
23406 5D8E           50                         push	ax
23407                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23408 5D8F           8B46         06            mov	ax,6[bp]
23409 5D92           D1E8                       shr	ax,*1
23410 5D94           D1E8                       shr	ax,*1
23411                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23412 5D96           0346         F4            add	ax,0+..FFF7[bp]
23413 5D99           44                         inc	sp
23414 5D9A           44                         inc	sp
23415                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23416 5D9B           8946         F8            mov	-8[bp],ax
23417                                           !BCC_EOS
23418                                           ! 2823      if (DX & 1) addr += 0x2000;
23419                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23420 5D9E           8A46         08            mov	al,8[bp]
23421 5DA1           24                     01  and	al,*1
23422 5DA3           84C0                       test	al,al
23423 5DA5           74           09            je  	.1DA
23424                       00005DA7            .1DB:
23425                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23426 5DA7           8B46         F8            mov	ax,-8[bp]
23427 5DAA           05                   2000  add	ax,#$2000
23428 5DAD           8946         F8            mov	-8[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2824      data = read_byte(0xb800,addr);
23431                       00005DB0            .1DA:
23432                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23433 5DB0           FF76         F8            push	-8[bp]
23434                                           ! Debug: list unsigned int = const $B800 (used reg = )
23435 5DB3           B8                   B800  mov	ax,#$B800
23436 5DB6           50                         push	ax
23437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23438 5DB7           E8         1E2E            call	_read_byte
23439 5DBA           83C4                   04  add	sp,*4
23440                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DBD           8846         FB            mov	-5[bp],al
23442                                           !BCC_EOS
23443                                           ! 2825      if(vga_modes[line].pixbits==2)
23444                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23445 5DC0           8A46         FE            mov	al,-2[bp]
23446 5DC3           30E4                       xor	ah,ah
23447 5DC5           B1                     03  mov	cl,*3
23448 5DC7           D3E0                       shl	ax,cl
23449 5DC9           89C3                       mov	bx,ax
23450 5DCB           81C3                 01FD  add	bx,#_vga_modes
23451                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23452 5DCF           8A47         03            mov	al,3[bx]
23453 5DD2           3C                     02  cmp	al,*2
23454 5DD4           75           25            jne 	.1DC
23455                       00005DD6            .1DD:
23456                                           ! 2826       {
23457                                           ! 2827        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23458                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23459 5DD6           8A46         06            mov	al,6[bp]
23460 5DD9           24                     03  and	al,*3
23461                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23462 5DDB           50                         push	ax
23463 5DDC           B8                   0003  mov	ax,*3
23464 5DDF           2A46         F4            sub	al,0+..FFF7[bp]
23465 5DE2           80DC                   00  sbb	ah,*0
23466 5DE5           44                         inc	sp
23467 5DE6           44                         inc	sp
23468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23469 5DE7           D1E0                       shl	ax,*1
23470                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23471 5DE9           89C3                       mov	bx,ax
23472 5DEB           8A46         FB            mov	al,-5[bp]
23473 5DEE           30E4                       xor	ah,ah
23474 5DF0           89D9                       mov	cx,bx
23475 5DF2           D3E8                       shr	ax,cl
23476                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23477 5DF4           24                     03  and	al,*3
23478                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23479 5DF6           8846         FC            mov	-4[bp],al
23480                                           !BCC_EOS
23481                                           ! 2828       }
23482                                           ! 2829      else
23483                                           ! 2830       {
23484 5DF9           EB           21            jmp .1DE
23485                       00005DFB            .1DC:
23486                                           ! 2831        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23487                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23488 5DFB           8A46         06            mov	al,6[bp]
23489 5DFE           24                     07  and	al,*7
23490                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23491 5E00           50                         push	ax
23492 5E01           B8                   0007  mov	ax,*7
23493 5E04           2A46         F4            sub	al,0+..FFF7[bp]
23494 5E07           80DC                   00  sbb	ah,*0
23495 5E0A           44                         inc	sp
23496 5E0B           44                         inc	sp
23497                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23498 5E0C           89C3                       mov	bx,ax
23499 5E0E           8A46         FB            mov	al,-5[bp]
23500 5E11           30E4                       xor	ah,ah
23501 5E13           89D9                       mov	cx,bx
23502 5E15           D3E8                       shr	ax,cl
23503                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23504 5E17           24                     01  and	al,*1
23505                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5E19           8846         FC            mov	-4[bp],al
23507                                           !BCC_EOS
23508                                           ! 2832       }
23509                                           ! 2833      break;
23510                       00005E1C            .1DE:
23511 5E1C           EB           4E            jmp .1CD
23512                                           !BCC_EOS
23513                                           ! 2834    case 0x05:
23514                                           ! 2835      addr=CX+DX*(read_word(0x40,0x4A)*8);
23515                       00005E1E            .1DF:
23516                                           ! Debug: list int = const $4A (used reg = )
23517 5E1E           B8                   004A  mov	ax,*$4A
23518 5E21           50                         push	ax
23519                                           ! Debug: list int = const $40 (used reg = )
23520 5E22           B8                   0040  mov	ax,*$40
23521 5E25           50                         push	ax
23522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23523 5E26           E8         1DD2            call	_read_word
23524 5E29           83C4                   04  add	sp,*4
23525                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23526 5E2C           B1                     03  mov	cl,*3
23527 5E2E           D3E0                       shl	ax,cl
23528                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23529                                           ! Debug: expression subtree swapping
23530 5E30           8B4E         08            mov	cx,8[bp]
23531 5E33           F7E9                       imul	cx
23532                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23533                                           ! Debug: expression subtree swapping
23534 5E35           0346         06            add	ax,6[bp]
23535                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23536 5E38           8946         F8            mov	-8[bp],ax
23537                                           !BCC_EOS
23538                                           ! 2836      attr=read_byte(0xa000,addr);
23539                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23540 5E3B           FF76         F8            push	-8[bp]
23541                                           ! Debug: list unsigned int = const $A000 (used reg = )
23542 5E3E           B8                   A000  mov	ax,#$A000
23543 5E41           50                         push	ax
23544                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23545 5E42           E8         1DA3            call	_read_byte
23546 5E45           83C4                   04  add	sp,*4
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23548 5E48           8846         FC            mov	-4[bp],al
23549                                           !BCC_EOS
23550                                           ! 2837      break;
23551 5E4B           EB           1F            jmp .1CD
23552                                           !BCC_EOS
23553                                           ! 2838    default:
23554                                           ! 2839      attr = 0;
23555                       00005E4D            .1E0:
23556                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23557 5E4D           30C0                       xor	al,al
23558 5E4F           8846         FC            mov	-4[bp],al
23559                                           !BCC_EOS
23560                                           ! 2840   }
23561                                           ! 2841  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23562 5E52           EB           18            jmp .1CD
23563                       00005E54            .1CF:
23564 5E54           2C                     02  sub	al,*2
23565 5E56         0F84         FF2A            beq 	.1D9
23566 5E5A           2C                     01  sub	al,*1
23567 5E5C         0F84         FE8D            beq 	.1D1
23568 5E60           2C                     01  sub	al,*1
23569 5E62         0F84         FE87            beq 	.1D0
23570 5E66           2C                     01  sub	al,*1
23571 5E68           74           B4            je 	.1DF
23572 5E6A           EB           E1            jmp	.1E0
23573                       00005E6C            .1CD:
23574                       FFFFFFF4            ..FFF7	=	-$C
23575                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23576 5E6C           FF76         0A            push	$A[bp]
23577                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23578 5E6F           FF76         F6            push	-$A[bp]
23579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23580 5E72           E8         1D86            call	_read_word
23581 5E75           83C4                   04  add	sp,*4
23582                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23583 5E78           30C0                       xor	al,al
23584                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23585 5E7A           0A46         FC            or	al,-4[bp]
23586                                           ! Debug: list unsigned int = ax+0 (used reg = )
23587 5E7D           50                         push	ax
23588                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23589 5E7E           FF76         0A            push	$A[bp]
23590                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23591 5E81           FF76         F6            push	-$A[bp]
23592                                           ! Debug: func () void = write_word+0 (used reg = )
23593 5E84           E8         1D9F            call	_write_word
23594 5E87           83C4                   06  add	sp,*6
23595                                           !BCC_EOS
23596                                           ! 2842 }
23597 5E8A           89EC                       mov	sp,bp
23598 5E8C           5D                         pop	bp
23599 5E8D           C3                         ret
23600                                           ! 2843 static void biosfn_write_teletype (car, page, attr, flag)
23601                                           ! Register BX used in function biosfn_read_pixel
23602                                           ! 2844 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23603                       00005E8E            _biosfn_write_teletype:
23604                                           !BCC_EOS
23605                                           !BCC_EOS
23606                                           !BCC_EOS
23607                                           !BCC_EOS
23608                                           ! 2845 {
23609                                           ! 2846  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23610                                           !BCC_EOS
23611                                           ! 2847  Bit16u nbcols,nbrows,address;
23612                                           !BCC_EOS
23613                                           ! 2848  Bit16u cursor,dummy;
23614                                           !BCC_EOS
23615                                           ! 2849  if(page==0xff)
23616 5E8E           55                         push	bp
23617 5E8F           89E5                       mov	bp,sp
23618 5E91           83C4                   F0  add	sp,*-$10
23619                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23620 5E94           8A46         06            mov	al,6[bp]
23621 5E97           3C                     FF  cmp	al,#$FF
23622 5E99           75           11            jne 	.1E1
23623                       00005E9B            .1E2:
23624                                           ! 2850   page=read_byte(0x40,0x62);
23625                                           ! Debug: list int = const $62 (used reg = )
23626 5E9B           B8                   0062  mov	ax,*$62
23627 5E9E           50                         push	ax
23628                                           ! Debug: list int = const $40 (used reg = )
23629 5E9F           B8                   0040  mov	ax,*$40
23630 5EA2           50                         push	ax
23631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23632 5EA3           E8         1D42            call	_read_byte
23633 5EA6           83C4                   04  add	sp,*4
23634                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23635 5EA9           8846         06            mov	6[bp],al
23636                                           !BCC_EOS
23637                                           ! 2851  mode=read_byte(0x40,0x49);
23638                       00005EAC            .1E1:
23639                                           ! Debug: list int = const $49 (used reg = )
23640 5EAC           B8                   0049  mov	ax,*$49
23641 5EAF           50                         push	ax
23642                                           ! Debug: list int = const $40 (used reg = )
23643 5EB0           B8                   0040  mov	ax,*$40
23644 5EB3           50                         push	ax
23645                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23646 5EB4           E8         1D31            call	_read_byte
23647 5EB7           83C4                   04  add	sp,*4
23648                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23649 5EBA           8846         FC            mov	-4[bp],al
23650                                           !BCC_EOS
23651                                           ! 2852  line=find_vga_entry(mode);
23652                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23653 5EBD           8A46         FC            mov	al,-4[bp]
23654 5EC0           30E4                       xor	ah,ah
23655 5EC2           50                         push	ax
23656                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23657 5EC3           E8         1C36            call	_find_vga_entry
23658 5EC6           44                         inc	sp
23659 5EC7           44                         inc	sp
23660                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23661 5EC8           8846         FB            mov	-5[bp],al
23662                                           !BCC_EOS
23663                                           ! 2853  if(line==0xFF)return;
23664                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23665 5ECB           8A46         FB            mov	al,-5[bp]
23666 5ECE           3C                     FF  cmp	al,#$FF
23667 5ED0           75           04            jne 	.1E3
23668                       00005ED2            .1E4:
23669 5ED2           89EC                       mov	sp,bp
23670 5ED4           5D                         pop	bp
23671 5ED5           C3                         ret
23672                                           !BCC_EOS
23673                                           ! 2854  biosfn_get_cursor_pos(page,&dummy,&cursor);
23674                       00005ED6            .1E3:
23675                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23676 5ED6           8D5E         F2            lea	bx,-$E[bp]
23677 5ED9           53                         push	bx
23678                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23679 5EDA           8D5E         F0            lea	bx,-$10[bp]
23680 5EDD           53                         push	bx
23681                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23682 5EDE           8A46         06            mov	al,6[bp]
23683 5EE1           30E4                       xor	ah,ah
23684 5EE3           50                         push	ax
23685                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23686 5EE4           E8         E562            call	_biosfn_get_cursor_pos
23687 5EE7           83C4                   06  add	sp,*6
23688                                           !BCC_EOS
23689                                           ! 2855  xcurs=cursor&0x00ff;ycurs=(cursor
23690                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23691 5EEA           8A46         F2            mov	al,-$E[bp]
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23693 5EED           8846         FE            mov	-2[bp],al
23694                                           !BCC_EOS
23695                                           ! 2855 &0xff00)>>8;
23696                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23697 5EF0           8B46         F2            mov	ax,-$E[bp]
23698 5EF3           30C0                       xor	al,al
23699                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23700 5EF5           88E0                       mov	al,ah
23701 5EF7           30E4                       xor	ah,ah
23702                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23703 5EF9           8846         FD            mov	-3[bp],al
23704                                           !BCC_EOS
23705                                           ! 2856  nbrows=read_byte(0x40,0x84)+1;
23706                                           ! Debug: list int = const $84 (used reg = )
23707 5EFC           B8                   0084  mov	ax,#$84
23708 5EFF           50                         push	ax
23709                                           ! Debug: list int = const $40 (used reg = )
23710 5F00           B8                   0040  mov	ax,*$40
23711 5F03           50                         push	ax
23712                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23713 5F04           E8         1CE1            call	_read_byte
23714 5F07           83C4                   04  add	sp,*4
23715                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23716 5F0A           30E4                       xor	ah,ah
23717                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23718 5F0C           40                         inc	ax
23719 5F0D           8946         F6            mov	-$A[bp],ax
23720                                           !BCC_EOS
23721                                           ! 2857  nbcols=read_word(0x40,0x4A);
23722                                           ! Debug: list int = const $4A (used reg = )
23723 5F10           B8                   004A  mov	ax,*$4A
23724 5F13           50                         push	ax
23725                                           ! Debug: list int = const $40 (used reg = )
23726 5F14           B8                   0040  mov	ax,*$40
23727 5F17           50                         push	ax
23728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23729 5F18           E8         1CE0            call	_read_word
23730 5F1B           83C4                   04  add	sp,*4
23731                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23732 5F1E           8946         F8            mov	-8[bp],ax
23733                                           !BCC_EOS
23734                                           ! 2858  switch(car)
23735 5F21           8A46         04            mov	al,4[bp]
23736                                           ! 2859   {
23737 5F24           E9         01ED            br 	.1E7
23738                                           ! 2860    case 7:
23739                                           ! 2861     break;
23740                       00005F27            .1E8:
23741 5F27           E9         020B            br 	.1E5
23742                                           !BCC_EOS
23743                                           ! 2862    case 8:
23744                                           ! 2863     if(xcurs>0)xcurs--;
23745                       00005F2A            .1E9:
23746                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23747 5F2A           8A46         FE            mov	al,-2[bp]
23748 5F2D           84C0                       test	al,al
23749 5F2F           74           07            je  	.1EA
23750                       00005F31            .1EB:
23751                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23752 5F31           8A46         FE            mov	al,-2[bp]
23753 5F34           48                         dec	ax
23754 5F35           8846         FE            mov	-2[bp],al
23755                                           !BCC_EOS
23756                                           ! 2864     break;
23757                       00005F38            .1EA:
23758 5F38           E9         01FA            br 	.1E5
23759                                           !BCC_EOS
23760                                           ! 2865    case '\r':
23761                                           ! 2866     xcurs=0;
23762                       00005F3B            .1EC:
23763                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23764 5F3B           30C0                       xor	al,al
23765 5F3D           8846         FE            mov	-2[bp],al
23766                                           !BCC_EOS
23767                                           ! 2867     break;
23768 5F40           E9         01F2            br 	.1E5
23769                                           !BCC_EOS
23770                                           ! 2868    case '\n':
23771                                           ! 2869     ycurs++;
23772                       00005F43            .1ED:
23773                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23774 5F43           8A46         FD            mov	al,-3[bp]
23775 5F46           40                         inc	ax
23776 5F47           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2870     break;
23779 5F4A           E9         01E8            br 	.1E5
23780                                           !BCC_EOS
23781                                           ! 2871    case '\t':
23782                                           ! 2872     do
23783                       00005F4D            .1EE:
23784                                           ! 2873      {
23785                       00005F4D            .1F1:
23786                                           ! 2874       biosfn_write_teletype(' ',page,attr,flag);
23787                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23788 5F4D           8A46         0A            mov	al,$A[bp]
23789 5F50           30E4                       xor	ah,ah
23790 5F52           50                         push	ax
23791                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23792 5F53           8A46         08            mov	al,8[bp]
23793 5F56           30E4                       xor	ah,ah
23794 5F58           50                         push	ax
23795                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23796 5F59           8A46         06            mov	al,6[bp]
23797 5F5C           30E4                       xor	ah,ah
23798 5F5E           50                         push	ax
23799                                           ! Debug: list int = const $20 (used reg = )
23800 5F5F           B8                   0020  mov	ax,*$20
23801 5F62           50                         push	ax
23802                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23803 5F63           E8         FF28            call	_biosfn_write_teletype
23804 5F66           83C4                   08  add	sp,*8
23805                                           !BCC_EOS
23806                                           ! 2875       biosfn_get_cursor_pos(page,&dummy,&cursor);
23807                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23808 5F69           8D5E         F2            lea	bx,-$E[bp]
23809 5F6C           53                         push	bx
23810                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23811 5F6D           8D5E         F0            lea	bx,-$10[bp]
23812 5F70           53                         push	bx
23813                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23814 5F71           8A46         06            mov	al,6[bp]
23815 5F74           30E4                       xor	ah,ah
23816 5F76           50                         push	ax
23817                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23818 5F77           E8         E4CF            call	_biosfn_get_cursor_pos
23819 5F7A           83C4                   06  add	sp,*6
23820                                           !BCC_EOS
23821                                           ! 2876       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23822                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23823 5F7D           8A46         F2            mov	al,-$E[bp]
23824                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23825 5F80           8846         FE            mov	-2[bp],al
23826                                           !BCC_EOS
23827                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23828 5F83           8B46         F2            mov	ax,-$E[bp]
23829 5F86           30C0                       xor	al,al
23830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23831 5F88           88E0                       mov	al,ah
23832 5F8A           30E4                       xor	ah,ah
23833                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23834 5F8C           8846         FD            mov	-3[bp],al
23835                                           !BCC_EOS
23836                                           ! 2877      }while(xcurs%8==0);
23837                       00005F8F            .1F0:
23838                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23839 5F8F           8A46         FE            mov	al,-2[bp]
23840 5F92           30E4                       xor	ah,ah
23841 5F94           24                     07  and	al,*7
23842                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23843 5F96           84C0                       test	al,al
23844 5F98           74           B3            je 	.1F1
23845                       00005F9A            .1F2:
23846                                           !BCC_EOS
23847                                           ! 2878     break;
23848                       00005F9A            .1EF:
23849 5F9A           E9         0198            br 	.1E5
23850                                           !BCC_EOS
23851                                           ! 2879    default:
23852                                           ! 2880     if(vga_modes[line].class==0x00)
23853                       00005F9D            .1F3:
23854                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23855 5F9D           8A46         FB            mov	al,-5[bp]
23856 5FA0           30E4                       xor	ah,ah
23857 5FA2           B1                     03  mov	cl,*3
23858 5FA4           D3E0                       shl	ax,cl
23859 5FA6           89C3                       mov	bx,ax
23860 5FA8           81C3                 01FD  add	bx,#_vga_modes
23861                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23862 5FAC           8A47         01            mov	al,1[bx]
23863 5FAF           84C0                       test	al,al
23864 5FB1         0F85         0084            bne 	.1F4
23865                       00005FB5            .1F5:
23866                                           ! 2881      {
23867                                           ! 2882       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23868                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23869 5FB5           8A46         FD            mov	al,-3[bp]
23870 5FB8           30E4                       xor	ah,ah
23871 5FBA           8B4E         F8            mov	cx,-8[bp]
23872 5FBD           F7E9                       imul	cx
23873                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23874                                           ! Debug: expression subtree swapping
23875 5FBF           0246         FE            add	al,-2[bp]
23876 5FC2           80D4                   00  adc	ah,*0
23877                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23878 5FC5           D1E0                       shl	ax,*1
23879 5FC7           50                         push	ax
23880                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23881 5FC8           8B46         F8            mov	ax,-8[bp]
23882 5FCB           8B4E         F6            mov	cx,-$A[bp]
23883 5FCE           F7E9                       imul	cx
23884                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23885 5FD0           D1E0                       shl	ax,*1
23886                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23887 5FD2           0C                     FF  or	al,#$FF
23888                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23889                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23890 5FD4           89C3                       mov	bx,ax
23891 5FD6           8A46         06            mov	al,6[bp]
23892 5FD9           30E4                       xor	ah,ah
23893 5FDB           93                         xchg	ax,bx
23894 5FDC           40                         inc	ax
23895 5FDD           89D9                       mov	cx,bx
23896 5FDF           F7E9                       imul	cx
23897                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23898 5FE1           0346         EE            add	ax,0+..FFF6[bp]
23899 5FE4           44                         inc	sp
23900 5FE5           44                         inc	sp
23901                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23902 5FE6           8946         F4            mov	-$C[bp],ax
23903                                           !BCC_EOS
23904                                           ! 2883       write_byte(vga_modes[line].sstart,address,car);
23905                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23906 5FE9           8A46         04            mov	al,4[bp]
23907 5FEC           30E4                       xor	ah,ah
23908 5FEE           50                         push	ax
23909                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23910 5FEF           FF76         F4            push	-$C[bp]
23911                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 5FF2           8A46         FB            mov	al,-5[bp]
23913 5FF5           30E4                       xor	ah,ah
23914 5FF7           B1                     03  mov	cl,*3
23915 5FF9           D3E0                       shl	ax,cl
23916 5FFB           89C3                       mov	bx,ax
23917 5FFD           81C3                 01FD  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 6001           FF77         04            push	4[bx]
23920                                           ! Debug: func () void = write_byte+0 (used reg = )
23921 6004           E8         1C07            call	_write_byte
23922 6007           83C4                   06  add	sp,*6
23923                                           !BCC_EOS
23924                                           ! 2884       if(flag==3)
23925                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23926 600A           8A46         0A            mov	al,$A[bp]
23927 600D           3C                     03  cmp	al,*3
23928 600F         0F85         0023            bne 	.1F6
23929                       00006013            .1F7:
23930                                           ! 2885        write_byte(vga_modes[line].sstart,address+1,attr);
23931                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23932 6013           8A46         08            mov	al,8[bp]
23933 6016           30E4                       xor	ah,ah
23934 6018           50                         push	ax
23935                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23936 6019           8B46         F4            mov	ax,-$C[bp]
23937                                           ! Debug: list unsigned int = ax+1 (used reg = )
23938 601C           40                         inc	ax
23939 601D           50                         push	ax
23940                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23941 601E           8A46         FB            mov	al,-5[bp]
23942 6021           30E4                       xor	ah,ah
23943 6023           B1                     03  mov	cl,*3
23944 6025           D3E0                       shl	ax,cl
23945 6027           89C3                       mov	bx,ax
23946 6029           81C3                 01FD  add	bx,#_vga_modes
23947                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23948 602D           FF77         04            push	4[bx]
23949                                           ! Debug: func () void = write_byte+0 (used reg = )
23950 6030           E8         1BDB            call	_write_byte
23951 6033           83C4                   06  add	sp,*6
23952                                           !BCC_EOS
23953                                           ! 2886      }
23954                       00006036            .1F6:
23955                                           ! 2887     else
23956                                           ! 2888      {
23957 6036           E9         00D2            br 	.1F8
23958                       00006039            .1F4:
23959                                           ! 2889       cheight=video_param_table[line_to_vpti[line]].cheight;
23960                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23961 6039           8A46         FB            mov	al,-5[bp]
23962 603C           30E4                       xor	ah,ah
23963 603E           89C3                       mov	bx,ax
23964                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23965 6040           8A87       027D            mov	al,_line_to_vpti[bx]
23966 6044           30E4                       xor	ah,ah
23967 6046           B1                     06  mov	cl,*6
23968 6048           D3E0                       shl	ax,cl
23969 604A           89C3                       mov	bx,ax
23970 604C           81C3                 0291  add	bx,#_video_param_table
23971                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23972 6050           8A47         02            mov	al,2[bx]
23973 6053           8846         FF            mov	-1[bp],al
23974                                           !BCC_EOS
23975                                           ! 2890       bpp=vga_modes[line].pixbits;
23976                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23977 6056           8A46         FB            mov	al,-5[bp]
23978 6059           30E4                       xor	ah,ah
23979 605B           B1                     03  mov	cl,*3
23980 605D           D3E0                       shl	ax,cl
23981 605F           89C3                       mov	bx,ax
23982 6061           81C3                 01FD  add	bx,#_vga_modes
23983                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23984 6065           8A47         03            mov	al,3[bx]
23985 6068           8846         FA            mov	-6[bp],al
23986                                           !BCC_EOS
23987                                           ! 2891       switch(vga_modes[line].memmodel)
23988                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23989 606B           8A46         FB            mov	al,-5[bp]
23990 606E           30E4                       xor	ah,ah
23991 6070           B1                     03  mov	cl,*3
23992 6072           D3E0                       shl	ax,cl
23993 6074           89C3                       mov	bx,ax
23994 6076           81C3                 01FD  add	bx,#_vga_modes
23995 607A           8A47         02            mov	al,2[bx]
23996                                           ! 2892        {
23997 607D           E9         0077            br 	.1FB
23998                                           ! 2893         case 0x04:
23999                                           ! 2894         case 0x03:
24000                       00006080            .1FC:
24001                                           ! 2895           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24002                       00006080            .1FD:
24003                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24004 6080           8A46         FF            mov	al,-1[bp]
24005 6083           30E4                       xor	ah,ah
24006 6085           50                         push	ax
24007                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24008 6086           FF76         F8            push	-8[bp]
24009                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24010 6089           8A46         FD            mov	al,-3[bp]
24011 608C           30E4                       xor	ah,ah
24012 608E           50                         push	ax
24013                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24014 608F           8A46         FE            mov	al,-2[bp]
24015 6092           30E4                       xor	ah,ah
24016 6094           50                         push	ax
24017                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24018 6095           8A46         08            mov	al,8[bp]
24019 6098           30E4                       xor	ah,ah
24020 609A           50                         push	ax
24021                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24022 609B           8A46         04            mov	al,4[bp]
24023 609E           30E4                       xor	ah,ah
24024 60A0           50                         push	ax
24025                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24026 60A1           E8         F09E            call	_write_gfx_char_pl4
24027 60A4           83C4                   0C  add	sp,*$C
24028                                           !BCC_EOS
24029                                           ! 2896           break;
24030 60A7           EB           62            jmp .1F9
24031                                           !BCC_EOS
24032                                           ! 2897         case 0x02:
24033                                           ! 2898           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24034                       000060A9            .1FE:
24035                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24036 60A9           8A46         FA            mov	al,-6[bp]
24037 60AC           30E4                       xor	ah,ah
24038 60AE           50                         push	ax
24039                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24040 60AF           FF76         F8            push	-8[bp]
24041                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24042 60B2           8A46         FD            mov	al,-3[bp]
24043 60B5           30E4                       xor	ah,ah
24044 60B7           50                         push	ax
24045                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24046 60B8           8A46         FE            mov	al,-2[bp]
24047 60BB           30E4                       xor	ah,ah
24048 60BD           50                         push	ax
24049                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24050 60BE           8A46         08            mov	al,8[bp]
24051 60C1           30E4                       xor	ah,ah
24052 60C3           50                         push	ax
24053                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24054 60C4           8A46         04            mov	al,4[bp]
24055 60C7           30E4                       xor	ah,ah
24056 60C9           50                         push	ax
24057                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24058 60CA           E8         F1E8            call	_write_gfx_char_cga
24059 60CD           83C4                   0C  add	sp,*$C
24060                                           !BCC_EOS
24061                                           ! 2899           break;
24062 60D0           EB           39            jmp .1F9
24063                                           !BCC_EOS
24064                                           ! 2900         case 0x05:
24065                                           ! 2901           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24066                       000060D2            .1FF:
24067                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24068 60D2           FF76         F8            push	-8[bp]
24069                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24070 60D5           8A46         FD            mov	al,-3[bp]
24071 60D8           30E4                       xor	ah,ah
24072 60DA           50                         push	ax
24073                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24074 60DB           8A46         FE            mov	al,-2[bp]
24075 60DE           30E4                       xor	ah,ah
24076 60E0           50                         push	ax
24077                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24078 60E1           8A46         08            mov	al,8[bp]
24079 60E4           30E4                       xor	ah,ah
24080 60E6           50                         push	ax
24081                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24082 60E7           8A46         04            mov	al,4[bp]
24083 60EA           30E4                       xor	ah,ah
24084 60EC           50                         push	ax
24085                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24086 60ED           E8         F3C8            call	_write_gfx_char_lin
24087 60F0           83C4                   0A  add	sp,*$A
24088                                           !BCC_EOS
24089                                           ! 2902           break;
24090 60F3           EB           16            jmp .1F9
24091                                           !BCC_EOS
24092                                           ! 2903        }
24093                                           ! 2904      }
24094 60F5           EB           14            jmp .1F9
24095                       000060F7            .1FB:
24096 60F7           2C                     02  sub	al,*2
24097 60F9           74           AE            je 	.1FE
24098 60FB           2C                     01  sub	al,*1
24099 60FD         0F84         FF7F            beq 	.1FD
24100 6101           2C                     01  sub	al,*1
24101 6103         0F84         FF79            beq 	.1FC
24102 6107           2C                     01  sub	al,*1
24103 6109           74           C7            je 	.1FF
24104                       0000610B            .1F9:
24105                                           ! 2905     xcurs++;
24106                       0000610B            .1F8:
24107                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24108 610B           8A46         FE            mov	al,-2[bp]
24109 610E           40                         inc	ax
24110 610F           8846         FE            mov	-2[bp],al
24111                                           !BCC_EOS
24112                                           ! 2906   }
24113                                           ! 2907  if(xcurs==nbcols)
24114 6112           EB           21            jmp .1E5
24115                       00006114            .1E7:
24116 6114           2C                     07  sub	al,*7
24117 6116         0F84         FE0D            beq 	.1E8
24118 611A           2C                     01  sub	al,*1
24119 611C         0F84         FE0A            beq 	.1E9
24120 6120           2C                     01  sub	al,*1
24121 6122         0F84         FE27            beq 	.1EE
24122 6126           2C                     01  sub	al,*1
24123 6128         0F84         FE17            beq 	.1ED
24124 612C           2C                     03  sub	al,*3
24125 612E         0F84         FE09            beq 	.1EC
24126 6132           E9         FE68            br 	.1F3
24127                       00006135            .1E5:
24128                       FFFFFFEE            ..FFF6	=	-$12
24129                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24130 6135           8A46         FE            mov	al,-2[bp]
24131 6138           30E4                       xor	ah,ah
24132 613A           3B46         F8            cmp	ax,-8[bp]
24133 613D           75           0C            jne 	.200
24134                       0000613F            .201:
24135                                           ! 2908   {xcurs=0;
24136                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24137 613F           30C0                       xor	al,al
24138 6141           8846         FE            mov	-2[bp],al
24139                                           !BCC_EOS
24140                                           ! 2909    ycurs++;
24141                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24142 6144           8A46         FD            mov	al,-3[bp]
24143 6147           40                         inc	ax
24144 6148           8846         FD            mov	-3[bp],al
24145                                           !BCC_EOS
24146                                           ! 2910   }
24147                                           ! 2911  if(ycurs==nbrows)
24148                       0000614B            .200:
24149                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24150 614B           8A46         FD            mov	al,-3[bp]
24151 614E           30E4                       xor	ah,ah
24152 6150           3B46         F6            cmp	ax,-$A[bp]
24153 6153         0F85         00C9            bne 	.202
24154                       00006157            .203:
24155                                           ! 2912   {
24156                                           ! 2913    if(vga_modes[line].class==0x00)
24157                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24158 6157           8A46         FB            mov	al,-5[bp]
24159 615A           30E4                       xor	ah,ah
24160 615C           B1                     03  mov	cl,*3
24161 615E           D3E0                       shl	ax,cl
24162 6160           89C3                       mov	bx,ax
24163 6162           81C3                 01FD  add	bx,#_vga_modes
24164                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24165 6166           8A47         01            mov	al,1[bx]
24166 6169           84C0                       test	al,al
24167 616B         0F85         0081            bne 	.204
24168                       0000616F            .205:
24169                                           ! 2914     {
24170                                           ! 2915      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24171                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24172 616F           8A46         FD            mov	al,-3[bp]
24173 6172           30E4                       xor	ah,ah
24174                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24175 6174           48                         dec	ax
24176 6175           8B4E         F8            mov	cx,-8[bp]
24177 6178           F7E9                       imul	cx
24178                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24179                                           ! Debug: expression subtree swapping
24180 617A           0246         FE            add	al,-2[bp]
24181 617D           80D4                   00  adc	ah,*0
24182                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24183 6180           D1E0                       shl	ax,*1
24184 6182           50                         push	ax
24185                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24186 6183           8B46         F8            mov	ax,-8[bp]
24187 6186           8B4E         F6            mov	cx,-$A[bp]
24188 6189           F7E9                       imul	cx
24189                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24190 618B           D1E0                       shl	ax,*1
24191                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24192 618D           0C                     FF  or	al,#$FF
24193                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24194                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24195 618F           89C3                       mov	bx,ax
24196 6191           8A46         06            mov	al,6[bp]
24197 6194           30E4                       xor	ah,ah
24198 6196           93                         xchg	ax,bx
24199 6197           40                         inc	ax
24200 6198           89D9                       mov	cx,bx
24201 619A           F7E9                       imul	cx
24202                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24203 619C           0346         EE            add	ax,-$12[bp]
24204 619F           44                         inc	sp
24205 61A0           44                         inc	sp
24206                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24207 61A1           8946         F4            mov	-$C[bp],ax
24208                                           !BCC_EOS
24209                                           ! 2916      attr=read_byte(vga_modes[line].sstart,address+1);
24210                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24211 61A4           8B46         F4            mov	ax,-$C[bp]
24212                                           ! Debug: list unsigned int = ax+1 (used reg = )
24213 61A7           40                         inc	ax
24214 61A8           50                         push	ax
24215                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24216 61A9           8A46         FB            mov	al,-5[bp]
24217 61AC           30E4                       xor	ah,ah
24218 61AE           B1                     03  mov	cl,*3
24219 61B0           D3E0                       shl	ax,cl
24220 61B2           89C3                       mov	bx,ax
24221 61B4           81C3                 01FD  add	bx,#_vga_modes
24222                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24223 61B8           FF77         04            push	4[bx]
24224                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24225 61BB           E8         1A2A            call	_read_byte
24226 61BE           83C4                   04  add	sp,*4
24227                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24228 61C1           8846         08            mov	8[bp],al
24229                                           !BCC_EOS
24230                                           ! 2917      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24231                                           ! Debug: list int = const 1 (used reg = )
24232 61C4           B8                   0001  mov	ax,*1
24233 61C7           50                         push	ax
24234                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24235 61C8           8A46         06            mov	al,6[bp]
24236 61CB           30E4                       xor	ah,ah
24237 61CD           50                         push	ax
24238                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24239 61CE           8B46         F8            mov	ax,-8[bp]
24240                                           ! Debug: list unsigned int = ax-1 (used reg = )
24241 61D1           48                         dec	ax
24242 61D2           50                         push	ax
24243                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24244 61D3           8B46         F6            mov	ax,-$A[bp]
24245                                           ! Debug: list unsigned int = ax-1 (used reg = )
24246 61D6           48                         dec	ax
24247 61D7           50                         push	ax
24248                                           ! Debug: list int = const 0 (used reg = )
24249 61D8           31C0                       xor	ax,ax
24250 61DA           50                         push	ax
24251                                           ! Debug: list int = const 0 (used reg = )
24252 61DB           31C0                       xor	ax,ax
24253 61DD           50                         push	ax
24254                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24255 61DE           8A46         08            mov	al,8[bp]
24256 61E1           30E4                       xor	ah,ah
24257 61E3           50                         push	ax
24258                                           ! Debug: list int = const 1 (used reg = )
24259 61E4           B8                   0001  mov	ax,*1
24260 61E7           50                         push	ax
24261                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24262 61E8           E8         E756            call	_biosfn_scroll
24263 61EB           83C4                   10  add	sp,*$10
24264                                           !BCC_EOS
24265                                           ! 2918     }
24266                                           ! 2919    else
24267                                           ! 2920     {
24268 61EE           EB           27            jmp .206
24269                       000061F0            .204:
24270                                           ! 2921      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24271                                           ! Debug: list int = const 1 (used reg = )
24272 61F0           B8                   0001  mov	ax,*1
24273 61F3           50                         push	ax
24274                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24275 61F4           8A46         06            mov	al,6[bp]
24276 61F7           30E4                       xor	ah,ah
24277 61F9           50                         push	ax
24278                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24279 61FA           8B46         F8            mov	ax,-8[bp]
24280                                           ! Debug: list unsigned int = ax-1 (used reg = )
24281 61FD           48                         dec	ax
24282 61FE           50                         push	ax
24283                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24284 61FF           8B46         F6            mov	ax,-$A[bp]
24285                                           ! Debug: list unsigned int = ax-1 (used reg = )
24286 6202           48                         dec	ax
24287 6203           50                         push	ax
24288                                           ! Debug: list int = const 0 (used reg = )
24289 6204           31C0                       xor	ax,ax
24290 6206           50                         push	ax
24291                                           ! Debug: list int = const 0 (used reg = )
24292 6207           31C0                       xor	ax,ax
24293 6209           50                         push	ax
24294                                           ! Debug: list int = const 0 (used reg = )
24295 620A           31C0                       xor	ax,ax
24296 620C           50                         push	ax
24297                                           ! Debug: list int = const 1 (used reg = )
24298 620D           B8                   0001  mov	ax,*1
24299 6210           50                         push	ax
24300                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24301 6211           E8         E72D            call	_biosfn_scroll
24302 6214           83C4                   10  add	sp,*$10
24303                                           !BCC_EOS
24304                                           ! 2922     }
24305                                           ! 2923    ycurs-=1;
24306                       00006217            .206:
24307                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24308 6217           8A46         FD            mov	al,-3[bp]
24309 621A           30E4                       xor	ah,ah
24310 621C           48                         dec	ax
24311 621D           8846         FD            mov	-3[bp],al
24312                                           !BCC_EOS
24313                                           ! 2924   }
24314                                           ! 2925  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24315                       00006220            .202:
24316                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24317 6220           8A46         FD            mov	al,-3[bp]
24318 6223           30E4                       xor	ah,ah
24319 6225           8946         F2            mov	-$E[bp],ax
24320                                           !BCC_EOS
24321                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24322 6228           8B46         F2            mov	ax,-$E[bp]
24323 622B           88C4                       mov	ah,al
24324 622D           30C0                       xor	al,al
24325 622F           8946         F2            mov	-$E[bp],ax
24326                                           !BCC_EOS
24327                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24328 6232           8B46         F2            mov	ax,-$E[bp]
24329 6235           0246         FE            add	al,-2[bp]
24330 6238           80D4                   00  adc	ah,*0
24331 623B           8946         F2            mov	-$E[bp],ax
24332                                           !BCC_EOS
24333                                           ! 2926  biosfn_set_cursor_pos(page,cursor);
24334                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24335 623E           FF76         F2            push	-$E[bp]
24336                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24337 6241           8A46         06            mov	al,6[bp]
24338 6244           30E4                       xor	ah,ah
24339 6246           50                         push	ax
24340                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24341 6247           E8         E0FF            call	_biosfn_set_cursor_pos
24342 624A           83C4                   04  add	sp,*4
24343                                           !BCC_EOS
24344                                           ! 2927 }
24345 624D           89EC                       mov	sp,bp
24346 624F           5D                         pop	bp
24347 6250           C3                         ret
24348                                           ! 2928 #asm
24349                                           !BCC_ASM
24350                       00000008            _biosfn_write_teletype.flag	set	8
24351                       00000006            _biosfn_write_teletype.attr	set	6
24352                       00000004            _biosfn_write_teletype.page	set	4
24353                       00000002            _biosfn_write_teletype.car	set	2
24354                       00006251            biosfn_get_video_mode:
24355 6251           1E                           push ds
24356 6252           B8                   0040    mov ax, # 0x40
24357 6255           8ED8                         mov ds, ax
24358 6257           53                           push bx
24359 6258           BB                   0062    mov bx, # 0x62
24360 625B           8A07                         mov al, [bx]
24361 625D           5B                           pop bx
24362 625E           88C7                         mov bh, al
24363 6260           53                           push bx
24364 6261           BB                   0087    mov bx, # 0x87
24365 6264           8A27                         mov ah, [bx]
24366 6266           80E4                   80    and ah, #0x80
24367 6269           BB                   0049    mov bx, # 0x49
24368 626C           8A07                         mov al, [bx]
24369 626E           08E0                         or al, ah
24370 6270           BB                   004A    mov bx, # 0x4A
24371 6273           8A27                         mov ah, [bx]
24372 6275           5B                           pop bx
24373 6276           1F                           pop ds
24374 6277           C3                           ret
24375                                           ! 2950 endasm
24376                                           !BCC_ENDASM
24377                                           ! 2951 #asm
24378                                           !BCC_ASM
24379                       00000008            _biosfn_write_teletype.flag	set	8
24380                       00000006            _biosfn_write_teletype.attr	set	6
24381                       00000004            _biosfn_write_teletype.page	set	4
24382                       00000002            _biosfn_write_teletype.car	set	2
24383                       00006278            biosfn_group_10:
24384 6278           3C                     00    cmp al, #0x00
24385 627A           75           02              jne int10_test_1001
24386 627C           EB           61              jmp biosfn_set_single_palette_reg
24387                       0000627E            int10_test_1001:
24388 627E           3C                     01    cmp al, #0x01
24389 6280           75           02              jne int10_test_1002
24390 6282           EB           75              jmp biosfn_set_overscan_border_color
24391                       00006284            int10_test_1002:
24392 6284           3C                     02    cmp al, #0x02
24393 6286           75           02              jne int10_test_1003
24394 6288           EB           77              jmp biosfn_set_all_palette_reg
24395                       0000628A            int10_test_1003:
24396 628A           3C                     03    cmp al, #0x03
24397 628C           75           03              jne int10_test_1007
24398 628E           E9         009D              jmp biosfn_toggle_intensity
24399                       00006291            int10_test_1007:
24400 6291           3C                     07    cmp al, #0x07
24401 6293           75           03              jne int10_test_1008
24402 6295           E9         00BC              jmp biosfn_get_single_palette_reg
24403                       00006298            int10_test_1008:
24404 6298           3C                     08    cmp al, #0x08
24405 629A           75           03              jne int10_test_1009
24406 629C           E9         00D9              jmp biosfn_read_overscan_border_color
24407                       0000629F            int10_test_1009:
24408 629F           3C                     09    cmp al, #0x09
24409 62A1           75           03              jne int10_test_1010
24410 62A3           E9         00E0              jmp biosfn_get_all_palette_reg
24411                       000062A6            int10_test_1010:
24412 62A6           3C                     10    cmp al, #0x10
24413 62A8           75           03              jne int10_test_1012
24414 62AA           E9         011A              jmp biosfn_set_single_dac_reg
24415                       000062AD            int10_test_1012:
24416 62AD           3C                     12    cmp al, #0x12
24417 62AF           75           03              jne int10_test_1013
24418 62B1           E9         012C              jmp biosfn_set_all_dac_reg
24419                       000062B4            int10_test_1013:
24420 62B4           3C                     13    cmp al, #0x13
24421 62B6           75           03              jne int10_test_1015
24422 62B8           E9         014D              jmp biosfn_select_video_dac_color_page
24423                       000062BB            int10_test_1015:
24424 62BB           3C                     15    cmp al, #0x15
24425 62BD           75           03              jne int10_test_1017
24426 62BF           E9         0189              jmp biosfn_read_single_dac_reg
24427                       000062C2            int10_test_1017:
24428 62C2           3C                     17    cmp al, #0x17
24429 62C4           75           03              jne int10_test_1018
24430 62C6           E9         019D              jmp biosfn_read_all_dac_reg
24431                       000062C9            int10_test_1018:
24432 62C9           3C                     18    cmp al, #0x18
24433 62CB           75           03              jne int10_test_1019
24434 62CD           E9         01BE              jmp biosfn_set_pel_mask
24435                       000062D0            int10_test_1019:
24436 62D0           3C                     19    cmp al, #0x19
24437 62D2           75           03              jne int10_test_101A
24438 62D4           E9         01C2              jmp biosfn_read_pel_mask
24439                       000062D7            int10_test_101A:
24440 62D7           3C                     1A    cmp al, #0x1a
24441 62D9           75           03              jne int10_group_10_unknown
24442 62DB           E9         01C6              jmp biosfn_read_video_dac_state
24443                       000062DE            int10_group_10_unknown:
24444 62DE           C3                           ret
24445                       000062DF            biosfn_set_single_palette_reg:
24446 62DF           80FB                   14    cmp bl, #0x14
24447 62E2           77           14              ja no_actl_reg1
24448 62E4           50                           push ax
24449 62E5           52                           push dx
24450 62E6           BA                   03DA    mov dx, # 0x3da
24451 62E9           EC                           in al, dx
24452 62EA           BA                   03C0    mov dx, # 0x3c0
24453 62ED           88D8                         mov al, bl
24454 62EF           EE                           out dx, al
24455 62F0           88F8                         mov al, bh
24456 62F2           EE                           out dx, al
24457 62F3           B0                     20    mov al, #0x20
24458 62F5           EE                           out dx, al
24459 62F6           5A                           pop dx
24460 62F7           58                           pop ax
24461                       000062F8            no_actl_reg1:
24462 62F8           C3                           ret
24463                                           ! 3032 endasm
24464                                           !BCC_ENDASM
24465                                           ! 3033 #asm
24466                                           !BCC_ASM
24467                       00000008            _biosfn_write_teletype.flag	set	8
24468                       00000006            _biosfn_write_teletype.attr	set	6
24469                       00000004            _biosfn_write_teletype.page	set	4
24470                       00000002            _biosfn_write_teletype.car	set	2
24471                       000062F9            biosfn_set_overscan_border_color:
24472 62F9           53                           push bx
24473 62FA           B3                     11    mov bl, #0x11
24474 62FC           E8         FFE0              call biosfn_set_single_palette_reg
24475 62FF           5B                           pop bx
24476 6300           C3                           ret
24477                                           ! 3040 endasm
24478                                           !BCC_ENDASM
24479                                           ! 3041 #asm
24480                                           !BCC_ASM
24481                       00000008            _biosfn_write_teletype.flag	set	8
24482                       00000006            _biosfn_write_teletype.attr	set	6
24483                       00000004            _biosfn_write_teletype.page	set	4
24484                       00000002            _biosfn_write_teletype.car	set	2
24485                       00006301            biosfn_set_all_palette_reg:
24486 6301           50                           push ax
24487 6302           53                           push bx
24488 6303           51                           push cx
24489 6304           52                           push dx
24490 6305           89D3                         mov bx, dx
24491 6307           BA                   03DA    mov dx, # 0x3da
24492 630A           EC                           in al, dx
24493 630B           B1                     00    mov cl, #0x00
24494 630D           BA                   03C0    mov dx, # 0x3c0
24495                       00006310            set_palette_loop:
24496 6310           88C8                         mov al, cl
24497 6312           EE                           out dx, al
24498 6313           26                           seg es
24499 6314           8A07                         mov al, [bx]
24500 6316           EE                           out dx, al
24501 6317           43                           inc bx
24502 6318           FEC1                         inc cl
24503 631A           80F9                   10    cmp cl, #0x10
24504 631D           75           F1              jne set_palette_loop
24505 631F           B0                     11    mov al, #0x11
24506 6321           EE                           out dx, al
24507 6322           26                           seg es
24508 6323           8A07                         mov al, [bx]
24509 6325           EE                           out dx, al
24510 6326           B0                     20    mov al, #0x20
24511 6328           EE                           out dx, al
24512 6329           5A                           pop dx
24513 632A           59                           pop cx
24514 632B           5B                           pop bx
24515 632C           58                           pop ax
24516 632D           C3                           ret
24517                                           ! 3074 endasm
24518                                           !BCC_ENDASM
24519                                           ! 3075 #asm
24520                                           !BCC_ASM
24521                       00000008            _biosfn_write_teletype.flag	set	8
24522                       00000006            _biosfn_write_teletype.attr	set	6
24523                       00000004            _biosfn_write_teletype.page	set	4
24524                       00000002            _biosfn_write_teletype.car	set	2
24525                       0000632E            biosfn_toggle_intensity:
24526 632E           50                           push ax
24527 632F           53                           push bx
24528 6330           52                           push dx
24529 6331           BA                   03DA    mov dx, # 0x3da
24530 6334           EC                           in al, dx
24531 6335           BA                   03C0    mov dx, # 0x3c0
24532 6338           B0                     10    mov al, #0x10
24533 633A           EE                           out dx, al
24534 633B           BA                   03C1    mov dx, # 0x3c1
24535 633E           EC                           in al, dx
24536 633F           24                     F7    and al, #0xf7
24537 6341           80E3                   01    and bl, #0x01
24538 6344           C0E3                   03    shl bl, 3
24539 6347           08D8                         or al, bl
24540 6349           BA                   03C0    mov dx, # 0x3c0
24541 634C           EE                           out dx, al
24542 634D           B0                     20    mov al, #0x20
24543 634F           EE                           out dx, al
24544 6350           5A                           pop dx
24545 6351           5B                           pop bx
24546 6352           58                           pop ax
24547 6353           C3                           ret
24548                                           ! 3099 endasm
24549                                           !BCC_ENDASM
24550                                           ! 3100 #asm
24551                                           !BCC_ASM
24552                       00000008            _biosfn_write_teletype.flag	set	8
24553                       00000006            _biosfn_write_teletype.attr	set	6
24554                       00000004            _biosfn_write_teletype.page	set	4
24555                       00000002            _biosfn_write_teletype.car	set	2
24556                       00006354            biosfn_get_single_palette_reg:
24557 6354           80FB                   14    cmp bl, #0x14
24558 6357           77           1E              ja no_actl_reg2
24559 6359           50                           push ax
24560 635A           52                           push dx
24561 635B           BA                   03DA    mov dx, # 0x3da
24562 635E           EC                           in al, dx
24563 635F           BA                   03C0    mov dx, # 0x3c0
24564 6362           88D8                         mov al, bl
24565 6364           EE                           out dx, al
24566 6365           BA                   03C1    mov dx, # 0x3c1
24567 6368           EC                           in al, dx
24568 6369           88C7                         mov bh, al
24569 636B           BA                   03DA    mov dx, # 0x3da
24570 636E           EC                           in al, dx
24571 636F           BA                   03C0    mov dx, # 0x3c0
24572 6372           B0                     20    mov al, #0x20
24573 6374           EE                           out dx, al
24574 6375           5A                           pop dx
24575 6376           58                           pop ax
24576                       00006377            no_actl_reg2:
24577 6377           C3                           ret
24578                                           ! 3123 endasm
24579                                           !BCC_ENDASM
24580                                           ! 3124 #asm
24581                                           !BCC_ASM
24582                       00000008            _biosfn_write_teletype.flag	set	8
24583                       00000006            _biosfn_write_teletype.attr	set	6
24584                       00000004            _biosfn_write_teletype.page	set	4
24585                       00000002            _biosfn_write_teletype.car	set	2
24586                       00006378            biosfn_read_overscan_border_color:
24587 6378           50                           push ax
24588 6379           53                           push bx
24589 637A           B3                     11    mov bl, #0x11
24590 637C           E8         FFD5              call biosfn_get_single_palette_reg
24591 637F           88F8                         mov al, bh
24592 6381           5B                           pop bx
24593 6382           88C7                         mov bh, al
24594 6384           58                           pop ax
24595 6385           C3                           ret
24596                                           ! 3135 endasm
24597                                           !BCC_ENDASM
24598                                           ! 3136 #asm
24599                                           !BCC_ASM
24600                       00000008            _biosfn_write_teletype.flag	set	8
24601                       00000006            _biosfn_write_teletype.attr	set	6
24602                       00000004            _biosfn_write_teletype.page	set	4
24603                       00000002            _biosfn_write_teletype.car	set	2
24604                       00006386            biosfn_get_all_palette_reg:
24605 6386           50                           push ax
24606 6387           53                           push bx
24607 6388           51                           push cx
24608 6389           52                           push dx
24609 638A           89D3                         mov bx, dx
24610 638C           B1                     00    mov cl, #0x00
24611                       0000638E            get_palette_loop:
24612 638E           BA                   03DA    mov dx, # 0x3da
24613 6391           EC                           in al, dx
24614 6392           BA                   03C0    mov dx, # 0x3c0
24615 6395           88C8                         mov al, cl
24616 6397           EE                           out dx, al
24617 6398           BA                   03C1    mov dx, # 0x3c1
24618 639B           EC                           in al, dx
24619 639C           26                           seg es
24620 639D           8807                         mov [bx], al
24621 639F           43                           inc bx
24622 63A0           FEC1                         inc cl
24623 63A2           80F9                   10    cmp cl, #0x10
24624 63A5           75           E7              jne get_palette_loop
24625 63A7           BA                   03DA    mov dx, # 0x3da
24626 63AA           EC                           in al, dx
24627 63AB           BA                   03C0    mov dx, # 0x3c0
24628 63AE           B0                     11    mov al, #0x11
24629 63B0           EE                           out dx, al
24630 63B1           BA                   03C1    mov dx, # 0x3c1
24631 63B4           EC                           in al, dx
24632 63B5           26                           seg es
24633 63B6           8807                         mov [bx], al
24634 63B8           BA                   03DA    mov dx, # 0x3da
24635 63BB           EC                           in al, dx
24636 63BC           BA                   03C0    mov dx, # 0x3c0
24637 63BF           B0                     20    mov al, #0x20
24638 63C1           EE                           out dx, al
24639 63C2           5A                           pop dx
24640 63C3           59                           pop cx
24641 63C4           5B                           pop bx
24642 63C5           58                           pop ax
24643 63C6           C3                           ret
24644                                           ! 3177 endasm
24645                                           !BCC_ENDASM
24646                                           ! 3178 #asm
24647                                           !BCC_ASM
24648                       00000008            _biosfn_write_teletype.flag	set	8
24649                       00000006            _biosfn_write_teletype.attr	set	6
24650                       00000004            _biosfn_write_teletype.page	set	4
24651                       00000002            _biosfn_write_teletype.car	set	2
24652                       000063C7            biosfn_set_single_dac_reg:
24653 63C7           50                           push ax
24654 63C8           52                           push dx
24655 63C9           BA                   03C8    mov dx, # 0x3c8
24656 63CC           88D8                         mov al, bl
24657 63CE           EE                           out dx, al
24658 63CF           BA                   03C9    mov dx, # 0x3c9
24659 63D2           58                           pop ax
24660 63D3           50                           push ax
24661 63D4           88E0                         mov al, ah
24662 63D6           EE                           out dx, al
24663 63D7           88E8                         mov al, ch
24664 63D9           EE                           out dx, al
24665 63DA           88C8                         mov al, cl
24666 63DC           EE                           out dx, al
24667 63DD           5A                           pop dx
24668 63DE           58                           pop ax
24669 63DF           C3                           ret
24670                                           ! 3197 endasm
24671                                           !BCC_ENDASM
24672                                           ! 3198 #asm
24673                                           !BCC_ASM
24674                       00000008            _biosfn_write_teletype.flag	set	8
24675                       00000006            _biosfn_write_teletype.attr	set	6
24676                       00000004            _biosfn_write_teletype.page	set	4
24677                       00000002            _biosfn_write_teletype.car	set	2
24678                       000063E0            biosfn_set_all_dac_reg:
24679 63E0           50                           push ax
24680 63E1           53                           push bx
24681 63E2           51                           push cx
24682 63E3           52                           push dx
24683 63E4           BA                   03C8    mov dx, # 0x3c8
24684 63E7           88D8                         mov al, bl
24685 63E9           EE                           out dx, al
24686 63EA           5A                           pop dx
24687 63EB           52                           push dx
24688 63EC           89D3                         mov bx, dx
24689 63EE           BA                   03C9    mov dx, # 0x3c9
24690                       000063F1            set_dac_loop:
24691 63F1           26                           seg es
24692 63F2           8A07                         mov al, [bx]
24693 63F4           EE                           out dx, al
24694 63F5           43                           inc bx
24695 63F6           26                           seg es
24696 63F7           8A07                         mov al, [bx]
24697 63F9           EE                           out dx, al
24698 63FA           43                           inc bx
24699 63FB           26                           seg es
24700 63FC           8A07                         mov al, [bx]
24701 63FE           EE                           out dx, al
24702 63FF           43                           inc bx
24703 6400           49                           dec cx
24704 6401           75           EE              jnz set_dac_loop
24705 6403           5A                           pop dx
24706 6404           59                           pop cx
24707 6405           5B                           pop bx
24708 6406           58                           pop ax
24709 6407           C3                           ret
24710                                           ! 3231 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3232 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       00006408            biosfn_select_video_dac_color_page:
24719 6408           50                           push ax
24720 6409           53                           push bx
24721 640A           52                           push dx
24722 640B           BA                   03DA    mov dx, # 0x3da
24723 640E           EC                           in al, dx
24724 640F           BA                   03C0    mov dx, # 0x3c0
24725 6412           B0                     10    mov al, #0x10
24726 6414           EE                           out dx, al
24727 6415           BA                   03C1    mov dx, # 0x3c1
24728 6418           EC                           in al, dx
24729 6419           80E3                   01    and bl, #0x01
24730 641C           75           0D              jnz set_dac_page
24731 641E           24                     7F    and al, #0x7f
24732 6420           C0E7                   07    shl bh, 7
24733 6423           08F8                         or al, bh
24734 6425           BA                   03C0    mov dx, # 0x3c0
24735 6428           EE                           out dx, al
24736 6429           EB           19              jmp set_actl_normal
24737                       0000642B            set_dac_page:
24738 642B           50                           push ax
24739 642C           BA                   03DA    mov dx, # 0x3da
24740 642F           EC                           in al, dx
24741 6430           BA                   03C0    mov dx, # 0x3c0
24742 6433           B0                     14    mov al, #0x14
24743 6435           EE                           out dx, al
24744 6436           58                           pop ax
24745 6437           24                     80    and al, #0x80
24746 6439           75           03              jnz set_dac_16_page
24747 643B           C0E7                   02    shl bh, 2
24748                       0000643E            set_dac_16_page:
24749 643E           80E7                   0F    and bh, #0x0f
24750 6441           88F8                         mov al, bh
24751 6443           EE                           out dx, al
24752                       00006444            set_actl_normal:
24753 6444           B0                     20    mov al, #0x20
24754 6446           EE                           out dx, al
24755 6447           5A                           pop dx
24756 6448           5B                           pop bx
24757 6449           58                           pop ax
24758 644A           C3                           ret
24759                                           ! 3274 endasm
24760                                           !BCC_ENDASM
24761                                           ! 3275 #asm
24762                                           !BCC_ASM
24763                       00000008            _biosfn_write_teletype.flag	set	8
24764                       00000006            _biosfn_write_teletype.attr	set	6
24765                       00000004            _biosfn_write_teletype.page	set	4
24766                       00000002            _biosfn_write_teletype.car	set	2
24767                       0000644B            biosfn_read_single_dac_reg:
24768 644B           50                           push ax
24769 644C           52                           push dx
24770 644D           BA                   03C7    mov dx, # 0x3c7
24771 6450           88D8                         mov al, bl
24772 6452           EE                           out dx, al
24773 6453           58                           pop ax
24774 6454           88C4                         mov ah, al
24775 6456           BA                   03C9    mov dx, # 0x3c9
24776 6459           EC                           in al, dx
24777 645A           86E0                         xchg al, ah
24778 645C           50                           push ax
24779 645D           EC                           in al, dx
24780 645E           88C5                         mov ch, al
24781 6460           EC                           in al, dx
24782 6461           88C1                         mov cl, al
24783 6463           5A                           pop dx
24784 6464           58                           pop ax
24785 6465           C3                           ret
24786                                           ! 3295 endasm
24787                                           !BCC_ENDASM
24788                                           ! 3296 #asm
24789                                           !BCC_ASM
24790                       00000008            _biosfn_write_teletype.flag	set	8
24791                       00000006            _biosfn_write_teletype.attr	set	6
24792                       00000004            _biosfn_write_teletype.page	set	4
24793                       00000002            _biosfn_write_teletype.car	set	2
24794                       00006466            biosfn_read_all_dac_reg:
24795 6466           50                           push ax
24796 6467           53                           push bx
24797 6468           51                           push cx
24798 6469           52                           push dx
24799 646A           BA                   03C7    mov dx, # 0x3c7
24800 646D           88D8                         mov al, bl
24801 646F           EE                           out dx, al
24802 6470           5A                           pop dx
24803 6471           52                           push dx
24804 6472           89D3                         mov bx, dx
24805 6474           BA                   03C9    mov dx, # 0x3c9
24806                       00006477            read_dac_loop:
24807 6477           EC                           in al, dx
24808 6478           26                           seg es
24809 6479           8807                         mov [bx], al
24810 647B           43                           inc bx
24811 647C           EC                           in al, dx
24812 647D           26                           seg es
24813 647E           8807                         mov [bx], al
24814 6480           43                           inc bx
24815 6481           EC                           in al, dx
24816 6482           26                           seg es
24817 6483           8807                         mov [bx], al
24818 6485           43                           inc bx
24819 6486           49                           dec cx
24820 6487           75           EE              jnz read_dac_loop
24821 6489           5A                           pop dx
24822 648A           59                           pop cx
24823 648B           5B                           pop bx
24824 648C           58                           pop ax
24825 648D           C3                           ret
24826                                           ! 3329 endasm
24827                                           !BCC_ENDASM
24828                                           ! 3330 #asm
24829                                           !BCC_ASM
24830                       00000008            _biosfn_write_teletype.flag	set	8
24831                       00000006            _biosfn_write_teletype.attr	set	6
24832                       00000004            _biosfn_write_teletype.page	set	4
24833                       00000002            _biosfn_write_teletype.car	set	2
24834                       0000648E            biosfn_set_pel_mask:
24835 648E           50                           push ax
24836 648F           52                           push dx
24837 6490           BA                   03C6    mov dx, # 0x3c6
24838 6493           88D8                         mov al, bl
24839 6495           EE                           out dx, al
24840 6496           5A                           pop dx
24841 6497           58                           pop ax
24842 6498           C3                           ret
24843                                           ! 3340 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3341 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       00006499            biosfn_read_pel_mask:
24852 6499           50                           push ax
24853 649A           52                           push dx
24854 649B           BA                   03C6    mov dx, # 0x3c6
24855 649E           EC                           in al, dx
24856 649F           88C3                         mov bl, al
24857 64A1           5A                           pop dx
24858 64A2           58                           pop ax
24859 64A3           C3                           ret
24860                                           ! 3351 endasm
24861                                           !BCC_ENDASM
24862                                           ! 3352 #asm
24863                                           !BCC_ASM
24864                       00000008            _biosfn_write_teletype.flag	set	8
24865                       00000006            _biosfn_write_teletype.attr	set	6
24866                       00000004            _biosfn_write_teletype.page	set	4
24867                       00000002            _biosfn_write_teletype.car	set	2
24868                       000064A4            biosfn_read_video_dac_state:
24869 64A4           50                           push ax
24870 64A5           52                           push dx
24871 64A6           BA                   03DA    mov dx, # 0x3da
24872 64A9           EC                           in al, dx
24873 64AA           BA                   03C0    mov dx, # 0x3c0
24874 64AD           B0                     10    mov al, #0x10
24875 64AF           EE                           out dx, al
24876 64B0           BA                   03C1    mov dx, # 0x3c1
24877 64B3           EC                           in al, dx
24878 64B4           88C3                         mov bl, al
24879 64B6           C0EB                   07    shr bl, 7
24880 64B9           BA                   03DA    mov dx, # 0x3da
24881 64BC           EC                           in al, dx
24882 64BD           BA                   03C0    mov dx, # 0x3c0
24883 64C0           B0                     14    mov al, #0x14
24884 64C2           EE                           out dx, al
24885 64C3           BA                   03C1    mov dx, # 0x3c1
24886 64C6           EC                           in al, dx
24887 64C7           88C7                         mov bh, al
24888 64C9           80E7                   0F    and bh, #0x0f
24889 64CC           F6C3                   01    test bl, #0x01
24890 64CF           75           03              jnz get_dac_16_page
24891 64D1           C0EF                   02    shr bh, 2
24892                       000064D4            get_dac_16_page:
24893 64D4           BA                   03DA    mov dx, # 0x3da
24894 64D7           EC                           in al, dx
24895 64D8           BA                   03C0    mov dx, # 0x3c0
24896 64DB           B0                     20    mov al, #0x20
24897 64DD           EE                           out dx, al
24898 64DE           5A                           pop dx
24899 64DF           58                           pop ax
24900 64E0           C3                           ret
24901                                           ! 3386 endasm
24902                                           !BCC_ENDASM
24903                                           ! 3387 static void biosfn_perform_gray_scale_summing (start,count)
24904                                           ! Register BX used in function biosfn_write_teletype
24905                                           ! 3388 Bit16u start;Bit16u count;
24906                       000064E1            _biosfn_perform_gray_scale_summing:
24907                                           !BCC_EOS
24908                                           !BCC_EOS
24909                                           ! 3389 {Bit8u r,g,b;
24910                                           !BCC_EOS
24911                                           ! 3390  Bit16u i;
24912                                           !BCC_EOS
24913                                           ! 3391  Bit16u index;
24914                                           !BCC_EOS
24915                                           ! 3392  inb(0x3da);
24916 64E1           55                         push	bp
24917 64E2           89E5                       mov	bp,sp
24918 64E4           83C4                   F8  add	sp,*-8
24919                                           ! Debug: list int = const $3DA (used reg = )
24920 64E7           B8                   03DA  mov	ax,#$3DA
24921 64EA           50                         push	ax
24922                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24923 64EB           E8         1750            call	_inb
24924 64EE           44                         inc	sp
24925 64EF           44                         inc	sp
24926                                           !BCC_EOS
24927                                           ! 3393  outb(0x3c0,0x00);
24928                                           ! Debug: list int = const 0 (used reg = )
24929 64F0           31C0                       xor	ax,ax
24930 64F2           50                         push	ax
24931                                           ! Debug: list int = const $3C0 (used reg = )
24932 64F3           B8                   03C0  mov	ax,#$3C0
24933 64F6           50                         push	ax
24934                                           ! Debug: func () void = outb+0 (used reg = )
24935 64F7           E8         175A            call	_outb
24936 64FA           83C4                   04  add	sp,*4
24937                                           !BCC_EOS
24938                                           ! 3394  for( index = 0; index < count; index++ )
24939                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24940 64FD           31C0                       xor	ax,ax
24941 64FF           8946         F8            mov	-8[bp],ax
24942                                           !BCC_EOS
24943                                           !BCC_EOS
24944                                           ! 3395   {
24945 6502           E9         00BE            br 	.209
24946                       00006505            .20A:
24947                                           ! 3396    outb(0x3c7,start);
24948                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24949 6505           FF76         04            push	4[bp]
24950                                           ! Debug: list int = const $3C7 (used reg = )
24951 6508           B8                   03C7  mov	ax,#$3C7
24952 650B           50                         push	ax
24953                                           ! Debug: func () void = outb+0 (used reg = )
24954 650C           E8         1745            call	_outb
24955 650F           83C4                   04  add	sp,*4
24956                                           !BCC_EOS
24957                                           ! 3397    r=inb( 0x3c9 );
24958                                           ! Debug: list int = const $3C9 (used reg = )
24959 6512           B8                   03C9  mov	ax,#$3C9
24960 6515           50                         push	ax
24961                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24962 6516           E8         1725            call	_inb
24963 6519           44                         inc	sp
24964 651A           44                         inc	sp
24965                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24966 651B           8846         FF            mov	-1[bp],al
24967                                           !BCC_EOS
24968                                           ! 3398    g=inb( 0x3c9 );
24969                                           ! Debug: list int = const $3C9 (used reg = )
24970 651E           B8                   03C9  mov	ax,#$3C9
24971 6521           50                         push	ax
24972                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24973 6522           E8         1719            call	_inb
24974 6525           44                         inc	sp
24975 6526           44                         inc	sp
24976                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24977 6527           8846         FE            mov	-2[bp],al
24978                                           !BCC_EOS
24979                                           ! 3399    b=inb( 0x3c9 );
24980                                           ! Debug: list int = const $3C9 (used reg = )
24981 652A           B8                   03C9  mov	ax,#$3C9
24982 652D           50                         push	ax
24983                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24984 652E           E8         170D            call	_inb
24985 6531           44                         inc	sp
24986 6532           44                         inc	sp
24987                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24988 6533           8846         FD            mov	-3[bp],al
24989                                           !BCC_EOS
24990                                           ! 3400    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24991                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24992                                           ! Debug: expression subtree swapping
24993 6536           8A46         FD            mov	al,-3[bp]
24994 6539           30E4                       xor	ah,ah
24995 653B           B9                   001C  mov	cx,*$1C
24996 653E           F7E9                       imul	cx
24997 6540           50                         push	ax
24998                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24999                                           ! Debug: expression subtree swapping
25000 6541           8A46         FE            mov	al,-2[bp]
25001 6544           30E4                       xor	ah,ah
25002 6546           B9                   0097  mov	cx,#$97
25003 6549           F7E9                       imul	cx
25004 654B           50                         push	ax
25005                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25006                                           ! Debug: expression subtree swapping
25007 654C           8A46         FF            mov	al,-1[bp]
25008 654F           30E4                       xor	ah,ah
25009 6551           B9                   004D  mov	cx,*$4D
25010 6554           F7E9                       imul	cx
25011                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25012 6556           0346         F4            add	ax,-$C[bp]
25013 6559           44                         inc	sp
25014 655A           44                         inc	sp
25015                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25016 655B           0346         F6            add	ax,-$A[bp]
25017 655E           44                         inc	sp
25018 655F           44                         inc	sp
25019                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25020                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25021 6560           05                   0080  add	ax,#$80
25022 6563           88E0                       mov	al,ah
25023 6565           30E4                       xor	ah,ah
25024                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25025 6567           8946         FA            mov	-6[bp],ax
25026                                           !BCC_EOS
25027                                           ! 3401    if(i>0x3f)i=0x3f;
25028                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25029 656A           8B46         FA            mov	ax,-6[bp]
25030 656D           3D                   003F  cmp	ax,*$3F
25031 6570           76           06            jbe 	.20B
25032                       00006572            .20C:
25033                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25034 6572           B8                   003F  mov	ax,*$3F
25035 6575           8946         FA            mov	-6[bp],ax
25036                                           !BCC_EOS
25037                                           ! 3402    outb(0x3c8,start);
25038                       00006578            .20B:
25039                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25040 6578           FF76         04            push	4[bp]
25041                                           ! Debug: list int = const $3C8 (used reg = )
25042 657B           B8                   03C8  mov	ax,#$3C8
25043 657E           50                         push	ax
25044                                           ! Debug: func () void = outb+0 (used reg = )
25045 657F           E8         16D2            call	_outb
25046 6582           83C4                   04  add	sp,*4
25047                                           !BCC_EOS
25048                                           ! 3403    outb( 0x3c9, i&0xff );
25049                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25050 6585           8A46         FA            mov	al,-6[bp]
25051                                           ! Debug: list unsigned char = al+0 (used reg = )
25052 6588           30E4                       xor	ah,ah
25053 658A           50                         push	ax
25054                                           ! Debug: list int = const $3C9 (used reg = )
25055 658B           B8                   03C9  mov	ax,#$3C9
25056 658E           50                         push	ax
25057                                           ! Debug: func () void = outb+0 (used reg = )
25058 658F           E8         16C2            call	_outb
25059 6592           83C4                   04  add	sp,*4
25060                                           !BCC_EOS
25061                                           ! 3404    outb( 0x3c9, i&0xff );
25062                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25063 6595           8A46         FA            mov	al,-6[bp]
25064                                           ! Debug: list unsigned char = al+0 (used reg = )
25065 6598           30E4                       xor	ah,ah
25066 659A           50                         push	ax
25067                                           ! Debug: list int = const $3C9 (used reg = )
25068 659B           B8                   03C9  mov	ax,#$3C9
25069 659E           50                         push	ax
25070                                           ! Debug: func () void = outb+0 (used reg = )
25071 659F           E8         16B2            call	_outb
25072 65A2           83C4                   04  add	sp,*4
25073                                           !BCC_EOS
25074                                           ! 3405    outb( 0x3c9, i&0xff );
25075                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25076 65A5           8A46         FA            mov	al,-6[bp]
25077                                           ! Debug: list unsigned char = al+0 (used reg = )
25078 65A8           30E4                       xor	ah,ah
25079 65AA           50                         push	ax
25080                                           ! Debug: list int = const $3C9 (used reg = )
25081 65AB           B8                   03C9  mov	ax,#$3C9
25082 65AE           50                         push	ax
25083                                           ! Debug: func () void = outb+0 (used reg = )
25084 65AF           E8         16A2            call	_outb
25085 65B2           83C4                   04  add	sp,*4
25086                                           !BCC_EOS
25087                                           ! 3406    start++;
25088                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25089 65B5           8B46         04            mov	ax,4[bp]
25090 65B8           40                         inc	ax
25091 65B9           8946         04            mov	4[bp],ax
25092                                           !BCC_EOS
25093                                           ! 3407   }
25094                                           ! 3408  inb(0x3da);
25095                       000065BC            .208:
25096                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25097 65BC           8B46         F8            mov	ax,-8[bp]
25098 65BF           40                         inc	ax
25099 65C0           8946         F8            mov	-8[bp],ax
25100                       000065C3            .209:
25101                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25102 65C3           8B46         F8            mov	ax,-8[bp]
25103 65C6           3B46         06            cmp	ax,6[bp]
25104 65C9         0F82         FF38            blo 	.20A
25105                       000065CD            .20D:
25106                       000065CD            .207:
25107                                           ! Debug: list int = const $3DA (used reg = )
25108 65CD           B8                   03DA  mov	ax,#$3DA
25109 65D0           50                         push	ax
25110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25111 65D1           E8         166A            call	_inb
25112 65D4           44                         inc	sp
25113 65D5           44                         inc	sp
25114                                           !BCC_EOS
25115                                           ! 3409  outb(0x3c0,0x20);
25116                                           ! Debug: list int = const $20 (used reg = )
25117 65D6           B8                   0020  mov	ax,*$20
25118 65D9           50                         push	ax
25119                                           ! Debug: list int = const $3C0 (used reg = )
25120 65DA           B8                   03C0  mov	ax,#$3C0
25121 65DD           50                         push	ax
25122                                           ! Debug: func () void = outb+0 (used reg = )
25123 65DE           E8         1673            call	_outb
25124 65E1           83C4                   04  add	sp,*4
25125                                           !BCC_EOS
25126                                           ! 3410 }
25127 65E4           89EC                       mov	sp,bp
25128 65E6           5D                         pop	bp
25129 65E7           C3                         ret
25130                                           ! 3411 static void get_font_access()
25131                                           ! 3412 {
25132                       000065E8            _get_font_access:
25133                                           ! 3413 #asm
25134                                           !BCC_ASM
25135 65E8           BA                   03C4   mov dx, # 0x3c4
25136 65EB           B8                   0100   mov ax, #0x0100
25137 65EE           EF                          out dx, ax
25138 65EF           B8                   0402   mov ax, #0x0402
25139 65F2           EF                          out dx, ax
25140 65F3           B8                   0704   mov ax, #0x0704
25141 65F6           EF                          out dx, ax
25142 65F7           B8                   0300   mov ax, #0x0300
25143 65FA           EF                          out dx, ax
25144 65FB           BA                   03CE   mov dx, # 0x3ce
25145 65FE           B8                   0204   mov ax, #0x0204
25146 6601           EF                          out dx, ax
25147 6602           B8                   0005   mov ax, #0x0005
25148 6605           EF                          out dx, ax
25149 6606           B8                   0406   mov ax, #0x0406
25150 6609           EF                          out dx, ax
25151                                           ! 3430 endasm
25152                                           !BCC_ENDASM
25153                                           ! 3431 }
25154 660A           C3                         ret
25155                                           ! 3432 static void release_font_access()
25156                                           ! 3433 {
25157                       0000660B            _release_font_access:
25158                                           ! 3434 #asm
25159                                           !BCC_ASM
25160 660B           BA                   03C4   mov dx, # 0x3c4
25161 660E           B8                   0100   mov ax, #0x0100
25162 6611           EF                          out dx, ax
25163 6612           B8                   0302   mov ax, #0x0302
25164 6615           EF                          out dx, ax
25165 6616           B8                   0304   mov ax, #0x0304
25166 6619           EF                          out dx, ax
25167 661A           B8                   0300   mov ax, #0x0300
25168 661D           EF                          out dx, ax
25169 661E           BA                   03CC   mov dx, # 0x3cc
25170 6621           EC                          in al, dx
25171 6622           24                     01   and al, #0x01
25172 6624           C0E0                   02   shl al, 2
25173 6627           0C                     0A   or al, #0x0a
25174 6629           88C4                        mov ah, al
25175 662B           B0                     06   mov al, #0x06
25176 662D           BA                   03CE   mov dx, # 0x3ce
25177 6630           EF                          out dx, ax
25178 6631           B8                   0004   mov ax, #0x0004
25179 6634           EF                          out dx, ax
25180 6635           B8                   1005   mov ax, #0x1005
25181 6638           EF                          out dx, ax
25182                                           ! 3457 endasm
25183                                           !BCC_ENDASM
25184                                           ! 3458 }
25185 6639           C3                         ret
25186                                           ! 3459 #asm
25187                                           !BCC_ASM
25188                       0000663A            idiv_u:
25189 663A           31D2                         xor dx,dx
25190 663C           F7F3                         div bx
25191 663E           C3                           ret
25192                                           ! 3464 endasm
25193                                           !BCC_ENDASM
25194                                           ! 3465 static void set_scan_lines(lines) Bit8u lines;
25195                       0000663F            _set_scan_lines:
25196                                           !BCC_EOS
25197                                           ! 3466 {
25198                                           ! 3467  Bit16u crtc_addr,cols,page,vde;
25199                                           !BCC_EOS
25200                                           ! 3468  Bit8u crtc_r9,ovl,rows;
25201                                           !BCC_EOS
25202                                           ! 3469  crtc_addr = read_word(0x40,0x63);
25203 663F           55                         push	bp
25204 6640           89E5                       mov	bp,sp
25205 6642           83C4                   F4  add	sp,*-$C
25206                                           ! Debug: list int = const $63 (used reg = )
25207 6645           B8                   0063  mov	ax,*$63
25208 6648           50                         push	ax
25209                                           ! Debug: list int = const $40 (used reg = )
25210 6649           B8                   0040  mov	ax,*$40
25211 664C           50                         push	ax
25212                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25213 664D           E8         15AB            call	_read_word
25214 6650           83C4                   04  add	sp,*4
25215                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25216 6653           8946         FE            mov	-2[bp],ax
25217                                           !BCC_EOS
25218                                           ! 3470  outb(crtc_addr, 0x09);
25219                                           ! Debug: list int = const 9 (used reg = )
25220 6656           B8                   0009  mov	ax,*9
25221 6659           50                         push	ax
25222                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25223 665A           FF76         FE            push	-2[bp]
25224                                           ! Debug: func () void = outb+0 (used reg = )
25225 665D           E8         15F4            call	_outb
25226 6660           83C4                   04  add	sp,*4
25227                                           !BCC_EOS
25228                                           ! 3471  crtc_r9 = inb(crtc_addr+1);
25229                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25230 6663           8B46         FE            mov	ax,-2[bp]
25231                                           ! Debug: list unsigned int = ax+1 (used reg = )
25232 6666           40                         inc	ax
25233 6667           50                         push	ax
25234                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25235 6668           E8         15D3            call	_inb
25236 666B           44                         inc	sp
25237 666C           44                         inc	sp
25238                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25239 666D           8846         F7            mov	-9[bp],al
25240                                           !BCC_EOS
25241                                           ! 3472  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25242                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25243 6670           8A46         04            mov	al,4[bp]
25244 6673           30E4                       xor	ah,ah
25245 6675           48                         dec	ax
25246 6676           50                         push	ax
25247                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25248 6677           8A46         F7            mov	al,-9[bp]
25249 667A           24                     E0  and	al,#$E0
25250                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25251 667C           30E4                       xor	ah,ah
25252 667E           0B46         F2            or	ax,-$E[bp]
25253 6681           44                         inc	sp
25254 6682           44                         inc	sp
25255                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25256 6683           8846         F7            mov	-9[bp],al
25257                                           !BCC_EOS
25258                                           ! 3473  outb(crtc_addr+1, crtc_r9);
25259                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25260 6686           8A46         F7            mov	al,-9[bp]
25261 6689           30E4                       xor	ah,ah
25262 668B           50                         push	ax
25263                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25264 668C           8B46         FE            mov	ax,-2[bp]
25265                                           ! Debug: list unsigned int = ax+1 (used reg = )
25266 668F           40                         inc	ax
25267 6690           50                         push	ax
25268                                           ! Debug: func () void = outb+0 (used reg = )
25269 6691           E8         15C0            call	_outb
25270 6694           83C4                   04  add	sp,*4
25271                                           !BCC_EOS
25272                                           ! 3474  if(lines==8)
25273                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25274 6697           8A46         04            mov	al,4[bp]
25275 669A           3C                     08  cmp	al,*8
25276 669C           75           10            jne 	.20E
25277                       0000669E            .20F:
25278                                           ! 3475   {
25279                                           ! 3476    biosfn_set_cursor_shape(0x06,0x07);
25280                                           ! Debug: list int = const 7 (used reg = )
25281 669E           B8                   0007  mov	ax,*7
25282 66A1           50                         push	ax
25283                                           ! Debug: list int = const 6 (used reg = )
25284 66A2           B8                   0006  mov	ax,*6
25285 66A5           50                         push	ax
25286                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25287 66A6           E8         DB85            call	_biosfn_set_cursor_shape
25288 66A9           83C4                   04  add	sp,*4
25289                                           !BCC_EOS
25290                                           ! 3477   }
25291                                           ! 3478  else
25292                                           ! 3479   {
25293 66AC           EB           18            jmp .210
25294                       000066AE            .20E:
25295                                           ! 3480    biosfn_set_cursor_shape(lines-4,lines-3);
25296                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25297 66AE           8A46         04            mov	al,4[bp]
25298 66B1           30E4                       xor	ah,ah
25299                                           ! Debug: list unsigned int = ax-3 (used reg = )
25300 66B3           05                   FFFD  add	ax,*-3
25301 66B6           50                         push	ax
25302                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25303 66B7           8A46         04            mov	al,4[bp]
25304 66BA           30E4                       xor	ah,ah
25305                                           ! Debug: list unsigned int = ax-4 (used reg = )
25306 66BC           05                   FFFC  add	ax,*-4
25307 66BF           50                         push	ax
25308                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25309 66C0           E8         DB6B            call	_biosfn_set_cursor_shape
25310 66C3           83C4                   04  add	sp,*4
25311                                           !BCC_EOS
25312                                           ! 3481   }
25313                                           ! 3482  write_word(0x40,0x85, lines);
25314                       000066C6            .210:
25315                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25316 66C6           8A46         04            mov	al,4[bp]
25317 66C9           30E4                       xor	ah,ah
25318 66CB           50                         push	ax
25319                                           ! Debug: list int = const $85 (used reg = )
25320 66CC           B8                   0085  mov	ax,#$85
25321 66CF           50                         push	ax
25322                                           ! Debug: list int = const $40 (used reg = )
25323 66D0           B8                   0040  mov	ax,*$40
25324 66D3           50                         push	ax
25325                                           ! Debug: func () void = write_word+0 (used reg = )
25326 66D4           E8         154F            call	_write_word
25327 66D7           83C4                   06  add	sp,*6
25328                                           !BCC_EOS
25329                                           ! 3483  outb(crtc_addr, 0x12);
25330                                           ! Debug: list int = const $12 (used reg = )
25331 66DA           B8                   0012  mov	ax,*$12
25332 66DD           50                         push	ax
25333                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25334 66DE           FF76         FE            push	-2[bp]
25335                                           ! Debug: func () void = outb+0 (used reg = )
25336 66E1           E8         1570            call	_outb
25337 66E4           83C4                   04  add	sp,*4
25338                                           !BCC_EOS
25339                                           ! 3484  vde = inb(crtc_addr+1);
25340                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25341 66E7           8B46         FE            mov	ax,-2[bp]
25342                                           ! Debug: list unsigned int = ax+1 (used reg = )
25343 66EA           40                         inc	ax
25344 66EB           50                         push	ax
25345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25346 66EC           E8         154F            call	_inb
25347 66EF           44                         inc	sp
25348 66F0           44                         inc	sp
25349                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25350 66F1           30E4                       xor	ah,ah
25351 66F3           8946         F8            mov	-8[bp],ax
25352                                           !BCC_EOS
25353                                           ! 3485  outb(crtc_addr, 0x07);
25354                                           ! Debug: list int = const 7 (used reg = )
25355 66F6           B8                   0007  mov	ax,*7
25356 66F9           50                         push	ax
25357                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25358 66FA           FF76         FE            push	-2[bp]
25359                                           ! Debug: func () void = outb+0 (used reg = )
25360 66FD           E8         1554            call	_outb
25361 6700           83C4                   04  add	sp,*4
25362                                           !BCC_EOS
25363                                           ! 3486  ovl = inb(crtc_addr+1);
25364                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25365 6703           8B46         FE            mov	ax,-2[bp]
25366                                           ! Debug: list unsigned int = ax+1 (used reg = )
25367 6706           40                         inc	ax
25368 6707           50                         push	ax
25369                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25370 6708           E8         1533            call	_inb
25371 670B           44                         inc	sp
25372 670C           44                         inc	sp
25373                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25374 670D           8846         F6            mov	-$A[bp],al
25375                                           !BCC_EOS
25376                                           ! 3487  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25377                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25378 6710           8A46         F6            mov	al,-$A[bp]
25379 6713           24                     40  and	al,*$40
25380                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25381 6715           30E4                       xor	ah,ah
25382 6717           B1                     03  mov	cl,*3
25383 6719           D3E0                       shl	ax,cl
25384 671B           50                         push	ax
25385                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25386 671C           8A46         F6            mov	al,-$A[bp]
25387 671F           24                     02  and	al,*2
25388                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25389 6721           30E4                       xor	ah,ah
25390 6723           B1                     07  mov	cl,*7
25391 6725           D3E0                       shl	ax,cl
25392                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25393 6727           0346         F2            add	ax,-$E[bp]
25394 672A           44                         inc	sp
25395 672B           44                         inc	sp
25396                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25397                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25398 672C           40                         inc	ax
25399 672D           0346         F8            add	ax,-8[bp]
25400 6730           8946         F8            mov	-8[bp],ax
25401                                           !BCC_EOS
25402                                           ! 3488  rows = vde / lines;
25403                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25404 6733           8A46         04            mov	al,4[bp]
25405 6736           30E4                       xor	ah,ah
25406 6738           89C3                       mov	bx,ax
25407 673A           8B46         F8            mov	ax,-8[bp]
25408 673D           E8         FEFA            call	idiv_u
25409                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25410 6740           8846         F5            mov	-$B[bp],al
25411                                           !BCC_EOS
25412                                           ! 3489  write_byte(0x40,0x84, rows-1);
25413                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25414 6743           8A46         F5            mov	al,-$B[bp]
25415 6746           30E4                       xor	ah,ah
25416                                           ! Debug: list unsigned int = ax-1 (used reg = )
25417 6748           48                         dec	ax
25418 6749           50                         push	ax
25419                                           ! Debug: list int = const $84 (used reg = )
25420 674A           B8                   0084  mov	ax,#$84
25421 674D           50                         push	ax
25422                                           ! Debug: list int = const $40 (used reg = )
25423 674E           B8                   0040  mov	ax,*$40
25424 6751           50                         push	ax
25425                                           ! Debug: func () void = write_byte+0 (used reg = )
25426 6752           E8         14B9            call	_write_byte
25427 6755           83C4                   06  add	sp,*6
25428                                           !BCC_EOS
25429                                           ! 3490  cols = read_word(0x40,0x4A);
25430                                           ! Debug: list int = const $4A (used reg = )
25431 6758           B8                   004A  mov	ax,*$4A
25432 675B           50                         push	ax
25433                                           ! Debug: list int = const $40 (used reg = )
25434 675C           B8                   0040  mov	ax,*$40
25435 675F           50                         push	ax
25436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25437 6760           E8         1498            call	_read_word
25438 6763           83C4                   04  add	sp,*4
25439                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25440 6766           8946         FC            mov	-4[bp],ax
25441                                           !BCC_EOS
25442                                           ! 3491  write_word(0x40,0x4C, rows * cols * 2);
25443                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25444 6769           8A46         F5            mov	al,-$B[bp]
25445 676C           30E4                       xor	ah,ah
25446 676E           8B4E         FC            mov	cx,-4[bp]
25447 6771           F7E9                       imul	cx
25448                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25449 6773           D1E0                       shl	ax,*1
25450                                           ! Debug: list unsigned int = ax+0 (used reg = )
25451 6775           50                         push	ax
25452                                           ! Debug: list int = const $4C (used reg = )
25453 6776           B8                   004C  mov	ax,*$4C
25454 6779           50                         push	ax
25455                                           ! Debug: list int = const $40 (used reg = )
25456 677A           B8                   0040  mov	ax,*$40
25457 677D           50                         push	ax
25458                                           ! Debug: func () void = write_word+0 (used reg = )
25459 677E           E8         14A5            call	_write_word
25460 6781           83C4                   06  add	sp,*6
25461                                           !BCC_EOS
25462                                           ! 3492 }
25463 6784           89EC                       mov	sp,bp
25464 6786           5D                         pop	bp
25465 6787           C3                         ret
25466                                           ! 3493 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8
25467                                           ! Register BX used in function set_scan_lines
25468                       00006788            _biosfn_load_text_user_pat:
25469                                           !BCC_EOS
25470                                           !BCC_EOS
25471                                           !BCC_EOS
25472                                           !BCC_EOS
25473                                           !BCC_EOS
25474                                           ! 3493 u BL;Bit8u BH;
25475                                           !BCC_EOS
25476                                           !BCC_EOS
25477                                           ! 3494 {
25478                                           ! 3495  Bit16u blockaddr,dest,i,src;
25479                                           !BCC_EOS
25480                                           ! 3496  get_font_access();
25481 6788           55                         push	bp
25482 6789           89E5                       mov	bp,sp
25483 678B           83C4                   F8  add	sp,*-8
25484                                           ! Debug: func () void = get_font_access+0 (used reg = )
25485 678E           E8         FE57            call	_get_font_access
25486                                           !BCC_EOS
25487                                           ! 3497  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25488                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25489 6791           8A46         0E            mov	al,$E[bp]
25490 6794           24                     04  and	al,*4
25491                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25492 6796           30E4                       xor	ah,ah
25493 6798           88C4                       mov	ah,al
25494 679A           30C0                       xor	al,al
25495 679C           B1                     03  mov	cl,*3
25496 679E           D3E0                       shl	ax,cl
25497 67A0           50                         push	ax
25498                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25499 67A1           8A46         0E            mov	al,$E[bp]
25500 67A4           24                     03  and	al,*3
25501                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25502 67A6           30E4                       xor	ah,ah
25503 67A8           88C4                       mov	ah,al
25504 67AA           30C0                       xor	al,al
25505 67AC           B1                     06  mov	cl,*6
25506 67AE           D3E0                       shl	ax,cl
25507                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25508 67B0           0346         F6            add	ax,-$A[bp]
25509 67B3           44                         inc	sp
25510 67B4           44                         inc	sp
25511                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25512 67B5           8946         FE            mov	-2[bp],ax
25513                                           !BCC_EOS
25514                                           ! 3498  for(i=0;i<CX;i++)
25515                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25516 67B8           31C0                       xor	ax,ax
25517 67BA           8946         FA            mov	-6[bp],ax
25518                                           !BCC_EOS
25519                                           !BCC_EOS
25520                                           ! 3499   {
25521 67BD           EB           44            jmp .213
25522                       000067BF            .214:
25523                                           ! 3500    src = BP + i * BH;
25524                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25525 67BF           8A46         10            mov	al,$10[bp]
25526 67C2           30E4                       xor	ah,ah
25527 67C4           89C3                       mov	bx,ax
25528 67C6           8B46         FA            mov	ax,-6[bp]
25529 67C9           89D9                       mov	cx,bx
25530 67CB           F7E9                       imul	cx
25531                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25532                                           ! Debug: expression subtree swapping
25533 67CD           0346         08            add	ax,8[bp]
25534                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25535 67D0           8946         F8            mov	-8[bp],ax
25536                                           !BCC_EOS
25537                                           ! 3501    dest = blockaddr + (DX + i) * 32;
25538                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25539 67D3           8B46         0C            mov	ax,$C[bp]
25540 67D6           0346         FA            add	ax,-6[bp]
25541                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25542 67D9           B1                     05  mov	cl,*5
25543 67DB           D3E0                       shl	ax,cl
25544                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25545                                           ! Debug: expression subtree swapping
25546 67DD           0346         FE            add	ax,-2[bp]
25547                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25548 67E0           8946         FC            mov	-4[bp],ax
25549                                           !BCC_EOS
25550                                           ! 3502    memcpyb(0xA000, dest, ES, src, BH);
25551                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25552 67E3           8A46         10            mov	al,$10[bp]
25553 67E6           30E4                       xor	ah,ah
25554 67E8           50                         push	ax
25555                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25556 67E9           FF76         F8            push	-8[bp]
25557                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25558 67EC           FF76         06            push	6[bp]
25559                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25560 67EF           FF76         FC            push	-4[bp]
25561                                           ! Debug: list unsigned int = const $A000 (used reg = )
25562 67F2           B8                   A000  mov	ax,#$A000
25563 67F5           50                         push	ax
25564                                           ! Debug: func () void = memcpyb+0 (used reg = )
25565 67F6           E8         138F            call	_memcpyb
25566 67F9           83C4                   0A  add	sp,*$A
25567                                           !BCC_EOS
25568                                           ! 3503   }
25569                                           ! 3504  release_font_access();
25570                       000067FC            .212:
25571                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25572 67FC           8B46         FA            mov	ax,-6[bp]
25573 67FF           40                         inc	ax
25574 6800           8946         FA            mov	-6[bp],ax
25575                       00006803            .213:
25576                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25577 6803           8B46         FA            mov	ax,-6[bp]
25578 6806           3B46         0A            cmp	ax,$A[bp]
25579 6809           72           B4            jb 	.214
25580                       0000680B            .215:
25581                       0000680B            .211:
25582                                           ! Debug: func () void = release_font_access+0 (used reg = )
25583 680B           E8         FDFD            call	_release_font_access
25584                                           !BCC_EOS
25585                                           ! 3505  if(AL>=0x10)
25586                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25587 680E           8A46         04            mov	al,4[bp]
25588 6811           3C                     10  cmp	al,*$10
25589 6813           72           0B            jb  	.216
25590                       00006815            .217:
25591                                           ! 3506   {
25592                                           ! 3507    set_scan_lines(BH);
25593                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25594 6815           8A46         10            mov	al,$10[bp]
25595 6818           30E4                       xor	ah,ah
25596 681A           50                         push	ax
25597                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25598 681B           E8         FE21            call	_set_scan_lines
25599 681E           44                         inc	sp
25600 681F           44                         inc	sp
25601                                           !BCC_EOS
25602                                           ! 3508   }
25603                                           ! 3509 }
25604                       00006820            .216:
25605 6820           89EC                       mov	sp,bp
25606 6822           5D                         pop	bp
25607 6823           C3                         ret
25608                                           ! 3510 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25609                                           ! Register BX used in function biosfn_load_text_user_pat
25610                       00006824            _biosfn_load_text_8_14_pat:
25611                                           !BCC_EOS
25612                                           !BCC_EOS
25613                                           ! 3511 {
25614                                           ! 3512  Bit16u blockaddr,dest,i,src;
25615                                           !BCC_EOS
25616                                           ! 3513  get_font_access();
25617 6824           55                         push	bp
25618 6825           89E5                       mov	bp,sp
25619 6827           83C4                   F8  add	sp,*-8
25620                                           ! Debug: func () void = get_font_access+0 (used reg = )
25621 682A           E8         FDBB            call	_get_font_access
25622                                           !BCC_EOS
25623                                           ! 3514  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25624                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25625 682D           8A46         06            mov	al,6[bp]
25626 6830           24                     04  and	al,*4
25627                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25628 6832           30E4                       xor	ah,ah
25629 6834           88C4                       mov	ah,al
25630 6836           30C0                       xor	al,al
25631 6838           B1                     03  mov	cl,*3
25632 683A           D3E0                       shl	ax,cl
25633 683C           50                         push	ax
25634                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25635 683D           8A46         06            mov	al,6[bp]
25636 6840           24                     03  and	al,*3
25637                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25638 6842           30E4                       xor	ah,ah
25639 6844           88C4                       mov	ah,al
25640 6846           30C0                       xor	al,al
25641 6848           B1                     06  mov	cl,*6
25642 684A           D3E0                       shl	ax,cl
25643                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25644 684C           0346         F6            add	ax,-$A[bp]
25645 684F           44                         inc	sp
25646 6850           44                         inc	sp
25647                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25648 6851           8946         FE            mov	-2[bp],ax
25649                                           !BCC_EOS
25650                                           ! 3515  for(i=0;i<0x100;i++)
25651                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25652 6854           31C0                       xor	ax,ax
25653 6856           8946         FA            mov	-6[bp],ax
25654                                           !BCC_EOS
25655                                           !BCC_EOS
25656                                           ! 3516   {
25657 6859           EB           41            jmp .21A
25658                       0000685B            .21B:
25659                                           ! 3517    src = i * 14;
25660                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25661 685B           8B46         FA            mov	ax,-6[bp]
25662 685E           89C2                       mov	dx,ax
25663 6860           B1                     03  mov	cl,*3
25664 6862           D3E0                       shl	ax,cl
25665 6864           29D0                       sub	ax,dx
25666 6866           D1E0                       shl	ax,*1
25667                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25668 6868           8946         F8            mov	-8[bp],ax
25669                                           !BCC_EOS
25670                                           ! 3518    dest = blockaddr + i * 32;
25671                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25672 686B           8B46         FA            mov	ax,-6[bp]
25673 686E           B1                     05  mov	cl,*5
25674 6870           D3E0                       shl	ax,cl
25675                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25676                                           ! Debug: expression subtree swapping
25677 6872           0346         FE            add	ax,-2[bp]
25678                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25679 6875           8946         FC            mov	-4[bp],ax
25680                                           !BCC_EOS
25681                                           ! 3519    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25682                                           ! Debug: list int = const $E (used reg = )
25683 6878           B8                   000E  mov	ax,*$E
25684 687B           50                         push	ax
25685                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25686 687C           8B5E         F8            mov	bx,-8[bp]
25687                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25688                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25689 687F           81C3                 1761  add	bx,#_vgafont14
25690 6883           53                         push	bx
25691                                           ! Debug: list unsigned int = const $C000 (used reg = )
25692 6884           B8                   C000  mov	ax,#$C000
25693 6887           50                         push	ax
25694                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25695 6888           FF76         FC            push	-4[bp]
25696                                           ! Debug: list unsigned int = const $A000 (used reg = )
25697 688B           B8                   A000  mov	ax,#$A000
25698 688E           50                         push	ax
25699                                           ! Debug: func () void = memcpyb+0 (used reg = )
25700 688F           E8         12F6            call	_memcpyb
25701 6892           83C4                   0A  add	sp,*$A
25702                                           !BCC_EOS
25703                                           ! 3520   }
25704                                           ! 3521  release_font_access();
25705                       00006895            .219:
25706                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25707 6895           8B46         FA            mov	ax,-6[bp]
25708 6898           40                         inc	ax
25709 6899           8946         FA            mov	-6[bp],ax
25710                       0000689C            .21A:
25711                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25712 689C           8B46         FA            mov	ax,-6[bp]
25713 689F           3D                   0100  cmp	ax,#$100
25714 68A2           72           B7            jb 	.21B
25715                       000068A4            .21C:
25716                       000068A4            .218:
25717                                           ! Debug: func () void = release_font_access+0 (used reg = )
25718 68A4           E8         FD64            call	_release_font_access
25719                                           !BCC_EOS
25720                                           ! 3522  if(AL>=0x10)
25721                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25722 68A7           8A46         04            mov	al,4[bp]
25723 68AA           3C                     10  cmp	al,*$10
25724 68AC           72           09            jb  	.21D
25725                       000068AE            .21E:
25726                                           ! 3523   {
25727                                           ! 3524    set_scan_lines(14);
25728                                           ! Debug: list int = const $E (used reg = )
25729 68AE           B8                   000E  mov	ax,*$E
25730 68B1           50                         push	ax
25731                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25732 68B2           E8         FD8A            call	_set_scan_lines
25733 68B5           44                         inc	sp
25734 68B6           44                         inc	sp
25735                                           !BCC_EOS
25736                                           ! 3525   }
25737                                           ! 3526 }
25738                       000068B7            .21D:
25739 68B7           89EC                       mov	sp,bp
25740 68B9           5D                         pop	bp
25741 68BA           C3                         ret
25742                                           ! 3527 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25743                                           ! Register BX used in function biosfn_load_text_8_14_pat
25744                       000068BB            _biosfn_load_text_8_8_pat:
25745                                           !BCC_EOS
25746                                           !BCC_EOS
25747                                           ! 3528 {
25748                                           ! 3529  Bit16u blockaddr,dest,i,src;
25749                                           !BCC_EOS
25750                                           ! 3530  get_font_access();
25751 68BB           55                         push	bp
25752 68BC           89E5                       mov	bp,sp
25753 68BE           83C4                   F8  add	sp,*-8
25754                                           ! Debug: func () void = get_font_access+0 (used reg = )
25755 68C1           E8         FD24            call	_get_font_access
25756                                           !BCC_EOS
25757                                           ! 3531  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25758                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25759 68C4           8A46         06            mov	al,6[bp]
25760 68C7           24                     04  and	al,*4
25761                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25762 68C9           30E4                       xor	ah,ah
25763 68CB           88C4                       mov	ah,al
25764 68CD           30C0                       xor	al,al
25765 68CF           B1                     03  mov	cl,*3
25766 68D1           D3E0                       shl	ax,cl
25767 68D3           50                         push	ax
25768                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25769 68D4           8A46         06            mov	al,6[bp]
25770 68D7           24                     03  and	al,*3
25771                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25772 68D9           30E4                       xor	ah,ah
25773 68DB           88C4                       mov	ah,al
25774 68DD           30C0                       xor	al,al
25775 68DF           B1                     06  mov	cl,*6
25776 68E1           D3E0                       shl	ax,cl
25777                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25778 68E3           0346         F6            add	ax,-$A[bp]
25779 68E6           44                         inc	sp
25780 68E7           44                         inc	sp
25781                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25782 68E8           8946         FE            mov	-2[bp],ax
25783                                           !BCC_EOS
25784                                           ! 3532  for(i=0;i<0x100;i++)
25785                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25786 68EB           31C0                       xor	ax,ax
25787 68ED           8946         FA            mov	-6[bp],ax
25788                                           !BCC_EOS
25789                                           !BCC_EOS
25790                                           ! 3533   {
25791 68F0           EB           3B            jmp .221
25792                       000068F2            .222:
25793                                           ! 3534    src = i * 8;
25794                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25795 68F2           8B46         FA            mov	ax,-6[bp]
25796 68F5           B1                     03  mov	cl,*3
25797 68F7           D3E0                       shl	ax,cl
25798                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25799 68F9           8946         F8            mov	-8[bp],ax
25800                                           !BCC_EOS
25801                                           ! 3535    dest = blockaddr + i * 32;
25802                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25803 68FC           8B46         FA            mov	ax,-6[bp]
25804 68FF           B1                     05  mov	cl,*5
25805 6901           D3E0                       shl	ax,cl
25806                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25807                                           ! Debug: expression subtree swapping
25808 6903           0346         FE            add	ax,-2[bp]
25809                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25810 6906           8946         FC            mov	-4[bp],ax
25811                                           !BCC_EOS
25812                                           ! 3536    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25813                                           ! Debug: list int = const 8 (used reg = )
25814 6909           B8                   0008  mov	ax,*8
25815 690C           50                         push	ax
25816                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25817 690D           8B5E         F8            mov	bx,-8[bp]
25818                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25819                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25820 6910           81C3                 0F61  add	bx,#_vgafont8
25821 6914           53                         push	bx
25822                                           ! Debug: list unsigned int = const $C000 (used reg = )
25823 6915           B8                   C000  mov	ax,#$C000
25824 6918           50                         push	ax
25825                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25826 6919           FF76         FC            push	-4[bp]
25827                                           ! Debug: list unsigned int = const $A000 (used reg = )
25828 691C           B8                   A000  mov	ax,#$A000
25829 691F           50                         push	ax
25830                                           ! Debug: func () void = memcpyb+0 (used reg = )
25831 6920           E8         1265            call	_memcpyb
25832 6923           83C4                   0A  add	sp,*$A
25833                                           !BCC_EOS
25834                                           ! 3537   }
25835                                           ! 3538  release_font_access();
25836                       00006926            .220:
25837                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25838 6926           8B46         FA            mov	ax,-6[bp]
25839 6929           40                         inc	ax
25840 692A           8946         FA            mov	-6[bp],ax
25841                       0000692D            .221:
25842                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25843 692D           8B46         FA            mov	ax,-6[bp]
25844 6930           3D                   0100  cmp	ax,#$100
25845 6933           72           BD            jb 	.222
25846                       00006935            .223:
25847                       00006935            .21F:
25848                                           ! Debug: func () void = release_font_access+0 (used reg = )
25849 6935           E8         FCD3            call	_release_font_access
25850                                           !BCC_EOS
25851                                           ! 3539  if(AL>=0x10)
25852                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25853 6938           8A46         04            mov	al,4[bp]
25854 693B           3C                     10  cmp	al,*$10
25855 693D           72           09            jb  	.224
25856                       0000693F            .225:
25857                                           ! 3540   {
25858                                           ! 3541    set_scan_lines(8);
25859                                           ! Debug: list int = const 8 (used reg = )
25860 693F           B8                   0008  mov	ax,*8
25861 6942           50                         push	ax
25862                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25863 6943           E8         FCF9            call	_set_scan_lines
25864 6946           44                         inc	sp
25865 6947           44                         inc	sp
25866                                           !BCC_EOS
25867                                           ! 3542   }
25868                                           ! 3543 }
25869                       00006948            .224:
25870 6948           89EC                       mov	sp,bp
25871 694A           5D                         pop	bp
25872 694B           C3                         ret
25873                                           ! 3544 #asm
25874                                           !BCC_ASM
25875                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25876                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25877                       0000694C            biosfn_set_text_block_specifier:
25878 694C           50                           push ax
25879 694D           52                           push dx
25880 694E           BA                   03C4    mov dx, # 0x3c4
25881 6951           88DC                         mov ah, bl
25882 6953           B0                     03    mov al, #0x03
25883 6955           EF                           out dx, ax
25884 6956           5A                           pop dx
25885 6957           58                           pop ax
25886 6958           C3                           ret
25887                                           ! 3555 endasm
25888                                           !BCC_ENDASM
25889                                           ! 3556 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25890                                           ! Register BX used in function biosfn_load_text_8_8_pat
25891                       00006959            _biosfn_load_text_8_16_pat:
25892                                           !BCC_EOS
25893                                           !BCC_EOS
25894                                           ! 3557 {
25895                                           ! 3558  Bit16u blockaddr,dest,i,src;
25896                                           !BCC_EOS
25897                                           ! 3559  get_font_access();
25898 6959           55                         push	bp
25899 695A           89E5                       mov	bp,sp
25900 695C           83C4                   F8  add	sp,*-8
25901                                           ! Debug: func () void = get_font_access+0 (used reg = )
25902 695F           E8         FC86            call	_get_font_access
25903                                           !BCC_EOS
25904                                           ! 3560  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25905                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25906 6962           8A46         06            mov	al,6[bp]
25907 6965           24                     04  and	al,*4
25908                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25909 6967           30E4                       xor	ah,ah
25910 6969           88C4                       mov	ah,al
25911 696B           30C0                       xor	al,al
25912 696D           B1                     03  mov	cl,*3
25913 696F           D3E0                       shl	ax,cl
25914 6971           50                         push	ax
25915                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25916 6972           8A46         06            mov	al,6[bp]
25917 6975           24                     03  and	al,*3
25918                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25919 6977           30E4                       xor	ah,ah
25920 6979           88C4                       mov	ah,al
25921 697B           30C0                       xor	al,al
25922 697D           B1                     06  mov	cl,*6
25923 697F           D3E0                       shl	ax,cl
25924                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25925 6981           0346         F6            add	ax,-$A[bp]
25926 6984           44                         inc	sp
25927 6985           44                         inc	sp
25928                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25929 6986           8946         FE            mov	-2[bp],ax
25930                                           !BCC_EOS
25931                                           ! 3561  for(i=0;i<0x100;i++)
25932                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25933 6989           31C0                       xor	ax,ax
25934 698B           8946         FA            mov	-6[bp],ax
25935                                           !BCC_EOS
25936                                           !BCC_EOS
25937                                           ! 3562   {
25938 698E           EB           3B            jmp .228
25939                       00006990            .229:
25940                                           ! 3563    src = i * 16;
25941                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25942 6990           8B46         FA            mov	ax,-6[bp]
25943 6993           B1                     04  mov	cl,*4
25944 6995           D3E0                       shl	ax,cl
25945                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25946 6997           8946         F8            mov	-8[bp],ax
25947                                           !BCC_EOS
25948                                           ! 3564    dest = blockaddr + i * 32;
25949                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25950 699A           8B46         FA            mov	ax,-6[bp]
25951 699D           B1                     05  mov	cl,*5
25952 699F           D3E0                       shl	ax,cl
25953                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25954                                           ! Debug: expression subtree swapping
25955 69A1           0346         FE            add	ax,-2[bp]
25956                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25957 69A4           8946         FC            mov	-4[bp],ax
25958                                           !BCC_EOS
25959                                           ! 3565    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25960                                           ! Debug: list int = const $10 (used reg = )
25961 69A7           B8                   0010  mov	ax,*$10
25962 69AA           50                         push	ax
25963                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25964 69AB           8B5E         F8            mov	bx,-8[bp]
25965                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25966                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25967 69AE           81C3                 2561  add	bx,#_vgafont16
25968 69B2           53                         push	bx
25969                                           ! Debug: list unsigned int = const $C000 (used reg = )
25970 69B3           B8                   C000  mov	ax,#$C000
25971 69B6           50                         push	ax
25972                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25973 69B7           FF76         FC            push	-4[bp]
25974                                           ! Debug: list unsigned int = const $A000 (used reg = )
25975 69BA           B8                   A000  mov	ax,#$A000
25976 69BD           50                         push	ax
25977                                           ! Debug: func () void = memcpyb+0 (used reg = )
25978 69BE           E8         11C7            call	_memcpyb
25979 69C1           83C4                   0A  add	sp,*$A
25980                                           !BCC_EOS
25981                                           ! 3566   }
25982                                           ! 3567  release_font_access();
25983                       000069C4            .227:
25984                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25985 69C4           8B46         FA            mov	ax,-6[bp]
25986 69C7           40                         inc	ax
25987 69C8           8946         FA            mov	-6[bp],ax
25988                       000069CB            .228:
25989                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25990 69CB           8B46         FA            mov	ax,-6[bp]
25991 69CE           3D                   0100  cmp	ax,#$100
25992 69D1           72           BD            jb 	.229
25993                       000069D3            .22A:
25994                       000069D3            .226:
25995                                           ! Debug: func () void = release_font_access+0 (used reg = )
25996 69D3           E8         FC35            call	_release_font_access
25997                                           !BCC_EOS
25998                                           ! 3568  if(AL>=0x10)
25999                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26000 69D6           8A46         04            mov	al,4[bp]
26001 69D9           3C                     10  cmp	al,*$10
26002 69DB           72           09            jb  	.22B
26003                       000069DD            .22C:
26004                                           ! 3569   {
26005                                           ! 3570    set_scan_lines(16);
26006                                           ! Debug: list int = const $10 (used reg = )
26007 69DD           B8                   0010  mov	ax,*$10
26008 69E0           50                         push	ax
26009                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26010 69E1           E8         FC5B            call	_set_scan_lines
26011 69E4           44                         inc	sp
26012 69E5           44                         inc	sp
26013                                           !BCC_EOS
26014                                           ! 3571   }
26015                                           ! 3572 }
26016                       000069E6            .22B:
26017 69E6           89EC                       mov	sp,bp
26018 69E8           5D                         pop	bp
26019 69E9           C3                         ret
26020                                           ! 3573 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26021                                           ! Register BX used in function biosfn_load_text_8_16_pat
26022                       000069EA            _biosfn_load_gfx_8_8_chars:
26023                                           !BCC_EOS
26024                                           !BCC_EOS
26025                                           ! 3574 {
26026                                           ! 3575 }
26027 69EA           C3                         ret
26028                                           ! 3576 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26029                       000069EB            _biosfn_load_gfx_user_chars:
26030                                           !BCC_EOS
26031                                           !BCC_EOS
26032                                           !BCC_EOS
26033                                           !BCC_EOS
26034                                           !BCC_EOS
26035                                           ! 3577 {
26036                                           ! 3578 }
26037 69EB           C3                         ret
26038                                           ! 3579 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26039                       000069EC            _biosfn_load_gfx_8_14_chars:
26040                                           !BCC_EOS
26041                                           ! 3580 {
26042                                           ! 3581 }
26043 69EC           C3                         ret
26044                                           ! 3582 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26045                       000069ED            _biosfn_load_gfx_8_8_dd_chars:
26046                                           !BCC_EOS
26047                                           ! 3583 {
26048                                           ! 3584 }
26049 69ED           C3                         ret
26050                                           ! 3585 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26051                       000069EE            _biosfn_load_gfx_8_16_chars:
26052                                           !BCC_EOS
26053                                           ! 3586 {
26054                                           ! 3587 }
26055 69EE           C3                         ret
26056                                           ! 3588 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26057                                           ! 3589 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26058                       000069EF            _biosfn_get_font_info:
26059                                           !BCC_EOS
26060                                           !BCC_EOS
26061                                           !BCC_EOS
26062                                           !BCC_EOS
26063                                           !BCC_EOS
26064                                           ! 3590 {B
26065                                           ! 3590 it16u ss=get_SS();
26066 69EF           55                         push	bp
26067 69F0           89E5                       mov	bp,sp
26068 69F2           4C                         dec	sp
26069 69F3           4C                         dec	sp
26070                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26071 69F4           E8         127D            call	_get_SS
26072                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26073 69F7           8946         FE            mov	-2[bp],ax
26074                                           !BCC_EOS
26075                                           ! 3591  switch(BH)
26076 69FA           8A46         04            mov	al,4[bp]
26077                                           ! 3592   {case 0x00:
26078 69FD           E9         0143            br 	.22F
26079                                           ! 3593     write_word(ss,ES,read_word(0x00,0x1f*4));
26080                       00006A00            .230:
26081                                           ! Debug: list int = const $7C (used reg = )
26082 6A00           B8                   007C  mov	ax,*$7C
26083 6A03           50                         push	ax
26084                                           ! Debug: list int = const 0 (used reg = )
26085 6A04           31C0                       xor	ax,ax
26086 6A06           50                         push	ax
26087                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26088 6A07           E8         11F1            call	_read_word
26089 6A0A           83C4                   04  add	sp,*4
26090                                           ! Debug: list unsigned short = ax+0 (used reg = )
26091 6A0D           50                         push	ax
26092                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26093 6A0E           FF76         06            push	6[bp]
26094                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26095 6A11           FF76         FE            push	-2[bp]
26096                                           ! Debug: func () void = write_word+0 (used reg = )
26097 6A14           E8         120F            call	_write_word
26098 6A17           83C4                   06  add	sp,*6
26099                                           !BCC_EOS
26100                                           ! 3594     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26101                                           ! Debug: list int = const $7E (used reg = )
26102 6A1A           B8                   007E  mov	ax,*$7E
26103 6A1D           50                         push	ax
26104                                           ! Debug: list int = const 0 (used reg = )
26105 6A1E           31C0                       xor	ax,ax
26106 6A20           50                         push	ax
26107                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26108 6A21           E8         11D7            call	_read_word
26109 6A24           83C4                   04  add	sp,*4
26110                                           ! Debug: list unsigned short = ax+0 (used reg = )
26111 6A27           50                         push	ax
26112                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26113 6A28           FF76         08            push	8[bp]
26114                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26115 6A2B           FF76         FE            push	-2[bp]
26116                                           ! Debug: func () void = write_word+0 (used reg = )
26117 6A2E           E8         11F5            call	_write_word
26118 6A31           83C4                   06  add	sp,*6
26119                                           !BCC_EOS
26120                                           ! 3595     break;
26121 6A34           E9         0131            br 	.22D
26122                                           !BCC_EOS
26123                                           ! 3596    case 0x01:
26124                                           ! 3597     write_word(ss,ES,read_word(0x00,0x43*4));
26125                       00006A37            .231:
26126                                           ! Debug: list int = const $10C (used reg = )
26127 6A37           B8                   010C  mov	ax,#$10C
26128 6A3A           50                         push	ax
26129                                           ! Debug: list int = const 0 (used reg = )
26130 6A3B           31C0                       xor	ax,ax
26131 6A3D           50                         push	ax
26132                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26133 6A3E           E8         11BA            call	_read_word
26134 6A41           83C4                   04  add	sp,*4
26135                                           ! Debug: list unsigned short = ax+0 (used reg = )
26136 6A44           50                         push	ax
26137                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26138 6A45           FF76         06            push	6[bp]
26139                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26140 6A48           FF76         FE            push	-2[bp]
26141                                           ! Debug: func () void = write_word+0 (used reg = )
26142 6A4B           E8         11D8            call	_write_word
26143 6A4E           83C4                   06  add	sp,*6
26144                                           !BCC_EOS
26145                                           ! 3598     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26146                                           ! Debug: list int = const $10E (used reg = )
26147 6A51           B8                   010E  mov	ax,#$10E
26148 6A54           50                         push	ax
26149                                           ! Debug: list int = const 0 (used reg = )
26150 6A55           31C0                       xor	ax,ax
26151 6A57           50                         push	ax
26152                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26153 6A58           E8         11A0            call	_read_word
26154 6A5B           83C4                   04  add	sp,*4
26155                                           ! Debug: list unsigned short = ax+0 (used reg = )
26156 6A5E           50                         push	ax
26157                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26158 6A5F           FF76         08            push	8[bp]
26159                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26160 6A62           FF76         FE            push	-2[bp]
26161                                           ! Debug: func () void = write_word+0 (used reg = )
26162 6A65           E8         11BE            call	_write_word
26163 6A68           83C4                   06  add	sp,*6
26164                                           !BCC_EOS
26165                                           ! 3599     break;
26166 6A6B           E9         00FA            br 	.22D
26167                                           !BCC_EOS
26168                                           ! 3600    case 0x02:
26169                                           ! 3601     write_word(ss,ES,0xC000);
26170                       00006A6E            .232:
26171                                           ! Debug: list unsigned int = const $C000 (used reg = )
26172 6A6E           B8                   C000  mov	ax,#$C000
26173 6A71           50                         push	ax
26174                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26175 6A72           FF76         06            push	6[bp]
26176                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26177 6A75           FF76         FE            push	-2[bp]
26178                                           ! Debug: func () void = write_word+0 (used reg = )
26179 6A78           E8         11AB            call	_write_word
26180 6A7B           83C4                   06  add	sp,*6
26181                                           !BCC_EOS
26182                                           ! 3602     write_word(ss,BP,vgafont14);
26183                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26184 6A7E           BB                   1761  mov	bx,#_vgafont14
26185 6A81           53                         push	bx
26186                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26187 6A82           FF76         08            push	8[bp]
26188                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26189 6A85           FF76         FE            push	-2[bp]
26190                                           ! Debug: func () void = write_word+0 (used reg = )
26191 6A88           E8         119B            call	_write_word
26192 6A8B           83C4                   06  add	sp,*6
26193                                           !BCC_EOS
26194                                           ! 3603     break;
26195 6A8E           E9         00D7            br 	.22D
26196                                           !BCC_EOS
26197                                           ! 3604    case 0x03:
26198                                           ! 3605     write_word(ss,ES,0xC000);
26199                       00006A91            .233:
26200                                           ! Debug: list unsigned int = const $C000 (used reg = )
26201 6A91           B8                   C000  mov	ax,#$C000
26202 6A94           50                         push	ax
26203                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26204 6A95           FF76         06            push	6[bp]
26205                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26206 6A98           FF76         FE            push	-2[bp]
26207                                           ! Debug: func () void = write_word+0 (used reg = )
26208 6A9B           E8         1188            call	_write_word
26209 6A9E           83C4                   06  add	sp,*6
26210                                           !BCC_EOS
26211                                           ! 3606     write_word(ss,BP,vgafont8);
26212                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26213 6AA1           BB                   0F61  mov	bx,#_vgafont8
26214 6AA4           53                         push	bx
26215                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26216 6AA5           FF76         08            push	8[bp]
26217                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26218 6AA8           FF76         FE            push	-2[bp]
26219                                           ! Debug: func () void = write_word+0 (used reg = )
26220 6AAB           E8         1178            call	_write_word
26221 6AAE           83C4                   06  add	sp,*6
26222                                           !BCC_EOS
26223                                           ! 3607     break;
26224 6AB1           E9         00B4            br 	.22D
26225                                           !BCC_EOS
26226                                           ! 3608    case 0x04:
26227                                           ! 3609     write_word(ss,ES,0xC000);
26228                       00006AB4            .234:
26229                                           ! Debug: list unsigned int = const $C000 (used reg = )
26230 6AB4           B8                   C000  mov	ax,#$C000
26231 6AB7           50                         push	ax
26232                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26233 6AB8           FF76         06            push	6[bp]
26234                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26235 6ABB           FF76         FE            push	-2[bp]
26236                                           ! Debug: func () void = write_word+0 (used reg = )
26237 6ABE           E8         1165            call	_write_word
26238 6AC1           83C4                   06  add	sp,*6
26239                                           !BCC_EOS
26240                                           ! 3610     write_word(ss,BP,vgafont8+128*8);
26241                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26242 6AC4           BB                   1361  mov	bx,#_vgafont8+$400
26243 6AC7           53                         push	bx
26244                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26245 6AC8           FF76         08            push	8[bp]
26246                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26247 6ACB           FF76         FE            push	-2[bp]
26248                                           ! Debug: func () void = write_word+0 (used reg = )
26249 6ACE           E8         1155            call	_write_word
26250 6AD1           83C4                   06  add	sp,*6
26251                                           !BCC_EOS
26252                                           ! 3611     break;
26253 6AD4           E9         0091            br 	.22D
26254                                           !BCC_EOS
26255                                           ! 3612    case 0x05:
26256                                           ! 3613     write_word(ss,ES,0xC000);
26257                       00006AD7            .235:
26258                                           ! Debug: list unsigned int = const $C000 (used reg = )
26259 6AD7           B8                   C000  mov	ax,#$C000
26260 6ADA           50                         push	ax
26261                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26262 6ADB           FF76         06            push	6[bp]
26263                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26264 6ADE           FF76         FE            push	-2[bp]
26265                                           ! Debug: func () void = write_word+0 (used reg = )
26266 6AE1           E8         1142            call	_write_word
26267 6AE4           83C4                   06  add	sp,*6
26268                                           !BCC_EOS
26269                                           ! 3614     write_word(ss,BP,vgafont14alt);
26270                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26271 6AE7           BB                   3561  mov	bx,#_vgafont14alt
26272 6AEA           53                         push	bx
26273                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26274 6AEB           FF76         08            push	8[bp]
26275                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26276 6AEE           FF76         FE            push	-2[bp]
26277                                           ! Debug: func () void = write_word+0 (used reg = )
26278 6AF1           E8         1132            call	_write_word
26279 6AF4           83C4                   06  add	sp,*6
26280                                           !BCC_EOS
26281                                           ! 3615     break;
26282 6AF7           EB           6F            jmp .22D
26283                                           !BCC_EOS
26284                                           ! 3616    case 0x06:
26285                                           ! 3617     write_word(ss,ES,0xC000);
26286                       00006AF9            .236:
26287                                           ! Debug: list unsigned int = const $C000 (used reg = )
26288 6AF9           B8                   C000  mov	ax,#$C000
26289 6AFC           50                         push	ax
26290                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26291 6AFD           FF76         06            push	6[bp]
26292                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26293 6B00           FF76         FE            push	-2[bp]
26294                                           ! Debug: func () void = write_word+0 (used reg = )
26295 6B03           E8         1120            call	_write_word
26296 6B06           83C4                   06  add	sp,*6
26297                                           !BCC_EOS
26298                                           ! 3618     write_word(ss,BP,vgafont16);
26299                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26300 6B09           BB                   2561  mov	bx,#_vgafont16
26301 6B0C           53                         push	bx
26302                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26303 6B0D           FF76         08            push	8[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6B10           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6B13           E8         1110            call	_write_word
26308 6B16           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3619     break;
26311 6B19           EB           4D            jmp .22D
26312                                           !BCC_EOS
26313                                           ! 3620    case 0x07:
26314                                           ! 3621     write_word(ss,ES,0xC000);
26315                       00006B1B            .237:
26316                                           ! Debug: list unsigned int = const $C000 (used reg = )
26317 6B1B           B8                   C000  mov	ax,#$C000
26318 6B1E           50                         push	ax
26319                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26320 6B1F           FF76         06            push	6[bp]
26321                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26322 6B22           FF76         FE            push	-2[bp]
26323                                           ! Debug: func () void = write_word+0 (used reg = )
26324 6B25           E8         10FE            call	_write_word
26325 6B28           83C4                   06  add	sp,*6
26326                                           !BCC_EOS
26327                                           ! 3622     write_word(ss,BP,vgafont16alt);
26328                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26329 6B2B           BB                   3562  mov	bx,#_vgafont16alt
26330 6B2E           53                         push	bx
26331                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26332 6B2F           FF76         08            push	8[bp]
26333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26334 6B32           FF76         FE            push	-2[bp]
26335                                           ! Debug: func () void = write_word+0 (used reg = )
26336 6B35           E8         10EE            call	_write_word
26337 6B38           83C4                   06  add	sp,*6
26338                                           !BCC_EOS
26339                                           ! 3623     break;
26340 6B3B           EB           2B            jmp .22D
26341                                           !BCC_EOS
26342                                           ! 3624    default:
26343                                           ! 3625     return;
26344                       00006B3D            .238:
26345 6B3D           89EC                       mov	sp,bp
26346 6B3F           5D                         pop	bp
26347 6B40           C3                         ret
26348                                           !BCC_EOS
26349                                           ! 3626   }
26350                                           ! 3627  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26351 6B41           EB           25            jmp .22D
26352                       00006B43            .22F:
26353 6B43           2C                     00  sub	al,*0
26354 6B45           72           F6            jb 	.238
26355 6B47           3C                     07  cmp	al,*7
26356 6B49           77           1B            ja  	.239
26357 6B4B           30E4                       xor	ah,ah
26358 6B4D           D1E0                       shl	ax,*1
26359 6B4F           89C3                       mov	bx,ax
26360 6B51           2E                         seg	cs
26361 6B52           FFA7       6B56            br	.23A[bx]
26362                       00006B56            .23A:
26363 6B56                      6A00            .word	.230
26364 6B58                      6A37            .word	.231
26365 6B5A                      6A6E            .word	.232
26366 6B5C                      6A91            .word	.233
26367 6B5E                      6AB4            .word	.234
26368 6B60                      6AD7            .word	.235
26369 6B62                      6AF9            .word	.236
26370 6B64                      6B1B            .word	.237
26371                       00006B66            .239:
26372 6B66           EB           D5            jmp	.238
26373                       00006B68            .22D:
26374                       FFFFFFFC            ..FFF5	=	-4
26375                                           ! Debug: list int = const $85 (used reg = )
26376 6B68           B8                   0085  mov	ax,#$85
26377 6B6B           50                         push	ax
26378                                           ! Debug: list int = const $40 (used reg = )
26379 6B6C           B8                   0040  mov	ax,*$40
26380 6B6F           50                         push	ax
26381                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26382 6B70           E8         1075            call	_read_byte
26383 6B73           83C4                   04  add	sp,*4
26384                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26385 6B76           30E4                       xor	ah,ah
26386                                           ! Debug: list unsigned short = ax+0 (used reg = )
26387 6B78           50                         push	ax
26388                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26389 6B79           FF76         0A            push	$A[bp]
26390                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26391 6B7C           FF76         FE            push	-2[bp]
26392                                           ! Debug: func () void = write_word+0 (used reg = )
26393 6B7F           E8         10A4            call	_write_word
26394 6B82           83C4                   06  add	sp,*6
26395                                           !BCC_EOS
26396                                           ! 3628  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26397                                           ! Debug: list int = const $84 (used reg = )
26398 6B85           B8                   0084  mov	ax,#$84
26399 6B88           50                         push	ax
26400                                           ! Debug: list int = const $40 (used reg = )
26401 6B89           B8                   0040  mov	ax,*$40
26402 6B8C           50                         push	ax
26403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26404 6B8D           E8         1058            call	_read_byte
26405 6B90           83C4                   04  add	sp,*4
26406                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26407 6B93           30E4                       xor	ah,ah
26408                                           ! Debug: list unsigned short = ax+0 (used reg = )
26409 6B95           50                         push	ax
26410                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26411 6B96           FF76         0C            push	$C[bp]
26412                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26413 6B99           FF76         FE            push	-2[bp]
26414                                           ! Debug: func () void = write_word+0 (used reg = )
26415 6B9C           E8         1087            call	_write_word
26416 6B9F           83C4                   06  add	sp,*6
26417                                           !BCC_EOS
26418                                           ! 3629 }
26419 6BA2           89EC                       mov	sp,bp
26420 6BA4           5D                         pop	bp
26421 6BA5           C3                         ret
26422                                           ! 3630 #asm
26423                                           !BCC_ASM
26424                       00000006            _biosfn_get_font_info.BP	set	6
26425                       00000002            _biosfn_get_font_info.BH	set	2
26426                       00000008            _biosfn_get_font_info.CX	set	8
26427                       0000000A            _biosfn_get_font_info.DX	set	$A
26428                       00000004            _biosfn_get_font_info.ES	set	4
26429                       00006BA6            biosfn_get_ega_info:
26430 6BA6           1E                           push ds
26431 6BA7           50                           push ax
26432 6BA8           B8                   0040    mov ax, # 0x40
26433 6BAB           8ED8                         mov ds, ax
26434 6BAD           30ED                         xor ch, ch
26435 6BAF           BB                   0088    mov bx, # 0x88
26436 6BB2           8A0F                         mov cl, [bx]
26437 6BB4           80E1                   0F    and cl, #0x0f
26438 6BB7           BB                   0063    mov bx, # 0x63
26439 6BBA           8B07                         mov ax, [bx]
26440 6BBC           BB                   0003    mov bx, #0x0003
26441 6BBF           3D                   03B4    cmp ax, # 0x3b4
26442 6BC2           75           02              jne mode_ega_color
26443 6BC4           B7                     01    mov bh, #0x01
26444                       00006BC6            mode_ega_color:
26445 6BC6           58                           pop ax
26446 6BC7           1F                           pop ds
26447 6BC8           C3                           ret
26448                                           ! 3650 endasm
26449                                           !BCC_ENDASM
26450                                           ! 3651 static void biosfn_alternate_prtsc()
26451                                           ! Register BX used in function biosfn_get_font_info
26452                                           ! 3652 {
26453                       00006BC9            _biosfn_alternate_prtsc:
26454                                           ! 3653 }
26455 6BC9           C3                         ret
26456                                           ! 3654 #asm
26457                                           !BCC_ASM
26458                       00006BCA            biosfn_select_vert_res:
26459                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26460 6BCA           1E                           push ds
26461 6BCB           53                           push bx
26462 6BCC           52                           push dx
26463 6BCD           88C2                         mov dl, al
26464 6BCF           B8                   0040    mov ax, # 0x40
26465 6BD2           8ED8                         mov ds, ax
26466 6BD4           BB                   0089    mov bx, # 0x89
26467 6BD7           8A07                         mov al, [bx]
26468 6BD9           BB                   0088    mov bx, # 0x88
26469 6BDC           8A27                         mov ah, [bx]
26470 6BDE           80FA                   01    cmp dl, #0x01
26471 6BE1           74           15              je vert_res_350
26472 6BE3           72           1D              jb vert_res_200
26473 6BE5           80FA                   02    cmp dl, #0x02
26474 6BE8           74           02              je vert_res_400
26475 6BEA           EB           2A              jmp set_retcode
26476                       00006BEC            vert_res_400:
26477                                             ; reset modeset ctl bit 7 and set bit 4
26478                                             ; set switches bit 3-0 to 0x09
26479 6BEC           24                     7F    and al, #0x7f
26480 6BEE           0C                     10    or al, #0x10
26481 6BF0           80E4                   F0    and ah, #0xf0
26482 6BF3           80CC                   09    or ah, #0x09
26483 6BF6           75           14              jnz set_vert_res
26484                       00006BF8            vert_res_350:
26485                                             ; reset modeset ctl bit 7 and bit 4
26486                                             ; set switches bit 3-0 to 0x09
26487 6BF8           24                     6F    and al, #0x6f
26488 6BFA           80E4                   F0    and ah, #0xf0
26489 6BFD           80CC                   09    or ah, #0x09
26490 6C00           75           0A              jnz set_vert_res
26491                       00006C02            vert_res_200:
26492                                             ; set modeset ctl bit 7 and reset bit 4
26493                                             ; set switches bit 3-0 to 0x08
26494 6C02           24                     EF    and al, #0xef
26495 6C04           0C                     80    or al, #0x80
26496 6C06           80E4                   F0    and ah, #0xf0
26497 6C09           80CC                   08    or ah, #0x08
26498                       00006C0C            set_vert_res:
26499 6C0C           BB                   0089    mov bx, # 0x89
26500 6C0F           8807                         mov [bx], al
26501 6C11           BB                   0088    mov bx, # 0x88
26502 6C14           8827                         mov [bx], ah
26503                       00006C16            set_retcode:
26504 6C16           B8                   1212    mov ax, #0x1212
26505 6C19           5A                           pop dx
26506 6C1A           5B                           pop bx
26507 6C1B           1F                           pop ds
26508 6C1C           C3                           ret
26509                       00006C1D            biosfn_enable_default_palette_loading:
26510 6C1D           1E                           push ds
26511 6C1E           53                           push bx
26512 6C1F           52                           push dx
26513 6C20           88C2                         mov dl, al
26514 6C22           80E2                   01    and dl, #0x01
26515 6C25           C0E2                   03    shl dl, 3
26516 6C28           B8                   0040    mov ax, # 0x40
26517 6C2B           8ED8                         mov ds, ax
26518 6C2D           BB                   0089    mov bx, # 0x89
26519 6C30           8A07                         mov al, [bx]
26520 6C32           24                     F7    and al, #0xf7
26521 6C34           08D0                         or al, dl
26522 6C36           8807                         mov [bx], al
26523 6C38           B8                   1212    mov ax, #0x1212
26524 6C3B           5A                           pop dx
26525 6C3C           5B                           pop bx
26526 6C3D           1F                           pop ds
26527 6C3E           C3                           ret
26528                       00006C3F            biosfn_enable_video_addressing:
26529 6C3F           53                           push bx
26530 6C40           52                           push dx
26531 6C41           88C3                         mov bl, al
26532 6C43           80E3                   01    and bl, #0x01
26533 6C46           80F3                   01    xor bl, #0x01
26534 6C49           D0E3                         shl bl, 1
26535 6C4B           BA                   03CC    mov dx, # 0x3cc
26536 6C4E           EC                           in al, dx
26537 6C4F           24                     FD    and al, #0xfd
26538 6C51           08D8                         or al, bl
26539 6C53           BA                   03C2    mov dx, # 0x3c2
26540 6C56           EE                           out dx, al
26541 6C57           B8                   1212    mov ax, #0x1212
26542 6C5A           5A                           pop dx
26543 6C5B           5B                           pop bx
26544 6C5C           C3                           ret
26545                       00006C5D            biosfn_enable_grayscale_summing:
26546 6C5D           1E                           push ds
26547 6C5E           53                           push bx
26548 6C5F           52                           push dx
26549 6C60           88C2                         mov dl, al
26550 6C62           80E2                   01    and dl, #0x01
26551 6C65           80F2                   01    xor dl, #0x01
26552 6C68           D0E2                         shl dl, 1
26553 6C6A           B8                   0040    mov ax, # 0x40
26554 6C6D           8ED8                         mov ds, ax
26555 6C6F           BB                   0089    mov bx, # 0x89
26556 6C72           8A07                         mov al, [bx]
26557 6C74           24                     FD    and al, #0xfd
26558 6C76           08D0                         or al, dl
26559 6C78           8807                         mov [bx], al
26560 6C7A           B8                   1212    mov ax, #0x1212
26561 6C7D           5A                           pop dx
26562 6C7E           5B                           pop bx
26563 6C7F           1F                           pop ds
26564 6C80           C3                           ret
26565                       00006C81            biosfn_enable_cursor_emulation:
26566 6C81           1E                           push ds
26567 6C82           53                           push bx
26568 6C83           52                           push dx
26569 6C84           88C2                         mov dl, al
26570 6C86           80E2                   01    and dl, #0x01
26571 6C89           80F2                   01    xor dl, #0x01
26572 6C8C           B8                   0040    mov ax, # 0x40
26573 6C8F           8ED8                         mov ds, ax
26574 6C91           BB                   0089    mov bx, # 0x89
26575 6C94           8A07                         mov al, [bx]
26576 6C96           24                     FE    and al, #0xfe
26577 6C98           08D0                         or al, dl
26578 6C9A           8807                         mov [bx], al
26579 6C9C           B8                   1212    mov ax, #0x1212
26580 6C9F           5A                           pop dx
26581 6CA0           5B                           pop bx
26582 6CA1           1F                           pop ds
26583 6CA2           C3                           ret
26584                                           ! 3781 endasm
26585                                           !BCC_ENDASM
26586                                           ! 3782 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26587                       00006CA3            _biosfn_switch_video_interface:
26588                                           !BCC_EOS
26589                                           !BCC_EOS
26590                                           !BCC_EOS
26591                                           ! 3783 {
26592                                           ! 3784 }
26593 6CA3           C3                         ret
26594                                           ! 3785 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26595                       00006CA4            _biosfn_enable_video_refresh_control:
26596                                           !BCC_EOS
26597                                           ! 3786 {
26598                                           ! 3787 }
26599 6CA4           C3                         ret
26600                                           ! 3788 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26601                                           ! 3789 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26602                       00006CA5            _biosfn_write_string:
26603                                           !BCC_EOS
26604                                           !BCC_EOS
26605                                           !BCC_EOS
26606                                           !BCC_EOS
26607                                           !BCC_EOS
26608                                           !BCC_EOS
26609                                           !BCC_EOS
26610                                           !BCC_EOS
26611                                           ! 3790 {
26612                                           ! 3791  Bit16u newcurs,oldcurs,dummy;
26613                                           !BCC_EOS
26614                                           ! 3792  Bit8u car,carattr;
26615                                           !BCC_EOS
26616                                           ! 3793  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26617 6CA5           55                         push	bp
26618 6CA6           89E5                       mov	bp,sp
26619 6CA8           83C4                   F8  add	sp,*-8
26620                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26621 6CAB           8D5E         FC            lea	bx,-4[bp]
26622 6CAE           53                         push	bx
26623                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26624 6CAF           8D5E         FA            lea	bx,-6[bp]
26625 6CB2           53                         push	bx
26626                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26627 6CB3           8A46         06            mov	al,6[bp]
26628 6CB6           30E4                       xor	ah,ah
26629 6CB8           50                         push	ax
26630                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26631 6CB9           E8         D78D            call	_biosfn_get_cursor_pos
26632 6CBC           83C4                   06  add	sp,*6
26633                                           !BCC_EOS
26634                                           ! 3794  if(row==0xff)
26635                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26636 6CBF           8A46         0C            mov	al,$C[bp]
26637 6CC2           3C                     FF  cmp	al,#$FF
26638 6CC4           75           12            jne 	.23B
26639                       00006CC6            .23C:
26640                                           ! 3795   {col=oldcurs&0x00ff;
26641                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26642 6CC6           8A46         FC            mov	al,-4[bp]
26643                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26644 6CC9           8846         0E            mov	$E[bp],al
26645                                           !BCC_EOS
26646                                           ! 3796    row=(oldcurs&0xff00)>>8;
26647                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26648 6CCC           8B46         FC            mov	ax,-4[bp]
26649 6CCF           30C0                       xor	al,al
26650                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26651 6CD1           88E0                       mov	al,ah
26652 6CD3           30E4                       xor	ah,ah
26653                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26654 6CD5           8846         0C            mov	$C[bp],al
26655                                           !BCC_EOS
26656                                           ! 3797   }
26657                                           ! 3798  newcurs=row; newcurs<<=8; newcurs+=col;
26658                       00006CD8            .23B:
26659                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26660 6CD8           8A46         0C            mov	al,$C[bp]
26661 6CDB           30E4                       xor	ah,ah
26662 6CDD           8946         FE            mov	-2[bp],ax
26663                                           !BCC_EOS
26664                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26665 6CE0           8B46         FE            mov	ax,-2[bp]
26666 6CE3           88C4                       mov	ah,al
26667 6CE5           30C0                       xor	al,al
26668 6CE7           8946         FE            mov	-2[bp],ax
26669                                           !BCC_EOS
26670                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26671 6CEA           8B46         FE            mov	ax,-2[bp]
26672 6CED           0246         0E            add	al,$E[bp]
26673 6CF0           80D4                   00  adc	ah,*0
26674 6CF3           8946         FE            mov	-2[bp],ax
26675                                           !BCC_EOS
26676                                           ! 3799  biosfn_set_cursor_pos(page,newcurs);
26677                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26678 6CF6           FF76         FE            push	-2[bp]
26679                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26680 6CF9           8A46         06            mov	al,6[bp]
26681 6CFC           30E4                       xor	ah,ah
26682 6CFE           50                         push	ax
26683                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26684 6CFF           E8         D647            call	_biosfn_set_cursor_pos
26685 6D02           83C4                   04  add	sp,*4
26686                                           !BCC_EOS
26687                                           ! 3800  while(count--!=0)
26688                                           ! 3801   {
26689 6D05           EB           4F            jmp .23E
26690                       00006D07            .23F:
26691                                           ! 3802    car=read_byte(seg,offset++);
26692                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26693 6D07           8B46         12            mov	ax,$12[bp]
26694 6D0A           40                         inc	ax
26695 6D0B           8946         12            mov	$12[bp],ax
26696                                           ! Debug: list unsigned short = ax-1 (used reg = )
26697 6D0E           48                         dec	ax
26698 6D0F           50                         push	ax
26699                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26700 6D10           FF76         10            push	$10[bp]
26701                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26702 6D13           E8         0ED2            call	_read_byte
26703 6D16           83C4                   04  add	sp,*4
26704                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26705 6D19           8846         F9            mov	-7[bp],al
26706                                           !BCC_EOS
26707                                           ! 3803    if((flag&0x02)!=0)
26708                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26709 6D1C           8A46         04            mov	al,4[bp]
26710 6D1F           24                     02  and	al,*2
26711                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26712 6D21           84C0                       test	al,al
26713 6D23           74           15            je  	.240
26714                       00006D25            .241:
26715                                           ! 3804     attr=read_byte(seg,offset++);
26716                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26717 6D25           8B46         12            mov	ax,$12[bp]
26718 6D28           40                         inc	ax
26719 6D29           8946         12            mov	$12[bp],ax
26720                                           ! Debug: list unsigned short = ax-1 (used reg = )
26721 6D2C           48                         dec	ax
26722 6D2D           50                         push	ax
26723                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26724 6D2E           FF76         10            push	$10[bp]
26725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26726 6D31           E8         0EB4            call	_read_byte
26727 6D34           83C4                   04  add	sp,*4
26728                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26729 6D37           8846         08            mov	8[bp],al
26730                                           !BCC_EOS
26731                                           ! 3805    biosfn_write_teletype(car,page,attr,3);
26732                       00006D3A            .240:
26733                                           ! Debug: list int = const 3 (used reg = )
26734 6D3A           B8                   0003  mov	ax,*3
26735 6D3D           50                         push	ax
26736                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26737 6D3E           8A46         08            mov	al,8[bp]
26738 6D41           30E4                       xor	ah,ah
26739 6D43           50                         push	ax
26740                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26741 6D44           8A46         06            mov	al,6[bp]
26742 6D47           30E4                       xor	ah,ah
26743 6D49           50                         push	ax
26744                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26745 6D4A           8A46         F9            mov	al,-7[bp]
26746 6D4D           30E4                       xor	ah,ah
26747 6D4F           50                         push	ax
26748                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26749 6D50           E8         F13B            call	_biosfn_write_teletype
26750 6D53           83C4                   08  add	sp,*8
26751                                           !BCC_EOS
26752                                           ! 3806   }
26753                                           ! 3807  if((flag&0x01)==0)
26754                       00006D56            .23E:
26755                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26756 6D56           8B46         0A            mov	ax,$A[bp]
26757 6D59           48                         dec	ax
26758 6D5A           8946         0A            mov	$A[bp],ax
26759                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26760 6D5D           3D                   FFFF  cmp	ax,*-1
26761 6D60           75           A5            jne	.23F
26762                       00006D62            .242:
26763                       00006D62            .23D:
26764                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26765 6D62           8A46         04            mov	al,4[bp]
26766 6D65           24                     01  and	al,*1
26767                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26768 6D67           84C0                       test	al,al
26769 6D69           75           0F            jne 	.243
26770                       00006D6B            .244:
26771                                           ! 3808   biosfn_set_cursor_pos(page,oldcurs);
26772                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26773 6D6B           FF76         FC            push	-4[bp]
26774                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26775 6D6E           8A46         06            mov	al,6[bp]
26776 6D71           30E4                       xor	ah,ah
26777 6D73           50                         push	ax
26778                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26779 6D74           E8         D5D2            call	_biosfn_set_cursor_pos
26780 6D77           83C4                   04  add	sp,*4
26781                                           !BCC_EOS
26782                                           ! 3809 }
26783                       00006D7A            .243:
26784 6D7A           89EC                       mov	sp,bp
26785 6D7C           5D                         pop	bp
26786 6D7D           C3                         ret
26787                                           ! 3810 #asm
26788                                           !BCC_ASM
26789                       00000008            _biosfn_write_string.count	set	8
26790                       0000000E            _biosfn_write_string.seg	set	$E
26791                       0000000C            _biosfn_write_string.col	set	$C
26792                       00000002            _biosfn_write_string.flag	set	2
26793                       00000006            _biosfn_write_string.attr	set	6
26794                       00000004            _biosfn_write_string.page	set	4
26795                       0000000A            _biosfn_write_string.row	set	$A
26796                       00000010            _biosfn_write_string.offset	set	$10
26797                       00006D7E            biosfn_group_1A:
26798 6D7E           3C                     00    cmp al, #0x00
26799 6D80           74           05              je biosfn_read_display_code
26800 6D82           3C                     01    cmp al, #0x01
26801 6D84           74           16              je biosfn_set_display_code
26802 6D86           C3                           ret
26803                       00006D87            biosfn_read_display_code:
26804 6D87           1E                           push ds
26805 6D88           50                           push ax
26806 6D89           B8                   0040    mov ax, # 0x40
26807 6D8C           8ED8                         mov ds, ax
26808 6D8E           BB                   008A    mov bx, # 0x8A
26809 6D91           8A07                         mov al, [bx]
26810 6D93           88C3                         mov bl, al
26811 6D95           30FF                         xor bh, bh
26812 6D97           58                           pop ax
26813 6D98           88E0                         mov al, ah
26814 6D9A           1F                           pop ds
26815 6D9B           C3                           ret
26816                       00006D9C            biosfn_set_display_code:
26817 6D9C           1E                           push ds
26818 6D9D           50                           push ax
26819 6D9E           53                           push bx
26820 6D9F           B8                   0040    mov ax, # 0x40
26821 6DA2           8ED8                         mov ds, ax
26822 6DA4           89D8                         mov ax, bx
26823 6DA6           BB                   008A    mov bx, # 0x8A
26824 6DA9           8807                         mov [bx], al
26825 6DAB           5B                           pop bx
26826 6DAC           58                           pop ax
26827 6DAD           88E0                         mov al, ah
26828 6DAF           1F                           pop ds
26829 6DB0           C3                           ret
26830                                           ! 3844 endasm
26831                                           !BCC_ENDASM
26832                                           ! 3845 static void biosfn_read_state_info (BX,ES,DI)
26833                                           ! Register BX used in function biosfn_write_string
26834                                           ! 3846 Bit16u BX;Bit16u ES;Bit16u DI;
26835                       00006DB1            _biosfn_read_state_info:
26836                                           !BCC_EOS
26837                                           !BCC_EOS
26838                                           !BCC_EOS
26839                                           ! 3847 {
26840                                           ! 3848  write_word(ES,DI+0x00,&static_functionality);
26841 6DB1           55                         push	bp
26842 6DB2           89E5                       mov	bp,sp
26843                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26844 6DB4           BB                   0F51  mov	bx,#_static_functionality
26845 6DB7           53                         push	bx
26846                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26847 6DB8           8B46         08            mov	ax,8[bp]
26848                                           ! Debug: list unsigned int = ax+0 (used reg = )
26849 6DBB           50                         push	ax
26850                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26851 6DBC           FF76         06            push	6[bp]
26852                                           ! Debug: func () void = write_word+0 (used reg = )
26853 6DBF           E8         0E64            call	_write_word
26854 6DC2           89EC                       mov	sp,bp
26855                                           !BCC_EOS
26856                                           ! 3849  write_word(ES,DI+0x02,0xC000);
26857                                           ! Debug: list unsigned int = const $C000 (used reg = )
26858 6DC4           B8                   C000  mov	ax,#$C000
26859 6DC7           50                         push	ax
26860                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26861 6DC8           8B46         08            mov	ax,8[bp]
26862                                           ! Debug: list unsigned int = ax+2 (used reg = )
26863 6DCB           40                         inc	ax
26864 6DCC           40                         inc	ax
26865 6DCD           50                         push	ax
26866                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26867 6DCE           FF76         06            push	6[bp]
26868                                           ! Debug: func () void = write_word+0 (used reg = )
26869 6DD1           E8         0E52            call	_write_word
26870 6DD4           89EC                       mov	sp,bp
26871                                           !BCC_EOS
26872                                           ! 3850  memcpyb(ES,DI+0x04,0x40,0x49,30);
26873                                           ! Debug: list int = const $1E (used reg = )
26874 6DD6           B8                   001E  mov	ax,*$1E
26875 6DD9           50                         push	ax
26876                                           ! Debug: list int = const $49 (used reg = )
26877 6DDA           B8                   0049  mov	ax,*$49
26878 6DDD           50                         push	ax
26879                                           ! Debug: list int = const $40 (used reg = )
26880 6DDE           B8                   0040  mov	ax,*$40
26881 6DE1           50                         push	ax
26882                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26883 6DE2           8B46         08            mov	ax,8[bp]
26884                                           ! Debug: list unsigned int = ax+4 (used reg = )
26885 6DE5           05                   0004  add	ax,*4
26886 6DE8           50                         push	ax
26887                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26888 6DE9           FF76         06            push	6[bp]
26889                                           ! Debug: func () void = memcpyb+0 (used reg = )
26890 6DEC           E8         0D99            call	_memcpyb
26891 6DEF           89EC                       mov	sp,bp
26892                                           !BCC_EOS
26893                                           ! 3851  memcpyb(ES,DI+0x22,0x40,0x84,3);
26894                                           ! Debug: list int = const 3 (used reg = )
26895 6DF1           B8                   0003  mov	ax,*3
26896 6DF4           50                         push	ax
26897                                           ! Debug: list int = const $84 (used reg = )
26898 6DF5           B8                   0084  mov	ax,#$84
26899 6DF8           50                         push	ax
26900                                           ! Debug: list int = const $40 (used reg = )
26901 6DF9           B8                   0040  mov	ax,*$40
26902 6DFC           50                         push	ax
26903                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26904 6DFD           8B46         08            mov	ax,8[bp]
26905                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26906 6E00           05                   0022  add	ax,*$22
26907 6E03           50                         push	ax
26908                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26909 6E04           FF76         06            push	6[bp]
26910                                           ! Debug: func () void = memcpyb+0 (used reg = )
26911 6E07           E8         0D7E            call	_memcpyb
26912 6E0A           89EC                       mov	sp,bp
26913                                           !BCC_EOS
26914                                           ! 3852  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26915                                           ! Debug: list int = const $8A (used reg = )
26916 6E0C           B8                   008A  mov	ax,#$8A
26917 6E0F           50                         push	ax
26918                                           ! Debug: list int = const $40 (used reg = )
26919 6E10           B8                   0040  mov	ax,*$40
26920 6E13           50                         push	ax
26921                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26922 6E14           E8         0DD1            call	_read_byte
26923 6E17           89EC                       mov	sp,bp
26924                                           ! Debug: list unsigned char = al+0 (used reg = )
26925 6E19           30E4                       xor	ah,ah
26926 6E1B           50                         push	ax
26927                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26928 6E1C           8B46         08            mov	ax,8[bp]
26929                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26930 6E1F           05                   0025  add	ax,*$25
26931 6E22           50                         push	ax
26932                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26933 6E23           FF76         06            push	6[bp]
26934                                           ! Debug: func () void = write_byte+0 (used reg = )
26935 6E26           E8         0DE5            call	_write_byte
26936 6E29           89EC                       mov	sp,bp
26937                                           !BCC_EOS
26938                                           ! 3853  write_byte(ES,DI+0x26,0);
26939                                           ! Debug: list int = const 0 (used reg = )
26940 6E2B           31C0                       xor	ax,ax
26941 6E2D           50                         push	ax
26942                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26943 6E2E           8B46         08            mov	ax,8[bp]
26944                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26945 6E31           05                   0026  add	ax,*$26
26946 6E34           50                         push	ax
26947                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26948 6E35           FF76         06            push	6[bp]
26949                                           ! Debug: func () void = write_byte+0 (used reg = )
26950 6E38           E8         0DD3            call	_write_byte
26951 6E3B           89EC                       mov	sp,bp
26952                                           !BCC_EOS
26953                                           ! 3854  write_byte(ES,DI+0x27,16);
26954                                           ! Debug: list int = const $10 (used reg = )
26955 6E3D           B8                   0010  mov	ax,*$10
26956 6E40           50                         push	ax
26957                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26958 6E41           8B46         08            mov	ax,8[bp]
26959                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26960 6E44           05                   0027  add	ax,*$27
26961 6E47           50                         push	ax
26962                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26963 6E48           FF76         06            push	6[bp]
26964                                           ! Debug: func () void = write_byte+0 (used reg = )
26965 6E4B           E8         0DC0            call	_write_byte
26966 6E4E           89EC                       mov	sp,bp
26967                                           !BCC_EOS
26968                                           ! 3855  write_byte(ES,DI+0x28,0);
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6E50           31C0                       xor	ax,ax
26971 6E52           50                         push	ax
26972                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26973 6E53           8B46         08            mov	ax,8[bp]
26974                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26975 6E56           05                   0028  add	ax,*$28
26976 6E59           50                         push	ax
26977                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26978 6E5A           FF76         06            push	6[bp]
26979                                           ! Debug: func () void = write_byte+0 (used reg = )
26980 6E5D           E8         0DAE            call	_write_byte
26981 6E60           89EC                       mov	sp,bp
26982                                           !BCC_EOS
26983                                           ! 3856  write_byte(ES,DI+0x29,8);
26984                                           ! Debug: list int = const 8 (used reg = )
26985 6E62           B8                   0008  mov	ax,*8
26986 6E65           50                         push	ax
26987                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26988 6E66           8B46         08            mov	ax,8[bp]
26989                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26990 6E69           05                   0029  add	ax,*$29
26991 6E6C           50                         push	ax
26992                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26993 6E6D           FF76         06            push	6[bp]
26994                                           ! Debug: func () void = write_byte+0 (used reg = )
26995 6E70           E8         0D9B            call	_write_byte
26996 6E73           89EC                       mov	sp,bp
26997                                           !BCC_EOS
26998                                           ! 3857  write_byte(ES,DI+0x2a,2);
26999                                           ! Debug: list int = const 2 (used reg = )
27000 6E75           B8                   0002  mov	ax,*2
27001 6E78           50                         push	ax
27002                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27003 6E79           8B46         08            mov	ax,8[bp]
27004                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27005 6E7C           05                   002A  add	ax,*$2A
27006 6E7F           50                         push	ax
27007                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27008 6E80           FF76         06            push	6[bp]
27009                                           ! Debug: func () void = write_byte+0 (used reg = )
27010 6E83           E8         0D88            call	_write_byte
27011 6E86           89EC                       mov	sp,bp
27012                                           !BCC_EOS
27013                                           ! 3858  write_byte(ES,DI+0x2b,0);
27014                                           ! Debug: list int = const 0 (used reg = )
27015 6E88           31C0                       xor	ax,ax
27016 6E8A           50                         push	ax
27017                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27018 6E8B           8B46         08            mov	ax,8[bp]
27019                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27020 6E8E           05                   002B  add	ax,*$2B
27021 6E91           50                         push	ax
27022                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27023 6E92           FF76         06            push	6[bp]
27024                                           ! Debug: func () void = write_byte+0 (used reg = )
27025 6E95           E8         0D76            call	_write_byte
27026 6E98           89EC                       mov	sp,bp
27027                                           !BCC_EOS
27028                                           ! 3859  write_byte(ES,DI+0x2c,0);
27029                                           ! Debug: list int = const 0 (used reg = )
27030 6E9A           31C0                       xor	ax,ax
27031 6E9C           50                         push	ax
27032                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27033 6E9D           8B46         08            mov	ax,8[bp]
27034                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27035 6EA0           05                   002C  add	ax,*$2C
27036 6EA3           50                         push	ax
27037                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27038 6EA4           FF76         06            push	6[bp]
27039                                           ! Debug: func () void = write_byte+0 (used reg = )
27040 6EA7           E8         0D64            call	_write_byte
27041 6EAA           89EC                       mov	sp,bp
27042                                           !BCC_EOS
27043                                           ! 3860  write_byte(ES,DI+0x31,3);
27044                                           ! Debug: list int = const 3 (used reg = )
27045 6EAC           B8                   0003  mov	ax,*3
27046 6EAF           50                         push	ax
27047                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27048 6EB0           8B46         08            mov	ax,8[bp]
27049                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27050 6EB3           05                   0031  add	ax,*$31
27051 6EB6           50                         push	ax
27052                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27053 6EB7           FF76         06            push	6[bp]
27054                                           ! Debug: func () void = write_byte+0 (used reg = )
27055 6EBA           E8         0D51            call	_write_byte
27056 6EBD           89EC                       mov	sp,bp
27057                                           !BCC_EOS
27058                                           ! 3861  write_byte(ES,DI+0x32,0);
27059                                           ! Debug: list int = const 0 (used reg = )
27060 6EBF           31C0                       xor	ax,ax
27061 6EC1           50                         push	ax
27062                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27063 6EC2           8B46         08            mov	ax,8[bp]
27064                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27065 6EC5           05                   0032  add	ax,*$32
27066 6EC8           50                         push	ax
27067                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27068 6EC9           FF76         06            push	6[bp]
27069                                           ! Debug: func () void = write_byte+0 (used reg = )
27070 6ECC           E8         0D3F            call	_write_byte
27071 6ECF           89EC                       mov	sp,bp
27072                                           !BCC_EOS
27073                                           ! 3862  memsetb(ES,DI+0x33,0,13);
27074                                           ! Debug: list int = const $D (used reg = )
27075 6ED1           B8                   000D  mov	ax,*$D
27076 6ED4           50                         push	ax
27077                                           ! Debug: list int = const 0 (used reg = )
27078 6ED5           31C0                       xor	ax,ax
27079 6ED7           50                         push	ax
27080                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27081 6ED8           8B46         08            mov	ax,8[bp]
27082                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27083 6EDB           05                   0033  add	ax,*$33
27084 6EDE           50                         push	ax
27085                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27086 6EDF           FF76         06            push	6[bp]
27087                                           ! Debug: func () void = memsetb+0 (used reg = )
27088 6EE2           E8         0C59            call	_memsetb
27089 6EE5           89EC                       mov	sp,bp
27090                                           !BCC_EOS
27091                                           ! 3863 }
27092 6EE7           5D                         pop	bp
27093 6EE8           C3                         ret
27094                                           ! 3864 static Bit16u biosfn_read_video_state_size2 (CX)
27095                                           ! Register BX used in function biosfn_read_state_info
27096                                           ! 3865      Bit16u CX;
27097                       00006EE9            _biosfn_read_video_state_size2:
27098                                           !BCC_EOS
27099                                           ! 3866 {
27100                                           ! 3867     Bit16u size;
27101                                           !BCC_EOS
27102                                           ! 3868     size = 0;
27103 6EE9           55                         push	bp
27104 6EEA           89E5                       mov	bp,sp
27105 6EEC           4C                         dec	sp
27106 6EED           4C                         dec	sp
27107                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27108 6EEE           31C0                       xor	ax,ax
27109 6EF0           8946         FE            mov	-2[bp],ax
27110                                           !BCC_EOS
27111                                           ! 3869     if (CX & 1) {
27112                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27113 6EF3           8A46         04            mov	al,4[bp]
27114 6EF6           24                     01  and	al,*1
27115 6EF8           84C0                       test	al,al
27116 6EFA           74           09            je  	.245
27117                       00006EFC            .246:
27118                                           ! 3870         size += 0x46;
27119                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27120 6EFC           8B46         FE            mov	ax,-2[bp]
27121 6EFF           05                   0046  add	ax,*$46
27122 6F02           8946         FE            mov	-2[bp],ax
27123                                           !BCC_EOS
27124                                           ! 3871     }
27125                                           ! 3872     if (CX & 2) {
27126                       00006F05            .245:
27127                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27128 6F05           8A46         04            mov	al,4[bp]
27129 6F08           24                     02  and	al,*2
27130 6F0A           84C0                       test	al,al
27131 6F0C           74           09            je  	.247
27132                       00006F0E            .248:
27133                                           ! 3873         size += (5 + 8 + 5) * 2 + 6;
27134                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27135 6F0E           8B46         FE            mov	ax,-2[bp]
27136 6F11           05                   002A  add	ax,*$2A
27137 6F14           8946         FE            mov	-2[bp],ax
27138                                           !BCC_EOS
27139                                           ! 3874     }
27140                                           ! 3875     if (CX & 4) {
27141                       00006F17            .247:
27142                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27143 6F17           8A46         04            mov	al,4[bp]
27144 6F1A           24                     04  and	al,*4
27145 6F1C           84C0                       test	al,al
27146 6F1E           74           09            je  	.249
27147                       00006F20            .24A:
27148                                           ! 3876         size += 3 + 256 * 3 + 1;
27149                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27150 6F20           8B46         FE            mov	ax,-2[bp]
27151 6F23           05                   0304  add	ax,#$304
27152 6F26           8946         FE            mov	-2[bp],ax
27153                                           !BCC_EOS
27154                                           ! 3877 }
27155                                           ! 3878     return size;
27156                       00006F29            .249:
27157 6F29           8B46         FE            mov	ax,-2[bp]
27158 6F2C           89EC                       mov	sp,bp
27159 6F2E           5D                         pop	bp
27160 6F2F           C3                         ret
27161                                           !BCC_EOS
27162                                           ! 3879 }
27163                                           ! 3880 static void biosfn_read_video_state_size (CX, BX)
27164                                           ! 3881      Bit16u CX; Bit16u *BX;
27165                       00006F30            _biosfn_read_video_state_size:
27166                                           !BCC_EOS
27167                                           !BCC_EOS
27168                                           ! 3882 {
27169                                           ! 3883     Bit16u ss=get_SS();
27170 6F30           55                         push	bp
27171 6F31           89E5                       mov	bp,sp
27172 6F33           4C                         dec	sp
27173 6F34           4C                         dec	sp
27174                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27175 6F35           E8         0D3C            call	_get_SS
27176                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27177 6F38           8946         FE            mov	-2[bp],ax
27178                                           !BCC_EOS
27179                                           ! 3884     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27180                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27181 6F3B           FF76         04            push	4[bp]
27182                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27183 6F3E           E8         FFA8            call	_biosfn_read_video_state_size2
27184 6F41           44                         inc	sp
27185 6F42           44                         inc	sp
27186                                           ! Debug: list unsigned short = ax+0 (used reg = )
27187 6F43           50                         push	ax
27188                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27189 6F44           FF76         06            push	6[bp]
27190                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27191 6F47           FF76         FE            push	-2[bp]
27192                                           ! Debug: func () void = write_word+0 (used reg = )
27193 6F4A           E8         0CD9            call	_write_word
27194 6F4D           83C4                   06  add	sp,*6
27195                                           !BCC_EOS
27196                                           ! 3885 }
27197 6F50           89EC                       mov	sp,bp
27198 6F52           5D                         pop	bp
27199 6F53           C3                         ret
27200                                           ! 3886 static Bit16u biosfn_save_video_state (CX,ES,BX)
27201                                           ! 3887      Bit16u CX;Bit16u ES;Bit16u BX;
27202                       00006F54            _biosfn_save_video_state:
27203                                           !BCC_EOS
27204                                           !BCC_EOS
27205                                           !BCC_EOS
27206                                           ! 3888 {
27207                                           ! 3889     Bit16u i, v, crtc_addr, ar_index;
27208                                           !BCC_EOS
27209                                           ! 3890     crtc_addr = read_word(0x40, 0x63);
27210 6F54           55                         push	bp
27211 6F55           89E5                       mov	bp,sp
27212 6F57           83C4                   F8  add	sp,*-8
27213                                           ! Debug: list int = const $63 (used reg = )
27214 6F5A           B8                   0063  mov	ax,*$63
27215 6F5D           50                         push	ax
27216                                           ! Debug: list int = const $40 (used reg = )
27217 6F5E           B8                   0040  mov	ax,*$40
27218 6F61           50                         push	ax
27219                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27220 6F62           E8         0C96            call	_read_word
27221 6F65           83C4                   04  add	sp,*4
27222                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27223 6F68           8946         FA            mov	-6[bp],ax
27224                                           !BCC_EOS
27225                                           ! 3891     if (CX & 1) {
27226                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27227 6F6B           8A46         04            mov	al,4[bp]
27228 6F6E           24                     01  and	al,*1
27229 6F70           84C0                       test	al,al
27230 6F72         0F84         0266            beq 	.24B
27231                       00006F76            .24C:
27232                                           ! 3892         write_byte(ES, BX, inb(0x3c4)); BX++;
27233                                           ! Debug: list int = const $3C4 (used reg = )
27234 6F76           B8                   03C4  mov	ax,#$3C4
27235 6F79           50                         push	ax
27236                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27237 6F7A           E8         0CC1            call	_inb
27238 6F7D           44                         inc	sp
27239 6F7E           44                         inc	sp
27240                                           ! Debug: list unsigned char = al+0 (used reg = )
27241 6F7F           30E4                       xor	ah,ah
27242 6F81           50                         push	ax
27243                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27244 6F82           FF76         08            push	8[bp]
27245                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27246 6F85           FF76         06            push	6[bp]
27247                                           ! Debug: func () void = write_byte+0 (used reg = )
27248 6F88           E8         0C83            call	_write_byte
27249 6F8B           83C4                   06  add	sp,*6
27250                                           !BCC_EOS
27251                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27252 6F8E           8B46         08            mov	ax,8[bp]
27253 6F91           40                         inc	ax
27254 6F92           8946         08            mov	8[bp],ax
27255                                           !BCC_EOS
27256                                           ! 3893         write_byte(ES, BX, inb(crtc_addr)); BX++;
27257                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27258 6F95           FF76         FA            push	-6[bp]
27259                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27260 6F98           E8         0CA3            call	_inb
27261 6F9B           44                         inc	sp
27262 6F9C           44                         inc	sp
27263                                           ! Debug: list unsigned char = al+0 (used reg = )
27264 6F9D           30E4                       xor	ah,ah
27265 6F9F           50                         push	ax
27266                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27267 6FA0           FF76         08            push	8[bp]
27268                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27269 6FA3           FF76         06            push	6[bp]
27270                                           ! Debug: func () void = write_byte+0 (used reg = )
27271 6FA6           E8         0C65            call	_write_byte
27272 6FA9           83C4                   06  add	sp,*6
27273                                           !BCC_EOS
27274                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27275 6FAC           8B46         08            mov	ax,8[bp]
27276 6FAF           40                         inc	ax
27277 6FB0           8946         08            mov	8[bp],ax
27278                                           !BCC_EOS
27279                                           ! 3894         write_byte(ES, BX, inb(0x3ce)); BX++;
27280                                           ! Debug: list int = const $3CE (used reg = )
27281 6FB3           B8                   03CE  mov	ax,#$3CE
27282 6FB6           50                         push	ax
27283                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27284 6FB7           E8         0C84            call	_inb
27285 6FBA           44                         inc	sp
27286 6FBB           44                         inc	sp
27287                                           ! Debug: list unsigned char = al+0 (used reg = )
27288 6FBC           30E4                       xor	ah,ah
27289 6FBE           50                         push	ax
27290                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27291 6FBF           FF76         08            push	8[bp]
27292                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27293 6FC2           FF76         06            push	6[bp]
27294                                           ! Debug: func () void = write_byte+0 (used reg = )
27295 6FC5           E8         0C46            call	_write_byte
27296 6FC8           83C4                   06  add	sp,*6
27297                                           !BCC_EOS
27298                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27299 6FCB           8B46         08            mov	ax,8[bp]
27300 6FCE           40                         inc	ax
27301 6FCF           8946         08            mov	8[bp],ax
27302                                           !BCC_EOS
27303                                           ! 3895         inb(0x3da);
27304                                           ! Debug: list int = const $3DA (used reg = )
27305 6FD2           B8                   03DA  mov	ax,#$3DA
27306 6FD5           50                         push	ax
27307                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27308 6FD6           E8         0C65            call	_inb
27309 6FD9           44                         inc	sp
27310 6FDA           44                         inc	sp
27311                                           !BCC_EOS
27312                                           ! 3896         ar_index = inb(0x3c0);
27313                                           ! Debug: list int = const $3C0 (used reg = )
27314 6FDB           B8                   03C0  mov	ax,#$3C0
27315 6FDE           50                         push	ax
27316                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27317 6FDF           E8         0C5C            call	_inb
27318 6FE2           44                         inc	sp
27319 6FE3           44                         inc	sp
27320                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27321 6FE4           30E4                       xor	ah,ah
27322 6FE6           8946         F8            mov	-8[bp],ax
27323                                           !BCC_EOS
27324                                           ! 3897         write_byte(ES, BX, ar_index); BX++;
27325                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27326 6FE9           FF76         F8            push	-8[bp]
27327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27328 6FEC           FF76         08            push	8[bp]
27329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27330 6FEF           FF76         06            push	6[bp]
27331                                           ! Debug: func () void = write_byte+0 (used reg = )
27332 6FF2           E8         0C19            call	_write_byte
27333 6FF5           83C4                   06  add	sp,*6
27334                                           !BCC_EOS
27335                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27336 6FF8           8B46         08            mov	ax,8[bp]
27337 6FFB           40                         inc	ax
27338 6FFC           8946         08            mov	8[bp],ax
27339                                           !BCC_EOS
27340                                           ! 3898         write_byte(ES, BX, inb(0x3ca)); BX++;
27341                                           ! Debug: list int = const $3CA (used reg = )
27342 6FFF           B8                   03CA  mov	ax,#$3CA
27343 7002           50                         push	ax
27344                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27345 7003           E8         0C38            call	_inb
27346 7006           44                         inc	sp
27347 7007           44                         inc	sp
27348                                           ! Debug: list unsigned char = al+0 (used reg = )
27349 7008           30E4                       xor	ah,ah
27350 700A           50                         push	ax
27351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27352 700B           FF76         08            push	8[bp]
27353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27354 700E           FF76         06            push	6[bp]
27355                                           ! Debug: func () void = write_byte+0 (used reg = )
27356 7011           E8         0BFA            call	_write_byte
27357 7014           83C4                   06  add	sp,*6
27358                                           !BCC_EOS
27359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27360 7017           8B46         08            mov	ax,8[bp]
27361 701A           40                         inc	ax
27362 701B           8946         08            mov	8[bp],ax
27363                                           !BCC_EOS
27364                                           ! 3899         for(i=1;i<=4;i++){
27365                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27366 701E           B8                   0001  mov	ax,*1
27367 7021           8946         FE            mov	-2[bp],ax
27368                                           !BCC_EOS
27369                                           !BCC_EOS
27370 7024           EB           33            jmp .24F
27371                       00007026            .250:
27372                                           ! 3900             outb(0x3c4, i);
27373                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27374 7026           FF76         FE            push	-2[bp]
27375                                           ! Debug: list int = const $3C4 (used reg = )
27376 7029           B8                   03C4  mov	ax,#$3C4
27377 702C           50                         push	ax
27378                                           ! Debug: func () void = outb+0 (used reg = )
27379 702D           E8         0C24            call	_outb
27380 7030           83C4                   04  add	sp,*4
27381                                           !BCC_EOS
27382                                           ! 3901             write_byte(ES, BX, inb(0x3c5)); BX++;
27383                                           ! Debug: list int = const $3C5 (used reg = )
27384 7033           B8                   03C5  mov	ax,#$3C5
27385 7036           50                         push	ax
27386                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27387 7037           E8         0C04            call	_inb
27388 703A           44                         inc	sp
27389 703B           44                         inc	sp
27390                                           ! Debug: list unsigned char = al+0 (used reg = )
27391 703C           30E4                       xor	ah,ah
27392 703E           50                         push	ax
27393                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27394 703F           FF76         08            push	8[bp]
27395                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27396 7042           FF76         06            push	6[bp]
27397                                           ! Debug: func () void = write_byte+0 (used reg = )
27398 7045           E8         0BC6            call	_write_byte
27399 7048           83C4                   06  add	sp,*6
27400                                           !BCC_EOS
27401                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27402 704B           8B46         08            mov	ax,8[bp]
27403 704E           40                         inc	ax
27404 704F           8946         08            mov	8[bp],ax
27405                                           !BCC_EOS
27406                                           ! 3902         }
27407                                           ! 3903         outb(0x3c4, 0);
27408                       00007052            .24E:
27409                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27410 7052           8B46         FE            mov	ax,-2[bp]
27411 7055           40                         inc	ax
27412 7056           8946         FE            mov	-2[bp],ax
27413                       00007059            .24F:
27414                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27415 7059           8B46         FE            mov	ax,-2[bp]
27416 705C           3D                   0004  cmp	ax,*4
27417 705F           76           C5            jbe	.250
27418                       00007061            .251:
27419                       00007061            .24D:
27420                                           ! Debug: list int = const 0 (used reg = )
27421 7061           31C0                       xor	ax,ax
27422 7063           50                         push	ax
27423                                           ! Debug: list int = const $3C4 (used reg = )
27424 7064           B8                   03C4  mov	ax,#$3C4
27425 7067           50                         push	ax
27426                                           ! Debug: func () void = outb+0 (used reg = )
27427 7068           E8         0BE9            call	_outb
27428 706B           83C4                   04  add	sp,*4
27429                                           !BCC_EOS
27430                                           ! 3904         write_byte(ES, BX, inb(0x3c
27431                                           ! 3904 5)); BX++;
27432                                           ! Debug: list int = const $3C5 (used reg = )
27433 706E           B8                   03C5  mov	ax,#$3C5
27434 7071           50                         push	ax
27435                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27436 7072           E8         0BC9            call	_inb
27437 7075           44                         inc	sp
27438 7076           44                         inc	sp
27439                                           ! Debug: list unsigned char = al+0 (used reg = )
27440 7077           30E4                       xor	ah,ah
27441 7079           50                         push	ax
27442                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27443 707A           FF76         08            push	8[bp]
27444                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27445 707D           FF76         06            push	6[bp]
27446                                           ! Debug: func () void = write_byte+0 (used reg = )
27447 7080           E8         0B8B            call	_write_byte
27448 7083           83C4                   06  add	sp,*6
27449                                           !BCC_EOS
27450                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27451 7086           8B46         08            mov	ax,8[bp]
27452 7089           40                         inc	ax
27453 708A           8946         08            mov	8[bp],ax
27454                                           !BCC_EOS
27455                                           ! 3905         for(i=0;i<=0x18;i++) {
27456                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27457 708D           31C0                       xor	ax,ax
27458 708F           8946         FE            mov	-2[bp],ax
27459                                           !BCC_EOS
27460                                           !BCC_EOS
27461 7092           EB           33            jmp .254
27462                       00007094            .255:
27463                                           ! 3906             outb(crtc_addr,i);
27464                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27465 7094           FF76         FE            push	-2[bp]
27466                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27467 7097           FF76         FA            push	-6[bp]
27468                                           ! Debug: func () void = outb+0 (used reg = )
27469 709A           E8         0BB7            call	_outb
27470 709D           83C4                   04  add	sp,*4
27471                                           !BCC_EOS
27472                                           ! 3907             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27473                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27474 70A0           8B46         FA            mov	ax,-6[bp]
27475                                           ! Debug: list unsigned int = ax+1 (used reg = )
27476 70A3           40                         inc	ax
27477 70A4           50                         push	ax
27478                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27479 70A5           E8         0B96            call	_inb
27480 70A8           44                         inc	sp
27481 70A9           44                         inc	sp
27482                                           ! Debug: list unsigned char = al+0 (used reg = )
27483 70AA           30E4                       xor	ah,ah
27484 70AC           50                         push	ax
27485                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27486 70AD           FF76         08            push	8[bp]
27487                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27488 70B0           FF76         06            push	6[bp]
27489                                           ! Debug: func () void = write_byte+0 (used reg = )
27490 70B3           E8         0B58            call	_write_byte
27491 70B6           83C4                   06  add	sp,*6
27492                                           !BCC_EOS
27493                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27494 70B9           8B46         08            mov	ax,8[bp]
27495 70BC           40                         inc	ax
27496 70BD           8946         08            mov	8[bp],ax
27497                                           !BCC_EOS
27498                                           ! 3908         }
27499                                           ! 3909         for(i=0;i<=0x13;i++) {
27500                       000070C0            .253:
27501                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27502 70C0           8B46         FE            mov	ax,-2[bp]
27503 70C3           40                         inc	ax
27504 70C4           8946         FE            mov	-2[bp],ax
27505                       000070C7            .254:
27506                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27507 70C7           8B46         FE            mov	ax,-2[bp]
27508 70CA           3D                   0018  cmp	ax,*$18
27509 70CD           76           C5            jbe	.255
27510                       000070CF            .256:
27511                       000070CF            .252:
27512                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27513 70CF           31C0                       xor	ax,ax
27514 70D1           8946         FE            mov	-2[bp],ax
27515                                           !BCC_EOS
27516                                           !BCC_EOS
27517 70D4           EB           44            jmp .259
27518                       000070D6            .25A:
27519                                           ! 3910             inb(0x3da);
27520                                           ! Debug: list int = const $3DA (used reg = )
27521 70D6           B8                   03DA  mov	ax,#$3DA
27522 70D9           50                         push	ax
27523                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27524 70DA           E8         0B61            call	_inb
27525 70DD           44                         inc	sp
27526 70DE           44                         inc	sp
27527                                           !BCC_EOS
27528                                           ! 3911             outb(0x3c0, i | (ar_index & 0x20));
27529                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27530 70DF           8A46         F8            mov	al,-8[bp]
27531 70E2           24                     20  and	al,*$20
27532                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27533                                           ! Debug: expression subtree swapping
27534 70E4           30E4                       xor	ah,ah
27535 70E6           0B46         FE            or	ax,-2[bp]
27536                                           ! Debug: list unsigned int = ax+0 (used reg = )
27537 70E9           50                         push	ax
27538                                           ! Debug: list int = const $3C0 (used reg = )
27539 70EA           B8                   03C0  mov	ax,#$3C0
27540 70ED           50                         push	ax
27541                                           ! Debug: func () void = outb+0 (used reg = )
27542 70EE           E8         0B63            call	_outb
27543 70F1           83C4                   04  add	sp,*4
27544                                           !BCC_EOS
27545                                           ! 3912             write_byte(ES, BX, inb(0x3c1)); BX++;
27546                                           ! Debug: list int = const $3C1 (used reg = )
27547 70F4           B8                   03C1  mov	ax,#$3C1
27548 70F7           50                         push	ax
27549                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27550 70F8           E8         0B43            call	_inb
27551 70FB           44                         inc	sp
27552 70FC           44                         inc	sp
27553                                           ! Debug: list unsigned char = al+0 (used reg = )
27554 70FD           30E4                       xor	ah,ah
27555 70FF           50                         push	ax
27556                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27557 7100           FF76         08            push	8[bp]
27558                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27559 7103           FF76         06            push	6[bp]
27560                                           ! Debug: func () void = write_byte+0 (used reg = )
27561 7106           E8         0B05            call	_write_byte
27562 7109           83C4                   06  add	sp,*6
27563                                           !BCC_EOS
27564                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27565 710C           8B46         08            mov	ax,8[bp]
27566 710F           40                         inc	ax
27567 7110           8946         08            mov	8[bp],ax
27568                                           !BCC_EOS
27569                                           ! 3913         }
27570                                           ! 3914         inb(0x3da);
27571                       00007113            .258:
27572                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27573 7113           8B46         FE            mov	ax,-2[bp]
27574 7116           40                         inc	ax
27575 7117           8946         FE            mov	-2[bp],ax
27576                       0000711A            .259:
27577                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27578 711A           8B46         FE            mov	ax,-2[bp]
27579 711D           3D                   0013  cmp	ax,*$13
27580 7120           76           B4            jbe	.25A
27581                       00007122            .25B:
27582                       00007122            .257:
27583                                           ! Debug: list int = const $3DA (used reg = )
27584 7122           B8                   03DA  mov	ax,#$3DA
27585 7125           50                         push	ax
27586                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27587 7126           E8         0B15            call	_inb
27588 7129           44                         inc	sp
27589 712A           44                         inc	sp
27590                                           !BCC_EOS
27591                                           ! 3915         for(i=0;i<=8;i++) {
27592                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27593 712B           31C0                       xor	ax,ax
27594 712D           8946         FE            mov	-2[bp],ax
27595                                           !BCC_EOS
27596                                           !BCC_EOS
27597 7130           EB           33            jmp .25E
27598                       00007132            .25F:
27599                                           ! 3916             outb(0x3ce,i);
27600                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27601 7132           FF76         FE            push	-2[bp]
27602                                           ! Debug: list int = const $3CE (used reg = )
27603 7135           B8                   03CE  mov	ax,#$3CE
27604 7138           50                         push	ax
27605                                           ! Debug: func () void = outb+0 (used reg = )
27606 7139           E8         0B18            call	_outb
27607 713C           83C4                   04  add	sp,*4
27608                                           !BCC_EOS
27609                                           ! 3917             write_byte(ES, BX, inb(0x3cf)); BX++;
27610                                           ! Debug: list int = const $3CF (used reg = )
27611 713F           B8                   03CF  mov	ax,#$3CF
27612 7142           50                         push	ax
27613                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27614 7143           E8         0AF8            call	_inb
27615 7146           44                         inc	sp
27616 7147           44                         inc	sp
27617                                           ! Debug: list unsigned char = al+0 (used reg = )
27618 7148           30E4                       xor	ah,ah
27619 714A           50                         push	ax
27620                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27621 714B           FF76         08            push	8[bp]
27622                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27623 714E           FF76         06            push	6[bp]
27624                                           ! Debug: func () void = write_byte+0 (used reg = )
27625 7151           E8         0ABA            call	_write_byte
27626 7154           83C4                   06  add	sp,*6
27627                                           !BCC_EOS
27628                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27629 7157           8B46         08            mov	ax,8[bp]
27630 715A           40                         inc	ax
27631 715B           8946         08            mov	8[bp],ax
27632                                           !BCC_EOS
27633                                           ! 3918         }
27634                                           ! 3919         write_word(ES, BX, crtc_addr); BX+= 2;
27635                       0000715E            .25D:
27636                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27637 715E           8B46         FE            mov	ax,-2[bp]
27638 7161           40                         inc	ax
27639 7162           8946         FE            mov	-2[bp],ax
27640                       00007165            .25E:
27641                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27642 7165           8B46         FE            mov	ax,-2[bp]
27643 7168           3D                   0008  cmp	ax,*8
27644 716B           76           C5            jbe	.25F
27645                       0000716D            .260:
27646                       0000716D            .25C:
27647                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27648 716D           FF76         FA            push	-6[bp]
27649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27650 7170           FF76         08            push	8[bp]
27651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27652 7173           FF76         06            push	6[bp]
27653                                           ! Debug: func () void = write_word+0 (used reg = )
27654 7176           E8         0AAD            call	_write_word
27655 7179           83C4                   06  add	sp,*6
27656                                           !BCC_EOS
27657                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27658 717C           8B46         08            mov	ax,8[bp]
27659 717F           40                         inc	ax
27660 7180           40                         inc	ax
27661 7181           8946         08            mov	8[bp],ax
27662                                           !BCC_EOS
27663                                           ! 3920         write_byte(ES, BX, 0); BX++;
27664                                           ! Debug: list int = const 0 (used reg = )
27665 7184           31C0                       xor	ax,ax
27666 7186           50                         push	ax
27667                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27668 7187           FF76         08            push	8[bp]
27669                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27670 718A           FF76         06            push	6[bp]
27671                                           ! Debug: func () void = write_byte+0 (used reg = )
27672 718D           E8         0A7E            call	_write_byte
27673 7190           83C4                   06  add	sp,*6
27674                                           !BCC_EOS
27675                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27676 7193           8B46         08            mov	ax,8[bp]
27677 7196           40                         inc	ax
27678 7197           8946         08            mov	8[bp],ax
27679                                           !BCC_EOS
27680                                           ! 3921         write_byte(ES, BX, 0); BX++;
27681                                           ! Debug: list int = const 0 (used reg = )
27682 719A           31C0                       xor	ax,ax
27683 719C           50                         push	ax
27684                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27685 719D           FF76         08            push	8[bp]
27686                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27687 71A0           FF76         06            push	6[bp]
27688                                           ! Debug: func () void = write_byte+0 (used reg = )
27689 71A3           E8         0A68            call	_write_byte
27690 71A6           83C4                   06  add	sp,*6
27691                                           !BCC_EOS
27692                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27693 71A9           8B46         08            mov	ax,8[bp]
27694 71AC           40                         inc	ax
27695 71AD           8946         08            mov	8[bp],ax
27696                                           !BCC_EOS
27697                                           ! 3922         write_byte(ES, BX, 0); BX++;
27698                                           ! Debug: list int = const 0 (used reg = )
27699 71B0           31C0                       xor	ax,ax
27700 71B2           50                         push	ax
27701                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27702 71B3           FF76         08            push	8[bp]
27703                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27704 71B6           FF76         06            push	6[bp]
27705                                           ! Debug: func () void = write_byte+0 (used reg = )
27706 71B9           E8         0A52            call	_write_byte
27707 71BC           83C4                   06  add	sp,*6
27708                                           !BCC_EOS
27709                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27710 71BF           8B46         08            mov	ax,8[bp]
27711 71C2           40                         inc	ax
27712 71C3           8946         08            mov	8[bp],ax
27713                                           !BCC_EOS
27714                                           ! 3923         write_byte(ES, BX, 0); BX++;
27715                                           ! Debug: list int = const 0 (used reg = )
27716 71C6           31C0                       xor	ax,ax
27717 71C8           50                         push	ax
27718                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27719 71C9           FF76         08            push	8[bp]
27720                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27721 71CC           FF76         06            push	6[bp]
27722                                           ! Debug: func () void = write_byte+0 (used reg = )
27723 71CF           E8         0A3C            call	_write_byte
27724 71D2           83C4                   06  add	sp,*6
27725                                           !BCC_EOS
27726                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27727 71D5           8B46         08            mov	ax,8[bp]
27728 71D8           40                         inc	ax
27729 71D9           8946         08            mov	8[bp],ax
27730                                           !BCC_EOS
27731                                           ! 3924     }
27732                                           ! 3925     if (CX & 2) {
27733                       000071DC            .24B:
27734                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27735 71DC           8A46         04            mov	al,4[bp]
27736 71DF           24                     02  and	al,*2
27737 71E1           84C0                       test	al,al
27738 71E3         0F84         0270            beq 	.261
27739                       000071E7            .262:
27740                                           ! 3926         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27741                                           ! Debug: list int = const $49 (used reg = )
27742 71E7           B8                   0049  mov	ax,*$49
27743 71EA           50                         push	ax
27744                                           ! Debug: list int = const $40 (used reg = )
27745 71EB           B8                   0040  mov	ax,*$40
27746 71EE           50                         push	ax
27747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27748 71EF           E8         09F6            call	_read_byte
27749 71F2           83C4                   04  add	sp,*4
27750                                           ! Debug: list unsigned char = al+0 (used reg = )
27751 71F5           30E4                       xor	ah,ah
27752 71F7           50                         push	ax
27753                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27754 71F8           FF76         08            push	8[bp]
27755                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27756 71FB           FF76         06            push	6[bp]
27757                                           ! Debug: func () void = write_byte+0 (used reg = )
27758 71FE           E8         0A0D            call	_write_byte
27759 7201           83C4                   06  add	sp,*6
27760                                           !BCC_EOS
27761                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27762 7204           8B46         08            mov	ax,8[bp]
27763 7207           40                         inc	ax
27764 7208           8946         08            mov	8[bp],ax
27765                                           !BCC_EOS
27766                                           ! 3927         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27767                                           ! Debug: list int = const $4A (used reg = )
27768 720B           B8                   004A  mov	ax,*$4A
27769 720E           50                         push	ax
27770                                           ! Debug: list int = const $40 (used reg = )
27771 720F           B8                   0040  mov	ax,*$40
27772 7212           50                         push	ax
27773                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27774 7213           E8         09E5            call	_read_word
27775 7216           83C4                   04  add	sp,*4
27776                                           ! Debug: list unsigned short = ax+0 (used reg = )
27777 7219           50                         push	ax
27778                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27779 721A           FF76         08            push	8[bp]
27780                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27781 721D           FF76         06            push	6[bp]
27782                                           ! Debug: func () void = write_word+0 (used reg = )
27783 7220           E8         0A03            call	_write_word
27784 7223           83C4                   06  add	sp,*6
27785                                           !BCC_EOS
27786                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27787 7226           8B46         08            mov	ax,8[bp]
27788 7229           40                         inc	ax
27789 722A           40                         inc	ax
27790 722B           8946         08            mov	8[bp],ax
27791                                           !BCC_EOS
27792                                           ! 3928         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27793                                           ! Debug: list int = const $4C (used reg = )
27794 722E           B8                   004C  mov	ax,*$4C
27795 7231           50                         push	ax
27796                                           ! Debug: list int = const $40 (used reg = )
27797 7232           B8                   0040  mov	ax,*$40
27798 7235           50                         push	ax
27799                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27800 7236           E8         09C2            call	_read_word
27801 7239           83C4                   04  add	sp,*4
27802                                           ! Debug: list unsigned short = ax+0 (used reg = )
27803 723C           50                         push	ax
27804                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27805 723D           FF76         08            push	8[bp]
27806                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27807 7240           FF76         06            push	6[bp]
27808                                           ! Debug: func () void = write_word+0 (used reg = )
27809 7243           E8         09E0            call	_write_word
27810 7246           83C4                   06  add	sp,*6
27811                                           !BCC_EOS
27812                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27813 7249           8B46         08            mov	ax,8[bp]
27814 724C           40                         inc	ax
27815 724D           40                         inc	ax
27816 724E           8946         08            mov	8[bp],ax
27817                                           !BCC_EOS
27818                                           ! 3929         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27819                                           ! Debug: list int = const $63 (used reg = )
27820 7251           B8                   0063  mov	ax,*$63
27821 7254           50                         push	ax
27822                                           ! Debug: list int = const $40 (used reg = )
27823 7255           B8                   0040  mov	ax,*$40
27824 7258           50                         push	ax
27825                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27826 7259           E8         099F            call	_read_word
27827 725C           83C4                   04  add	sp,*4
27828                                           ! Debug: list unsigned short = ax+0 (used reg = )
27829 725F           50                         push	ax
27830                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27831 7260           FF76         08            push	8[bp]
27832                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27833 7263           FF76         06            push	6[bp]
27834                                           ! Debug: func () void = write_word+0 (used reg = )
27835 7266           E8         09BD            call	_write_word
27836 7269           83C4                   06  add	sp,*6
27837                                           !BCC_EOS
27838                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27839 726C           8B46         08            mov	ax,8[bp]
27840 726F           40                         inc	ax
27841 7270           40                         inc	ax
27842 7271           8946         08            mov	8[bp],ax
27843                                           !BCC_EOS
27844                                           ! 3930         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27845                                           ! Debug: list int = const $84 (used reg = )
27846 7274           B8                   0084  mov	ax,#$84
27847 7277           50                         push	ax
27848                                           ! Debug: list int = const $40 (used reg = )
27849 7278           B8                   0040  mov	ax,*$40
27850 727B           50                         push	ax
27851                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27852 727C           E8         0969            call	_read_byte
27853 727F           83C4                   04  add	sp,*4
27854                                           ! Debug: list unsigned char = al+0 (used reg = )
27855 7282           30E4                       xor	ah,ah
27856 7284           50                         push	ax
27857                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27858 7285           FF76         08            push	8[bp]
27859                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27860 7288           FF76         06            push	6[bp]
27861                                           ! Debug: func () void = write_byte+0 (used reg = )
27862 728B           E8         0980            call	_write_byte
27863 728E           83C4                   06  add	sp,*6
27864                                           !BCC_EOS
27865                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27866 7291           8B46         08            mov	ax,8[bp]
27867 7294           40                         inc	ax
27868 7295           8946         08            mov	8[bp],ax
27869                                           !BCC_EOS
27870                                           ! 3931         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27871                                           ! Debug: list int = const $85 (used reg = )
27872 7298           B8                   0085  mov	ax,#$85
27873 729B           50                         push	ax
27874                                           ! Debug: list int = const $40 (used reg = )
27875 729C           B8                   0040  mov	ax,*$40
27876 729F           50                         push	ax
27877                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27878 72A0           E8         0958            call	_read_word
27879 72A3           83C4                   04  add	sp,*4
27880                                           ! Debug: list unsigned short = ax+0 (used reg = )
27881 72A6           50                         push	ax
27882                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27883 72A7           FF76         08            push	8[bp]
27884                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27885 72AA           FF76         06            push	6[bp]
27886                                           ! Debug: func () void = write_word+0 (used reg = )
27887 72AD           E8         0976            call	_write_word
27888 72B0           83C4                   06  add	sp,*6
27889                                           !BCC_EOS
27890                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27891 72B3           8B46         08            mov	ax,8[bp]
27892 72B6           40                         inc	ax
27893 72B7           40                         inc	ax
27894 72B8           8946         08            mov	8[bp],ax
27895                                           !BCC_EOS
27896                                           ! 3932         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27897                                           ! Debug: list int = const $87 (used reg = )
27898 72BB           B8                   0087  mov	ax,#$87
27899 72BE           50                         push	ax
27900                                           ! Debug: list int = const $40 (used reg = )
27901 72BF           B8                   0040  mov	ax,*$40
27902 72C2           50                         push	ax
27903                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27904 72C3           E8         0922            call	_read_byte
27905 72C6           83C4                   04  add	sp,*4
27906                                           ! Debug: list unsigned char = al+0 (used reg = )
27907 72C9           30E4                       xor	ah,ah
27908 72CB           50                         push	ax
27909                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27910 72CC           FF76         08            push	8[bp]
27911                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27912 72CF           FF76         06            push	6[bp]
27913                                           ! Debug: func () void = write_byte+0 (used reg = )
27914 72D2           E8         0939            call	_write_byte
27915 72D5           83C4                   06  add	sp,*6
27916                                           !BCC_EOS
27917                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27918 72D8           8B46         08            mov	ax,8[bp]
27919 72DB           40                         inc	ax
27920 72DC           8946         08            mov	8[bp],ax
27921                                           !BCC_EOS
27922                                           ! 3933         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27923                                           ! Debug: list int = const $88 (used reg = )
27924 72DF           B8                   0088  mov	ax,#$88
27925 72E2           50                         push	ax
27926                                           ! Debug: list int = const $40 (used reg = )
27927 72E3           B8                   0040  mov	ax,*$40
27928 72E6           50                         push	ax
27929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27930 72E7           E8         08FE            call	_read_byte
27931 72EA           83C4                   04  add	sp,*4
27932                                           ! Debug: list unsigned char = al+0 (used reg = )
27933 72ED           30E4                       xor	ah,ah
27934 72EF           50                         push	ax
27935                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27936 72F0           FF76         08            push	8[bp]
27937                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27938 72F3           FF76         06            push	6[bp]
27939                                           ! Debug: func () void = write_byte+0 (used reg = )
27940 72F6           E8         0915            call	_write_byte
27941 72F9           83C4                   06  add	sp,*6
27942                                           !BCC_EOS
27943                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27944 72FC           8B46         08            mov	ax,8[bp]
27945 72FF           40                         inc	ax
27946 7300           8946         08            mov	8[bp],ax
27947                                           !BCC_EOS
27948                                           ! 3934         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27949                                           ! Debug: list int = const $89 (used reg = )
27950 7303           B8                   0089  mov	ax,#$89
27951 7306           50                         push	ax
27952                                           ! Debug: list int = const $40 (used reg = )
27953 7307           B8                   0040  mov	ax,*$40
27954 730A           50                         push	ax
27955                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27956 730B           E8         08DA            call	_read_byte
27957 730E           83C4                   04  add	sp,*4
27958                                           ! Debug: list unsigned char = al+0 (used reg = )
27959 7311           30E4                       xor	ah,ah
27960 7313           50                         push	ax
27961                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27962 7314           FF76         08            push	8[bp]
27963                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27964 7317           FF76         06            push	6[bp]
27965                                           ! Debug: func () void = write_byte+0 (used reg = )
27966 731A           E8         08F1            call	_write_byte
27967 731D           83C4                   06  add	sp,*6
27968                                           !BCC_EOS
27969                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27970 7320           8B46         08            mov	ax,8[bp]
27971 7323           40                         inc	ax
27972 7324           8946         08            mov	8[bp],ax
27973                                           !BCC_EOS
27974                                           ! 3935         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27975                                           ! Debug: list int = const $60 (used reg = )
27976 7327           B8                   0060  mov	ax,*$60
27977 732A           50                         push	ax
27978                                           ! Debug: list int = const $40 (used reg = )
27979 732B           B8                   0040  mov	ax,*$40
27980 732E           50                         push	ax
27981                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27982 732F           E8         08C9            call	_read_word
27983 7332           83C4                   04  add	sp,*4
27984                                           ! Debug: list unsigned short = ax+0 (used reg = )
27985 7335           50                         push	ax
27986                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27987 7336           FF76         08            push	8[bp]
27988                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27989 7339           FF76         06            push	6[bp]
27990                                           ! Debug: func () void = write_word+0 (used reg = )
27991 733C           E8         08E7            call	_write_word
27992 733F           83C4                   06  add	sp,*6
27993                                           !BCC_EOS
27994                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27995 7342           8B46         08            mov	ax,8[bp]
27996 7345           40                         inc	ax
27997 7346           40                         inc	ax
27998 7347           8946         08            mov	8[bp],ax
27999                                           !BCC_EOS
28000                                           ! 3936         for(i=0;i<8;i++) {
28001                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28002 734A           31C0                       xor	ax,ax
28003 734C           8946         FE            mov	-2[bp],ax
28004                                           !BCC_EOS
28005                                           !BCC_EOS
28006 734F           EB           2F            jmp .265
28007                       00007351            .266:
28008                                           ! 3937             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28009                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28010                                           ! Debug: expression subtree swapping
28011 7351           8B46         FE            mov	ax,-2[bp]
28012 7354           D1E0                       shl	ax,*1
28013                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28014                                           ! Debug: expression subtree swapping
28015                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28016 7356           05                   0050  add	ax,*$50
28017 7359           50                         push	ax
28018                                           ! Debug: list int = const $40 (used reg = )
28019 735A           B8                   0040  mov	ax,*$40
28020 735D           50                         push	ax
28021                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28022 735E           E8         089A            call	_read_word
28023 7361           83C4                   04  add	sp,*4
28024                                           ! Debug: list unsigned short = ax+0 (used reg = )
28025 7364           50                         push	ax
28026                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28027 7365           FF76         08            push	8[bp]
28028                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28029 7368           FF76         06            push	6[bp]
28030                                           ! Debug: func () void = write_word+0 (used reg = )
28031 736B           E8         08B8            call	_write_word
28032 736E           83C4                   06  add	sp,*6
28033                                           !BCC_EOS
28034                                           ! 3938             BX += 2;
28035                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28036 7371           8B46         08            mov	ax,8[bp]
28037 7374           40                         inc	ax
28038 7375           40                         inc	ax
28039 7376           8946         08            mov	8[bp],ax
28040                                           !BCC_EOS
28041                                           ! 3939         }
28042                                           ! 3940         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28043                       00007379            .264:
28044                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28045 7379           8B46         FE            mov	ax,-2[bp]
28046 737C           40                         inc	ax
28047 737D           8946         FE            mov	-2[bp],ax
28048                       00007380            .265:
28049                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28050 7380           8B46         FE            mov	ax,-2[bp]
28051 7383           3D                   0008  cmp	ax,*8
28052 7386           72           C9            jb 	.266
28053                       00007388            .267:
28054                       00007388            .263:
28055                                           ! Debug: list int = const $4E (used reg = )
28056 7388           B8                   004E  mov	ax,*$4E
28057 738B           50                         push	ax
28058                                           ! Debug: list int = const $40 (used reg = )
28059 738C           B8                   0040  mov	ax,*$40
28060 738F           50                         push	ax
28061                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28062 7390           E8         0868            call	_read_word
28063 7393           83C4                   04  add	sp,*4
28064                                           ! Debug: list unsigned short = ax+0 (used reg = )
28065 7396           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 7397           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 739A           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_word+0 (used reg = )
28071 739D           E8         0886            call	_write_word
28072 73A0           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28075 73A3           8B46         08            mov	ax,8[bp]
28076 73A6           40                         inc	ax
28077 73A7           40                         inc	ax
28078 73A8           8946         08            mov	8[bp],ax
28079                                           !BCC_EOS
28080                                           ! 3941         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28081                                           ! Debug: list int = const $62 (used reg = )
28082 73AB           B8                   0062  mov	ax,*$62
28083 73AE           50                         push	ax
28084                                           ! Debug: list int = const $40 (used reg = )
28085 73AF           B8                   0040  mov	ax,*$40
28086 73B2           50                         push	ax
28087                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28088 73B3           E8         0832            call	_read_byte
28089 73B6           83C4                   04  add	sp,*4
28090                                           ! Debug: list unsigned char = al+0 (used reg = )
28091 73B9           30E4                       xor	ah,ah
28092 73BB           50                         push	ax
28093                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28094 73BC           FF76         08            push	8[bp]
28095                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28096 73BF           FF76         06            push	6[bp]
28097                                           ! Debug: func () void = write_byte+0 (used reg = )
28098 73C2           E8         0849            call	_write_byte
28099 73C5           83C4                   06  add	sp,*6
28100                                           !BCC_EOS
28101                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28102 73C8           8B46         08            mov	ax,8[bp]
28103 73CB           40                         inc	ax
28104 73CC           8946         08            mov	8[bp],ax
28105                                           !BCC_EOS
28106                                           ! 3942         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28107                                           ! Debug: list int = const $7C (used reg = )
28108 73CF           B8                   007C  mov	ax,*$7C
28109 73D2           50                         push	ax
28110                                           ! Debug: list int = const 0 (used reg = )
28111 73D3           31C0                       xor	ax,ax
28112 73D5           50                         push	ax
28113                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28114 73D6           E8         0822            call	_read_word
28115 73D9           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned short = ax+0 (used reg = )
28117 73DC           50                         push	ax
28118                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28119 73DD           FF76         08            push	8[bp]
28120                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28121 73E0           FF76         06            push	6[bp]
28122                                           ! Debug: func () void = write_word+0 (used reg = )
28123 73E3           E8         0840            call	_write_word
28124 73E6           83C4                   06  add	sp,*6
28125                                           !BCC_EOS
28126                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28127 73E9           8B46         08            mov	ax,8[bp]
28128 73EC           40                         inc	ax
28129 73ED           40                         inc	ax
28130 73EE           8946         08            mov	8[bp],ax
28131                                           !BCC_EOS
28132                                           ! 3943         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28133                                           ! Debug: list int = const $7E (used reg = )
28134 73F1           B8                   007E  mov	ax,*$7E
28135 73F4           50                         push	ax
28136                                           ! Debug: list int = const 0 (used reg = )
28137 73F5           31C0                       xor	ax,ax
28138 73F7           50                         push	ax
28139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28140 73F8           E8         0800            call	_read_word
28141 73FB           83C4                   04  add	sp,*4
28142                                           ! Debug: list unsigned short = ax+0 (used reg = )
28143 73FE           50                         push	ax
28144                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28145 73FF           FF76         08            push	8[bp]
28146                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28147 7402           FF76         06            push	6[bp]
28148                                           ! Debug: func () void = write_word+0 (used reg = )
28149 7405           E8         081E            call	_write_word
28150 7408           83C4                   06  add	sp,*6
28151                                           !BCC_EOS
28152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28153 740B           8B46         08            mov	ax,8[bp]
28154 740E           40                         inc	ax
28155 740F           40                         inc	ax
28156 7410           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 3944         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28159                                           ! Debug: list int = const $10C (used reg = )
28160 7413           B8                   010C  mov	ax,#$10C
28161 7416           50                         push	ax
28162                                           ! Debug: list int = const 0 (used reg = )
28163 7417           31C0                       xor	ax,ax
28164 7419           50                         push	ax
28165                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28166 741A           E8         07DE            call	_read_word
28167 741D           83C4                   04  add	sp,*4
28168                                           ! Debug: list unsigned short = ax+0 (used reg = )
28169 7420           50                         push	ax
28170                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28171 7421           FF76         08            push	8[bp]
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 7424           FF76         06            push	6[bp]
28174                                           ! Debug: func () void = write_word+0 (used reg = )
28175 7427           E8         07FC            call	_write_word
28176 742A           83C4                   06  add	sp,*6
28177                                           !BCC_EOS
28178                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28179 742D           8B46         08            mov	ax,8[bp]
28180 7430           40                         inc	ax
28181 7431           40                         inc	ax
28182 7432           8946         08            mov	8[bp],ax
28183                                           !BCC_EOS
28184                                           ! 3945         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28185                                           ! Debug: list int = const $10E (used reg = )
28186 7435           B8                   010E  mov	ax,#$10E
28187 7438           50                         push	ax
28188                                           ! Debug: list int = const 0 (used reg = )
28189 7439           31C0                       xor	ax,ax
28190 743B           50                         push	ax
28191                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28192 743C           E8         07BC            call	_read_word
28193 743F           83C4                   04  add	sp,*4
28194                                           ! Debug: list unsigned short = ax+0 (used reg = )
28195 7442           50                         push	ax
28196                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28197 7443           FF76         08            push	8[bp]
28198                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28199 7446           FF76         06            push	6[bp]
28200                                           ! Debug: func () void = write_word+0 (used reg = )
28201 7449           E8         07DA            call	_write_word
28202 744C           83C4                   06  add	sp,*6
28203                                           !BCC_EOS
28204                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28205 744F           8B46         08            mov	ax,8[bp]
28206 7452           40                         inc	ax
28207 7453           40                         inc	ax
28208 7454           8946         08            mov	8[bp],ax
28209                                           !BCC_EOS
28210                                           ! 3946     }
28211                                           ! 3947     if (CX & 4) {
28212                       00007457            .261:
28213                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28214 7457           8A46         04            mov	al,4[bp]
28215 745A           24                     04  and	al,*4
28216 745C           84C0                       test	al,al
28217 745E         0F84         00B5            beq 	.268
28218                       00007462            .269:
28219                                           ! 3948         write_byte(ES, BX, inb(0x3c7)); BX++;
28220                                           ! Debug: list int = const $3C7 (used reg = )
28221 7462           B8                   03C7  mov	ax,#$3C7
28222 7465           50                         push	ax
28223                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28224 7466           E8         07D5            call	_inb
28225 7469           44                         inc	sp
28226 746A           44                         inc	sp
28227                                           ! Debug: list unsigned char = al+0 (used reg = )
28228 746B           30E4                       xor	ah,ah
28229 746D           50                         push	ax
28230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28231 746E           FF76         08            push	8[bp]
28232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28233 7471           FF76         06            push	6[bp]
28234                                           ! Debug: func () void = write_byte+0 (used reg = )
28235 7474           E8         0797            call	_write_byte
28236 7477           83C4                   06  add	sp,*6
28237                                           !BCC_EOS
28238                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28239 747A           8B46         08            mov	ax,8[bp]
28240 747D           40                         inc	ax
28241 747E           8946         08            mov	8[bp],ax
28242                                           !BCC_EOS
28243                                           ! 3949         write_byte(ES, BX, inb(0x3c8)); BX++;
28244                                           ! Debug: list int = const $3C8 (used reg = )
28245 7481           B8                   03C8  mov	ax,#$3C8
28246 7484           50                         push	ax
28247                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28248 7485           E8         07B6            call	_inb
28249 7488           44                         inc	sp
28250 7489           44                         inc	sp
28251                                           ! Debug: list unsigned char = al+0 (used reg = )
28252 748A           30E4                       xor	ah,ah
28253 748C           50                         push	ax
28254                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28255 748D           FF76         08            push	8[bp]
28256                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28257 7490           FF76         06            push	6[bp]
28258                                           ! Debug: func () void = write_byte+0 (used reg = )
28259 7493           E8         0778            call	_write_byte
28260 7496           83C4                   06  add	sp,*6
28261                                           !BCC_EOS
28262                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28263 7499           8B46         08            mov	ax,8[bp]
28264 749C           40                         inc	ax
28265 749D           8946         08            mov	8[bp],ax
28266                                           !BCC_EOS
28267                                           ! 3950         write_byte(ES, BX, inb(0x3c6)); BX++;
28268                                           ! Debug: list int = const $3C6 (used reg = )
28269 74A0           B8                   03C6  mov	ax,#$3C6
28270 74A3           50                         push	ax
28271                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28272 74A4           E8         0797            call	_inb
28273 74A7           44                         inc	sp
28274 74A8           44                         inc	sp
28275                                           ! Debug: list unsigned char = al+0 (used reg = )
28276 74A9           30E4                       xor	ah,ah
28277 74AB           50                         push	ax
28278                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28279 74AC           FF76         08            push	8[bp]
28280                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28281 74AF           FF76         06            push	6[bp]
28282                                           ! Debug: func () void = write_byte+0 (used reg = )
28283 74B2           E8         0759            call	_write_byte
28284 74B5           83C4                   06  add	sp,*6
28285                                           !BCC_EOS
28286                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28287 74B8           8B46         08            mov	ax,8[bp]
28288 74BB           40                         inc	ax
28289 74BC           8946         08            mov	8[bp],ax
28290                                           !BCC_EOS
28291                                           ! 3951         outb(0x3c8,0x00);
28292                                           ! Debug: list int = const 0 (used reg = )
28293 74BF           31C0                       xor	ax,ax
28294 74C1           50                         push	ax
28295                                           ! Debug: list int = const $3C8 (used reg = )
28296 74C2           B8                   03C8  mov	ax,#$3C8
28297 74C5           50                         push	ax
28298                                           ! Debug: func () void = outb+0 (used reg = )
28299 74C6           E8         078B            call	_outb
28300 74C9           83C4                   04  add	sp,*4
28301                                           !BCC_EOS
28302                                           ! 3952         for(i=0;i<256*3;i++) {
28303                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28304 74CC           31C0                       xor	ax,ax
28305 74CE           8946         FE            mov	-2[bp],ax
28306                                           !BCC_EOS
28307                                           !BCC_EOS
28308 74D1           EB           26            jmp .26C
28309                       000074D3            .26D:
28310                                           ! 3953             write_byte(ES, BX, inb(0x3c9)); BX++;
28311                                           ! Debug: list int = const $3C9 (used reg = )
28312 74D3           B8                   03C9  mov	ax,#$3C9
28313 74D6           50                         push	ax
28314                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28315 74D7           E8         0764            call	_inb
28316 74DA           44                         inc	sp
28317 74DB           44                         inc	sp
28318                                           ! Debug: list unsigned char = al+0 (used reg = )
28319 74DC           30E4                       xor	ah,ah
28320 74DE           50                         push	ax
28321                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28322 74DF           FF76         08            push	8[bp]
28323                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28324 74E2           FF76         06            push	6[bp]
28325                                           ! Debug: func () void = write_byte+0 (used reg = )
28326 74E5           E8         0726            call	_write_byte
28327 74E8           83C4                   06  add	sp,*6
28328                                           !BCC_EOS
28329                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28330 74EB           8B46         08            mov	ax,8[bp]
28331 74EE           40                         inc	ax
28332 74EF           8946         08            mov	8[bp],ax
28333                                           !BCC_EOS
28334                                           ! 3954         }
28335                                           ! 3955         write_byte(ES, BX, 0); BX++;
28336                       000074F2            .26B:
28337                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28338 74F2           8B46         FE            mov	ax,-2[bp]
28339 74F5           40                         inc	ax
28340 74F6           8946         FE            mov	-2[bp],ax
28341                       000074F9            .26C:
28342                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28343 74F9           8B46         FE            mov	ax,-2[bp]
28344 74FC           3D                   0300  cmp	ax,#$300
28345 74FF           72           D2            jb 	.26D
28346                       00007501            .26E:
28347                       00007501            .26A:
28348                                           ! Debug: list int = const 0 (used reg = )
28349 7501           31C0                       xor	ax,ax
28350 7503           50                         push	ax
28351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28352 7504           FF76         08            push	8[bp]
28353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28354 7507           FF76         06            push	6[bp]
28355                                           ! Debug: func () void = write_byte+0 (used reg = )
28356 750A           E8         0701            call	_write_byte
28357 750D           83C4                   06  add	sp,*6
28358                                           !BCC_EOS
28359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28360 7510           8B46         08            mov	ax,8[bp]
28361 7513           40                         inc	ax
28362 7514           8946         08            mov	8[bp],ax
28363                                           !BCC_EOS
28364                                           ! 3956     }
28365                                           ! 3957     return
28366                                           ! 3957  BX;
28367                       00007517            .268:
28368 7517           8B46         08            mov	ax,8[bp]
28369 751A           89EC                       mov	sp,bp
28370 751C           5D                         pop	bp
28371 751D           C3                         ret
28372                                           !BCC_EOS
28373                                           ! 3958 }
28374                                           ! 3959 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28375                                           ! 3960      Bit16u CX;Bit16u ES;Bit16u BX;
28376                       0000751E            _biosfn_restore_video_state:
28377                                           !BCC_EOS
28378                                           !BCC_EOS
28379                                           !BCC_EOS
28380                                           ! 3961 {
28381                                           ! 3962     Bit16u i, crtc_addr, v, addr1, ar_index;
28382                                           !BCC_EOS
28383                                           ! 3963     if (CX & 1) {
28384 751E           55                         push	bp
28385 751F           89E5                       mov	bp,sp
28386 7521           83C4                   F6  add	sp,*-$A
28387                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28388 7524           8A46         04            mov	al,4[bp]
28389 7527           24                     01  and	al,*1
28390 7529           84C0                       test	al,al
28391 752B         0F84         02AA            beq 	.26F
28392                       0000752F            .270:
28393                                           ! 3964         inb(0x3da);
28394                                           ! Debug: list int = const $3DA (used reg = )
28395 752F           B8                   03DA  mov	ax,#$3DA
28396 7532           50                         push	ax
28397                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28398 7533           E8         0708            call	_inb
28399 7536           44                         inc	sp
28400 7537           44                         inc	sp
28401                                           !BCC_EOS
28402                                           ! 3965         crtc_addr = read_word(ES, BX + 0x40);
28403                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28404 7538           8B46         08            mov	ax,8[bp]
28405                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28406 753B           05                   0040  add	ax,*$40
28407 753E           50                         push	ax
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 753F           FF76         06            push	6[bp]
28410                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28411 7542           E8         06B6            call	_read_word
28412 7545           83C4                   04  add	sp,*4
28413                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28414 7548           8946         FC            mov	-4[bp],ax
28415                                           !BCC_EOS
28416                                           ! 3966         addr1 = BX;
28417                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28418 754B           8B46         08            mov	ax,8[bp]
28419 754E           8946         F8            mov	-8[bp],ax
28420                                           !BCC_EOS
28421                                           ! 3967         BX += 5;
28422                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28423 7551           8B46         08            mov	ax,8[bp]
28424 7554           05                   0005  add	ax,*5
28425 7557           8946         08            mov	8[bp],ax
28426                                           !BCC_EOS
28427                                           ! 3968         for(i=1;i<=4;i++){
28428                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28429 755A           B8                   0001  mov	ax,*1
28430 755D           8946         FE            mov	-2[bp],ax
28431                                           !BCC_EOS
28432                                           !BCC_EOS
28433 7560           EB           34            jmp .273
28434                       00007562            .274:
28435                                           ! 3969             outb(0x3c4, i);
28436                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28437 7562           FF76         FE            push	-2[bp]
28438                                           ! Debug: list int = const $3C4 (used reg = )
28439 7565           B8                   03C4  mov	ax,#$3C4
28440 7568           50                         push	ax
28441                                           ! Debug: func () void = outb+0 (used reg = )
28442 7569           E8         06E8            call	_outb
28443 756C           83C4                   04  add	sp,*4
28444                                           !BCC_EOS
28445                                           ! 3970             outb(0x3c5, read_byte(ES, BX)); BX++;
28446                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28447 756F           FF76         08            push	8[bp]
28448                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28449 7572           FF76         06            push	6[bp]
28450                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28451 7575           E8         0670            call	_read_byte
28452 7578           83C4                   04  add	sp,*4
28453                                           ! Debug: list unsigned char = al+0 (used reg = )
28454 757B           30E4                       xor	ah,ah
28455 757D           50                         push	ax
28456                                           ! Debug: list int = const $3C5 (used reg = )
28457 757E           B8                   03C5  mov	ax,#$3C5
28458 7581           50                         push	ax
28459                                           ! Debug: func () void = outb+0 (used reg = )
28460 7582           E8         06CF            call	_outb
28461 7585           83C4                   04  add	sp,*4
28462                                           !BCC_EOS
28463                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28464 7588           8B46         08            mov	ax,8[bp]
28465 758B           40                         inc	ax
28466 758C           8946         08            mov	8[bp],ax
28467                                           !BCC_EOS
28468                                           ! 3971         }
28469                                           ! 3972         outb(0x3c4, 0);
28470                       0000758F            .272:
28471                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28472 758F           8B46         FE            mov	ax,-2[bp]
28473 7592           40                         inc	ax
28474 7593           8946         FE            mov	-2[bp],ax
28475                       00007596            .273:
28476                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28477 7596           8B46         FE            mov	ax,-2[bp]
28478 7599           3D                   0004  cmp	ax,*4
28479 759C           76           C4            jbe	.274
28480                       0000759E            .275:
28481                       0000759E            .271:
28482                                           ! Debug: list int = const 0 (used reg = )
28483 759E           31C0                       xor	ax,ax
28484 75A0           50                         push	ax
28485                                           ! Debug: list int = const $3C4 (used reg = )
28486 75A1           B8                   03C4  mov	ax,#$3C4
28487 75A4           50                         push	ax
28488                                           ! Debug: func () void = outb+0 (used reg = )
28489 75A5           E8         06AC            call	_outb
28490 75A8           83C4                   04  add	sp,*4
28491                                           !BCC_EOS
28492                                           ! 3973         outb(0x3c5, read_byte(ES, BX)); BX++;
28493                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28494 75AB           FF76         08            push	8[bp]
28495                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28496 75AE           FF76         06            push	6[bp]
28497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28498 75B1           E8         0634            call	_read_byte
28499 75B4           83C4                   04  add	sp,*4
28500                                           ! Debug: list unsigned char = al+0 (used reg = )
28501 75B7           30E4                       xor	ah,ah
28502 75B9           50                         push	ax
28503                                           ! Debug: list int = const $3C5 (used reg = )
28504 75BA           B8                   03C5  mov	ax,#$3C5
28505 75BD           50                         push	ax
28506                                           ! Debug: func () void = outb+0 (used reg = )
28507 75BE           E8         0693            call	_outb
28508 75C1           83C4                   04  add	sp,*4
28509                                           !BCC_EOS
28510                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28511 75C4           8B46         08            mov	ax,8[bp]
28512 75C7           40                         inc	ax
28513 75C8           8946         08            mov	8[bp],ax
28514                                           !BCC_EOS
28515                                           ! 3974         outw(crtc_addr,0x0011);
28516                                           ! Debug: list int = const $11 (used reg = )
28517 75CB           B8                   0011  mov	ax,*$11
28518 75CE           50                         push	ax
28519                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28520 75CF           FF76         FC            push	-4[bp]
28521                                           ! Debug: func () void = outw+0 (used reg = )
28522 75D2           E8         068F            call	_outw
28523 75D5           83C4                   04  add	sp,*4
28524                                           !BCC_EOS
28525                                           ! 3975         for(i=0;i<=0x18;i++) {
28526                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28527 75D8           31C0                       xor	ax,ax
28528 75DA           8946         FE            mov	-2[bp],ax
28529                                           !BCC_EOS
28530                                           !BCC_EOS
28531 75DD           EB           3C            jmp .278
28532                       000075DF            .279:
28533                                           ! 3976             if (i != 0x11) {
28534                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28535 75DF           8B46         FE            mov	ax,-2[bp]
28536 75E2           3D                   0011  cmp	ax,*$11
28537 75E5           74           26            je  	.27A
28538                       000075E7            .27B:
28539                                           ! 3977                 outb(crtc_addr,i);
28540                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28541 75E7           FF76         FE            push	-2[bp]
28542                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28543 75EA           FF76         FC            push	-4[bp]
28544                                           ! Debug: func () void = outb+0 (used reg = )
28545 75ED           E8         0664            call	_outb
28546 75F0           83C4                   04  add	sp,*4
28547                                           !BCC_EOS
28548                                           ! 3978                 outb(crtc_addr+1, read_byte(ES, BX));
28549                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28550 75F3           FF76         08            push	8[bp]
28551                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28552 75F6           FF76         06            push	6[bp]
28553                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28554 75F9           E8         05EC            call	_read_byte
28555 75FC           83C4                   04  add	sp,*4
28556                                           ! Debug: list unsigned char = al+0 (used reg = )
28557 75FF           30E4                       xor	ah,ah
28558 7601           50                         push	ax
28559                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28560 7602           8B46         FC            mov	ax,-4[bp]
28561                                           ! Debug: list unsigned int = ax+1 (used reg = )
28562 7605           40                         inc	ax
28563 7606           50                         push	ax
28564                                           ! Debug: func () void = outb+0 (used reg = )
28565 7607           E8         064A            call	_outb
28566 760A           83C4                   04  add	sp,*4
28567                                           !BCC_EOS
28568                                           ! 3979             }
28569                                           ! 3980             BX++;
28570                       0000760D            .27A:
28571                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28572 760D           8B46         08            mov	ax,8[bp]
28573 7610           40                         inc	ax
28574 7611           8946         08            mov	8[bp],ax
28575                                           !BCC_EOS
28576                                           ! 3981         }
28577                                           ! 3982         v = inb(0x3cc) & ~0x01;
28578                       00007614            .277:
28579                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28580 7614           8B46         FE            mov	ax,-2[bp]
28581 7617           40                         inc	ax
28582 7618           8946         FE            mov	-2[bp],ax
28583                       0000761B            .278:
28584                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28585 761B           8B46         FE            mov	ax,-2[bp]
28586 761E           3D                   0018  cmp	ax,*$18
28587 7621           76           BC            jbe	.279
28588                       00007623            .27C:
28589                       00007623            .276:
28590                                           ! Debug: list int = const $3CC (used reg = )
28591 7623           B8                   03CC  mov	ax,#$3CC
28592 7626           50                         push	ax
28593                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28594 7627           E8         0614            call	_inb
28595 762A           44                         inc	sp
28596 762B           44                         inc	sp
28597                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28598 762C           24                     FE  and	al,#$FE
28599                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28600 762E           30E4                       xor	ah,ah
28601 7630           8946         FA            mov	-6[bp],ax
28602                                           !BCC_EOS
28603                                           ! 3983         if (crtc_addr = 0x3d4)
28604                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28605 7633           B8                   03D4  mov	ax,#$3D4
28606 7636           8946         FC            mov	-4[bp],ax
28607 7639           85C0                       test	ax,ax
28608 763B           74           08            je  	.27D
28609                       0000763D            .27E:
28610                                           ! 3984             v |= 0x01;
28611                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28612 763D           8B46         FA            mov	ax,-6[bp]
28613 7640           0C                     01  or	al,*1
28614 7642           8946         FA            mov	-6[bp],ax
28615                                           !BCC_EOS
28616                                           ! 3985         outb(0x3c2, v);
28617                       00007645            .27D:
28618                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28619 7645           FF76         FA            push	-6[bp]
28620                                           ! Debug: list int = const $3C2 (used reg = )
28621 7648           B8                   03C2  mov	ax,#$3C2
28622 764B           50                         push	ax
28623                                           ! Debug: func () void = outb+0 (used reg = )
28624 764C           E8         0605            call	_outb
28625 764F           83C4                   04  add	sp,*4
28626                                           !BCC_EOS
28627                                           ! 3986         outb(crtc_addr, 0x11);
28628                                           ! Debug: list int = const $11 (used reg = )
28629 7652           B8                   0011  mov	ax,*$11
28630 7655           50                         push	ax
28631                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28632 7656           FF76         FC            push	-4[bp]
28633                                           ! Debug: func () void = outb+0 (used reg = )
28634 7659           E8         05F8            call	_outb
28635 765C           83C4                   04  add	sp,*4
28636                                           !BCC_EOS
28637                                           ! 3987         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28638                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28639 765F           8B46         08            mov	ax,8[bp]
28640                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28641                                           ! Debug: list unsigned int = ax-7 (used reg = )
28642 7662           05                   FFF9  add	ax,*-7
28643 7665           50                         push	ax
28644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28645 7666           FF76         06            push	6[bp]
28646                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28647 7669           E8         057C            call	_read_byte
28648 766C           83C4                   04  add	sp,*4
28649                                           ! Debug: list unsigned char = al+0 (used reg = )
28650 766F           30E4                       xor	ah,ah
28651 7671           50                         push	ax
28652                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28653 7672           8B46         FC            mov	ax,-4[bp]
28654                                           ! Debug: list unsigned int = ax+1 (used reg = )
28655 7675           40                         inc	ax
28656 7676           50                         push	ax
28657                                           ! Debug: func () void = outb+0 (used reg = )
28658 7677           E8         05DA            call	_outb
28659 767A           83C4                   04  add	sp,*4
28660                                           !BCC_EOS
28661                                           ! 3988         ar_index = read_byte(ES, addr1 + 0x03);
28662                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28663 767D           8B46         F8            mov	ax,-8[bp]
28664                                           ! Debug: list unsigned int = ax+3 (used reg = )
28665 7680           05                   0003  add	ax,*3
28666 7683           50                         push	ax
28667                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28668 7684           FF76         06            push	6[bp]
28669                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28670 7687           E8         055E            call	_read_byte
28671 768A           83C4                   04  add	sp,*4
28672                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28673 768D           30E4                       xor	ah,ah
28674 768F           8946         F6            mov	-$A[bp],ax
28675                                           !BCC_EOS
28676                                           ! 3989         inb(0x3da);
28677                                           ! Debug: list int = const $3DA (used reg = )
28678 7692           B8                   03DA  mov	ax,#$3DA
28679 7695           50                         push	ax
28680                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28681 7696           E8         05A5            call	_inb
28682 7699           44                         inc	sp
28683 769A           44                         inc	sp
28684                                           !BCC_EOS
28685                                           ! 3990         for(i=0;i<=0x13;i++) {
28686                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28687 769B           31C0                       xor	ax,ax
28688 769D           8946         FE            mov	-2[bp],ax
28689                                           !BCC_EOS
28690                                           !BCC_EOS
28691 76A0           EB           3C            jmp .281
28692                       000076A2            .282:
28693                                           ! 3991             outb(0x3c0, i | (ar_index & 0x20));
28694                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28695 76A2           8A46         F6            mov	al,-$A[bp]
28696 76A5           24                     20  and	al,*$20
28697                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28698                                           ! Debug: expression subtree swapping
28699 76A7           30E4                       xor	ah,ah
28700 76A9           0B46         FE            or	ax,-2[bp]
28701                                           ! Debug: list unsigned int = ax+0 (used reg = )
28702 76AC           50                         push	ax
28703                                           ! Debug: list int = const $3C0 (used reg = )
28704 76AD           B8                   03C0  mov	ax,#$3C0
28705 76B0           50                         push	ax
28706                                           ! Debug: func () void = outb+0 (used reg = )
28707 76B1           E8         05A0            call	_outb
28708 76B4           83C4                   04  add	sp,*4
28709                                           !BCC_EOS
28710                                           ! 3992             outb(0x3c0, read_byte(ES, BX)); BX++;
28711                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28712 76B7           FF76         08            push	8[bp]
28713                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28714 76BA           FF76         06            push	6[bp]
28715                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28716 76BD           E8         0528            call	_read_byte
28717 76C0           83C4                   04  add	sp,*4
28718                                           ! Debug: list unsigned char = al+0 (used reg = )
28719 76C3           30E4                       xor	ah,ah
28720 76C5           50                         push	ax
28721                                           ! Debug: list int = const $3C0 (used reg = )
28722 76C6           B8                   03C0  mov	ax,#$3C0
28723 76C9           50                         push	ax
28724                                           ! Debug: func () void = outb+0 (used reg = )
28725 76CA           E8         0587            call	_outb
28726 76CD           83C4                   04  add	sp,*4
28727                                           !BCC_EOS
28728                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28729 76D0           8B46         08            mov	ax,8[bp]
28730 76D3           40                         inc	ax
28731 76D4           8946         08            mov	8[bp],ax
28732                                           !BCC_EOS
28733                                           ! 3993         }
28734                                           ! 3994         outb(0x3c0, ar_index);
28735                       000076D7            .280:
28736                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28737 76D7           8B46         FE            mov	ax,-2[bp]
28738 76DA           40                         inc	ax
28739 76DB           8946         FE            mov	-2[bp],ax
28740                       000076DE            .281:
28741                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28742 76DE           8B46         FE            mov	ax,-2[bp]
28743 76E1           3D                   0013  cmp	ax,*$13
28744 76E4           76           BC            jbe	.282
28745                       000076E6            .283:
28746                       000076E6            .27F:
28747                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28748 76E6           FF76         F6            push	-$A[bp]
28749                                           ! Debug: list int = const $3C0 (used reg = )
28750 76E9           B8                   03C0  mov	ax,#$3C0
28751 76EC           50                         push	ax
28752                                           ! Debug: func () void = outb+0 (used reg = )
28753 76ED           E8         0564            call	_outb
28754 76F0           83C4                   04  add	sp,*4
28755                                           !BCC_EOS
28756                                           ! 3995         inb(0x3da);
28757                                           ! Debug: list int = const $3DA (used reg = )
28758 76F3           B8                   03DA  mov	ax,#$3DA
28759 76F6           50                         push	ax
28760                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28761 76F7           E8         0544            call	_inb
28762 76FA           44                         inc	sp
28763 76FB           44                         inc	sp
28764                                           !BCC_EOS
28765                                           ! 3996         for(i=0;i<=8;i++) {
28766                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28767 76FC           31C0                       xor	ax,ax
28768 76FE           8946         FE            mov	-2[bp],ax
28769                                           !BCC_EOS
28770                                           !BCC_EOS
28771 7701           EB           34            jmp .286
28772                       00007703            .287:
28773                                           ! 3997             outb(0x3ce,i);
28774                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28775 7703           FF76         FE            push	-2[bp]
28776                                           ! Debug: list int = const $3CE (used reg = )
28777 7706           B8                   03CE  mov	ax,#$3CE
28778 7709           50                         push	ax
28779                                           ! Debug: func () void = outb+0 (used reg = )
28780 770A           E8         0547            call	_outb
28781 770D           83C4                   04  add	sp,*4
28782                                           !BCC_EOS
28783                                           ! 3998             outb(0x3cf, read_byte(ES, BX)); BX++;
28784                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28785 7710           FF76         08            push	8[bp]
28786                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28787 7713           FF76         06            push	6[bp]
28788                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28789 7716           E8         04CF            call	_read_byte
28790 7719           83C4                   04  add	sp,*4
28791                                           ! Debug: list unsigned char = al+0 (used reg = )
28792 771C           30E4                       xor	ah,ah
28793 771E           50                         push	ax
28794                                           ! Debug: list int = const $3CF (used reg = )
28795 771F           B8                   03CF  mov	ax,#$3CF
28796 7722           50                         push	ax
28797                                           ! Debug: func () void = outb+0 (used reg = )
28798 7723           E8         052E            call	_outb
28799 7726           83C4                   04  add	sp,*4
28800                                           !BCC_EOS
28801                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28802 7729           8B46         08            mov	ax,8[bp]
28803 772C           40                         inc	ax
28804 772D           8946         08            mov	8[bp],ax
28805                                           !BCC_EOS
28806                                           ! 3999         }
28807                                           ! 4000         BX += 2;
28808                       00007730            .285:
28809                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28810 7730           8B46         FE            mov	ax,-2[bp]
28811 7733           40                         inc	ax
28812 7734           8946         FE            mov	-2[bp],ax
28813                       00007737            .286:
28814                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28815 7737           8B46         FE            mov	ax,-2[bp]
28816 773A           3D                   0008  cmp	ax,*8
28817 773D           76           C4            jbe	.287
28818                       0000773F            .288:
28819                       0000773F            .284:
28820                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28821 773F           8B46         08            mov	ax,8[bp]
28822 7742           40                         inc	ax
28823 7743           40                         inc	ax
28824 7744           8946         08            mov	8[bp],ax
28825                                           !BCC_EOS
28826                                           ! 4001         BX += 4;
28827                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28828 7747           8B46         08            mov	ax,8[bp]
28829 774A           05                   0004  add	ax,*4
28830 774D           8946         08            mov	8[bp],ax
28831                                           !BCC_EOS
28832                                           ! 4002         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28833                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28834 7750           FF76         F8            push	-8[bp]
28835                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28836 7753           FF76         06            push	6[bp]
28837                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28838 7756           E8         048F            call	_read_byte
28839 7759           83C4                   04  add	sp,*4
28840                                           ! Debug: list unsigned char = al+0 (used reg = )
28841 775C           30E4                       xor	ah,ah
28842 775E           50                         push	ax
28843                                           ! Debug: list int = const $3C4 (used reg = )
28844 775F           B8                   03C4  mov	ax,#$3C4
28845 7762           50                         push	ax
28846                                           ! Debug: func () void = outb+0 (used reg = )
28847 7763           E8         04EE            call	_outb
28848 7766           83C4                   04  add	sp,*4
28849                                           !BCC_EOS
28850                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28851 7769           8B46         F8            mov	ax,-8[bp]
28852 776C           40                         inc	ax
28853 776D           8946         F8            mov	-8[bp],ax
28854                                           !BCC_EOS
28855                                           ! 4003         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28856                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28857 7770           FF76         F8            push	-8[bp]
28858                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28859 7773           FF76         06            push	6[bp]
28860                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28861 7776           E8         046F            call	_read_byte
28862 7779           83C4                   04  add	sp,*4
28863                                           ! Debug: list unsigned char = al+0 (used reg = )
28864 777C           30E4                       xor	ah,ah
28865 777E           50                         push	ax
28866                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28867 777F           FF76         FC            push	-4[bp]
28868                                           ! Debug: func () void = outb+0 (used reg = )
28869 7782           E8         04CF            call	_outb
28870 7785           83C4                   04  add	sp,*4
28871                                           !BCC_EOS
28872                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28873 7788           8B46         F8            mov	ax,-8[bp]
28874 778B           40                         inc	ax
28875 778C           8946         F8            mov	-8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 4004         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28878                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28879 778F           FF76         F8            push	-8[bp]
28880                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28881 7792           FF76         06            push	6[bp]
28882                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28883 7795           E8         0450            call	_read_byte
28884 7798           83C4                   04  add	sp,*4
28885                                           ! Debug: list unsigned char = al+0 (used reg = )
28886 779B           30E4                       xor	ah,ah
28887 779D           50                         push	ax
28888                                           ! Debug: list int = const $3CE (used reg = )
28889 779E           B8                   03CE  mov	ax,#$3CE
28890 77A1           50                         push	ax
28891                                           ! Debug: func () void = outb+0 (used reg = )
28892 77A2           E8         04AF            call	_outb
28893 77A5           83C4                   04  add	sp,*4
28894                                           !BCC_EOS
28895                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28896 77A8           8B46         F8            mov	ax,-8[bp]
28897 77AB           40                         inc	ax
28898 77AC           8946         F8            mov	-8[bp],ax
28899                                           !BCC_EOS
28900                                           ! 4005         addr1++;
28901                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28902 77AF           8B46         F8            mov	ax,-8[bp]
28903 77B2           40                         inc	ax
28904 77B3           8946         F8            mov	-8[bp],ax
28905                                           !BCC_EOS
28906                                           ! 4006         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28907                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28908 77B6           FF76         F8            push	-8[bp]
28909                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28910 77B9           FF76         06            push	6[bp]
28911                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28912 77BC           E8         0429            call	_read_byte
28913 77BF           83C4                   04  add	sp,*4
28914                                           ! Debug: list unsigned char = al+0 (used reg = )
28915 77C2           30E4                       xor	ah,ah
28916 77C4           50                         push	ax
28917                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28918 77C5           8B46         FC            mov	ax,-4[bp]
28919                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28920                                           ! Debug: list unsigned int = ax+6 (used reg = )
28921 77C8           05                   0006  add	ax,*6
28922 77CB           50                         push	ax
28923                                           ! Debug: func () void = outb+0 (used reg = )
28924 77CC           E8         0485            call	_outb
28925 77CF           83C4                   04  add	sp,*4
28926                                           !BCC_EOS
28927                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28928 77D2           8B46         F8            mov	ax,-8[bp]
28929 77D5           40                         inc	ax
28930 77D6           8946         F8            mov	-8[bp],ax
28931                                           !BCC_EOS
28932                                           ! 4007     }
28933                                           ! 4008     if (CX & 2) {
28934                       000077D9            .26F:
28935                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28936 77D9           8A46         04            mov	al,4[bp]
28937 77DC           24                     02  and	al,*2
28938 77DE           84C0                       test	al,al
28939 77E0         0F84         0270            beq 	.289
28940                       000077E4            .28A:
28941                                           ! 4009         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28942                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28943 77E4           FF76         08            push	8[bp]
28944                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28945 77E7           FF76         06            push	6[bp]
28946                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28947 77EA           E8         03FB            call	_read_byte
28948 77ED           83C4                   04  add	sp,*4
28949                                           ! Debug: list unsigned char = al+0 (used reg = )
28950 77F0           30E4                       xor	ah,ah
28951 77F2           50                         push	ax
28952                                           ! Debug: list int = const $49 (used reg = )
28953 77F3           B8                   0049  mov	ax,*$49
28954 77F6           50                         push	ax
28955                                           ! Debug: list int = const $40 (used reg = )
28956 77F7           B8                   0040  mov	ax,*$40
28957 77FA           50                         push	ax
28958                                           ! Debug: func () void = write_byte+0 (used reg = )
28959 77FB           E8         0410            call	_write_byte
28960 77FE           83C4                   06  add	sp,*6
28961                                           !BCC_EOS
28962                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28963 7801           8B46         08            mov	ax,8[bp]
28964 7804           40                         inc	ax
28965 7805           8946         08            mov	8[bp],ax
28966                                           !BCC_EOS
28967                                           ! 4010         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28968                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28969 7808           FF76         08            push	8[bp]
28970                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28971 780B           FF76         06            push	6[bp]
28972                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28973 780E           E8         03EA            call	_read_word
28974 7811           83C4                   04  add	sp,*4
28975                                           ! Debug: list unsigned short = ax+0 (used reg = )
28976 7814           50                         push	ax
28977                                           ! Debug: list int = const $4A (used reg = )
28978 7815           B8                   004A  mov	ax,*$4A
28979 7818           50                         push	ax
28980                                           ! Debug: list int = const $40 (used reg = )
28981 7819           B8                   0040  mov	ax,*$40
28982 781C           50                         push	ax
28983                                           ! Debug: func () void = write_word+0 (used reg = )
28984 781D           E8         0406            call	_write_word
28985 7820           83C4                   06  add	sp,*6
28986                                           !BCC_EOS
28987                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28988 7823           8B46         08            mov	ax,8[bp]
28989 7826           40                         inc	ax
28990 7827           40                         inc	ax
28991 7828           8946         08            mov	8[bp],ax
28992                                           !BCC_EOS
28993                                           ! 4011         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 782B           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 782E           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28999 7831           E8         03C7            call	_read_word
29000 7834           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned short = ax+0 (used reg = )
29002 7837           50                         push	ax
29003                                           ! Debug: list int = const $4C (used reg = )
29004 7838           B8                   004C  mov	ax,*$4C
29005 783B           50                         push	ax
29006                                           ! Debug: list int = const $40 (used reg = )
29007 783C           B8                   0040  mov	ax,*$40
29008 783F           50                         push	ax
29009                                           ! Debug: func () void = write_word+0 (used reg = )
29010 7840           E8         03E3            call	_write_word
29011 7843           83C4                   06  add	sp,*6
29012                                           !BCC_EOS
29013                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29014 7846           8B46         08            mov	ax,8[bp]
29015 7849           40                         inc	ax
29016 784A           40                         inc	ax
29017 784B           8946         08            mov	8[bp],ax
29018                                           !BCC_EOS
29019                                           ! 4012         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29020                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29021 784E           FF76         08            push	8[bp]
29022                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29023 7851           FF76         06            push	6[bp]
29024                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29025 7854           E8         03A4            call	_read_word
29026 7857           83C4                   04  add	sp,*4
29027                                           ! Debug: list unsigned short = ax+0 (used reg = )
29028 785A           50                         push	ax
29029                                           ! Debug: list int = const $63 (used reg = )
29030 785B           B8                   0063  mov	ax,*$63
29031 785E           50                         push	ax
29032                                           ! Debug: list int = const $40 (used reg = )
29033 785F           B8                   0040  mov	ax,*$40
29034 7862           50                         push	ax
29035                                           ! Debug: func () void = write_word+0 (used reg = )
29036 7863           E8         03C0            call	_write_word
29037 7866           83C4                   06  add	sp,*6
29038                                           !BCC_EOS
29039                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29040 7869           8B46         08            mov	ax,8[bp]
29041 786C           40                         inc	ax
29042 786D           40                         inc	ax
29043 786E           8946         08            mov	8[bp],ax
29044                                           !BCC_EOS
29045                                           ! 4013         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29046                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29047 7871           FF76         08            push	8[bp]
29048                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29049 7874           FF76         06            push	6[bp]
29050                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29051 7877           E8         036E            call	_read_byte
29052 787A           83C4                   04  add	sp,*4
29053                                           ! Debug: list unsigned char = al+0 (used reg = )
29054 787D           30E4                       xor	ah,ah
29055 787F           50                         push	ax
29056                                           ! Debug: list int = const $84 (used reg = )
29057 7880           B8                   0084  mov	ax,#$84
29058 7883           50                         push	ax
29059                                           ! Debug: list int = const $40 (used reg = )
29060 7884           B8                   0040  mov	ax,*$40
29061 7887           50                         push	ax
29062                                           ! Debug: func () void = write_byte+0 (used reg = )
29063 7888           E8         0383            call	_write_byte
29064 788B           83C4                   06  add	sp,*6
29065                                           !BCC_EOS
29066                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29067 788E           8B46         08            mov	ax,8[bp]
29068 7891           40                         inc	ax
29069 7892           8946         08            mov	8[bp],ax
29070                                           !BCC_EOS
29071                                           ! 4014         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29072                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29073 7895           FF76         08            push	8[bp]
29074                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29075 7898           FF76         06            push	6[bp]
29076                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29077 789B           E8         035D            call	_read_word
29078 789E           83C4                   04  add	sp,*4
29079                                           ! Debug: list unsigned short = ax+0 (used reg = )
29080 78A1           50                         push	ax
29081                                           ! Debug: list int = const $85 (used reg = )
29082 78A2           B8                   0085  mov	ax,#$85
29083 78A5           50                         push	ax
29084                                           ! Debug: list int = const $40 (used reg = )
29085 78A6           B8                   0040  mov	ax,*$40
29086 78A9           50                         push	ax
29087                                           ! Debug: func () void = write_word+0 (used reg = )
29088 78AA           E8         0379            call	_write_word
29089 78AD           83C4                   06  add	sp,*6
29090                                           !BCC_EOS
29091                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29092 78B0           8B46         08            mov	ax,8[bp]
29093 78B3           40                         inc	ax
29094 78B4           40                         inc	ax
29095 78B5           8946         08            mov	8[bp],ax
29096                                           !BCC_EOS
29097                                           ! 4015         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29098                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29099 78B8           FF76         08            push	8[bp]
29100                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29101 78BB           FF76         06            push	6[bp]
29102                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29103 78BE           E8         0327            call	_read_byte
29104 78C1           83C4                   04  add	sp,*4
29105                                           ! Debug: list unsigned char = al+0 (used reg = )
29106 78C4           30E4                       xor	ah,ah
29107 78C6           50                         push	ax
29108                                           ! Debug: list int = const $87 (used reg = )
29109 78C7           B8                   0087  mov	ax,#$87
29110 78CA           50                         push	ax
29111                                           ! Debug: list int = const $40 (used reg = )
29112 78CB           B8                   0040  mov	ax,*$40
29113 78CE           50                         push	ax
29114                                           ! Debug: func () void = write_byte+0 (used reg = )
29115 78CF           E8         033C            call	_write_byte
29116 78D2           83C4                   06  add	sp,*6
29117                                           !BCC_EOS
29118                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29119 78D5           8B46         08            mov	ax,8[bp]
29120 78D8           40                         inc	ax
29121 78D9           8946         08            mov	8[bp],ax
29122                                           !BCC_EOS
29123                                           ! 4016         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29124                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29125 78DC           FF76         08            push	8[bp]
29126                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29127 78DF           FF76         06            push	6[bp]
29128                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29129 78E2           E8         0303            call	_read_byte
29130 78E5           83C4                   04  add	sp,*4
29131                                           ! Debug: list unsigned char = al+0 (used reg = )
29132 78E8           30E4                       xor	ah,ah
29133 78EA           50                         push	ax
29134                                           ! Debug: list int = const $88 (used reg = )
29135 78EB           B8                   0088  mov	ax,#$88
29136 78EE           50                         push	ax
29137                                           ! Debug: list int = const $40 (used reg = )
29138 78EF           B8                   0040  mov	ax,*$40
29139 78F2           50                         push	ax
29140                                           ! Debug: func () void = write_byte+0 (used reg = )
29141 78F3           E8         0318            call	_write_byte
29142 78F6           83C4                   06  add	sp,*6
29143                                           !BCC_EOS
29144                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29145 78F9           8B46         08            mov	ax,8[bp]
29146 78FC           40                         inc	ax
29147 78FD           8946         08            mov	8[bp],ax
29148                                           !BCC_EOS
29149                                           ! 4017         write_byte(0x40,0x89, read_byte(
29150                                           ! 4017 ES, BX)); BX++;
29151                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29152 7900           FF76         08            push	8[bp]
29153                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29154 7903           FF76         06            push	6[bp]
29155                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29156 7906           E8         02DF            call	_read_byte
29157 7909           83C4                   04  add	sp,*4
29158                                           ! Debug: list unsigned char = al+0 (used reg = )
29159 790C           30E4                       xor	ah,ah
29160 790E           50                         push	ax
29161                                           ! Debug: list int = const $89 (used reg = )
29162 790F           B8                   0089  mov	ax,#$89
29163 7912           50                         push	ax
29164                                           ! Debug: list int = const $40 (used reg = )
29165 7913           B8                   0040  mov	ax,*$40
29166 7916           50                         push	ax
29167                                           ! Debug: func () void = write_byte+0 (used reg = )
29168 7917           E8         02F4            call	_write_byte
29169 791A           83C4                   06  add	sp,*6
29170                                           !BCC_EOS
29171                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29172 791D           8B46         08            mov	ax,8[bp]
29173 7920           40                         inc	ax
29174 7921           8946         08            mov	8[bp],ax
29175                                           !BCC_EOS
29176                                           ! 4018         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29177                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29178 7924           FF76         08            push	8[bp]
29179                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29180 7927           FF76         06            push	6[bp]
29181                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29182 792A           E8         02CE            call	_read_word
29183 792D           83C4                   04  add	sp,*4
29184                                           ! Debug: list unsigned short = ax+0 (used reg = )
29185 7930           50                         push	ax
29186                                           ! Debug: list int = const $60 (used reg = )
29187 7931           B8                   0060  mov	ax,*$60
29188 7934           50                         push	ax
29189                                           ! Debug: list int = const $40 (used reg = )
29190 7935           B8                   0040  mov	ax,*$40
29191 7938           50                         push	ax
29192                                           ! Debug: func () void = write_word+0 (used reg = )
29193 7939           E8         02EA            call	_write_word
29194 793C           83C4                   06  add	sp,*6
29195                                           !BCC_EOS
29196                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29197 793F           8B46         08            mov	ax,8[bp]
29198 7942           40                         inc	ax
29199 7943           40                         inc	ax
29200 7944           8946         08            mov	8[bp],ax
29201                                           !BCC_EOS
29202                                           ! 4019         for(i=0;i<8;i++) {
29203                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29204 7947           31C0                       xor	ax,ax
29205 7949           8946         FE            mov	-2[bp],ax
29206                                           !BCC_EOS
29207                                           !BCC_EOS
29208 794C           EB           2F            jmp .28D
29209                       0000794E            .28E:
29210                                           ! 4020             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29211                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29212 794E           FF76         08            push	8[bp]
29213                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29214 7951           FF76         06            push	6[bp]
29215                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29216 7954           E8         02A4            call	_read_word
29217 7957           83C4                   04  add	sp,*4
29218                                           ! Debug: list unsigned short = ax+0 (used reg = )
29219 795A           50                         push	ax
29220                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29221                                           ! Debug: expression subtree swapping
29222 795B           8B46         FE            mov	ax,-2[bp]
29223 795E           D1E0                       shl	ax,*1
29224                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29225                                           ! Debug: expression subtree swapping
29226                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29227 7960           05                   0050  add	ax,*$50
29228 7963           50                         push	ax
29229                                           ! Debug: list int = const $40 (used reg = )
29230 7964           B8                   0040  mov	ax,*$40
29231 7967           50                         push	ax
29232                                           ! Debug: func () void = write_word+0 (used reg = )
29233 7968           E8         02BB            call	_write_word
29234 796B           83C4                   06  add	sp,*6
29235                                           !BCC_EOS
29236                                           ! 4021             BX += 2;
29237                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29238 796E           8B46         08            mov	ax,8[bp]
29239 7971           40                         inc	ax
29240 7972           40                         inc	ax
29241 7973           8946         08            mov	8[bp],ax
29242                                           !BCC_EOS
29243                                           ! 4022         }
29244                                           ! 4023         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29245                       00007976            .28C:
29246                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29247 7976           8B46         FE            mov	ax,-2[bp]
29248 7979           40                         inc	ax
29249 797A           8946         FE            mov	-2[bp],ax
29250                       0000797D            .28D:
29251                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29252 797D           8B46         FE            mov	ax,-2[bp]
29253 7980           3D                   0008  cmp	ax,*8
29254 7983           72           C9            jb 	.28E
29255                       00007985            .28F:
29256                       00007985            .28B:
29257                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29258 7985           FF76         08            push	8[bp]
29259                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29260 7988           FF76         06            push	6[bp]
29261                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29262 798B           E8         026D            call	_read_word
29263 798E           83C4                   04  add	sp,*4
29264                                           ! Debug: list unsigned short = ax+0 (used reg = )
29265 7991           50                         push	ax
29266                                           ! Debug: list int = const $4E (used reg = )
29267 7992           B8                   004E  mov	ax,*$4E
29268 7995           50                         push	ax
29269                                           ! Debug: list int = const $40 (used reg = )
29270 7996           B8                   0040  mov	ax,*$40
29271 7999           50                         push	ax
29272                                           ! Debug: func () void = write_word+0 (used reg = )
29273 799A           E8         0289            call	_write_word
29274 799D           83C4                   06  add	sp,*6
29275                                           !BCC_EOS
29276                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29277 79A0           8B46         08            mov	ax,8[bp]
29278 79A3           40                         inc	ax
29279 79A4           40                         inc	ax
29280 79A5           8946         08            mov	8[bp],ax
29281                                           !BCC_EOS
29282                                           ! 4024         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29283                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29284 79A8           FF76         08            push	8[bp]
29285                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29286 79AB           FF76         06            push	6[bp]
29287                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29288 79AE           E8         0237            call	_read_byte
29289 79B1           83C4                   04  add	sp,*4
29290                                           ! Debug: list unsigned char = al+0 (used reg = )
29291 79B4           30E4                       xor	ah,ah
29292 79B6           50                         push	ax
29293                                           ! Debug: list int = const $62 (used reg = )
29294 79B7           B8                   0062  mov	ax,*$62
29295 79BA           50                         push	ax
29296                                           ! Debug: list int = const $40 (used reg = )
29297 79BB           B8                   0040  mov	ax,*$40
29298 79BE           50                         push	ax
29299                                           ! Debug: func () void = write_byte+0 (used reg = )
29300 79BF           E8         024C            call	_write_byte
29301 79C2           83C4                   06  add	sp,*6
29302                                           !BCC_EOS
29303                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29304 79C5           8B46         08            mov	ax,8[bp]
29305 79C8           40                         inc	ax
29306 79C9           8946         08            mov	8[bp],ax
29307                                           !BCC_EOS
29308                                           ! 4025         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29309                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29310 79CC           FF76         08            push	8[bp]
29311                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29312 79CF           FF76         06            push	6[bp]
29313                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29314 79D2           E8         0226            call	_read_word
29315 79D5           83C4                   04  add	sp,*4
29316                                           ! Debug: list unsigned short = ax+0 (used reg = )
29317 79D8           50                         push	ax
29318                                           ! Debug: list int = const $7C (used reg = )
29319 79D9           B8                   007C  mov	ax,*$7C
29320 79DC           50                         push	ax
29321                                           ! Debug: list int = const 0 (used reg = )
29322 79DD           31C0                       xor	ax,ax
29323 79DF           50                         push	ax
29324                                           ! Debug: func () void = write_word+0 (used reg = )
29325 79E0           E8         0243            call	_write_word
29326 79E3           83C4                   06  add	sp,*6
29327                                           !BCC_EOS
29328                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29329 79E6           8B46         08            mov	ax,8[bp]
29330 79E9           40                         inc	ax
29331 79EA           40                         inc	ax
29332 79EB           8946         08            mov	8[bp],ax
29333                                           !BCC_EOS
29334                                           ! 4026         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29335                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29336 79EE           FF76         08            push	8[bp]
29337                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29338 79F1           FF76         06            push	6[bp]
29339                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29340 79F4           E8         0204            call	_read_word
29341 79F7           83C4                   04  add	sp,*4
29342                                           ! Debug: list unsigned short = ax+0 (used reg = )
29343 79FA           50                         push	ax
29344                                           ! Debug: list int = const $7E (used reg = )
29345 79FB           B8                   007E  mov	ax,*$7E
29346 79FE           50                         push	ax
29347                                           ! Debug: list int = const 0 (used reg = )
29348 79FF           31C0                       xor	ax,ax
29349 7A01           50                         push	ax
29350                                           ! Debug: func () void = write_word+0 (used reg = )
29351 7A02           E8         0221            call	_write_word
29352 7A05           83C4                   06  add	sp,*6
29353                                           !BCC_EOS
29354                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29355 7A08           8B46         08            mov	ax,8[bp]
29356 7A0B           40                         inc	ax
29357 7A0C           40                         inc	ax
29358 7A0D           8946         08            mov	8[bp],ax
29359                                           !BCC_EOS
29360                                           ! 4027         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29361                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29362 7A10           FF76         08            push	8[bp]
29363                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29364 7A13           FF76         06            push	6[bp]
29365                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29366 7A16           E8         01E2            call	_read_word
29367 7A19           83C4                   04  add	sp,*4
29368                                           ! Debug: list unsigned short = ax+0 (used reg = )
29369 7A1C           50                         push	ax
29370                                           ! Debug: list int = const $10C (used reg = )
29371 7A1D           B8                   010C  mov	ax,#$10C
29372 7A20           50                         push	ax
29373                                           ! Debug: list int = const 0 (used reg = )
29374 7A21           31C0                       xor	ax,ax
29375 7A23           50                         push	ax
29376                                           ! Debug: func () void = write_word+0 (used reg = )
29377 7A24           E8         01FF            call	_write_word
29378 7A27           83C4                   06  add	sp,*6
29379                                           !BCC_EOS
29380                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29381 7A2A           8B46         08            mov	ax,8[bp]
29382 7A2D           40                         inc	ax
29383 7A2E           40                         inc	ax
29384 7A2F           8946         08            mov	8[bp],ax
29385                                           !BCC_EOS
29386                                           ! 4028         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29387                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29388 7A32           FF76         08            push	8[bp]
29389                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29390 7A35           FF76         06            push	6[bp]
29391                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29392 7A38           E8         01C0            call	_read_word
29393 7A3B           83C4                   04  add	sp,*4
29394                                           ! Debug: list unsigned short = ax+0 (used reg = )
29395 7A3E           50                         push	ax
29396                                           ! Debug: list int = const $10E (used reg = )
29397 7A3F           B8                   010E  mov	ax,#$10E
29398 7A42           50                         push	ax
29399                                           ! Debug: list int = const 0 (used reg = )
29400 7A43           31C0                       xor	ax,ax
29401 7A45           50                         push	ax
29402                                           ! Debug: func () void = write_word+0 (used reg = )
29403 7A46           E8         01DD            call	_write_word
29404 7A49           83C4                   06  add	sp,*6
29405                                           !BCC_EOS
29406                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29407 7A4C           8B46         08            mov	ax,8[bp]
29408 7A4F           40                         inc	ax
29409 7A50           40                         inc	ax
29410 7A51           8946         08            mov	8[bp],ax
29411                                           !BCC_EOS
29412                                           ! 4029     }
29413                                           ! 4030     if (CX & 4) {
29414                       00007A54            .289:
29415                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29416 7A54           8A46         04            mov	al,4[bp]
29417 7A57           24                     04  and	al,*4
29418 7A59           84C0                       test	al,al
29419 7A5B         0F84         0096            beq 	.290
29420                       00007A5F            .291:
29421                                           ! 4031         BX++;
29422                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29423 7A5F           8B46         08            mov	ax,8[bp]
29424 7A62           40                         inc	ax
29425 7A63           8946         08            mov	8[bp],ax
29426                                           !BCC_EOS
29427                                           ! 4032         v = read_byte(ES, BX); BX++;
29428                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29429 7A66           FF76         08            push	8[bp]
29430                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29431 7A69           FF76         06            push	6[bp]
29432                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29433 7A6C           E8         0179            call	_read_byte
29434 7A6F           83C4                   04  add	sp,*4
29435                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29436 7A72           30E4                       xor	ah,ah
29437 7A74           8946         FA            mov	-6[bp],ax
29438                                           !BCC_EOS
29439                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29440 7A77           8B46         08            mov	ax,8[bp]
29441 7A7A           40                         inc	ax
29442 7A7B           8946         08            mov	8[bp],ax
29443                                           !BCC_EOS
29444                                           ! 4033         outb(0x3c6, read_byte(ES, BX)); BX++;
29445                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29446 7A7E           FF76         08            push	8[bp]
29447                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29448 7A81           FF76         06            push	6[bp]
29449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29450 7A84           E8         0161            call	_read_byte
29451 7A87           83C4                   04  add	sp,*4
29452                                           ! Debug: list unsigned char = al+0 (used reg = )
29453 7A8A           30E4                       xor	ah,ah
29454 7A8C           50                         push	ax
29455                                           ! Debug: list int = const $3C6 (used reg = )
29456 7A8D           B8                   03C6  mov	ax,#$3C6
29457 7A90           50                         push	ax
29458                                           ! Debug: func () void = outb+0 (used reg = )
29459 7A91           E8         01C0            call	_outb
29460 7A94           83C4                   04  add	sp,*4
29461                                           !BCC_EOS
29462                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29463 7A97           8B46         08            mov	ax,8[bp]
29464 7A9A           40                         inc	ax
29465 7A9B           8946         08            mov	8[bp],ax
29466                                           !BCC_EOS
29467                                           ! 4034         outb(0x3c8,0x00);
29468                                           ! Debug: list int = const 0 (used reg = )
29469 7A9E           31C0                       xor	ax,ax
29470 7AA0           50                         push	ax
29471                                           ! Debug: list int = const $3C8 (used reg = )
29472 7AA1           B8                   03C8  mov	ax,#$3C8
29473 7AA4           50                         push	ax
29474                                           ! Debug: func () void = outb+0 (used reg = )
29475 7AA5           E8         01AC            call	_outb
29476 7AA8           83C4                   04  add	sp,*4
29477                                           !BCC_EOS
29478                                           ! 4035         for(i=0;i<256*3;i++) {
29479                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29480 7AAB           31C0                       xor	ax,ax
29481 7AAD           8946         FE            mov	-2[bp],ax
29482                                           !BCC_EOS
29483                                           !BCC_EOS
29484 7AB0           EB           27            jmp .294
29485                       00007AB2            .295:
29486                                           ! 4036             outb(0x3c9, read_byte(ES, BX)); BX++;
29487                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29488 7AB2           FF76         08            push	8[bp]
29489                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29490 7AB5           FF76         06            push	6[bp]
29491                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29492 7AB8           E8         012D            call	_read_byte
29493 7ABB           83C4                   04  add	sp,*4
29494                                           ! Debug: list unsigned char = al+0 (used reg = )
29495 7ABE           30E4                       xor	ah,ah
29496 7AC0           50                         push	ax
29497                                           ! Debug: list int = const $3C9 (used reg = )
29498 7AC1           B8                   03C9  mov	ax,#$3C9
29499 7AC4           50                         push	ax
29500                                           ! Debug: func () void = outb+0 (used reg = )
29501 7AC5           E8         018C            call	_outb
29502 7AC8           83C4                   04  add	sp,*4
29503                                           !BCC_EOS
29504                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29505 7ACB           8B46         08            mov	ax,8[bp]
29506 7ACE           40                         inc	ax
29507 7ACF           8946         08            mov	8[bp],ax
29508                                           !BCC_EOS
29509                                           ! 4037         }
29510                                           ! 4038         BX++;
29511                       00007AD2            .293:
29512                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29513 7AD2           8B46         FE            mov	ax,-2[bp]
29514 7AD5           40                         inc	ax
29515 7AD6           8946         FE            mov	-2[bp],ax
29516                       00007AD9            .294:
29517                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29518 7AD9           8B46         FE            mov	ax,-2[bp]
29519 7ADC           3D                   0300  cmp	ax,#$300
29520 7ADF           72           D1            jb 	.295
29521                       00007AE1            .296:
29522                       00007AE1            .292:
29523                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29524 7AE1           8B46         08            mov	ax,8[bp]
29525 7AE4           40                         inc	ax
29526 7AE5           8946         08            mov	8[bp],ax
29527                                           !BCC_EOS
29528                                           ! 4039         outb(0x3c8, v);
29529                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29530 7AE8           FF76         FA            push	-6[bp]
29531                                           ! Debug: list int = const $3C8 (used reg = )
29532 7AEB           B8                   03C8  mov	ax,#$3C8
29533 7AEE           50                         push	ax
29534                                           ! Debug: func () void = outb+0 (used reg = )
29535 7AEF           E8         0162            call	_outb
29536 7AF2           83C4                   04  add	sp,*4
29537                                           !BCC_EOS
29538                                           ! 4040     }
29539                                           ! 4041     return BX;
29540                       00007AF5            .290:
29541 7AF5           8B46         08            mov	ax,8[bp]
29542 7AF8           89EC                       mov	sp,bp
29543 7AFA           5D                         pop	bp
29544 7AFB           C3                         ret
29545                                           !BCC_EOS
29546                                           ! 4042 }
29547                                           ! 4043 static Bit8u find_vga_entry(mode)
29548                                           ! 4044 Bit8u mode;
29549                       00007AFC            _find_vga_entry:
29550                                           !BCC_EOS
29551                                           ! 4045 {
29552                                           ! 4046  Bit8u i,line=0xFF;
29553 7AFC           55                         push	bp
29554 7AFD           89E5                       mov	bp,sp
29555 7AFF           4C                         dec	sp
29556 7B00           4C                         dec	sp
29557                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29558 7B01           B0                     FF  mov	al,#$FF
29559 7B03           8846         FE            mov	-2[bp],al
29560                                           !BCC_EOS
29561                                           ! 4047  for(i=0;i<=15;i++)
29562                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29563 7B06           30C0                       xor	al,al
29564 7B08           8846         FF            mov	-1[bp],al
29565                                           !BCC_EOS
29566                                           !BCC_EOS
29567                                           ! 4048   if(vga_modes[i].svgamode==mode)
29568 7B0B           EB           23            jmp .299
29569                       00007B0D            .29A:
29570                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29571 7B0D           8A46         FF            mov	al,-1[bp]
29572 7B10           30E4                       xor	ah,ah
29573 7B12           B1                     03  mov	cl,*3
29574 7B14           D3E0                       shl	ax,cl
29575 7B16           89C3                       mov	bx,ax
29576                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29577 7B18           8A87       01FD            mov	al,_vga_modes[bx]
29578 7B1C           3A46         04            cmp	al,4[bp]
29579 7B1F           75           08            jne 	.29B
29580                       00007B21            .29C:
29581                                           ! 4049    {line=i;
29582                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29583 7B21           8A46         FF            mov	al,-1[bp]
29584 7B24           8846         FE            mov	-2[bp],al
29585                                           !BCC_EOS
29586                                           ! 4050     break;
29587 7B27           EB           0E            jmp .297
29588                                           !BCC_EOS
29589                                           ! 4051    }
29590                                           ! 4052  return line;
29591                       00007B29            .29B:
29592                       00007B29            .298:
29593                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29594 7B29           8A46         FF            mov	al,-1[bp]
29595 7B2C           40                         inc	ax
29596 7B2D           8846         FF            mov	-1[bp],al
29597                       00007B30            .299:
29598                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29599 7B30           8A46         FF            mov	al,-1[bp]
29600 7B33           3C                     0F  cmp	al,*$F
29601 7B35           76           D6            jbe	.29A
29602                       00007B37            .29D:
29603                       00007B37            .297:
29604 7B37           8A46         FE            mov	al,-2[bp]
29605 7B3A           89EC                       mov	sp,bp
29606 7B3C           5D                         pop	bp
29607 7B3D           C3                         ret
29608                                           !BCC_EOS
29609                                           ! 4053 }
29610                                           ! 4054 static void memsetb(seg,offset,value,count)
29611                                           ! Register BX used in function find_vga_entry
29612                                           ! 4055   Bit16u seg;
29613                       00007B3E            _memsetb:
29614                                           !BCC_EOS
29615                                           ! 4056   Bit16u offset;
29616                                           !BCC_EOS
29617                                           ! 4057   Bit16u value;
29618                                           !BCC_EOS
29619                                           ! 4058   Bit16u count;
29620                                           !BCC_EOS
29621                                           ! 4059 {
29622                                           ! 4060 #asm
29623                                           !BCC_ASM
29624                       00000008            _memsetb.count	set	8
29625                       00000002            _memsetb.seg	set	2
29626                       00000006            _memsetb.value	set	6
29627                       00000004            _memsetb.offset	set	4
29628 7B3E           55                           push bp
29629 7B3F           89E5                         mov bp, sp
29630 7B41           50                             push ax
29631 7B42           51                             push cx
29632 7B43           06                             push es
29633 7B44           57                             push di
29634 7B45           8B4E         0A                mov cx, 10[bp] ; count
29635 7B48           83F9                   00      cmp cx, #0x00
29636 7B4B           74           10                je memsetb_end
29637 7B4D           8B46         04                mov ax, 4[bp] ; segment
29638 7B50           8EC0                           mov es, ax
29639 7B52           8B46         06                mov ax, 6[bp] ; offset
29640 7B55           89C7                           mov di, ax
29641 7B57           8A46         08                mov al, 8[bp] ; value
29642 7B5A           FC                             cld
29643 7B5B           F3                             rep
29644 7B5C           AA                              stosb
29645                       00007B5D            memsetb_end:
29646 7B5D           5F                             pop di
29647 7B5E           07                             pop es
29648 7B5F           59                             pop cx
29649 7B60           58                             pop ax
29650 7B61           5D                           pop bp
29651                                           ! 4084 endasm
29652                                           !BCC_ENDASM
29653                                           ! 4085 }
29654 7B62           C3                         ret
29655                                           ! 4086 static void memsetw(seg,offset,value,count)
29656                                           ! 4087   Bit16u seg;
29657                       00007B63            _memsetw:
29658                                           !BCC_EOS
29659                                           ! 4088   Bit16u offset;
29660                                           !BCC_EOS
29661                                           ! 4089   Bit16u value;
29662                                           !BCC_EOS
29663                                           ! 4090   Bit16u count;
29664                                           !BCC_EOS
29665                                           ! 4091 {
29666                                           ! 4092 #asm
29667                                           !BCC_ASM
29668                       00000008            _memsetw.count	set	8
29669                       00000002            _memsetw.seg	set	2
29670                       00000006            _memsetw.value	set	6
29671                       00000004            _memsetw.offset	set	4
29672 7B63           55                           push bp
29673 7B64           89E5                         mov bp, sp
29674 7B66           50                             push ax
29675 7B67           51                             push cx
29676 7B68           06                             push es
29677 7B69           57                             push di
29678 7B6A           8B4E         0A                mov cx, 10[bp] ; count
29679 7B6D           83F9                   00      cmp cx, #0x00
29680 7B70           74           10                je memsetw_end
29681 7B72           8B46         04                mov ax, 4[bp] ; segment
29682 7B75           8EC0                           mov es, ax
29683 7B77           8B46         06                mov ax, 6[bp] ; offset
29684 7B7A           89C7                           mov di, ax
29685 7B7C           8B46         08                mov ax, 8[bp] ; value
29686 7B7F           FC                             cld
29687 7B80           F3                             rep
29688 7B81           AB                              stosw
29689                       00007B82            memsetw_end:
29690 7B82           5F                             pop di
29691 7B83           07                             pop es
29692 7B84           59                             pop cx
29693 7B85           58                             pop ax
29694 7B86           5D                           pop bp
29695                                           ! 4116 endasm
29696                                           !BCC_ENDASM
29697                                           ! 4117 }
29698 7B87           C3                         ret
29699                                           ! 4118 static void memcpyb(dseg,doffset,sseg,soffset,count)
29700                                           ! 4119   Bit16u dseg;
29701                       00007B88            _memcpyb:
29702                                           !BCC_EOS
29703                                           ! 4120   Bit16u doffset;
29704                                           !BCC_EOS
29705                                           ! 4121   Bit16u ss
29706                                           ! 4121 eg;
29707                                           !BCC_EOS
29708                                           ! 4122   Bit16u soffset;
29709                                           !BCC_EOS
29710                                           ! 4123   Bit16u count;
29711                                           !BCC_EOS
29712                                           ! 4124 {
29713                                           ! 4125 #asm
29714                                           !BCC_ASM
29715                       0000000A            _memcpyb.count	set	$A
29716                       00000006            _memcpyb.sseg	set	6
29717                       00000008            _memcpyb.soffset	set	8
29718                       00000002            _memcpyb.dseg	set	2
29719                       00000004            _memcpyb.doffset	set	4
29720 7B88           55                           push bp
29721 7B89           89E5                         mov bp, sp
29722 7B8B           50                             push ax
29723 7B8C           51                             push cx
29724 7B8D           06                             push es
29725 7B8E           57                             push di
29726 7B8F           1E                             push ds
29727 7B90           56                             push si
29728 7B91           8B4E         0C                mov cx, 12[bp] ; count
29729 7B94           83F9                   00      cmp cx, #0x0000
29730 7B97           74           17                je memcpyb_end
29731 7B99           8B46         04                mov ax, 4[bp] ; dsegment
29732 7B9C           8EC0                           mov es, ax
29733 7B9E           8B46         06                mov ax, 6[bp] ; doffset
29734 7BA1           89C7                           mov di, ax
29735 7BA3           8B46         08                mov ax, 8[bp] ; ssegment
29736 7BA6           8ED8                           mov ds, ax
29737 7BA8           8B46         0A                mov ax, 10[bp] ; soffset
29738 7BAB           89C6                           mov si, ax
29739 7BAD           FC                             cld
29740 7BAE           F3                             rep
29741 7BAF           A4                              movsb
29742                       00007BB0            memcpyb_end:
29743 7BB0           5E                             pop si
29744 7BB1           1F                             pop ds
29745 7BB2           5F                             pop di
29746 7BB3           07                             pop es
29747 7BB4           59                             pop cx
29748 7BB5           58                             pop ax
29749 7BB6           5D                           pop bp
29750                                           ! 4156 endasm
29751                                           !BCC_ENDASM
29752                                           ! 4157 }
29753 7BB7           C3                         ret
29754                                           ! 4158 static void memcpyw(dseg,doffset,sseg,soffset,count)
29755                                           ! 4159   Bit16u dseg;
29756                       00007BB8            _memcpyw:
29757                                           !BCC_EOS
29758                                           ! 4160   Bit16u doffset;
29759                                           !BCC_EOS
29760                                           ! 4161   Bit16u sseg;
29761                                           !BCC_EOS
29762                                           ! 4162   Bit16u soffset;
29763                                           !BCC_EOS
29764                                           ! 4163   Bit16u count;
29765                                           !BCC_EOS
29766                                           ! 4164 {
29767                                           ! 4165 #asm
29768                                           !BCC_ASM
29769                       0000000A            _memcpyw.count	set	$A
29770                       00000006            _memcpyw.sseg	set	6
29771                       00000008            _memcpyw.soffset	set	8
29772                       00000002            _memcpyw.dseg	set	2
29773                       00000004            _memcpyw.doffset	set	4
29774 7BB8           55                           push bp
29775 7BB9           89E5                         mov bp, sp
29776 7BBB           50                             push ax
29777 7BBC           51                             push cx
29778 7BBD           06                             push es
29779 7BBE           57                             push di
29780 7BBF           1E                             push ds
29781 7BC0           56                             push si
29782 7BC1           8B4E         0C                mov cx, 12[bp] ; count
29783 7BC4           83F9                   00      cmp cx, #0x0000
29784 7BC7           74           17                je memcpyw_end
29785 7BC9           8B46         04                mov ax, 4[bp] ; dsegment
29786 7BCC           8EC0                           mov es, ax
29787 7BCE           8B46         06                mov ax, 6[bp] ; doffset
29788 7BD1           89C7                           mov di, ax
29789 7BD3           8B46         08                mov ax, 8[bp] ; ssegment
29790 7BD6           8ED8                           mov ds, ax
29791 7BD8           8B46         0A                mov ax, 10[bp] ; soffset
29792 7BDB           89C6                           mov si, ax
29793 7BDD           FC                             cld
29794 7BDE           F3                             rep
29795 7BDF           A5                              movsw
29796                       00007BE0            memcpyw_end:
29797 7BE0           5E                             pop si
29798 7BE1           1F                             pop ds
29799 7BE2           5F                             pop di
29800 7BE3           07                             pop es
29801 7BE4           59                             pop cx
29802 7BE5           58                             pop ax
29803 7BE6           5D                           pop bp
29804                                           ! 4196 endasm
29805                                           !BCC_ENDASM
29806                                           ! 4197 }
29807 7BE7           C3                         ret
29808                                           ! 4198 static Bit8u
29809                                           ! 4199 read_byte(seg, offset)
29810                                           ! 4200   Bit16u seg;
29811                       00007BE8            _read_byte:
29812                                           !BCC_EOS
29813                                           ! 4201   Bit16u offset;
29814                                           !BCC_EOS
29815                                           ! 4202 {
29816                                           ! 4203 #asm
29817                                           !BCC_ASM
29818                       00000002            _read_byte.seg	set	2
29819                       00000004            _read_byte.offset	set	4
29820 7BE8           55                           push bp
29821 7BE9           89E5                         mov bp, sp
29822 7BEB           53                             push bx
29823 7BEC           1E                             push ds
29824 7BED           8B46         04                mov ax, 4[bp] ; segment
29825 7BF0           8ED8                           mov ds, ax
29826 7BF2           8B5E         06                mov bx, 6[bp] ; offset
29827 7BF5           8A07                           mov al, [bx]
29828                                               ;; al = return value (byte)
29829 7BF7           1F                             pop ds
29830 7BF8           5B                             pop bx
29831 7BF9           5D                           pop bp
29832                                           ! 4216 endasm
29833                                           !BCC_ENDASM
29834                                           ! 4217 }
29835 7BFA           C3                         ret
29836                                           ! 4218 static Bit16u
29837                                           ! 4219 read_word(seg, offset)
29838                                           ! 4220   Bit16u seg;
29839                       00007BFB            _read_word:
29840                                           !BCC_EOS
29841                                           ! 4221   Bit16u offset;
29842                                           !BCC_EOS
29843                                           ! 4222 {
29844                                           ! 4223 #asm
29845                                           !BCC_ASM
29846                       00000002            _read_word.seg	set	2
29847                       00000004            _read_word.offset	set	4
29848 7BFB           55                           push bp
29849 7BFC           89E5                         mov bp, sp
29850 7BFE           53                             push bx
29851 7BFF           1E                             push ds
29852 7C00           8B46         04                mov ax, 4[bp] ; segment
29853 7C03           8ED8                           mov ds, ax
29854 7C05           8B5E         06                mov bx, 6[bp] ; offset
29855 7C08           8B07                           mov ax, [bx]
29856                                               ;; ax = return value (word)
29857 7C0A           1F                             pop ds
29858 7C0B           5B                             pop bx
29859 7C0C           5D                           pop bp
29860                                           ! 4236 endasm
29861                                           !BCC_ENDASM
29862                                           ! 4237 }
29863 7C0D           C3                         ret
29864                                           ! 4238 static void
29865                                           ! 4239 write_byte(seg, offset, data)
29866                                           ! 4240   Bit16u seg;
29867                       00007C0E            _write_byte:
29868                                           !BCC_EOS
29869                                           ! 4241   Bit16u offset;
29870                                           !BCC_EOS
29871                                           ! 4242   Bit8u data;
29872                                           !BCC_EOS
29873                                           ! 4243 {
29874                                           ! 4244 #asm
29875                                           !BCC_ASM
29876                       00000002            _write_byte.seg	set	2
29877                       00000006            _write_byte.data	set	6
29878                       00000004            _write_byte.offset	set	4
29879 7C0E           55                           push bp
29880 7C0F           89E5                         mov bp, sp
29881 7C11           50                             push ax
29882 7C12           53                             push bx
29883 7C13           1E                             push ds
29884 7C14           8B46         04                mov ax, 4[bp] ; segment
29885 7C17           8ED8                           mov ds, ax
29886 7C19           8B5E         06                mov bx, 6[bp] ; offset
29887 7C1C           8A46         08                mov al, 8[bp] ; data byte
29888 7C1F           8807                           mov [bx], al ; write data byte
29889 7C21           1F                             pop ds
29890 7C22           5B                             pop bx
29891 7C23           58                             pop ax
29892 7C24           5D                           pop bp
29893                                           ! 4259 endasm
29894                                           !BCC_ENDASM
29895                                           ! 4260 }
29896 7C25           C3                         ret
29897                                           ! 4261 static void
29898                                           ! 4262 write_word(seg, offset, 
29899                                           ! 4262 data)
29900                                           ! 4263   Bit16u seg;
29901                       00007C26            _write_word:
29902                                           !BCC_EOS
29903                                           ! 4264   Bit16u offset;
29904                                           !BCC_EOS
29905                                           ! 4265   Bit16u data;
29906                                           !BCC_EOS
29907                                           ! 4266 {
29908                                           ! 4267 #asm
29909                                           !BCC_ASM
29910                       00000002            _write_word.seg	set	2
29911                       00000006            _write_word.data	set	6
29912                       00000004            _write_word.offset	set	4
29913 7C26           55                           push bp
29914 7C27           89E5                         mov bp, sp
29915 7C29           50                             push ax
29916 7C2A           53                             push bx
29917 7C2B           1E                             push ds
29918 7C2C           8B46         04                mov ax, 4[bp] ; segment
29919 7C2F           8ED8                           mov ds, ax
29920 7C31           8B5E         06                mov bx, 6[bp] ; offset
29921 7C34           8B46         08                mov ax, 8[bp] ; data word
29922 7C37           8907                           mov [bx], ax ; write data word
29923 7C39           1F                             pop ds
29924 7C3A           5B                             pop bx
29925 7C3B           58                             pop ax
29926 7C3C           5D                           pop bp
29927                                           ! 4282 endasm
29928                                           !BCC_ENDASM
29929                                           ! 4283 }
29930 7C3D           C3                         ret
29931                                           ! 4284  Bit8u
29932                                           ! 4285 inb(port)
29933                                           ! 4286   Bit16u port;
29934                                           export	_inb
29935                       00007C3E            _inb:
29936                                           !BCC_EOS
29937                                           ! 4287 {
29938                                           ! 4288 #asm
29939                                           !BCC_ASM
29940                       00000002            _inb.port	set	2
29941 7C3E           55                           push bp
29942 7C3F           89E5                         mov bp, sp
29943 7C41           52                             push dx
29944 7C42           8B56         04                mov dx, 4[bp]
29945 7C45           EC                             in al, dx
29946 7C46           5A                             pop dx
29947 7C47           5D                           pop bp
29948                                           ! 4296 endasm
29949                                           !BCC_ENDASM
29950                                           ! 4297 }
29951 7C48           C3                         ret
29952                                           ! 4298   Bit16u
29953                                           ! 4299 inw(port)
29954                                           ! 4300   Bit16u port;
29955                                           export	_inw
29956                       00007C49            _inw:
29957                                           !BCC_EOS
29958                                           ! 4301 {
29959                                           ! 4302 #asm
29960                                           !BCC_ASM
29961                       00000002            _inw.port	set	2
29962 7C49           55                           push bp
29963 7C4A           89E5                         mov bp, sp
29964 7C4C           52                             push dx
29965 7C4D           8B56         04                mov dx, 4[bp]
29966 7C50           ED                             in ax, dx
29967 7C51           5A                             pop dx
29968 7C52           5D                           pop bp
29969                                           ! 4310 endasm
29970                                           !BCC_ENDASM
29971                                           ! 4311 }
29972 7C53           C3                         ret
29973                                           ! 4312   void
29974                                           ! 4313 outb(port, val)
29975                                           ! 4314   Bit16u port;
29976                                           export	_outb
29977                       00007C54            _outb:
29978                                           !BCC_EOS
29979                                           ! 4315   Bit8u val;
29980                                           !BCC_EOS
29981                                           ! 4316 {
29982                                           ! 4317 #asm
29983                                           !BCC_ASM
29984                       00000004            _outb.val	set	4
29985                       00000002            _outb.port	set	2
29986 7C54           55                           push bp
29987 7C55           89E5                         mov bp, sp
29988 7C57           50                             push ax
29989 7C58           52                             push dx
29990 7C59           8B56         04                mov dx, 4[bp]
29991 7C5C           8A46         06                mov al, 6[bp]
29992 7C5F           EE                             out dx, al
29993 7C60           5A                             pop dx
29994 7C61           58                             pop ax
29995 7C62           5D                           pop bp
29996                                           ! 4328 endasm
29997                                           !BCC_ENDASM
29998                                           ! 4329 }
29999 7C63           C3                         ret
30000                                           ! 4330   void
30001                                           ! 4331 outw(port, val)
30002                                           ! 4332   Bit16u port;
30003                                           export	_outw
30004                       00007C64            _outw:
30005                                           !BCC_EOS
30006                                           ! 4333   Bit16u val;
30007                                           !BCC_EOS
30008                                           ! 4334 {
30009                                           ! 4335 #asm
30010                                           !BCC_ASM
30011                       00000004            _outw.val	set	4
30012                       00000002            _outw.port	set	2
30013 7C64           55                           push bp
30014 7C65           89E5                         mov bp, sp
30015 7C67           50                             push ax
30016 7C68           52                             push dx
30017 7C69           8B56         04                mov dx, 4[bp]
30018 7C6C           8B46         06                mov ax, 6[bp]
30019 7C6F           EF                             out dx, ax
30020 7C70           5A                             pop dx
30021 7C71           58                             pop ax
30022 7C72           5D                           pop bp
30023                                           ! 4346 endasm
30024                                           !BCC_ENDASM
30025                                           ! 4347 }
30026 7C73           C3                         ret
30027                                           ! 4348 Bit16u get_SS()
30028                                           ! 4349 {
30029                                           export	_get_SS
30030                       00007C74            _get_SS:
30031                                           ! 4350 #asm
30032                                           !BCC_ASM
30033 7C74           8CD0                         mov ax, ss
30034                                           ! 4352 endasm
30035                                           !BCC_ENDASM
30036                                           ! 4353 }
30037 7C76           C3                         ret
30038                                           ! 4354 void printf(s)
30039                                           ! 4355   Bit8u *s;
30040                                           export	_printf
30041                       00007C77            _printf:
30042                                           !BCC_EOS
30043                                           ! 4356 {
30044                                           ! 4357   Bit8u c, format_char;
30045                                           !BCC_EOS
30046                                           ! 4358   Boolean in_format;
30047                                           !BCC_EOS
30048                                           ! 4359   unsigned format_width, i;
30049                                           !BCC_EOS
30050                                           ! 4360   Bit16u *arg_ptr;
30051                                           !BCC_EOS
30052                                           ! 4361   Bit16u arg_seg, arg, digit, nibble, shift_count;
30053                                           !BCC_EOS
30054                                           ! 4362   arg_ptr = &s;
30055 7C77           55                         push	bp
30056 7C78           89E5                       mov	bp,sp
30057 7C7A           83C4                   EC  add	sp,*-$14
30058                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30059 7C7D           8D5E         04            lea	bx,4[bp]
30060 7C80           895E         F6            mov	-$A[bp],bx
30061                                           !BCC_EOS
30062                                           ! 4363   arg_seg = get_SS();
30063                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30064 7C83           E8         FFEE            call	_get_SS
30065                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30066 7C86           8946         F4            mov	-$C[bp],ax
30067                                           !BCC_EOS
30068                                           ! 4364   in_format = 0;
30069                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30070 7C89           31C0                       xor	ax,ax
30071 7C8B           8946         FC            mov	-4[bp],ax
30072                                           !BCC_EOS
30073                                           ! 4365   format_width = 0;
30074                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30075 7C8E           31C0                       xor	ax,ax
30076 7C90           8946         FA            mov	-6[bp],ax
30077                                           !BCC_EOS
30078                                           ! 4366   while (c = read_byte(0xc000, s)) {
30079 7C93           E9         0104            br 	.29F
30080                       00007C96            .2A0:
30081                                           ! 4367     if ( c == '%' ) {
30082                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30083 7C96           8A46         FF            mov	al,-1[bp]
30084 7C99           3C                     25  cmp	al,*$25
30085 7C9B           75           0E            jne 	.2A1
30086                       00007C9D            .2A2:
30087                                           ! 4368       in_format = 1;
30088                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30089 7C9D           B8                   0001  mov	ax,*1
30090 7CA0           8946         FC            mov	-4[bp],ax
30091                                           !BCC_EOS
30092                                           ! 4369       format_width = 0;
30093                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30094 7CA3           31C0                       xor	ax,ax
30095 7CA5           8946         FA            mov	-6[bp],ax
30096                                           !BCC_EOS
30097                                           ! 4370       }
30098                                           ! 4371     else if (in_format) {
30099 7CA8           E9         00E8            br 	.2A3
30100                       00007CAB            .2A1:
30101 7CAB           8B46         FC            mov	ax,-4[bp]
30102 7CAE           85C0                       test	ax,ax
30103 7CB0         0F84         00CF            beq 	.2A4
30104                       00007CB4            .2A5:
30105                                           ! 4372       if ( (c>='0') && (c<='9') ) {
30106                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30107 7CB4           8A46         FF            mov	al,-1[bp]
30108 7CB7           3C                     30  cmp	al,*$30
30109 7CB9           72           28            jb  	.2A6
30110                       00007CBB            .2A8:
30111                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30112 7CBB           8A46         FF            mov	al,-1[bp]
30113 7CBE           3C                     39  cmp	al,*$39
30114 7CC0           77           21            ja  	.2A6
30115                       00007CC2            .2A7:
30116                                           ! 4373         format_width = (format_width * 10) + (c - '0');
30117                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30118 7CC2           8A46         FF            mov	al,-1[bp]
30119 7CC5           30E4                       xor	ah,ah
30120 7CC7           05                   FFD0  add	ax,*-$30
30121 7CCA           50                         push	ax
30122                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30123 7CCB           8B46         FA            mov	ax,-6[bp]
30124 7CCE           89C2                       mov	dx,ax
30125 7CD0           D1E0                       shl	ax,*1
30126 7CD2           D1E0                       shl	ax,*1
30127 7CD4           01D0                       add	ax,dx
30128 7CD6           D1E0                       shl	ax,*1
30129                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30130 7CD8           0346         EA            add	ax,-$16[bp]
30131 7CDB           44                         inc	sp
30132 7CDC           44                         inc	sp
30133                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30134 7CDD           8946         FA            mov	-6[bp],ax
30135                                           !BCC_EOS
30136                                           ! 4374         }
30137                                           ! 4375       else if (c == 'x') {
30138 7CE0           E9         009E            br 	.2A9
30139                       00007CE3            .2A6:
30140                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30141 7CE3           8A46         FF            mov	al,-1[bp]
30142 7CE6           3C                     78  cmp	al,*$78
30143 7CE8         0F85         0095            bne 	.2AA
30144                       00007CEC            .2AB:
30145                                           ! 4376         arg_ptr++;
30146                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30147 7CEC           8B5E         F6            mov	bx,-$A[bp]
30148 7CEF           43                         inc	bx
30149 7CF0           43                         inc	bx
30150 7CF1           895E         F6            mov	-$A[bp],bx
30151                                           !BCC_EOS
30152                                           ! 4377         arg = read_word(arg_seg, arg_ptr);
30153                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30154 7CF4           FF76         F6            push	-$A[bp]
30155                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30156 7CF7           FF76         F4            push	-$C[bp]
30157                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30158 7CFA           E8         FEFE            call	_read_word
30159 7CFD           83C4                   04  add	sp,*4
30160                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30161 7D00           8946         F2            mov	-$E[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4378         if (format_width == 0)
30164                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30165 7D03           8B46         FA            mov	ax,-6[bp]
30166 7D06           85C0                       test	ax,ax
30167 7D08           75           06            jne 	.2AC
30168                       00007D0A            .2AD:
30169                                           ! 4379           format_width = 4;
30170                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30171 7D0A           B8                   0004  mov	ax,*4
30172 7D0D           8946         FA            mov	-6[bp],ax
30173                                           !BCC_EOS
30174                                           ! 4380         i = 0;
30175                       00007D10            .2AC:
30176                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30177 7D10           31C0                       xor	ax,ax
30178 7D12           8946         F8            mov	-8[bp],ax
30179                                           !BCC_EOS
30180                                           ! 4381         digit = format_width - 1;
30181                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30182 7D15           8B46         FA            mov	ax,-6[bp]
30183                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30184 7D18           48                         dec	ax
30185 7D19           8946         F0            mov	-$10[bp],ax
30186                                           !BCC_EOS
30187                                           ! 4382         for (i=0; i<format_width; i++) {
30188                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30189 7D1C           31C0                       xor	ax,ax
30190 7D1E           8946         F8            mov	-8[bp],ax
30191                                           !BCC_EOS
30192                                           !BCC_EOS
30193 7D21           EB           51            jmp .2B0
30194                       00007D23            .2B1:
30195                                           ! 4383           nibble = (arg >> (4 * digit)) & 0x000f;
30196                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30197                                           ! Debug: expression subtree swapping
30198 7D23           8B46         F0            mov	ax,-$10[bp]
30199 7D26           D1E0                       shl	ax,*1
30200 7D28           D1E0                       shl	ax,*1
30201                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30202 7D2A           89C3                       mov	bx,ax
30203 7D2C           8B46         F2            mov	ax,-$E[bp]
30204 7D2F           89D9                       mov	cx,bx
30205 7D31           D3E8                       shr	ax,cl
30206                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30207 7D33           24                     0F  and	al,*$F
30208                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30209 7D35           30E4                       xor	ah,ah
30210 7D37           8946         EE            mov	-$12[bp],ax
30211                                           !BCC_EOS
30212                                           ! 4384           if (nibble <= 9)
30213                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30214 7D3A           8B46         EE            mov	ax,-$12[bp]
30215 7D3D           3D                   0009  cmp	ax,*9
30216 7D40           77           13            ja  	.2B2
30217                       00007D42            .2B3:
30218                                           ! 4385             outb(0x0500, nibble + '0');
30219                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30220 7D42           8B46         EE            mov	ax,-$12[bp]
30221                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30222 7D45           05                   0030  add	ax,*$30
30223 7D48           50                         push	ax
30224                                           ! Debug: list int = const $500 (used reg = )
30225 7D49           B8                   0500  mov	ax,#$500
30226 7D4C           50                         push	ax
30227                                           ! Debug: func () void = outb+0 (used reg = )
30228 7D4D           E8         FF04            call	_outb
30229 7D50           83C4                   04  add	sp,*4
30230                                           !BCC_EOS
30231                                           ! 4386           else
30232                                           ! 4387             outb(0x0500, (nibble - 10) + 'A');
30233 7D53           EB           11            jmp .2B4
30234                       00007D55            .2B2:
30235                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30236 7D55           8B46         EE            mov	ax,-$12[bp]
30237                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30238                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30239 7D58           05                   0037  add	ax,*$37
30240 7D5B           50                         push	ax
30241                                           ! Debug: list int = const $500 (used reg = )
30242 7D5C           B8                   0500  mov	ax,#$500
30243 7D5F           50                         push	ax
30244                                           ! Debug: func () void = outb+0 (used reg = )
30245 7D60           E8         FEF1            call	_outb
30246 7D63           83C4                   04  add	sp,*4
30247                                           !BCC_EOS
30248                                           ! 4388           digit--;
30249                       00007D66            .2B4:
30250                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30251 7D66           8B46         F0            mov	ax,-$10[bp]
30252 7D69           48                         dec	ax
30253 7D6A           8946         F0            mov	-$10[bp],ax
30254                                           !BCC_EOS
30255                                           ! 4389           }
30256                                           ! 4390         in_format = 0;
30257                       00007D6D            .2AF:
30258                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30259 7D6D           8B46         F8            mov	ax,-8[bp]
30260 7D70           40                         inc	ax
30261 7D71           8946         F8            mov	-8[bp],ax
30262                       00007D74            .2B0:
30263                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30264 7D74           8B46         F8            mov	ax,-8[bp]
30265 7D77           3B46         FA            cmp	ax,-6[bp]
30266 7D7A           72           A7            jb 	.2B1
30267                       00007D7C            .2B5:
30268                       00007D7C            .2AE:
30269                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30270 7D7C           31C0                       xor	ax,ax
30271 7D7E           8946         FC            mov	-4[bp],ax
30272                                           !BCC_EOS
30273                                           ! 4391         }
30274                                           ! 4392       }
30275                       00007D81            .2AA:
30276                       00007D81            .2A9:
30277                                           ! 4393     else {
30278 7D81           EB           10            jmp .2B6
30279                       00007D83            .2A4:
30280                                           ! 4394       outb(0x0500, c);
30281                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30282 7D83           8A46         FF            mov	al,-1[bp]
30283 7D86           30E4                       xor	ah,ah
30284 7D88           50                         push	ax
30285                                           ! Debug: list int = const $500 (used reg = )
30286 7D89           B8                   0500  mov	ax,#$500
30287 7D8C           50                         push	ax
30288                                           ! Debug: func () void = outb+0 (used reg = )
30289 7D8D           E8         FEC4            call	_outb
30290 7D90           83C4                   04  add	sp,*4
30291                                           !BCC_EOS
30292                                           ! 4395       }
30293                                           ! 4396     s ++;
30294                       00007D93            .2B6:
30295                       00007D93            .2A3:
30296                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30297 7D93           8B5E         04            mov	bx,4[bp]
30298 7D96           43                         inc	bx
30299 7D97           895E         04            mov	4[bp],bx
30300                                           !BCC_EOS
30301                                           ! 4397 
30302                                           ! 4397     }
30303                                           ! 4398 }
30304                       00007D9A            .29F:
30305                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30306 7D9A           FF76         04            push	4[bp]
30307                                           ! Debug: list unsigned int = const $C000 (used reg = )
30308 7D9D           B8                   C000  mov	ax,#$C000
30309 7DA0           50                         push	ax
30310                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30311 7DA1           E8         FE44            call	_read_byte
30312 7DA4           83C4                   04  add	sp,*4
30313                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30314 7DA7           8846         FF            mov	-1[bp],al
30315 7DAA           84C0                       test	al,al
30316 7DAC         0F85         FEE6            bne 	.2A0
30317                       00007DB0            .2B7:
30318                       00007DB0            .29E:
30319 7DB0           89EC                       mov	sp,bp
30320 7DB2           5D                         pop	bp
30321 7DB3           C3                         ret
30322                                           ! 4399 #asm
30323                                           !BCC_ASM
30324                       00000002            _printf.s	set	2
30325                                             ; get LFB address from PCI
30326                                             ; in - ax: PCI device vendor
30327                                             ; out - ax: LFB address (high 16 bit)
30328                                             ;; NOTE - may be called in protected mode
30329                       00007DB4            _pci_get_lfb_addr:
30330 7DB4           53                           push bx
30331 7DB5           51                           push cx
30332 7DB6           52                           push dx
30333 7DB7     66    50                           push eax
30334 7DB9           89C3                           mov bx, ax
30335 7DBB           31C9                           xor cx, cx
30336 7DBD           B2                     00      mov dl, #0x00
30337 7DBF           E8         0033                call pci_read_reg
30338 7DC2           3D                   FFFF      cmp ax, #0xffff
30339 7DC5           74           12                jz pci_get_lfb_addr_5
30340                       00007DC7             pci_get_lfb_addr_3:
30341 7DC7           B2                     00      mov dl, #0x00
30342 7DC9           E8         0029                call pci_read_reg
30343 7DCC           39D8                           cmp ax, bx ;; check vendor
30344 7DCE           74           0D                jz pci_get_lfb_addr_4
30345 7DD0           83C1                   08      add cx, #0x8
30346 7DD3           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30347 7DD7           72           EE                jb pci_get_lfb_addr_3
30348                       00007DD9             pci_get_lfb_addr_5:
30349 7DD9           31D2                           xor dx, dx ;; no LFB
30350 7DDB           EB           10                jmp pci_get_lfb_addr_6
30351                       00007DDD             pci_get_lfb_addr_4:
30352 7DDD           B2                     10      mov dl, #0x10 ;; I/O space #0
30353 7DDF           E8         0013                call pci_read_reg
30354 7DE2           A9                   FFF1      test ax, #0xfff1
30355 7DE5           75           F2                jnz pci_get_lfb_addr_5
30356 7DE7     66    C1E8                   10      shr eax, #16
30357 7DEB           89C2                           mov dx, ax ;; LFB address
30358                       00007DED             pci_get_lfb_addr_6:
30359 7DED     66    58                           pop eax
30360 7DEF           89D0                         mov ax, dx
30361 7DF1           5A                           pop dx
30362 7DF2           59                           pop cx
30363 7DF3           5B                           pop bx
30364 7DF4           C3                           ret
30365                                             ; read PCI register
30366                                             ; in - cx: device/function
30367                                             ; in - dl: register
30368                                             ; out - eax: value
30369                       00007DF5            pci_read_reg:
30370 7DF5     66    B8               00800000    mov eax, #0x00800000
30371 7DFB           89C8                         mov ax, cx
30372 7DFD     66    C1E0                   08    shl eax, #8
30373 7E01           88D0                         mov al, dl
30374 7E03           BA                   0CF8    mov dx, #0xcf8
30375 7E06     66    EF                           out dx, eax
30376 7E08           80C2                   04    add dl, #4
30377 7E0B     66    ED                           in eax, dx
30378 7E0D           C3                           ret
30379                                           ! 4454 endasm
30380                                           !BCC_ENDASM
30381                                           ! 4455 static ModeInfoListItem mode_info_list[]=
30382                                           ! Register BX used in function printf
30383                                           ! 4456 {
30384                                           
30385                       00007E0E            _mode_info_list:
30386                                           ! 4457 { 0x0100,
30387 7E0E                      0100            .word	$100
30388                                           ! 4458 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30389 7E10                      009B            .word	$9B
30390                                           ! 4459                           0x01 | 0x02 | 0x04,
30391 7E12                        07            .byte	7
30392                                           ! 4460                           0,
30393 7E13                        00            .byte	0
30394                                           ! 4461                           64,
30395 7E14                      0040            .word	$40
30396                                           ! 4462                    64,
30397 7E16                      0040            .word	$40
30398                                           ! 4463                        0xA000,
30399 7E18                      A000            .word	$A000
30400                                           ! 4464                        0x0000,
30401 7E1A                      0000            .word	0
30402                                           ! 4465                       0,
30403 7E1C                      0000            .word	0
30404 7E1E                      0000            .word	0
30405                                           ! 4466                             640,
30406 7E20                      0280            .word	$280
30407                                           ! 4467                        640,
30408 7E22                      0280            .word	$280
30409                                           ! 4468                        400,
30410 7E24                      0190            .word	$190
30411                                           ! 4469                      8,
30412 7E26                        08            .byte	8
30413                                           ! 4470                      16,
30414 7E27                        10            .byte	$10
30415                                           ! 4471                           1,
30416 7E28                        01            .byte	1
30417                                           ! 4472                         8,
30418 7E29                        08            .byte	8
30419                                           ! 4473                          4,
30420 7E2A                        04            .byte	4
30421                                           ! 4474                        0x04,
30422 7E2B                        04            .byte	4
30423                                           ! 4475                     0,
30424 7E2C                        00            .byte	0
30425                                           ! 4476                               64,
30426 7E2D                        40            .byte	$40
30427                                           ! 4477                          0,
30428 7E2E                        00            .byte	0
30429                                           ! 4478                        0,
30430 7E2F                        00            .byte	0
30431                                           ! 4479                             0,
30432 7E30                        00            .byte	0
30433                                           ! 4480                          0,
30434 7E31                        00            .byte	0
30435                                           ! 4481                               0,
30436 7E32                        00            .byte	0
30437                                           ! 4482                         0,
30438 7E33                        00            .byte	0
30439                                           ! 4483                              0,
30440 7E34                        00            .byte	0
30441                                           ! 4484                         0,
30442 7E35                        00            .byte	0
30443                                           ! 4485                              0,
30444 7E36                        00            .byte	0
30445                                           ! 4486                                0,
30446 7E37                        00            .byte	0
30447                                           ! 4487                        0xE
30448                                           ! 4487 0000000,
30449 7E38                      0000            .word	0
30450 7E3A                      E000            .word	$E000
30451                                           ! 4488                               0,
30452 7E3C                      0000            .word	0
30453 7E3E                      0000            .word	0
30454                                           ! 4489                             0,
30455 7E40                      0000            .word	0
30456                                           ! 4490                                640,
30457 7E42                      0280            .word	$280
30458                                           ! 4491                             0,
30459 7E44                        00            .byte	0
30460                                           ! 4492                             0,
30461 7E45                        00            .byte	0
30462                                           ! 4493                           0,
30463 7E46                        00            .byte	0
30464                                           ! 4494                                0,
30465 7E47                        00            .byte	0
30466                                           ! 4495                             0,
30467 7E48                        00            .byte	0
30468                                           ! 4496                                  0,
30469 7E49                        00            .byte	0
30470                                           ! 4497                            0,
30471 7E4A                        00            .byte	0
30472                                           ! 4498                                 0,
30473 7E4B                        00            .byte	0
30474                                           ! 4499                            0,
30475 7E4C                        00            .byte	0
30476                                           ! 4500                                 0,
30477 7E4D                        00            .byte	0
30478                                           ! 4501                          0,
30479 7E4E                      0000            .word	0
30480 7E50                      0000            .word	0
30481                                           ! 4502 } },
30482                                           ! 4503 { 0x0101,
30483 7E52                      0101            .word	$101
30484                                           ! 4504 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30485 7E54                      009B            .word	$9B
30486                                           ! 4505                           0x01 | 0x02 | 0x04,
30487 7E56                        07            .byte	7
30488                                           ! 4506                           0,
30489 7E57                        00            .byte	0
30490                                           ! 4507                           64,
30491 7E58                      0040            .word	$40
30492                                           ! 4508                    64,
30493 7E5A                      0040            .word	$40
30494                                           ! 4509                        0xA000,
30495 7E5C                      A000            .word	$A000
30496                                           ! 4510                        0x0000,
30497 7E5E                      0000            .word	0
30498                                           ! 4511                       0,
30499 7E60                      0000            .word	0
30500 7E62                      0000            .word	0
30501                                           ! 4512                             640,
30502 7E64                      0280            .word	$280
30503                                           ! 4513                        640,
30504 7E66                      0280            .word	$280
30505                                           ! 4514                        480,
30506 7E68                      01E0            .word	$1E0
30507                                           ! 4515                      8,
30508 7E6A                        08            .byte	8
30509                                           ! 4516                      16,
30510 7E6B                        10            .byte	$10
30511                                           ! 4517                           1,
30512 7E6C                        01            .byte	1
30513                                           ! 4518                         8,
30514 7E6D                        08            .byte	8
30515                                           ! 4519                          5,
30516 7E6E                        05            .byte	5
30517                                           ! 4520                        0x04,
30518 7E6F                        04            .byte	4
30519                                           ! 4521                     0,
30520 7E70                        00            .byte	0
30521                                           ! 4522                               53,
30522 7E71                        35            .byte	$35
30523                                           ! 4523                          0,
30524 7E72                        00            .byte	0
30525                                           ! 4524                        0,
30526 7E73                        00            .byte	0
30527                                           ! 4525                             0,
30528 7E74                        00            .byte	0
30529                                           ! 4526                          0,
30530 7E75                        00            .byte	0
30531                                           ! 4527                               0,
30532 7E76                        00            .byte	0
30533                                           ! 4528                         0,
30534 7E77                        00            .byte	0
30535                                           ! 4529                              0,
30536 7E78                        00            .byte	0
30537                                           ! 4530                         0,
30538 7E79                        00            .byte	0
30539                                           ! 4531                              0,
30540 7E7A                        00            .byte	0
30541                                           ! 4532                                0,
30542 7E7B                        00            .byte	0
30543                                           ! 4533                        0xE0000000,
30544 7E7C                      0000            .word	0
30545 7E7E                      E000            .word	$E000
30546                                           ! 4534                               0,
30547 7E80                      0000            .word	0
30548 7E82                      0000            .word	0
30549                                           ! 4535                             0,
30550 7E84                      0000            .word	0
30551                                           ! 4536                                640,
30552 7E86                      0280            .word	$280
30553                                           ! 4537                             0,
30554 7E88                        00            .byte	0
30555                                           ! 4538                             0,
30556 7E89                        00            .byte	0
30557                                           ! 4539                           0,
30558 7E8A                        00            .byte	0
30559                                           ! 4540                                0,
30560 7E8B                        00            .byte	0
30561                                           ! 4541                             0,
30562 7E8C                        00            .byte	0
30563                                           ! 4542                                  0,
30564 7E8D                        00            .byte	0
30565                                           ! 4543                            0,
30566 7E8E                        00            .byte	0
30567                                           ! 4544                                 0,
30568 7E8F                        00            .byte	0
30569                                           ! 4545                            0,
30570 7E90                        00            .byte	0
30571                                           ! 4546                                 0,
30572 7E91                        00            .byte	0
30573                                           ! 4547                          0,
30574 7E92                      0000            .word	0
30575 7E94                      0000            .word	0
30576                                           ! 4548 } },
30577                                           ! 4549 { 0x0102,
30578 7E96                      0102            .word	$102
30579                                           ! 4550 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30580 7E98                      001F            .word	$1F
30581                                           ! 4551                           0x01 | 0x02 | 0x04,
30582 7E9A                        07            .byte	7
30583                                           ! 4552                           0,
30584 7E9B                        00            .byte	0
30585                                           ! 4553                           64,
30586 7E9C                      0040            .word	$40
30587                                           ! 4554                    64,
30588 7E9E                      0040            .word	$40
30589                                           ! 4555                        0xA000,
30590 7EA0                      A000            .word	$A000
30591                                           ! 4556   
30592                                           ! 4556                      0x0000,
30593 7EA2                      0000            .word	0
30594                                           ! 4557                       0,
30595 7EA4                      0000            .word	0
30596 7EA6                      0000            .word	0
30597                                           ! 4558                             100,
30598 7EA8                      0064            .word	$64
30599                                           ! 4559                        800,
30600 7EAA                      0320            .word	$320
30601                                           ! 4560                        600,
30602 7EAC                      0258            .word	$258
30603                                           ! 4561                      8,
30604 7EAE                        08            .byte	8
30605                                           ! 4562                      16,
30606 7EAF                        10            .byte	$10
30607                                           ! 4563                           4,
30608 7EB0                        04            .byte	4
30609                                           ! 4564                         4,
30610 7EB1                        04            .byte	4
30611                                           ! 4565                          1,
30612 7EB2                        01            .byte	1
30613                                           ! 4566                        0x03,
30614 7EB3                        03            .byte	3
30615                                           ! 4567                     0,
30616 7EB4                        00            .byte	0
30617                                           ! 4568                               68,
30618 7EB5                        44            .byte	$44
30619                                           ! 4569                          0,
30620 7EB6                        00            .byte	0
30621                                           ! 4570                        0,
30622 7EB7                        00            .byte	0
30623                                           ! 4571                             0,
30624 7EB8                        00            .byte	0
30625                                           ! 4572                          0,
30626 7EB9                        00            .byte	0
30627                                           ! 4573                               0,
30628 7EBA                        00            .byte	0
30629                                           ! 4574                         0,
30630 7EBB                        00            .byte	0
30631                                           ! 4575                              0,
30632 7EBC                        00            .byte	0
30633                                           ! 4576                         0,
30634 7EBD                        00            .byte	0
30635                                           ! 4577                              0,
30636 7EBE                        00            .byte	0
30637                                           ! 4578                                0,
30638 7EBF                        00            .byte	0
30639                                           ! 4579                        0,
30640 7EC0                      0000            .word	0
30641 7EC2                      0000            .word	0
30642                                           ! 4580                               0,
30643 7EC4                      0000            .word	0
30644 7EC6                      0000            .word	0
30645                                           ! 4581                             0,
30646 7EC8                      0000            .word	0
30647                                           ! 4582                                100,
30648 7ECA                      0064            .word	$64
30649                                           ! 4583                             0,
30650 7ECC                        00            .byte	0
30651                                           ! 4584                             0,
30652 7ECD                        00            .byte	0
30653                                           ! 4585                           0,
30654 7ECE                        00            .byte	0
30655                                           ! 4586                                0,
30656 7ECF                        00            .byte	0
30657                                           ! 4587                             0,
30658 7ED0                        00            .byte	0
30659                                           ! 4588                                  0,
30660 7ED1                        00            .byte	0
30661                                           ! 4589                            0,
30662 7ED2                        00            .byte	0
30663                                           ! 4590                                 0,
30664 7ED3                        00            .byte	0
30665                                           ! 4591                            0,
30666 7ED4                        00            .byte	0
30667                                           ! 4592                                 0,
30668 7ED5                        00            .byte	0
30669                                           ! 4593                          0,
30670 7ED6                      0000            .word	0
30671 7ED8                      0000            .word	0
30672                                           ! 4594 } },
30673                                           ! 4595 { 0x0103,
30674 7EDA                      0103            .word	$103
30675                                           ! 4596 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30676 7EDC                      009B            .word	$9B
30677                                           ! 4597                           0x01 | 0x02 | 0x04,
30678 7EDE                        07            .byte	7
30679                                           ! 4598                           0,
30680 7EDF                        00            .byte	0
30681                                           ! 4599                           64,
30682 7EE0                      0040            .word	$40
30683                                           ! 4600                    64,
30684 7EE2                      0040            .word	$40
30685                                           ! 4601                        0xA000,
30686 7EE4                      A000            .word	$A000
30687                                           ! 4602                        0x0000,
30688 7EE6                      0000            .word	0
30689                                           ! 4603                       0,
30690 7EE8                      0000            .word	0
30691 7EEA                      0000            .word	0
30692                                           ! 4604                             800,
30693 7EEC                      0320            .word	$320
30694                                           ! 4605                        800,
30695 7EEE                      0320            .word	$320
30696                                           ! 4606                        600,
30697 7EF0                      0258            .word	$258
30698                                           ! 4607                      8,
30699 7EF2                        08            .byte	8
30700                                           ! 4608                      16,
30701 7EF3                        10            .byte	$10
30702                                           ! 4609                           1,
30703 7EF4                        01            .byte	1
30704                                           ! 4610                         8,
30705 7EF5                        08            .byte	8
30706                                           ! 4611                          8,
30707 7EF6                        08            .byte	8
30708                                           ! 4612                        0x04,
30709 7EF7                        04            .byte	4
30710                                           ! 4613                     0,
30711 7EF8                        00            .byte	0
30712                                           ! 4614                               33,
30713 7EF9                        21            .byte	$21
30714                                           ! 4615                          0,
30715 7EFA                        00            .byte	0
30716                                           ! 4616                        0,
30717 7EFB                        00            .byte	0
30718                                           ! 4617                             0,
30719 7EFC                        00            .byte	0
30720                                           ! 4618                          0,
30721 7EFD                        00            .byte	0
30722                                           ! 4619                               0,
30723 7EFE                        00            .byte	0
30724                                           ! 4620                         0,
30725 7EFF                        00            .byte	0
30726                                           ! 4621                              0,
30727 7F00                        00            .byte	0
30728                                           ! 4622                         0,
30729 7F01                        00            .byte	0
30730                                           ! 4623                              0,
30731 7F02                        00            .byte	0
30732                                           ! 4624                                0,
30733 7F03                        00            .byte	0
30734                                           ! 4625                        0xE0000
30735                                           ! 4625 000,
30736 7F04                      0000            .word	0
30737 7F06                      E000            .word	$E000
30738                                           ! 4626                               0,
30739 7F08                      0000            .word	0
30740 7F0A                      0000            .word	0
30741                                           ! 4627                             0,
30742 7F0C                      0000            .word	0
30743                                           ! 4628                                800,
30744 7F0E                      0320            .word	$320
30745                                           ! 4629                             0,
30746 7F10                        00            .byte	0
30747                                           ! 4630                             0,
30748 7F11                        00            .byte	0
30749                                           ! 4631                           0,
30750 7F12                        00            .byte	0
30751                                           ! 4632                                0,
30752 7F13                        00            .byte	0
30753                                           ! 4633                             0,
30754 7F14                        00            .byte	0
30755                                           ! 4634                                  0,
30756 7F15                        00            .byte	0
30757                                           ! 4635                            0,
30758 7F16                        00            .byte	0
30759                                           ! 4636                                 0,
30760 7F17                        00            .byte	0
30761                                           ! 4637                            0,
30762 7F18                        00            .byte	0
30763                                           ! 4638                                 0,
30764 7F19                        00            .byte	0
30765                                           ! 4639                          0,
30766 7F1A                      0000            .word	0
30767 7F1C                      0000            .word	0
30768                                           ! 4640 } },
30769                                           ! 4641 { 0x0104,
30770 7F1E                      0104            .word	$104
30771                                           ! 4642 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30772 7F20                      001F            .word	$1F
30773                                           ! 4643                           0x01 | 0x02 | 0x04,
30774 7F22                        07            .byte	7
30775                                           ! 4644                           0,
30776 7F23                        00            .byte	0
30777                                           ! 4645                           64,
30778 7F24                      0040            .word	$40
30779                                           ! 4646                    64,
30780 7F26                      0040            .word	$40
30781                                           ! 4647                        0xA000,
30782 7F28                      A000            .word	$A000
30783                                           ! 4648                        0x0000,
30784 7F2A                      0000            .word	0
30785                                           ! 4649                       0,
30786 7F2C                      0000            .word	0
30787 7F2E                      0000            .word	0
30788                                           ! 4650                             128,
30789 7F30                      0080            .word	$80
30790                                           ! 4651                        1024,
30791 7F32                      0400            .word	$400
30792                                           ! 4652                        768,
30793 7F34                      0300            .word	$300
30794                                           ! 4653                      8,
30795 7F36                        08            .byte	8
30796                                           ! 4654                      16,
30797 7F37                        10            .byte	$10
30798                                           ! 4655                           4,
30799 7F38                        04            .byte	4
30800                                           ! 4656                         4,
30801 7F39                        04            .byte	4
30802                                           ! 4657                          2,
30803 7F3A                        02            .byte	2
30804                                           ! 4658                        0x03,
30805 7F3B                        03            .byte	3
30806                                           ! 4659                     0,
30807 7F3C                        00            .byte	0
30808                                           ! 4660                               41,
30809 7F3D                        29            .byte	$29
30810                                           ! 4661                          0,
30811 7F3E                        00            .byte	0
30812                                           ! 4662                        0,
30813 7F3F                        00            .byte	0
30814                                           ! 4663                             0,
30815 7F40                        00            .byte	0
30816                                           ! 4664                          0,
30817 7F41                        00            .byte	0
30818                                           ! 4665                               0,
30819 7F42                        00            .byte	0
30820                                           ! 4666                         0,
30821 7F43                        00            .byte	0
30822                                           ! 4667                              0,
30823 7F44                        00            .byte	0
30824                                           ! 4668                         0,
30825 7F45                        00            .byte	0
30826                                           ! 4669                              0,
30827 7F46                        00            .byte	0
30828                                           ! 4670                                0,
30829 7F47                        00            .byte	0
30830                                           ! 4671                        0,
30831 7F48                      0000            .word	0
30832 7F4A                      0000            .word	0
30833                                           ! 4672                               0,
30834 7F4C                      0000            .word	0
30835 7F4E                      0000            .word	0
30836                                           ! 4673                             0,
30837 7F50                      0000            .word	0
30838                                           ! 4674                                128,
30839 7F52                      0080            .word	$80
30840                                           ! 4675                             0,
30841 7F54                        00            .byte	0
30842                                           ! 4676                             0,
30843 7F55                        00            .byte	0
30844                                           ! 4677                           0,
30845 7F56                        00            .byte	0
30846                                           ! 4678                                0,
30847 7F57                        00            .byte	0
30848                                           ! 4679                             0,
30849 7F58                        00            .byte	0
30850                                           ! 4680                                  0,
30851 7F59                        00            .byte	0
30852                                           ! 4681                            0,
30853 7F5A                        00            .byte	0
30854                                           ! 4682                                 0,
30855 7F5B                        00            .byte	0
30856                                           ! 4683                            0,
30857 7F5C                        00            .byte	0
30858                                           ! 4684                                 0,
30859 7F5D                        00            .byte	0
30860                                           ! 4685                          0,
30861 7F5E                      0000            .word	0
30862 7F60                      0000            .word	0
30863                                           ! 4686 } },
30864                                           ! 4687 { 0x0105,
30865 7F62                      0105            .word	$105
30866                                           ! 4688 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30867 7F64                      009B            .word	$9B
30868                                           ! 4689                           0x01 | 0x02 | 0x04,
30869 7F66                        07            .byte	7
30870                                           ! 4690                           0,
30871 7F67                        00            .byte	0
30872                                           ! 4691                           64,
30873 7F68                      0040            .word	$40
30874                                           ! 4692                    64,
30875 7F6A                      0040            .word	$40
30876                                           ! 4693                        0xA000,
30877 7F6C                      A000            .word	$A000
30878                                           ! 4694               
30879                                           ! 4694          0x0000,
30880 7F6E                      0000            .word	0
30881                                           ! 4695                       0,
30882 7F70                      0000            .word	0
30883 7F72                      0000            .word	0
30884                                           ! 4696                             1024,
30885 7F74                      0400            .word	$400
30886                                           ! 4697                        1024,
30887 7F76                      0400            .word	$400
30888                                           ! 4698                        768,
30889 7F78                      0300            .word	$300
30890                                           ! 4699                      8,
30891 7F7A                        08            .byte	8
30892                                           ! 4700                      16,
30893 7F7B                        10            .byte	$10
30894                                           ! 4701                           1,
30895 7F7C                        01            .byte	1
30896                                           ! 4702                         8,
30897 7F7D                        08            .byte	8
30898                                           ! 4703                          12,
30899 7F7E                        0C            .byte	$C
30900                                           ! 4704                        0x04,
30901 7F7F                        04            .byte	4
30902                                           ! 4705                     0,
30903 7F80                        00            .byte	0
30904                                           ! 4706                               20,
30905 7F81                        14            .byte	$14
30906                                           ! 4707                          0,
30907 7F82                        00            .byte	0
30908                                           ! 4708                        0,
30909 7F83                        00            .byte	0
30910                                           ! 4709                             0,
30911 7F84                        00            .byte	0
30912                                           ! 4710                          0,
30913 7F85                        00            .byte	0
30914                                           ! 4711                               0,
30915 7F86                        00            .byte	0
30916                                           ! 4712                         0,
30917 7F87                        00            .byte	0
30918                                           ! 4713                              0,
30919 7F88                        00            .byte	0
30920                                           ! 4714                         0,
30921 7F89                        00            .byte	0
30922                                           ! 4715                              0,
30923 7F8A                        00            .byte	0
30924                                           ! 4716                                0,
30925 7F8B                        00            .byte	0
30926                                           ! 4717                        0xE0000000,
30927 7F8C                      0000            .word	0
30928 7F8E                      E000            .word	$E000
30929                                           ! 4718                               0,
30930 7F90                      0000            .word	0
30931 7F92                      0000            .word	0
30932                                           ! 4719                             0,
30933 7F94                      0000            .word	0
30934                                           ! 4720                                1024,
30935 7F96                      0400            .word	$400
30936                                           ! 4721                             0,
30937 7F98                        00            .byte	0
30938                                           ! 4722                             0,
30939 7F99                        00            .byte	0
30940                                           ! 4723                           0,
30941 7F9A                        00            .byte	0
30942                                           ! 4724                                0,
30943 7F9B                        00            .byte	0
30944                                           ! 4725                             0,
30945 7F9C                        00            .byte	0
30946                                           ! 4726                                  0,
30947 7F9D                        00            .byte	0
30948                                           ! 4727                            0,
30949 7F9E                        00            .byte	0
30950                                           ! 4728                                 0,
30951 7F9F                        00            .byte	0
30952                                           ! 4729                            0,
30953 7FA0                        00            .byte	0
30954                                           ! 4730                                 0,
30955 7FA1                        00            .byte	0
30956                                           ! 4731                          0,
30957 7FA2                      0000            .word	0
30958 7FA4                      0000            .word	0
30959                                           ! 4732 } },
30960                                           ! 4733 { 0x0106,
30961 7FA6                      0106            .word	$106
30962                                           ! 4734 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30963 7FA8                      001F            .word	$1F
30964                                           ! 4735                           0x01 | 0x02 | 0x04,
30965 7FAA                        07            .byte	7
30966                                           ! 4736                           0,
30967 7FAB                        00            .byte	0
30968                                           ! 4737                           64,
30969 7FAC                      0040            .word	$40
30970                                           ! 4738                    64,
30971 7FAE                      0040            .word	$40
30972                                           ! 4739                        0xA000,
30973 7FB0                      A000            .word	$A000
30974                                           ! 4740                        0x0000,
30975 7FB2                      0000            .word	0
30976                                           ! 4741                       0,
30977 7FB4                      0000            .word	0
30978 7FB6                      0000            .word	0
30979                                           ! 4742                             160,
30980 7FB8                      00A0            .word	$A0
30981                                           ! 4743                        1280,
30982 7FBA                      0500            .word	$500
30983                                           ! 4744                        1024,
30984 7FBC                      0400            .word	$400
30985                                           ! 4745                      8,
30986 7FBE                        08            .byte	8
30987                                           ! 4746                      16,
30988 7FBF                        10            .byte	$10
30989                                           ! 4747                           4,
30990 7FC0                        04            .byte	4
30991                                           ! 4748                         4,
30992 7FC1                        04            .byte	4
30993                                           ! 4749                          3,
30994 7FC2                        03            .byte	3
30995                                           ! 4750                        0x03,
30996 7FC3                        03            .byte	3
30997                                           ! 4751                     0,
30998 7FC4                        00            .byte	0
30999                                           ! 4752                               24,
31000 7FC5                        18            .byte	$18
31001                                           ! 4753                          0,
31002 7FC6                        00            .byte	0
31003                                           ! 4754                        0,
31004 7FC7                        00            .byte	0
31005                                           ! 4755                             0,
31006 7FC8                        00            .byte	0
31007                                           ! 4756                          0,
31008 7FC9                        00            .byte	0
31009                                           ! 4757                               0,
31010 7FCA                        00            .byte	0
31011                                           ! 4758                         0,
31012 7FCB                        00            .byte	0
31013                                           ! 4759                              0,
31014 7FCC                        00            .byte	0
31015                                           ! 4760                         0,
31016 7FCD                        00            .byte	0
31017                                           ! 4761                              0,
31018 7FCE                        00            .byte	0
31019                                           ! 4762                                0,
31020 7FCF                        00            .byte	0
31021                                           ! 4763                        0,
31022 7FD0                      0000            .word	0
31023 7FD2                      0000            .word	0
31024                                           ! 4764  
31025                                           ! 4764                              0,
31026 7FD4                      0000            .word	0
31027 7FD6                      0000            .word	0
31028                                           ! 4765                             0,
31029 7FD8                      0000            .word	0
31030                                           ! 4766                                160,
31031 7FDA                      00A0            .word	$A0
31032                                           ! 4767                             0,
31033 7FDC                        00            .byte	0
31034                                           ! 4768                             0,
31035 7FDD                        00            .byte	0
31036                                           ! 4769                           0,
31037 7FDE                        00            .byte	0
31038                                           ! 4770                                0,
31039 7FDF                        00            .byte	0
31040                                           ! 4771                             0,
31041 7FE0                        00            .byte	0
31042                                           ! 4772                                  0,
31043 7FE1                        00            .byte	0
31044                                           ! 4773                            0,
31045 7FE2                        00            .byte	0
31046                                           ! 4774                                 0,
31047 7FE3                        00            .byte	0
31048                                           ! 4775                            0,
31049 7FE4                        00            .byte	0
31050                                           ! 4776                                 0,
31051 7FE5                        00            .byte	0
31052                                           ! 4777                          0,
31053 7FE6                      0000            .word	0
31054 7FE8                      0000            .word	0
31055                                           ! 4778 } },
31056                                           ! 4779 { 0x0107,
31057 7FEA                      0107            .word	$107
31058                                           ! 4780 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31059 7FEC                      009B            .word	$9B
31060                                           ! 4781                           0x01 | 0x02 | 0x04,
31061 7FEE                        07            .byte	7
31062                                           ! 4782                           0,
31063 7FEF                        00            .byte	0
31064                                           ! 4783                           64,
31065 7FF0                      0040            .word	$40
31066                                           ! 4784                    64,
31067 7FF2                      0040            .word	$40
31068                                           ! 4785                        0xA000,
31069 7FF4                      A000            .word	$A000
31070                                           ! 4786                        0x0000,
31071 7FF6                      0000            .word	0
31072                                           ! 4787                       0,
31073 7FF8                      0000            .word	0
31074 7FFA                      0000            .word	0
31075                                           ! 4788                             1280,
31076 7FFC                      0500            .word	$500
31077                                           ! 4789                        1280,
31078 7FFE                      0500            .word	$500
31079                                           ! 4790                        1024,
31080 8000                      0400            .word	$400
31081                                           ! 4791                      8,
31082 8002                        08            .byte	8
31083                                           ! 4792                      16,
31084 8003                        10            .byte	$10
31085                                           ! 4793                           1,
31086 8004                        01            .byte	1
31087                                           ! 4794                         8,
31088 8005                        08            .byte	8
31089                                           ! 4795                          20,
31090 8006                        14            .byte	$14
31091                                           ! 4796                        0x04,
31092 8007                        04            .byte	4
31093                                           ! 4797                     0,
31094 8008                        00            .byte	0
31095                                           ! 4798                               11,
31096 8009                        0B            .byte	$B
31097                                           ! 4799                          0,
31098 800A                        00            .byte	0
31099                                           ! 4800                        0,
31100 800B                        00            .byte	0
31101                                           ! 4801                             0,
31102 800C                        00            .byte	0
31103                                           ! 4802                          0,
31104 800D                        00            .byte	0
31105                                           ! 4803                               0,
31106 800E                        00            .byte	0
31107                                           ! 4804                         0,
31108 800F                        00            .byte	0
31109                                           ! 4805                              0,
31110 8010                        00            .byte	0
31111                                           ! 4806                         0,
31112 8011                        00            .byte	0
31113                                           ! 4807                              0,
31114 8012                        00            .byte	0
31115                                           ! 4808                                0,
31116 8013                        00            .byte	0
31117                                           ! 4809                        0xE0000000,
31118 8014                      0000            .word	0
31119 8016                      E000            .word	$E000
31120                                           ! 4810                               0,
31121 8018                      0000            .word	0
31122 801A                      0000            .word	0
31123                                           ! 4811                             0,
31124 801C                      0000            .word	0
31125                                           ! 4812                                1280,
31126 801E                      0500            .word	$500
31127                                           ! 4813                             0,
31128 8020                        00            .byte	0
31129                                           ! 4814                             0,
31130 8021                        00            .byte	0
31131                                           ! 4815                           0,
31132 8022                        00            .byte	0
31133                                           ! 4816                                0,
31134 8023                        00            .byte	0
31135                                           ! 4817                             0,
31136 8024                        00            .byte	0
31137                                           ! 4818                                  0,
31138 8025                        00            .byte	0
31139                                           ! 4819                            0,
31140 8026                        00            .byte	0
31141                                           ! 4820                                 0,
31142 8027                        00            .byte	0
31143                                           ! 4821                            0,
31144 8028                        00            .byte	0
31145                                           ! 4822                                 0,
31146 8029                        00            .byte	0
31147                                           ! 4823                          0,
31148 802A                      0000            .word	0
31149 802C                      0000            .word	0
31150                                           ! 4824 } },
31151                                           ! 4825 { 0x010d,
31152 802E                      010D            .word	$10D
31153                                           ! 4826 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31154 8030                      009B            .word	$9B
31155                                           ! 4827                           0x01 | 0x02 | 0x04,
31156 8032                        07            .byte	7
31157                                           ! 4828                           0,
31158 8033                        00            .byte	0
31159                                           ! 4829                           64,
31160 8034                      0040            .word	$40
31161                                           ! 4830                    64,
31162 8036                      0040            .word	$40
31163                                           ! 4831                        0xA000,
31164 8038                      A000            .word	$A000
31165                                           ! 4832        
31166                                           ! 4832                 0x0000,
31167 803A                      0000            .word	0
31168                                           ! 4833                       0,
31169 803C                      0000            .word	0
31170 803E                      0000            .word	0
31171                                           ! 4834                             640,
31172 8040                      0280            .word	$280
31173                                           ! 4835                        320,
31174 8042                      0140            .word	$140
31175                                           ! 4836                        200,
31176 8044                      00C8            .word	$C8
31177                                           ! 4837                      8,
31178 8046                        08            .byte	8
31179                                           ! 4838                      16,
31180 8047                        10            .byte	$10
31181                                           ! 4839                           1,
31182 8048                        01            .byte	1
31183                                           ! 4840                         15,
31184 8049                        0F            .byte	$F
31185                                           ! 4841                          2,
31186 804A                        02            .byte	2
31187                                           ! 4842                        0x06,
31188 804B                        06            .byte	6
31189                                           ! 4843                     0,
31190 804C                        00            .byte	0
31191                                           ! 4844                               130,
31192 804D                        82            .byte	$82
31193                                           ! 4845                          0,
31194 804E                        00            .byte	0
31195                                           ! 4846                        5,
31196 804F                        05            .byte	5
31197                                           ! 4847                             10,
31198 8050                        0A            .byte	$A
31199                                           ! 4848                          5,
31200 8051                        05            .byte	5
31201                                           ! 4849                               5,
31202 8052                        05            .byte	5
31203                                           ! 4850                         5,
31204 8053                        05            .byte	5
31205                                           ! 4851                              0,
31206 8054                        00            .byte	0
31207                                           ! 4852                         1,
31208 8055                        01            .byte	1
31209                                           ! 4853                              15,
31210 8056                        0F            .byte	$F
31211                                           ! 4854                                0,
31212 8057                        00            .byte	0
31213                                           ! 4855                        0xE0000000,
31214 8058                      0000            .word	0
31215 805A                      E000            .word	$E000
31216                                           ! 4856                               0,
31217 805C                      0000            .word	0
31218 805E                      0000            .word	0
31219                                           ! 4857                             0,
31220 8060                      0000            .word	0
31221                                           ! 4858                                640,
31222 8062                      0280            .word	$280
31223                                           ! 4859                             0,
31224 8064                        00            .byte	0
31225                                           ! 4860                             0,
31226 8065                        00            .byte	0
31227                                           ! 4861                           5,
31228 8066                        05            .byte	5
31229                                           ! 4862                                10,
31230 8067                        0A            .byte	$A
31231                                           ! 4863                             5,
31232 8068                        05            .byte	5
31233                                           ! 4864                                  5,
31234 8069                        05            .byte	5
31235                                           ! 4865                            5,
31236 806A                        05            .byte	5
31237                                           ! 4866                                 0,
31238 806B                        00            .byte	0
31239                                           ! 4867                            1,
31240 806C                        01            .byte	1
31241                                           ! 4868                                 15,
31242 806D                        0F            .byte	$F
31243                                           ! 4869                          0,
31244 806E                      0000            .word	0
31245 8070                      0000            .word	0
31246                                           ! 4870 } },
31247                                           ! 4871 { 0x010e,
31248 8072                      010E            .word	$10E
31249                                           ! 4872 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31250 8074                      009B            .word	$9B
31251                                           ! 4873                           0x01 | 0x02 | 0x04,
31252 8076                        07            .byte	7
31253                                           ! 4874                           0,
31254 8077                        00            .byte	0
31255                                           ! 4875                           64,
31256 8078                      0040            .word	$40
31257                                           ! 4876                    64,
31258 807A                      0040            .word	$40
31259                                           ! 4877                        0xA000,
31260 807C                      A000            .word	$A000
31261                                           ! 4878                        0x0000,
31262 807E                      0000            .word	0
31263                                           ! 4879                       0,
31264 8080                      0000            .word	0
31265 8082                      0000            .word	0
31266                                           ! 4880                             640,
31267 8084                      0280            .word	$280
31268                                           ! 4881                        320,
31269 8086                      0140            .word	$140
31270                                           ! 4882                        200,
31271 8088                      00C8            .word	$C8
31272                                           ! 4883                      8,
31273 808A                        08            .byte	8
31274                                           ! 4884                      16,
31275 808B                        10            .byte	$10
31276                                           ! 4885                           1,
31277 808C                        01            .byte	1
31278                                           ! 4886                         16,
31279 808D                        10            .byte	$10
31280                                           ! 4887                          2,
31281 808E                        02            .byte	2
31282                                           ! 4888                        0x06,
31283 808F                        06            .byte	6
31284                                           ! 4889                     0,
31285 8090                        00            .byte	0
31286                                           ! 4890                               130,
31287 8091                        82            .byte	$82
31288                                           ! 4891                          0,
31289 8092                        00            .byte	0
31290                                           ! 4892                        5,
31291 8093                        05            .byte	5
31292                                           ! 4893                             11,
31293 8094                        0B            .byte	$B
31294                                           ! 4894                          6,
31295 8095                        06            .byte	6
31296                                           ! 4895                               5,
31297 8096                        05            .byte	5
31298                                           ! 4896                         5,
31299 8097                        05            .byte	5
31300                                           ! 4897                              0,
31301 8098                        00            .byte	0
31302                                           ! 4898                         0,
31303 8099                        00            .byte	0
31304                                           ! 4899                              0,
31305 809A                        00            .byte	0
31306                                           ! 4900                                0,
31307 809B                        00            .byte	0
31308                                           ! 4901                  
31309                                           ! 4901       0xE0000000,
31310 809C                      0000            .word	0
31311 809E                      E000            .word	$E000
31312                                           ! 4902                               0,
31313 80A0                      0000            .word	0
31314 80A2                      0000            .word	0
31315                                           ! 4903                             0,
31316 80A4                      0000            .word	0
31317                                           ! 4904                                640,
31318 80A6                      0280            .word	$280
31319                                           ! 4905                             0,
31320 80A8                        00            .byte	0
31321                                           ! 4906                             0,
31322 80A9                        00            .byte	0
31323                                           ! 4907                           5,
31324 80AA                        05            .byte	5
31325                                           ! 4908                                11,
31326 80AB                        0B            .byte	$B
31327                                           ! 4909                             6,
31328 80AC                        06            .byte	6
31329                                           ! 4910                                  5,
31330 80AD                        05            .byte	5
31331                                           ! 4911                            5,
31332 80AE                        05            .byte	5
31333                                           ! 4912                                 0,
31334 80AF                        00            .byte	0
31335                                           ! 4913                            0,
31336 80B0                        00            .byte	0
31337                                           ! 4914                                 0,
31338 80B1                        00            .byte	0
31339                                           ! 4915                          0,
31340 80B2                      0000            .word	0
31341 80B4                      0000            .word	0
31342                                           ! 4916 } },
31343                                           ! 4917 { 0x010f,
31344 80B6                      010F            .word	$10F
31345                                           ! 4918 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31346 80B8                      009B            .word	$9B
31347                                           ! 4919                           0x01 | 0x02 | 0x04,
31348 80BA                        07            .byte	7
31349                                           ! 4920                           0,
31350 80BB                        00            .byte	0
31351                                           ! 4921                           64,
31352 80BC                      0040            .word	$40
31353                                           ! 4922                    64,
31354 80BE                      0040            .word	$40
31355                                           ! 4923                        0xA000,
31356 80C0                      A000            .word	$A000
31357                                           ! 4924                        0x0000,
31358 80C2                      0000            .word	0
31359                                           ! 4925                       0,
31360 80C4                      0000            .word	0
31361 80C6                      0000            .word	0
31362                                           ! 4926                             960,
31363 80C8                      03C0            .word	$3C0
31364                                           ! 4927                        320,
31365 80CA                      0140            .word	$140
31366                                           ! 4928                        200,
31367 80CC                      00C8            .word	$C8
31368                                           ! 4929                      8,
31369 80CE                        08            .byte	8
31370                                           ! 4930                      16,
31371 80CF                        10            .byte	$10
31372                                           ! 4931                           1,
31373 80D0                        01            .byte	1
31374                                           ! 4932                         24,
31375 80D1                        18            .byte	$18
31376                                           ! 4933                          3,
31377 80D2                        03            .byte	3
31378                                           ! 4934                        0x06,
31379 80D3                        06            .byte	6
31380                                           ! 4935                     0,
31381 80D4                        00            .byte	0
31382                                           ! 4936                               86,
31383 80D5                        56            .byte	$56
31384                                           ! 4937                          0,
31385 80D6                        00            .byte	0
31386                                           ! 4938                        8,
31387 80D7                        08            .byte	8
31388                                           ! 4939                             16,
31389 80D8                        10            .byte	$10
31390                                           ! 4940                          8,
31391 80D9                        08            .byte	8
31392                                           ! 4941                               8,
31393 80DA                        08            .byte	8
31394                                           ! 4942                         8,
31395 80DB                        08            .byte	8
31396                                           ! 4943                              0,
31397 80DC                        00            .byte	0
31398                                           ! 4944                         0,
31399 80DD                        00            .byte	0
31400                                           ! 4945                              0,
31401 80DE                        00            .byte	0
31402                                           ! 4946                                0,
31403 80DF                        00            .byte	0
31404                                           ! 4947                        0xE0000000,
31405 80E0                      0000            .word	0
31406 80E2                      E000            .word	$E000
31407                                           ! 4948                               0,
31408 80E4                      0000            .word	0
31409 80E6                      0000            .word	0
31410                                           ! 4949                             0,
31411 80E8                      0000            .word	0
31412                                           ! 4950                                960,
31413 80EA                      03C0            .word	$3C0
31414                                           ! 4951                             0,
31415 80EC                        00            .byte	0
31416                                           ! 4952                             0,
31417 80ED                        00            .byte	0
31418                                           ! 4953                           8,
31419 80EE                        08            .byte	8
31420                                           ! 4954                                16,
31421 80EF                        10            .byte	$10
31422                                           ! 4955                             8,
31423 80F0                        08            .byte	8
31424                                           ! 4956                                  8,
31425 80F1                        08            .byte	8
31426                                           ! 4957                            8,
31427 80F2                        08            .byte	8
31428                                           ! 4958                                 0,
31429 80F3                        00            .byte	0
31430                                           ! 4959                            0,
31431 80F4                        00            .byte	0
31432                                           ! 4960                                 0,
31433 80F5                        00            .byte	0
31434                                           ! 4961                          0,
31435 80F6                      0000            .word	0
31436 80F8                      0000            .word	0
31437                                           ! 4962 } },
31438                                           ! 4963 { 0x0110,
31439 80FA                      0110            .word	$110
31440                                           ! 4964 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31441 80FC                      009B            .word	$9B
31442                                           ! 4965                           0x01 | 0x02 | 0x04,
31443 80FE                        07            .byte	7
31444                                           ! 4966                           0,
31445 80FF                        00            .byte	0
31446                                           ! 4967                           64,
31447 8100                      0040            .word	$40
31448                                           ! 4968                    64,
31449 8102                      0040            .word	$40
31450                                           ! 4969                     
31451                                           ! 4969    0xA000,
31452 8104                      A000            .word	$A000
31453                                           ! 4970                        0x0000,
31454 8106                      0000            .word	0
31455                                           ! 4971                       0,
31456 8108                      0000            .word	0
31457 810A                      0000            .word	0
31458                                           ! 4972                             1280,
31459 810C                      0500            .word	$500
31460                                           ! 4973                        640,
31461 810E                      0280            .word	$280
31462                                           ! 4974                        480,
31463 8110                      01E0            .word	$1E0
31464                                           ! 4975                      8,
31465 8112                        08            .byte	8
31466                                           ! 4976                      16,
31467 8113                        10            .byte	$10
31468                                           ! 4977                           1,
31469 8114                        01            .byte	1
31470                                           ! 4978                         15,
31471 8115                        0F            .byte	$F
31472                                           ! 4979                          10,
31473 8116                        0A            .byte	$A
31474                                           ! 4980                        0x06,
31475 8117                        06            .byte	6
31476                                           ! 4981                     0,
31477 8118                        00            .byte	0
31478                                           ! 4982                               26,
31479 8119                        1A            .byte	$1A
31480                                           ! 4983                          0,
31481 811A                        00            .byte	0
31482                                           ! 4984                        5,
31483 811B                        05            .byte	5
31484                                           ! 4985                             10,
31485 811C                        0A            .byte	$A
31486                                           ! 4986                          5,
31487 811D                        05            .byte	5
31488                                           ! 4987                               5,
31489 811E                        05            .byte	5
31490                                           ! 4988                         5,
31491 811F                        05            .byte	5
31492                                           ! 4989                              0,
31493 8120                        00            .byte	0
31494                                           ! 4990                         1,
31495 8121                        01            .byte	1
31496                                           ! 4991                              15,
31497 8122                        0F            .byte	$F
31498                                           ! 4992                                0,
31499 8123                        00            .byte	0
31500                                           ! 4993                        0xE0000000,
31501 8124                      0000            .word	0
31502 8126                      E000            .word	$E000
31503                                           ! 4994                               0,
31504 8128                      0000            .word	0
31505 812A                      0000            .word	0
31506                                           ! 4995                             0,
31507 812C                      0000            .word	0
31508                                           ! 4996                                1280,
31509 812E                      0500            .word	$500
31510                                           ! 4997                             0,
31511 8130                        00            .byte	0
31512                                           ! 4998                             0,
31513 8131                        00            .byte	0
31514                                           ! 4999                           5,
31515 8132                        05            .byte	5
31516                                           ! 5000                                10,
31517 8133                        0A            .byte	$A
31518                                           ! 5001                             5,
31519 8134                        05            .byte	5
31520                                           ! 5002                                  5,
31521 8135                        05            .byte	5
31522                                           ! 5003                            5,
31523 8136                        05            .byte	5
31524                                           ! 5004                                 0,
31525 8137                        00            .byte	0
31526                                           ! 5005                            1,
31527 8138                        01            .byte	1
31528                                           ! 5006                                 15,
31529 8139                        0F            .byte	$F
31530                                           ! 5007                          0,
31531 813A                      0000            .word	0
31532 813C                      0000            .word	0
31533                                           ! 5008 } },
31534                                           ! 5009 { 0x0111,
31535 813E                      0111            .word	$111
31536                                           ! 5010 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31537 8140                      009B            .word	$9B
31538                                           ! 5011                           0x01 | 0x02 | 0x04,
31539 8142                        07            .byte	7
31540                                           ! 5012                           0,
31541 8143                        00            .byte	0
31542                                           ! 5013                           64,
31543 8144                      0040            .word	$40
31544                                           ! 5014                    64,
31545 8146                      0040            .word	$40
31546                                           ! 5015                        0xA000,
31547 8148                      A000            .word	$A000
31548                                           ! 5016                        0x0000,
31549 814A                      0000            .word	0
31550                                           ! 5017                       0,
31551 814C                      0000            .word	0
31552 814E                      0000            .word	0
31553                                           ! 5018                             1280,
31554 8150                      0500            .word	$500
31555                                           ! 5019                        640,
31556 8152                      0280            .word	$280
31557                                           ! 5020                        480,
31558 8154                      01E0            .word	$1E0
31559                                           ! 5021                      8,
31560 8156                        08            .byte	8
31561                                           ! 5022                      16,
31562 8157                        10            .byte	$10
31563                                           ! 5023                           1,
31564 8158                        01            .byte	1
31565                                           ! 5024                         16,
31566 8159                        10            .byte	$10
31567                                           ! 5025                          10,
31568 815A                        0A            .byte	$A
31569                                           ! 5026                        0x06,
31570 815B                        06            .byte	6
31571                                           ! 5027                     0,
31572 815C                        00            .byte	0
31573                                           ! 5028                               26,
31574 815D                        1A            .byte	$1A
31575                                           ! 5029                          0,
31576 815E                        00            .byte	0
31577                                           ! 5030                        5,
31578 815F                        05            .byte	5
31579                                           ! 5031                             11,
31580 8160                        0B            .byte	$B
31581                                           ! 5032                          6,
31582 8161                        06            .byte	6
31583                                           ! 5033                               5,
31584 8162                        05            .byte	5
31585                                           ! 5034                         5,
31586 8163                        05            .byte	5
31587                                           ! 5035                              0,
31588 8164                        00            .byte	0
31589                                           ! 5036                         0,
31590 8165                        00            .byte	0
31591                                           ! 5037                              0,
31592 8166                        00            .byte	0
31593                                           ! 5038                               
31594                                           ! 5038  0,
31595 8167                        00            .byte	0
31596                                           ! 5039                        0xE0000000,
31597 8168                      0000            .word	0
31598 816A                      E000            .word	$E000
31599                                           ! 5040                               0,
31600 816C                      0000            .word	0
31601 816E                      0000            .word	0
31602                                           ! 5041                             0,
31603 8170                      0000            .word	0
31604                                           ! 5042                                1280,
31605 8172                      0500            .word	$500
31606                                           ! 5043                             0,
31607 8174                        00            .byte	0
31608                                           ! 5044                             0,
31609 8175                        00            .byte	0
31610                                           ! 5045                           5,
31611 8176                        05            .byte	5
31612                                           ! 5046                                11,
31613 8177                        0B            .byte	$B
31614                                           ! 5047                             6,
31615 8178                        06            .byte	6
31616                                           ! 5048                                  5,
31617 8179                        05            .byte	5
31618                                           ! 5049                            5,
31619 817A                        05            .byte	5
31620                                           ! 5050                                 0,
31621 817B                        00            .byte	0
31622                                           ! 5051                            0,
31623 817C                        00            .byte	0
31624                                           ! 5052                                 0,
31625 817D                        00            .byte	0
31626                                           ! 5053                          0,
31627 817E                      0000            .word	0
31628 8180                      0000            .word	0
31629                                           ! 5054 } },
31630                                           ! 5055 { 0x0112,
31631 8182                      0112            .word	$112
31632                                           ! 5056 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31633 8184                      009B            .word	$9B
31634                                           ! 5057                           0x01 | 0x02 | 0x04,
31635 8186                        07            .byte	7
31636                                           ! 5058                           0,
31637 8187                        00            .byte	0
31638                                           ! 5059                           64,
31639 8188                      0040            .word	$40
31640                                           ! 5060                    64,
31641 818A                      0040            .word	$40
31642                                           ! 5061                        0xA000,
31643 818C                      A000            .word	$A000
31644                                           ! 5062                        0x0000,
31645 818E                      0000            .word	0
31646                                           ! 5063                       0,
31647 8190                      0000            .word	0
31648 8192                      0000            .word	0
31649                                           ! 5064                             1920,
31650 8194                      0780            .word	$780
31651                                           ! 5065                        640,
31652 8196                      0280            .word	$280
31653                                           ! 5066                        480,
31654 8198                      01E0            .word	$1E0
31655                                           ! 5067                      8,
31656 819A                        08            .byte	8
31657                                           ! 5068                      16,
31658 819B                        10            .byte	$10
31659                                           ! 5069                           1,
31660 819C                        01            .byte	1
31661                                           ! 5070                         24,
31662 819D                        18            .byte	$18
31663                                           ! 5071                          15,
31664 819E                        0F            .byte	$F
31665                                           ! 5072                        0x06,
31666 819F                        06            .byte	6
31667                                           ! 5073                     0,
31668 81A0                        00            .byte	0
31669                                           ! 5074                               17,
31670 81A1                        11            .byte	$11
31671                                           ! 5075                          0,
31672 81A2                        00            .byte	0
31673                                           ! 5076                        8,
31674 81A3                        08            .byte	8
31675                                           ! 5077                             16,
31676 81A4                        10            .byte	$10
31677                                           ! 5078                          8,
31678 81A5                        08            .byte	8
31679                                           ! 5079                               8,
31680 81A6                        08            .byte	8
31681                                           ! 5080                         8,
31682 81A7                        08            .byte	8
31683                                           ! 5081                              0,
31684 81A8                        00            .byte	0
31685                                           ! 5082                         0,
31686 81A9                        00            .byte	0
31687                                           ! 5083                              0,
31688 81AA                        00            .byte	0
31689                                           ! 5084                                0,
31690 81AB                        00            .byte	0
31691                                           ! 5085                        0xE0000000,
31692 81AC                      0000            .word	0
31693 81AE                      E000            .word	$E000
31694                                           ! 5086                               0,
31695 81B0                      0000            .word	0
31696 81B2                      0000            .word	0
31697                                           ! 5087                             0,
31698 81B4                      0000            .word	0
31699                                           ! 5088                                1920,
31700 81B6                      0780            .word	$780
31701                                           ! 5089                             0,
31702 81B8                        00            .byte	0
31703                                           ! 5090                             0,
31704 81B9                        00            .byte	0
31705                                           ! 5091                           8,
31706 81BA                        08            .byte	8
31707                                           ! 5092                                16,
31708 81BB                        10            .byte	$10
31709                                           ! 5093                             8,
31710 81BC                        08            .byte	8
31711                                           ! 5094                                  8,
31712 81BD                        08            .byte	8
31713                                           ! 5095                            8,
31714 81BE                        08            .byte	8
31715                                           ! 5096                                 0,
31716 81BF                        00            .byte	0
31717                                           ! 5097                            0,
31718 81C0                        00            .byte	0
31719                                           ! 5098                                 0,
31720 81C1                        00            .byte	0
31721                                           ! 5099                          0,
31722 81C2                      0000            .word	0
31723 81C4                      0000            .word	0
31724                                           ! 5100 } },
31725                                           ! 5101 { 0x0113,
31726 81C6                      0113            .word	$113
31727                                           ! 5102 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31728 81C8                      009B            .word	$9B
31729                                           ! 5103                           0x01 | 0x02 | 0x04,
31730 81CA                        07            .byte	7
31731                                           ! 5104                           0,
31732 81CB                        00            .byte	0
31733                                           ! 5105                           64,
31734 81CC                      0040            .word	$40
31735                                           ! 5106                   
31736                                           ! 5106  64,
31737 81CE                      0040            .word	$40
31738                                           ! 5107                        0xA000,
31739 81D0                      A000            .word	$A000
31740                                           ! 5108                        0x0000,
31741 81D2                      0000            .word	0
31742                                           ! 5109                       0,
31743 81D4                      0000            .word	0
31744 81D6                      0000            .word	0
31745                                           ! 5110                             1600,
31746 81D8                      0640            .word	$640
31747                                           ! 5111                        800,
31748 81DA                      0320            .word	$320
31749                                           ! 5112                        600,
31750 81DC                      0258            .word	$258
31751                                           ! 5113                      8,
31752 81DE                        08            .byte	8
31753                                           ! 5114                      16,
31754 81DF                        10            .byte	$10
31755                                           ! 5115                           1,
31756 81E0                        01            .byte	1
31757                                           ! 5116                         15,
31758 81E1                        0F            .byte	$F
31759                                           ! 5117                          15,
31760 81E2                        0F            .byte	$F
31761                                           ! 5118                        0x06,
31762 81E3                        06            .byte	6
31763                                           ! 5119                     0,
31764 81E4                        00            .byte	0
31765                                           ! 5120                               16,
31766 81E5                        10            .byte	$10
31767                                           ! 5121                          0,
31768 81E6                        00            .byte	0
31769                                           ! 5122                        5,
31770 81E7                        05            .byte	5
31771                                           ! 5123                             10,
31772 81E8                        0A            .byte	$A
31773                                           ! 5124                          5,
31774 81E9                        05            .byte	5
31775                                           ! 5125                               5,
31776 81EA                        05            .byte	5
31777                                           ! 5126                         5,
31778 81EB                        05            .byte	5
31779                                           ! 5127                              0,
31780 81EC                        00            .byte	0
31781                                           ! 5128                         1,
31782 81ED                        01            .byte	1
31783                                           ! 5129                              15,
31784 81EE                        0F            .byte	$F
31785                                           ! 5130                                0,
31786 81EF                        00            .byte	0
31787                                           ! 5131                        0xE0000000,
31788 81F0                      0000            .word	0
31789 81F2                      E000            .word	$E000
31790                                           ! 5132                               0,
31791 81F4                      0000            .word	0
31792 81F6                      0000            .word	0
31793                                           ! 5133                             0,
31794 81F8                      0000            .word	0
31795                                           ! 5134                                1600,
31796 81FA                      0640            .word	$640
31797                                           ! 5135                             0,
31798 81FC                        00            .byte	0
31799                                           ! 5136                             0,
31800 81FD                        00            .byte	0
31801                                           ! 5137                           5,
31802 81FE                        05            .byte	5
31803                                           ! 5138                                10,
31804 81FF                        0A            .byte	$A
31805                                           ! 5139                             5,
31806 8200                        05            .byte	5
31807                                           ! 5140                                  5,
31808 8201                        05            .byte	5
31809                                           ! 5141                            5,
31810 8202                        05            .byte	5
31811                                           ! 5142                                 0,
31812 8203                        00            .byte	0
31813                                           ! 5143                            1,
31814 8204                        01            .byte	1
31815                                           ! 5144                                 15,
31816 8205                        0F            .byte	$F
31817                                           ! 5145                          0,
31818 8206                      0000            .word	0
31819 8208                      0000            .word	0
31820                                           ! 5146 } },
31821                                           ! 5147 { 0x0114,
31822 820A                      0114            .word	$114
31823                                           ! 5148 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31824 820C                      009B            .word	$9B
31825                                           ! 5149                           0x01 | 0x02 | 0x04,
31826 820E                        07            .byte	7
31827                                           ! 5150                           0,
31828 820F                        00            .byte	0
31829                                           ! 5151                           64,
31830 8210                      0040            .word	$40
31831                                           ! 5152                    64,
31832 8212                      0040            .word	$40
31833                                           ! 5153                        0xA000,
31834 8214                      A000            .word	$A000
31835                                           ! 5154                        0x0000,
31836 8216                      0000            .word	0
31837                                           ! 5155                       0,
31838 8218                      0000            .word	0
31839 821A                      0000            .word	0
31840                                           ! 5156                             1600,
31841 821C                      0640            .word	$640
31842                                           ! 5157                        800,
31843 821E                      0320            .word	$320
31844                                           ! 5158                        600,
31845 8220                      0258            .word	$258
31846                                           ! 5159                      8,
31847 8222                        08            .byte	8
31848                                           ! 5160                      16,
31849 8223                        10            .byte	$10
31850                                           ! 5161                           1,
31851 8224                        01            .byte	1
31852                                           ! 5162                         16,
31853 8225                        10            .byte	$10
31854                                           ! 5163                          15,
31855 8226                        0F            .byte	$F
31856                                           ! 5164                        0x06,
31857 8227                        06            .byte	6
31858                                           ! 5165                     0,
31859 8228                        00            .byte	0
31860                                           ! 5166                               16,
31861 8229                        10            .byte	$10
31862                                           ! 5167                          0,
31863 822A                        00            .byte	0
31864                                           ! 5168                        5,
31865 822B                        05            .byte	5
31866                                           ! 5169                             11,
31867 822C                        0B            .byte	$B
31868                                           ! 5170                          6,
31869 822D                        06            .byte	6
31870                                           ! 5171                               5,
31871 822E                        05            .byte	5
31872                                           ! 5172                         5,
31873 822F                        05            .byte	5
31874                                           ! 5173                              0,
31875 8230                        00            .byte	0
31876                                           ! 5174                         0,
31877 8231                        00            .byte	0
31878                                           ! 5175                              0,
31879 8232                        00            .byte	0
31880                                           ! 5176      
31881                                           ! 5176                           0,
31882 8233                        00            .byte	0
31883                                           ! 5177                        0xE0000000,
31884 8234                      0000            .word	0
31885 8236                      E000            .word	$E000
31886                                           ! 5178                               0,
31887 8238                      0000            .word	0
31888 823A                      0000            .word	0
31889                                           ! 5179                             0,
31890 823C                      0000            .word	0
31891                                           ! 5180                                1600,
31892 823E                      0640            .word	$640
31893                                           ! 5181                             0,
31894 8240                        00            .byte	0
31895                                           ! 5182                             0,
31896 8241                        00            .byte	0
31897                                           ! 5183                           5,
31898 8242                        05            .byte	5
31899                                           ! 5184                                11,
31900 8243                        0B            .byte	$B
31901                                           ! 5185                             6,
31902 8244                        06            .byte	6
31903                                           ! 5186                                  5,
31904 8245                        05            .byte	5
31905                                           ! 5187                            5,
31906 8246                        05            .byte	5
31907                                           ! 5188                                 0,
31908 8247                        00            .byte	0
31909                                           ! 5189                            0,
31910 8248                        00            .byte	0
31911                                           ! 5190                                 0,
31912 8249                        00            .byte	0
31913                                           ! 5191                          0,
31914 824A                      0000            .word	0
31915 824C                      0000            .word	0
31916                                           ! 5192 } },
31917                                           ! 5193 { 0x0115,
31918 824E                      0115            .word	$115
31919                                           ! 5194 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31920 8250                      009B            .word	$9B
31921                                           ! 5195                           0x01 | 0x02 | 0x04,
31922 8252                        07            .byte	7
31923                                           ! 5196                           0,
31924 8253                        00            .byte	0
31925                                           ! 5197                           64,
31926 8254                      0040            .word	$40
31927                                           ! 5198                    64,
31928 8256                      0040            .word	$40
31929                                           ! 5199                        0xA000,
31930 8258                      A000            .word	$A000
31931                                           ! 5200                        0x0000,
31932 825A                      0000            .word	0
31933                                           ! 5201                       0,
31934 825C                      0000            .word	0
31935 825E                      0000            .word	0
31936                                           ! 5202                             2400,
31937 8260                      0960            .word	$960
31938                                           ! 5203                        800,
31939 8262                      0320            .word	$320
31940                                           ! 5204                        600,
31941 8264                      0258            .word	$258
31942                                           ! 5205                      8,
31943 8266                        08            .byte	8
31944                                           ! 5206                      16,
31945 8267                        10            .byte	$10
31946                                           ! 5207                           1,
31947 8268                        01            .byte	1
31948                                           ! 5208                         24,
31949 8269                        18            .byte	$18
31950                                           ! 5209                          22,
31951 826A                        16            .byte	$16
31952                                           ! 5210                        0x06,
31953 826B                        06            .byte	6
31954                                           ! 5211                     0,
31955 826C                        00            .byte	0
31956                                           ! 5212                               10,
31957 826D                        0A            .byte	$A
31958                                           ! 5213                          0,
31959 826E                        00            .byte	0
31960                                           ! 5214                        8,
31961 826F                        08            .byte	8
31962                                           ! 5215                             16,
31963 8270                        10            .byte	$10
31964                                           ! 5216                          8,
31965 8271                        08            .byte	8
31966                                           ! 5217                               8,
31967 8272                        08            .byte	8
31968                                           ! 5218                         8,
31969 8273                        08            .byte	8
31970                                           ! 5219                              0,
31971 8274                        00            .byte	0
31972                                           ! 5220                         0,
31973 8275                        00            .byte	0
31974                                           ! 5221                              0,
31975 8276                        00            .byte	0
31976                                           ! 5222                                0,
31977 8277                        00            .byte	0
31978                                           ! 5223                        0xE0000000,
31979 8278                      0000            .word	0
31980 827A                      E000            .word	$E000
31981                                           ! 5224                               0,
31982 827C                      0000            .word	0
31983 827E                      0000            .word	0
31984                                           ! 5225                             0,
31985 8280                      0000            .word	0
31986                                           ! 5226                                2400,
31987 8282                      0960            .word	$960
31988                                           ! 5227                             0,
31989 8284                        00            .byte	0
31990                                           ! 5228                             0,
31991 8285                        00            .byte	0
31992                                           ! 5229                           8,
31993 8286                        08            .byte	8
31994                                           ! 5230                                16,
31995 8287                        10            .byte	$10
31996                                           ! 5231                             8,
31997 8288                        08            .byte	8
31998                                           ! 5232                                  8,
31999 8289                        08            .byte	8
32000                                           ! 5233                            8,
32001 828A                        08            .byte	8
32002                                           ! 5234                                 0,
32003 828B                        00            .byte	0
32004                                           ! 5235                            0,
32005 828C                        00            .byte	0
32006                                           ! 5236                                 0,
32007 828D                        00            .byte	0
32008                                           ! 5237                          0,
32009 828E                      0000            .word	0
32010 8290                      0000            .word	0
32011                                           ! 5238 } },
32012                                           ! 5239 { 0x0116,
32013 8292                      0116            .word	$116
32014                                           ! 5240 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32015 8294                      009B            .word	$9B
32016                                           ! 5241                           0x01 | 0x02 | 0x04,
32017 8296                        07            .byte	7
32018                                           ! 5242                           0,
32019 8297                        00            .byte	0
32020                                           ! 5243                        
32021                                           ! 5243    64,
32022 8298                      0040            .word	$40
32023                                           ! 5244                    64,
32024 829A                      0040            .word	$40
32025                                           ! 5245                        0xA000,
32026 829C                      A000            .word	$A000
32027                                           ! 5246                        0x0000,
32028 829E                      0000            .word	0
32029                                           ! 5247                       0,
32030 82A0                      0000            .word	0
32031 82A2                      0000            .word	0
32032                                           ! 5248                             2048,
32033 82A4                      0800            .word	$800
32034                                           ! 5249                        1024,
32035 82A6                      0400            .word	$400
32036                                           ! 5250                        768,
32037 82A8                      0300            .word	$300
32038                                           ! 5251                      8,
32039 82AA                        08            .byte	8
32040                                           ! 5252                      16,
32041 82AB                        10            .byte	$10
32042                                           ! 5253                           1,
32043 82AC                        01            .byte	1
32044                                           ! 5254                         15,
32045 82AD                        0F            .byte	$F
32046                                           ! 5255                          24,
32047 82AE                        18            .byte	$18
32048                                           ! 5256                        0x06,
32049 82AF                        06            .byte	6
32050                                           ! 5257                     0,
32051 82B0                        00            .byte	0
32052                                           ! 5258                               9,
32053 82B1                        09            .byte	9
32054                                           ! 5259                          0,
32055 82B2                        00            .byte	0
32056                                           ! 5260                        5,
32057 82B3                        05            .byte	5
32058                                           ! 5261                             10,
32059 82B4                        0A            .byte	$A
32060                                           ! 5262                          5,
32061 82B5                        05            .byte	5
32062                                           ! 5263                               5,
32063 82B6                        05            .byte	5
32064                                           ! 5264                         5,
32065 82B7                        05            .byte	5
32066                                           ! 5265                              0,
32067 82B8                        00            .byte	0
32068                                           ! 5266                         1,
32069 82B9                        01            .byte	1
32070                                           ! 5267                              15,
32071 82BA                        0F            .byte	$F
32072                                           ! 5268                                0,
32073 82BB                        00            .byte	0
32074                                           ! 5269                        0xE0000000,
32075 82BC                      0000            .word	0
32076 82BE                      E000            .word	$E000
32077                                           ! 5270                               0,
32078 82C0                      0000            .word	0
32079 82C2                      0000            .word	0
32080                                           ! 5271                             0,
32081 82C4                      0000            .word	0
32082                                           ! 5272                                2048,
32083 82C6                      0800            .word	$800
32084                                           ! 5273                             0,
32085 82C8                        00            .byte	0
32086                                           ! 5274                             0,
32087 82C9                        00            .byte	0
32088                                           ! 5275                           5,
32089 82CA                        05            .byte	5
32090                                           ! 5276                                10,
32091 82CB                        0A            .byte	$A
32092                                           ! 5277                             5,
32093 82CC                        05            .byte	5
32094                                           ! 5278                                  5,
32095 82CD                        05            .byte	5
32096                                           ! 5279                            5,
32097 82CE                        05            .byte	5
32098                                           ! 5280                                 0,
32099 82CF                        00            .byte	0
32100                                           ! 5281                            1,
32101 82D0                        01            .byte	1
32102                                           ! 5282                                 15,
32103 82D1                        0F            .byte	$F
32104                                           ! 5283                          0,
32105 82D2                      0000            .word	0
32106 82D4                      0000            .word	0
32107                                           ! 5284 } },
32108                                           ! 5285 { 0x0117,
32109 82D6                      0117            .word	$117
32110                                           ! 5286 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32111 82D8                      009B            .word	$9B
32112                                           ! 5287                           0x01 | 0x02 | 0x04,
32113 82DA                        07            .byte	7
32114                                           ! 5288                           0,
32115 82DB                        00            .byte	0
32116                                           ! 5289                           64,
32117 82DC                      0040            .word	$40
32118                                           ! 5290                    64,
32119 82DE                      0040            .word	$40
32120                                           ! 5291                        0xA000,
32121 82E0                      A000            .word	$A000
32122                                           ! 5292                        0x0000,
32123 82E2                      0000            .word	0
32124                                           ! 5293                       0,
32125 82E4                      0000            .word	0
32126 82E6                      0000            .word	0
32127                                           ! 5294                             2048,
32128 82E8                      0800            .word	$800
32129                                           ! 5295                        1024,
32130 82EA                      0400            .word	$400
32131                                           ! 5296                        768,
32132 82EC                      0300            .word	$300
32133                                           ! 5297                      8,
32134 82EE                        08            .byte	8
32135                                           ! 5298                      16,
32136 82EF                        10            .byte	$10
32137                                           ! 5299                           1,
32138 82F0                        01            .byte	1
32139                                           ! 5300                         16,
32140 82F1                        10            .byte	$10
32141                                           ! 5301                          24,
32142 82F2                        18            .byte	$18
32143                                           ! 5302                        0x06,
32144 82F3                        06            .byte	6
32145                                           ! 5303                     0,
32146 82F4                        00            .byte	0
32147                                           ! 5304                               9,
32148 82F5                        09            .byte	9
32149                                           ! 5305                          0,
32150 82F6                        00            .byte	0
32151                                           ! 5306                        5,
32152 82F7                        05            .byte	5
32153                                           ! 5307                             11,
32154 82F8                        0B            .byte	$B
32155                                           ! 5308                          6,
32156 82F9                        06            .byte	6
32157                                           ! 5309                               5,
32158 82FA                        05            .byte	5
32159                                           ! 5310                         5,
32160 82FB                        05            .byte	5
32161                                           ! 5311                              0,
32162 82FC                        00            .byte	0
32163                                           ! 5312                         0,
32164 82FD                        00            .byte	0
32165                                           ! 5313             
32166                                           ! 5313                  0,
32167 82FE                        00            .byte	0
32168                                           ! 5314                                0,
32169 82FF                        00            .byte	0
32170                                           ! 5315                        0xE0000000,
32171 8300                      0000            .word	0
32172 8302                      E000            .word	$E000
32173                                           ! 5316                               0,
32174 8304                      0000            .word	0
32175 8306                      0000            .word	0
32176                                           ! 5317                             0,
32177 8308                      0000            .word	0
32178                                           ! 5318                                2048,
32179 830A                      0800            .word	$800
32180                                           ! 5319                             0,
32181 830C                        00            .byte	0
32182                                           ! 5320                             0,
32183 830D                        00            .byte	0
32184                                           ! 5321                           5,
32185 830E                        05            .byte	5
32186                                           ! 5322                                11,
32187 830F                        0B            .byte	$B
32188                                           ! 5323                             6,
32189 8310                        06            .byte	6
32190                                           ! 5324                                  5,
32191 8311                        05            .byte	5
32192                                           ! 5325                            5,
32193 8312                        05            .byte	5
32194                                           ! 5326                                 0,
32195 8313                        00            .byte	0
32196                                           ! 5327                            0,
32197 8314                        00            .byte	0
32198                                           ! 5328                                 0,
32199 8315                        00            .byte	0
32200                                           ! 5329                          0,
32201 8316                      0000            .word	0
32202 8318                      0000            .word	0
32203                                           ! 5330 } },
32204                                           ! 5331 { 0x0118,
32205 831A                      0118            .word	$118
32206                                           ! 5332 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32207 831C                      009B            .word	$9B
32208                                           ! 5333                           0x01 | 0x02 | 0x04,
32209 831E                        07            .byte	7
32210                                           ! 5334                           0,
32211 831F                        00            .byte	0
32212                                           ! 5335                           64,
32213 8320                      0040            .word	$40
32214                                           ! 5336                    64,
32215 8322                      0040            .word	$40
32216                                           ! 5337                        0xA000,
32217 8324                      A000            .word	$A000
32218                                           ! 5338                        0x0000,
32219 8326                      0000            .word	0
32220                                           ! 5339                       0,
32221 8328                      0000            .word	0
32222 832A                      0000            .word	0
32223                                           ! 5340                             3072,
32224 832C                      0C00            .word	$C00
32225                                           ! 5341                        1024,
32226 832E                      0400            .word	$400
32227                                           ! 5342                        768,
32228 8330                      0300            .word	$300
32229                                           ! 5343                      8,
32230 8332                        08            .byte	8
32231                                           ! 5344                      16,
32232 8333                        10            .byte	$10
32233                                           ! 5345                           1,
32234 8334                        01            .byte	1
32235                                           ! 5346                         24,
32236 8335                        18            .byte	$18
32237                                           ! 5347                          36,
32238 8336                        24            .byte	$24
32239                                           ! 5348                        0x06,
32240 8337                        06            .byte	6
32241                                           ! 5349                     0,
32242 8338                        00            .byte	0
32243                                           ! 5350                               6,
32244 8339                        06            .byte	6
32245                                           ! 5351                          0,
32246 833A                        00            .byte	0
32247                                           ! 5352                        8,
32248 833B                        08            .byte	8
32249                                           ! 5353                             16,
32250 833C                        10            .byte	$10
32251                                           ! 5354                          8,
32252 833D                        08            .byte	8
32253                                           ! 5355                               8,
32254 833E                        08            .byte	8
32255                                           ! 5356                         8,
32256 833F                        08            .byte	8
32257                                           ! 5357                              0,
32258 8340                        00            .byte	0
32259                                           ! 5358                         0,
32260 8341                        00            .byte	0
32261                                           ! 5359                              0,
32262 8342                        00            .byte	0
32263                                           ! 5360                                0,
32264 8343                        00            .byte	0
32265                                           ! 5361                        0xE0000000,
32266 8344                      0000            .word	0
32267 8346                      E000            .word	$E000
32268                                           ! 5362                               0,
32269 8348                      0000            .word	0
32270 834A                      0000            .word	0
32271                                           ! 5363                             0,
32272 834C                      0000            .word	0
32273                                           ! 5364                                3072,
32274 834E                      0C00            .word	$C00
32275                                           ! 5365                             0,
32276 8350                        00            .byte	0
32277                                           ! 5366                             0,
32278 8351                        00            .byte	0
32279                                           ! 5367                           8,
32280 8352                        08            .byte	8
32281                                           ! 5368                                16,
32282 8353                        10            .byte	$10
32283                                           ! 5369                             8,
32284 8354                        08            .byte	8
32285                                           ! 5370                                  8,
32286 8355                        08            .byte	8
32287                                           ! 5371                            8,
32288 8356                        08            .byte	8
32289                                           ! 5372                                 0,
32290 8357                        00            .byte	0
32291                                           ! 5373                            0,
32292 8358                        00            .byte	0
32293                                           ! 5374                                 0,
32294 8359                        00            .byte	0
32295                                           ! 5375                          0,
32296 835A                      0000            .word	0
32297 835C                      0000            .word	0
32298                                           ! 5376 } },
32299                                           ! 5377 { 0x0119,
32300 835E                      0119            .word	$119
32301                                           ! 5378 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32302 8360                      009B            .word	$9B
32303                                           ! 5379                           0x01 | 0x02 | 0x04,
32304 8362                        07            .byte	7
32305                                           ! 5380                           0
32306                                           ! 5380 ,
32307 8363                        00            .byte	0
32308                                           ! 5381                           64,
32309 8364                      0040            .word	$40
32310                                           ! 5382                    64,
32311 8366                      0040            .word	$40
32312                                           ! 5383                        0xA000,
32313 8368                      A000            .word	$A000
32314                                           ! 5384                        0x0000,
32315 836A                      0000            .word	0
32316                                           ! 5385                       0,
32317 836C                      0000            .word	0
32318 836E                      0000            .word	0
32319                                           ! 5386                             2560,
32320 8370                      0A00            .word	$A00
32321                                           ! 5387                        1280,
32322 8372                      0500            .word	$500
32323                                           ! 5388                        1024,
32324 8374                      0400            .word	$400
32325                                           ! 5389                      8,
32326 8376                        08            .byte	8
32327                                           ! 5390                      16,
32328 8377                        10            .byte	$10
32329                                           ! 5391                           1,
32330 8378                        01            .byte	1
32331                                           ! 5392                         15,
32332 8379                        0F            .byte	$F
32333                                           ! 5393                          40,
32334 837A                        28            .byte	$28
32335                                           ! 5394                        0x06,
32336 837B                        06            .byte	6
32337                                           ! 5395                     0,
32338 837C                        00            .byte	0
32339                                           ! 5396                               5,
32340 837D                        05            .byte	5
32341                                           ! 5397                          0,
32342 837E                        00            .byte	0
32343                                           ! 5398                        5,
32344 837F                        05            .byte	5
32345                                           ! 5399                             10,
32346 8380                        0A            .byte	$A
32347                                           ! 5400                          5,
32348 8381                        05            .byte	5
32349                                           ! 5401                               5,
32350 8382                        05            .byte	5
32351                                           ! 5402                         5,
32352 8383                        05            .byte	5
32353                                           ! 5403                              0,
32354 8384                        00            .byte	0
32355                                           ! 5404                         1,
32356 8385                        01            .byte	1
32357                                           ! 5405                              15,
32358 8386                        0F            .byte	$F
32359                                           ! 5406                                0,
32360 8387                        00            .byte	0
32361                                           ! 5407                        0xE0000000,
32362 8388                      0000            .word	0
32363 838A                      E000            .word	$E000
32364                                           ! 5408                               0,
32365 838C                      0000            .word	0
32366 838E                      0000            .word	0
32367                                           ! 5409                             0,
32368 8390                      0000            .word	0
32369                                           ! 5410                                2560,
32370 8392                      0A00            .word	$A00
32371                                           ! 5411                             0,
32372 8394                        00            .byte	0
32373                                           ! 5412                             0,
32374 8395                        00            .byte	0
32375                                           ! 5413                           5,
32376 8396                        05            .byte	5
32377                                           ! 5414                                10,
32378 8397                        0A            .byte	$A
32379                                           ! 5415                             5,
32380 8398                        05            .byte	5
32381                                           ! 5416                                  5,
32382 8399                        05            .byte	5
32383                                           ! 5417                            5,
32384 839A                        05            .byte	5
32385                                           ! 5418                                 0,
32386 839B                        00            .byte	0
32387                                           ! 5419                            1,
32388 839C                        01            .byte	1
32389                                           ! 5420                                 15,
32390 839D                        0F            .byte	$F
32391                                           ! 5421                          0,
32392 839E                      0000            .word	0
32393 83A0                      0000            .word	0
32394                                           ! 5422 } },
32395                                           ! 5423 { 0x011a,
32396 83A2                      011A            .word	$11A
32397                                           ! 5424 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32398 83A4                      009B            .word	$9B
32399                                           ! 5425                           0x01 | 0x02 | 0x04,
32400 83A6                        07            .byte	7
32401                                           ! 5426                           0,
32402 83A7                        00            .byte	0
32403                                           ! 5427                           64,
32404 83A8                      0040            .word	$40
32405                                           ! 5428                    64,
32406 83AA                      0040            .word	$40
32407                                           ! 5429                        0xA000,
32408 83AC                      A000            .word	$A000
32409                                           ! 5430                        0x0000,
32410 83AE                      0000            .word	0
32411                                           ! 5431                       0,
32412 83B0                      0000            .word	0
32413 83B2                      0000            .word	0
32414                                           ! 5432                             2560,
32415 83B4                      0A00            .word	$A00
32416                                           ! 5433                        1280,
32417 83B6                      0500            .word	$500
32418                                           ! 5434                        1024,
32419 83B8                      0400            .word	$400
32420                                           ! 5435                      8,
32421 83BA                        08            .byte	8
32422                                           ! 5436                      16,
32423 83BB                        10            .byte	$10
32424                                           ! 5437                           1,
32425 83BC                        01            .byte	1
32426                                           ! 5438                         16,
32427 83BD                        10            .byte	$10
32428                                           ! 5439                          40,
32429 83BE                        28            .byte	$28
32430                                           ! 5440                        0x06,
32431 83BF                        06            .byte	6
32432                                           ! 5441                     0,
32433 83C0                        00            .byte	0
32434                                           ! 5442                               5,
32435 83C1                        05            .byte	5
32436                                           ! 5443                          0,
32437 83C2                        00            .byte	0
32438                                           ! 5444                        5,
32439 83C3                        05            .byte	5
32440                                           ! 5445                             11,
32441 83C4                        0B            .byte	$B
32442                                           ! 5446                          6,
32443 83C5                        06            .byte	6
32444                                           ! 5447                               5,
32445 83C6                        05            .byte	5
32446                                           ! 5448                         5,
32447 83C7                        05            .byte	5
32448                                           ! 5449                              0,
32449 83C8                        00            .byte	0
32450                                           ! 5450             
32451                                           ! 5450             0,
32452 83C9                        00            .byte	0
32453                                           ! 5451                              0,
32454 83CA                        00            .byte	0
32455                                           ! 5452                                0,
32456 83CB                        00            .byte	0
32457                                           ! 5453                        0xE0000000,
32458 83CC                      0000            .word	0
32459 83CE                      E000            .word	$E000
32460                                           ! 5454                               0,
32461 83D0                      0000            .word	0
32462 83D2                      0000            .word	0
32463                                           ! 5455                             0,
32464 83D4                      0000            .word	0
32465                                           ! 5456                                2560,
32466 83D6                      0A00            .word	$A00
32467                                           ! 5457                             0,
32468 83D8                        00            .byte	0
32469                                           ! 5458                             0,
32470 83D9                        00            .byte	0
32471                                           ! 5459                           5,
32472 83DA                        05            .byte	5
32473                                           ! 5460                                11,
32474 83DB                        0B            .byte	$B
32475                                           ! 5461                             6,
32476 83DC                        06            .byte	6
32477                                           ! 5462                                  5,
32478 83DD                        05            .byte	5
32479                                           ! 5463                            5,
32480 83DE                        05            .byte	5
32481                                           ! 5464                                 0,
32482 83DF                        00            .byte	0
32483                                           ! 5465                            0,
32484 83E0                        00            .byte	0
32485                                           ! 5466                                 0,
32486 83E1                        00            .byte	0
32487                                           ! 5467                          0,
32488 83E2                      0000            .word	0
32489 83E4                      0000            .word	0
32490                                           ! 5468 } },
32491                                           ! 5469 { 0x011b,
32492 83E6                      011B            .word	$11B
32493                                           ! 5470 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32494 83E8                      009B            .word	$9B
32495                                           ! 5471                           0x01 | 0x02 | 0x04,
32496 83EA                        07            .byte	7
32497                                           ! 5472                           0,
32498 83EB                        00            .byte	0
32499                                           ! 5473                           64,
32500 83EC                      0040            .word	$40
32501                                           ! 5474                    64,
32502 83EE                      0040            .word	$40
32503                                           ! 5475                        0xA000,
32504 83F0                      A000            .word	$A000
32505                                           ! 5476                        0x0000,
32506 83F2                      0000            .word	0
32507                                           ! 5477                       0,
32508 83F4                      0000            .word	0
32509 83F6                      0000            .word	0
32510                                           ! 5478                             3840,
32511 83F8                      0F00            .word	$F00
32512                                           ! 5479                        1280,
32513 83FA                      0500            .word	$500
32514                                           ! 5480                        1024,
32515 83FC                      0400            .word	$400
32516                                           ! 5481                      8,
32517 83FE                        08            .byte	8
32518                                           ! 5482                      16,
32519 83FF                        10            .byte	$10
32520                                           ! 5483                           1,
32521 8400                        01            .byte	1
32522                                           ! 5484                         24,
32523 8401                        18            .byte	$18
32524                                           ! 5485                          60,
32525 8402                        3C            .byte	$3C
32526                                           ! 5486                        0x06,
32527 8403                        06            .byte	6
32528                                           ! 5487                     0,
32529 8404                        00            .byte	0
32530                                           ! 5488                               3,
32531 8405                        03            .byte	3
32532                                           ! 5489                          0,
32533 8406                        00            .byte	0
32534                                           ! 5490                        8,
32535 8407                        08            .byte	8
32536                                           ! 5491                             16,
32537 8408                        10            .byte	$10
32538                                           ! 5492                          8,
32539 8409                        08            .byte	8
32540                                           ! 5493                               8,
32541 840A                        08            .byte	8
32542                                           ! 5494                         8,
32543 840B                        08            .byte	8
32544                                           ! 5495                              0,
32545 840C                        00            .byte	0
32546                                           ! 5496                         0,
32547 840D                        00            .byte	0
32548                                           ! 5497                              0,
32549 840E                        00            .byte	0
32550                                           ! 5498                                0,
32551 840F                        00            .byte	0
32552                                           ! 5499                        0xE0000000,
32553 8410                      0000            .word	0
32554 8412                      E000            .word	$E000
32555                                           ! 5500                               0,
32556 8414                      0000            .word	0
32557 8416                      0000            .word	0
32558                                           ! 5501                             0,
32559 8418                      0000            .word	0
32560                                           ! 5502                                3840,
32561 841A                      0F00            .word	$F00
32562                                           ! 5503                             0,
32563 841C                        00            .byte	0
32564                                           ! 5504                             0,
32565 841D                        00            .byte	0
32566                                           ! 5505                           8,
32567 841E                        08            .byte	8
32568                                           ! 5506                                16,
32569 841F                        10            .byte	$10
32570                                           ! 5507                             8,
32571 8420                        08            .byte	8
32572                                           ! 5508                                  8,
32573 8421                        08            .byte	8
32574                                           ! 5509                            8,
32575 8422                        08            .byte	8
32576                                           ! 5510                                 0,
32577 8423                        00            .byte	0
32578                                           ! 5511                            0,
32579 8424                        00            .byte	0
32580                                           ! 5512                                 0,
32581 8425                        00            .byte	0
32582                                           ! 5513                          0,
32583 8426                      0000            .word	0
32584 8428                      0000            .word	0
32585                                           ! 5514 } },
32586                                           ! 5515 { 0x011c,
32587 842A                      011C            .word	$11C
32588                                           ! 5516 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32589 842C                      009B            .word	$9B
32590                                           ! 5517                           0x01 | 0x02 | 0x04,
32591                                           ! 5517 
32592 842E                        07            .byte	7
32593                                           ! 5518                           0,
32594 842F                        00            .byte	0
32595                                           ! 5519                           64,
32596 8430                      0040            .word	$40
32597                                           ! 5520                    64,
32598 8432                      0040            .word	$40
32599                                           ! 5521                        0xA000,
32600 8434                      A000            .word	$A000
32601                                           ! 5522                        0x0000,
32602 8436                      0000            .word	0
32603                                           ! 5523                       0,
32604 8438                      0000            .word	0
32605 843A                      0000            .word	0
32606                                           ! 5524                             1600,
32607 843C                      0640            .word	$640
32608                                           ! 5525                        1600,
32609 843E                      0640            .word	$640
32610                                           ! 5526                        1200,
32611 8440                      04B0            .word	$4B0
32612                                           ! 5527                      8,
32613 8442                        08            .byte	8
32614                                           ! 5528                      16,
32615 8443                        10            .byte	$10
32616                                           ! 5529                           1,
32617 8444                        01            .byte	1
32618                                           ! 5530                         8,
32619 8445                        08            .byte	8
32620                                           ! 5531                          30,
32621 8446                        1E            .byte	$1E
32622                                           ! 5532                        0x04,
32623 8447                        04            .byte	4
32624                                           ! 5533                     0,
32625 8448                        00            .byte	0
32626                                           ! 5534                               7,
32627 8449                        07            .byte	7
32628                                           ! 5535                          0,
32629 844A                        00            .byte	0
32630                                           ! 5536                        0,
32631 844B                        00            .byte	0
32632                                           ! 5537                             0,
32633 844C                        00            .byte	0
32634                                           ! 5538                          0,
32635 844D                        00            .byte	0
32636                                           ! 5539                               0,
32637 844E                        00            .byte	0
32638                                           ! 5540                         0,
32639 844F                        00            .byte	0
32640                                           ! 5541                              0,
32641 8450                        00            .byte	0
32642                                           ! 5542                         0,
32643 8451                        00            .byte	0
32644                                           ! 5543                              0,
32645 8452                        00            .byte	0
32646                                           ! 5544                                0,
32647 8453                        00            .byte	0
32648                                           ! 5545                        0xE0000000,
32649 8454                      0000            .word	0
32650 8456                      E000            .word	$E000
32651                                           ! 5546                               0,
32652 8458                      0000            .word	0
32653 845A                      0000            .word	0
32654                                           ! 5547                             0,
32655 845C                      0000            .word	0
32656                                           ! 5548                                1600,
32657 845E                      0640            .word	$640
32658                                           ! 5549                             0,
32659 8460                        00            .byte	0
32660                                           ! 5550                             0,
32661 8461                        00            .byte	0
32662                                           ! 5551                           0,
32663 8462                        00            .byte	0
32664                                           ! 5552                                0,
32665 8463                        00            .byte	0
32666                                           ! 5553                             0,
32667 8464                        00            .byte	0
32668                                           ! 5554                                  0,
32669 8465                        00            .byte	0
32670                                           ! 5555                            0,
32671 8466                        00            .byte	0
32672                                           ! 5556                                 0,
32673 8467                        00            .byte	0
32674                                           ! 5557                            0,
32675 8468                        00            .byte	0
32676                                           ! 5558                                 0,
32677 8469                        00            .byte	0
32678                                           ! 5559                          0,
32679 846A                      0000            .word	0
32680 846C                      0000            .word	0
32681                                           ! 5560 } },
32682                                           ! 5561 { 0x011d,
32683 846E                      011D            .word	$11D
32684                                           ! 5562 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32685 8470                      009B            .word	$9B
32686                                           ! 5563                           0x01 | 0x02 | 0x04,
32687 8472                        07            .byte	7
32688                                           ! 5564                           0,
32689 8473                        00            .byte	0
32690                                           ! 5565                           64,
32691 8474                      0040            .word	$40
32692                                           ! 5566                    64,
32693 8476                      0040            .word	$40
32694                                           ! 5567                        0xA000,
32695 8478                      A000            .word	$A000
32696                                           ! 5568                        0x0000,
32697 847A                      0000            .word	0
32698                                           ! 5569                       0,
32699 847C                      0000            .word	0
32700 847E                      0000            .word	0
32701                                           ! 5570                             3200,
32702 8480                      0C80            .word	$C80
32703                                           ! 5571                        1600,
32704 8482                      0640            .word	$640
32705                                           ! 5572                        1200,
32706 8484                      04B0            .word	$4B0
32707                                           ! 5573                      8,
32708 8486                        08            .byte	8
32709                                           ! 5574                      16,
32710 8487                        10            .byte	$10
32711                                           ! 5575                           1,
32712 8488                        01            .byte	1
32713                                           ! 5576                         15,
32714 8489                        0F            .byte	$F
32715                                           ! 5577                          59,
32716 848A                        3B            .byte	$3B
32717                                           ! 5578                        0x06,
32718 848B                        06            .byte	6
32719                                           ! 5579                     0,
32720 848C                        00            .byte	0
32721                                           ! 5580                               3,
32722 848D                        03            .byte	3
32723                                           ! 5581                          0,
32724 848E                        00            .byte	0
32725                                           ! 5582                        5,
32726 848F                        05            .byte	5
32727                                           ! 5583                             10,
32728 8490                        0A            .byte	$A
32729                                           ! 5584                          5,
32730 8491                        05            .byte	5
32731                                           ! 5585                               5,
32732 8492                        05            .byte	5
32733                                           ! 5586                         5,
32734 8493                        05            .byte	5
32735                                           ! 5587                      
32736                                           ! 5587         0,
32737 8494                        00            .byte	0
32738                                           ! 5588                         1,
32739 8495                        01            .byte	1
32740                                           ! 5589                              15,
32741 8496                        0F            .byte	$F
32742                                           ! 5590                                0,
32743 8497                        00            .byte	0
32744                                           ! 5591                        0xE0000000,
32745 8498                      0000            .word	0
32746 849A                      E000            .word	$E000
32747                                           ! 5592                               0,
32748 849C                      0000            .word	0
32749 849E                      0000            .word	0
32750                                           ! 5593                             0,
32751 84A0                      0000            .word	0
32752                                           ! 5594                                3200,
32753 84A2                      0C80            .word	$C80
32754                                           ! 5595                             0,
32755 84A4                        00            .byte	0
32756                                           ! 5596                             0,
32757 84A5                        00            .byte	0
32758                                           ! 5597                           5,
32759 84A6                        05            .byte	5
32760                                           ! 5598                                10,
32761 84A7                        0A            .byte	$A
32762                                           ! 5599                             5,
32763 84A8                        05            .byte	5
32764                                           ! 5600                                  5,
32765 84A9                        05            .byte	5
32766                                           ! 5601                            5,
32767 84AA                        05            .byte	5
32768                                           ! 5602                                 0,
32769 84AB                        00            .byte	0
32770                                           ! 5603                            1,
32771 84AC                        01            .byte	1
32772                                           ! 5604                                 15,
32773 84AD                        0F            .byte	$F
32774                                           ! 5605                          0,
32775 84AE                      0000            .word	0
32776 84B0                      0000            .word	0
32777                                           ! 5606 } },
32778                                           ! 5607 { 0x011e,
32779 84B2                      011E            .word	$11E
32780                                           ! 5608 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32781 84B4                      009B            .word	$9B
32782                                           ! 5609                           0x01 | 0x02 | 0x04,
32783 84B6                        07            .byte	7
32784                                           ! 5610                           0,
32785 84B7                        00            .byte	0
32786                                           ! 5611                           64,
32787 84B8                      0040            .word	$40
32788                                           ! 5612                    64,
32789 84BA                      0040            .word	$40
32790                                           ! 5613                        0xA000,
32791 84BC                      A000            .word	$A000
32792                                           ! 5614                        0x0000,
32793 84BE                      0000            .word	0
32794                                           ! 5615                       0,
32795 84C0                      0000            .word	0
32796 84C2                      0000            .word	0
32797                                           ! 5616                             3200,
32798 84C4                      0C80            .word	$C80
32799                                           ! 5617                        1600,
32800 84C6                      0640            .word	$640
32801                                           ! 5618                        1200,
32802 84C8                      04B0            .word	$4B0
32803                                           ! 5619                      8,
32804 84CA                        08            .byte	8
32805                                           ! 5620                      16,
32806 84CB                        10            .byte	$10
32807                                           ! 5621                           1,
32808 84CC                        01            .byte	1
32809                                           ! 5622                         16,
32810 84CD                        10            .byte	$10
32811                                           ! 5623                          59,
32812 84CE                        3B            .byte	$3B
32813                                           ! 5624                        0x06,
32814 84CF                        06            .byte	6
32815                                           ! 5625                     0,
32816 84D0                        00            .byte	0
32817                                           ! 5626                               3,
32818 84D1                        03            .byte	3
32819                                           ! 5627                          0,
32820 84D2                        00            .byte	0
32821                                           ! 5628                        5,
32822 84D3                        05            .byte	5
32823                                           ! 5629                             11,
32824 84D4                        0B            .byte	$B
32825                                           ! 5630                          6,
32826 84D5                        06            .byte	6
32827                                           ! 5631                               5,
32828 84D6                        05            .byte	5
32829                                           ! 5632                         5,
32830 84D7                        05            .byte	5
32831                                           ! 5633                              0,
32832 84D8                        00            .byte	0
32833                                           ! 5634                         0,
32834 84D9                        00            .byte	0
32835                                           ! 5635                              0,
32836 84DA                        00            .byte	0
32837                                           ! 5636                                0,
32838 84DB                        00            .byte	0
32839                                           ! 5637                        0xE0000000,
32840 84DC                      0000            .word	0
32841 84DE                      E000            .word	$E000
32842                                           ! 5638                               0,
32843 84E0                      0000            .word	0
32844 84E2                      0000            .word	0
32845                                           ! 5639                             0,
32846 84E4                      0000            .word	0
32847                                           ! 5640                                3200,
32848 84E6                      0C80            .word	$C80
32849                                           ! 5641                             0,
32850 84E8                        00            .byte	0
32851                                           ! 5642                             0,
32852 84E9                        00            .byte	0
32853                                           ! 5643                           5,
32854 84EA                        05            .byte	5
32855                                           ! 5644                                11,
32856 84EB                        0B            .byte	$B
32857                                           ! 5645                             6,
32858 84EC                        06            .byte	6
32859                                           ! 5646                                  5,
32860 84ED                        05            .byte	5
32861                                           ! 5647                            5,
32862 84EE                        05            .byte	5
32863                                           ! 5648                                 0,
32864 84EF                        00            .byte	0
32865                                           ! 5649                            0,
32866 84F0                        00            .byte	0
32867                                           ! 5650                                 0,
32868 84F1                        00            .byte	0
32869                                           ! 5651                          0,
32870 84F2                      0000            .word	0
32871 84F4                      0000            .word	0
32872                                           ! 5652 } },
32873                                           ! 5653 { 0x011f,
32874 84F6                      011F            .word	$11F
32875                                           ! 5654 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32876 84F8                      009B            .word	$9B
32877                                           ! 5655                     
32878                                           ! 5655       0x01 | 0x02 | 0x04,
32879 84FA                        07            .byte	7
32880                                           ! 5656                           0,
32881 84FB                        00            .byte	0
32882                                           ! 5657                           64,
32883 84FC                      0040            .word	$40
32884                                           ! 5658                    64,
32885 84FE                      0040            .word	$40
32886                                           ! 5659                        0xA000,
32887 8500                      A000            .word	$A000
32888                                           ! 5660                        0x0000,
32889 8502                      0000            .word	0
32890                                           ! 5661                       0,
32891 8504                      0000            .word	0
32892 8506                      0000            .word	0
32893                                           ! 5662                             4800,
32894 8508                      12C0            .word	$12C0
32895                                           ! 5663                        1600,
32896 850A                      0640            .word	$640
32897                                           ! 5664                        1200,
32898 850C                      04B0            .word	$4B0
32899                                           ! 5665                      8,
32900 850E                        08            .byte	8
32901                                           ! 5666                      16,
32902 850F                        10            .byte	$10
32903                                           ! 5667                           1,
32904 8510                        01            .byte	1
32905                                           ! 5668                         24,
32906 8511                        18            .byte	$18
32907                                           ! 5669                          88,
32908 8512                        58            .byte	$58
32909                                           ! 5670                        0x06,
32910 8513                        06            .byte	6
32911                                           ! 5671                     0,
32912 8514                        00            .byte	0
32913                                           ! 5672                               1,
32914 8515                        01            .byte	1
32915                                           ! 5673                          0,
32916 8516                        00            .byte	0
32917                                           ! 5674                        8,
32918 8517                        08            .byte	8
32919                                           ! 5675                             16,
32920 8518                        10            .byte	$10
32921                                           ! 5676                          8,
32922 8519                        08            .byte	8
32923                                           ! 5677                               8,
32924 851A                        08            .byte	8
32925                                           ! 5678                         8,
32926 851B                        08            .byte	8
32927                                           ! 5679                              0,
32928 851C                        00            .byte	0
32929                                           ! 5680                         0,
32930 851D                        00            .byte	0
32931                                           ! 5681                              0,
32932 851E                        00            .byte	0
32933                                           ! 5682                                0,
32934 851F                        00            .byte	0
32935                                           ! 5683                        0xE0000000,
32936 8520                      0000            .word	0
32937 8522                      E000            .word	$E000
32938                                           ! 5684                               0,
32939 8524                      0000            .word	0
32940 8526                      0000            .word	0
32941                                           ! 5685                             0,
32942 8528                      0000            .word	0
32943                                           ! 5686                                4800,
32944 852A                      12C0            .word	$12C0
32945                                           ! 5687                             0,
32946 852C                        00            .byte	0
32947                                           ! 5688                             0,
32948 852D                        00            .byte	0
32949                                           ! 5689                           8,
32950 852E                        08            .byte	8
32951                                           ! 5690                                16,
32952 852F                        10            .byte	$10
32953                                           ! 5691                             8,
32954 8530                        08            .byte	8
32955                                           ! 5692                                  8,
32956 8531                        08            .byte	8
32957                                           ! 5693                            8,
32958 8532                        08            .byte	8
32959                                           ! 5694                                 0,
32960 8533                        00            .byte	0
32961                                           ! 5695                            0,
32962 8534                        00            .byte	0
32963                                           ! 5696                                 0,
32964 8535                        00            .byte	0
32965                                           ! 5697                          0,
32966 8536                      0000            .word	0
32967 8538                      0000            .word	0
32968                                           ! 5698 } },
32969                                           ! 5699 { 0x0140,
32970 853A                      0140            .word	$140
32971                                           ! 5700 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32972 853C                      009B            .word	$9B
32973                                           ! 5701                           0x01 | 0x02 | 0x04,
32974 853E                        07            .byte	7
32975                                           ! 5702                           0,
32976 853F                        00            .byte	0
32977                                           ! 5703                           64,
32978 8540                      0040            .word	$40
32979                                           ! 5704                    64,
32980 8542                      0040            .word	$40
32981                                           ! 5705                        0xA000,
32982 8544                      A000            .word	$A000
32983                                           ! 5706                        0x0000,
32984 8546                      0000            .word	0
32985                                           ! 5707                       0,
32986 8548                      0000            .word	0
32987 854A                      0000            .word	0
32988                                           ! 5708                             1280,
32989 854C                      0500            .word	$500
32990                                           ! 5709                        320,
32991 854E                      0140            .word	$140
32992                                           ! 5710                        200,
32993 8550                      00C8            .word	$C8
32994                                           ! 5711                      8,
32995 8552                        08            .byte	8
32996                                           ! 5712                      16,
32997 8553                        10            .byte	$10
32998                                           ! 5713                           1,
32999 8554                        01            .byte	1
33000                                           ! 5714                         32,
33001 8555                        20            .byte	$20
33002                                           ! 5715                          4,
33003 8556                        04            .byte	4
33004                                           ! 5716                        0x06,
33005 8557                        06            .byte	6
33006                                           ! 5717                     0,
33007 8558                        00            .byte	0
33008                                           ! 5718                               64,
33009 8559                        40            .byte	$40
33010                                           ! 5719                          0,
33011 855A                        00            .byte	0
33012                                           ! 5720                        8,
33013 855B                        08            .byte	8
33014                                           ! 5721                             16,
33015 855C                        10            .byte	$10
33016                                           ! 5722                          8,
33017 855D                        08            .byte	8
33018                                           ! 5723                               8,
33019 855E                        08            .byte	8
33020                                           ! 5724                       
33021                                           ! 5724   8,
33022 855F                        08            .byte	8
33023                                           ! 5725                              0,
33024 8560                        00            .byte	0
33025                                           ! 5726                         8,
33026 8561                        08            .byte	8
33027                                           ! 5727                              24,
33028 8562                        18            .byte	$18
33029                                           ! 5728                                0x02,
33030 8563                        02            .byte	2
33031                                           ! 5729                        0xE0000000,
33032 8564                      0000            .word	0
33033 8566                      E000            .word	$E000
33034                                           ! 5730                               0,
33035 8568                      0000            .word	0
33036 856A                      0000            .word	0
33037                                           ! 5731                             0,
33038 856C                      0000            .word	0
33039                                           ! 5732                                1280,
33040 856E                      0500            .word	$500
33041                                           ! 5733                             0,
33042 8570                        00            .byte	0
33043                                           ! 5734                             0,
33044 8571                        00            .byte	0
33045                                           ! 5735                           8,
33046 8572                        08            .byte	8
33047                                           ! 5736                                16,
33048 8573                        10            .byte	$10
33049                                           ! 5737                             8,
33050 8574                        08            .byte	8
33051                                           ! 5738                                  8,
33052 8575                        08            .byte	8
33053                                           ! 5739                            8,
33054 8576                        08            .byte	8
33055                                           ! 5740                                 0,
33056 8577                        00            .byte	0
33057                                           ! 5741                            8,
33058 8578                        08            .byte	8
33059                                           ! 5742                                 24,
33060 8579                        18            .byte	$18
33061                                           ! 5743                          0,
33062 857A                      0000            .word	0
33063 857C                      0000            .word	0
33064                                           ! 5744 } },
33065                                           ! 5745 { 0x0141,
33066 857E                      0141            .word	$141
33067                                           ! 5746 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33068 8580                      009B            .word	$9B
33069                                           ! 5747                           0x01 | 0x02 | 0x04,
33070 8582                        07            .byte	7
33071                                           ! 5748                           0,
33072 8583                        00            .byte	0
33073                                           ! 5749                           64,
33074 8584                      0040            .word	$40
33075                                           ! 5750                    64,
33076 8586                      0040            .word	$40
33077                                           ! 5751                        0xA000,
33078 8588                      A000            .word	$A000
33079                                           ! 5752                        0x0000,
33080 858A                      0000            .word	0
33081                                           ! 5753                       0,
33082 858C                      0000            .word	0
33083 858E                      0000            .word	0
33084                                           ! 5754                             2560,
33085 8590                      0A00            .word	$A00
33086                                           ! 5755                        640,
33087 8592                      0280            .word	$280
33088                                           ! 5756                        400,
33089 8594                      0190            .word	$190
33090                                           ! 5757                      8,
33091 8596                        08            .byte	8
33092                                           ! 5758                      16,
33093 8597                        10            .byte	$10
33094                                           ! 5759                           1,
33095 8598                        01            .byte	1
33096                                           ! 5760                         32,
33097 8599                        20            .byte	$20
33098                                           ! 5761                          16,
33099 859A                        10            .byte	$10
33100                                           ! 5762                        0x06,
33101 859B                        06            .byte	6
33102                                           ! 5763                     0,
33103 859C                        00            .byte	0
33104                                           ! 5764                               15,
33105 859D                        0F            .byte	$F
33106                                           ! 5765                          0,
33107 859E                        00            .byte	0
33108                                           ! 5766                        8,
33109 859F                        08            .byte	8
33110                                           ! 5767                             16,
33111 85A0                        10            .byte	$10
33112                                           ! 5768                          8,
33113 85A1                        08            .byte	8
33114                                           ! 5769                               8,
33115 85A2                        08            .byte	8
33116                                           ! 5770                         8,
33117 85A3                        08            .byte	8
33118                                           ! 5771                              0,
33119 85A4                        00            .byte	0
33120                                           ! 5772                         8,
33121 85A5                        08            .byte	8
33122                                           ! 5773                              24,
33123 85A6                        18            .byte	$18
33124                                           ! 5774                                0x02,
33125 85A7                        02            .byte	2
33126                                           ! 5775                        0xE0000000,
33127 85A8                      0000            .word	0
33128 85AA                      E000            .word	$E000
33129                                           ! 5776                               0,
33130 85AC                      0000            .word	0
33131 85AE                      0000            .word	0
33132                                           ! 5777                             0,
33133 85B0                      0000            .word	0
33134                                           ! 5778                                2560,
33135 85B2                      0A00            .word	$A00
33136                                           ! 5779                             0,
33137 85B4                        00            .byte	0
33138                                           ! 5780                             0,
33139 85B5                        00            .byte	0
33140                                           ! 5781                           8,
33141 85B6                        08            .byte	8
33142                                           ! 5782                                16,
33143 85B7                        10            .byte	$10
33144                                           ! 5783                             8,
33145 85B8                        08            .byte	8
33146                                           ! 5784                                  8,
33147 85B9                        08            .byte	8
33148                                           ! 5785                            8,
33149 85BA                        08            .byte	8
33150                                           ! 5786                                 0,
33151 85BB                        00            .byte	0
33152                                           ! 5787                            8,
33153 85BC                        08            .byte	8
33154                                           ! 5788                                 24,
33155 85BD                        18            .byte	$18
33156                                           ! 5789                          0,
33157 85BE                      0000            .word	0
33158 85C0                      0000            .word	0
33159                                           ! 5790 } },
33160                                           ! 5791 { 0x0142,
33161 85C2                      0142            .word	$142
33162                                           ! 5792 { 0x0001 | 0x0002 | 0x0008 | 0x00
33163                                           ! 5792 80 | 0x0010,
33164 85C4                      009B            .word	$9B
33165                                           ! 5793                           0x01 | 0x02 | 0x04,
33166 85C6                        07            .byte	7
33167                                           ! 5794                           0,
33168 85C7                        00            .byte	0
33169                                           ! 5795                           64,
33170 85C8                      0040            .word	$40
33171                                           ! 5796                    64,
33172 85CA                      0040            .word	$40
33173                                           ! 5797                        0xA000,
33174 85CC                      A000            .word	$A000
33175                                           ! 5798                        0x0000,
33176 85CE                      0000            .word	0
33177                                           ! 5799                       0,
33178 85D0                      0000            .word	0
33179 85D2                      0000            .word	0
33180                                           ! 5800                             2560,
33181 85D4                      0A00            .word	$A00
33182                                           ! 5801                        640,
33183 85D6                      0280            .word	$280
33184                                           ! 5802                        480,
33185 85D8                      01E0            .word	$1E0
33186                                           ! 5803                      8,
33187 85DA                        08            .byte	8
33188                                           ! 5804                      16,
33189 85DB                        10            .byte	$10
33190                                           ! 5805                           1,
33191 85DC                        01            .byte	1
33192                                           ! 5806                         32,
33193 85DD                        20            .byte	$20
33194                                           ! 5807                          19,
33195 85DE                        13            .byte	$13
33196                                           ! 5808                        0x06,
33197 85DF                        06            .byte	6
33198                                           ! 5809                     0,
33199 85E0                        00            .byte	0
33200                                           ! 5810                               12,
33201 85E1                        0C            .byte	$C
33202                                           ! 5811                          0,
33203 85E2                        00            .byte	0
33204                                           ! 5812                        8,
33205 85E3                        08            .byte	8
33206                                           ! 5813                             16,
33207 85E4                        10            .byte	$10
33208                                           ! 5814                          8,
33209 85E5                        08            .byte	8
33210                                           ! 5815                               8,
33211 85E6                        08            .byte	8
33212                                           ! 5816                         8,
33213 85E7                        08            .byte	8
33214                                           ! 5817                              0,
33215 85E8                        00            .byte	0
33216                                           ! 5818                         8,
33217 85E9                        08            .byte	8
33218                                           ! 5819                              24,
33219 85EA                        18            .byte	$18
33220                                           ! 5820                                0x02,
33221 85EB                        02            .byte	2
33222                                           ! 5821                        0xE0000000,
33223 85EC                      0000            .word	0
33224 85EE                      E000            .word	$E000
33225                                           ! 5822                               0,
33226 85F0                      0000            .word	0
33227 85F2                      0000            .word	0
33228                                           ! 5823                             0,
33229 85F4                      0000            .word	0
33230                                           ! 5824                                2560,
33231 85F6                      0A00            .word	$A00
33232                                           ! 5825                             0,
33233 85F8                        00            .byte	0
33234                                           ! 5826                             0,
33235 85F9                        00            .byte	0
33236                                           ! 5827                           8,
33237 85FA                        08            .byte	8
33238                                           ! 5828                                16,
33239 85FB                        10            .byte	$10
33240                                           ! 5829                             8,
33241 85FC                        08            .byte	8
33242                                           ! 5830                                  8,
33243 85FD                        08            .byte	8
33244                                           ! 5831                            8,
33245 85FE                        08            .byte	8
33246                                           ! 5832                                 0,
33247 85FF                        00            .byte	0
33248                                           ! 5833                            8,
33249 8600                        08            .byte	8
33250                                           ! 5834                                 24,
33251 8601                        18            .byte	$18
33252                                           ! 5835                          0,
33253 8602                      0000            .word	0
33254 8604                      0000            .word	0
33255                                           ! 5836 } },
33256                                           ! 5837 { 0x0143,
33257 8606                      0143            .word	$143
33258                                           ! 5838 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33259 8608                      009B            .word	$9B
33260                                           ! 5839                           0x01 | 0x02 | 0x04,
33261 860A                        07            .byte	7
33262                                           ! 5840                           0,
33263 860B                        00            .byte	0
33264                                           ! 5841                           64,
33265 860C                      0040            .word	$40
33266                                           ! 5842                    64,
33267 860E                      0040            .word	$40
33268                                           ! 5843                        0xA000,
33269 8610                      A000            .word	$A000
33270                                           ! 5844                        0x0000,
33271 8612                      0000            .word	0
33272                                           ! 5845                       0,
33273 8614                      0000            .word	0
33274 8616                      0000            .word	0
33275                                           ! 5846                             3200,
33276 8618                      0C80            .word	$C80
33277                                           ! 5847                        800,
33278 861A                      0320            .word	$320
33279                                           ! 5848                        600,
33280 861C                      0258            .word	$258
33281                                           ! 5849                      8,
33282 861E                        08            .byte	8
33283                                           ! 5850                      16,
33284 861F                        10            .byte	$10
33285                                           ! 5851                           1,
33286 8620                        01            .byte	1
33287                                           ! 5852                         32,
33288 8621                        20            .byte	$20
33289                                           ! 5853                          30,
33290 8622                        1E            .byte	$1E
33291                                           ! 5854                        0x06,
33292 8623                        06            .byte	6
33293                                           ! 5855                     0,
33294 8624                        00            .byte	0
33295                                           ! 5856                               7,
33296 8625                        07            .byte	7
33297                                           ! 5857                          0,
33298 8626                        00            .byte	0
33299                                           ! 5858                        8,
33300 8627                        08            .byte	8
33301                                           ! 5859                             16,
33302 8628                        10            .byte	$10
33303                                           ! 5860                          8,
33304 8629                        08            .byte	8
33305                                           ! 5861                   
33306                                           ! 5861             8,
33307 862A                        08            .byte	8
33308                                           ! 5862                         8,
33309 862B                        08            .byte	8
33310                                           ! 5863                              0,
33311 862C                        00            .byte	0
33312                                           ! 5864                         8,
33313 862D                        08            .byte	8
33314                                           ! 5865                              24,
33315 862E                        18            .byte	$18
33316                                           ! 5866                                0x02,
33317 862F                        02            .byte	2
33318                                           ! 5867                        0xE0000000,
33319 8630                      0000            .word	0
33320 8632                      E000            .word	$E000
33321                                           ! 5868                               0,
33322 8634                      0000            .word	0
33323 8636                      0000            .word	0
33324                                           ! 5869                             0,
33325 8638                      0000            .word	0
33326                                           ! 5870                                3200,
33327 863A                      0C80            .word	$C80
33328                                           ! 5871                             0,
33329 863C                        00            .byte	0
33330                                           ! 5872                             0,
33331 863D                        00            .byte	0
33332                                           ! 5873                           8,
33333 863E                        08            .byte	8
33334                                           ! 5874                                16,
33335 863F                        10            .byte	$10
33336                                           ! 5875                             8,
33337 8640                        08            .byte	8
33338                                           ! 5876                                  8,
33339 8641                        08            .byte	8
33340                                           ! 5877                            8,
33341 8642                        08            .byte	8
33342                                           ! 5878                                 0,
33343 8643                        00            .byte	0
33344                                           ! 5879                            8,
33345 8644                        08            .byte	8
33346                                           ! 5880                                 24,
33347 8645                        18            .byte	$18
33348                                           ! 5881                          0,
33349 8646                      0000            .word	0
33350 8648                      0000            .word	0
33351                                           ! 5882 } },
33352                                           ! 5883 { 0x0144,
33353 864A                      0144            .word	$144
33354                                           ! 5884 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33355 864C                      009B            .word	$9B
33356                                           ! 5885                           0x01 | 0x02 | 0x04,
33357 864E                        07            .byte	7
33358                                           ! 5886                           0,
33359 864F                        00            .byte	0
33360                                           ! 5887                           64,
33361 8650                      0040            .word	$40
33362                                           ! 5888                    64,
33363 8652                      0040            .word	$40
33364                                           ! 5889                        0xA000,
33365 8654                      A000            .word	$A000
33366                                           ! 5890                        0x0000,
33367 8656                      0000            .word	0
33368                                           ! 5891                       0,
33369 8658                      0000            .word	0
33370 865A                      0000            .word	0
33371                                           ! 5892                             4096,
33372 865C                      1000            .word	$1000
33373                                           ! 5893                        1024,
33374 865E                      0400            .word	$400
33375                                           ! 5894                        768,
33376 8660                      0300            .word	$300
33377                                           ! 5895                      8,
33378 8662                        08            .byte	8
33379                                           ! 5896                      16,
33380 8663                        10            .byte	$10
33381                                           ! 5897                           1,
33382 8664                        01            .byte	1
33383                                           ! 5898                         32,
33384 8665                        20            .byte	$20
33385                                           ! 5899                          48,
33386 8666                        30            .byte	$30
33387                                           ! 5900                        0x06,
33388 8667                        06            .byte	6
33389                                           ! 5901                     0,
33390 8668                        00            .byte	0
33391                                           ! 5902                               4,
33392 8669                        04            .byte	4
33393                                           ! 5903                          0,
33394 866A                        00            .byte	0
33395                                           ! 5904                        8,
33396 866B                        08            .byte	8
33397                                           ! 5905                             16,
33398 866C                        10            .byte	$10
33399                                           ! 5906                          8,
33400 866D                        08            .byte	8
33401                                           ! 5907                               8,
33402 866E                        08            .byte	8
33403                                           ! 5908                         8,
33404 866F                        08            .byte	8
33405                                           ! 5909                              0,
33406 8670                        00            .byte	0
33407                                           ! 5910                         8,
33408 8671                        08            .byte	8
33409                                           ! 5911                              24,
33410 8672                        18            .byte	$18
33411                                           ! 5912                                0x02,
33412 8673                        02            .byte	2
33413                                           ! 5913                        0xE0000000,
33414 8674                      0000            .word	0
33415 8676                      E000            .word	$E000
33416                                           ! 5914                               0,
33417 8678                      0000            .word	0
33418 867A                      0000            .word	0
33419                                           ! 5915                             0,
33420 867C                      0000            .word	0
33421                                           ! 5916                                4096,
33422 867E                      1000            .word	$1000
33423                                           ! 5917                             0,
33424 8680                        00            .byte	0
33425                                           ! 5918                             0,
33426 8681                        00            .byte	0
33427                                           ! 5919                           8,
33428 8682                        08            .byte	8
33429                                           ! 5920                                16,
33430 8683                        10            .byte	$10
33431                                           ! 5921                             8,
33432 8684                        08            .byte	8
33433                                           ! 5922                                  8,
33434 8685                        08            .byte	8
33435                                           ! 5923                            8,
33436 8686                        08            .byte	8
33437                                           ! 5924                                 0,
33438 8687                        00            .byte	0
33439                                           ! 5925                            8,
33440 8688                        08            .byte	8
33441                                           ! 5926                                 24,
33442 8689                        18            .byte	$18
33443                                           ! 5927                          0,
33444 868A                      0000            .word	0
33445 868C                      0000            .word	0
33446                                           ! 5928 } },
33447                                           ! 5929 { 0x01
33448                                           ! 5929 45,
33449 868E                      0145            .word	$145
33450                                           ! 5930 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33451 8690                      009B            .word	$9B
33452                                           ! 5931                           0x01 | 0x02 | 0x04,
33453 8692                        07            .byte	7
33454                                           ! 5932                           0,
33455 8693                        00            .byte	0
33456                                           ! 5933                           64,
33457 8694                      0040            .word	$40
33458                                           ! 5934                    64,
33459 8696                      0040            .word	$40
33460                                           ! 5935                        0xA000,
33461 8698                      A000            .word	$A000
33462                                           ! 5936                        0x0000,
33463 869A                      0000            .word	0
33464                                           ! 5937                       0,
33465 869C                      0000            .word	0
33466 869E                      0000            .word	0
33467                                           ! 5938                             5120,
33468 86A0                      1400            .word	$1400
33469                                           ! 5939                        1280,
33470 86A2                      0500            .word	$500
33471                                           ! 5940                        1024,
33472 86A4                      0400            .word	$400
33473                                           ! 5941                      8,
33474 86A6                        08            .byte	8
33475                                           ! 5942                      16,
33476 86A7                        10            .byte	$10
33477                                           ! 5943                           1,
33478 86A8                        01            .byte	1
33479                                           ! 5944                         32,
33480 86A9                        20            .byte	$20
33481                                           ! 5945                          80,
33482 86AA                        50            .byte	$50
33483                                           ! 5946                        0x06,
33484 86AB                        06            .byte	6
33485                                           ! 5947                     0,
33486 86AC                        00            .byte	0
33487                                           ! 5948                               2,
33488 86AD                        02            .byte	2
33489                                           ! 5949                          0,
33490 86AE                        00            .byte	0
33491                                           ! 5950                        8,
33492 86AF                        08            .byte	8
33493                                           ! 5951                             16,
33494 86B0                        10            .byte	$10
33495                                           ! 5952                          8,
33496 86B1                        08            .byte	8
33497                                           ! 5953                               8,
33498 86B2                        08            .byte	8
33499                                           ! 5954                         8,
33500 86B3                        08            .byte	8
33501                                           ! 5955                              0,
33502 86B4                        00            .byte	0
33503                                           ! 5956                         8,
33504 86B5                        08            .byte	8
33505                                           ! 5957                              24,
33506 86B6                        18            .byte	$18
33507                                           ! 5958                                0x02,
33508 86B7                        02            .byte	2
33509                                           ! 5959                        0xE0000000,
33510 86B8                      0000            .word	0
33511 86BA                      E000            .word	$E000
33512                                           ! 5960                               0,
33513 86BC                      0000            .word	0
33514 86BE                      0000            .word	0
33515                                           ! 5961                             0,
33516 86C0                      0000            .word	0
33517                                           ! 5962                                5120,
33518 86C2                      1400            .word	$1400
33519                                           ! 5963                             0,
33520 86C4                        00            .byte	0
33521                                           ! 5964                             0,
33522 86C5                        00            .byte	0
33523                                           ! 5965                           8,
33524 86C6                        08            .byte	8
33525                                           ! 5966                                16,
33526 86C7                        10            .byte	$10
33527                                           ! 5967                             8,
33528 86C8                        08            .byte	8
33529                                           ! 5968                                  8,
33530 86C9                        08            .byte	8
33531                                           ! 5969                            8,
33532 86CA                        08            .byte	8
33533                                           ! 5970                                 0,
33534 86CB                        00            .byte	0
33535                                           ! 5971                            8,
33536 86CC                        08            .byte	8
33537                                           ! 5972                                 24,
33538 86CD                        18            .byte	$18
33539                                           ! 5973                          0,
33540 86CE                      0000            .word	0
33541 86D0                      0000            .word	0
33542                                           ! 5974 } },
33543                                           ! 5975 { 0x0146,
33544 86D2                      0146            .word	$146
33545                                           ! 5976 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33546 86D4                      009B            .word	$9B
33547                                           ! 5977                           0x01 | 0x02 | 0x04,
33548 86D6                        07            .byte	7
33549                                           ! 5978                           0,
33550 86D7                        00            .byte	0
33551                                           ! 5979                           64,
33552 86D8                      0040            .word	$40
33553                                           ! 5980                    64,
33554 86DA                      0040            .word	$40
33555                                           ! 5981                        0xA000,
33556 86DC                      A000            .word	$A000
33557                                           ! 5982                        0x0000,
33558 86DE                      0000            .word	0
33559                                           ! 5983                       0,
33560 86E0                      0000            .word	0
33561 86E2                      0000            .word	0
33562                                           ! 5984                             320,
33563 86E4                      0140            .word	$140
33564                                           ! 5985                        320,
33565 86E6                      0140            .word	$140
33566                                           ! 5986                        200,
33567 86E8                      00C8            .word	$C8
33568                                           ! 5987                      8,
33569 86EA                        08            .byte	8
33570                                           ! 5988                      16,
33571 86EB                        10            .byte	$10
33572                                           ! 5989                           1,
33573 86EC                        01            .byte	1
33574                                           ! 5990                         8,
33575 86ED                        08            .byte	8
33576                                           ! 5991                          1,
33577 86EE                        01            .byte	1
33578                                           ! 5992                        0x04,
33579 86EF                        04            .byte	4
33580                                           ! 5993                     0,
33581 86F0                        00            .byte	0
33582                                           ! 5994                               261,
33583 86F1                        05            .byte	5
33584                                           ! 5995                          0,
33585 86F2                        00            .byte	0
33586                                           ! 5996                        0,
33587 86F3                        00            .byte	0
33588                                           ! 5997                             0,
33589 86F4                        00            .byte	0
33590                                           ! 5998           
33591                                           ! 5998                0,
33592 86F5                        00            .byte	0
33593                                           ! 5999                               0,
33594 86F6                        00            .byte	0
33595                                           ! 6000                         0,
33596 86F7                        00            .byte	0
33597                                           ! 6001                              0,
33598 86F8                        00            .byte	0
33599                                           ! 6002                         0,
33600 86F9                        00            .byte	0
33601                                           ! 6003                              0,
33602 86FA                        00            .byte	0
33603                                           ! 6004                                0,
33604 86FB                        00            .byte	0
33605                                           ! 6005                        0xE0000000,
33606 86FC                      0000            .word	0
33607 86FE                      E000            .word	$E000
33608                                           ! 6006                               0,
33609 8700                      0000            .word	0
33610 8702                      0000            .word	0
33611                                           ! 6007                             0,
33612 8704                      0000            .word	0
33613                                           ! 6008                                320,
33614 8706                      0140            .word	$140
33615                                           ! 6009                             0,
33616 8708                        00            .byte	0
33617                                           ! 6010                             0,
33618 8709                        00            .byte	0
33619                                           ! 6011                           0,
33620 870A                        00            .byte	0
33621                                           ! 6012                                0,
33622 870B                        00            .byte	0
33623                                           ! 6013                             0,
33624 870C                        00            .byte	0
33625                                           ! 6014                                  0,
33626 870D                        00            .byte	0
33627                                           ! 6015                            0,
33628 870E                        00            .byte	0
33629                                           ! 6016                                 0,
33630 870F                        00            .byte	0
33631                                           ! 6017                            0,
33632 8710                        00            .byte	0
33633                                           ! 6018                                 0,
33634 8711                        00            .byte	0
33635                                           ! 6019                          0,
33636 8712                      0000            .word	0
33637 8714                      0000            .word	0
33638                                           ! 6020 } },
33639                                           ! 6021 { 0x0147,
33640 8716                      0147            .word	$147
33641                                           ! 6022 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33642 8718                      009B            .word	$9B
33643                                           ! 6023                           0x01 | 0x02 | 0x04,
33644 871A                        07            .byte	7
33645                                           ! 6024                           0,
33646 871B                        00            .byte	0
33647                                           ! 6025                           64,
33648 871C                      0040            .word	$40
33649                                           ! 6026                    64,
33650 871E                      0040            .word	$40
33651                                           ! 6027                        0xA000,
33652 8720                      A000            .word	$A000
33653                                           ! 6028                        0x0000,
33654 8722                      0000            .word	0
33655                                           ! 6029                       0,
33656 8724                      0000            .word	0
33657 8726                      0000            .word	0
33658                                           ! 6030                             6400,
33659 8728                      1900            .word	$1900
33660                                           ! 6031                        1600,
33661 872A                      0640            .word	$640
33662                                           ! 6032                        1200,
33663 872C                      04B0            .word	$4B0
33664                                           ! 6033                      8,
33665 872E                        08            .byte	8
33666                                           ! 6034                      16,
33667 872F                        10            .byte	$10
33668                                           ! 6035                           1,
33669 8730                        01            .byte	1
33670                                           ! 6036                         32,
33671 8731                        20            .byte	$20
33672                                           ! 6037                          118,
33673 8732                        76            .byte	$76
33674                                           ! 6038                        0x06,
33675 8733                        06            .byte	6
33676                                           ! 6039                     0,
33677 8734                        00            .byte	0
33678                                           ! 6040                               1,
33679 8735                        01            .byte	1
33680                                           ! 6041                          0,
33681 8736                        00            .byte	0
33682                                           ! 6042                        8,
33683 8737                        08            .byte	8
33684                                           ! 6043                             16,
33685 8738                        10            .byte	$10
33686                                           ! 6044                          8,
33687 8739                        08            .byte	8
33688                                           ! 6045                               8,
33689 873A                        08            .byte	8
33690                                           ! 6046                         8,
33691 873B                        08            .byte	8
33692                                           ! 6047                              0,
33693 873C                        00            .byte	0
33694                                           ! 6048                         8,
33695 873D                        08            .byte	8
33696                                           ! 6049                              24,
33697 873E                        18            .byte	$18
33698                                           ! 6050                                0x02,
33699 873F                        02            .byte	2
33700                                           ! 6051                        0xE0000000,
33701 8740                      0000            .word	0
33702 8742                      E000            .word	$E000
33703                                           ! 6052                               0,
33704 8744                      0000            .word	0
33705 8746                      0000            .word	0
33706                                           ! 6053                             0,
33707 8748                      0000            .word	0
33708                                           ! 6054                                6400,
33709 874A                      1900            .word	$1900
33710                                           ! 6055                             0,
33711 874C                        00            .byte	0
33712                                           ! 6056                             0,
33713 874D                        00            .byte	0
33714                                           ! 6057                           8,
33715 874E                        08            .byte	8
33716                                           ! 6058                                16,
33717 874F                        10            .byte	$10
33718                                           ! 6059                             8,
33719 8750                        08            .byte	8
33720                                           ! 6060                                  8,
33721 8751                        08            .byte	8
33722                                           ! 6061                            8,
33723 8752                        08            .byte	8
33724                                           ! 6062                                 0,
33725 8753                        00            .byte	0
33726                                           ! 6063                            8,
33727 8754                        08            .byte	8
33728                                           ! 6064                                 24,
33729 8755                        18            .byte	$18
33730                                           ! 6065         
33731                                           ! 6065                  0,
33732 8756                      0000            .word	0
33733 8758                      0000            .word	0
33734                                           ! 6066 } },
33735                                           ! 6067 { 0x0148,
33736 875A                      0148            .word	$148
33737                                           ! 6068 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33738 875C                      009B            .word	$9B
33739                                           ! 6069                           0x01 | 0x02 | 0x04,
33740 875E                        07            .byte	7
33741                                           ! 6070                           0,
33742 875F                        00            .byte	0
33743                                           ! 6071                           64,
33744 8760                      0040            .word	$40
33745                                           ! 6072                    64,
33746 8762                      0040            .word	$40
33747                                           ! 6073                        0xA000,
33748 8764                      A000            .word	$A000
33749                                           ! 6074                        0x0000,
33750 8766                      0000            .word	0
33751                                           ! 6075                       0,
33752 8768                      0000            .word	0
33753 876A                      0000            .word	0
33754                                           ! 6076                             1152,
33755 876C                      0480            .word	$480
33756                                           ! 6077                        1152,
33757 876E                      0480            .word	$480
33758                                           ! 6078                        864,
33759 8770                      0360            .word	$360
33760                                           ! 6079                      8,
33761 8772                        08            .byte	8
33762                                           ! 6080                      16,
33763 8773                        10            .byte	$10
33764                                           ! 6081                           1,
33765 8774                        01            .byte	1
33766                                           ! 6082                         8,
33767 8775                        08            .byte	8
33768                                           ! 6083                          16,
33769 8776                        10            .byte	$10
33770                                           ! 6084                        0x04,
33771 8777                        04            .byte	4
33772                                           ! 6085                     0,
33773 8778                        00            .byte	0
33774                                           ! 6086                               15,
33775 8779                        0F            .byte	$F
33776                                           ! 6087                          0,
33777 877A                        00            .byte	0
33778                                           ! 6088                        0,
33779 877B                        00            .byte	0
33780                                           ! 6089                             0,
33781 877C                        00            .byte	0
33782                                           ! 6090                          0,
33783 877D                        00            .byte	0
33784                                           ! 6091                               0,
33785 877E                        00            .byte	0
33786                                           ! 6092                         0,
33787 877F                        00            .byte	0
33788                                           ! 6093                              0,
33789 8780                        00            .byte	0
33790                                           ! 6094                         0,
33791 8781                        00            .byte	0
33792                                           ! 6095                              0,
33793 8782                        00            .byte	0
33794                                           ! 6096                                0,
33795 8783                        00            .byte	0
33796                                           ! 6097                        0xE0000000,
33797 8784                      0000            .word	0
33798 8786                      E000            .word	$E000
33799                                           ! 6098                               0,
33800 8788                      0000            .word	0
33801 878A                      0000            .word	0
33802                                           ! 6099                             0,
33803 878C                      0000            .word	0
33804                                           ! 6100                                1152,
33805 878E                      0480            .word	$480
33806                                           ! 6101                             0,
33807 8790                        00            .byte	0
33808                                           ! 6102                             0,
33809 8791                        00            .byte	0
33810                                           ! 6103                           0,
33811 8792                        00            .byte	0
33812                                           ! 6104                                0,
33813 8793                        00            .byte	0
33814                                           ! 6105                             0,
33815 8794                        00            .byte	0
33816                                           ! 6106                                  0,
33817 8795                        00            .byte	0
33818                                           ! 6107                            0,
33819 8796                        00            .byte	0
33820                                           ! 6108                                 0,
33821 8797                        00            .byte	0
33822                                           ! 6109                            0,
33823 8798                        00            .byte	0
33824                                           ! 6110                                 0,
33825 8799                        00            .byte	0
33826                                           ! 6111                          0,
33827 879A                      0000            .word	0
33828 879C                      0000            .word	0
33829                                           ! 6112 } },
33830                                           ! 6113 { 0x0149,
33831 879E                      0149            .word	$149
33832                                           ! 6114 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33833 87A0                      009B            .word	$9B
33834                                           ! 6115                           0x01 | 0x02 | 0x04,
33835 87A2                        07            .byte	7
33836                                           ! 6116                           0,
33837 87A3                        00            .byte	0
33838                                           ! 6117                           64,
33839 87A4                      0040            .word	$40
33840                                           ! 6118                    64,
33841 87A6                      0040            .word	$40
33842                                           ! 6119                        0xA000,
33843 87A8                      A000            .word	$A000
33844                                           ! 6120                        0x0000,
33845 87AA                      0000            .word	0
33846                                           ! 6121                       0,
33847 87AC                      0000            .word	0
33848 87AE                      0000            .word	0
33849                                           ! 6122                             2304,
33850 87B0                      0900            .word	$900
33851                                           ! 6123                        1152,
33852 87B2                      0480            .word	$480
33853                                           ! 6124                        864,
33854 87B4                      0360            .word	$360
33855                                           ! 6125                      8,
33856 87B6                        08            .byte	8
33857                                           ! 6126                      16,
33858 87B7                        10            .byte	$10
33859                                           ! 6127                           1,
33860 87B8                        01            .byte	1
33861                                           ! 6128                         15,
33862 87B9                        0F            .byte	$F
33863                                           ! 6129                          31,
33864 87BA                        1F            .byte	$1F
33865                                           ! 6130                        0x06,
33866 87BB                        06            .byte	6
33867                                           ! 6131                     0,
33868 87BC                        00            .byte	0
33869                                           ! 6132                               7,
33870 87BD                        07            .byte	7
33871                                           ! 6133                          0,
33872 87BE                        00            .byte	0
33873                                           ! 6134                        5,
33874 87BF                        05            .byte	5
33875                                           ! 6135                 
33876                                           ! 6135             10,
33877 87C0                        0A            .byte	$A
33878                                           ! 6136                          5,
33879 87C1                        05            .byte	5
33880                                           ! 6137                               5,
33881 87C2                        05            .byte	5
33882                                           ! 6138                         5,
33883 87C3                        05            .byte	5
33884                                           ! 6139                              0,
33885 87C4                        00            .byte	0
33886                                           ! 6140                         1,
33887 87C5                        01            .byte	1
33888                                           ! 6141                              15,
33889 87C6                        0F            .byte	$F
33890                                           ! 6142                                0,
33891 87C7                        00            .byte	0
33892                                           ! 6143                        0xE0000000,
33893 87C8                      0000            .word	0
33894 87CA                      E000            .word	$E000
33895                                           ! 6144                               0,
33896 87CC                      0000            .word	0
33897 87CE                      0000            .word	0
33898                                           ! 6145                             0,
33899 87D0                      0000            .word	0
33900                                           ! 6146                                2304,
33901 87D2                      0900            .word	$900
33902                                           ! 6147                             0,
33903 87D4                        00            .byte	0
33904                                           ! 6148                             0,
33905 87D5                        00            .byte	0
33906                                           ! 6149                           5,
33907 87D6                        05            .byte	5
33908                                           ! 6150                                10,
33909 87D7                        0A            .byte	$A
33910                                           ! 6151                             5,
33911 87D8                        05            .byte	5
33912                                           ! 6152                                  5,
33913 87D9                        05            .byte	5
33914                                           ! 6153                            5,
33915 87DA                        05            .byte	5
33916                                           ! 6154                                 0,
33917 87DB                        00            .byte	0
33918                                           ! 6155                            1,
33919 87DC                        01            .byte	1
33920                                           ! 6156                                 15,
33921 87DD                        0F            .byte	$F
33922                                           ! 6157                          0,
33923 87DE                      0000            .word	0
33924 87E0                      0000            .word	0
33925                                           ! 6158 } },
33926                                           ! 6159 { 0x014a,
33927 87E2                      014A            .word	$14A
33928                                           ! 6160 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33929 87E4                      009B            .word	$9B
33930                                           ! 6161                           0x01 | 0x02 | 0x04,
33931 87E6                        07            .byte	7
33932                                           ! 6162                           0,
33933 87E7                        00            .byte	0
33934                                           ! 6163                           64,
33935 87E8                      0040            .word	$40
33936                                           ! 6164                    64,
33937 87EA                      0040            .word	$40
33938                                           ! 6165                        0xA000,
33939 87EC                      A000            .word	$A000
33940                                           ! 6166                        0x0000,
33941 87EE                      0000            .word	0
33942                                           ! 6167                       0,
33943 87F0                      0000            .word	0
33944 87F2                      0000            .word	0
33945                                           ! 6168                             2304,
33946 87F4                      0900            .word	$900
33947                                           ! 6169                        1152,
33948 87F6                      0480            .word	$480
33949                                           ! 6170                        864,
33950 87F8                      0360            .word	$360
33951                                           ! 6171                      8,
33952 87FA                        08            .byte	8
33953                                           ! 6172                      16,
33954 87FB                        10            .byte	$10
33955                                           ! 6173                           1,
33956 87FC                        01            .byte	1
33957                                           ! 6174                         16,
33958 87FD                        10            .byte	$10
33959                                           ! 6175                          31,
33960 87FE                        1F            .byte	$1F
33961                                           ! 6176                        0x06,
33962 87FF                        06            .byte	6
33963                                           ! 6177                     0,
33964 8800                        00            .byte	0
33965                                           ! 6178                               7,
33966 8801                        07            .byte	7
33967                                           ! 6179                          0,
33968 8802                        00            .byte	0
33969                                           ! 6180                        5,
33970 8803                        05            .byte	5
33971                                           ! 6181                             11,
33972 8804                        0B            .byte	$B
33973                                           ! 6182                          6,
33974 8805                        06            .byte	6
33975                                           ! 6183                               5,
33976 8806                        05            .byte	5
33977                                           ! 6184                         5,
33978 8807                        05            .byte	5
33979                                           ! 6185                              0,
33980 8808                        00            .byte	0
33981                                           ! 6186                         0,
33982 8809                        00            .byte	0
33983                                           ! 6187                              0,
33984 880A                        00            .byte	0
33985                                           ! 6188                                0,
33986 880B                        00            .byte	0
33987                                           ! 6189                        0xE0000000,
33988 880C                      0000            .word	0
33989 880E                      E000            .word	$E000
33990                                           ! 6190                               0,
33991 8810                      0000            .word	0
33992 8812                      0000            .word	0
33993                                           ! 6191                             0,
33994 8814                      0000            .word	0
33995                                           ! 6192                                2304,
33996 8816                      0900            .word	$900
33997                                           ! 6193                             0,
33998 8818                        00            .byte	0
33999                                           ! 6194                             0,
34000 8819                        00            .byte	0
34001                                           ! 6195                           5,
34002 881A                        05            .byte	5
34003                                           ! 6196                                11,
34004 881B                        0B            .byte	$B
34005                                           ! 6197                             6,
34006 881C                        06            .byte	6
34007                                           ! 6198                                  5,
34008 881D                        05            .byte	5
34009                                           ! 6199                            5,
34010 881E                        05            .byte	5
34011                                           ! 6200                                 0,
34012 881F                        00            .byte	0
34013                                           ! 6201                            0,
34014 8820                        00            .byte	0
34015                                           ! 6202                     
34016                                           ! 6202             0,
34017 8821                        00            .byte	0
34018                                           ! 6203                          0,
34019 8822                      0000            .word	0
34020 8824                      0000            .word	0
34021                                           ! 6204 } },
34022                                           ! 6205 { 0x014b,
34023 8826                      014B            .word	$14B
34024                                           ! 6206 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34025 8828                      009B            .word	$9B
34026                                           ! 6207                           0x01 | 0x02 | 0x04,
34027 882A                        07            .byte	7
34028                                           ! 6208                           0,
34029 882B                        00            .byte	0
34030                                           ! 6209                           64,
34031 882C                      0040            .word	$40
34032                                           ! 6210                    64,
34033 882E                      0040            .word	$40
34034                                           ! 6211                        0xA000,
34035 8830                      A000            .word	$A000
34036                                           ! 6212                        0x0000,
34037 8832                      0000            .word	0
34038                                           ! 6213                       0,
34039 8834                      0000            .word	0
34040 8836                      0000            .word	0
34041                                           ! 6214                             3456,
34042 8838                      0D80            .word	$D80
34043                                           ! 6215                        1152,
34044 883A                      0480            .word	$480
34045                                           ! 6216                        864,
34046 883C                      0360            .word	$360
34047                                           ! 6217                      8,
34048 883E                        08            .byte	8
34049                                           ! 6218                      16,
34050 883F                        10            .byte	$10
34051                                           ! 6219                           1,
34052 8840                        01            .byte	1
34053                                           ! 6220                         24,
34054 8841                        18            .byte	$18
34055                                           ! 6221                          46,
34056 8842                        2E            .byte	$2E
34057                                           ! 6222                        0x06,
34058 8843                        06            .byte	6
34059                                           ! 6223                     0,
34060 8844                        00            .byte	0
34061                                           ! 6224                               4,
34062 8845                        04            .byte	4
34063                                           ! 6225                          0,
34064 8846                        00            .byte	0
34065                                           ! 6226                        8,
34066 8847                        08            .byte	8
34067                                           ! 6227                             16,
34068 8848                        10            .byte	$10
34069                                           ! 6228                          8,
34070 8849                        08            .byte	8
34071                                           ! 6229                               8,
34072 884A                        08            .byte	8
34073                                           ! 6230                         8,
34074 884B                        08            .byte	8
34075                                           ! 6231                              0,
34076 884C                        00            .byte	0
34077                                           ! 6232                         0,
34078 884D                        00            .byte	0
34079                                           ! 6233                              0,
34080 884E                        00            .byte	0
34081                                           ! 6234                                0,
34082 884F                        00            .byte	0
34083                                           ! 6235                        0xE0000000,
34084 8850                      0000            .word	0
34085 8852                      E000            .word	$E000
34086                                           ! 6236                               0,
34087 8854                      0000            .word	0
34088 8856                      0000            .word	0
34089                                           ! 6237                             0,
34090 8858                      0000            .word	0
34091                                           ! 6238                                3456,
34092 885A                      0D80            .word	$D80
34093                                           ! 6239                             0,
34094 885C                        00            .byte	0
34095                                           ! 6240                             0,
34096 885D                        00            .byte	0
34097                                           ! 6241                           8,
34098 885E                        08            .byte	8
34099                                           ! 6242                                16,
34100 885F                        10            .byte	$10
34101                                           ! 6243                             8,
34102 8860                        08            .byte	8
34103                                           ! 6244                                  8,
34104 8861                        08            .byte	8
34105                                           ! 6245                            8,
34106 8862                        08            .byte	8
34107                                           ! 6246                                 0,
34108 8863                        00            .byte	0
34109                                           ! 6247                            0,
34110 8864                        00            .byte	0
34111                                           ! 6248                                 0,
34112 8865                        00            .byte	0
34113                                           ! 6249                          0,
34114 8866                      0000            .word	0
34115 8868                      0000            .word	0
34116                                           ! 6250 } },
34117                                           ! 6251 { 0x014c,
34118 886A                      014C            .word	$14C
34119                                           ! 6252 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34120 886C                      009B            .word	$9B
34121                                           ! 6253                           0x01 | 0x02 | 0x04,
34122 886E                        07            .byte	7
34123                                           ! 6254                           0,
34124 886F                        00            .byte	0
34125                                           ! 6255                           64,
34126 8870                      0040            .word	$40
34127                                           ! 6256                    64,
34128 8872                      0040            .word	$40
34129                                           ! 6257                        0xA000,
34130 8874                      A000            .word	$A000
34131                                           ! 6258                        0x0000,
34132 8876                      0000            .word	0
34133                                           ! 6259                       0,
34134 8878                      0000            .word	0
34135 887A                      0000            .word	0
34136                                           ! 6260                             4608,
34137 887C                      1200            .word	$1200
34138                                           ! 6261                        1152,
34139 887E                      0480            .word	$480
34140                                           ! 6262                        864,
34141 8880                      0360            .word	$360
34142                                           ! 6263                      8,
34143 8882                        08            .byte	8
34144                                           ! 6264                      16,
34145 8883                        10            .byte	$10
34146                                           ! 6265                           1,
34147 8884                        01            .byte	1
34148                                           ! 6266                         32,
34149 8885                        20            .byte	$20
34150                                           ! 6267                          61,
34151 8886                        3D            .byte	$3D
34152                                           ! 6268                        0x06,
34153 8887                        06            .byte	6
34154                                           ! 6269                     0,
34155 8888                        00            .byte	0
34156                                           ! 6270                               3,
34157 8889                        03            .byte	3
34158                                           ! 6271                          0,
34159 888A                        00            .byte	0
34160                                           ! 6272                  
34161                                           ! 6272       8,
34162 888B                        08            .byte	8
34163                                           ! 6273                             16,
34164 888C                        10            .byte	$10
34165                                           ! 6274                          8,
34166 888D                        08            .byte	8
34167                                           ! 6275                               8,
34168 888E                        08            .byte	8
34169                                           ! 6276                         8,
34170 888F                        08            .byte	8
34171                                           ! 6277                              0,
34172 8890                        00            .byte	0
34173                                           ! 6278                         8,
34174 8891                        08            .byte	8
34175                                           ! 6279                              24,
34176 8892                        18            .byte	$18
34177                                           ! 6280                                0x02,
34178 8893                        02            .byte	2
34179                                           ! 6281                        0xE0000000,
34180 8894                      0000            .word	0
34181 8896                      E000            .word	$E000
34182                                           ! 6282                               0,
34183 8898                      0000            .word	0
34184 889A                      0000            .word	0
34185                                           ! 6283                             0,
34186 889C                      0000            .word	0
34187                                           ! 6284                                4608,
34188 889E                      1200            .word	$1200
34189                                           ! 6285                             0,
34190 88A0                        00            .byte	0
34191                                           ! 6286                             0,
34192 88A1                        00            .byte	0
34193                                           ! 6287                           8,
34194 88A2                        08            .byte	8
34195                                           ! 6288                                16,
34196 88A3                        10            .byte	$10
34197                                           ! 6289                             8,
34198 88A4                        08            .byte	8
34199                                           ! 6290                                  8,
34200 88A5                        08            .byte	8
34201                                           ! 6291                            8,
34202 88A6                        08            .byte	8
34203                                           ! 6292                                 0,
34204 88A7                        00            .byte	0
34205                                           ! 6293                            8,
34206 88A8                        08            .byte	8
34207                                           ! 6294                                 24,
34208 88A9                        18            .byte	$18
34209                                           ! 6295                          0,
34210 88AA                      0000            .word	0
34211 88AC                      0000            .word	0
34212                                           ! 6296 } },
34213                                           ! 6297 { 0x0178,
34214 88AE                      0178            .word	$178
34215                                           ! 6298 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34216 88B0                      009B            .word	$9B
34217                                           ! 6299                           0x01 | 0x02 | 0x04,
34218 88B2                        07            .byte	7
34219                                           ! 6300                           0,
34220 88B3                        00            .byte	0
34221                                           ! 6301                           64,
34222 88B4                      0040            .word	$40
34223                                           ! 6302                    64,
34224 88B6                      0040            .word	$40
34225                                           ! 6303                        0xA000,
34226 88B8                      A000            .word	$A000
34227                                           ! 6304                        0x0000,
34228 88BA                      0000            .word	0
34229                                           ! 6305                       0,
34230 88BC                      0000            .word	0
34231 88BE                      0000            .word	0
34232                                           ! 6306                             2560,
34233 88C0                      0A00            .word	$A00
34234                                           ! 6307                        1280,
34235 88C2                      0500            .word	$500
34236                                           ! 6308                        800,
34237 88C4                      0320            .word	$320
34238                                           ! 6309                      8,
34239 88C6                        08            .byte	8
34240                                           ! 6310                      16,
34241 88C7                        10            .byte	$10
34242                                           ! 6311                           1,
34243 88C8                        01            .byte	1
34244                                           ! 6312                         16,
34245 88C9                        10            .byte	$10
34246                                           ! 6313                          32,
34247 88CA                        20            .byte	$20
34248                                           ! 6314                        0x06,
34249 88CB                        06            .byte	6
34250                                           ! 6315                     0,
34251 88CC                        00            .byte	0
34252                                           ! 6316                               7,
34253 88CD                        07            .byte	7
34254                                           ! 6317                          0,
34255 88CE                        00            .byte	0
34256                                           ! 6318                        5,
34257 88CF                        05            .byte	5
34258                                           ! 6319                             11,
34259 88D0                        0B            .byte	$B
34260                                           ! 6320                          6,
34261 88D1                        06            .byte	6
34262                                           ! 6321                               5,
34263 88D2                        05            .byte	5
34264                                           ! 6322                         5,
34265 88D3                        05            .byte	5
34266                                           ! 6323                              0,
34267 88D4                        00            .byte	0
34268                                           ! 6324                         0,
34269 88D5                        00            .byte	0
34270                                           ! 6325                              0,
34271 88D6                        00            .byte	0
34272                                           ! 6326                                0,
34273 88D7                        00            .byte	0
34274                                           ! 6327                        0xE0000000,
34275 88D8                      0000            .word	0
34276 88DA                      E000            .word	$E000
34277                                           ! 6328                               0,
34278 88DC                      0000            .word	0
34279 88DE                      0000            .word	0
34280                                           ! 6329                             0,
34281 88E0                      0000            .word	0
34282                                           ! 6330                                2560,
34283 88E2                      0A00            .word	$A00
34284                                           ! 6331                             0,
34285 88E4                        00            .byte	0
34286                                           ! 6332                             0,
34287 88E5                        00            .byte	0
34288                                           ! 6333                           5,
34289 88E6                        05            .byte	5
34290                                           ! 6334                                11,
34291 88E7                        0B            .byte	$B
34292                                           ! 6335                             6,
34293 88E8                        06            .byte	6
34294                                           ! 6336                                  5,
34295 88E9                        05            .byte	5
34296                                           ! 6337                            5,
34297 88EA                        05            .byte	5
34298                                           ! 6338                                 0,
34299 88EB                        00            .byte	0
34300                                           ! 6339                       
34301                                           ! 6339      0,
34302 88EC                        00            .byte	0
34303                                           ! 6340                                 0,
34304 88ED                        00            .byte	0
34305                                           ! 6341                          0,
34306 88EE                      0000            .word	0
34307 88F0                      0000            .word	0
34308                                           ! 6342 } },
34309                                           ! 6343 { 0x0179,
34310 88F2                      0179            .word	$179
34311                                           ! 6344 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34312 88F4                      009B            .word	$9B
34313                                           ! 6345                           0x01 | 0x02 | 0x04,
34314 88F6                        07            .byte	7
34315                                           ! 6346                           0,
34316 88F7                        00            .byte	0
34317                                           ! 6347                           64,
34318 88F8                      0040            .word	$40
34319                                           ! 6348                    64,
34320 88FA                      0040            .word	$40
34321                                           ! 6349                        0xA000,
34322 88FC                      A000            .word	$A000
34323                                           ! 6350                        0x0000,
34324 88FE                      0000            .word	0
34325                                           ! 6351                       0,
34326 8900                      0000            .word	0
34327 8902                      0000            .word	0
34328                                           ! 6352                             3840,
34329 8904                      0F00            .word	$F00
34330                                           ! 6353                        1280,
34331 8906                      0500            .word	$500
34332                                           ! 6354                        800,
34333 8908                      0320            .word	$320
34334                                           ! 6355                      8,
34335 890A                        08            .byte	8
34336                                           ! 6356                      16,
34337 890B                        10            .byte	$10
34338                                           ! 6357                           1,
34339 890C                        01            .byte	1
34340                                           ! 6358                         24,
34341 890D                        18            .byte	$18
34342                                           ! 6359                          47,
34343 890E                        2F            .byte	$2F
34344                                           ! 6360                        0x06,
34345 890F                        06            .byte	6
34346                                           ! 6361                     0,
34347 8910                        00            .byte	0
34348                                           ! 6362                               4,
34349 8911                        04            .byte	4
34350                                           ! 6363                          0,
34351 8912                        00            .byte	0
34352                                           ! 6364                        8,
34353 8913                        08            .byte	8
34354                                           ! 6365                             16,
34355 8914                        10            .byte	$10
34356                                           ! 6366                          8,
34357 8915                        08            .byte	8
34358                                           ! 6367                               8,
34359 8916                        08            .byte	8
34360                                           ! 6368                         8,
34361 8917                        08            .byte	8
34362                                           ! 6369                              0,
34363 8918                        00            .byte	0
34364                                           ! 6370                         0,
34365 8919                        00            .byte	0
34366                                           ! 6371                              0,
34367 891A                        00            .byte	0
34368                                           ! 6372                                0,
34369 891B                        00            .byte	0
34370                                           ! 6373                        0xE0000000,
34371 891C                      0000            .word	0
34372 891E                      E000            .word	$E000
34373                                           ! 6374                               0,
34374 8920                      0000            .word	0
34375 8922                      0000            .word	0
34376                                           ! 6375                             0,
34377 8924                      0000            .word	0
34378                                           ! 6376                                3840,
34379 8926                      0F00            .word	$F00
34380                                           ! 6377                             0,
34381 8928                        00            .byte	0
34382                                           ! 6378                             0,
34383 8929                        00            .byte	0
34384                                           ! 6379                           8,
34385 892A                        08            .byte	8
34386                                           ! 6380                                16,
34387 892B                        10            .byte	$10
34388                                           ! 6381                             8,
34389 892C                        08            .byte	8
34390                                           ! 6382                                  8,
34391 892D                        08            .byte	8
34392                                           ! 6383                            8,
34393 892E                        08            .byte	8
34394                                           ! 6384                                 0,
34395 892F                        00            .byte	0
34396                                           ! 6385                            0,
34397 8930                        00            .byte	0
34398                                           ! 6386                                 0,
34399 8931                        00            .byte	0
34400                                           ! 6387                          0,
34401 8932                      0000            .word	0
34402 8934                      0000            .word	0
34403                                           ! 6388 } },
34404                                           ! 6389 { 0x017a,
34405 8936                      017A            .word	$17A
34406                                           ! 6390 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34407 8938                      009B            .word	$9B
34408                                           ! 6391                           0x01 | 0x02 | 0x04,
34409 893A                        07            .byte	7
34410                                           ! 6392                           0,
34411 893B                        00            .byte	0
34412                                           ! 6393                           64,
34413 893C                      0040            .word	$40
34414                                           ! 6394                    64,
34415 893E                      0040            .word	$40
34416                                           ! 6395                        0xA000,
34417 8940                      A000            .word	$A000
34418                                           ! 6396                        0x0000,
34419 8942                      0000            .word	0
34420                                           ! 6397                       0,
34421 8944                      0000            .word	0
34422 8946                      0000            .word	0
34423                                           ! 6398                             5120,
34424 8948                      1400            .word	$1400
34425                                           ! 6399                        1280,
34426 894A                      0500            .word	$500
34427                                           ! 6400                        800,
34428 894C                      0320            .word	$320
34429                                           ! 6401                      8,
34430 894E                        08            .byte	8
34431                                           ! 6402                      16,
34432 894F                        10            .byte	$10
34433                                           ! 6403                           1,
34434 8950                        01            .byte	1
34435                                           ! 6404                         32,
34436 8951                        20            .byte	$20
34437                                           ! 6405                          63,
34438 8952                        3F            .byte	$3F
34439                                           ! 6406                        0x06,
34440 8953                        06            .byte	6
34441                                           ! 6407                     0,
34442 8954                        00            .byte	0
34443                                           ! 6408                               3,
34444 8955                        03            .byte	3
34445                                           ! 6409                  
34446                                           ! 6409         0,
34447 8956                        00            .byte	0
34448                                           ! 6410                        8,
34449 8957                        08            .byte	8
34450                                           ! 6411                             16,
34451 8958                        10            .byte	$10
34452                                           ! 6412                          8,
34453 8959                        08            .byte	8
34454                                           ! 6413                               8,
34455 895A                        08            .byte	8
34456                                           ! 6414                         8,
34457 895B                        08            .byte	8
34458                                           ! 6415                              0,
34459 895C                        00            .byte	0
34460                                           ! 6416                         8,
34461 895D                        08            .byte	8
34462                                           ! 6417                              24,
34463 895E                        18            .byte	$18
34464                                           ! 6418                                0x02,
34465 895F                        02            .byte	2
34466                                           ! 6419                        0xE0000000,
34467 8960                      0000            .word	0
34468 8962                      E000            .word	$E000
34469                                           ! 6420                               0,
34470 8964                      0000            .word	0
34471 8966                      0000            .word	0
34472                                           ! 6421                             0,
34473 8968                      0000            .word	0
34474                                           ! 6422                                5120,
34475 896A                      1400            .word	$1400
34476                                           ! 6423                             0,
34477 896C                        00            .byte	0
34478                                           ! 6424                             0,
34479 896D                        00            .byte	0
34480                                           ! 6425                           8,
34481 896E                        08            .byte	8
34482                                           ! 6426                                16,
34483 896F                        10            .byte	$10
34484                                           ! 6427                             8,
34485 8970                        08            .byte	8
34486                                           ! 6428                                  8,
34487 8971                        08            .byte	8
34488                                           ! 6429                            8,
34489 8972                        08            .byte	8
34490                                           ! 6430                                 0,
34491 8973                        00            .byte	0
34492                                           ! 6431                            8,
34493 8974                        08            .byte	8
34494                                           ! 6432                                 24,
34495 8975                        18            .byte	$18
34496                                           ! 6433                          0,
34497 8976                      0000            .word	0
34498 8978                      0000            .word	0
34499                                           ! 6434 } },
34500                                           ! 6435 { 0x017b,
34501 897A                      017B            .word	$17B
34502                                           ! 6436 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34503 897C                      009B            .word	$9B
34504                                           ! 6437                           0x01 | 0x02 | 0x04,
34505 897E                        07            .byte	7
34506                                           ! 6438                           0,
34507 897F                        00            .byte	0
34508                                           ! 6439                           64,
34509 8980                      0040            .word	$40
34510                                           ! 6440                    64,
34511 8982                      0040            .word	$40
34512                                           ! 6441                        0xA000,
34513 8984                      A000            .word	$A000
34514                                           ! 6442                        0x0000,
34515 8986                      0000            .word	0
34516                                           ! 6443                       0,
34517 8988                      0000            .word	0
34518 898A                      0000            .word	0
34519                                           ! 6444                             2560,
34520 898C                      0A00            .word	$A00
34521                                           ! 6445                        1280,
34522 898E                      0500            .word	$500
34523                                           ! 6446                        960,
34524 8990                      03C0            .word	$3C0
34525                                           ! 6447                      8,
34526 8992                        08            .byte	8
34527                                           ! 6448                      16,
34528 8993                        10            .byte	$10
34529                                           ! 6449                           1,
34530 8994                        01            .byte	1
34531                                           ! 6450                         16,
34532 8995                        10            .byte	$10
34533                                           ! 6451                          38,
34534 8996                        26            .byte	$26
34535                                           ! 6452                        0x06,
34536 8997                        06            .byte	6
34537                                           ! 6453                     0,
34538 8998                        00            .byte	0
34539                                           ! 6454                               5,
34540 8999                        05            .byte	5
34541                                           ! 6455                          0,
34542 899A                        00            .byte	0
34543                                           ! 6456                        5,
34544 899B                        05            .byte	5
34545                                           ! 6457                             11,
34546 899C                        0B            .byte	$B
34547                                           ! 6458                          6,
34548 899D                        06            .byte	6
34549                                           ! 6459                               5,
34550 899E                        05            .byte	5
34551                                           ! 6460                         5,
34552 899F                        05            .byte	5
34553                                           ! 6461                              0,
34554 89A0                        00            .byte	0
34555                                           ! 6462                         0,
34556 89A1                        00            .byte	0
34557                                           ! 6463                              0,
34558 89A2                        00            .byte	0
34559                                           ! 6464                                0,
34560 89A3                        00            .byte	0
34561                                           ! 6465                        0xE0000000,
34562 89A4                      0000            .word	0
34563 89A6                      E000            .word	$E000
34564                                           ! 6466                               0,
34565 89A8                      0000            .word	0
34566 89AA                      0000            .word	0
34567                                           ! 6467                             0,
34568 89AC                      0000            .word	0
34569                                           ! 6468                                2560,
34570 89AE                      0A00            .word	$A00
34571                                           ! 6469                             0,
34572 89B0                        00            .byte	0
34573                                           ! 6470                             0,
34574 89B1                        00            .byte	0
34575                                           ! 6471                           5,
34576 89B2                        05            .byte	5
34577                                           ! 6472                                11,
34578 89B3                        0B            .byte	$B
34579                                           ! 6473                             6,
34580 89B4                        06            .byte	6
34581                                           ! 6474                                  5,
34582 89B5                        05            .byte	5
34583                                           ! 6475                            5,
34584 89B6                        05            .byte	5
34585                                           ! 6476                              
34586                                           ! 6476    0,
34587 89B7                        00            .byte	0
34588                                           ! 6477                            0,
34589 89B8                        00            .byte	0
34590                                           ! 6478                                 0,
34591 89B9                        00            .byte	0
34592                                           ! 6479                          0,
34593 89BA                      0000            .word	0
34594 89BC                      0000            .word	0
34595                                           ! 6480 } },
34596                                           ! 6481 { 0x017c,
34597 89BE                      017C            .word	$17C
34598                                           ! 6482 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34599 89C0                      009B            .word	$9B
34600                                           ! 6483                           0x01 | 0x02 | 0x04,
34601 89C2                        07            .byte	7
34602                                           ! 6484                           0,
34603 89C3                        00            .byte	0
34604                                           ! 6485                           64,
34605 89C4                      0040            .word	$40
34606                                           ! 6486                    64,
34607 89C6                      0040            .word	$40
34608                                           ! 6487                        0xA000,
34609 89C8                      A000            .word	$A000
34610                                           ! 6488                        0x0000,
34611 89CA                      0000            .word	0
34612                                           ! 6489                       0,
34613 89CC                      0000            .word	0
34614 89CE                      0000            .word	0
34615                                           ! 6490                             3840,
34616 89D0                      0F00            .word	$F00
34617                                           ! 6491                        1280,
34618 89D2                      0500            .word	$500
34619                                           ! 6492                        960,
34620 89D4                      03C0            .word	$3C0
34621                                           ! 6493                      8,
34622 89D6                        08            .byte	8
34623                                           ! 6494                      16,
34624 89D7                        10            .byte	$10
34625                                           ! 6495                           1,
34626 89D8                        01            .byte	1
34627                                           ! 6496                         24,
34628 89D9                        18            .byte	$18
34629                                           ! 6497                          57,
34630 89DA                        39            .byte	$39
34631                                           ! 6498                        0x06,
34632 89DB                        06            .byte	6
34633                                           ! 6499                     0,
34634 89DC                        00            .byte	0
34635                                           ! 6500                               3,
34636 89DD                        03            .byte	3
34637                                           ! 6501                          0,
34638 89DE                        00            .byte	0
34639                                           ! 6502                        8,
34640 89DF                        08            .byte	8
34641                                           ! 6503                             16,
34642 89E0                        10            .byte	$10
34643                                           ! 6504                          8,
34644 89E1                        08            .byte	8
34645                                           ! 6505                               8,
34646 89E2                        08            .byte	8
34647                                           ! 6506                         8,
34648 89E3                        08            .byte	8
34649                                           ! 6507                              0,
34650 89E4                        00            .byte	0
34651                                           ! 6508                         0,
34652 89E5                        00            .byte	0
34653                                           ! 6509                              0,
34654 89E6                        00            .byte	0
34655                                           ! 6510                                0,
34656 89E7                        00            .byte	0
34657                                           ! 6511                        0xE0000000,
34658 89E8                      0000            .word	0
34659 89EA                      E000            .word	$E000
34660                                           ! 6512                               0,
34661 89EC                      0000            .word	0
34662 89EE                      0000            .word	0
34663                                           ! 6513                             0,
34664 89F0                      0000            .word	0
34665                                           ! 6514                                3840,
34666 89F2                      0F00            .word	$F00
34667                                           ! 6515                             0,
34668 89F4                        00            .byte	0
34669                                           ! 6516                             0,
34670 89F5                        00            .byte	0
34671                                           ! 6517                           8,
34672 89F6                        08            .byte	8
34673                                           ! 6518                                16,
34674 89F7                        10            .byte	$10
34675                                           ! 6519                             8,
34676 89F8                        08            .byte	8
34677                                           ! 6520                                  8,
34678 89F9                        08            .byte	8
34679                                           ! 6521                            8,
34680 89FA                        08            .byte	8
34681                                           ! 6522                                 0,
34682 89FB                        00            .byte	0
34683                                           ! 6523                            0,
34684 89FC                        00            .byte	0
34685                                           ! 6524                                 0,
34686 89FD                        00            .byte	0
34687                                           ! 6525                          0,
34688 89FE                      0000            .word	0
34689 8A00                      0000            .word	0
34690                                           ! 6526 } },
34691                                           ! 6527 { 0x017d,
34692 8A02                      017D            .word	$17D
34693                                           ! 6528 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34694 8A04                      009B            .word	$9B
34695                                           ! 6529                           0x01 | 0x02 | 0x04,
34696 8A06                        07            .byte	7
34697                                           ! 6530                           0,
34698 8A07                        00            .byte	0
34699                                           ! 6531                           64,
34700 8A08                      0040            .word	$40
34701                                           ! 6532                    64,
34702 8A0A                      0040            .word	$40
34703                                           ! 6533                        0xA000,
34704 8A0C                      A000            .word	$A000
34705                                           ! 6534                        0x0000,
34706 8A0E                      0000            .word	0
34707                                           ! 6535                       0,
34708 8A10                      0000            .word	0
34709 8A12                      0000            .word	0
34710                                           ! 6536                             5120,
34711 8A14                      1400            .word	$1400
34712                                           ! 6537                        1280,
34713 8A16                      0500            .word	$500
34714                                           ! 6538                        960,
34715 8A18                      03C0            .word	$3C0
34716                                           ! 6539                      8,
34717 8A1A                        08            .byte	8
34718                                           ! 6540                      16,
34719 8A1B                        10            .byte	$10
34720                                           ! 6541                           1,
34721 8A1C                        01            .byte	1
34722                                           ! 6542                         32,
34723 8A1D                        20            .byte	$20
34724                                           ! 6543                          75,
34725 8A1E                        4B            .byte	$4B
34726                                           ! 6544                        0x06,
34727 8A1F                        06            .byte	6
34728                                           ! 6545                     0,
34729 8A20                        00            .byte	0
34730                                           ! 6546                       
34731                                           ! 6546         2,
34732 8A21                        02            .byte	2
34733                                           ! 6547                          0,
34734 8A22                        00            .byte	0
34735                                           ! 6548                        8,
34736 8A23                        08            .byte	8
34737                                           ! 6549                             16,
34738 8A24                        10            .byte	$10
34739                                           ! 6550                          8,
34740 8A25                        08            .byte	8
34741                                           ! 6551                               8,
34742 8A26                        08            .byte	8
34743                                           ! 6552                         8,
34744 8A27                        08            .byte	8
34745                                           ! 6553                              0,
34746 8A28                        00            .byte	0
34747                                           ! 6554                         8,
34748 8A29                        08            .byte	8
34749                                           ! 6555                              24,
34750 8A2A                        18            .byte	$18
34751                                           ! 6556                                0x02,
34752 8A2B                        02            .byte	2
34753                                           ! 6557                        0xE0000000,
34754 8A2C                      0000            .word	0
34755 8A2E                      E000            .word	$E000
34756                                           ! 6558                               0,
34757 8A30                      0000            .word	0
34758 8A32                      0000            .word	0
34759                                           ! 6559                             0,
34760 8A34                      0000            .word	0
34761                                           ! 6560                                5120,
34762 8A36                      1400            .word	$1400
34763                                           ! 6561                             0,
34764 8A38                        00            .byte	0
34765                                           ! 6562                             0,
34766 8A39                        00            .byte	0
34767                                           ! 6563                           8,
34768 8A3A                        08            .byte	8
34769                                           ! 6564                                16,
34770 8A3B                        10            .byte	$10
34771                                           ! 6565                             8,
34772 8A3C                        08            .byte	8
34773                                           ! 6566                                  8,
34774 8A3D                        08            .byte	8
34775                                           ! 6567                            8,
34776 8A3E                        08            .byte	8
34777                                           ! 6568                                 0,
34778 8A3F                        00            .byte	0
34779                                           ! 6569                            8,
34780 8A40                        08            .byte	8
34781                                           ! 6570                                 24,
34782 8A41                        18            .byte	$18
34783                                           ! 6571                          0,
34784 8A42                      0000            .word	0
34785 8A44                      0000            .word	0
34786                                           ! 6572 } },
34787                                           ! 6573 { 0x017e,
34788 8A46                      017E            .word	$17E
34789                                           ! 6574 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34790 8A48                      009B            .word	$9B
34791                                           ! 6575                           0x01 | 0x02 | 0x04,
34792 8A4A                        07            .byte	7
34793                                           ! 6576                           0,
34794 8A4B                        00            .byte	0
34795                                           ! 6577                           64,
34796 8A4C                      0040            .word	$40
34797                                           ! 6578                    64,
34798 8A4E                      0040            .word	$40
34799                                           ! 6579                        0xA000,
34800 8A50                      A000            .word	$A000
34801                                           ! 6580                        0x0000,
34802 8A52                      0000            .word	0
34803                                           ! 6581                       0,
34804 8A54                      0000            .word	0
34805 8A56                      0000            .word	0
34806                                           ! 6582                             2880,
34807 8A58                      0B40            .word	$B40
34808                                           ! 6583                        1440,
34809 8A5A                      05A0            .word	$5A0
34810                                           ! 6584                        900,
34811 8A5C                      0384            .word	$384
34812                                           ! 6585                      8,
34813 8A5E                        08            .byte	8
34814                                           ! 6586                      16,
34815 8A5F                        10            .byte	$10
34816                                           ! 6587                           1,
34817 8A60                        01            .byte	1
34818                                           ! 6588                         16,
34819 8A61                        10            .byte	$10
34820                                           ! 6589                          40,
34821 8A62                        28            .byte	$28
34822                                           ! 6590                        0x06,
34823 8A63                        06            .byte	6
34824                                           ! 6591                     0,
34825 8A64                        00            .byte	0
34826                                           ! 6592                               5,
34827 8A65                        05            .byte	5
34828                                           ! 6593                          0,
34829 8A66                        00            .byte	0
34830                                           ! 6594                        5,
34831 8A67                        05            .byte	5
34832                                           ! 6595                             11,
34833 8A68                        0B            .byte	$B
34834                                           ! 6596                          6,
34835 8A69                        06            .byte	6
34836                                           ! 6597                               5,
34837 8A6A                        05            .byte	5
34838                                           ! 6598                         5,
34839 8A6B                        05            .byte	5
34840                                           ! 6599                              0,
34841 8A6C                        00            .byte	0
34842                                           ! 6600                         0,
34843 8A6D                        00            .byte	0
34844                                           ! 6601                              0,
34845 8A6E                        00            .byte	0
34846                                           ! 6602                                0,
34847 8A6F                        00            .byte	0
34848                                           ! 6603                        0xE0000000,
34849 8A70                      0000            .word	0
34850 8A72                      E000            .word	$E000
34851                                           ! 6604                               0,
34852 8A74                      0000            .word	0
34853 8A76                      0000            .word	0
34854                                           ! 6605                             0,
34855 8A78                      0000            .word	0
34856                                           ! 6606                                2880,
34857 8A7A                      0B40            .word	$B40
34858                                           ! 6607                             0,
34859 8A7C                        00            .byte	0
34860                                           ! 6608                             0,
34861 8A7D                        00            .byte	0
34862                                           ! 6609                           5,
34863 8A7E                        05            .byte	5
34864                                           ! 6610                                11,
34865 8A7F                        0B            .byte	$B
34866                                           ! 6611                             6,
34867 8A80                        06            .byte	6
34868                                           ! 6612                                  5,
34869 8A81                        05            .byte	5
34870                                           ! 6613                            5,
34871 8A82                        05            .byte	5
34872                                           ! 6614  
34873                                           ! 6614                                0,
34874 8A83                        00            .byte	0
34875                                           ! 6615                            0,
34876 8A84                        00            .byte	0
34877                                           ! 6616                                 0,
34878 8A85                        00            .byte	0
34879                                           ! 6617                          0,
34880 8A86                      0000            .word	0
34881 8A88                      0000            .word	0
34882                                           ! 6618 } },
34883                                           ! 6619 { 0x017f,
34884 8A8A                      017F            .word	$17F
34885                                           ! 6620 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34886 8A8C                      009B            .word	$9B
34887                                           ! 6621                           0x01 | 0x02 | 0x04,
34888 8A8E                        07            .byte	7
34889                                           ! 6622                           0,
34890 8A8F                        00            .byte	0
34891                                           ! 6623                           64,
34892 8A90                      0040            .word	$40
34893                                           ! 6624                    64,
34894 8A92                      0040            .word	$40
34895                                           ! 6625                        0xA000,
34896 8A94                      A000            .word	$A000
34897                                           ! 6626                        0x0000,
34898 8A96                      0000            .word	0
34899                                           ! 6627                       0,
34900 8A98                      0000            .word	0
34901 8A9A                      0000            .word	0
34902                                           ! 6628                             4320,
34903 8A9C                      10E0            .word	$10E0
34904                                           ! 6629                        1440,
34905 8A9E                      05A0            .word	$5A0
34906                                           ! 6630                        900,
34907 8AA0                      0384            .word	$384
34908                                           ! 6631                      8,
34909 8AA2                        08            .byte	8
34910                                           ! 6632                      16,
34911 8AA3                        10            .byte	$10
34912                                           ! 6633                           1,
34913 8AA4                        01            .byte	1
34914                                           ! 6634                         24,
34915 8AA5                        18            .byte	$18
34916                                           ! 6635                          60,
34917 8AA6                        3C            .byte	$3C
34918                                           ! 6636                        0x06,
34919 8AA7                        06            .byte	6
34920                                           ! 6637                     0,
34921 8AA8                        00            .byte	0
34922                                           ! 6638                               3,
34923 8AA9                        03            .byte	3
34924                                           ! 6639                          0,
34925 8AAA                        00            .byte	0
34926                                           ! 6640                        8,
34927 8AAB                        08            .byte	8
34928                                           ! 6641                             16,
34929 8AAC                        10            .byte	$10
34930                                           ! 6642                          8,
34931 8AAD                        08            .byte	8
34932                                           ! 6643                               8,
34933 8AAE                        08            .byte	8
34934                                           ! 6644                         8,
34935 8AAF                        08            .byte	8
34936                                           ! 6645                              0,
34937 8AB0                        00            .byte	0
34938                                           ! 6646                         0,
34939 8AB1                        00            .byte	0
34940                                           ! 6647                              0,
34941 8AB2                        00            .byte	0
34942                                           ! 6648                                0,
34943 8AB3                        00            .byte	0
34944                                           ! 6649                        0xE0000000,
34945 8AB4                      0000            .word	0
34946 8AB6                      E000            .word	$E000
34947                                           ! 6650                               0,
34948 8AB8                      0000            .word	0
34949 8ABA                      0000            .word	0
34950                                           ! 6651                             0,
34951 8ABC                      0000            .word	0
34952                                           ! 6652                                4320,
34953 8ABE                      10E0            .word	$10E0
34954                                           ! 6653                             0,
34955 8AC0                        00            .byte	0
34956                                           ! 6654                             0,
34957 8AC1                        00            .byte	0
34958                                           ! 6655                           8,
34959 8AC2                        08            .byte	8
34960                                           ! 6656                                16,
34961 8AC3                        10            .byte	$10
34962                                           ! 6657                             8,
34963 8AC4                        08            .byte	8
34964                                           ! 6658                                  8,
34965 8AC5                        08            .byte	8
34966                                           ! 6659                            8,
34967 8AC6                        08            .byte	8
34968                                           ! 6660                                 0,
34969 8AC7                        00            .byte	0
34970                                           ! 6661                            0,
34971 8AC8                        00            .byte	0
34972                                           ! 6662                                 0,
34973 8AC9                        00            .byte	0
34974                                           ! 6663                          0,
34975 8ACA                      0000            .word	0
34976 8ACC                      0000            .word	0
34977                                           ! 6664 } },
34978                                           ! 6665 { 0x0180,
34979 8ACE                      0180            .word	$180
34980                                           ! 6666 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34981 8AD0                      009B            .word	$9B
34982                                           ! 6667                           0x01 | 0x02 | 0x04,
34983 8AD2                        07            .byte	7
34984                                           ! 6668                           0,
34985 8AD3                        00            .byte	0
34986                                           ! 6669                           64,
34987 8AD4                      0040            .word	$40
34988                                           ! 6670                    64,
34989 8AD6                      0040            .word	$40
34990                                           ! 6671                        0xA000,
34991 8AD8                      A000            .word	$A000
34992                                           ! 6672                        0x0000,
34993 8ADA                      0000            .word	0
34994                                           ! 6673                       0,
34995 8ADC                      0000            .word	0
34996 8ADE                      0000            .word	0
34997                                           ! 6674                             5760,
34998 8AE0                      1680            .word	$1680
34999                                           ! 6675                        1440,
35000 8AE2                      05A0            .word	$5A0
35001                                           ! 6676                        900,
35002 8AE4                      0384            .word	$384
35003                                           ! 6677                      8,
35004 8AE6                        08            .byte	8
35005                                           ! 6678                      16,
35006 8AE7                        10            .byte	$10
35007                                           ! 6679                           1,
35008 8AE8                        01            .byte	1
35009                                           ! 6680                         32,
35010 8AE9                        20            .byte	$20
35011                                           ! 6681                          80,
35012 8AEA                        50            .byte	$50
35013                                           ! 6682                        0x06,
35014 8AEB                        06            .byte	6
35015                                           ! 6683                  
35016                                           ! 6683    0,
35017 8AEC                        00            .byte	0
35018                                           ! 6684                               2,
35019 8AED                        02            .byte	2
35020                                           ! 6685                          0,
35021 8AEE                        00            .byte	0
35022                                           ! 6686                        8,
35023 8AEF                        08            .byte	8
35024                                           ! 6687                             16,
35025 8AF0                        10            .byte	$10
35026                                           ! 6688                          8,
35027 8AF1                        08            .byte	8
35028                                           ! 6689                               8,
35029 8AF2                        08            .byte	8
35030                                           ! 6690                         8,
35031 8AF3                        08            .byte	8
35032                                           ! 6691                              0,
35033 8AF4                        00            .byte	0
35034                                           ! 6692                         8,
35035 8AF5                        08            .byte	8
35036                                           ! 6693                              24,
35037 8AF6                        18            .byte	$18
35038                                           ! 6694                                0x02,
35039 8AF7                        02            .byte	2
35040                                           ! 6695                        0xE0000000,
35041 8AF8                      0000            .word	0
35042 8AFA                      E000            .word	$E000
35043                                           ! 6696                               0,
35044 8AFC                      0000            .word	0
35045 8AFE                      0000            .word	0
35046                                           ! 6697                             0,
35047 8B00                      0000            .word	0
35048                                           ! 6698                                5760,
35049 8B02                      1680            .word	$1680
35050                                           ! 6699                             0,
35051 8B04                        00            .byte	0
35052                                           ! 6700                             0,
35053 8B05                        00            .byte	0
35054                                           ! 6701                           8,
35055 8B06                        08            .byte	8
35056                                           ! 6702                                16,
35057 8B07                        10            .byte	$10
35058                                           ! 6703                             8,
35059 8B08                        08            .byte	8
35060                                           ! 6704                                  8,
35061 8B09                        08            .byte	8
35062                                           ! 6705                            8,
35063 8B0A                        08            .byte	8
35064                                           ! 6706                                 0,
35065 8B0B                        00            .byte	0
35066                                           ! 6707                            8,
35067 8B0C                        08            .byte	8
35068                                           ! 6708                                 24,
35069 8B0D                        18            .byte	$18
35070                                           ! 6709                          0,
35071 8B0E                      0000            .word	0
35072 8B10                      0000            .word	0
35073                                           ! 6710 } },
35074                                           ! 6711 { 0x0181,
35075 8B12                      0181            .word	$181
35076                                           ! 6712 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35077 8B14                      009B            .word	$9B
35078                                           ! 6713                           0x01 | 0x02 | 0x04,
35079 8B16                        07            .byte	7
35080                                           ! 6714                           0,
35081 8B17                        00            .byte	0
35082                                           ! 6715                           64,
35083 8B18                      0040            .word	$40
35084                                           ! 6716                    64,
35085 8B1A                      0040            .word	$40
35086                                           ! 6717                        0xA000,
35087 8B1C                      A000            .word	$A000
35088                                           ! 6718                        0x0000,
35089 8B1E                      0000            .word	0
35090                                           ! 6719                       0,
35091 8B20                      0000            .word	0
35092 8B22                      0000            .word	0
35093                                           ! 6720                             2800,
35094 8B24                      0AF0            .word	$AF0
35095                                           ! 6721                        1400,
35096 8B26                      0578            .word	$578
35097                                           ! 6722                        1050,
35098 8B28                      041A            .word	$41A
35099                                           ! 6723                      8,
35100 8B2A                        08            .byte	8
35101                                           ! 6724                      16,
35102 8B2B                        10            .byte	$10
35103                                           ! 6725                           1,
35104 8B2C                        01            .byte	1
35105                                           ! 6726                         16,
35106 8B2D                        10            .byte	$10
35107                                           ! 6727                          45,
35108 8B2E                        2D            .byte	$2D
35109                                           ! 6728                        0x06,
35110 8B2F                        06            .byte	6
35111                                           ! 6729                     0,
35112 8B30                        00            .byte	0
35113                                           ! 6730                               4,
35114 8B31                        04            .byte	4
35115                                           ! 6731                          0,
35116 8B32                        00            .byte	0
35117                                           ! 6732                        5,
35118 8B33                        05            .byte	5
35119                                           ! 6733                             11,
35120 8B34                        0B            .byte	$B
35121                                           ! 6734                          6,
35122 8B35                        06            .byte	6
35123                                           ! 6735                               5,
35124 8B36                        05            .byte	5
35125                                           ! 6736                         5,
35126 8B37                        05            .byte	5
35127                                           ! 6737                              0,
35128 8B38                        00            .byte	0
35129                                           ! 6738                         0,
35130 8B39                        00            .byte	0
35131                                           ! 6739                              0,
35132 8B3A                        00            .byte	0
35133                                           ! 6740                                0,
35134 8B3B                        00            .byte	0
35135                                           ! 6741                        0xE0000000,
35136 8B3C                      0000            .word	0
35137 8B3E                      E000            .word	$E000
35138                                           ! 6742                               0,
35139 8B40                      0000            .word	0
35140 8B42                      0000            .word	0
35141                                           ! 6743                             0,
35142 8B44                      0000            .word	0
35143                                           ! 6744                                2800,
35144 8B46                      0AF0            .word	$AF0
35145                                           ! 6745                             0,
35146 8B48                        00            .byte	0
35147                                           ! 6746                             0,
35148 8B49                        00            .byte	0
35149                                           ! 6747                           5,
35150 8B4A                        05            .byte	5
35151                                           ! 6748                                11,
35152 8B4B                        0B            .byte	$B
35153                                           ! 6749                             6,
35154 8B4C                        06            .byte	6
35155                                           ! 6750                                  5,
35156 8B4D                        05            .byte	5
35157                                           ! 6751   
35158                                           ! 6751                          5,
35159 8B4E                        05            .byte	5
35160                                           ! 6752                                 0,
35161 8B4F                        00            .byte	0
35162                                           ! 6753                            0,
35163 8B50                        00            .byte	0
35164                                           ! 6754                                 0,
35165 8B51                        00            .byte	0
35166                                           ! 6755                          0,
35167 8B52                      0000            .word	0
35168 8B54                      0000            .word	0
35169                                           ! 6756 } },
35170                                           ! 6757 { 0x0182,
35171 8B56                      0182            .word	$182
35172                                           ! 6758 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35173 8B58                      009B            .word	$9B
35174                                           ! 6759                           0x01 | 0x02 | 0x04,
35175 8B5A                        07            .byte	7
35176                                           ! 6760                           0,
35177 8B5B                        00            .byte	0
35178                                           ! 6761                           64,
35179 8B5C                      0040            .word	$40
35180                                           ! 6762                    64,
35181 8B5E                      0040            .word	$40
35182                                           ! 6763                        0xA000,
35183 8B60                      A000            .word	$A000
35184                                           ! 6764                        0x0000,
35185 8B62                      0000            .word	0
35186                                           ! 6765                       0,
35187 8B64                      0000            .word	0
35188 8B66                      0000            .word	0
35189                                           ! 6766                             4200,
35190 8B68                      1068            .word	$1068
35191                                           ! 6767                        1400,
35192 8B6A                      0578            .word	$578
35193                                           ! 6768                        1050,
35194 8B6C                      041A            .word	$41A
35195                                           ! 6769                      8,
35196 8B6E                        08            .byte	8
35197                                           ! 6770                      16,
35198 8B6F                        10            .byte	$10
35199                                           ! 6771                           1,
35200 8B70                        01            .byte	1
35201                                           ! 6772                         24,
35202 8B71                        18            .byte	$18
35203                                           ! 6773                          68,
35204 8B72                        44            .byte	$44
35205                                           ! 6774                        0x06,
35206 8B73                        06            .byte	6
35207                                           ! 6775                     0,
35208 8B74                        00            .byte	0
35209                                           ! 6776                               2,
35210 8B75                        02            .byte	2
35211                                           ! 6777                          0,
35212 8B76                        00            .byte	0
35213                                           ! 6778                        8,
35214 8B77                        08            .byte	8
35215                                           ! 6779                             16,
35216 8B78                        10            .byte	$10
35217                                           ! 6780                          8,
35218 8B79                        08            .byte	8
35219                                           ! 6781                               8,
35220 8B7A                        08            .byte	8
35221                                           ! 6782                         8,
35222 8B7B                        08            .byte	8
35223                                           ! 6783                              0,
35224 8B7C                        00            .byte	0
35225                                           ! 6784                         0,
35226 8B7D                        00            .byte	0
35227                                           ! 6785                              0,
35228 8B7E                        00            .byte	0
35229                                           ! 6786                                0,
35230 8B7F                        00            .byte	0
35231                                           ! 6787                        0xE0000000,
35232 8B80                      0000            .word	0
35233 8B82                      E000            .word	$E000
35234                                           ! 6788                               0,
35235 8B84                      0000            .word	0
35236 8B86                      0000            .word	0
35237                                           ! 6789                             0,
35238 8B88                      0000            .word	0
35239                                           ! 6790                                4200,
35240 8B8A                      1068            .word	$1068
35241                                           ! 6791                             0,
35242 8B8C                        00            .byte	0
35243                                           ! 6792                             0,
35244 8B8D                        00            .byte	0
35245                                           ! 6793                           8,
35246 8B8E                        08            .byte	8
35247                                           ! 6794                                16,
35248 8B8F                        10            .byte	$10
35249                                           ! 6795                             8,
35250 8B90                        08            .byte	8
35251                                           ! 6796                                  8,
35252 8B91                        08            .byte	8
35253                                           ! 6797                            8,
35254 8B92                        08            .byte	8
35255                                           ! 6798                                 0,
35256 8B93                        00            .byte	0
35257                                           ! 6799                            0,
35258 8B94                        00            .byte	0
35259                                           ! 6800                                 0,
35260 8B95                        00            .byte	0
35261                                           ! 6801                          0,
35262 8B96                      0000            .word	0
35263 8B98                      0000            .word	0
35264                                           ! 6802 } },
35265                                           ! 6803 { 0x0183,
35266 8B9A                      0183            .word	$183
35267                                           ! 6804 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35268 8B9C                      009B            .word	$9B
35269                                           ! 6805                           0x01 | 0x02 | 0x04,
35270 8B9E                        07            .byte	7
35271                                           ! 6806                           0,
35272 8B9F                        00            .byte	0
35273                                           ! 6807                           64,
35274 8BA0                      0040            .word	$40
35275                                           ! 6808                    64,
35276 8BA2                      0040            .word	$40
35277                                           ! 6809                        0xA000,
35278 8BA4                      A000            .word	$A000
35279                                           ! 6810                        0x0000,
35280 8BA6                      0000            .word	0
35281                                           ! 6811                       0,
35282 8BA8                      0000            .word	0
35283 8BAA                      0000            .word	0
35284                                           ! 6812                             5600,
35285 8BAC                      15E0            .word	$15E0
35286                                           ! 6813                        1400,
35287 8BAE                      0578            .word	$578
35288                                           ! 6814                        1050,
35289 8BB0                      041A            .word	$41A
35290                                           ! 6815                      8,
35291 8BB2                        08            .byte	8
35292                                           ! 6816                      16,
35293 8BB3                        10            .byte	$10
35294                                           ! 6817                           1,
35295 8BB4                        01            .byte	1
35296                                           ! 6818                         32,
35297 8BB5                        20            .byte	$20
35298                                           ! 6819                          90,
35299 8BB6                        5A            .byte	$5A
35300                                           ! 6820                
35301                                           ! 6820         0x06,
35302 8BB7                        06            .byte	6
35303                                           ! 6821                     0,
35304 8BB8                        00            .byte	0
35305                                           ! 6822                               1,
35306 8BB9                        01            .byte	1
35307                                           ! 6823                          0,
35308 8BBA                        00            .byte	0
35309                                           ! 6824                        8,
35310 8BBB                        08            .byte	8
35311                                           ! 6825                             16,
35312 8BBC                        10            .byte	$10
35313                                           ! 6826                          8,
35314 8BBD                        08            .byte	8
35315                                           ! 6827                               8,
35316 8BBE                        08            .byte	8
35317                                           ! 6828                         8,
35318 8BBF                        08            .byte	8
35319                                           ! 6829                              0,
35320 8BC0                        00            .byte	0
35321                                           ! 6830                         8,
35322 8BC1                        08            .byte	8
35323                                           ! 6831                              24,
35324 8BC2                        18            .byte	$18
35325                                           ! 6832                                0x02,
35326 8BC3                        02            .byte	2
35327                                           ! 6833                        0xE0000000,
35328 8BC4                      0000            .word	0
35329 8BC6                      E000            .word	$E000
35330                                           ! 6834                               0,
35331 8BC8                      0000            .word	0
35332 8BCA                      0000            .word	0
35333                                           ! 6835                             0,
35334 8BCC                      0000            .word	0
35335                                           ! 6836                                5600,
35336 8BCE                      15E0            .word	$15E0
35337                                           ! 6837                             0,
35338 8BD0                        00            .byte	0
35339                                           ! 6838                             0,
35340 8BD1                        00            .byte	0
35341                                           ! 6839                           8,
35342 8BD2                        08            .byte	8
35343                                           ! 6840                                16,
35344 8BD3                        10            .byte	$10
35345                                           ! 6841                             8,
35346 8BD4                        08            .byte	8
35347                                           ! 6842                                  8,
35348 8BD5                        08            .byte	8
35349                                           ! 6843                            8,
35350 8BD6                        08            .byte	8
35351                                           ! 6844                                 0,
35352 8BD7                        00            .byte	0
35353                                           ! 6845                            8,
35354 8BD8                        08            .byte	8
35355                                           ! 6846                                 24,
35356 8BD9                        18            .byte	$18
35357                                           ! 6847                          0,
35358 8BDA                      0000            .word	0
35359 8BDC                      0000            .word	0
35360                                           ! 6848 } },
35361                                           ! 6849 { 0x0184,
35362 8BDE                      0184            .word	$184
35363                                           ! 6850 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35364 8BE0                      009B            .word	$9B
35365                                           ! 6851                           0x01 | 0x02 | 0x04,
35366 8BE2                        07            .byte	7
35367                                           ! 6852                           0,
35368 8BE3                        00            .byte	0
35369                                           ! 6853                           64,
35370 8BE4                      0040            .word	$40
35371                                           ! 6854                    64,
35372 8BE6                      0040            .word	$40
35373                                           ! 6855                        0xA000,
35374 8BE8                      A000            .word	$A000
35375                                           ! 6856                        0x0000,
35376 8BEA                      0000            .word	0
35377                                           ! 6857                       0,
35378 8BEC                      0000            .word	0
35379 8BEE                      0000            .word	0
35380                                           ! 6858                             3360,
35381 8BF0                      0D20            .word	$D20
35382                                           ! 6859                        1680,
35383 8BF2                      0690            .word	$690
35384                                           ! 6860                        1050,
35385 8BF4                      041A            .word	$41A
35386                                           ! 6861                      8,
35387 8BF6                        08            .byte	8
35388                                           ! 6862                      16,
35389 8BF7                        10            .byte	$10
35390                                           ! 6863                           1,
35391 8BF8                        01            .byte	1
35392                                           ! 6864                         16,
35393 8BF9                        10            .byte	$10
35394                                           ! 6865                          54,
35395 8BFA                        36            .byte	$36
35396                                           ! 6866                        0x06,
35397 8BFB                        06            .byte	6
35398                                           ! 6867                     0,
35399 8BFC                        00            .byte	0
35400                                           ! 6868                               3,
35401 8BFD                        03            .byte	3
35402                                           ! 6869                          0,
35403 8BFE                        00            .byte	0
35404                                           ! 6870                        5,
35405 8BFF                        05            .byte	5
35406                                           ! 6871                             11,
35407 8C00                        0B            .byte	$B
35408                                           ! 6872                          6,
35409 8C01                        06            .byte	6
35410                                           ! 6873                               5,
35411 8C02                        05            .byte	5
35412                                           ! 6874                         5,
35413 8C03                        05            .byte	5
35414                                           ! 6875                              0,
35415 8C04                        00            .byte	0
35416                                           ! 6876                         0,
35417 8C05                        00            .byte	0
35418                                           ! 6877                              0,
35419 8C06                        00            .byte	0
35420                                           ! 6878                                0,
35421 8C07                        00            .byte	0
35422                                           ! 6879                        0xE0000000,
35423 8C08                      0000            .word	0
35424 8C0A                      E000            .word	$E000
35425                                           ! 6880                               0,
35426 8C0C                      0000            .word	0
35427 8C0E                      0000            .word	0
35428                                           ! 6881                             0,
35429 8C10                      0000            .word	0
35430                                           ! 6882                                3360,
35431 8C12                      0D20            .word	$D20
35432                                           ! 6883                             0,
35433 8C14                        00            .byte	0
35434                                           ! 6884                             0,
35435 8C15                        00            .byte	0
35436                                           ! 6885                           5,
35437 8C16                        05            .byte	5
35438                                           ! 6886                                11,
35439 8C17                        0B            .byte	$B
35440                                           ! 6887                             6,
35441 8C18                        06            .byte	6
35442                                           ! 6888        
35443                                           ! 6888                           5,
35444 8C19                        05            .byte	5
35445                                           ! 6889                            5,
35446 8C1A                        05            .byte	5
35447                                           ! 6890                                 0,
35448 8C1B                        00            .byte	0
35449                                           ! 6891                            0,
35450 8C1C                        00            .byte	0
35451                                           ! 6892                                 0,
35452 8C1D                        00            .byte	0
35453                                           ! 6893                          0,
35454 8C1E                      0000            .word	0
35455 8C20                      0000            .word	0
35456                                           ! 6894 } },
35457                                           ! 6895 { 0x0185,
35458 8C22                      0185            .word	$185
35459                                           ! 6896 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35460 8C24                      009B            .word	$9B
35461                                           ! 6897                           0x01 | 0x02 | 0x04,
35462 8C26                        07            .byte	7
35463                                           ! 6898                           0,
35464 8C27                        00            .byte	0
35465                                           ! 6899                           64,
35466 8C28                      0040            .word	$40
35467                                           ! 6900                    64,
35468 8C2A                      0040            .word	$40
35469                                           ! 6901                        0xA000,
35470 8C2C                      A000            .word	$A000
35471                                           ! 6902                        0x0000,
35472 8C2E                      0000            .word	0
35473                                           ! 6903                       0,
35474 8C30                      0000            .word	0
35475 8C32                      0000            .word	0
35476                                           ! 6904                             5040,
35477 8C34                      13B0            .word	$13B0
35478                                           ! 6905                        1680,
35479 8C36                      0690            .word	$690
35480                                           ! 6906                        1050,
35481 8C38                      041A            .word	$41A
35482                                           ! 6907                      8,
35483 8C3A                        08            .byte	8
35484                                           ! 6908                      16,
35485 8C3B                        10            .byte	$10
35486                                           ! 6909                           1,
35487 8C3C                        01            .byte	1
35488                                           ! 6910                         24,
35489 8C3D                        18            .byte	$18
35490                                           ! 6911                          81,
35491 8C3E                        51            .byte	$51
35492                                           ! 6912                        0x06,
35493 8C3F                        06            .byte	6
35494                                           ! 6913                     0,
35495 8C40                        00            .byte	0
35496                                           ! 6914                               2,
35497 8C41                        02            .byte	2
35498                                           ! 6915                          0,
35499 8C42                        00            .byte	0
35500                                           ! 6916                        8,
35501 8C43                        08            .byte	8
35502                                           ! 6917                             16,
35503 8C44                        10            .byte	$10
35504                                           ! 6918                          8,
35505 8C45                        08            .byte	8
35506                                           ! 6919                               8,
35507 8C46                        08            .byte	8
35508                                           ! 6920                         8,
35509 8C47                        08            .byte	8
35510                                           ! 6921                              0,
35511 8C48                        00            .byte	0
35512                                           ! 6922                         0,
35513 8C49                        00            .byte	0
35514                                           ! 6923                              0,
35515 8C4A                        00            .byte	0
35516                                           ! 6924                                0,
35517 8C4B                        00            .byte	0
35518                                           ! 6925                        0xE0000000,
35519 8C4C                      0000            .word	0
35520 8C4E                      E000            .word	$E000
35521                                           ! 6926                               0,
35522 8C50                      0000            .word	0
35523 8C52                      0000            .word	0
35524                                           ! 6927                             0,
35525 8C54                      0000            .word	0
35526                                           ! 6928                                5040,
35527 8C56                      13B0            .word	$13B0
35528                                           ! 6929                             0,
35529 8C58                        00            .byte	0
35530                                           ! 6930                             0,
35531 8C59                        00            .byte	0
35532                                           ! 6931                           8,
35533 8C5A                        08            .byte	8
35534                                           ! 6932                                16,
35535 8C5B                        10            .byte	$10
35536                                           ! 6933                             8,
35537 8C5C                        08            .byte	8
35538                                           ! 6934                                  8,
35539 8C5D                        08            .byte	8
35540                                           ! 6935                            8,
35541 8C5E                        08            .byte	8
35542                                           ! 6936                                 0,
35543 8C5F                        00            .byte	0
35544                                           ! 6937                            0,
35545 8C60                        00            .byte	0
35546                                           ! 6938                                 0,
35547 8C61                        00            .byte	0
35548                                           ! 6939                          0,
35549 8C62                      0000            .word	0
35550 8C64                      0000            .word	0
35551                                           ! 6940 } },
35552                                           ! 6941 { 0x0186,
35553 8C66                      0186            .word	$186
35554                                           ! 6942 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35555 8C68                      009B            .word	$9B
35556                                           ! 6943                           0x01 | 0x02 | 0x04,
35557 8C6A                        07            .byte	7
35558                                           ! 6944                           0,
35559 8C6B                        00            .byte	0
35560                                           ! 6945                           64,
35561 8C6C                      0040            .word	$40
35562                                           ! 6946                    64,
35563 8C6E                      0040            .word	$40
35564                                           ! 6947                        0xA000,
35565 8C70                      A000            .word	$A000
35566                                           ! 6948                        0x0000,
35567 8C72                      0000            .word	0
35568                                           ! 6949                       0,
35569 8C74                      0000            .word	0
35570 8C76                      0000            .word	0
35571                                           ! 6950                             6720,
35572 8C78                      1A40            .word	$1A40
35573                                           ! 6951                        1680,
35574 8C7A                      0690            .word	$690
35575                                           ! 6952                        1050,
35576 8C7C                      041A            .word	$41A
35577                                           ! 6953                      8,
35578 8C7E                        08            .byte	8
35579                                           ! 6954                      16,
35580 8C7F                        10            .byte	$10
35581                                           ! 6955                           1,
35582 8C80                        01            .byte	1
35583                                           ! 6956                         32,
35584 8C81                        20            .byte	$20
35585                                           ! 6957              
35586                                           ! 6957             108,
35587 8C82                        6C            .byte	$6C
35588                                           ! 6958                        0x06,
35589 8C83                        06            .byte	6
35590                                           ! 6959                     0,
35591 8C84                        00            .byte	0
35592                                           ! 6960                               1,
35593 8C85                        01            .byte	1
35594                                           ! 6961                          0,
35595 8C86                        00            .byte	0
35596                                           ! 6962                        8,
35597 8C87                        08            .byte	8
35598                                           ! 6963                             16,
35599 8C88                        10            .byte	$10
35600                                           ! 6964                          8,
35601 8C89                        08            .byte	8
35602                                           ! 6965                               8,
35603 8C8A                        08            .byte	8
35604                                           ! 6966                         8,
35605 8C8B                        08            .byte	8
35606                                           ! 6967                              0,
35607 8C8C                        00            .byte	0
35608                                           ! 6968                         8,
35609 8C8D                        08            .byte	8
35610                                           ! 6969                              24,
35611 8C8E                        18            .byte	$18
35612                                           ! 6970                                0x02,
35613 8C8F                        02            .byte	2
35614                                           ! 6971                        0xE0000000,
35615 8C90                      0000            .word	0
35616 8C92                      E000            .word	$E000
35617                                           ! 6972                               0,
35618 8C94                      0000            .word	0
35619 8C96                      0000            .word	0
35620                                           ! 6973                             0,
35621 8C98                      0000            .word	0
35622                                           ! 6974                                6720,
35623 8C9A                      1A40            .word	$1A40
35624                                           ! 6975                             0,
35625 8C9C                        00            .byte	0
35626                                           ! 6976                             0,
35627 8C9D                        00            .byte	0
35628                                           ! 6977                           8,
35629 8C9E                        08            .byte	8
35630                                           ! 6978                                16,
35631 8C9F                        10            .byte	$10
35632                                           ! 6979                             8,
35633 8CA0                        08            .byte	8
35634                                           ! 6980                                  8,
35635 8CA1                        08            .byte	8
35636                                           ! 6981                            8,
35637 8CA2                        08            .byte	8
35638                                           ! 6982                                 0,
35639 8CA3                        00            .byte	0
35640                                           ! 6983                            8,
35641 8CA4                        08            .byte	8
35642                                           ! 6984                                 24,
35643 8CA5                        18            .byte	$18
35644                                           ! 6985                          0,
35645 8CA6                      0000            .word	0
35646 8CA8                      0000            .word	0
35647                                           ! 6986 } },
35648                                           ! 6987 { 0x0187,
35649 8CAA                      0187            .word	$187
35650                                           ! 6988 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35651 8CAC                      009B            .word	$9B
35652                                           ! 6989                           0x01 | 0x02 | 0x04,
35653 8CAE                        07            .byte	7
35654                                           ! 6990                           0,
35655 8CAF                        00            .byte	0
35656                                           ! 6991                           64,
35657 8CB0                      0040            .word	$40
35658                                           ! 6992                    64,
35659 8CB2                      0040            .word	$40
35660                                           ! 6993                        0xA000,
35661 8CB4                      A000            .word	$A000
35662                                           ! 6994                        0x0000,
35663 8CB6                      0000            .word	0
35664                                           ! 6995                       0,
35665 8CB8                      0000            .word	0
35666 8CBA                      0000            .word	0
35667                                           ! 6996                             3840,
35668 8CBC                      0F00            .word	$F00
35669                                           ! 6997                        1920,
35670 8CBE                      0780            .word	$780
35671                                           ! 6998                        1200,
35672 8CC0                      04B0            .word	$4B0
35673                                           ! 6999                      8,
35674 8CC2                        08            .byte	8
35675                                           ! 7000                      16,
35676 8CC3                        10            .byte	$10
35677                                           ! 7001                           1,
35678 8CC4                        01            .byte	1
35679                                           ! 7002                         16,
35680 8CC5                        10            .byte	$10
35681                                           ! 7003                          71,
35682 8CC6                        47            .byte	$47
35683                                           ! 7004                        0x06,
35684 8CC7                        06            .byte	6
35685                                           ! 7005                     0,
35686 8CC8                        00            .byte	0
35687                                           ! 7006                               2,
35688 8CC9                        02            .byte	2
35689                                           ! 7007                          0,
35690 8CCA                        00            .byte	0
35691                                           ! 7008                        5,
35692 8CCB                        05            .byte	5
35693                                           ! 7009                             11,
35694 8CCC                        0B            .byte	$B
35695                                           ! 7010                          6,
35696 8CCD                        06            .byte	6
35697                                           ! 7011                               5,
35698 8CCE                        05            .byte	5
35699                                           ! 7012                         5,
35700 8CCF                        05            .byte	5
35701                                           ! 7013                              0,
35702 8CD0                        00            .byte	0
35703                                           ! 7014                         0,
35704 8CD1                        00            .byte	0
35705                                           ! 7015                              0,
35706 8CD2                        00            .byte	0
35707                                           ! 7016                                0,
35708 8CD3                        00            .byte	0
35709                                           ! 7017                        0xE0000000,
35710 8CD4                      0000            .word	0
35711 8CD6                      E000            .word	$E000
35712                                           ! 7018                               0,
35713 8CD8                      0000            .word	0
35714 8CDA                      0000            .word	0
35715                                           ! 7019                             0,
35716 8CDC                      0000            .word	0
35717                                           ! 7020                                3840,
35718 8CDE                      0F00            .word	$F00
35719                                           ! 7021                             0,
35720 8CE0                        00            .byte	0
35721                                           ! 7022                             0,
35722 8CE1                        00            .byte	0
35723                                           ! 7023                           5,
35724 8CE2                        05            .byte	5
35725                                           ! 7024                                11,
35726 8CE3                        0B            .byte	$B
35727                                           ! 7025       
35728                                           ! 7025                       6,
35729 8CE4                        06            .byte	6
35730                                           ! 7026                                  5,
35731 8CE5                        05            .byte	5
35732                                           ! 7027                            5,
35733 8CE6                        05            .byte	5
35734                                           ! 7028                                 0,
35735 8CE7                        00            .byte	0
35736                                           ! 7029                            0,
35737 8CE8                        00            .byte	0
35738                                           ! 7030                                 0,
35739 8CE9                        00            .byte	0
35740                                           ! 7031                          0,
35741 8CEA                      0000            .word	0
35742 8CEC                      0000            .word	0
35743                                           ! 7032 } },
35744                                           ! 7033 { 0x0188,
35745 8CEE                      0188            .word	$188
35746                                           ! 7034 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35747 8CF0                      009B            .word	$9B
35748                                           ! 7035                           0x01 | 0x02 | 0x04,
35749 8CF2                        07            .byte	7
35750                                           ! 7036                           0,
35751 8CF3                        00            .byte	0
35752                                           ! 7037                           64,
35753 8CF4                      0040            .word	$40
35754                                           ! 7038                    64,
35755 8CF6                      0040            .word	$40
35756                                           ! 7039                        0xA000,
35757 8CF8                      A000            .word	$A000
35758                                           ! 7040                        0x0000,
35759 8CFA                      0000            .word	0
35760                                           ! 7041                       0,
35761 8CFC                      0000            .word	0
35762 8CFE                      0000            .word	0
35763                                           ! 7042                             5760,
35764 8D00                      1680            .word	$1680
35765                                           ! 7043                        1920,
35766 8D02                      0780            .word	$780
35767                                           ! 7044                        1200,
35768 8D04                      04B0            .word	$4B0
35769                                           ! 7045                      8,
35770 8D06                        08            .byte	8
35771                                           ! 7046                      16,
35772 8D07                        10            .byte	$10
35773                                           ! 7047                           1,
35774 8D08                        01            .byte	1
35775                                           ! 7048                         24,
35776 8D09                        18            .byte	$18
35777                                           ! 7049                          106,
35778 8D0A                        6A            .byte	$6A
35779                                           ! 7050                        0x06,
35780 8D0B                        06            .byte	6
35781                                           ! 7051                     0,
35782 8D0C                        00            .byte	0
35783                                           ! 7052                               1,
35784 8D0D                        01            .byte	1
35785                                           ! 7053                          0,
35786 8D0E                        00            .byte	0
35787                                           ! 7054                        8,
35788 8D0F                        08            .byte	8
35789                                           ! 7055                             16,
35790 8D10                        10            .byte	$10
35791                                           ! 7056                          8,
35792 8D11                        08            .byte	8
35793                                           ! 7057                               8,
35794 8D12                        08            .byte	8
35795                                           ! 7058                         8,
35796 8D13                        08            .byte	8
35797                                           ! 7059                              0,
35798 8D14                        00            .byte	0
35799                                           ! 7060                         0,
35800 8D15                        00            .byte	0
35801                                           ! 7061                              0,
35802 8D16                        00            .byte	0
35803                                           ! 7062                                0,
35804 8D17                        00            .byte	0
35805                                           ! 7063                        0xE0000000,
35806 8D18                      0000            .word	0
35807 8D1A                      E000            .word	$E000
35808                                           ! 7064                               0,
35809 8D1C                      0000            .word	0
35810 8D1E                      0000            .word	0
35811                                           ! 7065                             0,
35812 8D20                      0000            .word	0
35813                                           ! 7066                                5760,
35814 8D22                      1680            .word	$1680
35815                                           ! 7067                             0,
35816 8D24                        00            .byte	0
35817                                           ! 7068                             0,
35818 8D25                        00            .byte	0
35819                                           ! 7069                           8,
35820 8D26                        08            .byte	8
35821                                           ! 7070                                16,
35822 8D27                        10            .byte	$10
35823                                           ! 7071                             8,
35824 8D28                        08            .byte	8
35825                                           ! 7072                                  8,
35826 8D29                        08            .byte	8
35827                                           ! 7073                            8,
35828 8D2A                        08            .byte	8
35829                                           ! 7074                                 0,
35830 8D2B                        00            .byte	0
35831                                           ! 7075                            0,
35832 8D2C                        00            .byte	0
35833                                           ! 7076                                 0,
35834 8D2D                        00            .byte	0
35835                                           ! 7077                          0,
35836 8D2E                      0000            .word	0
35837 8D30                      0000            .word	0
35838                                           ! 7078 } },
35839                                           ! 7079 { 0x0189,
35840 8D32                      0189            .word	$189
35841                                           ! 7080 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35842 8D34                      009B            .word	$9B
35843                                           ! 7081                           0x01 | 0x02 | 0x04,
35844 8D36                        07            .byte	7
35845                                           ! 7082                           0,
35846 8D37                        00            .byte	0
35847                                           ! 7083                           64,
35848 8D38                      0040            .word	$40
35849                                           ! 7084                    64,
35850 8D3A                      0040            .word	$40
35851                                           ! 7085                        0xA000,
35852 8D3C                      A000            .word	$A000
35853                                           ! 7086                        0x0000,
35854 8D3E                      0000            .word	0
35855                                           ! 7087                       0,
35856 8D40                      0000            .word	0
35857 8D42                      0000            .word	0
35858                                           ! 7088                             7680,
35859 8D44                      1E00            .word	$1E00
35860                                           ! 7089                        1920,
35861 8D46                      0780            .word	$780
35862                                           ! 7090                        1200,
35863 8D48                      04B0            .word	$4B0
35864                                           ! 7091                      8,
35865 8D4A                        08            .byte	8
35866                                           ! 7092                      16,
35867 8D4B                        10            .byte	$10
35868                                           ! 7093                           1,
35869 8D4C                        01            .byte	1
35870                                           ! 7094         
35871                                           ! 7094                 32,
35872 8D4D                        20            .byte	$20
35873                                           ! 7095                          141,
35874 8D4E                        8D            .byte	$8D
35875                                           ! 7096                        0x06,
35876 8D4F                        06            .byte	6
35877                                           ! 7097                     0,
35878 8D50                        00            .byte	0
35879                                           ! 7098                               0,
35880 8D51                        00            .byte	0
35881                                           ! 7099                          0,
35882 8D52                        00            .byte	0
35883                                           ! 7100                        8,
35884 8D53                        08            .byte	8
35885                                           ! 7101                             16,
35886 8D54                        10            .byte	$10
35887                                           ! 7102                          8,
35888 8D55                        08            .byte	8
35889                                           ! 7103                               8,
35890 8D56                        08            .byte	8
35891                                           ! 7104                         8,
35892 8D57                        08            .byte	8
35893                                           ! 7105                              0,
35894 8D58                        00            .byte	0
35895                                           ! 7106                         8,
35896 8D59                        08            .byte	8
35897                                           ! 7107                              24,
35898 8D5A                        18            .byte	$18
35899                                           ! 7108                                0x02,
35900 8D5B                        02            .byte	2
35901                                           ! 7109                        0xE0000000,
35902 8D5C                      0000            .word	0
35903 8D5E                      E000            .word	$E000
35904                                           ! 7110                               0,
35905 8D60                      0000            .word	0
35906 8D62                      0000            .word	0
35907                                           ! 7111                             0,
35908 8D64                      0000            .word	0
35909                                           ! 7112                                7680,
35910 8D66                      1E00            .word	$1E00
35911                                           ! 7113                             0,
35912 8D68                        00            .byte	0
35913                                           ! 7114                             0,
35914 8D69                        00            .byte	0
35915                                           ! 7115                           8,
35916 8D6A                        08            .byte	8
35917                                           ! 7116                                16,
35918 8D6B                        10            .byte	$10
35919                                           ! 7117                             8,
35920 8D6C                        08            .byte	8
35921                                           ! 7118                                  8,
35922 8D6D                        08            .byte	8
35923                                           ! 7119                            8,
35924 8D6E                        08            .byte	8
35925                                           ! 7120                                 0,
35926 8D6F                        00            .byte	0
35927                                           ! 7121                            8,
35928 8D70                        08            .byte	8
35929                                           ! 7122                                 24,
35930 8D71                        18            .byte	$18
35931                                           ! 7123                          0,
35932 8D72                      0000            .word	0
35933 8D74                      0000            .word	0
35934                                           ! 7124 } },
35935                                           ! 7125 { 0x018a,
35936 8D76                      018A            .word	$18A
35937                                           ! 7126 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35938 8D78                      009B            .word	$9B
35939                                           ! 7127                           0x01 | 0x02 | 0x04,
35940 8D7A                        07            .byte	7
35941                                           ! 7128                           0,
35942 8D7B                        00            .byte	0
35943                                           ! 7129                           64,
35944 8D7C                      0040            .word	$40
35945                                           ! 7130                    64,
35946 8D7E                      0040            .word	$40
35947                                           ! 7131                        0xA000,
35948 8D80                      A000            .word	$A000
35949                                           ! 7132                        0x0000,
35950 8D82                      0000            .word	0
35951                                           ! 7133                       0,
35952 8D84                      0000            .word	0
35953 8D86                      0000            .word	0
35954                                           ! 7134                             5120,
35955 8D88                      1400            .word	$1400
35956                                           ! 7135                        2560,
35957 8D8A                      0A00            .word	$A00
35958                                           ! 7136                        1600,
35959 8D8C                      0640            .word	$640
35960                                           ! 7137                      8,
35961 8D8E                        08            .byte	8
35962                                           ! 7138                      16,
35963 8D8F                        10            .byte	$10
35964                                           ! 7139                           1,
35965 8D90                        01            .byte	1
35966                                           ! 7140                         16,
35967 8D91                        10            .byte	$10
35968                                           ! 7141                          125,
35969 8D92                        7D            .byte	$7D
35970                                           ! 7142                        0x06,
35971 8D93                        06            .byte	6
35972                                           ! 7143                     0,
35973 8D94                        00            .byte	0
35974                                           ! 7144                               1,
35975 8D95                        01            .byte	1
35976                                           ! 7145                          0,
35977 8D96                        00            .byte	0
35978                                           ! 7146                        5,
35979 8D97                        05            .byte	5
35980                                           ! 7147                             11,
35981 8D98                        0B            .byte	$B
35982                                           ! 7148                          6,
35983 8D99                        06            .byte	6
35984                                           ! 7149                               5,
35985 8D9A                        05            .byte	5
35986                                           ! 7150                         5,
35987 8D9B                        05            .byte	5
35988                                           ! 7151                              0,
35989 8D9C                        00            .byte	0
35990                                           ! 7152                         0,
35991 8D9D                        00            .byte	0
35992                                           ! 7153                              0,
35993 8D9E                        00            .byte	0
35994                                           ! 7154                                0,
35995 8D9F                        00            .byte	0
35996                                           ! 7155                        0xE0000000,
35997 8DA0                      0000            .word	0
35998 8DA2                      E000            .word	$E000
35999                                           ! 7156                               0,
36000 8DA4                      0000            .word	0
36001 8DA6                      0000            .word	0
36002                                           ! 7157                             0,
36003 8DA8                      0000            .word	0
36004                                           ! 7158                                5120,
36005 8DAA                      1400            .word	$1400
36006                                           ! 7159                             0,
36007 8DAC                        00            .byte	0
36008                                           ! 7160                             0,
36009 8DAD                        00            .byte	0
36010                                           ! 7161                           5,
36011 8DAE                        05            .byte	5
36012                                           ! 7162        
36013                                           ! 7162                         11,
36014 8DAF                        0B            .byte	$B
36015                                           ! 7163                             6,
36016 8DB0                        06            .byte	6
36017                                           ! 7164                                  5,
36018 8DB1                        05            .byte	5
36019                                           ! 7165                            5,
36020 8DB2                        05            .byte	5
36021                                           ! 7166                                 0,
36022 8DB3                        00            .byte	0
36023                                           ! 7167                            0,
36024 8DB4                        00            .byte	0
36025                                           ! 7168                                 0,
36026 8DB5                        00            .byte	0
36027                                           ! 7169                          0,
36028 8DB6                      0000            .word	0
36029 8DB8                      0000            .word	0
36030                                           ! 7170 } },
36031                                           ! 7171 { 0x018b,
36032 8DBA                      018B            .word	$18B
36033                                           ! 7172 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36034 8DBC                      009B            .word	$9B
36035                                           ! 7173                           0x01 | 0x02 | 0x04,
36036 8DBE                        07            .byte	7
36037                                           ! 7174                           0,
36038 8DBF                        00            .byte	0
36039                                           ! 7175                           64,
36040 8DC0                      0040            .word	$40
36041                                           ! 7176                    64,
36042 8DC2                      0040            .word	$40
36043                                           ! 7177                        0xA000,
36044 8DC4                      A000            .word	$A000
36045                                           ! 7178                        0x0000,
36046 8DC6                      0000            .word	0
36047                                           ! 7179                       0,
36048 8DC8                      0000            .word	0
36049 8DCA                      0000            .word	0
36050                                           ! 7180                             7680,
36051 8DCC                      1E00            .word	$1E00
36052                                           ! 7181                        2560,
36053 8DCE                      0A00            .word	$A00
36054                                           ! 7182                        1600,
36055 8DD0                      0640            .word	$640
36056                                           ! 7183                      8,
36057 8DD2                        08            .byte	8
36058                                           ! 7184                      16,
36059 8DD3                        10            .byte	$10
36060                                           ! 7185                           1,
36061 8DD4                        01            .byte	1
36062                                           ! 7186                         24,
36063 8DD5                        18            .byte	$18
36064                                           ! 7187                          188,
36065 8DD6                        BC            .byte	$BC
36066                                           ! 7188                        0x06,
36067 8DD7                        06            .byte	6
36068                                           ! 7189                     0,
36069 8DD8                        00            .byte	0
36070                                           ! 7190                               0,
36071 8DD9                        00            .byte	0
36072                                           ! 7191                          0,
36073 8DDA                        00            .byte	0
36074                                           ! 7192                        8,
36075 8DDB                        08            .byte	8
36076                                           ! 7193                             16,
36077 8DDC                        10            .byte	$10
36078                                           ! 7194                          8,
36079 8DDD                        08            .byte	8
36080                                           ! 7195                               8,
36081 8DDE                        08            .byte	8
36082                                           ! 7196                         8,
36083 8DDF                        08            .byte	8
36084                                           ! 7197                              0,
36085 8DE0                        00            .byte	0
36086                                           ! 7198                         0,
36087 8DE1                        00            .byte	0
36088                                           ! 7199                              0,
36089 8DE2                        00            .byte	0
36090                                           ! 7200                                0,
36091 8DE3                        00            .byte	0
36092                                           ! 7201                        0xE0000000,
36093 8DE4                      0000            .word	0
36094 8DE6                      E000            .word	$E000
36095                                           ! 7202                               0,
36096 8DE8                      0000            .word	0
36097 8DEA                      0000            .word	0
36098                                           ! 7203                             0,
36099 8DEC                      0000            .word	0
36100                                           ! 7204                                7680,
36101 8DEE                      1E00            .word	$1E00
36102                                           ! 7205                             0,
36103 8DF0                        00            .byte	0
36104                                           ! 7206                             0,
36105 8DF1                        00            .byte	0
36106                                           ! 7207                           8,
36107 8DF2                        08            .byte	8
36108                                           ! 7208                                16,
36109 8DF3                        10            .byte	$10
36110                                           ! 7209                             8,
36111 8DF4                        08            .byte	8
36112                                           ! 7210                                  8,
36113 8DF5                        08            .byte	8
36114                                           ! 7211                            8,
36115 8DF6                        08            .byte	8
36116                                           ! 7212                                 0,
36117 8DF7                        00            .byte	0
36118                                           ! 7213                            0,
36119 8DF8                        00            .byte	0
36120                                           ! 7214                                 0,
36121 8DF9                        00            .byte	0
36122                                           ! 7215                          0,
36123 8DFA                      0000            .word	0
36124 8DFC                      0000            .word	0
36125                                           ! 7216 } },
36126                                           ! 7217 { 0x018c,
36127 8DFE                      018C            .word	$18C
36128                                           ! 7218 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36129 8E00                      009B            .word	$9B
36130                                           ! 7219                           0x01 | 0x02 | 0x04,
36131 8E02                        07            .byte	7
36132                                           ! 7220                           0,
36133 8E03                        00            .byte	0
36134                                           ! 7221                           64,
36135 8E04                      0040            .word	$40
36136                                           ! 7222                    64,
36137 8E06                      0040            .word	$40
36138                                           ! 7223                        0xA000,
36139 8E08                      A000            .word	$A000
36140                                           ! 7224                        0x0000,
36141 8E0A                      0000            .word	0
36142                                           ! 7225                       0,
36143 8E0C                      0000            .word	0
36144 8E0E                      0000            .word	0
36145                                           ! 7226                             10240,
36146 8E10                      2800            .word	$2800
36147                                           ! 7227                        2560,
36148 8E12                      0A00            .word	$A00
36149                                           ! 7228                        1600,
36150 8E14                      0640            .word	$640
36151                                           ! 7229                      8,
36152 8E16                        08            .byte	8
36153                                           ! 7230                      16,
36154 8E17                        10            .byte	$10
36155                                           ! 7231   
36156                                           ! 7231                         1,
36157 8E18                        01            .byte	1
36158                                           ! 7232                         32,
36159 8E19                        20            .byte	$20
36160                                           ! 7233                          250,
36161 8E1A                        FA            .byte	$FA
36162                                           ! 7234                        0x06,
36163 8E1B                        06            .byte	6
36164                                           ! 7235                     0,
36165 8E1C                        00            .byte	0
36166                                           ! 7236                               0,
36167 8E1D                        00            .byte	0
36168                                           ! 7237                          0,
36169 8E1E                        00            .byte	0
36170                                           ! 7238                        8,
36171 8E1F                        08            .byte	8
36172                                           ! 7239                             16,
36173 8E20                        10            .byte	$10
36174                                           ! 7240                          8,
36175 8E21                        08            .byte	8
36176                                           ! 7241                               8,
36177 8E22                        08            .byte	8
36178                                           ! 7242                         8,
36179 8E23                        08            .byte	8
36180                                           ! 7243                              0,
36181 8E24                        00            .byte	0
36182                                           ! 7244                         8,
36183 8E25                        08            .byte	8
36184                                           ! 7245                              24,
36185 8E26                        18            .byte	$18
36186                                           ! 7246                                0x02,
36187 8E27                        02            .byte	2
36188                                           ! 7247                        0xE0000000,
36189 8E28                      0000            .word	0
36190 8E2A                      E000            .word	$E000
36191                                           ! 7248                               0,
36192 8E2C                      0000            .word	0
36193 8E2E                      0000            .word	0
36194                                           ! 7249                             0,
36195 8E30                      0000            .word	0
36196                                           ! 7250                                10240,
36197 8E32                      2800            .word	$2800
36198                                           ! 7251                             0,
36199 8E34                        00            .byte	0
36200                                           ! 7252                             0,
36201 8E35                        00            .byte	0
36202                                           ! 7253                           8,
36203 8E36                        08            .byte	8
36204                                           ! 7254                                16,
36205 8E37                        10            .byte	$10
36206                                           ! 7255                             8,
36207 8E38                        08            .byte	8
36208                                           ! 7256                                  8,
36209 8E39                        08            .byte	8
36210                                           ! 7257                            8,
36211 8E3A                        08            .byte	8
36212                                           ! 7258                                 0,
36213 8E3B                        00            .byte	0
36214                                           ! 7259                            8,
36215 8E3C                        08            .byte	8
36216                                           ! 7260                                 24,
36217 8E3D                        18            .byte	$18
36218                                           ! 7261                          0,
36219 8E3E                      0000            .word	0
36220 8E40                      0000            .word	0
36221                                           ! 7262 } },
36222                                           ! 7263 { 0x018d,
36223 8E42                      018D            .word	$18D
36224                                           ! 7264 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36225 8E44                      009B            .word	$9B
36226                                           ! 7265                           0x01 | 0x02 | 0x04,
36227 8E46                        07            .byte	7
36228                                           ! 7266                           0,
36229 8E47                        00            .byte	0
36230                                           ! 7267                           64,
36231 8E48                      0040            .word	$40
36232                                           ! 7268                    64,
36233 8E4A                      0040            .word	$40
36234                                           ! 7269                        0xA000,
36235 8E4C                      A000            .word	$A000
36236                                           ! 7270                        0x0000,
36237 8E4E                      0000            .word	0
36238                                           ! 7271                       0,
36239 8E50                      0000            .word	0
36240 8E52                      0000            .word	0
36241                                           ! 7272                             640,
36242 8E54                      0280            .word	$280
36243                                           ! 7273                        320,
36244 8E56                      0140            .word	$140
36245                                           ! 7274                        480,
36246 8E58                      01E0            .word	$1E0
36247                                           ! 7275                      8,
36248 8E5A                        08            .byte	8
36249                                           ! 7276                      16,
36250 8E5B                        10            .byte	$10
36251                                           ! 7277                           1,
36252 8E5C                        01            .byte	1
36253                                           ! 7278                         16,
36254 8E5D                        10            .byte	$10
36255                                           ! 7279                          5,
36256 8E5E                        05            .byte	5
36257                                           ! 7280                        0x06,
36258 8E5F                        06            .byte	6
36259                                           ! 7281                     0,
36260 8E60                        00            .byte	0
36261                                           ! 7282                               53,
36262 8E61                        35            .byte	$35
36263                                           ! 7283                          0,
36264 8E62                        00            .byte	0
36265                                           ! 7284                        5,
36266 8E63                        05            .byte	5
36267                                           ! 7285                             11,
36268 8E64                        0B            .byte	$B
36269                                           ! 7286                          6,
36270 8E65                        06            .byte	6
36271                                           ! 7287                               5,
36272 8E66                        05            .byte	5
36273                                           ! 7288                         5,
36274 8E67                        05            .byte	5
36275                                           ! 7289                              0,
36276 8E68                        00            .byte	0
36277                                           ! 7290                         0,
36278 8E69                        00            .byte	0
36279                                           ! 7291                              0,
36280 8E6A                        00            .byte	0
36281                                           ! 7292                                0,
36282 8E6B                        00            .byte	0
36283                                           ! 7293                        0xE0000000,
36284 8E6C                      0000            .word	0
36285 8E6E                      E000            .word	$E000
36286                                           ! 7294                               0,
36287 8E70                      0000            .word	0
36288 8E72                      0000            .word	0
36289                                           ! 7295                             0,
36290 8E74                      0000            .word	0
36291                                           ! 7296                                640,
36292 8E76                      0280            .word	$280
36293                                           ! 7297                             0,
36294 8E78                        00            .byte	0
36295                                           ! 7298                             0,
36296 8E79                        00            .byte	0
36297                                           ! 7299      
36298                                           ! 7299                      5,
36299 8E7A                        05            .byte	5
36300                                           ! 7300                                11,
36301 8E7B                        0B            .byte	$B
36302                                           ! 7301                             6,
36303 8E7C                        06            .byte	6
36304                                           ! 7302                                  5,
36305 8E7D                        05            .byte	5
36306                                           ! 7303                            5,
36307 8E7E                        05            .byte	5
36308                                           ! 7304                                 0,
36309 8E7F                        00            .byte	0
36310                                           ! 7305                            0,
36311 8E80                        00            .byte	0
36312                                           ! 7306                                 0,
36313 8E81                        00            .byte	0
36314                                           ! 7307                          0,
36315 8E82                      0000            .word	0
36316 8E84                      0000            .word	0
36317                                           ! 7308 } },
36318                                           ! 7309 { 0x018e,
36319 8E86                      018E            .word	$18E
36320                                           ! 7310 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36321 8E88                      009B            .word	$9B
36322                                           ! 7311                           0x01 | 0x02 | 0x04,
36323 8E8A                        07            .byte	7
36324                                           ! 7312                           0,
36325 8E8B                        00            .byte	0
36326                                           ! 7313                           64,
36327 8E8C                      0040            .word	$40
36328                                           ! 7314                    64,
36329 8E8E                      0040            .word	$40
36330                                           ! 7315                        0xA000,
36331 8E90                      A000            .word	$A000
36332                                           ! 7316                        0x0000,
36333 8E92                      0000            .word	0
36334                                           ! 7317                       0,
36335 8E94                      0000            .word	0
36336 8E96                      0000            .word	0
36337                                           ! 7318                             960,
36338 8E98                      03C0            .word	$3C0
36339                                           ! 7319                        320,
36340 8E9A                      0140            .word	$140
36341                                           ! 7320                        480,
36342 8E9C                      01E0            .word	$1E0
36343                                           ! 7321                      8,
36344 8E9E                        08            .byte	8
36345                                           ! 7322                      16,
36346 8E9F                        10            .byte	$10
36347                                           ! 7323                           1,
36348 8EA0                        01            .byte	1
36349                                           ! 7324                         24,
36350 8EA1                        18            .byte	$18
36351                                           ! 7325                          8,
36352 8EA2                        08            .byte	8
36353                                           ! 7326                        0x06,
36354 8EA3                        06            .byte	6
36355                                           ! 7327                     0,
36356 8EA4                        00            .byte	0
36357                                           ! 7328                               35,
36358 8EA5                        23            .byte	$23
36359                                           ! 7329                          0,
36360 8EA6                        00            .byte	0
36361                                           ! 7330                        8,
36362 8EA7                        08            .byte	8
36363                                           ! 7331                             16,
36364 8EA8                        10            .byte	$10
36365                                           ! 7332                          8,
36366 8EA9                        08            .byte	8
36367                                           ! 7333                               8,
36368 8EAA                        08            .byte	8
36369                                           ! 7334                         8,
36370 8EAB                        08            .byte	8
36371                                           ! 7335                              0,
36372 8EAC                        00            .byte	0
36373                                           ! 7336                         0,
36374 8EAD                        00            .byte	0
36375                                           ! 7337                              0,
36376 8EAE                        00            .byte	0
36377                                           ! 7338                                0,
36378 8EAF                        00            .byte	0
36379                                           ! 7339                        0xE0000000,
36380 8EB0                      0000            .word	0
36381 8EB2                      E000            .word	$E000
36382                                           ! 7340                               0,
36383 8EB4                      0000            .word	0
36384 8EB6                      0000            .word	0
36385                                           ! 7341                             0,
36386 8EB8                      0000            .word	0
36387                                           ! 7342                                960,
36388 8EBA                      03C0            .word	$3C0
36389                                           ! 7343                             0,
36390 8EBC                        00            .byte	0
36391                                           ! 7344                             0,
36392 8EBD                        00            .byte	0
36393                                           ! 7345                           8,
36394 8EBE                        08            .byte	8
36395                                           ! 7346                                16,
36396 8EBF                        10            .byte	$10
36397                                           ! 7347                             8,
36398 8EC0                        08            .byte	8
36399                                           ! 7348                                  8,
36400 8EC1                        08            .byte	8
36401                                           ! 7349                            8,
36402 8EC2                        08            .byte	8
36403                                           ! 7350                                 0,
36404 8EC3                        00            .byte	0
36405                                           ! 7351                            0,
36406 8EC4                        00            .byte	0
36407                                           ! 7352                                 0,
36408 8EC5                        00            .byte	0
36409                                           ! 7353                          0,
36410 8EC6                      0000            .word	0
36411 8EC8                      0000            .word	0
36412                                           ! 7354 } },
36413                                           ! 7355 { 0x018f,
36414 8ECA                      018F            .word	$18F
36415                                           ! 7356 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36416 8ECC                      009B            .word	$9B
36417                                           ! 7357                           0x01 | 0x02 | 0x04,
36418 8ECE                        07            .byte	7
36419                                           ! 7358                           0,
36420 8ECF                        00            .byte	0
36421                                           ! 7359                           64,
36422 8ED0                      0040            .word	$40
36423                                           ! 7360                    64,
36424 8ED2                      0040            .word	$40
36425                                           ! 7361                        0xA000,
36426 8ED4                      A000            .word	$A000
36427                                           ! 7362                        0x0000,
36428 8ED6                      0000            .word	0
36429                                           ! 7363                       0,
36430 8ED8                      0000            .word	0
36431 8EDA                      0000            .word	0
36432                                           ! 7364                             1280,
36433 8EDC                      0500            .word	$500
36434                                           ! 7365                        320,
36435 8EDE                      0140            .word	$140
36436                                           ! 7366                        480,
36437 8EE0                      01E0            .word	$1E0
36438                                           ! 7367                      8,
36439 8EE2                        08            .byte	8
36440                                           ! 7368     
36441                                           ! 7368                  16,
36442 8EE3                        10            .byte	$10
36443                                           ! 7369                           1,
36444 8EE4                        01            .byte	1
36445                                           ! 7370                         32,
36446 8EE5                        20            .byte	$20
36447                                           ! 7371                          10,
36448 8EE6                        0A            .byte	$A
36449                                           ! 7372                        0x06,
36450 8EE7                        06            .byte	6
36451                                           ! 7373                     0,
36452 8EE8                        00            .byte	0
36453                                           ! 7374                               26,
36454 8EE9                        1A            .byte	$1A
36455                                           ! 7375                          0,
36456 8EEA                        00            .byte	0
36457                                           ! 7376                        8,
36458 8EEB                        08            .byte	8
36459                                           ! 7377                             16,
36460 8EEC                        10            .byte	$10
36461                                           ! 7378                          8,
36462 8EED                        08            .byte	8
36463                                           ! 7379                               8,
36464 8EEE                        08            .byte	8
36465                                           ! 7380                         8,
36466 8EEF                        08            .byte	8
36467                                           ! 7381                              0,
36468 8EF0                        00            .byte	0
36469                                           ! 7382                         8,
36470 8EF1                        08            .byte	8
36471                                           ! 7383                              24,
36472 8EF2                        18            .byte	$18
36473                                           ! 7384                                0x02,
36474 8EF3                        02            .byte	2
36475                                           ! 7385                        0xE0000000,
36476 8EF4                      0000            .word	0
36477 8EF6                      E000            .word	$E000
36478                                           ! 7386                               0,
36479 8EF8                      0000            .word	0
36480 8EFA                      0000            .word	0
36481                                           ! 7387                             0,
36482 8EFC                      0000            .word	0
36483                                           ! 7388                                1280,
36484 8EFE                      0500            .word	$500
36485                                           ! 7389                             0,
36486 8F00                        00            .byte	0
36487                                           ! 7390                             0,
36488 8F01                        00            .byte	0
36489                                           ! 7391                           8,
36490 8F02                        08            .byte	8
36491                                           ! 7392                                16,
36492 8F03                        10            .byte	$10
36493                                           ! 7393                             8,
36494 8F04                        08            .byte	8
36495                                           ! 7394                                  8,
36496 8F05                        08            .byte	8
36497                                           ! 7395                            8,
36498 8F06                        08            .byte	8
36499                                           ! 7396                                 0,
36500 8F07                        00            .byte	0
36501                                           ! 7397                            8,
36502 8F08                        08            .byte	8
36503                                           ! 7398                                 24,
36504 8F09                        18            .byte	$18
36505                                           ! 7399                          0,
36506 8F0A                      0000            .word	0
36507 8F0C                      0000            .word	0
36508                                           ! 7400 } },
36509                                           ! 7401 { 0x0190,
36510 8F0E                      0190            .word	$190
36511                                           ! 7402 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36512 8F10                      009B            .word	$9B
36513                                           ! 7403                           0x01 | 0x02 | 0x04,
36514 8F12                        07            .byte	7
36515                                           ! 7404                           0,
36516 8F13                        00            .byte	0
36517                                           ! 7405                           64,
36518 8F14                      0040            .word	$40
36519                                           ! 7406                    64,
36520 8F16                      0040            .word	$40
36521                                           ! 7407                        0xA000,
36522 8F18                      A000            .word	$A000
36523                                           ! 7408                        0x0000,
36524 8F1A                      0000            .word	0
36525                                           ! 7409                       0,
36526 8F1C                      0000            .word	0
36527 8F1E                      0000            .word	0
36528                                           ! 7410                             960,
36529 8F20                      03C0            .word	$3C0
36530                                           ! 7411                        480,
36531 8F22                      01E0            .word	$1E0
36532                                           ! 7412                        800,
36533 8F24                      0320            .word	$320
36534                                           ! 7413                      8,
36535 8F26                        08            .byte	8
36536                                           ! 7414                      16,
36537 8F27                        10            .byte	$10
36538                                           ! 7415                           1,
36539 8F28                        01            .byte	1
36540                                           ! 7416                         16,
36541 8F29                        10            .byte	$10
36542                                           ! 7417                          12,
36543 8F2A                        0C            .byte	$C
36544                                           ! 7418                        0x06,
36545 8F2B                        06            .byte	6
36546                                           ! 7419                     0,
36547 8F2C                        00            .byte	0
36548                                           ! 7420                               20,
36549 8F2D                        14            .byte	$14
36550                                           ! 7421                          0,
36551 8F2E                        00            .byte	0
36552                                           ! 7422                        5,
36553 8F2F                        05            .byte	5
36554                                           ! 7423                             11,
36555 8F30                        0B            .byte	$B
36556                                           ! 7424                          6,
36557 8F31                        06            .byte	6
36558                                           ! 7425                               5,
36559 8F32                        05            .byte	5
36560                                           ! 7426                         5,
36561 8F33                        05            .byte	5
36562                                           ! 7427                              0,
36563 8F34                        00            .byte	0
36564                                           ! 7428                         0,
36565 8F35                        00            .byte	0
36566                                           ! 7429                              0,
36567 8F36                        00            .byte	0
36568                                           ! 7430                                0,
36569 8F37                        00            .byte	0
36570                                           ! 7431                        0xE0000000,
36571 8F38                      0000            .word	0
36572 8F3A                      E000            .word	$E000
36573                                           ! 7432                               0,
36574 8F3C                      0000            .word	0
36575 8F3E                      0000            .word	0
36576                                           ! 7433                             0,
36577 8F40                      0000            .word	0
36578                                           ! 7434                                960,
36579 8F42                      03C0            .word	$3C0
36580                                           ! 7435                             0,
36581 8F44                        00            .byte	0
36582                                           ! 7436              
36583                                           ! 7436                0,
36584 8F45                        00            .byte	0
36585                                           ! 7437                           5,
36586 8F46                        05            .byte	5
36587                                           ! 7438                                11,
36588 8F47                        0B            .byte	$B
36589                                           ! 7439                             6,
36590 8F48                        06            .byte	6
36591                                           ! 7440                                  5,
36592 8F49                        05            .byte	5
36593                                           ! 7441                            5,
36594 8F4A                        05            .byte	5
36595                                           ! 7442                                 0,
36596 8F4B                        00            .byte	0
36597                                           ! 7443                            0,
36598 8F4C                        00            .byte	0
36599                                           ! 7444                                 0,
36600 8F4D                        00            .byte	0
36601                                           ! 7445                          0,
36602 8F4E                      0000            .word	0
36603 8F50                      0000            .word	0
36604                                           ! 7446 } },
36605                                           ! 7447 { 0x0191,
36606 8F52                      0191            .word	$191
36607                                           ! 7448 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36608 8F54                      009B            .word	$9B
36609                                           ! 7449                           0x01 | 0x02 | 0x04,
36610 8F56                        07            .byte	7
36611                                           ! 7450                           0,
36612 8F57                        00            .byte	0
36613                                           ! 7451                           64,
36614 8F58                      0040            .word	$40
36615                                           ! 7452                    64,
36616 8F5A                      0040            .word	$40
36617                                           ! 7453                        0xA000,
36618 8F5C                      A000            .word	$A000
36619                                           ! 7454                        0x0000,
36620 8F5E                      0000            .word	0
36621                                           ! 7455                       0,
36622 8F60                      0000            .word	0
36623 8F62                      0000            .word	0
36624                                           ! 7456                             1440,
36625 8F64                      05A0            .word	$5A0
36626                                           ! 7457                        480,
36627 8F66                      01E0            .word	$1E0
36628                                           ! 7458                        800,
36629 8F68                      0320            .word	$320
36630                                           ! 7459                      8,
36631 8F6A                        08            .byte	8
36632                                           ! 7460                      16,
36633 8F6B                        10            .byte	$10
36634                                           ! 7461                           1,
36635 8F6C                        01            .byte	1
36636                                           ! 7462                         24,
36637 8F6D                        18            .byte	$18
36638                                           ! 7463                          18,
36639 8F6E                        12            .byte	$12
36640                                           ! 7464                        0x06,
36641 8F6F                        06            .byte	6
36642                                           ! 7465                     0,
36643 8F70                        00            .byte	0
36644                                           ! 7466                               13,
36645 8F71                        0D            .byte	$D
36646                                           ! 7467                          0,
36647 8F72                        00            .byte	0
36648                                           ! 7468                        8,
36649 8F73                        08            .byte	8
36650                                           ! 7469                             16,
36651 8F74                        10            .byte	$10
36652                                           ! 7470                          8,
36653 8F75                        08            .byte	8
36654                                           ! 7471                               8,
36655 8F76                        08            .byte	8
36656                                           ! 7472                         8,
36657 8F77                        08            .byte	8
36658                                           ! 7473                              0,
36659 8F78                        00            .byte	0
36660                                           ! 7474                         0,
36661 8F79                        00            .byte	0
36662                                           ! 7475                              0,
36663 8F7A                        00            .byte	0
36664                                           ! 7476                                0,
36665 8F7B                        00            .byte	0
36666                                           ! 7477                        0xE0000000,
36667 8F7C                      0000            .word	0
36668 8F7E                      E000            .word	$E000
36669                                           ! 7478                               0,
36670 8F80                      0000            .word	0
36671 8F82                      0000            .word	0
36672                                           ! 7479                             0,
36673 8F84                      0000            .word	0
36674                                           ! 7480                                1440,
36675 8F86                      05A0            .word	$5A0
36676                                           ! 7481                             0,
36677 8F88                        00            .byte	0
36678                                           ! 7482                             0,
36679 8F89                        00            .byte	0
36680                                           ! 7483                           8,
36681 8F8A                        08            .byte	8
36682                                           ! 7484                                16,
36683 8F8B                        10            .byte	$10
36684                                           ! 7485                             8,
36685 8F8C                        08            .byte	8
36686                                           ! 7486                                  8,
36687 8F8D                        08            .byte	8
36688                                           ! 7487                            8,
36689 8F8E                        08            .byte	8
36690                                           ! 7488                                 0,
36691 8F8F                        00            .byte	0
36692                                           ! 7489                            0,
36693 8F90                        00            .byte	0
36694                                           ! 7490                                 0,
36695 8F91                        00            .byte	0
36696                                           ! 7491                          0,
36697 8F92                      0000            .word	0
36698 8F94                      0000            .word	0
36699                                           ! 7492 } },
36700                                           ! 7493 { 0x0192,
36701 8F96                      0192            .word	$192
36702                                           ! 7494 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36703 8F98                      009B            .word	$9B
36704                                           ! 7495                           0x01 | 0x02 | 0x04,
36705 8F9A                        07            .byte	7
36706                                           ! 7496                           0,
36707 8F9B                        00            .byte	0
36708                                           ! 7497                           64,
36709 8F9C                      0040            .word	$40
36710                                           ! 7498                    64,
36711 8F9E                      0040            .word	$40
36712                                           ! 7499                        0xA000,
36713 8FA0                      A000            .word	$A000
36714                                           ! 7500                        0x0000,
36715 8FA2                      0000            .word	0
36716                                           ! 7501                       0,
36717 8FA4                      0000            .word	0
36718 8FA6                      0000            .word	0
36719                                           ! 7502                             1920,
36720 8FA8                      0780            .word	$780
36721                                           ! 7503                        480,
36722 8FAA                      01E0            .word	$1E0
36723                                           ! 7504                        800,
36724 8FAC                      0320            .word	$320
36725                                           ! 7505   
36726                                           ! 7505                    8,
36727 8FAE                        08            .byte	8
36728                                           ! 7506                      16,
36729 8FAF                        10            .byte	$10
36730                                           ! 7507                           1,
36731 8FB0                        01            .byte	1
36732                                           ! 7508                         32,
36733 8FB1                        20            .byte	$20
36734                                           ! 7509                          24,
36735 8FB2                        18            .byte	$18
36736                                           ! 7510                        0x06,
36737 8FB3                        06            .byte	6
36738                                           ! 7511                     0,
36739 8FB4                        00            .byte	0
36740                                           ! 7512                               9,
36741 8FB5                        09            .byte	9
36742                                           ! 7513                          0,
36743 8FB6                        00            .byte	0
36744                                           ! 7514                        8,
36745 8FB7                        08            .byte	8
36746                                           ! 7515                             16,
36747 8FB8                        10            .byte	$10
36748                                           ! 7516                          8,
36749 8FB9                        08            .byte	8
36750                                           ! 7517                               8,
36751 8FBA                        08            .byte	8
36752                                           ! 7518                         8,
36753 8FBB                        08            .byte	8
36754                                           ! 7519                              0,
36755 8FBC                        00            .byte	0
36756                                           ! 7520                         8,
36757 8FBD                        08            .byte	8
36758                                           ! 7521                              24,
36759 8FBE                        18            .byte	$18
36760                                           ! 7522                                0x02,
36761 8FBF                        02            .byte	2
36762                                           ! 7523                        0xE0000000,
36763 8FC0                      0000            .word	0
36764 8FC2                      E000            .word	$E000
36765                                           ! 7524                               0,
36766 8FC4                      0000            .word	0
36767 8FC6                      0000            .word	0
36768                                           ! 7525                             0,
36769 8FC8                      0000            .word	0
36770                                           ! 7526                                1920,
36771 8FCA                      0780            .word	$780
36772                                           ! 7527                             0,
36773 8FCC                        00            .byte	0
36774                                           ! 7528                             0,
36775 8FCD                        00            .byte	0
36776                                           ! 7529                           8,
36777 8FCE                        08            .byte	8
36778                                           ! 7530                                16,
36779 8FCF                        10            .byte	$10
36780                                           ! 7531                             8,
36781 8FD0                        08            .byte	8
36782                                           ! 7532                                  8,
36783 8FD1                        08            .byte	8
36784                                           ! 7533                            8,
36785 8FD2                        08            .byte	8
36786                                           ! 7534                                 0,
36787 8FD3                        00            .byte	0
36788                                           ! 7535                            8,
36789 8FD4                        08            .byte	8
36790                                           ! 7536                                 24,
36791 8FD5                        18            .byte	$18
36792                                           ! 7537                          0,
36793 8FD6                      0000            .word	0
36794 8FD8                      0000            .word	0
36795                                           ! 7538 } },
36796                                           ! 7539 { 0x0193,
36797 8FDA                      0193            .word	$193
36798                                           ! 7540 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36799 8FDC                      009B            .word	$9B
36800                                           ! 7541                           0x01 | 0x02 | 0x04,
36801 8FDE                        07            .byte	7
36802                                           ! 7542                           0,
36803 8FDF                        00            .byte	0
36804                                           ! 7543                           64,
36805 8FE0                      0040            .word	$40
36806                                           ! 7544                    64,
36807 8FE2                      0040            .word	$40
36808                                           ! 7545                        0xA000,
36809 8FE4                      A000            .word	$A000
36810                                           ! 7546                        0x0000,
36811 8FE6                      0000            .word	0
36812                                           ! 7547                       0,
36813 8FE8                      0000            .word	0
36814 8FEA                      0000            .word	0
36815                                           ! 7548                             960,
36816 8FEC                      03C0            .word	$3C0
36817                                           ! 7549                        480,
36818 8FEE                      01E0            .word	$1E0
36819                                           ! 7550                        854,
36820 8FF0                      0356            .word	$356
36821                                           ! 7551                      8,
36822 8FF2                        08            .byte	8
36823                                           ! 7552                      16,
36824 8FF3                        10            .byte	$10
36825                                           ! 7553                           1,
36826 8FF4                        01            .byte	1
36827                                           ! 7554                         16,
36828 8FF5                        10            .byte	$10
36829                                           ! 7555                          13,
36830 8FF6                        0D            .byte	$D
36831                                           ! 7556                        0x06,
36832 8FF7                        06            .byte	6
36833                                           ! 7557                     0,
36834 8FF8                        00            .byte	0
36835                                           ! 7558                               19,
36836 8FF9                        13            .byte	$13
36837                                           ! 7559                          0,
36838 8FFA                        00            .byte	0
36839                                           ! 7560                        5,
36840 8FFB                        05            .byte	5
36841                                           ! 7561                             11,
36842 8FFC                        0B            .byte	$B
36843                                           ! 7562                          6,
36844 8FFD                        06            .byte	6
36845                                           ! 7563                               5,
36846 8FFE                        05            .byte	5
36847                                           ! 7564                         5,
36848 8FFF                        05            .byte	5
36849                                           ! 7565                              0,
36850 9000                        00            .byte	0
36851                                           ! 7566                         0,
36852 9001                        00            .byte	0
36853                                           ! 7567                              0,
36854 9002                        00            .byte	0
36855                                           ! 7568                                0,
36856 9003                        00            .byte	0
36857                                           ! 7569                        0xE0000000,
36858 9004                      0000            .word	0
36859 9006                      E000            .word	$E000
36860                                           ! 7570                               0,
36861 9008                      0000            .word	0
36862 900A                      0000            .word	0
36863                                           ! 7571                             0,
36864 900C                      0000            .word	0
36865                                           ! 7572                                960,
36866 900E                      03C0            .word	$3C0
36867                                           ! 7573                    
36868                                           ! 7573          0,
36869 9010                        00            .byte	0
36870                                           ! 7574                             0,
36871 9011                        00            .byte	0
36872                                           ! 7575                           5,
36873 9012                        05            .byte	5
36874                                           ! 7576                                11,
36875 9013                        0B            .byte	$B
36876                                           ! 7577                             6,
36877 9014                        06            .byte	6
36878                                           ! 7578                                  5,
36879 9015                        05            .byte	5
36880                                           ! 7579                            5,
36881 9016                        05            .byte	5
36882                                           ! 7580                                 0,
36883 9017                        00            .byte	0
36884                                           ! 7581                            0,
36885 9018                        00            .byte	0
36886                                           ! 7582                                 0,
36887 9019                        00            .byte	0
36888                                           ! 7583                          0,
36889 901A                      0000            .word	0
36890 901C                      0000            .word	0
36891                                           ! 7584 } },
36892                                           ! 7585 { 0x0194,
36893 901E                      0194            .word	$194
36894                                           ! 7586 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36895 9020                      009B            .word	$9B
36896                                           ! 7587                           0x01 | 0x02 | 0x04,
36897 9022                        07            .byte	7
36898                                           ! 7588                           0,
36899 9023                        00            .byte	0
36900                                           ! 7589                           64,
36901 9024                      0040            .word	$40
36902                                           ! 7590                    64,
36903 9026                      0040            .word	$40
36904                                           ! 7591                        0xA000,
36905 9028                      A000            .word	$A000
36906                                           ! 7592                        0x0000,
36907 902A                      0000            .word	0
36908                                           ! 7593                       0,
36909 902C                      0000            .word	0
36910 902E                      0000            .word	0
36911                                           ! 7594                             1440,
36912 9030                      05A0            .word	$5A0
36913                                           ! 7595                        480,
36914 9032                      01E0            .word	$1E0
36915                                           ! 7596                        854,
36916 9034                      0356            .word	$356
36917                                           ! 7597                      8,
36918 9036                        08            .byte	8
36919                                           ! 7598                      16,
36920 9037                        10            .byte	$10
36921                                           ! 7599                           1,
36922 9038                        01            .byte	1
36923                                           ! 7600                         24,
36924 9039                        18            .byte	$18
36925                                           ! 7601                          19,
36926 903A                        13            .byte	$13
36927                                           ! 7602                        0x06,
36928 903B                        06            .byte	6
36929                                           ! 7603                     0,
36930 903C                        00            .byte	0
36931                                           ! 7604                               12,
36932 903D                        0C            .byte	$C
36933                                           ! 7605                          0,
36934 903E                        00            .byte	0
36935                                           ! 7606                        8,
36936 903F                        08            .byte	8
36937                                           ! 7607                             16,
36938 9040                        10            .byte	$10
36939                                           ! 7608                          8,
36940 9041                        08            .byte	8
36941                                           ! 7609                               8,
36942 9042                        08            .byte	8
36943                                           ! 7610                         8,
36944 9043                        08            .byte	8
36945                                           ! 7611                              0,
36946 9044                        00            .byte	0
36947                                           ! 7612                         0,
36948 9045                        00            .byte	0
36949                                           ! 7613                              0,
36950 9046                        00            .byte	0
36951                                           ! 7614                                0,
36952 9047                        00            .byte	0
36953                                           ! 7615                        0xE0000000,
36954 9048                      0000            .word	0
36955 904A                      E000            .word	$E000
36956                                           ! 7616                               0,
36957 904C                      0000            .word	0
36958 904E                      0000            .word	0
36959                                           ! 7617                             0,
36960 9050                      0000            .word	0
36961                                           ! 7618                                1440,
36962 9052                      05A0            .word	$5A0
36963                                           ! 7619                             0,
36964 9054                        00            .byte	0
36965                                           ! 7620                             0,
36966 9055                        00            .byte	0
36967                                           ! 7621                           8,
36968 9056                        08            .byte	8
36969                                           ! 7622                                16,
36970 9057                        10            .byte	$10
36971                                           ! 7623                             8,
36972 9058                        08            .byte	8
36973                                           ! 7624                                  8,
36974 9059                        08            .byte	8
36975                                           ! 7625                            8,
36976 905A                        08            .byte	8
36977                                           ! 7626                                 0,
36978 905B                        00            .byte	0
36979                                           ! 7627                            0,
36980 905C                        00            .byte	0
36981                                           ! 7628                                 0,
36982 905D                        00            .byte	0
36983                                           ! 7629                          0,
36984 905E                      0000            .word	0
36985 9060                      0000            .word	0
36986                                           ! 7630 } },
36987                                           ! 7631 { 0x0195,
36988 9062                      0195            .word	$195
36989                                           ! 7632 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36990 9064                      009B            .word	$9B
36991                                           ! 7633                           0x01 | 0x02 | 0x04,
36992 9066                        07            .byte	7
36993                                           ! 7634                           0,
36994 9067                        00            .byte	0
36995                                           ! 7635                           64,
36996 9068                      0040            .word	$40
36997                                           ! 7636                    64,
36998 906A                      0040            .word	$40
36999                                           ! 7637                        0xA000,
37000 906C                      A000            .word	$A000
37001                                           ! 7638                        0x0000,
37002 906E                      0000            .word	0
37003                                           ! 7639                       0,
37004 9070                      0000            .word	0
37005 9072                      0000            .word	0
37006                                           ! 7640                             1920,
37007 9074                      0780            .word	$780
37008                                           ! 7641                        480,
37009 9076                      01E0            .word	$1E0
37010                                           ! 7642      
37011                                           ! 7642                   854,
37012 9078                      0356            .word	$356
37013                                           ! 7643                      8,
37014 907A                        08            .byte	8
37015                                           ! 7644                      16,
37016 907B                        10            .byte	$10
37017                                           ! 7645                           1,
37018 907C                        01            .byte	1
37019                                           ! 7646                         32,
37020 907D                        20            .byte	$20
37021                                           ! 7647                          26,
37022 907E                        1A            .byte	$1A
37023                                           ! 7648                        0x06,
37024 907F                        06            .byte	6
37025                                           ! 7649                     0,
37026 9080                        00            .byte	0
37027                                           ! 7650                               9,
37028 9081                        09            .byte	9
37029                                           ! 7651                          0,
37030 9082                        00            .byte	0
37031                                           ! 7652                        8,
37032 9083                        08            .byte	8
37033                                           ! 7653                             16,
37034 9084                        10            .byte	$10
37035                                           ! 7654                          8,
37036 9085                        08            .byte	8
37037                                           ! 7655                               8,
37038 9086                        08            .byte	8
37039                                           ! 7656                         8,
37040 9087                        08            .byte	8
37041                                           ! 7657                              0,
37042 9088                        00            .byte	0
37043                                           ! 7658                         8,
37044 9089                        08            .byte	8
37045                                           ! 7659                              24,
37046 908A                        18            .byte	$18
37047                                           ! 7660                                0x02,
37048 908B                        02            .byte	2
37049                                           ! 7661                        0xE0000000,
37050 908C                      0000            .word	0
37051 908E                      E000            .word	$E000
37052                                           ! 7662                               0,
37053 9090                      0000            .word	0
37054 9092                      0000            .word	0
37055                                           ! 7663                             0,
37056 9094                      0000            .word	0
37057                                           ! 7664                                1920,
37058 9096                      0780            .word	$780
37059                                           ! 7665                             0,
37060 9098                        00            .byte	0
37061                                           ! 7666                             0,
37062 9099                        00            .byte	0
37063                                           ! 7667                           8,
37064 909A                        08            .byte	8
37065                                           ! 7668                                16,
37066 909B                        10            .byte	$10
37067                                           ! 7669                             8,
37068 909C                        08            .byte	8
37069                                           ! 7670                                  8,
37070 909D                        08            .byte	8
37071                                           ! 7671                            8,
37072 909E                        08            .byte	8
37073                                           ! 7672                                 0,
37074 909F                        00            .byte	0
37075                                           ! 7673                            8,
37076 90A0                        08            .byte	8
37077                                           ! 7674                                 24,
37078 90A1                        18            .byte	$18
37079                                           ! 7675                          0,
37080 90A2                      0000            .word	0
37081 90A4                      0000            .word	0
37082                                           ! 7676 } },
37083                                           ! 7677 { 0x0196,
37084 90A6                      0196            .word	$196
37085                                           ! 7678 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37086 90A8                      009B            .word	$9B
37087                                           ! 7679                           0x01 | 0x02 | 0x04,
37088 90AA                        07            .byte	7
37089                                           ! 7680                           0,
37090 90AB                        00            .byte	0
37091                                           ! 7681                           64,
37092 90AC                      0040            .word	$40
37093                                           ! 7682                    64,
37094 90AE                      0040            .word	$40
37095                                           ! 7683                        0xA000,
37096 90B0                      A000            .word	$A000
37097                                           ! 7684                        0x0000,
37098 90B2                      0000            .word	0
37099                                           ! 7685                       0,
37100 90B4                      0000            .word	0
37101 90B6                      0000            .word	0
37102                                           ! 7686                             1280,
37103 90B8                      0500            .word	$500
37104                                           ! 7687                        640,
37105 90BA                      0280            .word	$280
37106                                           ! 7688                        960,
37107 90BC                      03C0            .word	$3C0
37108                                           ! 7689                      8,
37109 90BE                        08            .byte	8
37110                                           ! 7690                      16,
37111 90BF                        10            .byte	$10
37112                                           ! 7691                           1,
37113 90C0                        01            .byte	1
37114                                           ! 7692                         16,
37115 90C1                        10            .byte	$10
37116                                           ! 7693                          19,
37117 90C2                        13            .byte	$13
37118                                           ! 7694                        0x06,
37119 90C3                        06            .byte	6
37120                                           ! 7695                     0,
37121 90C4                        00            .byte	0
37122                                           ! 7696                               12,
37123 90C5                        0C            .byte	$C
37124                                           ! 7697                          0,
37125 90C6                        00            .byte	0
37126                                           ! 7698                        5,
37127 90C7                        05            .byte	5
37128                                           ! 7699                             11,
37129 90C8                        0B            .byte	$B
37130                                           ! 7700                          6,
37131 90C9                        06            .byte	6
37132                                           ! 7701                               5,
37133 90CA                        05            .byte	5
37134                                           ! 7702                         5,
37135 90CB                        05            .byte	5
37136                                           ! 7703                              0,
37137 90CC                        00            .byte	0
37138                                           ! 7704                         0,
37139 90CD                        00            .byte	0
37140                                           ! 7705                              0,
37141 90CE                        00            .byte	0
37142                                           ! 7706                                0,
37143 90CF                        00            .byte	0
37144                                           ! 7707                        0xE0000000,
37145 90D0                      0000            .word	0
37146 90D2                      E000            .word	$E000
37147                                           ! 7708                               0,
37148 90D4                      0000            .word	0
37149 90D6                      0000            .word	0
37150                                           ! 7709                             0,
37151 90D8                      0000            .word	0
37152                                           ! 7710                              
37153                                           ! 7710   1280,
37154 90DA                      0500            .word	$500
37155                                           ! 7711                             0,
37156 90DC                        00            .byte	0
37157                                           ! 7712                             0,
37158 90DD                        00            .byte	0
37159                                           ! 7713                           5,
37160 90DE                        05            .byte	5
37161                                           ! 7714                                11,
37162 90DF                        0B            .byte	$B
37163                                           ! 7715                             6,
37164 90E0                        06            .byte	6
37165                                           ! 7716                                  5,
37166 90E1                        05            .byte	5
37167                                           ! 7717                            5,
37168 90E2                        05            .byte	5
37169                                           ! 7718                                 0,
37170 90E3                        00            .byte	0
37171                                           ! 7719                            0,
37172 90E4                        00            .byte	0
37173                                           ! 7720                                 0,
37174 90E5                        00            .byte	0
37175                                           ! 7721                          0,
37176 90E6                      0000            .word	0
37177 90E8                      0000            .word	0
37178                                           ! 7722 } },
37179                                           ! 7723 { 0x0197,
37180 90EA                      0197            .word	$197
37181                                           ! 7724 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37182 90EC                      009B            .word	$9B
37183                                           ! 7725                           0x01 | 0x02 | 0x04,
37184 90EE                        07            .byte	7
37185                                           ! 7726                           0,
37186 90EF                        00            .byte	0
37187                                           ! 7727                           64,
37188 90F0                      0040            .word	$40
37189                                           ! 7728                    64,
37190 90F2                      0040            .word	$40
37191                                           ! 7729                        0xA000,
37192 90F4                      A000            .word	$A000
37193                                           ! 7730                        0x0000,
37194 90F6                      0000            .word	0
37195                                           ! 7731                       0,
37196 90F8                      0000            .word	0
37197 90FA                      0000            .word	0
37198                                           ! 7732                             1920,
37199 90FC                      0780            .word	$780
37200                                           ! 7733                        640,
37201 90FE                      0280            .word	$280
37202                                           ! 7734                        960,
37203 9100                      03C0            .word	$3C0
37204                                           ! 7735                      8,
37205 9102                        08            .byte	8
37206                                           ! 7736                      16,
37207 9103                        10            .byte	$10
37208                                           ! 7737                           1,
37209 9104                        01            .byte	1
37210                                           ! 7738                         24,
37211 9105                        18            .byte	$18
37212                                           ! 7739                          29,
37213 9106                        1D            .byte	$1D
37214                                           ! 7740                        0x06,
37215 9107                        06            .byte	6
37216                                           ! 7741                     0,
37217 9108                        00            .byte	0
37218                                           ! 7742                               8,
37219 9109                        08            .byte	8
37220                                           ! 7743                          0,
37221 910A                        00            .byte	0
37222                                           ! 7744                        8,
37223 910B                        08            .byte	8
37224                                           ! 7745                             16,
37225 910C                        10            .byte	$10
37226                                           ! 7746                          8,
37227 910D                        08            .byte	8
37228                                           ! 7747                               8,
37229 910E                        08            .byte	8
37230                                           ! 7748                         8,
37231 910F                        08            .byte	8
37232                                           ! 7749                              0,
37233 9110                        00            .byte	0
37234                                           ! 7750                         0,
37235 9111                        00            .byte	0
37236                                           ! 7751                              0,
37237 9112                        00            .byte	0
37238                                           ! 7752                                0,
37239 9113                        00            .byte	0
37240                                           ! 7753                        0xE0000000,
37241 9114                      0000            .word	0
37242 9116                      E000            .word	$E000
37243                                           ! 7754                               0,
37244 9118                      0000            .word	0
37245 911A                      0000            .word	0
37246                                           ! 7755                             0,
37247 911C                      0000            .word	0
37248                                           ! 7756                                1920,
37249 911E                      0780            .word	$780
37250                                           ! 7757                             0,
37251 9120                        00            .byte	0
37252                                           ! 7758                             0,
37253 9121                        00            .byte	0
37254                                           ! 7759                           8,
37255 9122                        08            .byte	8
37256                                           ! 7760                                16,
37257 9123                        10            .byte	$10
37258                                           ! 7761                             8,
37259 9124                        08            .byte	8
37260                                           ! 7762                                  8,
37261 9125                        08            .byte	8
37262                                           ! 7763                            8,
37263 9126                        08            .byte	8
37264                                           ! 7764                                 0,
37265 9127                        00            .byte	0
37266                                           ! 7765                            0,
37267 9128                        00            .byte	0
37268                                           ! 7766                                 0,
37269 9129                        00            .byte	0
37270                                           ! 7767                          0,
37271 912A                      0000            .word	0
37272 912C                      0000            .word	0
37273                                           ! 7768 } },
37274                                           ! 7769 { 0x0198,
37275 912E                      0198            .word	$198
37276                                           ! 7770 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37277 9130                      009B            .word	$9B
37278                                           ! 7771                           0x01 | 0x02 | 0x04,
37279 9132                        07            .byte	7
37280                                           ! 7772                           0,
37281 9133                        00            .byte	0
37282                                           ! 7773                           64,
37283 9134                      0040            .word	$40
37284                                           ! 7774                    64,
37285 9136                      0040            .word	$40
37286                                           ! 7775                        0xA000,
37287 9138                      A000            .word	$A000
37288                                           ! 7776                        0x0000,
37289 913A                      0000            .word	0
37290                                           ! 7777                       0,
37291 913C                      0000            .word	0
37292 913E                      0000            .word	0
37293                                           ! 7778                             2560,
37294 9140                      0A00            .word	$A00
37295                                           ! 7779        
37296                                           ! 7779                 640,
37297 9142                      0280            .word	$280
37298                                           ! 7780                        960,
37299 9144                      03C0            .word	$3C0
37300                                           ! 7781                      8,
37301 9146                        08            .byte	8
37302                                           ! 7782                      16,
37303 9147                        10            .byte	$10
37304                                           ! 7783                           1,
37305 9148                        01            .byte	1
37306                                           ! 7784                         32,
37307 9149                        20            .byte	$20
37308                                           ! 7785                          38,
37309 914A                        26            .byte	$26
37310                                           ! 7786                        0x06,
37311 914B                        06            .byte	6
37312                                           ! 7787                     0,
37313 914C                        00            .byte	0
37314                                           ! 7788                               5,
37315 914D                        05            .byte	5
37316                                           ! 7789                          0,
37317 914E                        00            .byte	0
37318                                           ! 7790                        8,
37319 914F                        08            .byte	8
37320                                           ! 7791                             16,
37321 9150                        10            .byte	$10
37322                                           ! 7792                          8,
37323 9151                        08            .byte	8
37324                                           ! 7793                               8,
37325 9152                        08            .byte	8
37326                                           ! 7794                         8,
37327 9153                        08            .byte	8
37328                                           ! 7795                              0,
37329 9154                        00            .byte	0
37330                                           ! 7796                         8,
37331 9155                        08            .byte	8
37332                                           ! 7797                              24,
37333 9156                        18            .byte	$18
37334                                           ! 7798                                0x02,
37335 9157                        02            .byte	2
37336                                           ! 7799                        0xE0000000,
37337 9158                      0000            .word	0
37338 915A                      E000            .word	$E000
37339                                           ! 7800                               0,
37340 915C                      0000            .word	0
37341 915E                      0000            .word	0
37342                                           ! 7801                             0,
37343 9160                      0000            .word	0
37344                                           ! 7802                                2560,
37345 9162                      0A00            .word	$A00
37346                                           ! 7803                             0,
37347 9164                        00            .byte	0
37348                                           ! 7804                             0,
37349 9165                        00            .byte	0
37350                                           ! 7805                           8,
37351 9166                        08            .byte	8
37352                                           ! 7806                                16,
37353 9167                        10            .byte	$10
37354                                           ! 7807                             8,
37355 9168                        08            .byte	8
37356                                           ! 7808                                  8,
37357 9169                        08            .byte	8
37358                                           ! 7809                            8,
37359 916A                        08            .byte	8
37360                                           ! 7810                                 0,
37361 916B                        00            .byte	0
37362                                           ! 7811                            8,
37363 916C                        08            .byte	8
37364                                           ! 7812                                 24,
37365 916D                        18            .byte	$18
37366                                           ! 7813                          0,
37367 916E                      0000            .word	0
37368 9170                      0000            .word	0
37369                                           ! 7814 } },
37370                                           ! 7815 { 0xFFFF,
37371 9172                      FFFF            .word	$FFFF
37372                                           ! 7816 { 0,
37373 9174                      0000            .word	0
37374                                           ! 7817 } },
37375 9176                  00000040            .blkb	$40
37376                                           ! 7818 };
37377                                           !BCC_EOS
37378                                           ! 7819 extern char vbebios_copyright;
37379                                           !BCC_EOS
37380                                           ! 7820 extern char vbebios_vendor_name;
37381                                           !BCC_EOS
37382                                           ! 7821 extern char vbebios_product_name;
37383                                           !BCC_EOS
37384                                           ! 7822 extern char vbebios_product_revision;
37385                                           !BCC_EOS
37386                                           ! 7823 #asm
37387                                           !BCC_ASM
37388                       000091B6            _vbebios_copyright:
37389 91B6                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
37390 91FB                        00            .byte 0x00
37391                       000091FC            _vbebios_vendor_name:
37392 91FC                        42            .ascii "Bochs/Plex86 Developers"
37393 9213                        00            .byte 0x00
37394                       00009214            _vbebios_product_name:
37395 9214                        42            .ascii "Bochs/Plex86 VBE Adapter"
37396 922C                        00            .byte 0x00
37397                       0000922D            _vbebios_product_revision:
37398 922D                        24            .ascii "$Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
37399 9261                        00            .byte 0x00
37400                       00009262            _vbebios_info_string:
37401 9262                        42            .ascii "Bochs VBE Display Adapter enabled"
37402 9283                        0A            .byte 0x0a,0x0d
37403 9285                        0A            .byte 0x0a,0x0d
37404 9287                        00            .byte 0x00
37405                       00009288            _no_vbebios_info_string:
37406 9288                        4E            .ascii "NO Bochs VBE Support available!"
37407 92A7                        0A            .byte 0x0a,0x0d
37408 92A9                        0A            .byte 0x0a,0x0d
37409 92AB                        00            .byte 0x00
37410                       000092AC            msg_vbe_init:
37411 92AC                        56            .ascii "VBE Bios $Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
37412 92E9                        0A            .byte 0x0a,0x0d, 0x00
37413 92EC                  00000002              .align 2
37414                       000092EC            vesa_pm_start:
37415 92EC                      0014              dw vesa_pm_set_window - vesa_pm_start
37416 92EE                      004B              dw vesa_pm_set_display_start - vesa_pm_start
37417 92F0                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
37418 92F2                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
37419                       000092F4            vesa_pm_io_ports_table:
37420 92F4                      01CE              dw 0x01CE
37421 92F6                      01CF              dw 0x01CE + 1
37422 92F8                      01CF              dw 0x01CF
37423 92FA                      01D0              dw 0x01CF + 1
37424 92FC                      FFFF              dw 0xffff
37425 92FE                      FFFF              dw 0xffff
37426                                             USE32
37427                       00009300            vesa_pm_set_window:
37428 9300     66    83FB                   00    cmp bx, #0x00
37429 9304           74           05              je vesa_pm_set_display_window1
37430 9306     66    B8                   0100    mov ax, #0x0100
37431 930A           C3                           ret
37432                       0000930B            vesa_pm_set_display_window1:
37433 930B     66    89D0                         mov ax, dx
37434 930E     66    52                           push dx
37435 9310     66    50                           push ax
37436 9312     66    BA                   01CE    mov dx, # 0x01CE
37437 9316     66    B8                   0005    mov ax, # 0x5
37438 931A     66    EF                           out dx, ax
37439 931C     66    58                           pop ax
37440 931E     66    BA                   01CF    mov dx, # 0x01CF
37441 9322     66    EF                           out dx, ax
37442 9324     66    ED                           in ax, dx
37443 9326     66    5A                           pop dx
37444 9328     66    39C2                         cmp dx, ax
37445 932B           75           05              jne illegal_window
37446 932D     66    B8                   004F    mov ax, #0x004f
37447 9331           C3                           ret
37448                       00009332            illegal_window:
37449 9332     66    B8                   014F    mov ax, #0x014f
37450 9336           C3                           ret
37451                       00009337            vesa_pm_set_display_start:
37452 9337           80FB                   80    cmp bl, #0x80
37453 933A           74           0A              je vesa_pm_set_display_start1
37454 933C           80FB                   00    cmp bl, #0x00
37455 933F           74           05              je vesa_pm_set_display_start1
37456 9341     66    B8                   0100    mov ax, #0x0100
37457 9345           C3                           ret
37458                       00009346            vesa_pm_set_display_start1:
37459                                           ; convert offset to (X, Y) coordinate
37460                                           ; (would be simpler to change Bochs 1 API...)
37461 9346           50                           push eax
37462 9347           51                           push ecx
37463 9348           52                           push edx
37464 9349           56                           push esi
37465 934A           57                           push edi
37466 934B           C1E2                   10    shl edx, #16
37467 934E           81E1             0000FFFF    and ecx, #0xffff
37468 9354           09D1                         or ecx, edx
37469 9356           C1E1                   02    shl ecx, #2
37470 9359           89C8                         mov eax, ecx
37471 935B           50                           push eax
37472 935C     66    BA                   01CE    mov dx, # 0x01CE
37473 9360     66    B8                   0006    mov ax, # 0x6
37474 9364     66    EF                           out dx, ax
37475 9366     66    BA                   01CF    mov dx, # 0x01CF
37476 936A     66    ED                           in ax, dx
37477 936C         0FB7C8                         movzx ecx, ax
37478 936F     66    BA                   01CE    mov dx, # 0x01CE
37479 9373     66    B8                   0003    mov ax, # 0x3
37480 9377     66    EF                           out dx, ax
37481 9379     66    BA                   01CF    mov dx, # 0x01CF
37482 937D     66    ED                           in ax, dx
37483 937F         0FB7F0                         movzx esi, ax
37484 9382           58                           pop eax
37485 9383           83FE                   04    cmp esi, #4
37486 9386           74           17              jz bpp4_mode
37487 9388           83C6                   07    add esi, #7
37488 938B           C1EE                   03    shr esi, #3
37489 938E         0FAFCE                         imul ecx, esi
37490 9391           31D2                         xor edx, edx
37491 9393           F7F1                         div ecx
37492 9395           89C7                         mov edi, eax
37493 9397           89D0                         mov eax, edx
37494 9399           31D2                         xor edx, edx
37495 939B           F7F6                         div esi
37496 939D           EB           0C              jmp set_xy_regs
37497                       0000939F            bpp4_mode:
37498 939F           D1E9                         shr ecx, #1
37499 93A1           31D2                         xor edx, edx
37500 93A3           F7F1                         div ecx
37501 93A5           89C7                         mov edi, eax
37502 93A7           89D0                         mov eax, edx
37503 93A9           D1E0                         shl eax, #1
37504                       000093AB            set_xy_regs:
37505 93AB     66    52                           push dx
37506 93AD     66    50                           push ax
37507 93AF     66    BA                   01CE    mov dx, # 0x01CE
37508 93B3     66    B8                   0008    mov ax, # 0x8
37509 93B7     66    EF                           out dx, ax
37510 93B9     66    58                           pop ax
37511 93BB     66    BA                   01CF    mov dx, # 0x01CF
37512 93BF     66    EF                           out dx, ax
37513 93C1     66    5A                           pop dx
37514 93C3     66    89F8                         mov ax, di
37515 93C6     66    52                           push dx
37516 93C8     66    50                           push ax
37517 93CA     66    BA                   01CE    mov dx, # 0x01CE
37518 93CE     66    B8                   0009    mov ax, # 0x9
37519 93D2     66    EF                           out dx, ax
37520 93D4     66    58                           pop ax
37521 93D6     66    BA                   01CF    mov dx, # 0x01CF
37522 93DA     66    EF                           out dx, ax
37523 93DC     66    5A                           pop dx
37524 93DE           5F                           pop edi
37525 93DF           5E                           pop esi
37526 93E0           5A                           pop edx
37527 93E1           59                           pop ecx
37528 93E2           58                           pop eax
37529 93E3     66    B8                   004F    mov ax, #0x004f
37530 93E7           C3                           ret
37531                       000093E8            vesa_pm_unimplemented:
37532 93E8     66    B8                   014F    mov ax, #0x014f
37533 93EC           C3                           ret
37534                                             USE16
37535                       000093ED            vesa_pm_end:
37536                                           ; DISPI ioport functions
37537                       000093ED            dispi_get_id:
37538 93ED           52                           push dx
37539 93EE           BA                   01CE    mov dx, # 0x01CE
37540 93F1           B8                   0000    mov ax, # 0x0
37541 93F4           EF                           out dx, ax
37542 93F5           BA                   01CF    mov dx, # 0x01CF
37543 93F8           ED                           in ax, dx
37544 93F9           5A                           pop dx
37545 93FA           C3                           ret
37546                       000093FB            dispi_set_id:
37547 93FB           52                           push dx
37548 93FC           50                           push ax
37549 93FD           BA                   01CE    mov dx, # 0x01CE
37550 9400           B8                   0000    mov ax, # 0x0
37551 9403           EF                           out dx, ax
37552 9404           58                           pop ax
37553 9405           BA                   01CF    mov dx, # 0x01CF
37554 9408           EF                           out dx, ax
37555 9409           5A                           pop dx
37556 940A           C3                           ret
37557                                           ! 7993 endasm
37558                                           !BCC_ENDASM
37559                                           ! 7994 static void dispi_set_xres(xres)
37560                                           ! 7995   Bit16u xres;
37561                                           
37562                       0000940B            _dispi_set_xres:
37563                                           !BCC_EOS
37564                                           ! 7996 {
37565                                           ! 7997 #asm
37566                                           !BCC_ASM
37567                       00000002            _dispi_set_xres.xres	set	2
37568 940B           55                           push bp
37569 940C           89E5                         mov bp, sp
37570 940E           50                           push ax
37571 940F           52                           push dx
37572 9410           BA                   01CE    mov dx, # 0x01CE
37573 9413           B8                   0001    mov ax, # 0x1
37574 9416           EF                           out dx, ax
37575 9417           BA                   01CF    mov dx, # 0x01CF
37576 941A           8B46         04              mov ax, 4[bp] ; xres
37577 941D           EF                           out dx, ax
37578 941E           5A                           pop dx
37579 941F           58                           pop ax
37580 9420           5D                           pop bp
37581                                           ! 8011 endasm
37582                                           !BCC_ENDASM
37583                                           ! 8012 }
37584 9421           C3                         ret
37585                                           ! 8013 static void dispi_set_yres(yres)
37586                                           ! 8014   Bit16u yres;
37587                       00009422            _dispi_set_yres:
37588                                           !BCC_EOS
37589                                           ! 8015 {
37590                                           ! 8016   outw(0x01CE,0x2);
37591 9422           55                         push	bp
37592 9423           89E5                       mov	bp,sp
37593                                           ! Debug: list int = const 2 (used reg = )
37594 9425           B8                   0002  mov	ax,*2
37595 9428           50                         push	ax
37596                                           ! Debug: list int = const $1CE (used reg = )
37597 9429           B8                   01CE  mov	ax,#$1CE
37598 942C           50                         push	ax
37599                                           ! Debug: func () void = outw+0 (used reg = )
37600 942D           E8         E834            call	_outw
37601 9430           89EC                       mov	sp,bp
37602                                           !BCC_EOS
37603                                           ! 8017   outw(0x01CF,yres);
37604                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
37605 9432           FF76         04            push	4[bp]
37606                                           ! Debug: list int = const $1CF (used reg = )
37607 9435           B8                   01CF  mov	ax,#$1CF
37608 9438           50                         push	ax
37609                                           ! Debug: func () void = outw+0 (used reg = )
37610 9439           E8         E828            call	_outw
37611 943C           89EC                       mov	sp,bp
37612                                           !BCC_EOS
37613                                           ! 8018 }
37614 943E           5D                         pop	bp
37615 943F           C3                         ret
37616                                           ! 8019 static void dispi_set_bpp(bpp)
37617                                           ! 8020   Bit16u bpp;
37618                       00009440            _dispi_set_bpp:
37619                                           !BCC_EOS
37620                                           ! 8021 {
37621                                           ! 8022   outw(0x01CE,0x3);
37622 9440           55                         push	bp
37623 9441           89E5                       mov	bp,sp
37624                                           ! Debug: list int = const 3 (used reg = )
37625 9443           B8                   0003  mov	ax,*3
37626 9446           50                         push	ax
37627                                           ! Debug: list int = const $1CE (used reg = )
37628 9447           B8                   01CE  mov	ax,#$1CE
37629 944A           50                         push	ax
37630                                           ! Debug: func () void = outw+0 (used reg = )
37631 944B           E8         E816            call	_outw
37632 944E           89EC                       mov	sp,bp
37633                                           !BCC_EOS
37634                                           ! 8023   outw(0x01CF,bpp);
37635                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
37636 9450           FF76         04            push	4[bp]
37637                                           ! Debug: list int = const $1CF (used reg = )
37638 9453           B8                   01CF  mov	ax,#$1CF
37639 9456           50                         push	ax
37640                                           ! Debug: func () void = outw+0 (used reg = )
37641 9457           E8         E80A            call	_outw
37642 945A           89EC                       mov	sp,bp
37643                                           !BCC_EOS
37644                                           ! 8024 }
37645 945C           5D                         pop	bp
37646 945D           C3                         ret
37647                                           ! 8025 #asm
37648                                           !BCC_ASM
37649                       00000002            _dispi_set_bpp.bpp	set	2
37650                                           ; AL = bits per pixel / AH = bytes per pixel
37651                       0000945E            dispi_get_bpp:
37652 945E           52                           push dx
37653 945F           BA                   01CE    mov dx, # 0x01CE
37654 9462           B8                   0003    mov ax, # 0x3
37655 9465           EF                           out dx, ax
37656 9466           BA                   01CF    mov dx, # 0x01CF
37657 9469           ED                           in ax, dx
37658 946A           88C4                         mov ah, al
37659 946C           C0EC                   03    shr ah, 3
37660 946F           A8                     07    test al, #0x07
37661 9471           74           02              jz get_bpp_noinc
37662 9473           FEC4                         inc ah
37663                       00009475            get_bpp_noinc:
37664 9475           5A                           pop dx
37665 9476           C3                           ret
37666                                           ; get display capabilities
37667                       00009477            _dispi_get_max_xres:
37668 9477           52                           push dx
37669 9478           53                           push bx
37670 9479           E8         004F              call dispi_get_enable
37671 947C           89C3                         mov bx, ax
37672 947E           0D                   0002    or ax, # 0x02
37673 9481           E8         0037              call _dispi_set_enable
37674 9484           BA                   01CE    mov dx, # 0x01CE
37675 9487           B8                   0001    mov ax, # 0x1
37676 948A           EF                           out dx, ax
37677 948B           BA                   01CF    mov dx, # 0x01CF
37678 948E           ED                           in ax, dx
37679 948F           50                           push ax
37680 9490           89D8                         mov ax, bx
37681 9492           E8         0026              call _dispi_set_enable
37682 9495           58                           pop ax
37683 9496           5B                           pop bx
37684 9497           5A                           pop dx
37685 9498           C3                           ret
37686                       00009499            _dispi_get_max_bpp:
37687 9499           52                           push dx
37688 949A           53                           push bx
37689 949B           E8         002D              call dispi_get_enable
37690 949E           89C3                         mov bx, ax
37691 94A0           0D                   0002    or ax, # 0x02
37692 94A3           E8         0015              call _dispi_set_enable
37693 94A6           BA                   01CE    mov dx, # 0x01CE
37694 94A9           B8                   0003    mov ax, # 0x3
37695 94AC           EF                           out dx, ax
37696 94AD           BA                   01CF    mov dx, # 0x01CF
37697 94B0           ED                           in ax, dx
37698 94B1           50                           push ax
37699 94B2           89D8                         mov ax, bx
37700 94B4           E8         0004              call _dispi_set_enable
37701 94B7           58                           pop ax
37702 94B8           5B                           pop bx
37703 94B9           5A                           pop dx
37704 94BA           C3                           ret
37705                       000094BB            _dispi_set_enable:
37706 94BB           52                           push dx
37707 94BC           50                           push ax
37708 94BD           BA                   01CE    mov dx, # 0x01CE
37709 94C0           B8                   0004    mov ax, # 0x4
37710 94C3           EF                           out dx, ax
37711 94C4           58                           pop ax
37712 94C5           BA                   01CF    mov dx, # 0x01CF
37713 94C8           EF                           out dx, ax
37714 94C9           5A                           pop dx
37715 94CA           C3                           ret
37716                       000094CB            dispi_get_enable:
37717 94CB           52                           push dx
37718 94CC           BA                   01CE    mov dx, # 0x01CE
37719 94CF           B8                   0004    mov ax, # 0x4
37720 94D2           EF                           out dx, ax
37721 94D3           BA                   01CF    mov dx, # 0x01CF
37722 94D6           ED                           in ax, dx
37723 94D7           5A                           pop dx
37724 94D8           C3                           ret
37725                       000094D9            _dispi_set_bank:
37726 94D9           52                           push dx
37727 94DA           50                           push ax
37728 94DB           BA                   01CE    mov dx, # 0x01CE
37729 94DE           B8                   0005    mov ax, # 0x5
37730 94E1           EF                           out dx, ax
37731 94E2           58                           pop ax
37732 94E3           BA                   01CF    mov dx, # 0x01CF
37733 94E6           EF                           out dx, ax
37734 94E7           5A                           pop dx
37735 94E8           C3                           ret
37736                       000094E9            dispi_get_bank:
37737 94E9           52                           push dx
37738 94EA           BA                   01CE    mov dx, # 0x01CE
37739 94ED           B8                   0005    mov ax, # 0x5
37740 94F0           EF                           out dx, ax
37741 94F1           BA                   01CF    mov dx, # 0x01CF
37742 94F4           ED                           in ax, dx
37743 94F5           5A                           pop dx
37744 94F6           C3                           ret
37745                                           ! 8121 endasm
37746                                           !BCC_ENDASM
37747                                           ! 8122 static void dispi_set_bank_farcall()
37748                                           ! 8123 {
37749                       000094F7            _dispi_set_bank_farcall:
37750                                           ! 8124 #asm
37751                                           !BCC_ASM
37752 94F7           81FB                 0100    cmp bx,#0x0100
37753 94FB           74           1E              je dispi_set_bank_farcall_get
37754 94FD           09DB                         or bx,bx
37755 94FF           75           28              jnz dispi_set_bank_farcall_error
37756 9501           89D0                         mov ax,dx
37757 9503           52                           push dx
37758 9504           50                           push ax
37759 9505           B8                   0005    mov ax,# 0x5
37760 9508           BA                   01CE    mov dx,# 0x01CE
37761 950B           EF                           out dx,ax
37762 950C           58                           pop ax
37763 950D           BA                   01CF    mov dx,# 0x01CF
37764 9510           EF                           out dx,ax
37765 9511           ED                           in ax,dx
37766 9512           5A                           pop dx
37767 9513           39C2                         cmp dx,ax
37768 9515           75           12              jne dispi_set_bank_farcall_error
37769 9517           B8                   004F    mov ax, #0x004f
37770 951A           CB                           retf
37771                       0000951B            dispi_set_bank_farcall_get:
37772 951B           B8                   0005    mov ax,# 0x5
37773 951E           BA                   01CE    mov dx,# 0x01CE
37774 9521           EF                           out dx,ax
37775 9522           BA                   01CF    mov dx,# 0x01CF
37776 9525           ED                           in ax,dx
37777 9526           89C2                         mov dx,ax
37778 9528           CB                           retf
37779                       00009529            dispi_set_bank_farcall_error:
37780 9529           B8                   014F    mov ax,#0x014F
37781 952C           CB                           retf
37782                                           ! 8155 endasm
37783                                           !BCC_ENDASM
37784                                           ! 8156 }
37785 952D           C3                         ret
37786                                           ! 8157 #asm
37787                                           !BCC_ASM
37788                       0000952E            dispi_set_x_offset:
37789 952E           52                           push dx
37790 952F           50                           push ax
37791 9530           BA                   01CE    mov dx, # 0x01CE
37792 9533           B8                   0008    mov ax, # 0x8
37793 9536           EF                           out dx, ax
37794 9537           58                           pop ax
37795 9538           BA                   01CF    mov dx, # 0x01CF
37796 953B           EF                           out dx, ax
37797 953C           5A                           pop dx
37798 953D           C3                           ret
37799                       0000953E            dispi_get_x_offset:
37800 953E           52                           push dx
37801 953F           BA                   01CE    mov dx, # 0x01CE
37802 9542           B8                   0008    mov ax, # 0x8
37803 9545           EF                           out dx, ax
37804 9546           BA                   01CF    mov dx, # 0x01CF
37805 9549           ED                           in ax, dx
37806 954A           5A                           pop dx
37807 954B           C3                           ret
37808                       0000954C            dispi_set_y_offset:
37809 954C           52                           push dx
37810 954D           50                           push ax
37811 954E           BA                   01CE    mov dx, # 0x01CE
37812 9551           B8                   0009    mov ax, # 0x9
37813 9554           EF                           out dx, ax
37814 9555           58                           pop ax
37815 9556           BA                   01CF    mov dx, # 0x01CF
37816 9559           EF                           out dx, ax
37817 955A           5A                           pop dx
37818 955B           C3                           ret
37819                       0000955C            dispi_get_y_offset:
37820 955C           52                           push dx
37821 955D           BA                   01CE    mov dx, # 0x01CE
37822 9560           B8                   0009    mov ax, # 0x9
37823 9563           EF                           out dx, ax
37824 9564           BA                   01CF    mov dx, # 0x01CF
37825 9567           ED                           in ax, dx
37826 9568           5A                           pop dx
37827 9569           C3                           ret
37828                       0000956A            vga_set_virt_width:
37829 956A           50                           push ax
37830 956B           53                           push bx
37831 956C           52                           push dx
37832 956D           89C3                         mov bx, ax
37833 956F           E8         FEEC              call dispi_get_bpp
37834 9572           3C                     04    cmp al, #0x04
37835 9574           77           02              ja set_width_svga
37836 9576           D1EB                         shr bx, #1
37837                       00009578            set_width_svga:
37838 9578           C1EB                   03    shr bx, #3
37839 957B           BA                   03D4    mov dx, # 0x3d4
37840 957E           88DC                         mov ah, bl
37841 9580           B0                     13    mov al, #0x13
37842 9582           EF                           out dx, ax
37843 9583           5A                           pop dx
37844 9584           5B                           pop bx
37845 9585           58                           pop ax
37846 9586           C3                           ret
37847                       00009587            dispi_set_virt_width:
37848 9587           E8         FFE0              call vga_set_virt_width
37849 958A           52                           push dx
37850 958B           50                           push ax
37851 958C           BA                   01CE    mov dx, # 0x01CE
37852 958F           B8                   0006    mov ax, # 0x6
37853 9592           EF                           out dx, ax
37854 9593           58                           pop ax
37855 9594           BA                   01CF    mov dx, # 0x01CF
37856 9597           EF                           out dx, ax
37857 9598           5A                           pop dx
37858 9599           C3                           ret
37859                       0000959A            dispi_get_virt_width:
37860 959A           52                           push dx
37861 959B           BA                   01CE    mov dx, # 0x01CE
37862 959E           B8                   0006    mov ax, # 0x6
37863 95A1           EF                           out dx, ax
37864 95A2           BA                   01CF    mov dx, # 0x01CF
37865 95A5           ED                           in ax, dx
37866 95A6           5A                           pop dx
37867 95A7           C3                           ret
37868                       000095A8            dispi_get_virt_height:
37869 95A8           52                           push dx
37870 95A9           BA                   01CE    mov dx, # 0x01CE
37871 95AC           B8                   0007    mov ax, # 0x7
37872 95AF           EF                           out dx, ax
37873 95B0           BA                   01CF    mov dx, # 0x01CF
37874 95B3           ED                           in ax, dx
37875 95B4           5A                           pop dx
37876 95B5           C3                           ret
37877                       000095B6            _vga_compat_setup:
37878 95B6           50                           push ax
37879 95B7           52                           push dx
37880                                             ; set CRT X resolution
37881 95B8           BA                   01CE    mov dx, # 0x01CE
37882 95BB           B8                   0001    mov ax, # 0x1
37883 95BE           EF                           out dx, ax
37884 95BF           BA                   01CF    mov dx, # 0x01CF
37885 95C2           ED                           in ax, dx
37886 95C3           50                           push ax
37887 95C4           BA                   03D4    mov dx, # 0x3d4
37888 95C7           B8                   0011    mov ax, #0x0011
37889 95CA           EF                           out dx, ax
37890 95CB           58                           pop ax
37891 95CC           50                           push ax
37892 95CD           C1E8                   03    shr ax, #3
37893 95D0           48                           dec ax
37894 95D1           88C4                         mov ah, al
37895 95D3           B0                     01    mov al, #0x01
37896 95D5           EF                           out dx, ax
37897 95D6           58                           pop ax
37898 95D7           E8         FF90              call vga_set_virt_width
37899                                             ; set CRT Y resolution
37900 95DA           BA                   01CE    mov dx, # 0x01CE
37901 95DD           B8                   0002    mov ax, # 0x2
37902 95E0           EF                           out dx, ax
37903 95E1           BA                   01CF    mov dx, # 0x01CF
37904 95E4           ED                           in ax, dx
37905 95E5           48                           dec ax
37906 95E6           50                           push ax
37907 95E7           BA                   03D4    mov dx, # 0x3d4
37908 95EA           88C4                         mov ah, al
37909 95EC           B0                     12    mov al, #0x12
37910 95EE           EF                           out dx, ax
37911 95EF           58                           pop ax
37912 95F0           B0                     07    mov al, #0x07
37913 95F2           EE                           out dx, al
37914 95F3           42                           inc dx
37915 95F4           EC                           in al, dx
37916 95F5           24                     BD    and al, #0xbd
37917 95F7           F6C4                   01    test ah, #0x01
37918 95FA           74           02              jz bit8_clear
37919 95FC           0C                     02    or al, #0x02
37920                       000095FE            bit8_clear:
37921 95FE           F6C4                   02    test ah, #0x02
37922 9601           74           02              jz bit9_clear
37923 9603           0C                     40    or al, #0x40
37924                       00009605            bit9_clear:
37925 9605           EE                           out dx, al
37926                                             ; other settings
37927 9606           BA                   03D4    mov dx, # 0x3d4
37928 9609           B8                   0009    mov ax, #0x0009
37929 960C           EF                           out dx, ax
37930 960D           B0                     17    mov al, #0x17
37931 960F           EE                           out dx, al
37932 9610           BA                   03D5    mov dx, # 0x3d5
37933 9613           EC                           in al, dx
37934 9614           0C                     03    or al, #0x03
37935 9616           EE                           out dx, al
37936 9617           BA                   03DA    mov dx, # 0x3da
37937 961A           EC                           in al, dx
37938 961B           BA                   03C0    mov dx, # 0x3c0
37939 961E           B0                     10    mov al, #0x10
37940 9620           EE                           out dx, al
37941 9621           BA                   03C1    mov dx, # 0x3c1
37942 9624           EC                           in al, dx
37943 9625           0C                     01    or al, #0x01
37944 9627           BA                   03C0    mov dx, # 0x3c0
37945 962A           EE                           out dx, al
37946 962B           B0                     20    mov al, #0x20
37947 962D           EE                           out dx, al
37948 962E           BA                   03CE    mov dx, # 0x3ce
37949 9631           B8                   0506    mov ax, #0x0506
37950 9634           EF                           out dx, ax
37951 9635           BA                   03C4    mov dx, # 0x3c4
37952 9638           B8                   0F02    mov ax, #0x0f02
37953 963B           EF                           out dx, ax
37954                                             ; settings for >= 8bpp
37955 963C           BA                   01CE    mov dx, # 0x01CE
37956 963F           B8                   0003    mov ax, # 0x3
37957 9642           EF                           out dx, ax
37958 9643           BA                   01CF    mov dx, # 0x01CF
37959 9646           ED                           in ax, dx
37960 9647           3C                     08    cmp al, #0x08
37961 9649           72           40              jb vga_compat_end
37962 964B           BA                   03D4    mov dx, # 0x3d4
37963 964E           B0                     14    mov al, #0x14
37964 9650           EE                           out dx, al
37965 9651           BA                   03D5    mov dx, # 0x3d5
37966 9654           EC                           in al, dx
37967 9655           0C                     40    or al, #0x40
37968 9657           EE                           out dx, al
37969 9658           BA                   03DA    mov dx, # 0x3da
37970 965B           EC                           in al, dx
37971 965C           BA                   03C0    mov dx, # 0x3c0
37972 965F           B0                     10    mov al, #0x10
37973 9661           EE                           out dx, al
37974 9662           BA                   03C1    mov dx, # 0x3c1
37975 9665           EC                           in al, dx
37976 9666           0C                     40    or al, #0x40
37977 9668           BA                   03C0    mov dx, # 0x3c0
37978 966B           EE                           out dx, al
37979 966C           B0                     20    mov al, #0x20
37980 966E           EE                           out dx, al
37981 966F           BA                   03C4    mov dx, # 0x3c4
37982 9672           B0                     04    mov al, #0x04
37983 9674           EE                           out dx, al
37984 9675           BA                   03C5    mov dx, # 0x3c5
37985 9678           EC                           in al, dx
37986 9679           0C                     08    or al, #0x08
37987 967B           EE                           out dx, al
37988 967C           BA                   03CE    mov dx, # 0x3ce
37989 967F           B0                     05    mov al, #0x05
37990 9681           EE                           out dx, al
37991 9682           BA                   03CF    mov dx, # 0x3cf
37992 9685           EC                           in al, dx
37993 9686           24                     9F    and al, #0x9f
37994 9688           0C                     40    or al, #0x40
37995 968A           EE                           out dx, al
37996                       0000968B            vga_compat_end:
37997 968B           5A                           pop dx
37998 968C           58                           pop ax
37999                                           ! 8369 endasm
38000                                           !BCC_ENDASM
38001                                           ! 8370 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38002                                           ! 8371   Bit16u mode; Boolean using_lfb;
38003                       0000968D            _mode_info_find_mode:
38004                                           !BCC_EOS
38005                                           !BCC_EOS
38006                                           ! 8372 {
38007                                           ! 8373   ModeInfoListItem *cur_info=&mode_info_list;
38008 968D           55                         push	bp
38009 968E           89E5                       mov	bp,sp
38010 9690           4C                         dec	sp
38011 9691           4C                         dec	sp
38012                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38013 9692           BB                   7E0E  mov	bx,#_mode_info_list
38014 9695           895E         FE            mov	-2[bp],bx
38015                                           !BCC_EOS
38016                                           ! 8374   while (cur_info->mode != 0xFFFF)
38017                                           ! 8375   {
38018 9698           EB           43            jmp .2B9
38019                       0000969A            .2BA:
38020                                           ! 8376     if (cur_info->mode == mode)
38021 969A           8B5E         FE            mov	bx,-2[bp]
38022                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38023 969D           8B1F                       mov	bx,[bx]
38024 969F           3B5E         04            cmp	bx,4[bp]
38025 96A2           75           30            jne 	.2BB
38026                       000096A4            .2BC:
38027                                           ! 8377     {
38028                                           ! 8378       if (!using_lfb)
38029 96A4           8B46         06            mov	ax,6[bp]
38030 96A7           85C0                       test	ax,ax
38031 96A9           75           09            jne 	.2BD
38032                       000096AB            .2BE:
38033                                           ! 8379       {
38034                                           ! 8380         return cur_info;
38035 96AB           8B46         FE            mov	ax,-2[bp]
38036 96AE           89EC                       mov	sp,bp
38037 96B0           5D                         pop	bp
38038 96B1           C3                         ret
38039                                           !BCC_EOS
38040                                           ! 8381       }
38041                                           ! 8382       else if (cur_info->info.ModeAttributes & 0x0080)
38042 96B2           EB           1E            jmp .2BF
38043                       000096B4            .2BD:
38044 96B4           8B5E         FE            mov	bx,-2[bp]
38045                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38046 96B7           8A47         02            mov	al,2[bx]
38047 96BA           24                     80  and	al,#$80
38048 96BC           84C0                       test	al,al
38049 96BE           74           09            je  	.2C0
38050                       000096C0            .2C1:
38051                                           ! 8383       {
38052                                           ! 8384         return cur_info;
38053 96C0           8B46         FE            mov	ax,-2[bp]
38054 96C3           89EC                       mov	sp,bp
38055 96C5           5D                         pop	bp
38056 96C6           C3                         ret
38057                                           !BCC_EOS
38058                                           ! 8385       }
38059                                           ! 8386       else
38060                                           ! 8387       {
38061 96C7           EB           09            jmp .2C2
38062                       000096C9            .2C0:
38063                                           ! 8388         cur_info++;
38064                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38065 96C9           8B5E         FE            mov	bx,-2[bp]
38066 96CC           83C3                   44  add	bx,*$44
38067 96CF           895E         FE            mov	-2[bp],bx
38068                                           !BCC_EOS
38069                                           ! 8389       }
38070                                           ! 8390     }
38071                       000096D2            .2C2:
38072                       000096D2            .2BF:
38073                                           ! 8391     else
38074                                           ! 8392     {
38075 96D2           EB           09            jmp .2C3
38076                       000096D4            .2BB:
38077                                           ! 8393       cur_info++;
38078                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38079 96D4           8B5E         FE            mov	bx,-2[bp]
38080 96D7           83C3                   44  add	bx,*$44
38081 96DA           895E         FE            mov	-2[bp],bx
38082                                           !BCC_EOS
38083                                           ! 8394     }
38084                                           ! 8395   }
38085                       000096DD            .2C3:
38086                                           ! 8396   return 0;
38087                       000096DD            .2B9:
38088 96DD           8B5E         FE            mov	bx,-2[bp]
38089                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38090 96E0           8B1F                       mov	bx,[bx]
38091 96E2           81FB                 FFFF  cmp	bx,#$FFFF
38092 96E6           75           B2            jne	.2BA
38093                       000096E8            .2C4:
38094                       000096E8            .2B8:
38095 96E8           31C0                       xor	ax,ax
38096 96EA           89EC                       mov	sp,bp
38097 96EC           5D                         pop	bp
38098 96ED           C3                         ret
38099                                           !BCC_EOS
38100                                           ! 8397 }
38101                                           ! 8398 #asm
38102                                           !BCC_ASM
38103                       00000004            _mode_info_find_mode.using_lfb	set	4
38104                       00000002            _mode_info_find_mode.mode	set	2
38105                                           ; Has 1 display - Returns true if 1 display detected
38106                       000096EE            _vbe_has_vbe_display:
38107 96EE           1E                           push ds
38108 96EF           53                           push bx
38109 96F0           B8                   0040    mov ax, # 0x40
38110 96F3           8ED8                         mov ds, ax
38111 96F5           BB                   00B9    mov bx, # 0xB9
38112 96F8           8A07                         mov al, [bx]
38113 96FA           24                     01    and al, #0x01
38114 96FC           30E4                         xor ah, ah
38115 96FE           5B                           pop bx
38116 96FF           1F                           pop ds
38117 9700           C3                           ret
38118                                           ; 1 Init - Initialise the Vesa Bios Extension Code
38119                                           ; This function does a sanity check on the host side display code interface.
38120                       00009701            vbe_init:
38121 9701           B8                   B0C0    mov ax, # 0xB0C0
38122 9704           E8         FCF4              call dispi_set_id
38123 9707           E8         FCE3              call dispi_get_id
38124 970A           3D                   B0C0    cmp ax, # 0xB0C0
38125 970D           75           16              jne no_vbe_interface
38126 970F           1E                           push ds
38127 9710           53                           push bx
38128 9711           B8                   0040    mov ax, # 0x40
38129 9714           8ED8                         mov ds, ax
38130 9716           BB                   00B9    mov bx, # 0xB9
38131 9719           B0                     01    mov al, #0x01
38132 971B           8807                         mov [bx], al
38133 971D           5B                           pop bx
38134 971E           1F                           pop ds
38135 971F           B8                   B0C5    mov ax, # 0xB0C5
38136 9722           E8         FCD6              call dispi_set_id
38137                       00009725            no_vbe_interface:
38138 9725           BB                   92AC    mov bx, #msg_vbe_init
38139 9728           53                           push bx
38140 9729           E8         E54B              call _printf
38141 972C           44                           inc sp
38142 972D           44                           inc sp
38143 972E           C3                           ret
38144                                           ; 1 Display Info - Display information on screen about the 1
38145                       0000972F            vbe_display_info:
38146 972F           E8         FFBC              call _vbe_has_vbe_display
38147 9732           85C0                         test ax, ax
38148 9734           74           0B              jz no_vbe_flag
38149 9736           B8                   C000    mov ax, #0xc000
38150 9739           8ED8                         mov ds, ax
38151 973B           BE                   9262    mov si, #_vbebios_info_string
38152 973E           E9         9EF4              jmp _display_string
38153                       00009741            no_vbe_flag:
38154 9741           B8                   C000    mov ax, #0xc000
38155 9744           8ED8                         mov ds, ax
38156 9746           BE                   9288    mov si, #_no_vbebios_info_string
38157 9749           E9         9EE9              jmp _display_string
38158                                           ; helper function for memory size calculation
38159                       0000974C            lmulul:
38160 974C     66    25               0000FFFF    and eax, #0x0000FFFF
38161 9752     66    C1E3                   10    shl ebx, #16
38162 9756     66    09D8                         or eax, ebx
38163 9759           36                           SEG SS
38164 975A     66    F725                         mul eax, dword ptr [di]
38165 975D     66    89C3                         mov ebx, eax
38166 9760     66    C1EB                   10    shr ebx, #16
38167 9764           C3                           ret
38168                                           ! 8462 endasm
38169                                           !BCC_ENDASM
38170                                           ! 8463 void vbe_biosfn_return_controller_information(AX, ES, DI)
38171                                           ! Register BX used in function mode_info_find_mode
38172                                           ! 8464 Bit16u *AX;Bit16u ES;Bit16u DI;
38173                                           export	_vbe_biosfn_return_controller_information
38174                       00009765            _vbe_biosfn_return_controller_information:
38175                                           !BCC_EOS
38176                                           !BCC_EOS
38177                                           !BCC_EOS
38178                                           ! 8465 {
38179                                           ! 8466         Bit16u ss=get_SS();
38180 9765           55                         push	bp
38181 9766           89E5                       mov	bp,sp
38182 9768           4C                         dec	sp
38183 9769           4C                         dec	sp
38184                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38185 976A           E8         E507            call	_get_SS
38186                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38187 976D           8946         FE            mov	-2[bp],ax
38188                                           !BCC_EOS
38189                                           ! 8467         VbeInfoBlock vbe_info_block;
38190                                           !BCC_EOS
38191                                           ! 8468         Bit16u status;
38192                                           !BCC_EOS
38193                                           ! 8469         Bit16u result;
38194                                           !BCC_EOS
38195                                           ! 8470         Bit16u vbe2_info;
38196                                           !BCC_EOS
38197                                           ! 8471         Bit16u cur_mode=0;
38198 9770           81C4                 FDF8  add	sp,#-$208
38199                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
38200 9774           31C0                       xor	ax,ax
38201 9776           8986       FDF6            mov	-$20A[bp],ax
38202                                           !BCC_EOS
38203                                           ! 8472         Bit16u cur_ptr=34;
38204 977A           4C                         dec	sp
38205 977B           4C                         dec	sp
38206                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
38207 977C           B8                   0022  mov	ax,*$22
38208 977F           8986       FDF4            mov	-$20C[bp],ax
38209                                           !BCC_EOS
38210                                           ! 8473         Bit16u size_64k;
38211                                           !BCC_EOS
38212                                           ! 8474         ModeInfoListItem *cur_info=&mode_info_list;
38213 9783           83C4                   FC  add	sp,*-4
38214                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
38215 9786           BB                   7E0E  mov	bx,#_mode_info_list
38216 9789           899E       FDF0            mov	-$210[bp],bx
38217                                           !BCC_EOS
38218                                           ! 8475         status = read_word(ss, AX);
38219                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
38220 978D           FF76         04            push	4[bp]
38221                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
38222 9790           FF76         FE            push	-2[bp]
38223                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38224 9793           E8         E465            call	_read_word
38225 9796           83C4                   04  add	sp,*4
38226                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
38227 9799           8986       FDFC            mov	-$204[bp],ax
38228                                           !BCC_EOS
38229                                           ! 8476         vbe2_info = 0;
38230                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38231 979D           31C0                       xor	ax,ax
38232 979F           8986       FDF8            mov	-$208[bp],ax
38233                                           !BCC_EOS
38234                                           ! 8477         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
38235                                           ! Debug: list int = const $200 (used reg = )
38236 97A3           B8                   0200  mov	ax,#$200
38237 97A6           50                         push	ax
38238                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
38239 97A7           FF76         08            push	8[bp]
38240                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38241 97AA           FF76         06            push	6[bp]
38242                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
38243 97AD           8D9E       FDFE            lea	bx,-$202[bp]
38244 97B1           53                         push	bx
38245                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
38246 97B2           FF76         FE            push	-2[bp]
38247                                           ! Debug: func () void = memcpyb+0 (used reg = )
38248 97B5           E8         E3D0            call	_memcpyb
38249 97B8           83C4                   0A  add	sp,*$A
38250                                           !BCC_EOS
38251                                           ! 8478         if (((vbe_info_block.VbeSignature[0] == 'V') &&
38252                                           ! 8479              (vbe_info_block.VbeSignature[1] == 'B') &&
38253                                           ! 8480              (vbe_info_block.VbeSignature[2] == 'E') &&
38254                                           ! 8481              (vbe_info_block.VbeSignature[3] == '2')) ||
38255                                           ! 8482             ((vbe_info_block.VbeSignature[0] == 'V') &&
38256                                           ! 8483              (vbe_info_block.VbeSignature[1] == 'E') &&
38257                                           ! 8484              (vbe_info_block.VbeSignature[2] == 'S') &&
38258                                           ! 8485              (vbe_info_block.VbeSignature[3] == 'A')) )
38259                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38260 97BB           8A86       FDFE            mov	al,-$202[bp]
38261 97BF           3C                     56  cmp	al,*$56
38262 97C1           75           18            jne 	.2C7
38263                       000097C3            .2CA:
38264                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38265 97C3           8A86       FDFF            mov	al,-$201[bp]
38266 97C7           3C                     42  cmp	al,*$42
38267 97C9           75           10            jne 	.2C7
38268                       000097CB            .2C9:
38269                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38270 97CB           8A86       FE00            mov	al,-$200[bp]
38271 97CF           3C                     45  cmp	al,*$45
38272 97D1           75           08            jne 	.2C7
38273                       000097D3            .2C8:
38274                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38275 97D3           8A86       FE01            mov	al,-$1FF[bp]
38276 97D7           3C                     32  cmp	al,*$32
38277 97D9           74           20            je  	.2C6
38278                       000097DB            .2C7:
38279                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38280 97DB           8A86       FDFE            mov	al,-$202[bp]
38281 97DF           3C                     56  cmp	al,*$56
38282 97E1           75           1F            jne 	.2C5
38283                       000097E3            .2CD:
38284                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38285 97E3           8A86       FDFF            mov	al,-$201[bp]
38286 97E7           3C                     45  cmp	al,*$45
38287 97E9           75           17            jne 	.2C5
38288                       000097EB            .2CC:
38289                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38290 97EB           8A86       FE00            mov	al,-$200[bp]
38291 97EF           3C                     53  cmp	al,*$53
38292 97F1           75           0F            jne 	.2C5
38293                       000097F3            .2CB:
38294                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38295 97F3           8A86       FE01            mov	al,-$1FF[bp]
38296 97F7           3C                     41  cmp	al,*$41
38297 97F9           75           07            jne 	.2C5
38298                       000097FB            .2C6:
38299                                           ! 8486         {
38300                                           ! 8487                 vbe2_info = 1;
38301                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38302 97FB           B8                   0001  mov	ax,*1
38303 97FE           8986       FDF8            mov	-$208[bp],ax
38304                                           !BCC_EOS
38305                                           ! 8488         }
38306                                           ! 8489         vbe_info_block.VbeSignature[0] = 'V';
38307                       00009802            .2C5:
38308                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38309 9802           B0                     56  mov	al,*$56
38310 9804           8886       FDFE            mov	-$202[bp],al
38311                                           !BCC_EOS
38312                                           ! 8490         vbe_info_block.VbeSignature[
38313                                           ! 8490 1] = 'E';
38314                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38315 9808           B0                     45  mov	al,*$45
38316 980A           8886       FDFF            mov	-$201[bp],al
38317                                           !BCC_EOS
38318                                           ! 8491         vbe_info_block.VbeSignature[2] = 'S';
38319                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38320 980E           B0                     53  mov	al,*$53
38321 9810           8886       FE00            mov	-$200[bp],al
38322                                           !BCC_EOS
38323                                           ! 8492         vbe_info_block.VbeSignature[3] = 'A';
38324                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38325 9814           B0                     41  mov	al,*$41
38326 9816           8886       FE01            mov	-$1FF[bp],al
38327                                           !BCC_EOS
38328                                           ! 8493         vbe_info_block.VbeVersion = 0x0200;
38329                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
38330 981A           B8                   0200  mov	ax,#$200
38331 981D           8986       FE02            mov	-$1FE[bp],ax
38332                                           !BCC_EOS
38333                                           ! 8494         vbe_info_block.OemStringPtr_Seg = 0xc000;
38334                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
38335 9821           B8                   C000  mov	ax,#$C000
38336 9824           8986       FE06            mov	-$1FA[bp],ax
38337                                           !BCC_EOS
38338                                           ! 8495         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
38339                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
38340 9828           BB                   91B6  mov	bx,#_vbebios_copyright
38341 982B           899E       FE04            mov	-$1FC[bp],bx
38342                                           !BCC_EOS
38343                                           ! 8496         vbe_info_block.Capabilities[0] = 0x0001;
38344                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
38345 982F           B0                     01  mov	al,*1
38346 9831           8886       FE08            mov	-$1F8[bp],al
38347                                           !BCC_EOS
38348                                           ! 8497         vbe_info_block.Capabilities[1] = 0;
38349                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
38350 9835           30C0                       xor	al,al
38351 9837           8886       FE09            mov	-$1F7[bp],al
38352                                           !BCC_EOS
38353                                           ! 8498         vbe_info_block.Capabilities[2] = 0;
38354                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
38355 983B           30C0                       xor	al,al
38356 983D           8886       FE0A            mov	-$1F6[bp],al
38357                                           !BCC_EOS
38358                                           ! 8499         vbe_info_block.Capabilities[3] = 0;
38359                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
38360 9841           30C0                       xor	al,al
38361 9843           8886       FE0B            mov	-$1F5[bp],al
38362                                           !BCC_EOS
38363                                           ! 8500         vbe_info_block.VideoModePtr_Seg= ES ;
38364                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
38365 9847           8B46         06            mov	ax,6[bp]
38366 984A           8986       FE0E            mov	-$1F2[bp],ax
38367                                           !BCC_EOS
38368                                           ! 8501         vbe_info_block.VideoModePtr_Off= DI + 34;
38369                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
38370 984E           8B46         08            mov	ax,8[bp]
38371                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
38372 9851           05                   0022  add	ax,*$22
38373 9854           8986       FE0C            mov	-$1F4[bp],ax
38374                                           !BCC_EOS
38375                                           ! 8502         outw(0x01CE, 0xa);
38376                                           ! Debug: list int = const $A (used reg = )
38377 9858           B8                   000A  mov	ax,*$A
38378 985B           50                         push	ax
38379                                           ! Debug: list int = const $1CE (used reg = )
38380 985C           B8                   01CE  mov	ax,#$1CE
38381 985F           50                         push	ax
38382                                           ! Debug: func () void = outw+0 (used reg = )
38383 9860           E8         E401            call	_outw
38384 9863           83C4                   04  add	sp,*4
38385                                           !BCC_EOS
38386                                           ! 8503         vbe_info_block.TotalMemory = inw(0x01CF);
38387                                           ! Debug: list int = const $1CF (used reg = )
38388 9866           B8                   01CF  mov	ax,#$1CF
38389 9869           50                         push	ax
38390                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38391 986A           E8         E3DC            call	_inw
38392 986D           44                         inc	sp
38393 986E           44                         inc	sp
38394                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
38395 986F           8986       FE10            mov	-$1F0[bp],ax
38396                                           !BCC_EOS
38397                                           ! 8504         if (vbe2_info)
38398 9873           8B86       FDF8            mov	ax,-$208[bp]
38399 9877           85C0                       test	ax,ax
38400 9879           74           4B            je  	.2CE
38401                       0000987B            .2CF:
38402                                           ! 8505         {
38403                                           ! 8506                 vbe_info_block.OemSoftwareRev = 0x0002;;
38404                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
38405 987B           B8                   0002  mov	ax,*2
38406 987E           8986       FE12            mov	-$1EE[bp],ax
38407                                           !BCC_EOS
38408                                           !BCC_EOS
38409                                           ! 8507                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
38410                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
38411 9882           B8                   C000  mov	ax,#$C000
38412 9885           8986       FE16            mov	-$1EA[bp],ax
38413                                           !BCC_EOS
38414                                           ! 8508                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
38415                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
38416 9889           BB                   91FC  mov	bx,#_vbebios_vendor_name
38417 988C           899E       FE14            mov	-$1EC[bp],bx
38418                                           !BCC_EOS
38419                                           ! 8509                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
38420                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
38421 9890           B8                   C000  mov	ax,#$C000
38422 9893           8986       FE1A            mov	-$1E6[bp],ax
38423                                           !BCC_EOS
38424                                           ! 8510                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
38425                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
38426 9897           BB                   9214  mov	bx,#_vbebios_product_name
38427 989A           899E       FE18            mov	-$1E8[bp],bx
38428                                           !BCC_EOS
38429                                           ! 8511                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
38430                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
38431 989E           B8                   C000  mov	ax,#$C000
38432 98A1           8986       FE1E            mov	-$1E2[bp],ax
38433                                           !BCC_EOS
38434                                           ! 8512                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
38435                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
38436 98A5           BB                   922D  mov	bx,#_vbebios_product_revision
38437 98A8           899E       FE1C            mov	-$1E4[bp],bx
38438                                           !BCC_EOS
38439                                           ! 8513                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
38440                                           ! Debug: list int = const $200 (used reg = )
38441 98AC           B8                   0200  mov	ax,#$200
38442 98AF           50                         push	ax
38443                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
38444 98B0           8D9E       FDFE            lea	bx,-$202[bp]
38445 98B4           53                         push	bx
38446                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
38447 98B5           FF76         FE            push	-2[bp]
38448                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
38449 98B8           FF76         08            push	8[bp]
38450                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
38451 98BB           FF76         06            push	6[bp]
38452                                           ! Debug: func () void = memcpyb+0 (used reg = )
38453 98BE           E8         E2C7            call	_memcpyb
38454 98C1           83C4                   0A  add	sp,*$A
38455                                           !BCC_EOS
38456                                           ! 8514         }
38457                                           ! 8515         else
38458                                           ! 8516         {
38459 98C4           EB           18            jmp .2D0
38460                       000098C6            .2CE:
38461                                           ! 8517                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
38462                                           ! Debug: list int = const $100 (used reg = )
38463 98C6           B8                   0100  mov	ax,#$100
38464 98C9           50                         push	ax
38465                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
38466 98CA           8D9E       FDFE            lea	bx,-$202[bp]
38467 98CE           53                         push	bx
38468                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
38469 98CF           FF76         FE            push	-2[bp]
38470                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
38471 98D2           FF76         08            push	8[bp]
38472                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
38473 98D5           FF76         06            push	6[bp]
38474                                           ! Debug: func () void = memcpyb+0 (used reg = )
38475 98D8           E8         E2AD            call	_memcpyb
38476 98DB           83C4                   0A  add	sp,*$A
38477                                           !BCC_EOS
38478                                           ! 8518         }
38479                                           ! 8519         do
38480                       000098DE            .2D0:
38481                                           ! 8520         {
38482                       000098DE            .2D3:
38483                                           ! 8521                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
38484 98DE           8B9E       FDF0            mov	bx,-$210[bp]
38485                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
38486 98E2           8A47         1B            mov	al,$1B[bx]
38487 98E5           30E4                       xor	ah,ah
38488 98E7           31DB                       xor	bx,bx
38489 98E9           53                         push	bx
38490 98EA           50                         push	ax
38491 98EB           8B9E       FDF0            mov	bx,-$210[bp]
38492                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
38493 98EF           8B47         14            mov	ax,$14[bx]
38494 98F2           31DB                       xor	bx,bx
38495 98F4           53                         push	bx
38496 98F5           50                         push	ax
38497 98F6           8B9E       FDF0            mov	bx,-$210[bp]
38498                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
38499 98FA           8B47         14            mov	ax,$14[bx]
38500 98FD           31DB                       xor	bx,bx
38501                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
38502 98FF           8DBE       FDE8            lea	di,-$218[bp]
38503 9903           E8         FE46            call	lmulul
38504 9906           83C4                   04  add	sp,*4
38505                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
38506 9909           8DBE       FDEC            lea	di,-$214[bp]
38507 990D           E8         FE3C            call	lmulul
38508 9910           83C4                   04  add	sp,*4
38509                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
38510                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
38511 9913           31C0                       xor	ax,ax
38512                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
38513 9915           8986       FDF2            mov	-$20E[bp],ax
38514                                           !BCC_EOS
38515                                           ! 8522                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
38516                                           ! 8523                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
38517                                           ! 8524                     (size_64k <= vbe_info_block.TotalMemory)) {
38518                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
38519 9919           E8         FB5B            call	_dispi_get_max_xres
38520 991C           8B9E       FDF0            mov	bx,-$210[bp]
38521                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
38522 9920           3B47         14            cmp	ax,$14[bx]
38523 9923           72           4D            jb  	.2D4
38524                       00009925            .2D7:
38525                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
38526 9925           E8         FB71            call	_dispi_get_max_bpp
38527 9928           8B9E       FDF0            mov	bx,-$210[bp]
38528                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
38529 992C           50                         push	ax
38530 992D           8A47         1B            mov	al,$1B[bx]
38531 9930           30E4                       xor	ah,ah
38532 9932           3B86       FDEE            cmp	ax,-$212[bp]
38533 9936           8DA6       FDF0            lea	sp,-$210[bp]
38534 993A           77           36            ja  	.2D4
38535                       0000993C            .2D6:
38536                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
38537 993C           8B86       FDF2            mov	ax,-$20E[bp]
38538 9940           3B86       FE10            cmp	ax,-$1F0[bp]
38539 9944           77           2C            ja  	.2D4
38540                       00009946            .2D5:
38541                                           ! 8525                   write_word(ES, DI + cur_ptr, cur_info->mode);
38542 9946           8B9E       FDF0            mov	bx,-$210[bp]
38543                                           ! Debug: list unsigned short = [bx+0] (used reg = )
38544 994A           FF37                       push	[bx]
38545                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
38546 994C           8B46         08            mov	ax,8[bp]
38547 994F           0386       FDF4            add	ax,-$20C[bp]
38548                                           ! Debug: list unsigned int = ax+0 (used reg = )
38549 9953           50                         push	ax
38550                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38551 9954           FF76         06            push	6[bp]
38552                                           ! Debug: func () void = write_word+0 (used reg = )
38553 9957           E8         E2CC            call	_write_word
38554 995A           83C4                   06  add	sp,*6
38555                                           !BCC_EOS
38556                                           ! 8526                   cur_mode++;
38557                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
38558 995D           8B86       FDF6            mov	ax,-$20A[bp]
38559 9961           40                         inc	ax
38560 9962           8986       FDF6            mov	-$20A[bp],ax
38561                                           !BCC_EOS
38562                                           ! 8527                   cur_ptr+=2;
38563                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
38564 9966           8B86       FDF4            mov	ax,-$20C[bp]
38565 996A           40                         inc	ax
38566 996B           40                         inc	ax
38567 996C           8986       FDF4            mov	-$20C[bp],ax
38568                                           !BCC_EOS
38569                                           ! 8528                 } else {
38570 9970           EB           00            jmp .2D8
38571                       00009972            .2D4:
38572                                           ! 8529                 }
38573                                           ! 8530                 cur_info++;
38574                       00009972            .2D8:
38575                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
38576 9972           8B9E       FDF0            mov	bx,-$210[bp]
38577 9976           83C3                   44  add	bx,*$44
38578 9979           899E       FDF0            mov	-$210[bp],bx
38579                                           !BCC_EOS
38580                                           ! 8531         } while (cur_info->mode != 0xFFFF);
38581                       0000997D            .2D2:
38582 997D           8B9E       FDF0            mov	bx,-$210[bp]
38583                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38584 9981           8B1F                       mov	bx,[bx]
38585 9983           81FB                 FFFF  cmp	bx,#$FFFF
38586 9987         0F85         FF53            bne 	.2D3
38587                       0000998B            .2D9:
38588                                           !BCC_EOS
38589                                           ! 8532         write_word(ES, DI + cur_ptr, cur_info->mode);
38590                       0000998B            .2D1:
38591 998B           8B9E       FDF0            mov	bx,-$210[bp]
38592                                           ! Debug: list unsigned short = [bx+0] (used reg = )
38593 998F           FF37                       push	[bx]
38594                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
38595 9991           8B46         08            mov	ax,8[bp]
38596 9994           0386       FDF4            add	ax,-$20C[bp]
38597                                           ! Debug: list unsigned int = ax+0 (used reg = )
38598 9998           50                         push	ax
38599                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38600 9999           FF76         06            push	6[bp]
38601                                           ! Debug: func () void = write_word+0 (used reg = )
38602 999C           E8         E287            call	_write_word
38603 999F           83C4                   06  add	sp,*6
38604                                           !BCC_EOS
38605                                           ! 8533         result = 0x4f;
38606                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
38607 99A2           B8                   004F  mov	ax,*$4F
38608 99A5           8986       FDFA            mov	-$206[bp],ax
38609                                           !BCC_EOS
38610                                           ! 8534         write_word(ss, AX, result);
38611                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
38612 99A9           FFB6       FDFA            push	-$206[bp]
38613                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
38614 99AD           FF76         04            push	4[bp]
38615                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
38616 99B0           FF76         FE            push	-2[bp]
38617                                           ! Debug: func () void = write_word+0 (used reg = )
38618 99B3           E8         E270            call	_write_word
38619 99B6           83C4                   06  add	sp,*6
38620                                           !BCC_EOS
38621                                           ! 8535 }
38622 99B9           89EC                       mov	sp,bp
38623 99BB           5D                         pop	bp
38624 99BC           C3                         ret
38625                                           ! 8536 void vbe_biosfn
38626                                           ! Register BX used in function vbe_biosfn_return_controller_information
38627                                           ! 8536 _return_mode_information(AX, CX, ES, DI)
38628                                           ! 8537 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
38629                                           export	_vbe_biosfn_return_mode_information
38630                       000099BD            _vbe_biosfn_return_mode_information:
38631                                           !BCC_EOS
38632                                           !BCC_EOS
38633                                           !BCC_EOS
38634                                           !BCC_EOS
38635                                           ! 8538 {
38636                                           ! 8539         Bit16u result=0x0100;
38637 99BD           55                         push	bp
38638 99BE           89E5                       mov	bp,sp
38639 99C0           4C                         dec	sp
38640 99C1           4C                         dec	sp
38641                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
38642 99C2           B8                   0100  mov	ax,#$100
38643 99C5           8946         FE            mov	-2[bp],ax
38644                                           !BCC_EOS
38645                                           ! 8540         Bit16u ss=get_SS();
38646 99C8           4C                         dec	sp
38647 99C9           4C                         dec	sp
38648                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38649 99CA           E8         E2A7            call	_get_SS
38650                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
38651 99CD           8946         FC            mov	-4[bp],ax
38652                                           !BCC_EOS
38653                                           ! 8541         ModeInfoBlock info;
38654                                           !BCC_EOS
38655                                           ! 8542         ModeInfoListItem *cur_info;
38656                                           !BCC_EOS
38657                                           ! 8543         Boolean using_lfb;
38658                                           !BCC_EOS
38659                                           ! 8544         Bit16u lfb_addr;
38660                                           !BCC_EOS
38661                                           ! 8545         using_lfb=((CX & 0x4000) == 0x4000);
38662 99D0           81C4                 FEFA  add	sp,#-$106
38663                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
38664 99D4           8B46         06            mov	ax,6[bp]
38665 99D7           25                   4000  and	ax,#$4000
38666                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38667 99DA           3D                   4000  cmp	ax,#$4000
38668 99DD           75           04            jne	.2DA
38669 99DF           B0                     01  mov	al,*1
38670 99E1           EB           02            jmp	.2DB
38671                       000099E3            .2DA:
38672 99E3           30C0                       xor	al,al
38673                       000099E5            .2DB:
38674                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
38675 99E5           30E4                       xor	ah,ah
38676 99E7           8986       FEF8            mov	-$108[bp],ax
38677                                           !BCC_EOS
38678                                           ! 8546         CX = (CX & 0x1ff);
38679                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
38680 99EB           8B46         06            mov	ax,6[bp]
38681 99EE           25                   01FF  and	ax,#$1FF
38682                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
38683 99F1           8946         06            mov	6[bp],ax
38684                                           !BCC_EOS
38685                                           ! 8547         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
38686                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
38687 99F4           8D9E       FEFA            lea	bx,-$106[bp]
38688 99F8           53                         push	bx
38689                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
38690 99F9           FFB6       FEF8            push	-$108[bp]
38691                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
38692 99FD           FF76         06            push	6[bp]
38693                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
38694 9A00           E8         FC8A            call	_mode_info_find_mode
38695 9A03           83C4                   06  add	sp,*6
38696                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
38697 9A06           8986       FEFA            mov	-$106[bp],ax
38698                                           !BCC_EOS
38699                                           ! 8548         if (cur_info != 0)
38700                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
38701 9A0A           8B86       FEFA            mov	ax,-$106[bp]
38702 9A0E           85C0                       test	ax,ax
38703 9A10         0F84         008C            beq 	.2DC
38704                       00009A14            .2DD:
38705                                           ! 8549         {
38706                                           ! 8550                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
38707                                           ! Debug: list int = const $100 (used reg = )
38708 9A14           B8                   0100  mov	ax,#$100
38709 9A17           50                         push	ax
38710                                           ! Debug: list int = const 0 (used reg = )
38711 9A18           31C0                       xor	ax,ax
38712 9A1A           50                         push	ax
38713                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
38714 9A1B           8D9E       FEFC            lea	bx,-$104[bp]
38715 9A1F           53                         push	bx
38716                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
38717 9A20           FF76         FC            push	-4[bp]
38718                                           ! Debug: func () void = memsetb+0 (used reg = )
38719 9A23           E8         E118            call	_memsetb
38720 9A26           83C4                   08  add	sp,*8
38721                                           !BCC_EOS
38722                                           ! 8551                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
38723                                           ! Debug: list int = const $42 (used reg = )
38724 9A29           B8                   0042  mov	ax,*$42
38725 9A2C           50                         push	ax
38726 9A2D           8B9E       FEFA            mov	bx,-$106[bp]
38727                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
38728                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
38729 9A31           43                         inc	bx
38730 9A32           43                         inc	bx
38731 9A33           53                         push	bx
38732                                           ! Debug: list unsigned int = const $C000 (used reg = )
38733 9A34           B8                   C000  mov	ax,#$C000
38734 9A37           50                         push	ax
38735                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
38736 9A38           8D9E       FEFC            lea	bx,-$104[bp]
38737 9A3C           53                         push	bx
38738                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
38739 9A3D           FF76         FC            push	-4[bp]
38740                                           ! Debug: func () void = memcpyb+0 (used reg = )
38741 9A40           E8         E145            call	_memcpyb
38742 9A43           83C4                   0A  add	sp,*$A
38743                                           !BCC_EOS
38744                                           ! 8552                 if (using_lfb) {
38745 9A46           8B86       FEF8            mov	ax,-$108[bp]
38746 9A4A           85C0                       test	ax,ax
38747 9A4C           74           06            je  	.2DE
38748                       00009A4E            .2DF:
38749                                           ! 8553                   info.NumberOfBanks = 1;
38750                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
38751 9A4E           B0                     01  mov	al,*1
38752 9A50           8886       FF16            mov	-$EA[bp],al
38753                                           !BCC_EOS
38754                                           ! 8554                 }
38755                                           ! 8555                 lfb_addr = pci_get_lfb_addr(0x1234);
38756                       00009A54            .2DE:
38757                                           ! Debug: list int = const $1234 (used reg = )
38758 9A54           B8                   1234  mov	ax,#$1234
38759 9A57           50                         push	ax
38760                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
38761 9A58           E8         E359            call	_pci_get_lfb_addr
38762 9A5B           44                         inc	sp
38763 9A5C           44                         inc	sp
38764                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38765 9A5D           8986       FEF6            mov	-$10A[bp],ax
38766                                           !BCC_EOS
38767                                           ! 8556                 if (lfb_addr > 0) {
38768                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38769 9A61           8B86       FEF6            mov	ax,-$10A[bp]
38770 9A65           85C0                       test	ax,ax
38771 9A67           74           11            je  	.2E0
38772                       00009A69            .2E1:
38773                                           ! 8557                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
38774                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38775 9A69           8B86       FEF6            mov	ax,-$10A[bp]
38776 9A6D           31DB                       xor	bx,bx
38777                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
38778 9A6F           93                         xchg	bx,ax
38779 9A70           31C0                       xor	ax,ax
38780                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
38781 9A72           8986       FF24            mov	-$DC[bp],ax
38782 9A76           899E       FF26            mov	-$DA[bp],bx
38783                                           !BCC_EOS
38784                                           ! 8558                 }
38785                                           ! 8559                 if (info.WinAAttributes & 0x01) {
38786                       00009A7A            .2E0:
38787                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
38788 9A7A           8A86       FEFE            mov	al,-$102[bp]
38789 9A7E           24                     01  and	al,*1
38790 9A80           84C0                       test	al,al
38791 9A82           74           14            je  	.2E2
38792                       00009A84            .2E3:
38793                                           ! 8560                   info.WinFuncPtr = 0xC0000000UL;
38794                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
38795 9A84           31C0                       xor	ax,ax
38796 9A86           BB                   C000  mov	bx,#$C000
38797 9A89           8986       FF08            mov	-$F8[bp],ax
38798 9A8D           899E       FF0A            mov	-$F6[bp],bx
38799                                           !BCC_EOS
38800                                           ! 8561                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
38801                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
38802                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
38803 9A91           BB                   94F7  mov	bx,#_dispi_set_bank_farcall
38804 9A94           899E       FF08            mov	-$F8[bp],bx
38805                                           !BCC_EOS
38806                                           ! 8562                 }
38807                                           ! 8563                 result = 0x4f;
38808                       00009A98            .2E2:
38809                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38810 9A98           B8                   004F  mov	ax,*$4F
38811 9A9B           8946         FE            mov	-2[bp],ax
38812                                           !BCC_EOS
38813                                           ! 8564         }
38814                                           ! 8565         else
38815                                           ! 8566         {
38816 9A9E           EB           06            jmp .2E4
38817                       00009AA0            .2DC:
38818                                           ! 8567                 result = 0x100;
38819                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
38820 9AA0           B8                   0100  mov	ax,#$100
38821 9AA3           8946         FE            mov	-2[bp],ax
38822                                           !BCC_EOS
38823                                           ! 8568         }
38824                                           ! 8569         if (result == 0x4f)
38825                       00009AA6            .2E4:
38826                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38827 9AA6           8B46         FE            mov	ax,-2[bp]
38828 9AA9           3D                   004F  cmp	ax,*$4F
38829 9AAC           75           18            jne 	.2E5
38830                       00009AAE            .2E6:
38831                                           ! 8570         {
38832                                           ! 8571                 memcpyb(ES, DI, ss, &info, sizeof(info));
38833                                           ! Debug: list int = const $100 (used reg = )
38834 9AAE           B8                   0100  mov	ax,#$100
38835 9AB1           50                         push	ax
38836                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
38837 9AB2           8D9E       FEFC            lea	bx,-$104[bp]
38838 9AB6           53                         push	bx
38839                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38840 9AB7           FF76         FC            push	-4[bp]
38841                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
38842 9ABA           FF76         0A            push	$A[bp]
38843                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
38844 9ABD           FF76         08            push	8[bp]
38845                                           ! Debug: func () void = memcpyb+0 (used reg = )
38846 9AC0           E8         E0C5            call	_memcpyb
38847 9AC3           83C4                   0A  add	sp,*$A
38848                                           !BCC_EOS
38849                                           ! 8572         }
38850                                           ! 8573         write_word(ss, AX, result);
38851                       00009AC6            .2E5:
38852                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
38853 9AC6           FF76         FE            push	-2[bp]
38854                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
38855 9AC9           FF76         04            push	4[bp]
38856                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38857 9ACC           FF76         FC            push	-4[bp]
38858                                           ! Debug: func () void = write_word+0 (used reg = )
38859 9ACF           E8         E154            call	_write_word
38860 9AD2           83C4                   06  add	sp,*6
38861                                           !BCC_EOS
38862                                           ! 8574 }
38863 9AD5           89EC                       mov	sp,bp
38864 9AD7           5D                         pop	bp
38865 9AD8           C3                         ret
38866                                           ! 8575 void vbe_biosfn_set_mode(AX, BX, ES, DI)
38867                                           ! Register BX used in function vbe_biosfn_return_mode_information
38868                                           ! 8576 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
38869                                           export	_vbe_biosfn_set_mode
38870                       00009AD9            _vbe_biosfn_set_mode:
38871                                           !BCC_EOS
38872                                           !BCC_EOS
38873                                           !BCC_EOS
38874                                           !BCC_EOS
38875                                           ! 8577 {
38876                                           ! 8578         Bit16u ss = get_SS();
38877 9AD9           55                         push	bp
38878 9ADA           89E5                       mov	bp,sp
38879 9ADC           4C                         dec	sp
38880 9ADD           4C                         dec	sp
38881                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38882 9ADE           E8         E193            call	_get_SS
38883                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38884 9AE1           8946         FE            mov	-2[bp],ax
38885                                           !BCC_EOS
38886                                           ! 8579         Bit16u result;
38887                                           !BCC_EOS
38888                                           ! 8580         ModeInfoListItem *cur_info;
38889                                           !BCC_EOS
38890                                           ! 8581         Boolean using_lfb;
38891                                           !BCC_EOS
38892                                           ! 8582         Bit8u no_clear;
38893                                           !BCC_EOS
38894                                           ! 8583         Bit8u lfb_flag;
38895                                           !BCC_EOS
38896                                           ! 8584         using_lfb=((BX & 0x4000) == 0x4000);
38897 9AE4           83C4                   F8  add	sp,*-8
38898                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
38899 9AE7           8B46         06            mov	ax,6[bp]
38900 9AEA           25                   4000  and	ax,#$4000
38901                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38902 9AED           3D                   4000  cmp	ax,#$4000
38903 9AF0           75           04            jne	.2E7
38904 9AF2           B0                     01  mov	al,*1
38905 9AF4           EB           02            jmp	.2E8
38906                       00009AF6            .2E7:
38907 9AF6           30C0                       xor	al,al
38908                       00009AF8            .2E8:
38909                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
38910 9AF8           30E4                       xor	ah,ah
38911 9AFA           8946         F8            mov	-8[bp],ax
38912                                           !BCC_EOS
38913                                           ! 8585         lfb_flag=using_lfb?0x40:0;
38914 9AFD           8B46         F8            mov	ax,-8[bp]
38915 9B00           85C0                       test	ax,ax
38916 9B02           74           04            je  	.2E9
38917                       00009B04            .2EA:
38918 9B04           B0                     40  mov	al,*$40
38919 9B06           EB           02            jmp .2EB
38920                       00009B08            .2E9:
38921 9B08           30C0                       xor	al,al
38922                       00009B0A            .2EB:
38923                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
38924 9B0A           8846         F6            mov	-$A[bp],al
38925                                           !BCC_EOS
38926                                           ! 8586         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
38927                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
38928 9B0D           8B46         06            mov	ax,6[bp]
38929 9B10           25                   8000  and	ax,#$8000
38930                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
38931 9B13           3D                   8000  cmp	ax,#$8000
38932 9B16           75           04            jne 	.2EC
38933                       00009B18            .2ED:
38934 9B18           B0                     80  mov	al,#$80
38935 9B1A           EB           02            jmp .2EE
38936                       00009B1C            .2EC:
38937 9B1C           30C0                       xor	al,al
38938                       00009B1E            .2EE:
38939                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
38940 9B1E           8846         F7            mov	-9[bp],al
38941                                           !BCC_EOS
38942                                           ! 8587         BX = (BX & 0x1ff);
38943                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
38944 9B21           8B46         06            mov	ax,6[bp]
38945 9B24           25                   01FF  and	ax,#$1FF
38946                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
38947 9B27           8946         06            mov	6[bp],ax
38948                                           !BCC_EOS
38949                                           ! 8588         if (BX<0x0100)
38950                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
38951 9B2A           8B46         06            mov	ax,6[bp]
38952 9B2D           3D                   0100  cmp	ax,#$100
38953 9B30           73           23            jae 	.2EF
38954                       00009B32            .2F0:
38955                                           ! 8589         {
38956                                           ! 8590                 Bit8u mode;
38957                                           !BCC_EOS
38958                                           ! 8591                 dispi_set_enable(0x00);
38959 9B32           4C                         dec	sp
38960 9B33           4C                         dec	sp
38961                                           ! Debug: list int = const 0 (used reg = )
38962 9B34           31C0                       xor	ax,ax
38963 9B36           50                         push	ax
38964                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38965 9B37           E8         F981            call	_dispi_set_enable
38966 9B3A           44                         inc	sp
38967 9B3B           44                         inc	sp
38968                                           !BCC_EOS
38969                                           ! 8592                 mode=(BX & 0xff);
38970                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
38971 9B3C           8A46         06            mov	al,6[bp]
38972                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
38973 9B3F           8846         F5            mov	-$B[bp],al
38974                                           !BCC_EOS
38975                                           ! 8593                 biosfn_set_video_mode(mode);
38976                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
38977 9B42           8A46         F5            mov	al,-$B[bp]
38978 9B45           30E4                       xor	ah,ah
38979 9B47           50                         push	ax
38980                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38981 9B48           E8         A04B            call	_biosfn_set_video_mode
38982 9B4B           44                         inc	sp
38983 9B4C           44                         inc	sp
38984                                           !BCC_EOS
38985                                           ! 8594                 result = 0x4f;
38986                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
38987 9B4D           B8                   004F  mov	ax,*$4F
38988 9B50           8946         FC            mov	-4[bp],ax
38989                                           !BCC_EOS
38990                                           ! 8595         }
38991 9B53           44                         inc	sp
38992 9B54           44                         inc	sp
38993                                           ! 8596         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
38994                       00009B55            .2EF:
38995                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
38996 9B55           8D5E         FA            lea	bx,-6[bp]
38997 9B58           53                         push	bx
38998                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
38999 9B59           FF76         F8            push	-8[bp]
39000                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39001 9B5C           FF76         06            push	6[bp]
39002                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39003 9B5F           E8         FB2B            call	_mode_info_find_mode
39004 9B62           83C4                   06  add	sp,*6
39005                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39006 9B65           8946         FA            mov	-6[bp],ax
39007                                           !BCC_EOS
39008                                           ! 8597         if (cur_info != 0)
39009                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39010 9B68           8B46         FA            mov	ax,-6[bp]
39011 9B6B           85C0                       test	ax,ax
39012 9B6D         0F84         0089            beq 	.2F1
39013                       00009B71            .2F2:
39014                                           ! 8598         {
39015                                           ! 8599            
39016                                           ! 8599      dispi_set_enable(0x00);
39017                                           ! Debug: list int = const 0 (used reg = )
39018 9B71           31C0                       xor	ax,ax
39019 9B73           50                         push	ax
39020                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39021 9B74           E8         F944            call	_dispi_set_enable
39022 9B77           44                         inc	sp
39023 9B78           44                         inc	sp
39024                                           !BCC_EOS
39025                                           ! 8600                 if (cur_info->info.BitsPerPixel == 4)
39026 9B79           8B5E         FA            mov	bx,-6[bp]
39027                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
39028 9B7C           8A47         1B            mov	al,$1B[bx]
39029 9B7F           3C                     04  cmp	al,*4
39030 9B81           75           09            jne 	.2F3
39031                       00009B83            .2F4:
39032                                           ! 8601                 {
39033                                           ! 8602                   biosfn_set_video_mode(0x6a);
39034                                           ! Debug: list int = const $6A (used reg = )
39035 9B83           B8                   006A  mov	ax,*$6A
39036 9B86           50                         push	ax
39037                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39038 9B87           E8         A00C            call	_biosfn_set_video_mode
39039 9B8A           44                         inc	sp
39040 9B8B           44                         inc	sp
39041                                           !BCC_EOS
39042                                           ! 8603                 }
39043                                           ! 8604                 dispi_set_bpp(cur_info->info.BitsPerPixel);
39044                       00009B8C            .2F3:
39045 9B8C           8B5E         FA            mov	bx,-6[bp]
39046                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39047 9B8F           8A47         1B            mov	al,$1B[bx]
39048 9B92           30E4                       xor	ah,ah
39049 9B94           50                         push	ax
39050                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
39051 9B95           E8         F8A8            call	_dispi_set_bpp
39052 9B98           44                         inc	sp
39053 9B99           44                         inc	sp
39054                                           !BCC_EOS
39055                                           ! 8605                 dispi_set_xres(cur_info->info.XResolution);
39056 9B9A           8B5E         FA            mov	bx,-6[bp]
39057                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39058 9B9D           FF77         14            push	$14[bx]
39059                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
39060 9BA0           E8         F868            call	_dispi_set_xres
39061 9BA3           44                         inc	sp
39062 9BA4           44                         inc	sp
39063                                           !BCC_EOS
39064                                           ! 8606                 dispi_set_yres(cur_info->info.YResolution);
39065 9BA5           8B5E         FA            mov	bx,-6[bp]
39066                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
39067 9BA8           FF77         16            push	$16[bx]
39068                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
39069 9BAB           E8         F874            call	_dispi_set_yres
39070 9BAE           44                         inc	sp
39071 9BAF           44                         inc	sp
39072                                           !BCC_EOS
39073                                           ! 8607                 dispi_set_bank(0);
39074                                           ! Debug: list int = const 0 (used reg = )
39075 9BB0           31C0                       xor	ax,ax
39076 9BB2           50                         push	ax
39077                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
39078 9BB3           E8         F923            call	_dispi_set_bank
39079 9BB6           44                         inc	sp
39080 9BB7           44                         inc	sp
39081                                           !BCC_EOS
39082                                           ! 8608                 dispi_set_enable(0x01 | no_clear | lfb_flag);
39083                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
39084                                           ! Debug: expression subtree swapping
39085 9BB8           8A46         F7            mov	al,-9[bp]
39086 9BBB           0C                     01  or	al,*1
39087                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
39088 9BBD           0A46         F6            or	al,-$A[bp]
39089                                           ! Debug: list unsigned char = al+0 (used reg = )
39090 9BC0           30E4                       xor	ah,ah
39091 9BC2           50                         push	ax
39092                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39093 9BC3           E8         F8F5            call	_dispi_set_enable
39094 9BC6           44                         inc	sp
39095 9BC7           44                         inc	sp
39096                                           !BCC_EOS
39097                                           ! 8609                 vga_compat_setup();
39098                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
39099 9BC8           E8         F9EB            call	_vga_compat_setup
39100                                           !BCC_EOS
39101                                           ! 8610                 write_word(0x40,0xBA,BX);
39102                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
39103 9BCB           FF76         06            push	6[bp]
39104                                           ! Debug: list int = const $BA (used reg = )
39105 9BCE           B8                   00BA  mov	ax,#$BA
39106 9BD1           50                         push	ax
39107                                           ! Debug: list int = const $40 (used reg = )
39108 9BD2           B8                   0040  mov	ax,*$40
39109 9BD5           50                         push	ax
39110                                           ! Debug: func () void = write_word+0 (used reg = )
39111 9BD6           E8         E04D            call	_write_word
39112 9BD9           83C4                   06  add	sp,*6
39113                                           !BCC_EOS
39114                                           ! 8611                 write_byte(0x40,0x87,(0x60 | no_clear));
39115                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
39116                                           ! Debug: expression subtree swapping
39117 9BDC           8A46         F7            mov	al,-9[bp]
39118 9BDF           0C                     60  or	al,*$60
39119                                           ! Debug: list unsigned char = al+0 (used reg = )
39120 9BE1           30E4                       xor	ah,ah
39121 9BE3           50                         push	ax
39122                                           ! Debug: list int = const $87 (used reg = )
39123 9BE4           B8                   0087  mov	ax,#$87
39124 9BE7           50                         push	ax
39125                                           ! Debug: list int = const $40 (used reg = )
39126 9BE8           B8                   0040  mov	ax,*$40
39127 9BEB           50                         push	ax
39128                                           ! Debug: func () void = write_byte+0 (used reg = )
39129 9BEC           E8         E01F            call	_write_byte
39130 9BEF           83C4                   06  add	sp,*6
39131                                           !BCC_EOS
39132                                           ! 8612                 result = 0x4f;
39133                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39134 9BF2           B8                   004F  mov	ax,*$4F
39135 9BF5           8946         FC            mov	-4[bp],ax
39136                                           !BCC_EOS
39137                                           ! 8613         }
39138                                           ! 8614         else
39139                                           ! 8615         {
39140 9BF8           EB           14            jmp .2F5
39141                       00009BFA            .2F1:
39142                                           ! 8616                 result = 0x100;
39143                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
39144 9BFA           B8                   0100  mov	ax,#$100
39145 9BFD           8946         FC            mov	-4[bp],ax
39146                                           !BCC_EOS
39147                                           ! 8617                 if (BX == 3)
39148                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
39149 9C00           8B46         06            mov	ax,6[bp]
39150 9C03           3D                   0003  cmp	ax,*3
39151 9C06           75           06            jne 	.2F6
39152                       00009C08            .2F7:
39153                                           ! 8618                         result = 0x4f;
39154                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39155 9C08           B8                   004F  mov	ax,*$4F
39156 9C0B           8946         FC            mov	-4[bp],ax
39157                                           !BCC_EOS
39158                                           ! 8619         }
39159                       00009C0E            .2F6:
39160                                           ! 8620         write_word(ss, AX, result);
39161                       00009C0E            .2F5:
39162                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
39163 9C0E           FF76         FC            push	-4[bp]
39164                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
39165 9C11           FF76         04            push	4[bp]
39166                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
39167 9C14           FF76         FE            push	-2[bp]
39168                                           ! Debug: func () void = write_word+0 (used reg = )
39169 9C17           E8         E00C            call	_write_word
39170 9C1A           83C4                   06  add	sp,*6
39171                                           !BCC_EOS
39172                                           ! 8621 }
39173 9C1D           89EC                       mov	sp,bp
39174 9C1F           5D                         pop	bp
39175 9C20           C3                         ret
39176                                           ! 8622 #asm
39177                                           !BCC_ASM
39178                       00000008            _vbe_biosfn_set_mode.DI	set	8
39179                       00000006            _vbe_biosfn_set_mode.ES	set	6
39180                       00000002            _vbe_biosfn_set_mode.AX	set	2
39181                       00000004            _vbe_biosfn_set_mode.BX	set	4
39182                       00009C21            vbe_biosfn_return_current_mode:
39183 9C21           1E                           push ds
39184 9C22           B8                   0040    mov ax, # 0x40
39185 9C25           8ED8                         mov ds, ax
39186 9C27           E8         F8A1              call dispi_get_enable
39187 9C2A           25                   0001    and ax, # 0x01
39188 9C2D           74           09              jz no_vbe_mode
39189 9C2F           BB                   00BA    mov bx, # 0xBA
39190 9C32           8B07                         mov ax, [bx]
39191 9C34           89C3                         mov bx, ax
39192 9C36           75           09              jnz vbe_03_ok
39193                       00009C38            no_vbe_mode:
39194 9C38           BB                   0049    mov bx, # 0x49
39195 9C3B           8A07                         mov al, [bx]
39196 9C3D           88C3                         mov bl, al
39197 9C3F           30FF                         xor bh, bh
39198                       00009C41            vbe_03_ok:
39199 9C41           B8                   004F    mov ax, #0x004f
39200 9C44           1F                           pop ds
39201 9C45           C3                           ret
39202                                           ! 8643 endasm
39203                                           !BCC_ENDASM
39204                                           ! 8644 Bit16u vbe_biosfn_read_video_state_size()
39205                                           ! Register BX used in function vbe_biosfn_set_mode
39206                                           ! 8645 {
39207                                           export	_vbe_biosfn_read_video_state_size
39208                       00009C46            _vbe_biosfn_read_video_state_size:
39209                                           ! 8646     return 9 * 2;
39210 9C46           55                         push	bp
39211 9C47           89E5                       mov	bp,sp
39212 9C49           B8                   0012  mov	ax,*$12
39213 9C4C           5D                         pop	bp
39214 9C4D           C3                         ret
39215                                           !BCC_EOS
39216                                           ! 8647 }
39217                                           ! 8648 void vbe_biosfn_save_video_state(ES, BX)
39218                                           ! 8649      Bit16u ES; Bit16u BX;
39219                                           export	_vbe_biosfn_save_video_state
39220                       00009C4E            _vbe_biosfn_save_video_state:
39221                                           !BCC_EOS
39222                                           !BCC_EOS
39223                                           ! 8650 {
39224                                           ! 8651     Bit16u enable, i;
39225                                           !BCC_EOS
39226                                           ! 8652     outw(0x01CE,0x4);
39227 9C4E           55                         push	bp
39228 9C4F           89E5                       mov	bp,sp
39229 9C51           83C4                   FC  add	sp,*-4
39230                                           ! Debug: list int = const 4 (used reg = )
39231 9C54           B8                   0004  mov	ax,*4
39232 9C57           50                         push	ax
39233                                           ! Debug: list int = const $1CE (used reg = )
39234 9C58           B8                   01CE  mov	ax,#$1CE
39235 9C5B           50                         push	ax
39236                                           ! Debug: func () void = outw+0 (used reg = )
39237 9C5C           E8         E005            call	_outw
39238 9C5F           83C4                   04  add	sp,*4
39239                                           !BCC_EOS
39240                                           ! 8653     enable = inw(0x01CF);
39241                                           ! Debug: list int = const $1CF (used reg = )
39242 9C62           B8                   01CF  mov	ax,#$1CF
39243 9C65           50                         push	ax
39244                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39245 9C66           E8         DFE0            call	_inw
39246 9C69           44                         inc	sp
39247 9C6A           44                         inc	sp
39248                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39249 9C6B           8946         FE            mov	-2[bp],ax
39250                                           !BCC_EOS
39251                                           ! 8654     write_word(ES, BX, enable);
39252                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39253 9C6E           FF76         FE            push	-2[bp]
39254                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39255 9C71           FF76         06            push	6[bp]
39256                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39257 9C74           FF76         04            push	4[bp]
39258                                           ! Debug: func () void = write_word+0 (used reg = )
39259 9C77           E8         DFAC            call	_write_word
39260 9C7A           83C4                   06  add	sp,*6
39261                                           !BCC_EOS
39262                                           ! 8655     BX += 2;
39263                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39264 9C7D           8B46         06            mov	ax,6[bp]
39265 9C80           40                         inc	ax
39266 9C81           40                         inc	ax
39267 9C82           8946         06            mov	6[bp],ax
39268                                           !BCC_EOS
39269                                           ! 8656     if (!(enable & 0x01))
39270                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39271 9C85           8A46         FE            mov	al,-2[bp]
39272 9C88           24                     01  and	al,*1
39273 9C8A           84C0                       test	al,al
39274 9C8C           75           04            jne 	.2F8
39275                       00009C8E            .2F9:
39276                                           ! 8657         return;
39277 9C8E           89EC                       mov	sp,bp
39278 9C90           5D                         pop	bp
39279 9C91           C3                         ret
39280                                           !BCC_EOS
39281                                           ! 8658     for(i = 0x1; i <= 0x9; i++) {
39282                       00009C92            .2F8:
39283                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
39284 9C92           B8                   0001  mov	ax,*1
39285 9C95           8946         FC            mov	-4[bp],ax
39286                                           !BCC_EOS
39287                                           !BCC_EOS
39288 9C98           EB           3A            jmp .2FC
39289                       00009C9A            .2FD:
39290                                           ! 8659         if (i != 0x4) {
39291                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
39292 9C9A           8B46         FC            mov	ax,-4[bp]
39293 9C9D           3D                   0004  cmp	ax,*4
39294 9CA0           74           2B            je  	.2FE
39295                       00009CA2            .2FF:
39296                                           ! 8660             outw(0x01CE, i);
39297                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
39298 9CA2           FF76         FC            push	-4[bp]
39299                                           ! Debug: list int = const $1CE (used reg = )
39300 9CA5           B8                   01CE  mov	ax,#$1CE
39301 9CA8           50                         push	ax
39302                                           ! Debug: func () void = outw+0 (used reg = )
39303 9CA9           E8         DFB8            call	_outw
39304 9CAC           83C4                   04  add	sp,*4
39305                                           !BCC_EOS
39306                                           ! 8661             write_word(ES, BX, inw(0x01CF));
39307                                           ! Debug: list int = const $1CF (used reg = )
39308 9CAF           B8                   01CF  mov	ax,#$1CF
39309 9CB2           50                         push	ax
39310                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39311 9CB3           E8         DF93            call	_inw
39312 9CB6           44                         inc	sp
39313 9CB7           44                         inc	sp
39314                                           ! Debug: list unsigned short = ax+0 (used reg = )
39315 9CB8           50                         push	ax
39316                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39317 9CB9           FF76         06            push	6[bp]
39318                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39319 9CBC           FF76         04            push	4[bp]
39320                                           ! Debug: func () void = write_word+0 (used reg = )
39321 9CBF           E8         DF64            call	_write_word
39322 9CC2           83C4                   06  add	sp,*6
39323                                           !BCC_EOS
39324                                           ! 8662             BX += 2;
39325                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39326 9CC5           8B46         06            mov	ax,6[bp]
39327 9CC8           40                         inc	ax
39328 9CC9           40                         inc	ax
39329 9CCA           8946         06            mov	6[bp],ax
39330                                           !BCC_EOS
39331                                           ! 8663         }
39332                                           ! 8664     }
39333                       00009CCD            .2FE:
39334                                           ! 8665 }
39335                       00009CCD            .2FB:
39336                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
39337 9CCD           8B46         FC            mov	ax,-4[bp]
39338 9CD0           40                         inc	ax
39339 9CD1           8946         FC            mov	-4[bp],ax
39340                       00009CD4            .2FC:
39341                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
39342 9CD4           8B46         FC            mov	ax,-4[bp]
39343 9CD7           3D                   0009  cmp	ax,*9
39344 9CDA           76           BE            jbe	.2FD
39345                       00009CDC            .300:
39346                       00009CDC            .2FA:
39347 9CDC           89EC                       mov	sp,bp
39348 9CDE           5D                         pop	bp
39349 9CDF           C3                         ret
39350                                           ! 8666 void vbe_biosfn_restore_video_state(ES, BX)
39351                                           ! 8667      Bit16u ES; Bit16u BX;
39352                                           export	_vbe_biosfn_restore_video_state
39353                       00009CE0            _vbe_biosfn_restore_video_state:
39354                                           !BCC_EOS
39355                                           !BCC_EOS
39356                                           ! 8668 {
39357                                           ! 8669     Bit16u enable, i;
39358                                           !BCC_EOS
39359                                           ! 8670     enable = read_word(ES, BX);
39360 9CE0           55                         push	bp
39361 9CE1           89E5                       mov	bp,sp
39362 9CE3           83C4                   FC  add	sp,*-4
39363                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39364 9CE6           FF76         06            push	6[bp]
39365                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39366 9CE9           FF76         04            push	4[bp]
39367                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39368 9CEC           E8         DF0C            call	_read_word
39369 9CEF           83C4                   04  add	sp,*4
39370                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39371 9CF2           8946         FE            mov	-2[bp],ax
39372                                           !BCC_EOS
39373                                           ! 8671     BX += 2;
39374                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39375 9CF5           8B46         06            mov	ax,6[bp]
39376 9CF8           40                         inc	ax
39377 9CF9           40                         inc	ax
39378 9CFA           8946         06            mov	6[bp],ax
39379                                           !BCC_EOS
39380                                           ! 8672     if (!(enable & 0x01)) {
39381                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39382 9CFD           8A46         FE            mov	al,-2[bp]
39383 9D00           24                     01  and	al,*1
39384 9D02           84C0                       test	al,al
39385 9D04           75           1E            jne 	.301
39386                       00009D06            .302:
39387                                           ! 8673         outw(0x01CE,0x4);
39388                                           ! Debug: list int = const 4 (used reg = )
39389 9D06           B8                   0004  mov	ax,*4
39390 9D09           50                         push	ax
39391                                           ! Debug: list int = const $1CE (used reg = )
39392 9D0A           B8                   01CE  mov	ax,#$1CE
39393 9D0D           50                         push	ax
39394                                           ! Debug: func () void = outw+0 (used reg = )
39395 9D0E           E8         DF53            call	_outw
39396 9D11           83C4                   04  add	sp,*4
39397                                           !BCC_EOS
39398                                           ! 8674         outw(0x01CF, enable);
39399                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39400 9D14           FF76         FE            push	-2[bp]
39401                                           ! Debug: list int = const $1CF (used reg = )
39402 9D17           B8                   01CF  mov	ax,#$1CF
39403 9D1A           50                         push	ax
39404                                           ! Debug: func () void = outw+0 (used reg = )
39405 9D1B           E8         DF46            call	_outw
39406 9D1E           83C4                   04  add	sp,*4
39407                                           !BCC_EOS
39408                                           ! 8675     } else {
39409 9D21           E9         00E5            br 	.303
39410                       00009D24            .301:
39411                                           ! 8676         outw(0x01CE, 0x1);
39412                                           ! Debug: list int = const 1 (used reg = )
39413 9D24           B8                   0001  mov	ax,*1
39414 9D27           50                         push	ax
39415                                           ! Debug: list int = const $1CE (used reg = )
39416 9D28           B8                   01CE  mov	ax,#$1CE
39417 9D2B           50                         push	ax
39418                                           ! Debug: func () void = outw+0 (used reg = )
39419 9D2C           E8         DF35            call	_outw
39420 9D2F           83C4                   04  add	sp,*4
39421                                           !BCC_EOS
39422                                           ! 8677         outw(0x01CF, read_word(ES, BX));
39423                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39424 9D32           FF76         06            push	6[bp]
39425                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39426 9D35           FF76         04            push	4[bp]
39427                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39428 9D38           E8         DEC0            call	_read_word
39429 9D3B           83C4                   04  add	sp,*4
39430                                           ! Debug: list unsigned short = ax+0 (used reg = )
39431 9D3E           50                         push	ax
39432                                           ! Debug: list int = const $1CF (used reg = )
39433 9D3F           B8                   01CF  mov	ax,#$1CF
39434 9D42           50                         push	ax
39435                                           ! Debug: func () void = outw+0 (used reg = )
39436 9D43           E8         DF1E            call	_outw
39437 9D46           83C4                   04  add	sp,*4
39438                                           !BCC_EOS
39439                                           ! 8678         BX += 2;
39440                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39441 9D49           8B46         06            mov	ax,6[bp]
39442 9D4C           40                         inc	ax
39443 9D4D           40                         inc	ax
39444 9D4E           8946         06            mov	6[bp],ax
39445                                           !BCC_EOS
39446                                           ! 8679         outw(0x01CE, 0x2);
39447                                           ! Debug: list int = const 2 (used reg = )
39448 9D51           B8                   0002  mov	ax,*2
39449 9D54           50                         push	ax
39450                                           ! Debug: list int = const $1CE (used reg = )
39451 9D55           B8                   01CE  mov	ax,#$1CE
39452 9D58           50                         push	ax
39453                                           ! Debug: func () void = outw+0 (used reg = )
39454 9D59           E8         DF08            call	_outw
39455 9D5C           83C4                   04  add	sp,*4
39456                                           !BCC_EOS
39457                                           ! 8680         outw(0x01CF, read_word(ES, BX));
39458                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39459 9D5F           FF76         06            push	6[bp]
39460                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39461 9D62           FF76         04            push	4[bp]
39462                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39463 9D65           E8         DE93            call	_read_word
39464 9D68           83C4                   04  add	sp,*4
39465                                           ! Debug: list unsigned short = ax+0 (used reg = )
39466 9D6B           50                         push	ax
39467                                           ! Debug: list int = const $1CF (used reg = )
39468 9D6C           B8                   01CF  mov	ax,#$1CF
39469 9D6F           50                         push	ax
39470                                           ! Debug: func () void = outw+0 (used reg = )
39471 9D70           E8         DEF1            call	_outw
39472 9D73           83C4                   04  add	sp,*4
39473                                           !BCC_EOS
39474                                           ! 8681         BX += 2;
39475                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39476 9D76           8B46         06            mov	ax,6[bp]
39477 9D79           40                         inc	ax
39478 9D7A           40                         inc	ax
39479 9D7B           8946         06            mov	6[bp],ax
39480                                           !BCC_EOS
39481                                           ! 8682         outw(0x01CE, 0x3);
39482                                           ! Debug: list int = const 3 (used reg = )
39483 9D7E           B8                   0003  mov	ax,*3
39484 9D81           50                         push	ax
39485                                           ! Debug: list int = const $1CE (used reg = )
39486 9D82           B8                   01CE  mov	ax,#$1CE
39487 9D85           50                         push	ax
39488                                           ! Debug: func () void = outw+0 (used reg = )
39489 9D86           E8         DEDB            call	_outw
39490 9D89           83C4                   04  add	sp,*4
39491                                           !BCC_EOS
39492                                           ! 8683         outw(0x01CF, read_word(ES, BX));
39493                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39494 9D8C           FF76         06            push	6[bp]
39495                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39496 9D8F           FF76         04            push	4[bp]
39497                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39498 9D92           E8         DE66            call	_read_word
39499 9D95           83C4                   04  add	sp,*4
39500                                           ! Debug: list unsigned short = ax+0 (used reg = )
39501 9D98           50                         push	ax
39502                                           ! Debug: list int = const $1CF (used reg = )
39503 9D99           B8                   01CF  mov	ax,#$1CF
39504 9D9C           50                         push	ax
39505                                           ! Debug: func () void = outw+0 (used reg = )
39506 9D9D           E8         DEC4            call	_outw
39507 9DA0           83C4                   04  add	sp,*4
39508                                           !BCC_EOS
39509                                           ! 8684   
39510                                           ! 8684       BX += 2;
39511                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39512 9DA3           8B46         06            mov	ax,6[bp]
39513 9DA6           40                         inc	ax
39514 9DA7           40                         inc	ax
39515 9DA8           8946         06            mov	6[bp],ax
39516                                           !BCC_EOS
39517                                           ! 8685         outw(0x01CE,0x4);
39518                                           ! Debug: list int = const 4 (used reg = )
39519 9DAB           B8                   0004  mov	ax,*4
39520 9DAE           50                         push	ax
39521                                           ! Debug: list int = const $1CE (used reg = )
39522 9DAF           B8                   01CE  mov	ax,#$1CE
39523 9DB2           50                         push	ax
39524                                           ! Debug: func () void = outw+0 (used reg = )
39525 9DB3           E8         DEAE            call	_outw
39526 9DB6           83C4                   04  add	sp,*4
39527                                           !BCC_EOS
39528                                           ! 8686         outw(0x01CF, enable);
39529                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39530 9DB9           FF76         FE            push	-2[bp]
39531                                           ! Debug: list int = const $1CF (used reg = )
39532 9DBC           B8                   01CF  mov	ax,#$1CF
39533 9DBF           50                         push	ax
39534                                           ! Debug: func () void = outw+0 (used reg = )
39535 9DC0           E8         DEA1            call	_outw
39536 9DC3           83C4                   04  add	sp,*4
39537                                           !BCC_EOS
39538                                           ! 8687         for(i = 0x5; i <= 0x9; i++) {
39539                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
39540 9DC6           B8                   0005  mov	ax,*5
39541 9DC9           8946         FC            mov	-4[bp],ax
39542                                           !BCC_EOS
39543                                           !BCC_EOS
39544 9DCC           EB           33            jmp .306
39545                       00009DCE            .307:
39546                                           ! 8688             outw(0x01CE, i);
39547                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
39548 9DCE           FF76         FC            push	-4[bp]
39549                                           ! Debug: list int = const $1CE (used reg = )
39550 9DD1           B8                   01CE  mov	ax,#$1CE
39551 9DD4           50                         push	ax
39552                                           ! Debug: func () void = outw+0 (used reg = )
39553 9DD5           E8         DE8C            call	_outw
39554 9DD8           83C4                   04  add	sp,*4
39555                                           !BCC_EOS
39556                                           ! 8689             outw(0x01CF, read_word(ES, BX));
39557                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39558 9DDB           FF76         06            push	6[bp]
39559                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39560 9DDE           FF76         04            push	4[bp]
39561                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39562 9DE1           E8         DE17            call	_read_word
39563 9DE4           83C4                   04  add	sp,*4
39564                                           ! Debug: list unsigned short = ax+0 (used reg = )
39565 9DE7           50                         push	ax
39566                                           ! Debug: list int = const $1CF (used reg = )
39567 9DE8           B8                   01CF  mov	ax,#$1CF
39568 9DEB           50                         push	ax
39569                                           ! Debug: func () void = outw+0 (used reg = )
39570 9DEC           E8         DE75            call	_outw
39571 9DEF           83C4                   04  add	sp,*4
39572                                           !BCC_EOS
39573                                           ! 8690             BX += 2;
39574                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39575 9DF2           8B46         06            mov	ax,6[bp]
39576 9DF5           40                         inc	ax
39577 9DF6           40                         inc	ax
39578 9DF7           8946         06            mov	6[bp],ax
39579                                           !BCC_EOS
39580                                           ! 8691         }
39581                                           ! 8692     }
39582                       00009DFA            .305:
39583                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
39584 9DFA           8B46         FC            mov	ax,-4[bp]
39585 9DFD           40                         inc	ax
39586 9DFE           8946         FC            mov	-4[bp],ax
39587                       00009E01            .306:
39588                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
39589 9E01           8B46         FC            mov	ax,-4[bp]
39590 9E04           3D                   0009  cmp	ax,*9
39591 9E07           76           C5            jbe	.307
39592                       00009E09            .308:
39593                       00009E09            .304:
39594                                           ! 8693 }
39595                       00009E09            .303:
39596 9E09           89EC                       mov	sp,bp
39597 9E0B           5D                         pop	bp
39598 9E0C           C3                         ret
39599                                           ! 8694 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
39600                                           ! 8695 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
39601                                           export	_vbe_biosfn_save_restore_state
39602                       00009E0D            _vbe_biosfn_save_restore_state:
39603                                           !BCC_EOS
39604                                           !BCC_EOS
39605                                           !BCC_EOS
39606                                           !BCC_EOS
39607                                           !BCC_EOS
39608                                           ! 8696 {
39609                                           ! 8697     Bit16u ss=get_SS();
39610 9E0D           55                         push	bp
39611 9E0E           89E5                       mov	bp,sp
39612 9E10           4C                         dec	sp
39613 9E11           4C                         dec	sp
39614                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39615 9E12           E8         DE5F            call	_get_SS
39616                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39617 9E15           8946         FE            mov	-2[bp],ax
39618                                           !BCC_EOS
39619                                           ! 8698     Bit16u result, val;
39620                                           !BCC_EOS
39621                                           ! 8699     result = 0x4f;
39622 9E18           83C4                   FC  add	sp,*-4
39623                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
39624 9E1B           B8                   004F  mov	ax,*$4F
39625 9E1E           8946         FC            mov	-4[bp],ax
39626                                           !BCC_EOS
39627                                           ! 8700     switch(( DX & 0x00ff )) {
39628                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
39629 9E21           8A46         08            mov	al,8[bp]
39630 9E24           E9         00A9            br 	.30B
39631                                           ! 8701     case 0x00:
39632                                           ! 8702         val = biosfn_read_video_state_size2(CX);
39633                       00009E27            .30C:
39634                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
39635 9E27           FF76         06            push	6[bp]
39636                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
39637 9E2A           E8         D0BC            call	_biosfn_read_video_state_size2
39638 9E2D           44                         inc	sp
39639 9E2E           44                         inc	sp
39640                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39641 9E2F           8946         FA            mov	-6[bp],ax
39642                                           !BCC_EOS
39643                                           ! 8703         if (CX & 8)
39644                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39645 9E32           8A46         06            mov	al,6[bp]
39646 9E35           24                     08  and	al,*8
39647 9E37           84C0                       test	al,al
39648 9E39           74           09            je  	.30D
39649                       00009E3B            .30E:
39650                                           ! 8704             val += vbe_biosfn_read_video_state_size();
39651                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
39652 9E3B           E8         FE08            call	_vbe_biosfn_read_video_state_size
39653                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39654 9E3E           0346         FA            add	ax,-6[bp]
39655 9E41           8946         FA            mov	-6[bp],ax
39656                                           !BCC_EOS
39657                                           ! 8705         write_word(ss, BX, val);
39658                       00009E44            .30D:
39659                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39660 9E44           FF76         FA            push	-6[bp]
39661                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
39662 9E47           FF76         0C            push	$C[bp]
39663                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
39664 9E4A           FF76         FE            push	-2[bp]
39665                                           ! Debug: func () void = write_word+0 (used reg = )
39666 9E4D           E8         DDD6            call	_write_word
39667 9E50           83C4                   06  add	sp,*6
39668                                           !BCC_EOS
39669                                           ! 8706         break;
39670 9E53           E9         008C            br 	.309
39671                                           !BCC_EOS
39672                                           ! 8707     case 0x01:
39673                                           ! 8708         val = read_word(ss, BX);
39674                       00009E56            .30F:
39675                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
39676 9E56           FF76         0C            push	$C[bp]
39677                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
39678 9E59           FF76         FE            push	-2[bp]
39679                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39680 9E5C           E8         DD9C            call	_read_word
39681 9E5F           83C4                   04  add	sp,*4
39682                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39683 9E62           8946         FA            mov	-6[bp],ax
39684                                           !BCC_EOS
39685                                           ! 8709         val = biosfn_save_video_state(CX, ES, val);
39686                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39687 9E65           FF76         FA            push	-6[bp]
39688                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39689 9E68           FF76         0A            push	$A[bp]
39690                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
39691 9E6B           FF76         06            push	6[bp]
39692                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
39693 9E6E           E8         D0E3            call	_biosfn_save_video_state
39694 9E71           83C4                   06  add	sp,*6
39695                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39696 9E74           8946         FA            mov	-6[bp],ax
39697                                           !BCC_EOS
39698                                           ! 8710         if (CX & 8)
39699                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39700 9E77           8A46         06            mov	al,6[bp]
39701 9E7A           24                     08  and	al,*8
39702 9E7C           84C0                       test	al,al
39703 9E7E           74           0C            je  	.310
39704                       00009E80            .311:
39705                                           ! 8711             vbe_biosfn_save_video_state(ES, val);
39706                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39707 9E80           FF76         FA            push	-6[bp]
39708                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39709 9E83           FF76         0A            push	$A[bp]
39710                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
39711 9E86           E8         FDC5            call	_vbe_biosfn_save_video_state
39712 9E89           83C4                   04  add	sp,*4
39713                                           !BCC_EOS
39714                                           ! 8712         break;
39715                       00009E8C            .310:
39716 9E8C           EB           54            jmp .309
39717                                           !BCC_EOS
39718                                           ! 8713     case 0x02:
39719                                           ! 8714         val = read_word(ss, BX);
39720                       00009E8E            .312:
39721                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
39722 9E8E           FF76         0C            push	$C[bp]
39723                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
39724 9E91           FF76         FE            push	-2[bp]
39725                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39726 9E94           E8         DD64            call	_read_word
39727 9E97           83C4                   04  add	sp,*4
39728                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39729 9E9A           8946         FA            mov	-6[bp],ax
39730                                           !BCC_EOS
39731                                           ! 8715         val = biosfn_restore_video_state(CX, ES, val);
39732                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39733 9E9D           FF76         FA            push	-6[bp]
39734                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39735 9EA0           FF76         0A            push	$A[bp]
39736                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
39737 9EA3           FF76         06            push	6[bp]
39738                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
39739 9EA6           E8         D675            call	_biosfn_restore_video_state
39740 9EA9           83C4                   06  add	sp,*6
39741                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39742 9EAC           8946         FA            mov	-6[bp],ax
39743                                           !BCC_EOS
39744                                           ! 8716         if (CX & 8)
39745                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39746 9EAF           8A46         06            mov	al,6[bp]
39747 9EB2           24                     08  and	al,*8
39748 9EB4           84C0                       test	al,al
39749 9EB6           74           0C            je  	.313
39750                       00009EB8            .314:
39751                                           ! 8717             vbe_biosfn_restore_video_state(ES, val);
39752                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39753 9EB8           FF76         FA            push	-6[bp]
39754                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39755 9EBB           FF76         0A            push	$A[bp]
39756                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
39757 9EBE           E8         FE1F            call	_vbe_biosfn_restore_video_state
39758 9EC1           83C4                   04  add	sp,*4
39759                                           !BCC_EOS
39760                                           ! 8718         break;
39761                       00009EC4            .313:
39762 9EC4           EB           1C            jmp .309
39763                                           !BCC_EOS
39764                                           ! 8719     default:
39765                                           ! 8720         result = 0x100;
39766                       00009EC6            .315:
39767                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
39768 9EC6           B8                   0100  mov	ax,#$100
39769 9EC9           8946         FC            mov	-4[bp],ax
39770                                           !BCC_EOS
39771                                           ! 8721         break;
39772 9ECC           EB           14            jmp .309
39773                                           !BCC_EOS
39774                                           ! 8722     }
39775                                           ! 8723     write_word(ss, AX, result);
39776 9ECE           EB           12            jmp .309
39777                       00009ED0            .30B:
39778 9ED0           2C                     00  sub	al,*0
39779 9ED2         0F84         FF51            beq 	.30C
39780 9ED6           2C                     01  sub	al,*1
39781 9ED8         0F84         FF7A            beq 	.30F
39782 9EDC           2C                     01  sub	al,*1
39783 9EDE           74           AE            je 	.312
39784 9EE0           EB           E4            jmp	.315
39785                       00009EE2            .309:
39786                       FFFFFFF8            ..FFF4	=	-8
39787                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
39788 9EE2           FF76         FC            push	-4[bp]
39789                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
39790 9EE5           FF76         04            push	4[bp]
39791                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
39792 9EE8           FF76         FE            push	-2[bp]
39793                                           ! Debug: func () void = write_word+0 (used reg = )
39794 9EEB           E8         DD38            call	_write_word
39795 9EEE           83C4                   06  add	sp,*6
39796                                           !BCC_EOS
39797                                           ! 8724 }
39798 9EF1           89EC                       mov	sp,bp
39799 9EF3           5D                         pop	bp
39800 9EF4           C3                         ret
39801                                           ! 8725 #asm
39802                                           !BCC_ASM
39803                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39804                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39805                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39806                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39807                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39808                       00009EF5            vbe_biosfn_display_window_control:
39809 9EF5           80FB                   00    cmp bl, #0x00
39810 9EF8           75           24              jne vbe_05_failed
39811 9EFA           80FF                   01    cmp bh, #0x01
39812 9EFD           74           16              je get_display_window
39813 9EFF           72           04              jb set_display_window
39814 9F01           B8                   0100    mov ax, #0x0100
39815 9F04           C3                           ret
39816                       00009F05            set_display_window:
39817 9F05           89D0                         mov ax, dx
39818 9F07           E8         F5CF              call _dispi_set_bank
39819 9F0A           E8         F5DC              call dispi_get_bank
39820 9F0D           39D0                         cmp ax, dx
39821 9F0F           75           0D              jne vbe_05_failed
39822 9F11           B8                   004F    mov ax, #0x004f
39823 9F14           C3                           ret
39824                       00009F15            get_display_window:
39825 9F15           E8         F5D1              call dispi_get_bank
39826 9F18           89C2                         mov dx, ax
39827 9F1A           B8                   004F    mov ax, #0x004f
39828 9F1D           C3                           ret
39829                       00009F1E            vbe_05_failed:
39830 9F1E           B8                   014F    mov ax, #0x014f
39831 9F21           C3                           ret
39832                                           ! 8750 endasm
39833                                           !BCC_ENDASM
39834                                           ! 8751 #asm
39835                                           !BCC_ASM
39836                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39837                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39838                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39839                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39840                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39841                       00009F22            vbe_biosfn_set_get_logical_scan_line_length:
39842 9F22           89C8                         mov ax, cx
39843 9F24           80FB                   01    cmp bl, #0x01
39844 9F27           74           24              je get_logical_scan_line_length
39845 9F29           80FB                   02    cmp bl, #0x02
39846 9F2C           74           06              je set_logical_scan_line_bytes
39847 9F2E           72           1A              jb set_logical_scan_line_pixels
39848 9F30           B8                   0100    mov ax, #0x0100
39849 9F33           C3                           ret
39850                       00009F34            set_logical_scan_line_bytes:
39851 9F34           50                           push ax
39852 9F35           E8         F526              call dispi_get_bpp
39853 9F38           30FF                         xor bh, bh
39854 9F3A           88E3                         mov bl, ah
39855 9F3C           08DB                         or bl, bl
39856 9F3E           75           05              jnz no_4bpp_1
39857 9F40           C1E0                   03    shl ax, #3
39858 9F43           B3                     01    mov bl, #1
39859                       00009F45            no_4bpp_1:
39860 9F45           31D2                         xor dx, dx
39861 9F47           58                           pop ax
39862 9F48           F7F3                         div bx
39863                       00009F4A            set_logical_scan_line_pixels:
39864 9F4A           E8         F63A              call dispi_set_virt_width
39865                       00009F4D            get_logical_scan_line_length:
39866 9F4D           E8         F50E              call dispi_get_bpp
39867 9F50           30FF                         xor bh, bh
39868 9F52           88E3                         mov bl, ah
39869 9F54           E8         F643              call dispi_get_virt_width
39870 9F57           89C1                         mov cx, ax
39871 9F59           08DB                         or bl, bl
39872 9F5B           75           05              jnz no_4bpp_2
39873 9F5D           C1E8                   03    shr ax, #3
39874 9F60           B3                     01    mov bl, #1
39875                       00009F62            no_4bpp_2:
39876 9F62           F7E3                         mul bx
39877 9F64           89C3                         mov bx, ax
39878 9F66           E8         F63F              call dispi_get_virt_height
39879 9F69           89C2                         mov dx, ax
39880 9F6B           B8                   004F    mov ax, #0x004f
39881 9F6E           C3                           ret
39882                                           ! 8793 endasm
39883                                           !BCC_ENDASM
39884                                           ! 8794 #asm
39885                                           !BCC_ASM
39886                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39887                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39888                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39889                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39890                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39891                       00009F6F            vbe_biosfn_set_get_display_start:
39892 9F6F           80FB                   80    cmp bl, #0x80
39893 9F72           74           0B              je set_display_start
39894 9F74           80FB                   01    cmp bl, #0x01
39895 9F77           74           14              je get_display_start
39896 9F79           72           04              jb set_display_start
39897 9F7B           B8                   0100    mov ax, #0x0100
39898 9F7E           C3                           ret
39899                       00009F7F            set_display_start:
39900 9F7F           89C8                         mov ax, cx
39901 9F81           E8         F5AA              call dispi_set_x_offset
39902 9F84           89D0                         mov ax, dx
39903 9F86           E8         F5C3              call dispi_set_y_offset
39904 9F89           B8                   004F    mov ax, #0x004f
39905 9F8C           C3                           ret
39906                       00009F8D            get_display_start:
39907 9F8D           E8         F5AE              call dispi_get_x_offset
39908 9F90           89C1                         mov cx, ax
39909 9F92           E8         F5C7              call dispi_get_y_offset
39910 9F95           89C2                         mov dx, ax
39911 9F97           30FF                         xor bh, bh
39912 9F99           B8                   004F    mov ax, #0x004f
39913 9F9C           C3                           ret
39914                                           ! 8818 endasm
39915                                           !BCC_ENDASM
39916                                           ! 8819 #asm
39917                                           !BCC_ASM
39918                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39919                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39920                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39921                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39922                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39923                       00009F9D            vbe_biosfn_set_get_dac_palette_format:
39924 9F9D           80FB                   01    cmp bl, #0x01
39925 9FA0           74           1E              je get_dac_palette_format
39926 9FA2           72           04              jb set_dac_palette_format
39927 9FA4           B8                   0100    mov ax, #0x0100
39928 9FA7           C3                           ret
39929                       00009FA8            set_dac_palette_format:
39930 9FA8           E8         F520              call dispi_get_enable
39931 9FAB           80FF                   06    cmp bh, #0x06
39932 9FAE           74           0A              je set_normal_dac
39933 9FB0           80FF                   08    cmp bh, #0x08
39934 9FB3           75           1B              jne vbe_08_unsupported
39935 9FB5           0D                   0020    or ax, # 0x20
39936 9FB8           75           03              jnz set_dac_mode
39937                       00009FBA            set_normal_dac:
39938 9FBA           25                   FFDF    and ax, #~ 0x20
39939                       00009FBD            set_dac_mode:
39940 9FBD           E8         F4FB              call _dispi_set_enable
39941                       00009FC0            get_dac_palette_format:
39942 9FC0           B7                     06    mov bh, #0x06
39943 9FC2           E8         F506              call dispi_get_enable
39944 9FC5           25                   0020    and ax, # 0x20
39945 9FC8           74           02              jz vbe_08_ok
39946 9FCA           B7                     08    mov bh, #0x08
39947                       00009FCC            vbe_08_ok:
39948 9FCC           B8                   004F    mov ax, #0x004f
39949 9FCF           C3                           ret
39950                       00009FD0            vbe_08_unsupported:
39951 9FD0           B8                   014F    mov ax, #0x014f
39952 9FD3           C3                           ret
39953                                           ! 8850 endasm
39954                                           !BCC_ENDASM
39955                                           ! 8851 void vbe_biosfn_set_get_palette_data(AX)
39956                                           ! 8852 {
39957                                           export	_vbe_biosfn_set_get_palette_data
39958                       00009FD4            _vbe_biosfn_set_get_palette_data:
39959                                           ! 8853 }
39960 9FD4           C3                         ret
39961                                           ! 8854 #asm
39962                                           !BCC_ASM
39963                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39964                       00009FD5            vbe_biosfn_return_protected_mode_interface:
39965 9FD5           84DB                         test bl, bl
39966 9FD7           75           11              jnz _fail
39967 9FD9           BF                   C000    mov di, #0xc000
39968 9FDC           8EC7                         mov es, di
39969 9FDE           BF                   92EC    mov di, # vesa_pm_start
39970 9FE1           B9                   93ED    mov cx, # vesa_pm_end
39971 9FE4           29F9                         sub cx, di
39972 9FE6           B8                   004F    mov ax, #0x004f
39973 9FE9           C3                           ret
39974                       00009FEA            _fail:
39975 9FEA           B8                   014F    mov ax, #0x014f
39976 9FED           C3                           ret
39977                                           ! 8868 endasm
39978                                           !BCC_ENDASM
39979                                           ! 8869 #asm
39980                                           !BCC_ASM
39981                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39982                                           ;; DATA_SEG_DEFS_HERE
39983                                           ! 8871 endasm
39984                                           !BCC_ENDASM
39985                                           ! 8872 #asm
39986                                           !BCC_ASM
39987                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39988 9FEE                        76            .ascii "vgabios ends here"
39989 9FFF                        00            .byte 0x00
39990                       0000A000            vgabios_end:
39991 A000                        CB            .byte 0xCB
39992                                           ;; BLOCK_STRINGS_BEGIN
39993                                           ! 8878 endasm
39994                                           !BCC_ENDASM
39995                                           ! 8879 
39996                                           
39997 A001                                      .bss
39998                                           
39999                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B94 A   .10                         0 3693 A   
.100                        0 4CB9 A   .101                        0 4CB2 A   
.102                        0 4CA9 A   .103                        0 4E53 A   
.104                        0 4DC5 A   .105                        0 4D3B A   
.106                        0 4DC2 A   .107                        0 4DB1 A   
.108                        0 4DB8 A   .109                        0 4D45 A   
.10A                        0 4D89 A   .10B                        0 4D63 A   
.10C                        0 4D5C A   .10D                        0 4DB1 A   
.10E                        0 4DC2 A   .10F                        0 4E53 A   
.11                         0 36C2 A   .110                        0 4E53 A   
.111                        0 4E40 A   .112                        0 4E47 A   
.113                        0 4DCF A   .114                        0 4E0C A   
.115                        0 4DE6 A   .116                        0 4DDF A   
.117                        0 4E34 A   .118                        0 4E40 A   
.119                        0 4E3E A   .11A                        0 4E53 A   
.11B                        0 4E56 A   .11C                        0 4EE9 A   
.11D                        0 4EA4 A   .11E                        0 4E92 A   
.11F                        0 4E80 A   .12                         0 36B2 A   
.120                        0 4E79 A   .121                        0 4E72 A   
.122                        0 502D A   .123                        0 4F0C A   
.124                        0 4EF0 A   .125                        0 4F9F A   
.126                        0 4F15 A   .127                        0 4F9C A   
.128                        0 4F8B A   .129                        0 4F92 A   
.12A                        0 4F1F A   .12B                        0 4F63 A   
.12C                        0 4F3D A   .12D                        0 4F36 A   
.12E                        0 4F8B A   .12F                        0 4F9C A   
.13                         0 36C7 A   .130                        0 502D A   
.131                        0 502D A   .132                        0 501A A   
.133                        0 5021 A   .134                        0 4FA9 A   
.135                        0 4FE6 A   .136                        0 4FC0 A   
.137                        0 4FB9 A   .138                        0 500E A   
.139                        0 501A A   .13A                        0 5018 A   
.13B                        0 502D A   .13C                        0 507F A   
.13D                        0 507B A   .13E                        0 513E A   
.13F                        0 50E0 A   .14                         0 36DE A   
.140                        0 513E A   .141                        0 516F A   
.143                        0 5165 A   .144                        0 514D A   
.145                        0 5155 A   .146                        0 515D A   
.147                        0 51DC A   .148                        0 51CC A   
.149                        0 51EA A   .14A                        0 52A2 A   
.14B                        0 5291 A   .14C                        0 5298 A   
.14D                        0 51F2 A   .14E                        0 5291 A   
.14F                        0 5281 A   .15                         0 36F2 A   
.150                        0 5288 A   .151                        0 520F A   
.152                        0 5271 A   .153                        0 525A A   
.154                        0 5281 A   .155                        0 5291 A   
.156                        0 52A2 A   .157                        0 54B4 A   
.158                        0 54A4 A   .159                        0 54AB A   
.15A                        0 52F8 A   .15B                        0 531C A   
.15C                        0 5313 A   .15D                        0 53DD A   
.15E                        0 532A A   .15F                        0 5345 A   
.16                         0 370B A   .160                        0 5333 A   
.161                        0 534A A   .162                        0 53C7 A   
.163                        0 53B9 A   .164                        0 53C0 A   
.165                        0 5351 A   .166                        0 53AF A   
.167                        0 5368 A   .168                        0 5391 A   
.169                        0 5371 A   .16A                        0 53AF A   
.16B                        0 53C7 A   .16C                        0 54A4 A   
.16D                        0 54A4 A   .16E                        0 549B A   
.16F                        0 53E0 A   .17                         0 3722 A   
.170                        0 53FB A   .171                        0 53E9 A   
.172                        0 5400 A   .173                        0 5481 A   
.174                        0 5473 A   .175                        0 547A A   
.176                        0 5407 A   .177                        0 5469 A   
.178                        0 541E A   .179                        0 5449 A   
.17A                        0 5427 A   .17B                        0 5469 A   
.17C                        0 5481 A   .17D                        0 54A4 A   
.17E                        0 54B4 A   .17F                        0 5588 A   
.18                         0 3730 A   .180                        0 5578 A   
.181                        0 557F A   .182                        0 54FE A   
.183                        0 5578 A   .184                        0 556A A   
.185                        0 5571 A   .186                        0 5524 A   
.187                        0 5546 A   .188                        0 5540 A   
.189                        0 5578 A   .18A                        0 5588 A   
.18B                        0 55BC A   .18C                        0 55B8 A   
.18D                        0 5687 A   .18E                        0 561D A   
.18F                        0 577A A   .19                         0 376B A   
.190                        0 577A A   .191                        0 5762 A   
.192                        0 56BC A   .193                        0 575B A   
.195                        0 5747 A   .196                        0 56D0 A   
.197                        0 56D0 A   .198                        0 56F9 A   
.199                        0 5722 A   .19A                        0 577A A   
.19B                        0 576E A   .19C                        0 57AE A   
.19D                        0 57AA A   .19E                        0 587D A   
.19F                        0 580F A   .1A                         0 37A5 A   
.1A0                        0 587A A   .1A1                        0 586E A   
.1A2                        0 5845 A   .1A3                        0 587A A   
.1A4                        0 5970 A   .1A5                        0 5970 A   
.1A6                        0 5958 A   .1A7                        0 58B2 A   
.1A8                        0 5951 A   .1AA                        0 593D A   
.1AB                        0 58C6 A   .1AC                        0 58C6 A   
.1AD                        0 58EF A   .1AE                        0 5918 A   
.1AF                        0 5970 A   .1B                         0 37BA A   
.1B0                        0 5964 A   .1B1                        0 5A1C A   
.1B2                        0 5A18 A   .1B3                        0 5A36 A   
.1B4                        0 5A32 A   .1B5                        0 5C84 A   
.1B7                        0 5C6E A   .1B8                        0 5A4B A   
.1B9                        0 5A4B A   .1BA                        0 5ACC A   
.1BB                        0 5ABE A   .1BC                        0 5AF1 A   
.1BD                        0 5B23 A   .1BE                        0 5B07 A   
.1BF                        0 5B3D A   .1C                         0 37DA A   
.1C0                        0 5B4F A   .1C1                        0 5B46 A   
.1C2                        0 5BBB A   .1C3                        0 5B75 A   
.1C4                        0 5BFB A   .1C5                        0 5C0F A   
.1C6                        0 5C04 A   .1C7                        0 5C25 A   
.1C8                        0 5C3A A   .1C9                        0 5CBE A   
.1CA                        0 5CBA A   .1CB                        0 5CD8 A   
.1CC                        0 5CD4 A   .1CD                        0 5E6C A   
.1CF                        0 5E54 A   .1D                         0 37FA A   
.1D0                        0 5CED A   .1D1                        0 5CED A   
.1D2                        0 5D81 A   .1D3                        0 5D73 A   
.1D4                        0 5D7A A   .1D5                        0 5D2F A   
.1D6                        0 5D73 A   .1D7                        0 5D5F A   
.1D8                        0 5D81 A   .1D9                        0 5D84 A   
.1DA                        0 5DB0 A   .1DB                        0 5DA7 A   
.1DC                        0 5DFB A   .1DD                        0 5DD6 A   
.1DE                        0 5E1C A   .1DF                        0 5E1E A   
.1E                         0 3817 A   .1E0                        0 5E4D A   
.1E1                        0 5EAC A   .1E2                        0 5E9B A   
.1E3                        0 5ED6 A   .1E4                        0 5ED2 A   
.1E5                        0 6135 A   .1E7                        0 6114 A   
.1E8                        0 5F27 A   .1E9                        0 5F2A A   
.1EA                        0 5F38 A   .1EB                        0 5F31 A   
.1EC                        0 5F3B A   .1ED                        0 5F43 A   
.1EE                        0 5F4D A   .1EF                        0 5F9A A   
.1F                         0 3832 A   .1F0                        0 5F8F A   
.1F1                        0 5F4D A   .1F2                        0 5F9A A   
.1F3                        0 5F9D A   .1F4                        0 6039 A   
.1F5                        0 5FB5 A   .1F6                        0 6036 A   
.1F7                        0 6013 A   .1F8                        0 610B A   
.1F9                        0 610B A   .1FB                        0 60F7 A   
.1FC                        0 6080 A   .1FD                        0 6080 A   
.1FE                        0 60A9 A   .1FF                        0 60D2 A   
.20                         0 384F A   .200                        0 614B A   
.201                        0 613F A   .202                        0 6220 A   
.203                        0 6157 A   .204                        0 61F0 A   
.205                        0 616F A   .206                        0 6217 A   
.207                        0 65CD A   .208                        0 65BC A   
.209                        0 65C3 A   .20A                        0 6505 A   
.20B                        0 6578 A   .20C                        0 6572 A   
.20D                        0 65CD A   .20E                        0 66AE A   
.20F                        0 669E A   .21                         0 385E A   
.210                        0 66C6 A   .211                        0 680B A   
.212                        0 67FC A   .213                        0 6803 A   
.214                        0 67BF A   .215                        0 680B A   
.216                        0 6820 A   .217                        0 6815 A   
.218                        0 68A4 A   .219                        0 6895 A   
.21A                        0 689C A   .21B                        0 685B A   
.21C                        0 68A4 A   .21D                        0 68B7 A   
.21E                        0 68AE A   .21F                        0 6935 A   
.22                         0 3999 A   .220                        0 6926 A   
.221                        0 692D A   .222                        0 68F2 A   
.223                        0 6935 A   .224                        0 6948 A   
.225                        0 693F A   .226                        0 69D3 A   
.227                        0 69C4 A   .228                        0 69CB A   
.229                        0 6990 A   .22A                        0 69D3 A   
.22B                        0 69E6 A   .22C                        0 69DD A   
.22D                        0 6B68 A   .22F                        0 6B43 A   
.230                        0 6A00 A   .231                        0 6A37 A   
.232                        0 6A6E A   .233                        0 6A91 A   
.234                        0 6AB4 A   .235                        0 6AD7 A   
.236                        0 6AF9 A   .237                        0 6B1B A   
.238                        0 6B3D A   .239                        0 6B66 A   
.23A                        0 6B56 A   .23B                        0 6CD8 A   
.23C                        0 6CC6 A   .23D                        0 6D62 A   
.23E                        0 6D56 A   .23F                        0 6D07 A   
.24                         0 3945 A   .240                        0 6D3A A   
.241                        0 6D25 A   .242                        0 6D62 A   
.243                        0 6D7A A   .244                        0 6D6B A   
.245                        0 6F05 A   .246                        0 6EFC A   
.247                        0 6F17 A   .248                        0 6F0E A   
.249                        0 6F29 A   .24A                        0 6F20 A   
.24B                        0 71DC A   .24C                        0 6F76 A   
.24D                        0 7061 A   .24E                        0 7052 A   
.24F                        0 7059 A   .25                         0 3864 A   
.250                        0 7026 A   .251                        0 7061 A   
.252                        0 70CF A   .253                        0 70C0 A   
.254                        0 70C7 A   .255                        0 7094 A   
.256                        0 70CF A   .257                        0 7122 A   
.258                        0 7113 A   .259                        0 711A A   
.25A                        0 70D6 A   .25B                        0 7122 A   
.25C                        0 716D A   .25D                        0 715E A   
.25E                        0 7165 A   .25F                        0 7132 A   
.26                         0 3864 A   .260                        0 716D A   
.261                        0 7457 A   .262                        0 71E7 A   
.263                        0 7388 A   .264                        0 7379 A   
.265                        0 7380 A   .266                        0 7351 A   
.267                        0 7388 A   .268                        0 7517 A   
.269                        0 7462 A   .26A                        0 7501 A   
.26B                        0 74F2 A   .26C                        0 74F9 A   
.26D                        0 74D3 A   .26E                        0 7501 A   
.26F                        0 77D9 A   .27                         0 388D A   
.270                        0 752F A   .271                        0 759E A   
.272                        0 758F A   .273                        0 7596 A   
.274                        0 7562 A   .275                        0 759E A   
.276                        0 7623 A   .277                        0 7614 A   
.278                        0 761B A   .279                        0 75DF A   
.27A                        0 760D A   .27B                        0 75E7 A   
.27C                        0 7623 A   .27D                        0 7645 A   
.27E                        0 763D A   .27F                        0 76E6 A   
.28                         0 388D A   .280                        0 76D7 A   
.281                        0 76DE A   .282                        0 76A2 A   
.283                        0 76E6 A   .284                        0 773F A   
.285                        0 7730 A   .286                        0 7737 A   
.287                        0 7703 A   .288                        0 773F A   
.289                        0 7A54 A   .28A                        0 77E4 A   
.28B                        0 7985 A   .28C                        0 7976 A   
.28D                        0 797D A   .28E                        0 794E A   
.28F                        0 7985 A   .29                         0 38A2 A   
.290                        0 7AF5 A   .291                        0 7A5F A   
.292                        0 7AE1 A   .293                        0 7AD2 A   
.294                        0 7AD9 A   .295                        0 7AB2 A   
.296                        0 7AE1 A   .297                        0 7B37 A   
.298                        0 7B29 A   .299                        0 7B30 A   
.29A                        0 7B0D A   .29B                        0 7B29 A   
.29C                        0 7B21 A   .29D                        0 7B37 A   
.29E                        0 7DB0 A   .29F                        0 7D9A A   
.2A                         0 38A2 A   .2A0                        0 7C96 A   
.2A1                        0 7CAB A   .2A2                        0 7C9D A   
.2A3                        0 7D93 A   .2A4                        0 7D83 A   
.2A5                        0 7CB4 A   .2A6                        0 7CE3 A   
.2A7                        0 7CC2 A   .2A8                        0 7CBB A   
.2A9                        0 7D81 A   .2AA                        0 7D81 A   
.2AB                        0 7CEC A   .2AC                        0 7D10 A   
.2AD                        0 7D0A A   .2AE                        0 7D7C A   
.2AF                        0 7D6D A   .2B                         0 38B7 A   
.2B0                        0 7D74 A   .2B1                        0 7D23 A   
.2B2                        0 7D55 A   .2B3                        0 7D42 A   
.2B4                        0 7D66 A   .2B5                        0 7D7C A   
.2B6                        0 7D93 A   .2B7                        0 7DB0 A   
.2B8                        0 96E8 A   .2B9                        0 96DD A   
.2BA                        0 969A A   .2BB                        0 96D4 A   
.2BC                        0 96A4 A   .2BD                        0 96B4 A   
.2BE                        0 96AB A   .2BF                        0 96D2 A   
.2C                         0 38B7 A   .2C0                        0 96C9 A   
.2C1                        0 96C0 A   .2C2                        0 96D2 A   
.2C3                        0 96DD A   .2C4                        0 96E8 A   
.2C5                        0 9802 A   .2C6                        0 97FB A   
.2C7                        0 97DB A   .2C8                        0 97D3 A   
.2C9                        0 97CB A   .2CA                        0 97C3 A   
.2CB                        0 97F3 A   .2CC                        0 97EB A   
.2CD                        0 97E3 A   .2CE                        0 98C6 A   
.2CF                        0 987B A   .2D                         0 38CC A   
.2D0                        0 98DE A   .2D1                        0 998B A   
.2D2                        0 997D A   .2D3                        0 98DE A   
.2D4                        0 9972 A   .2D5                        0 9946 A   
.2D6                        0 993C A   .2D7                        0 9925 A   
.2D8                        0 9972 A   .2D9                        0 998B A   
.2DA                        0 99E3 A   .2DB                        0 99E5 A   
.2DC                        0 9AA0 A   .2DD                        0 9A14 A   
.2DE                        0 9A54 A   .2DF                        0 9A4E A   
.2E                         0 38DB A   .2E0                        0 9A7A A   
.2E1                        0 9A69 A   .2E2                        0 9A98 A   
.2E3                        0 9A84 A   .2E4                        0 9AA6 A   
.2E5                        0 9AC6 A   .2E6                        0 9AAE A   
.2E7                        0 9AF6 A   .2E8                        0 9AF8 A   
.2E9                        0 9B08 A   .2EA                        0 9B04 A   
.2EB                        0 9B0A A   .2EC                        0 9B1C A   
.2ED                        0 9B18 A   .2EE                        0 9B1E A   
.2EF                        0 9B55 A   .2F                         0 38F9 A   
.2F0                        0 9B32 A   .2F1                        0 9BFA A   
.2F2                        0 9B71 A   .2F3                        0 9B8C A   
.2F4                        0 9B83 A   .2F5                        0 9C0E A   
.2F6                        0 9C0E A   .2F7                        0 9C08 A   
.2F8                        0 9C92 A   .2F9                        0 9C8E A   
.2FA                        0 9CDC A   .2FB                        0 9CCD A   
.2FC                        0 9CD4 A   .2FD                        0 9C9A A   
.2FE                        0 9CCD A   .2FF                        0 9CA2 A   
.3                          0 3B40 A   .30                         0 3907 A   
.300                        0 9CDC A   .301                        0 9D24 A   
.302                        0 9D06 A   .303                        0 9E09 A   
.304                        0 9E09 A   .305                        0 9DFA A   
.306                        0 9E01 A   .307                        0 9DCE A   
.308                        0 9E09 A   .309                        0 9EE2 A   
.30B                        0 9ED0 A   .30C                        0 9E27 A   
.30D                        0 9E44 A   .30E                        0 9E3B A   
.30F                        0 9E56 A   .31                         0 3915 A   
.310                        0 9E8C A   .311                        0 9E80 A   
.312                        0 9E8E A   .313                        0 9EC4 A   
.314                        0 9EB8 A   .315                        0 9EC6 A   
.32                         0 3923 A   .33                         0 399C A   
.34                         0 39E9 A   .36                         0 39DD A   
.37                         0 39A1 A   .38                         0 39A6 A   
.39                         0 39C4 A   .3A                         0 39EC A   
.3B                         0 3A20 A   .3C                         0 3A3C A   
.3D                         0 3A80 A   .3F                         0 3A74 A   
.4                          0 3669 A   .40                         0 3A41 A   
.41                         0 3A50 A   .42                         0 3A61 A   
.43                         0 3A8D A   .44                         0 3B36 A   
.45                         0 3A96 A   .46                         0 3B34 A   
.48                         0 3B09 A   .49                         0 3A9B A   
.4A                         0 3AAE A   .4B                         0 3AC3 A   
.4C                         0 3AD8 A   .4D                         0 3AF1 A   
.4E                         0 3AF9 A   .4F                         0 3B01 A   
.5                          0 36C4 A   .50                         0 3B32 A   
.51                         0 3B1C A   .52                         0 3B3C A   
.53                         0 3B8D A   .54                         0 3B53 A   
.55                         0 3BB4 A   .56                         0 3BAC A   
.57                         0 3BD5 A   .58                         0 3BD1 A   
.59                         0 3DA8 A   .5A                         0 3C63 A   
.5B                         0 3CD5 A   .5D                         0 3CC5 A   
.5E                         0 3CA3 A   .5F                         0 3CAB A   
.60                         0 3CB3 A   .61                         0 3CBB A   
.62                         0 3D92 A   .63                         0 3D81 A   
.64                         0 3D88 A   .65                         0 3CDD A   
.66                         0 3D5A A   .67                         0 3CFE A   
.68                         0 3D81 A   .69                         0 3D92 A   
.6A                         0 3DA8 A   .6B                         0 3D9B A   
.6C                         0 3DF8 A   .6D                         0 3DE9 A   
.6E                         0 3DF0 A   .6F                         0 3DB8 A   
.7                          0 369F A   .70                         0 3DF8 A   
.71                         0 3E7D A   .72                         0 3E6E A   
.73                         0 3E75 A   .74                         0 3E36 A   
.75                         0 3E7D A   .76                         0 3EC4 A   
.77                         0 3EB5 A   .78                         0 3EBC A   
.79                         0 3E84 A   .7A                         0 3EC4 A   
.7B                         0 3EDF A   .7C                         0 3EDA A   
.7D                         0 3EE2 A   .7E                         0 3F39 A   
.7F                         0 3F2A A   .8                          0 367B A   
.80                         0 3F31 A   .81                         0 3EF9 A   
.82                         0 3F39 A   .83                         0 4039 A   
.84                         0 3F78 A   .85                         0 3FB4 A   
.86                         0 3F8E A   .87                         0 4039 A   
.88                         0 3FDF A   .89                         0 3FBB A   
.8A                         0 4039 A   .8B                         0 4176 A   
.8C                         0 4168 A   .8D                         0 4198 A   
.8E                         0 4189 A   .8F                         0 4190 A   
.9                          0 3687 A   .90                         0 417D A   
.91                         0 4198 A   .92                         0 41C4 A   
.93                         0 41B6 A   .94                         0 422A A   
.96                         0 421B A   .97                         0 41DC A   
.98                         0 41F1 A   .99                         0 4205 A   
.9A                         0 42F8 A   .9B                         0 42A8 A   
.9C                         0 42A1 A   .9D                         0 429A A   
.9E                         0 4292 A   .9F                         0 42D1 A   
.A                          0 3687 A   .A0                         0 42BC A   
.A1                         0 42E5 A   .A2                         0 435A A   
.A3                         0 4356 A   .A4                         0 4445 A   
.A5                         0 438D A   .A6                         0 447D A   
.A7                         0 4479 A   .A8                         0 44CF A   
.A9                         0 44CB A   .AA                         0 44F9 A   
.AB                         0 44F5 A   .AC                         0 4591 A   
.AD                         0 4523 A   .AE                         0 45B5 A   
.AF                         0 46DD A   .B                          0 3687 A   
.B0                         0 46CE A   .B1                         0 46D5 A   
.B2                         0 4692 A   .B3                         0 46DD A   
.B4                         0 4768 A   .B5                         0 4759 A   
.B6                         0 4760 A   .B7                         0 472F A   
.B8                         0 4768 A   .B9                         0 4888 A   
.BA                         0 4877 A   .BB                         0 487E A   
.BC                         0 47D6 A   .BD                         0 4835 A   
.BE                         0 47DF A   .BF                         0 4877 A   
.C                          0 3687 A   .C0                         0 4888 A   
.C1                         0 493D A   .C2                         0 492E A   
.C3                         0 4935 A   .C4                         0 48C0 A   
.C5                         0 4901 A   .C6                         0 48C9 A   
.C7                         0 492E A   .C8                         0 493D A   
.C9                         0 4953 A   .CA                         0 494F A   
.CB                         0 495F A   .CC                         0 495B A   
.CD                         0 4989 A   .CE                         0 4985 A   
.CF                         0 49C6 A   .D                          0 3687 A   
.D0                         0 49B5 A   .D1                         0 49D7 A   
.D2                         0 49D0 A   .D3                         0 49E8 A   
.D4                         0 49E1 A   .D5                         0 49F7 A   
.D6                         0 49F2 A   .D7                         0 4C6E A   
.D8                         0 4A1E A   .D9                         0 4AA8 A   
.DA                         0 4A73 A   .DB                         0 4A61 A   
.DC                         0 4A4F A   .DD                         0 4A48 A   
.DE                         0 4A41 A   .DF                         0 4C6B A   
.E                          0 3687 A   .E0                         0 4B8D A   
.E1                         0 4AB1 A   .E2                         0 4B8A A   
.E3                         0 4B77 A   .E4                         0 4B7E A   
.E5                         0 4ABC A   .E6                         0 4B1C A   
.E7                         0 4ADA A   .E8                         0 4AD3 A   
.E9                         0 4B77 A   .EA                         0 4B8A A   
.EB                         0 4C6B A   .EC                         0 4C6B A   
.ED                         0 4C58 A   .EE                         0 4C5F A   
.EF                         0 4B98 A   .F                          0 3687 A   
.F0                         0 4BF1 A   .F1                         0 4BAF A   
.F2                         0 4BA8 A   .F3                         0 4C4C A   
.F4                         0 4C58 A   .F5                         0 4C56 A   
.F6                         0 4C6B A   .F7                         0 5043 A   
.F8                         0 5043 A   .FA                         0 5031 A   
.FB                         0 4CA0 A   .FC                         0 4CA0 A   
.FD                         0 4D32 A   .FE                         0 4CDD A   
.FF                         0 4CCB A   _biosfn_alternate_prtsc     0 6BC9 A   
_biosfn_enable_video_refre+ 0 6CA4 A   _biosfn_get_cursor_pos      0 4449 A   
_biosfn_get_font_info       0 69EF A   _biosfn_load_gfx_8_14_char+ 0 69EC A   
_biosfn_load_gfx_8_16_char+ 0 69EE A   _biosfn_load_gfx_8_8_chars  0 69EA A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69ED A   _biosfn_load_gfx_user_char+ 0 69EB A   
_biosfn_load_text_8_14_pat  0 6824 A   _biosfn_load_text_8_16_pat  0 6959 A   
_biosfn_load_text_8_8_pat   0 68BB A   _biosfn_load_text_user_pat  0 6788 A   
_biosfn_perform_gray_scale+ 0 64E1 A   _biosfn_read_char_attr      0 5047 A   
_biosfn_read_pixel          0 5C88 A   _biosfn_read_state_info     0 6DB1 A   
_biosfn_read_video_state_s+ 0 6F30 A   _biosfn_read_video_state_s+ 0 6EE9 A   
_biosfn_restore_video_stat+ 0 751E A   _biosfn_save_video_state    0 6F54 A   
_biosfn_scroll              0 4941 A   _biosfn_set_active_page     0 44BE A   
_biosfn_set_cursor_pos      0 4349 A   _biosfn_set_cursor_shape    0 422E A   
_biosfn_set_video_mode      0 3B96 A   _biosfn_switch_video_inter+ 0 6CA3 A   
_biosfn_write_char_attr     0 558C A   _biosfn_write_char_only     0 577E A   
_biosfn_write_pixel         0 59EC A   _biosfn_write_string        0 6CA5 A   
_biosfn_write_teletype      0 5E8E A   _dac_regs                   0 028D A   
_dispi_get_max_bpp          0 9499 A   _dispi_get_max_xres         0 9477 A   
_dispi_set_bank             0 94D9 A   _dispi_set_bank_farcall     0 94F7 A   
_dispi_set_bpp              0 9440 A   _dispi_set_enable           0 94BB A   
_dispi_set_xres             0 940B A   _dispi_set_yres             0 9422 A   
_display_info               0 3617 A   _display_splash_screen      0 3616 A   
_display_string             0 3635 A   _fail                       0 9FEA A   
_find_vga_entry             0 7AFC A   _get_SS                     0 7C74 A E 
_get_font_access            0 65E8 A   _inb                        0 7C3E A E 
_int10_func                 0 365C A   _inw                        0 7C49 A E 
_line_to_vpti               0 027D A   _memcpyb                    0 7B88 A   
_memcpyw                    0 7BB8 A   _memsetb                    0 7B3E A   
_memsetw                    0 7B63 A   _mode_info_find_mode        0 968D A   
_mode_info_list             0 7E0E A   _no_vbebios_info_string     0 9288 A   
_outb                       0 7C54 A E _outw                       0 7C64 A E 
_palette0                   0 0A11 A   _palette1                   0 0AD1 A   
_palette2                   0 0B91 A   _palette3                   0 0C51 A   
_pci_get_lfb_addr           0 7DB4 A   _printf                     0 7C77 A E 
_read_byte                  0 7BE8 A   _read_word                  0 7BFB A   
_release_font_access        0 660B A   _set_scan_lines             0 663F A   
_static_functionality       0 0F51 A   _vbe_biosfn_read_video_sta+ 0 9C46 A E 
_vbe_biosfn_restore_video_+ 0 9CE0 A E _vbe_biosfn_return_control+ 0 9765 A E 
_vbe_biosfn_return_mode_in+ 0 99BD A E _vbe_biosfn_save_restore_s+ 0 9E0D A E 
_vbe_biosfn_save_video_sta+ 0 9C4E A E _vbe_biosfn_set_get_palett+ 0 9FD4 A E 
_vbe_biosfn_set_mode        0 9AD9 A E _vbe_has_vbe_display        0 96EE A   
_vbebios_copyright          0 91B6 A   _vbebios_info_string        0 9262 A   
_vbebios_product_name       0 9214 A   _vbebios_product_revision   0 922D A   
_vbebios_vendor_name        0 91FC A   _vga_compat_setup           0 95B6 A   
_vga_modes                  0 01FD A   _vgafont14                  0 1761 A   
_vgafont14alt               0 3561 A   _vgafont16                  0 2561 A   
_vgafont16alt               0 3562 A   _vgafont8                   0 0F61 A   
_vgamem_copy_cga            0 477A A   _vgamem_copy_pl4            0 462D A   
_vgamem_fill_cga            0 488C A   _vgamem_fill_pl4            0 46EF A   
_video_param_table          0 0291 A   _video_save_pointer_table   0 35FA A   
_write_byte                 0 7C0E A   _write_gfx_char_cga         0 52B5 A   
_write_gfx_char_lin         0 54B8 A   _write_gfx_char_pl4         0 5142 A   
_write_word                 0 7C26 A   biosfn_enable_cursor_emula+ 0 6C81 A   
biosfn_enable_default_pale+ 0 6C1D A   biosfn_enable_grayscale_su+ 0 6C5D A   
biosfn_enable_video_addres+ 0 6C3F A   biosfn_get_all_palette_reg  0 6386 A   
biosfn_get_ega_info         0 6BA6 A   biosfn_get_single_palette_+ 0 6354 A   
biosfn_get_video_mode       0 6251 A   biosfn_group_0B             0 5974 A   
biosfn_group_10             0 6278 A   biosfn_group_1A             0 6D7E A   
biosfn_read_all_dac_reg     0 6466 A   biosfn_read_display_code    0 6D87 A   
biosfn_read_overscan_borde+ 0 6378 A   biosfn_read_pel_mask        0 6499 A   
biosfn_read_single_dac_reg  0 644B A   biosfn_read_video_dac_stat+ 0 64A4 A   
biosfn_select_vert_res      0 6BCA A   biosfn_select_video_dac_co+ 0 6408 A   
biosfn_set_all_dac_reg      0 63E0 A   biosfn_set_all_palette_reg  0 6301 A   
biosfn_set_border_color     0 597F A   biosfn_set_display_code     0 6D9C A   
biosfn_set_overscan_border+ 0 62F9 A   biosfn_set_palette          0 59BE A   
biosfn_set_pel_mask         0 648E A   biosfn_set_single_dac_reg   0 63C7 A   
biosfn_set_single_palette_+ 0 62DF A   biosfn_set_text_block_spec+ 0 694C A   
biosfn_toggle_intensity     0 632E A   bit8_clear                  0 95FE A   
bit9_clear                  0 9605 A   bpp4_mode                   0 939F A   
dispi_get_bank              0 94E9 A   dispi_get_bpp               0 945E A   
dispi_get_enable            0 94CB A   dispi_get_id                0 93ED A   
dispi_get_virt_height       0 95A8 A   dispi_get_virt_width        0 959A A   
dispi_get_x_offset          0 953E A   dispi_get_y_offset          0 955C A   
dispi_set_bank_farcall_err+ 0 9529 A   dispi_set_bank_farcall_get  0 951B A   
dispi_set_id                0 93FB A   dispi_set_virt_width        0 9587 A   
dispi_set_x_offset          0 952E A   dispi_set_y_offset          0 954C A   
get_bpp_noinc               0 9475 A   get_dac_16_page             0 64D4 A   
get_dac_palette_format      0 9FC0 A   get_display_start           0 9F8D A   
get_display_window          0 9F15 A   get_logical_scan_line_leng+ 0 9F4D A   
get_palette_loop            0 638E A   idiv_u                      0 663A A   
illegal_window              0 9332 A   init_bios_area              0 35C2 A   
init_vga_card               0 3563 A   int10_end                   0 01FB A   
int10_group_10_unknown      0 62DE A   int10_normal                0 01ED A   
int10_test_0B               0 014A A   int10_test_1001             0 627E A   
int10_test_1002             0 6284 A   int10_test_1003             0 628A A   
int10_test_1007             0 6291 A   int10_test_1008             0 6298 A   
int10_test_1009             0 629F A   int10_test_1010             0 62A6 A   
int10_test_1012             0 62AD A   int10_test_1013             0 62B4 A   
int10_test_1015             0 62BB A   int10_test_1017             0 62C2 A   
int10_test_1018             0 62C9 A   int10_test_1019             0 62D0 A   
int10_test_101A             0 62D7 A   int10_test_101B             0 01A3 A   
int10_test_1103             0 0155 A   int10_test_12               0 0160 A   
int10_test_1A               0 013F A   int10_test_4F               0 01B2 A   
int10_test_BL30             0 0170 A   int10_test_BL31             0 017B A   
int10_test_BL32             0 0185 A   int10_test_BL33             0 018F A   
int10_test_BL34             0 0199 A   int10_test_vbe_05           0 01C0 A   
int10_test_vbe_06           0 01C9 A   int10_test_vbe_07           0 01D2 A   
int10_test_vbe_08           0 01DB A   int10_test_vbe_0A           0 01E4 A   
lmulul                      0 974C A   memcpyb_end                 0 7BB0 A   
memcpyw_end                 0 7BE0 A   memsetb_end                 0 7B5D A   
memsetw_end                 0 7B82 A   mode_ega_color              0 6BC6 A   
msg_vbe_init                0 92AC A   msg_vga_init                0 357F A   
no_4bpp_1                   0 9F45 A   no_4bpp_2                   0 9F62 A   
no_actl_reg1                0 62F8 A   no_actl_reg2                0 6377 A   
no_vbe_flag                 0 9741 A   no_vbe_interface            0 9725 A   
no_vbe_mode                 0 9C38 A   pci_get_lfb_addr_3          0 7DC7 A   
pci_get_lfb_addr_4          0 7DDD A   pci_get_lfb_addr_5          0 7DD9 A   
pci_get_lfb_addr_6          0 7DED A   pci_read_reg                0 7DF5 A   
read_dac_loop               0 6477 A   set_actl_normal             0 6444 A   
set_cga_palette_loop        0 59CB A   set_dac_16_page             0 643E A   
set_dac_loop                0 63F1 A   set_dac_mode                0 9FBD A   
set_dac_page                0 642B A   set_dac_palette_format      0 9FA8 A   
set_display_start           0 9F7F A   set_display_window          0 9F05 A   
set_intensity_loop          0 599D A   set_logical_scan_line_byte+ 0 9F34 A   
set_logical_scan_line_pixe+ 0 9F4A A   set_low_border              0 5997 A   
set_normal_dac              0 9FBA A   set_palette_loop            0 6310 A   
set_retcode                 0 6C16 A   set_vert_res                0 6C0C A   
set_width_svga              0 9578 A   set_xy_regs                 0 93AB A   
vbe_03_ok                   0 9C41 A   vbe_05_failed               0 9F1E A   
vbe_08_ok                   0 9FCC A   vbe_08_unsupported          0 9FD0 A   
vbe_biosfn_display_window_+ 0 9EF5 A   vbe_biosfn_return_current_+ 0 9C21 A   
vbe_biosfn_return_protecte+ 0 9FD5 A   vbe_biosfn_set_get_dac_pal+ 0 9F9D A   
vbe_biosfn_set_get_display+ 0 9F6F A   vbe_biosfn_set_get_logical+ 0 9F22 A   
vbe_display_info            0 972F A   vbe_init                    0 9701 A   
vert_res_200                0 6C02 A   vert_res_350                0 6BF8 A   
vert_res_400                0 6BEC A   vesa_pm_end                 0 93ED A   
vesa_pm_io_ports_table      0 92F4 A   vesa_pm_set_display_start   0 9337 A   
vesa_pm_set_display_start1  0 9346 A   vesa_pm_set_display_window+ 0 930B A   
vesa_pm_set_window          0 9300 A   vesa_pm_start               0 92EC A   
vesa_pm_unimplemented       0 93E8 A   vga_compat_end              0 968B A   
vga_set_virt_width          0 956A A   vgabios_copyright           0 0052 A   
vgabios_date                0 0044 A   vgabios_end                 0 A000 A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0109 A   
vgabios_int10_handler       0 0133 A   vgabios_license             0 007E A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B3 A   

00000 errors
00000 warnings
