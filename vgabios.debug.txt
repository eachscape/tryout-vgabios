00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios.debug_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91 
00156                                           ! 91    Bit8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos
00321                                           ! 179 ();
00322                                           !BCC_EOS
00323                                           ! 180 static void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         0103              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        63            .ascii "current-cvs"
00413 0043                        20            .ascii " "
00414                       00000044            vgabios_date:
00415 0044                        30            .ascii "08 Dec 2011"
00416 004F                        0A            .byte 0x0a,0x0d
00417 0051                        00            .byte 0x00
00418                       00000052            vgabios_copyright:
00419 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 007B                        0A            .byte 0x0a,0x0d
00421 007D                        00            .byte 0x00
00422                       0000007E            vgabios_license:
00423 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00AE                        0A            .byte 0x0a,0x0d
00425 00B0                        0A            .byte 0x0a,0x0d
00426 00B2                        00            .byte 0x00
00427                       000000B3            vgabios_website:
00428 00B3                        50            .ascii "Please visit :"
00429 00C1                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00433 00E2                        0A            .byte 0x0a,0x0d
00434 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 0104                        0A            .byte 0x0a,0x0d
00436 0106                        0A            .byte 0x0a,0x0d
00437 0108                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000109            vgabios_init_func:
00444                                           ;; init vga card
00445 0109           E8         3465              call init_vga_card
00446                                           ;; init basic bios vars
00447 010C           E8         348D              call init_bios_area
00448                                           ;; init vbe functions
00449 010F           E8         98A5              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00452                                           ;; display splash screen
00453 0124           E8         34C9              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0127           B8                   0003    mov ax,#0x0003
00456 012A           CD                     10    int #0x10
00457                                           ;; show info
00458 012C           E8         34C2              call _display_info
00459                                           ;; show vbe info
00460 012F           E8         98B3              call vbe_display_info
00461 0132           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       00000133            vgabios_int10_handler:
00467 0133           9C                           pushf
00468 0134           06                           push es
00469 0135           1E                           push ds
00470 0136           60                           pusha
00471 0137           BB                   C000    mov bx, #0xc000
00472 013A           8EDB                         mov ds, bx
00473 013C           E8         34F7              call _int10_debugmsg
00474 013F           61                           popa
00475 0140           1F                           pop ds
00476 0141           07                           pop es
00477 0142           80FC                   0F    cmp ah, #0x0f
00478 0145           75           06              jne int10_test_1A
00479 0147           E8         619C              call biosfn_get_video_mode
00480 014A           E9         00BC              jmp int10_end
00481                       0000014D            int10_test_1A:
00482 014D           80FC                   1A    cmp ah, #0x1a
00483 0150           75           06              jne int10_test_0B
00484 0152           E8         6D40              call biosfn_group_1A
00485 0155           E9         00B1              jmp int10_end
00486                       00000158            int10_test_0B:
00487 0158           80FC                   0B    cmp ah, #0x0b
00488 015B           75           06              jne int10_test_1103
00489 015D           E8         589C              call biosfn_group_0B
00490 0160           E9         00A6              jmp int10_end
00491                       00000163            int10_test_1103:
00492 0163           3D                   1103    cmp ax, #0x1103
00493 0166           75           06              jne int10_test_12
00494 0168           E8         6879              call biosfn_set_text_block_specifier
00495 016B           E9         009B              jmp int10_end
00496                       0000016E            int10_test_12:
00497 016E           80FC                   12    cmp ah, #0x12
00498 0171           75           3E              jne int10_test_101B
00499 0173           80FB                   10    cmp bl, #0x10
00500 0176           75           06              jne int10_test_BL30
00501 0178           E8         6AF7              call biosfn_get_ega_info
00502 017B           E9         008B              jmp int10_end
00503                       0000017E            int10_test_BL30:
00504 017E           80FB                   30    cmp bl, #0x30
00505 0181           75           06              jne int10_test_BL31
00506 0183           E8         6B17              call biosfn_select_vert_res
00507 0186           E9         0080              jmp int10_end
00508                       00000189            int10_test_BL31:
00509 0189           80FB                   31    cmp bl, #0x31
00510 018C           75           05              jne int10_test_BL32
00511 018E           E8         6B95              call biosfn_enable_default_palette_loading
00512 0191           EB           76              jmp int10_end
00513                       00000193            int10_test_BL32:
00514 0193           80FB                   32    cmp bl, #0x32
00515 0196           75           05              jne int10_test_BL33
00516 0198           E8         6BAD              call biosfn_enable_video_addressing
00517 019B           EB           6C              jmp int10_end
00518                       0000019D            int10_test_BL33:
00519 019D           80FB                   33    cmp bl, #0x33
00520 01A0           75           05              jne int10_test_BL34
00521 01A2           E8         6BC1              call biosfn_enable_grayscale_summing
00522 01A5           EB           62              jmp int10_end
00523                       000001A7            int10_test_BL34:
00524 01A7           80FB                   34    cmp bl, #0x34
00525 01AA           75           4F              jne int10_normal
00526 01AC           E8         6BDB              call biosfn_enable_cursor_emulation
00527 01AF           EB           58              jmp int10_end
00528                       000001B1            int10_test_101B:
00529 01B1           3D                   101B    cmp ax, #0x101b
00530 01B4           74           45              je int10_normal
00531 01B6           80FC                   10    cmp ah, #0x10
00532 01B9           75           05              jne int10_test_4F
00533                                           
00534 01BB           E8         614F              call biosfn_group_10
00535 01BE           EB           49              jmp int10_end
00536                                           
00537                       000001C0            int10_test_4F:
00538 01C0           80FC                   4F    cmp ah, #0x4f
00539 01C3           75           36              jne int10_normal
00540 01C5           3C                     03    cmp al, #0x03
00541 01C7           75           05              jne int10_test_vbe_05
00542 01C9           E8         9DC3              call vbe_biosfn_return_current_mode
00543 01CC           EB           3B              jmp int10_end
00544                       000001CE            int10_test_vbe_05:
00545 01CE           3C                     05    cmp al, #0x05
00546 01D0           75           05              jne int10_test_vbe_06
00547 01D2           E8         A0B5              call vbe_biosfn_display_window_control
00548 01D5           EB           32              jmp int10_end
00549                       000001D7            int10_test_vbe_06:
00550 01D7           3C                     06    cmp al, #0x06
00551 01D9           75           05              jne int10_test_vbe_07
00552 01DB           E8         A0D9              call vbe_biosfn_set_get_logical_scan_line_length
00553 01DE           EB           29              jmp int10_end
00554                       000001E0            int10_test_vbe_07:
00555 01E0           3C                     07    cmp al, #0x07
00556 01E2           75           05              jne int10_test_vbe_08
00557 01E4           E8         A11D              call vbe_biosfn_set_get_display_start
00558 01E7           EB           20              jmp int10_end
00559                       000001E9            int10_test_vbe_08:
00560 01E9           3C                     08    cmp al, #0x08
00561 01EB           75           05              jne int10_test_vbe_0A
00562 01ED           E8         A142              call vbe_biosfn_set_get_dac_palette_format
00563 01F0           EB           17              jmp int10_end
00564                       000001F2            int10_test_vbe_0A:
00565 01F2           3C                     0A    cmp al, #0x0A
00566 01F4           75           05              jne int10_normal
00567 01F6           E8         A171              call vbe_biosfn_return_protected_mode_interface
00568 01F9           EB           0E              jmp int10_end
00569                                           
00570                                           
00571                       000001FB            int10_normal:
00572 01FB           06                           push es
00573 01FC           1E                           push ds
00574 01FD           60                           pusha
00575                                           
00576                                           ;; We have to set ds to access the right data segment
00577 01FE           BB                   C000    mov bx, #0xc000
00578 0201           8EDB                         mov ds, bx
00579 0203           E8         3461              call _int10_func
00580                                           
00581 0206           61                           popa
00582 0207           1F                           pop ds
00583 0208           07                           pop es
00584                       00000209            int10_end:
00585 0209           9D                           popf
00586 020A           CF                           iret
00587                                           ! 411 endasm
00588                                           !BCC_ENDASM
00589                                           ! 412 typedef struct
00590                                           ! 413 {Bit8u svgamode;
00591                                           !BCC_EOS
00592                                           ! 414  Bit8u class;
00593                                           !BCC_EOS
00594                                           ! 415  Bit8u memmodel;
00595                                           !BCC_EOS
00596                                           ! 416  Bit8u pixbits;
00597                                           !BCC_EOS
00598                                           ! 417  Bit16u sstart;
00599                                           !BCC_EOS
00600                                           ! 418  Bit8u pelmask;
00601                                           !BCC_EOS
00602                                           ! 419  Bit8u dacmodel;
00603                                           !BCC_EOS
00604                                           ! 420 } VGAMODES;
00605                                           !BCC_EOS
00606                                           ! 421 static VGAMODES vga_modes[15 +1]=
00607                                           ! 422 {
00608                                           
00609                       0000020B            _vga_modes:
00610                                           ! 423  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00611 020B                        00            .byte	0
00612 020C                        00            .byte	0
00613 020D                        00            .byte	0
00614 020E                        04            .byte	4
00615 020F                      B800            .word	$B800
00616 0211                        FF            .byte	$FF
00617 0212                        02            .byte	2
00618                                           ! 424  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00619 0213                        01            .byte	1
00620 0214                        00            .byte	0
00621 0215                        00            .byte	0
00622 0216                        04            .byte	4
00623 0217                      B800            .word	$B800
00624 0219                        FF            .byte	$FF
00625 021A                        02            .byte	2
00626                                           ! 425  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00627 021B                        02            .byte	2
00628 021C                        00            .byte	0
00629 021D                        00            .byte	0
00630 021E                        04            .byte	4
00631 021F                      B800            .word	$B800
00632 0221                        FF            .byte	$FF
00633 0222                        02            .byte	2
00634                                           ! 426  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00635 0223                        03            .byte	3
00636 0224                        00            .byte	0
00637 0225                        00            .byte	0
00638 0226                        04            .byte	4
00639 0227                      B800            .word	$B800
00640 0229                        FF            .byte	$FF
00641 022A                        02            .byte	2
00642                                           ! 427  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00643 022B                        04            .byte	4
00644 022C                        01            .byte	1
00645 022D                        02            .byte	2
00646 022E                        02            .byte	2
00647 022F                      B800            .word	$B800
00648 0231                        FF            .byte	$FF
00649 0232                        01            .byte	1
00650                                           ! 428  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00651 0233                        05            .byte	5
00652 0234                        01            .byte	1
00653 0235                        02            .byte	2
00654 0236                        02            .byte	2
00655 0237                      B800            .word	$B800
00656 0239                        FF            .byte	$FF
00657 023A                        01            .byte	1
00658                                           ! 429  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00659 023B                        06            .byte	6
00660 023C                        01            .byte	1
00661 023D                        02            .byte	2
00662 023E                        01            .byte	1
00663 023F                      B800            .word	$B800
00664 0241                        FF            .byte	$FF
00665 0242                        01            .byte	1
00666                                           ! 430  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00667 0243                        07            .byte	7
00668 0244                        00            .byte	0
00669 0245                        01            .byte	1
00670 0246                        04            .byte	4
00671 0247                      B000            .word	$B000
00672 0249                        FF            .byte	$FF
00673 024A                        00            .byte	0
00674                                           ! 431  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00675 024B                        0D            .byte	$D
00676 024C                        01            .byte	1
00677 024D                        04            .byte	4
00678 024E                        04            .byte	4
00679 024F                      A000            .word	$A000
00680 0251                        FF            .byte	$FF
00681 0252                        01            .byte	1
00682                                           ! 432  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00683 0253                        0E            .byte	$E
00684 0254                        01            .byte	1
00685 0255                        04            .byte	4
00686 0256                        04            .byte	4
00687 0257                      A000            .word	$A000
00688 0259                        FF            .byte	$FF
00689 025A                        01            .byte	1
00690                                           ! 433  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00691 025B                        0F            .byte	$F
00692 025C                        01            .byte	1
00693 025D                        03            .byte	3
00694 025E                        01            .byte	1
00695 025F                      A000            .word	$A000
00696 0261                        FF            .byte	$FF
00697 0262                        00            .byte	0
00698                                           ! 434  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00699 0263                        10            .byte	$10
00700 0264                        01            .byte	1
00701 0265                        04            .byte	4
00702 0266                        04            .byte	4
00703 0267                      A000            .word	$A000
00704 0269                        FF            .byte	$FF
00705 026A                        02            .byte	2
00706                                           ! 435  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00707 026B                        11            .byte	$11
00708 026C                        01            .byte	1
00709 026D                        03            .byte	3
00710 026E                        01            .byte	1
00711 026F                      A000            .word	$A000
00712 0271                        FF            .byte	$FF
00713 0272                        02            .byte	2
00714                                           ! 436  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00715 0273                        12            .byte	$12
00716 0274                        01            .byte	1
00717 0275                        04            .byte	4
00718 0276                        04            .byte	4
00719 0277                      A000            .word	$A000
00720 0279                        FF            .byte	$FF
00721 027A                        02            .byte	2
00722                                           ! 437  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00723 027B                        13            .byte	$13
00724 027C                        01            .byte	1
00725 027D                        05            .byte	5
00726 027E                        08            .byte	8
00727 027F                      A000            .word	$A000
00728 0281                        FF            .byte	$FF
00729 0282                        03            .byte	3
00730                                           ! 438  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00731 0283                        6A            .byte	$6A
00732 0284                        01            .byte	1
00733 0285                        04            .byte	4
00734 0286                        04            .byte	4
00735 0287                      A000            .word	$A000
00736 0289                        FF            .byte	$FF
00737 028A                        02            .byte	2
00738                                           ! 439 };
00739                                           !BCC_EOS
00740                                           ! 440 static Bit8u line_to_vpti[15 +1]={
00741                       0000028B            _line_to_vpti:
00742                                           ! 441     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00743 028B                        17            .byte	$17
00744 028C                        17            .byte	$17
00745 028D                        18            .byte	$18
00746 028E                        18            .byte	$18
00747 028F                        04            .byte	4
00748 0290                        05            .byte	5
00749 0291                        06            .byte	6
00750 0292                        07            .byte	7
00751                                           ! 442     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00752 0293                        0D            .byte	$D
00753 0294                        0E            .byte	$E
00754 0295                        11            .byte	$11
00755 0296                        12            .byte	$12
00756 0297                        1A            .byte	$1A
00757 0298                        1B            .byte	$1B
00758 0299                        1C            .byte	$1C
00759 029A                        1D            .byte	$1D
00760                                           ! 443 };
00761                                           !BCC_EOS
00762                                           ! 444 static Bit8u dac_regs[3 +1]=
00763                                           ! 445 {0x3f,0x3f,0x3f,0xff};
00764                       0000029B            _dac_regs:
00765 029B                        3F            .byte	$3F
00766 029C                        3F            .byte	$3F
00767 029D                        3F            .byte	$3F
00768 029E                        FF            .byte	$FF
00769                                           !BCC_EOS
00770                                           ! 446 typedef struct {
00771                                           ! 447     Bit8u twidth;
00772                                           !BCC_EOS
00773                                           ! 448     Bit8u theightm1;
00774                                           !BCC_EOS
00775                                           ! 449     Bit8u cheight;
00776                                           !BCC_EOS
00777                                           ! 450     Bit8u
00778                                           ! 450  slength_l;
00779                                           !BCC_EOS
00780                                           ! 451     Bit8u slength_h;
00781                                           !BCC_EOS
00782                                           ! 452     Bit8u sequ_regs[4];
00783                                           !BCC_EOS
00784                                           ! 453     Bit8u miscreg;
00785                                           !BCC_EOS
00786                                           ! 454     Bit8u crtc_regs[25];
00787                                           !BCC_EOS
00788                                           ! 455     Bit8u actl_regs[20];
00789                                           !BCC_EOS
00790                                           ! 456     Bit8u grdc_regs[9];
00791                                           !BCC_EOS
00792                                           ! 457 } VideoParamTableEntry;
00793                                           !BCC_EOS
00794                                           ! 458 static VideoParamTableEntry video_param_table[30] = {
00795                       0000029F            _video_param_table:
00796                                           ! 459 {
00797                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00798 029F                        00            .byte	0
00799 02A0                        00            .byte	0
00800 02A1                        00            .byte	0
00801 02A2                        00            .byte	0
00802 02A3                        00            .byte	0
00803 02A4                        00            .byte	0
00804 02A5                        00            .byte	0
00805 02A6                        00            .byte	0
00806                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00807 02A7                        00            .byte	0
00808 02A8                        00            .byte	0
00809 02A9                        00            .byte	0
00810 02AA                        00            .byte	0
00811 02AB                        00            .byte	0
00812 02AC                        00            .byte	0
00813 02AD                        00            .byte	0
00814 02AE                        00            .byte	0
00815                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00816 02AF                        00            .byte	0
00817 02B0                        00            .byte	0
00818 02B1                        00            .byte	0
00819 02B2                        00            .byte	0
00820 02B3                        00            .byte	0
00821 02B4                        00            .byte	0
00822 02B5                        00            .byte	0
00823 02B6                        00            .byte	0
00824                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00825 02B7                        00            .byte	0
00826 02B8                        00            .byte	0
00827 02B9                        00            .byte	0
00828 02BA                        00            .byte	0
00829 02BB                        00            .byte	0
00830 02BC                        00            .byte	0
00831 02BD                        00            .byte	0
00832 02BE                        00            .byte	0
00833                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00834 02BF                        00            .byte	0
00835 02C0                        00            .byte	0
00836 02C1                        00            .byte	0
00837 02C2                        00            .byte	0
00838 02C3                        00            .byte	0
00839 02C4                        00            .byte	0
00840 02C5                        00            .byte	0
00841 02C6                        00            .byte	0
00842                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00843 02C7                        00            .byte	0
00844 02C8                        00            .byte	0
00845 02C9                        00            .byte	0
00846 02CA                        00            .byte	0
00847 02CB                        00            .byte	0
00848 02CC                        00            .byte	0
00849 02CD                        00            .byte	0
00850 02CE                        00            .byte	0
00851                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00852 02CF                        00            .byte	0
00853 02D0                        00            .byte	0
00854 02D1                        00            .byte	0
00855 02D2                        00            .byte	0
00856 02D3                        00            .byte	0
00857 02D4                        00            .byte	0
00858 02D5                        00            .byte	0
00859 02D6                        00            .byte	0
00860                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00861 02D7                        00            .byte	0
00862 02D8                        00            .byte	0
00863 02D9                        00            .byte	0
00864 02DA                        00            .byte	0
00865 02DB                        00            .byte	0
00866 02DC                        00            .byte	0
00867 02DD                        00            .byte	0
00868 02DE                        00            .byte	0
00869                                           ! 468 },
00870                                           ! 469 {
00871                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00872 02DF                        00            .byte	0
00873 02E0                        00            .byte	0
00874 02E1                        00            .byte	0
00875 02E2                        00            .byte	0
00876 02E3                        00            .byte	0
00877 02E4                        00            .byte	0
00878 02E5                        00            .byte	0
00879 02E6                        00            .byte	0
00880                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00881 02E7                        00            .byte	0
00882 02E8                        00            .byte	0
00883 02E9                        00            .byte	0
00884 02EA                        00            .byte	0
00885 02EB                        00            .byte	0
00886 02EC                        00            .byte	0
00887 02ED                        00            .byte	0
00888 02EE                        00            .byte	0
00889                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00890 02EF                        00            .byte	0
00891 02F0                        00            .byte	0
00892 02F1                        00            .byte	0
00893 02F2                        00            .byte	0
00894 02F3                        00            .byte	0
00895 02F4                        00            .byte	0
00896 02F5                        00            .byte	0
00897 02F6                        00            .byte	0
00898                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00899 02F7                        00            .byte	0
00900 02F8                        00            .byte	0
00901 02F9                        00            .byte	0
00902 02FA                        00            .byte	0
00903 02FB                        00            .byte	0
00904 02FC                        00            .byte	0
00905 02FD                        00            .byte	0
00906 02FE                        00            .byte	0
00907                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00908 02FF                        00            .byte	0
00909 0300                        00            .byte	0
00910 0301                        00            .byte	0
00911 0302                        00            .byte	0
00912 0303                        00            .byte	0
00913 0304                        00            .byte	0
00914 0305                        00            .byte	0
00915 0306                        00            .byte	0
00916                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00917 0307                        00            .byte	0
00918 0308                        00            .byte	0
00919 0309                        00            .byte	0
00920 030A                        00            .byte	0
00921 030B                        00            .byte	0
00922 030C                        00            .byte	0
00923 030D                        00            .byte	0
00924 030E                        00            .byte	0
00925                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00926 030F                        00            .byte	0
00927 0310                        00            .byte	0
00928 0311                        00            .byte	0
00929 0312                        00            .byte	0
00930 0313                        00            .byte	0
00931 0314                        00            .byte	0
00932 0315                        00            .byte	0
00933 0316                        00            .byte	0
00934                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00935 0317                        00            .byte	0
00936 0318                        00            .byte	0
00937 0319                        00            .byte	0
00938 031A                        00            .byte	0
00939 031B                        00            .byte	0
00940 031C                        00            .byte	0
00941 031D                        00            .byte	0
00942 031E                        00            .byte	0
00943                                           ! 478 },
00944                                           ! 479 {
00945                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00946 031F                        00            .byte	0
00947 0320                        00            .byte	0
00948 0321                        00            .byte	0
00949 0322                        00            .byte	0
00950 0323                        00            .byte	0
00951 0324                        00            .byte	0
00952 0325                        00            .byte	0
00953 0326                        00            .byte	0
00954                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00955 0327                        00            .byte	0
00956 0328                        00            .byte	0
00957 0329                        00            .byte	0
00958 032A                        00            .byte	0
00959 032B                        00            .byte	0
00960 032C                        00            .byte	0
00961 032D                        00            .byte	0
00962 032E                        00            .byte	0
00963                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00964 032F                        00            .byte	0
00965 0330                        00            .byte	0
00966 0331                        00            .byte	0
00967 0332                        00            .byte	0
00968 0333                        00            .byte	0
00969 0334                        00            .byte	0
00970 0335                        00            .byte	0
00971 0336                        00            .byte	0
00972                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00973 0337                        00            .byte	0
00974 0338                        00            .byte	0
00975 0339                        00            .byte	0
00976 033A                        00            .byte	0
00977 033B                        00            .byte	0
00978 033C                        00            .byte	0
00979 033D                        00            .byte	0
00980 033E                        00            .byte	0
00981                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00982 033F                        00            .byte	0
00983 0340                        00            .byte	0
00984 0341                        00            .byte	0
00985 0342                        00            .byte	0
00986 0343                        00            .byte	0
00987 0344                        00            .byte	0
00988 0345                        00            .byte	0
00989 0346                        00            .byte	0
00990                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00991 0347                        00            .byte	0
00992 0348                        00            .byte	0
00993 0349                        00            .byte	0
00994 034A                        00            .byte	0
00995 034B                        00            .byte	0
00996 034C                        00            .byte	0
00997 034D                        00            .byte	0
00998 034E                        00            .byte	0
00999                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01000 034F                        00            .byte	0
01001 0350                        00            .byte	0
01002 0351                        00            .byte	0
01003 0352                        00            .byte	0
01004 0353                        00            .byte	0
01005 0354                        00            .byte	0
01006 0355                        00            .byte	0
01007 0356                        00            .byte	0
01008                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01009 0357                        00            .byte	0
01010 0358                        00            .byte	0
01011 0359                        00            .byte	0
01012 035A                        00            .byte	0
01013 035B                        00            .byte	0
01014 035C                        00            .byte	0
01015 035D                        00            .byte	0
01016 035E                        00            .byte	0
01017                                           ! 488 },
01018                                           ! 489 {
01019                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01020 035F                        00            .byte	0
01021 0360                        00            .byte	0
01022 0361                        00            .byte	0
01023 0362                        00            .byte	0
01024 0363                        00            .byte	0
01025 0364                        00            .byte	0
01026 0365                        00            .byte	0
01027 0366                        00            .byte	0
01028                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01029 0367                        00            .byte	0
01030 0368                        00            .byte	0
01031 0369                        00            .byte	0
01032 036A                        00            .byte	0
01033 036B                        00            .byte	0
01034 036C                        00            .byte	0
01035 036D                        00            .byte	0
01036 036E                        00            .byte	0
01037                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01038 036F                        00            .byte	0
01039 0370                        00            .byte	0
01040 0371                        00            .byte	0
01041 0372                        00            .byte	0
01042 0373                        00            .byte	0
01043 0374                        00            .byte	0
01044 0375                        00            .byte	0
01045 0376                        00            .byte	0
01046                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01047 0377                        00            .byte	0
01048 0378                        00            .byte	0
01049 0379                        00            .byte	0
01050 037A                        00            .byte	0
01051 037B                        00            .byte	0
01052 037C                        00            .byte	0
01053 037D                        00            .byte	0
01054 037E                        00            .byte	0
01055                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01056 037F                        00            .byte	0
01057 0380                        00            .byte	0
01058 0381                        00            .byte	0
01059 0382                        00            .byte	0
01060 0383                        00            .byte	0
01061 0384                        00            .byte	0
01062 0385                        00            .byte	0
01063 0386                        00            .byte	0
01064                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01065 0387                        00            .byte	0
01066 0388                        00            .byte	0
01067 0389                        00            .byte	0
01068 038A                        00            .byte	0
01069 038B                        00            .byte	0
01070 038C                        00            .byte	0
01071 038D                        00            .byte	0
01072 038E                        00            .byte	0
01073                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01074 038F                        00            .byte	0
01075 0390                        00            .byte	0
01076 0391                        00            .byte	0
01077 0392                        00            .byte	0
01078 0393                        00            .byte	0
01079 0394                        00            .byte	0
01080 0395                        00            .byte	0
01081 0396                        00            .byte	0
01082                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01083 0397                        00            .byte	0
01084 0398                        00            .byte	0
01085 0399                        00            .byte	0
01086 039A                        00            .byte	0
01087 039B                        00            .byte	0
01088 039C                        00            .byte	0
01089 039D                        00            .byte	0
01090 039E                        00            .byte	0
01091                                           ! 498 },
01092                                           ! 499 {
01093                                           ! 500  40, 24, 8, 0x00, 0x08,
01094 039F                        28            .byte	$28
01095 03A0                        18            .byte	$18
01096 03A1                        08            .byte	8
01097 03A2                        00            .byte	0
01098 03A3                        08            .byte	8
01099                                           ! 501  0x09, 0x03, 0x00, 0x02,
01100 03A4                        09            .byte	9
01101 03A5                        03            .byte	3
01102 03A6                        00            .byte	0
01103 03A7                        02            .byte	2
01104                                           ! 502  0x63,
01105 03A8                        63            .byte	$63
01106                                           ! 503  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01107 03A9                        2D            .byte	$2D
01108 03AA                        27            .byte	$27
01109 03AB                        28            .byte	$28
01110 03AC                        90            .byte	$90
01111 03AD                        2B            .byte	$2B
01112 03AE                        80            .byte	$80
01113 03AF                        BF            .byte	$BF
01114 03B0                        1F            .byte	$1F
01115                                           ! 504  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01116 03B1                        00            .byte	0
01117 03B2                        C1            .byte	$C1
01118 03B3                        00            .byte	0
01119 03B4                        00            .byte	0
01120 03B5                        00            .byte	0
01121 03B6                        00            .byte	0
01122 03B7                        00            .byte	0
01123 03B8                        00            .byte	0
01124                                           ! 505  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01125 03B9                        9C            .byte	$9C
01126 03BA                        8E            .byte	$8E
01127 03BB                        8F            .byte	$8F
01128 03BC                        14            .byte	$14
01129 03BD                        00            .byte	0
01130 03BE                        96            .byte	$96
01131 03BF                        B9            .byte	$B9
01132 03C0                        A2            .byte	$A2
01133                                           ! 506  0xff,
01134 03C1                        FF            .byte	$FF
01135                                           ! 507  0x00, 0x13, 0x15, 0
01136 03C2                        00            .byte	0
01137 03C3                        13            .byte	$13
01138 03C4                        15            .byte	$15
01139                                           ! 507 x17, 0x02, 0x04, 0x06, 0x07,
01140 03C5                        17            .byte	$17
01141 03C6                        02            .byte	2
01142 03C7                        04            .byte	4
01143 03C8                        06            .byte	6
01144 03C9                        07            .byte	7
01145                                           ! 508  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01146 03CA                        10            .byte	$10
01147 03CB                        11            .byte	$11
01148 03CC                        12            .byte	$12
01149 03CD                        13            .byte	$13
01150 03CE                        14            .byte	$14
01151 03CF                        15            .byte	$15
01152 03D0                        16            .byte	$16
01153 03D1                        17            .byte	$17
01154                                           ! 509  0x01, 0x00, 0x03, 0x00,
01155 03D2                        01            .byte	1
01156 03D3                        00            .byte	0
01157 03D4                        03            .byte	3
01158 03D5                        00            .byte	0
01159                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01160 03D6                        00            .byte	0
01161 03D7                        00            .byte	0
01162 03D8                        00            .byte	0
01163 03D9                        00            .byte	0
01164 03DA                        00            .byte	0
01165 03DB                        30            .byte	$30
01166 03DC                        0F            .byte	$F
01167 03DD                        0F            .byte	$F
01168 03DE                        FF            .byte	$FF
01169                                           ! 511 },
01170                                           ! 512 {
01171                                           ! 513  40, 24, 8, 0x00, 0x08,
01172 03DF                        28            .byte	$28
01173 03E0                        18            .byte	$18
01174 03E1                        08            .byte	8
01175 03E2                        00            .byte	0
01176 03E3                        08            .byte	8
01177                                           ! 514  0x09, 0x03, 0x00, 0x02,
01178 03E4                        09            .byte	9
01179 03E5                        03            .byte	3
01180 03E6                        00            .byte	0
01181 03E7                        02            .byte	2
01182                                           ! 515  0x63,
01183 03E8                        63            .byte	$63
01184                                           ! 516  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01185 03E9                        2D            .byte	$2D
01186 03EA                        27            .byte	$27
01187 03EB                        28            .byte	$28
01188 03EC                        90            .byte	$90
01189 03ED                        2B            .byte	$2B
01190 03EE                        80            .byte	$80
01191 03EF                        BF            .byte	$BF
01192 03F0                        1F            .byte	$1F
01193                                           ! 517  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01194 03F1                        00            .byte	0
01195 03F2                        C1            .byte	$C1
01196 03F3                        00            .byte	0
01197 03F4                        00            .byte	0
01198 03F5                        00            .byte	0
01199 03F6                        00            .byte	0
01200 03F7                        00            .byte	0
01201 03F8                        00            .byte	0
01202                                           ! 518  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01203 03F9                        9C            .byte	$9C
01204 03FA                        8E            .byte	$8E
01205 03FB                        8F            .byte	$8F
01206 03FC                        14            .byte	$14
01207 03FD                        00            .byte	0
01208 03FE                        96            .byte	$96
01209 03FF                        B9            .byte	$B9
01210 0400                        A2            .byte	$A2
01211                                           ! 519  0xff,
01212 0401                        FF            .byte	$FF
01213                                           ! 520  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01214 0402                        00            .byte	0
01215 0403                        13            .byte	$13
01216 0404                        15            .byte	$15
01217 0405                        17            .byte	$17
01218 0406                        02            .byte	2
01219 0407                        04            .byte	4
01220 0408                        06            .byte	6
01221 0409                        07            .byte	7
01222                                           ! 521  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01223 040A                        10            .byte	$10
01224 040B                        11            .byte	$11
01225 040C                        12            .byte	$12
01226 040D                        13            .byte	$13
01227 040E                        14            .byte	$14
01228 040F                        15            .byte	$15
01229 0410                        16            .byte	$16
01230 0411                        17            .byte	$17
01231                                           ! 522  0x01, 0x00, 0x03, 0x00,
01232 0412                        01            .byte	1
01233 0413                        00            .byte	0
01234 0414                        03            .byte	3
01235 0415                        00            .byte	0
01236                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01237 0416                        00            .byte	0
01238 0417                        00            .byte	0
01239 0418                        00            .byte	0
01240 0419                        00            .byte	0
01241 041A                        00            .byte	0
01242 041B                        30            .byte	$30
01243 041C                        0F            .byte	$F
01244 041D                        0F            .byte	$F
01245 041E                        FF            .byte	$FF
01246                                           ! 524 },
01247                                           ! 525 {
01248                                           ! 526  80, 24, 8, 0x00, 0x10,
01249 041F                        50            .byte	$50
01250 0420                        18            .byte	$18
01251 0421                        08            .byte	8
01252 0422                        00            .byte	0
01253 0423                        10            .byte	$10
01254                                           ! 527  0x01, 0x01, 0x00, 0x06,
01255 0424                        01            .byte	1
01256 0425                        01            .byte	1
01257 0426                        00            .byte	0
01258 0427                        06            .byte	6
01259                                           ! 528  0x63,
01260 0428                        63            .byte	$63
01261                                           ! 529  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01262 0429                        5F            .byte	$5F
01263 042A                        4F            .byte	$4F
01264 042B                        50            .byte	$50
01265 042C                        82            .byte	$82
01266 042D                        54            .byte	$54
01267 042E                        80            .byte	$80
01268 042F                        BF            .byte	$BF
01269 0430                        1F            .byte	$1F
01270                                           ! 530  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01271 0431                        00            .byte	0
01272 0432                        C1            .byte	$C1
01273 0433                        00            .byte	0
01274 0434                        00            .byte	0
01275 0435                        00            .byte	0
01276 0436                        00            .byte	0
01277 0437                        00            .byte	0
01278 0438                        00            .byte	0
01279                                           ! 531  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01280 0439                        9C            .byte	$9C
01281 043A                        8E            .byte	$8E
01282 043B                        8F            .byte	$8F
01283 043C                        28            .byte	$28
01284 043D                        00            .byte	0
01285 043E                        96            .byte	$96
01286 043F                        B9            .byte	$B9
01287 0440                        C2            .byte	$C2
01288                                           ! 532  0xff,
01289 0441                        FF            .byte	$FF
01290                                           ! 533  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01291 0442                        00            .byte	0
01292 0443                        17            .byte	$17
01293 0444                        17            .byte	$17
01294 0445                        17            .byte	$17
01295 0446                        17            .byte	$17
01296 0447                        17            .byte	$17
01297 0448                        17            .byte	$17
01298 0449                        17            .byte	$17
01299                                           ! 534  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01300 044A                        17            .byte	$17
01301 044B                        17            .byte	$17
01302 044C                        17            .byte	$17
01303 044D                        17            .byte	$17
01304 044E                        17            .byte	$17
01305 044F                        17            .byte	$17
01306 0450                        17            .byte	$17
01307 0451                        17            .byte	$17
01308                                           ! 535  0x01, 0x00, 0x01, 0x00,
01309 0452                        01            .byte	1
01310 0453                        00            .byte	0
01311 0454                        01            .byte	1
01312 0455                        00            .byte	0
01313                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01314 0456                        00            .byte	0
01315 0457                        00            .byte	0
01316 0458                        00            .byte	0
01317 0459                        00            .byte	0
01318 045A                        00            .byte	0
01319 045B                        00            .byte	0
01320 045C                        0D            .byte	$D
01321 045D                        0F            .byte	$F
01322 045E                        FF            .byte	$FF
01323                                           ! 537 },
01324                                           ! 538 {
01325                                           ! 539  80, 24, 16, 0x00, 0x10,
01326 045F                        50            .byte	$50
01327 0460                        18            .byte	$18
01328 0461                        10            .byte	$10
01329 0462                        00            .byte	0
01330 0463                        10            .byte	$10
01331                                           ! 540  0x00, 0x03, 0x00, 0x02,
01332 0464                        00            .byte	0
01333 0465                        03            .byte	3
01334 0466                        00            .byte	0
01335 0467                        02            .byte	2
01336                                           ! 541  0x66,
01337 0468                        66            .byte	$66
01338                                           ! 542  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01339 0469                        5F            .byte	$5F
01340 046A                        4F            .byte	$4F
01341 046B                        50            .byte	$50
01342 046C                        82            .byte	$82
01343 046D                        55            .byte	$55
01344 046E                        81            .byte	$81
01345 046F                        BF            .byte	$BF
01346 0470                        1F            .byte	$1F
01347                                           ! 543  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01348 0471                        00            .byte	0
01349 0472                        4F            .byte	$4F
01350 0473                        0D            .byte	$D
01351 0474                        0E            .byte	$E
01352 0475                        00            .byte	0
01353 0476                        00            .byte	0
01354 0477                        00            .byte	0
01355 0478                        00            .byte	0
01356                                           ! 544  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01357 0479                        9C            .byte	$9C
01358 047A                        8E            .byte	$8E
01359 047B                        8F            .byte	$8F
01360 047C                        28            .byte	$28
01361 047D                        0F            .byte	$F
01362 047E                        96            .byte	$96
01363 047F                        B9            .byte	$B9
01364 0480                        A3            .byte	$A3
01365                                           ! 545  0xff,
01366 0481                        FF            .byte	$FF
01367                                           ! 546  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01368 0482                        00            .byte	0
01369 0483                        08            .byte	8
01370 0484                        08            .byte	8
01371 0485                        08            .byte	8
01372 0486                        08            .byte	8
01373 0487                        08            .byte	8
01374 0488                        08            .byte	8
01375 0489                        08            .byte	8
01376                                           ! 547  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01377 048A                        10            .byte	$10
01378 048B                        18            .byte	$18
01379 048C                        18            .byte	$18
01380 048D                        18            .byte	$18
01381 048E                        18            .byte	$18
01382 048F                        18            .byte	$18
01383 0490                        18            .byte	$18
01384 0491                        18            .byte	$18
01385                                           ! 548  0x0e, 0x00, 0x0f, 0x08,
01386 0492                        0E            .byte	$E
01387 0493                        00            .byte	0
01388 0494                        0F            .byte	$F
01389 0495                        08            .byte	8
01390                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01391 0496                        00            .byte	0
01392 0497                        00            .byte	0
01393 0498                        00            .byte	0
01394 0499                        00            .byte	0
01395 049A                        00            .byte	0
01396 049B                        10            .byte	$10
01397 049C                        0A            .byte	$A
01398 049D                        0F            .byte	$F
01399 049E                        FF            .byte	$FF
01400                                           ! 550 },
01401                                           ! 551 {
01402                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01403 049F                        00            .byte	0
01404 04A0                        00            .byte	0
01405 04A1                        00            .byte	0
01406 04A2                        00            .byte	0
01407 04A3                        00            .byte	0
01408 04A4                        00            .byte	0
01409 04A5                        00            .byte	0
01410 04A6                        00            .byte	0
01411                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01412 04A7                        00            .byte	0
01413 04A8                        00            .byte	0
01414 04A9                        00            .byte	0
01415 04AA                        00            .byte	0
01416 04AB                        00            .byte	0
01417 04AC                        00            .byte	0
01418 04AD                        00            .byte	0
01419 04AE                        00            .byte	0
01420                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01421 04AF                        00            .byte	0
01422 04B0                        00            .byte	0
01423 04B1                        00            .byte	0
01424 04B2                        00            .byte	0
01425 04B3                        00            .byte	0
01426 04B4                        00            .byte	0
01427 04B5                        00            .byte	0
01428 04B6                        00            .byte	0
01429                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01430 04B7                        00            .byte	0
01431 04B8                        00            .byte	0
01432 04B9                        00            .byte	0
01433 04BA                        00            .byte	0
01434 04BB                        00            .byte	0
01435 04BC                        00            .byte	0
01436 04BD                        00            .byte	0
01437 04BE                        00            .byte	0
01438                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01439 04BF                        00            .byte	0
01440 04C0                        00            .byte	0
01441 04C1                        00            .byte	0
01442 04C2                        00            .byte	0
01443 04C3                        00            .byte	0
01444 04C4                        00            .byte	0
01445 04C5                        00            .byte	0
01446 04C6                        00            .byte	0
01447                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01448 04C7                        00            .byte	0
01449 04C8                        00            .byte	0
01450 04C9                        00            .byte	0
01451 04CA                        00            .byte	0
01452 04CB                        00            .byte	0
01453 04CC                        00            .byte	0
01454 04CD                        00            .byte	0
01455 04CE                        00            .byte	0
01456                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01457 04CF                        00            .byte	0
01458 04D0                        00            .byte	0
01459 04D1                        00            .byte	0
01460 04D2                        00            .byte	0
01461 04D3                        00            .byte	0
01462 04D4                        00            .byte	0
01463 04D5                        00            .byte	0
01464 04D6                        00            .byte	0
01465                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01466 04D7                        00            .byte	0
01467 04D8                        00            .byte	0
01468 04D9                        00            .byte	0
01469 04DA                        00            .byte	0
01470 04DB                        00            .byte	0
01471 04DC                        00            .byte	0
01472 04DD                        00            .byte	0
01473 04DE                        00            .byte	0
01474                                           ! 560 },
01475                                           ! 561 {
01476                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01477 04DF                        00            .byte	0
01478 04E0                        00            .byte	0
01479 04E1                        00            .byte	0
01480 04E2                        00            .byte	0
01481 04E3                        00            .byte	0
01482 04E4                        00            .byte	0
01483 04E5                        00            .byte	0
01484 04E6                        00            .byte	0
01485                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01486 04E7                        00            .byte	0
01487 04E8                        00            .byte	0
01488 04E9                        00            .byte	0
01489 04EA                        00            .byte	0
01490 04EB                        00            .byte	0
01491 04EC                        00            .byte	0
01492 04ED                        00            .byte	0
01493 04EE                        00            .byte	0
01494                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01495 04EF                        00            .byte	0
01496 04F0                        00            .byte	0
01497 04F1                        00            .byte	0
01498 04F2                        00            .byte	0
01499 04F3                        00            .byte	0
01500 04F4                        00            .byte	0
01501 04F5                        00            .byte	0
01502 04F6                        00            .byte	0
01503                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01504 04F7                        00            .byte	0
01505 04F8                        00            .byte	0
01506 04F9                        00            .byte	0
01507 04FA                        00            .byte	0
01508 04FB                        00            .byte	0
01509 04FC                        00            .byte	0
01510 04FD                        00            .byte	0
01511 04FE                        00            .byte	0
01512                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01513 04FF                        00            .byte	0
01514 0500                        00            .byte	0
01515 0501                        00            .byte	0
01516 0502                        00            .byte	0
01517 0503                        00            .byte	0
01518 0504                        00            .byte	0
01519 0505                        00            .byte	0
01520 0506                        00            .byte	0
01521                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01522 0507                        00            .byte	0
01523 0508                        00            .byte	0
01524 0509                        00            .byte	0
01525 050A                        00            .byte	0
01526 050B                        00            .byte	0
01527 050C                        00            .byte	0
01528 050D                        00            .byte	0
01529 050E                        00            .byte	0
01530                                           ! 568  0x00, 0x00, 0
01531 050F                        00            .byte	0
01532 0510                        00            .byte	0
01533                                           ! 568 x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01534 0511                        00            .byte	0
01535 0512                        00            .byte	0
01536 0513                        00            .byte	0
01537 0514                        00            .byte	0
01538 0515                        00            .byte	0
01539 0516                        00            .byte	0
01540                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01541 0517                        00            .byte	0
01542 0518                        00            .byte	0
01543 0519                        00            .byte	0
01544 051A                        00            .byte	0
01545 051B                        00            .byte	0
01546 051C                        00            .byte	0
01547 051D                        00            .byte	0
01548 051E                        00            .byte	0
01549                                           ! 570 },
01550                                           ! 571 {
01551                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01552 051F                        00            .byte	0
01553 0520                        00            .byte	0
01554 0521                        00            .byte	0
01555 0522                        00            .byte	0
01556 0523                        00            .byte	0
01557 0524                        00            .byte	0
01558 0525                        00            .byte	0
01559 0526                        00            .byte	0
01560                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01561 0527                        00            .byte	0
01562 0528                        00            .byte	0
01563 0529                        00            .byte	0
01564 052A                        00            .byte	0
01565 052B                        00            .byte	0
01566 052C                        00            .byte	0
01567 052D                        00            .byte	0
01568 052E                        00            .byte	0
01569                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01570 052F                        00            .byte	0
01571 0530                        00            .byte	0
01572 0531                        00            .byte	0
01573 0532                        00            .byte	0
01574 0533                        00            .byte	0
01575 0534                        00            .byte	0
01576 0535                        00            .byte	0
01577 0536                        00            .byte	0
01578                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01579 0537                        00            .byte	0
01580 0538                        00            .byte	0
01581 0539                        00            .byte	0
01582 053A                        00            .byte	0
01583 053B                        00            .byte	0
01584 053C                        00            .byte	0
01585 053D                        00            .byte	0
01586 053E                        00            .byte	0
01587                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01588 053F                        00            .byte	0
01589 0540                        00            .byte	0
01590 0541                        00            .byte	0
01591 0542                        00            .byte	0
01592 0543                        00            .byte	0
01593 0544                        00            .byte	0
01594 0545                        00            .byte	0
01595 0546                        00            .byte	0
01596                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01597 0547                        00            .byte	0
01598 0548                        00            .byte	0
01599 0549                        00            .byte	0
01600 054A                        00            .byte	0
01601 054B                        00            .byte	0
01602 054C                        00            .byte	0
01603 054D                        00            .byte	0
01604 054E                        00            .byte	0
01605                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01606 054F                        00            .byte	0
01607 0550                        00            .byte	0
01608 0551                        00            .byte	0
01609 0552                        00            .byte	0
01610 0553                        00            .byte	0
01611 0554                        00            .byte	0
01612 0555                        00            .byte	0
01613 0556                        00            .byte	0
01614                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01615 0557                        00            .byte	0
01616 0558                        00            .byte	0
01617 0559                        00            .byte	0
01618 055A                        00            .byte	0
01619 055B                        00            .byte	0
01620 055C                        00            .byte	0
01621 055D                        00            .byte	0
01622 055E                        00            .byte	0
01623                                           ! 580 },
01624                                           ! 581 {
01625                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01626 055F                        00            .byte	0
01627 0560                        00            .byte	0
01628 0561                        00            .byte	0
01629 0562                        00            .byte	0
01630 0563                        00            .byte	0
01631 0564                        00            .byte	0
01632 0565                        00            .byte	0
01633 0566                        00            .byte	0
01634                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01635 0567                        00            .byte	0
01636 0568                        00            .byte	0
01637 0569                        00            .byte	0
01638 056A                        00            .byte	0
01639 056B                        00            .byte	0
01640 056C                        00            .byte	0
01641 056D                        00            .byte	0
01642 056E                        00            .byte	0
01643                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01644 056F                        00            .byte	0
01645 0570                        00            .byte	0
01646 0571                        00            .byte	0
01647 0572                        00            .byte	0
01648 0573                        00            .byte	0
01649 0574                        00            .byte	0
01650 0575                        00            .byte	0
01651 0576                        00            .byte	0
01652                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01653 0577                        00            .byte	0
01654 0578                        00            .byte	0
01655 0579                        00            .byte	0
01656 057A                        00            .byte	0
01657 057B                        00            .byte	0
01658 057C                        00            .byte	0
01659 057D                        00            .byte	0
01660 057E                        00            .byte	0
01661                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01662 057F                        00            .byte	0
01663 0580                        00            .byte	0
01664 0581                        00            .byte	0
01665 0582                        00            .byte	0
01666 0583                        00            .byte	0
01667 0584                        00            .byte	0
01668 0585                        00            .byte	0
01669 0586                        00            .byte	0
01670                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01671 0587                        00            .byte	0
01672 0588                        00            .byte	0
01673 0589                        00            .byte	0
01674 058A                        00            .byte	0
01675 058B                        00            .byte	0
01676 058C                        00            .byte	0
01677 058D                        00            .byte	0
01678 058E                        00            .byte	0
01679                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01680 058F                        00            .byte	0
01681 0590                        00            .byte	0
01682 0591                        00            .byte	0
01683 0592                        00            .byte	0
01684 0593                        00            .byte	0
01685 0594                        00            .byte	0
01686 0595                        00            .byte	0
01687 0596                        00            .byte	0
01688                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01689 0597                        00            .byte	0
01690 0598                        00            .byte	0
01691 0599                        00            .byte	0
01692 059A                        00            .byte	0
01693 059B                        00            .byte	0
01694 059C                        00            .byte	0
01695 059D                        00            .byte	0
01696 059E                        00            .byte	0
01697                                           ! 590 },
01698                                           ! 591 {
01699                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 059F                        00            .byte	0
01701 05A0                        00            .byte	0
01702 05A1                        00            .byte	0
01703 05A2                        00            .byte	0
01704 05A3                        00            .byte	0
01705 05A4                        00            .byte	0
01706 05A5                        00            .byte	0
01707 05A6                        00            .byte	0
01708                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01709 05A7                        00            .byte	0
01710 05A8                        00            .byte	0
01711 05A9                        00            .byte	0
01712 05AA                        00            .byte	0
01713 05AB                        00            .byte	0
01714 05AC                        00            .byte	0
01715 05AD                        00            .byte	0
01716 05AE                        00            .byte	0
01717                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01718 05AF                        00            .byte	0
01719 05B0                        00            .byte	0
01720 05B1                        00            .byte	0
01721 05B2                        00            .byte	0
01722 05B3                        00            .byte	0
01723 05B4                        00            .byte	0
01724 05B5                        00            .byte	0
01725 05B6                        00            .byte	0
01726                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01727 05B7                        00            .byte	0
01728 05B8                        00            .byte	0
01729 05B9                        00            .byte	0
01730 05BA                        00            .byte	0
01731 05BB                        00            .byte	0
01732 05BC                        00            .byte	0
01733 05BD                        00            .byte	0
01734 05BE                        00            .byte	0
01735                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01736 05BF                        00            .byte	0
01737 05C0                        00            .byte	0
01738 05C1                        00            .byte	0
01739 05C2                        00            .byte	0
01740 05C3                        00            .byte	0
01741 05C4                        00            .byte	0
01742 05C5                        00            .byte	0
01743 05C6                        00            .byte	0
01744                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01745 05C7                        00            .byte	0
01746 05C8                        00            .byte	0
01747 05C9                        00            .byte	0
01748 05CA                        00            .byte	0
01749 05CB                        00            .byte	0
01750 05CC                        00            .byte	0
01751 05CD                        00            .byte	0
01752 05CE                        00            .byte	0
01753                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01754 05CF                        00            .byte	0
01755 05D0                        00            .byte	0
01756 05D1                        00            .byte	0
01757 05D2                        00            .byte	0
01758 05D3                        00            .byte	0
01759 05D4                        00            .byte	0
01760 05D5                        00            .byte	0
01761 05D6                        00            .byte	0
01762                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01763 05D7                        00            .byte	0
01764 05D8                        00            .byte	0
01765 05D9                        00            .byte	0
01766 05DA                        00            .byte	0
01767 05DB                        00            .byte	0
01768 05DC                        00            .byte	0
01769 05DD                        00            .byte	0
01770 05DE                        00            .byte	0
01771                                           ! 600 },
01772                                           ! 601 {
01773                                           ! 602  40, 24, 8, 0x00, 0x20,
01774 05DF                        28            .byte	$28
01775 05E0                        18            .byte	$18
01776 05E1                        08            .byte	8
01777 05E2                        00            .byte	0
01778 05E3                        20            .byte	$20
01779                                           ! 603  0x09, 0x0f, 0x00, 0x06,
01780 05E4                        09            .byte	9
01781 05E5                        0F            .byte	$F
01782 05E6                        00            .byte	0
01783 05E7                        06            .byte	6
01784                                           ! 604  0x63,
01785 05E8                        63            .byte	$63
01786                                           ! 605  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01787 05E9                        2D            .byte	$2D
01788 05EA                        27            .byte	$27
01789 05EB                        28            .byte	$28
01790 05EC                        90            .byte	$90
01791 05ED                        2B            .byte	$2B
01792 05EE                        80            .byte	$80
01793 05EF                        BF            .byte	$BF
01794 05F0                        1F            .byte	$1F
01795                                           ! 606  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01796 05F1                        00            .byte	0
01797 05F2                        C0            .byte	$C0
01798 05F3                        00            .byte	0
01799 05F4                        00            .byte	0
01800 05F5                        00            .byte	0
01801 05F6                        00            .byte	0
01802 05F7                        00            .byte	0
01803 05F8                        00            .byte	0
01804                                           ! 607  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01805 05F9                        9C            .byte	$9C
01806 05FA                        8E            .byte	$8E
01807 05FB                        8F            .byte	$8F
01808 05FC                        14            .byte	$14
01809 05FD                        00            .byte	0
01810 05FE                        96            .byte	$96
01811 05FF                        B9            .byte	$B9
01812 0600                        E3            .byte	$E3
01813                                           ! 608  0xff,
01814 0601                        FF            .byte	$FF
01815                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01816 0602                        00            .byte	0
01817 0603                        01            .byte	1
01818 0604                        02            .byte	2
01819 0605                        03            .byte	3
01820 0606                        04            .byte	4
01821 0607                        05            .byte	5
01822 0608                        06            .byte	6
01823 0609                        07            .byte	7
01824                                           ! 610  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01825 060A                        10            .byte	$10
01826 060B                        11            .byte	$11
01827 060C                        12            .byte	$12
01828 060D                        13            .byte	$13
01829 060E                        14            .byte	$14
01830 060F                        15            .byte	$15
01831 0610                        16            .byte	$16
01832 0611                        17            .byte	$17
01833                                           ! 611  0x01, 0x00, 0x0f, 0x00,
01834 0612                        01            .byte	1
01835 0613                        00            .byte	0
01836 0614                        0F            .byte	$F
01837 0615                        00            .byte	0
01838                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01839 0616                        00            .byte	0
01840 0617                        00            .byte	0
01841 0618                        00            .byte	0
01842 0619                        00            .byte	0
01843 061A                        00            .byte	0
01844 061B                        00            .byte	0
01845 061C                        05            .byte	5
01846 061D                        0F            .byte	$F
01847 061E                        FF            .byte	$FF
01848                                           ! 613 },
01849                                           ! 614 {
01850                                           ! 615  80, 24, 8, 0x00, 0x40,
01851 061F                        50            .byte	$50
01852 0620                        18            .byte	$18
01853 0621                        08            .byte	8
01854 0622                        00            .byte	0
01855 0623                        40            .byte	$40
01856                                           ! 616  0x01, 0x0f, 0x00, 0x06,
01857 0624                        01            .byte	1
01858 0625                        0F            .byte	$F
01859 0626                        00            .byte	0
01860 0627                        06            .byte	6
01861                                           ! 617  0x63,
01862 0628                        63            .byte	$63
01863                                           ! 618  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01864 0629                        5F            .byte	$5F
01865 062A                        4F            .byte	$4F
01866 062B                        50            .byte	$50
01867 062C                        82            .byte	$82
01868 062D                        54            .byte	$54
01869 062E                        80            .byte	$80
01870 062F                        BF            .byte	$BF
01871 0630                        1F            .byte	$1F
01872                                           ! 619  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01873 0631                        00            .byte	0
01874 0632                        C0            .byte	$C0
01875 0633                        00            .byte	0
01876 0634                        00            .byte	0
01877 0635                        00            .byte	0
01878 0636                        00            .byte	0
01879 0637                        00            .byte	0
01880 0638                        00            .byte	0
01881                                           ! 620  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01882 0639                        9C            .byte	$9C
01883 063A                        8E            .byte	$8E
01884 063B                        8F            .byte	$8F
01885 063C                        28            .byte	$28
01886 063D                        00            .byte	0
01887 063E                        96            .byte	$96
01888 063F                        B9            .byte	$B9
01889 0640                        E3            .byte	$E3
01890                                           ! 621  0xff,
01891 0641                        FF            .byte	$FF
01892                                           ! 622  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01893 0642                        00            .byte	0
01894 0643                        01            .byte	1
01895 0644                        02            .byte	2
01896 0645                        03            .byte	3
01897 0646                        04            .byte	4
01898 0647                        05            .byte	5
01899 0648                        06            .byte	6
01900 0649                        07            .byte	7
01901                                           ! 623  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01902 064A                        10            .byte	$10
01903 064B                        11            .byte	$11
01904 064C                        12            .byte	$12
01905 064D                        13            .byte	$13
01906 064E                        14            .byte	$14
01907 064F                        15            .byte	$15
01908 0650                        16            .byte	$16
01909 0651                        17            .byte	$17
01910                                           ! 624  0x01, 0x00, 0x0f, 0x00,
01911 0652                        01            .byte	1
01912 0653                        00            .byte	0
01913 0654                        0F            .byte	$F
01914 0655                        00            .byte	0
01915                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
01916 0656                        00            .byte	0
01917 0657                        00            .byte	0
01918 0658                        00            .byte	0
01919 0659                        00            .byte	0
01920 065A                        00            .byte	0
01921 065B                        00            .byte	0
01922                                           ! 625  0x0f, 0xff,
01923 065C                        05            .byte	5
01924 065D                        0F            .byte	$F
01925 065E                        FF            .byte	$FF
01926                                           ! 626 },
01927                                           ! 627 {
01928                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01929 065F                        00            .byte	0
01930 0660                        00            .byte	0
01931 0661                        00            .byte	0
01932 0662                        00            .byte	0
01933 0663                        00            .byte	0
01934 0664                        00            .byte	0
01935 0665                        00            .byte	0
01936 0666                        00            .byte	0
01937                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01938 0667                        00            .byte	0
01939 0668                        00            .byte	0
01940 0669                        00            .byte	0
01941 066A                        00            .byte	0
01942 066B                        00            .byte	0
01943 066C                        00            .byte	0
01944 066D                        00            .byte	0
01945 066E                        00            .byte	0
01946                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01947 066F                        00            .byte	0
01948 0670                        00            .byte	0
01949 0671                        00            .byte	0
01950 0672                        00            .byte	0
01951 0673                        00            .byte	0
01952 0674                        00            .byte	0
01953 0675                        00            .byte	0
01954 0676                        00            .byte	0
01955                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01956 0677                        00            .byte	0
01957 0678                        00            .byte	0
01958 0679                        00            .byte	0
01959 067A                        00            .byte	0
01960 067B                        00            .byte	0
01961 067C                        00            .byte	0
01962 067D                        00            .byte	0
01963 067E                        00            .byte	0
01964                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01965 067F                        00            .byte	0
01966 0680                        00            .byte	0
01967 0681                        00            .byte	0
01968 0682                        00            .byte	0
01969 0683                        00            .byte	0
01970 0684                        00            .byte	0
01971 0685                        00            .byte	0
01972 0686                        00            .byte	0
01973                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01974 0687                        00            .byte	0
01975 0688                        00            .byte	0
01976 0689                        00            .byte	0
01977 068A                        00            .byte	0
01978 068B                        00            .byte	0
01979 068C                        00            .byte	0
01980 068D                        00            .byte	0
01981 068E                        00            .byte	0
01982                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01983 068F                        00            .byte	0
01984 0690                        00            .byte	0
01985 0691                        00            .byte	0
01986 0692                        00            .byte	0
01987 0693                        00            .byte	0
01988 0694                        00            .byte	0
01989 0695                        00            .byte	0
01990 0696                        00            .byte	0
01991                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01992 0697                        00            .byte	0
01993 0698                        00            .byte	0
01994 0699                        00            .byte	0
01995 069A                        00            .byte	0
01996 069B                        00            .byte	0
01997 069C                        00            .byte	0
01998 069D                        00            .byte	0
01999 069E                        00            .byte	0
02000                                           ! 636 },
02001                                           ! 637 {
02002                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02003 069F                        00            .byte	0
02004 06A0                        00            .byte	0
02005 06A1                        00            .byte	0
02006 06A2                        00            .byte	0
02007 06A3                        00            .byte	0
02008 06A4                        00            .byte	0
02009 06A5                        00            .byte	0
02010 06A6                        00            .byte	0
02011                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02012 06A7                        00            .byte	0
02013 06A8                        00            .byte	0
02014 06A9                        00            .byte	0
02015 06AA                        00            .byte	0
02016 06AB                        00            .byte	0
02017 06AC                        00            .byte	0
02018 06AD                        00            .byte	0
02019 06AE                        00            .byte	0
02020                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02021 06AF                        00            .byte	0
02022 06B0                        00            .byte	0
02023 06B1                        00            .byte	0
02024 06B2                        00            .byte	0
02025 06B3                        00            .byte	0
02026 06B4                        00            .byte	0
02027 06B5                        00            .byte	0
02028 06B6                        00            .byte	0
02029                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02030 06B7                        00            .byte	0
02031 06B8                        00            .byte	0
02032 06B9                        00            .byte	0
02033 06BA                        00            .byte	0
02034 06BB                        00            .byte	0
02035 06BC                        00            .byte	0
02036 06BD                        00            .byte	0
02037 06BE                        00            .byte	0
02038                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02039 06BF                        00            .byte	0
02040 06C0                        00            .byte	0
02041 06C1                        00            .byte	0
02042 06C2                        00            .byte	0
02043 06C3                        00            .byte	0
02044 06C4                        00            .byte	0
02045 06C5                        00            .byte	0
02046 06C6                        00            .byte	0
02047                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02048 06C7                        00            .byte	0
02049 06C8                        00            .byte	0
02050 06C9                        00            .byte	0
02051 06CA                        00            .byte	0
02052 06CB                        00            .byte	0
02053 06CC                        00            .byte	0
02054 06CD                        00            .byte	0
02055 06CE                        00            .byte	0
02056                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02057 06CF                        00            .byte	0
02058 06D0                        00            .byte	0
02059 06D1                        00            .byte	0
02060 06D2                        00            .byte	0
02061 06D3                        00            .byte	0
02062 06D4                        00            .byte	0
02063 06D5                        00            .byte	0
02064 06D6                        00            .byte	0
02065                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02066 06D7                        00            .byte	0
02067 06D8                        00            .byte	0
02068 06D9                        00            .byte	0
02069 06DA                        00            .byte	0
02070 06DB                        00            .byte	0
02071 06DC                        00            .byte	0
02072 06DD                        00            .byte	0
02073 06DE                        00            .byte	0
02074                                           ! 646 },
02075                                           ! 647 {
02076                                           ! 648  80, 24, 14, 0x00, 0x80,
02077 06DF                        50            .byte	$50
02078 06E0                        18            .byte	$18
02079 06E1                        0E            .byte	$E
02080 06E2                        00            .byte	0
02081 06E3                        80            .byte	$80
02082                                           ! 649  0x01, 0x0f, 0x00, 0x06,
02083 06E4                        01            .byte	1
02084 06E5                        0F            .byte	$F
02085 06E6                        00            .byte	0
02086 06E7                        06            .byte	6
02087                                           ! 650  0xa3,
02088 06E8                        A3            .byte	$A3
02089                                           ! 651  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02090 06E9                        5F            .byte	$5F
02091 06EA                        4F            .byte	$4F
02092 06EB                        50            .byte	$50
02093 06EC                        82            .byte	$82
02094 06ED                        54            .byte	$54
02095 06EE                        80            .byte	$80
02096 06EF                        BF            .byte	$BF
02097 06F0                        1F            .byte	$1F
02098                                           ! 652  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02099 06F1                        00            .byte	0
02100 06F2                        40            .byte	$40
02101 06F3                        00            .byte	0
02102 06F4                        00            .byte	0
02103 06F5                        00            .byte	0
02104 06F6                        00            .byte	0
02105 06F7                        00            .byte	0
02106 06F8                        00            .byte	0
02107                                           ! 653  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02108 06F9                        83            .byte	$83
02109 06FA                        85            .byte	$85
02110 06FB                        5D            .byte	$5D
02111 06FC                        28            .byte	$28
02112 06FD                        0F            .byte	$F
02113 06FE                        63            .byte	$63
02114 06FF                        BA            .byte	$BA
02115 0700                        E3            .byte	$E3
02116                                           ! 654  0xff,
02117 0701                        FF            .byte	$FF
02118                                           ! 655  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02119 0702                        00            .byte	0
02120 0703                        08            .byte	8
02121 0704                        00            .byte	0
02122 0705                        00            .byte	0
02123 0706                        18            .byte	$18
02124 0707                        18            .byte	$18
02125 0708                        00            .byte	0
02126 0709                        00            .byte	0
02127                                           ! 656  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02128 070A                        00            .byte	0
02129 070B                        08            .byte	8
02130 070C                        00            .byte	0
02131 070D                        00            .byte	0
02132 070E                        00            .byte	0
02133 070F                        18            .byte	$18
02134 0710                        00            .byte	0
02135 0711                        00            .byte	0
02136                                           ! 657  0x01, 0x00, 0x01, 0x00,
02137 0712                        01            .byte	1
02138 0713                        00            .byte	0
02139 0714                        01            .byte	1
02140 0715                        00            .byte	0
02141                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02142 0716                        00            .byte	0
02143 0717                        00            .byte	0
02144 0718                        00            .byte	0
02145 0719                        00            .byte	0
02146 071A                        00            .byte	0
02147 071B                        00            .byte	0
02148 071C                        05            .byte	5
02149 071D                        0F            .byte	$F
02150 071E                        FF            .byte	$FF
02151                                           ! 659 },
02152                                           ! 660 {
02153                                           ! 661  80, 24, 14, 0x00, 0x80,
02154 071F                        50            .byte	$50
02155 0720                        18            .byte	$18
02156 0721                        0E            .byte	$E
02157 0722                        00            .byte	0
02158 0723                        80            .byte	$80
02159                                           ! 662  0x01, 0x0f, 0x00, 0x06,
02160 0724                        01            .byte	1
02161 0725                        0F            .byte	$F
02162 0726                        00            .byte	0
02163 0727                        06            .byte	6
02164                                           ! 663  0xa3,
02165 0728                        A3            .byte	$A3
02166                                           ! 664  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02167 0729                        5F            .byte	$5F
02168 072A                        4F            .byte	$4F
02169 072B                        50            .byte	$50
02170 072C                        82            .byte	$82
02171 072D                        54            .byte	$54
02172 072E                        80            .byte	$80
02173 072F                        BF            .byte	$BF
02174 0730                        1F            .byte	$1F
02175                                           ! 665  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02176 0731                        00            .byte	0
02177 0732                        40            .byte	$40
02178 0733                        00            .byte	0
02179 0734                        00            .byte	0
02180 0735                        00            .byte	0
02181 0736                        00            .byte	0
02182 0737                        00            .byte	0
02183 0738                        00            .byte	0
02184                                           ! 666  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02185 0739                        83            .byte	$83
02186 073A                        85            .byte	$85
02187 073B                        5D            .byte	$5D
02188 073C                        28            .byte	$28
02189 073D                        0F            .byte	$F
02190 073E                        63            .byte	$63
02191 073F                        BA            .byte	$BA
02192 0740                        E3            .byte	$E3
02193                                           ! 667  0xff,
02194 0741                        FF            .byte	$FF
02195                                           ! 668  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02196 0742                        00            .byte	0
02197 0743                        01            .byte	1
02198 0744                        02            .byte	2
02199 0745                        03            .byte	3
02200 0746                        04            .byte	4
02201 0747                        05            .byte	5
02202 0748                        14            .byte	$14
02203 0749                        07            .byte	7
02204                                           ! 669  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02205 074A                        38            .byte	$38
02206 074B                        39            .byte	$39
02207 074C                        3A            .byte	$3A
02208 074D                        3B            .byte	$3B
02209 074E                        3C            .byte	$3C
02210 074F                        3D            .byte	$3D
02211 0750                        3E            .byte	$3E
02212 0751                        3F            .byte	$3F
02213                                           ! 670  0x01, 0x00, 0x0f, 0x00,
02214 0752                        01            .byte	1
02215 0753                        00            .byte	0
02216 0754                        0F            .byte	$F
02217 0755                        00            .byte	0
02218                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02219 0756                        00            .byte	0
02220 0757                        00            .byte	0
02221 0758                        00            .byte	0
02222 0759                        00            .byte	0
02223 075A                        00            .byte	0
02224 075B                        00            .byte	0
02225 075C                        05            .byte	5
02226 075D                        0F            .byte	$F
02227 075E                        FF            .byte	$FF
02228                                           ! 672 },
02229                                           ! 673 {
02230                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02231 075F                        00            .byte	0
02232 0760                        00            .byte	0
02233 0761                        00            .byte	0
02234 0762                        00            .byte	0
02235 0763                        00            .byte	0
02236 0764                        00            .byte	0
02237 0765                        00            .byte	0
02238 0766                        00            .byte	0
02239                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02240 0767                        00            .byte	0
02241 0768                        00            .byte	0
02242 0769                        00            .byte	0
02243 076A                        00            .byte	0
02244 076B                        00            .byte	0
02245 076C                        00            .byte	0
02246 076D                        00            .byte	0
02247 076E                        00            .byte	0
02248                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02249 076F                        00            .byte	0
02250 0770                        00            .byte	0
02251 0771                        00            .byte	0
02252 0772                        00            .byte	0
02253 0773                        00            .byte	0
02254 0774                        00            .byte	0
02255 0775                        00            .byte	0
02256 0776                        00            .byte	0
02257                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02258 0777                        00            .byte	0
02259 0778                        00            .byte	0
02260 0779                        00            .byte	0
02261 077A                        00            .byte	0
02262 077B                        00            .byte	0
02263 077C                        00            .byte	0
02264 077D                        00            .byte	0
02265 077E                        00            .byte	0
02266                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02267 077F                        00            .byte	0
02268 0780                        00            .byte	0
02269 0781                        00            .byte	0
02270 0782                        00            .byte	0
02271 0783                        00            .byte	0
02272 0784                        00            .byte	0
02273 0785                        00            .byte	0
02274 0786                        00            .byte	0
02275                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02276 0787                        00            .byte	0
02277 0788                        00            .byte	0
02278 0789                        00            .byte	0
02279 078A                        00            .byte	0
02280 078B                        00            .byte	0
02281 078C                        00            .byte	0
02282 078D                        00            .byte	0
02283 078E                        00            .byte	0
02284                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02285 078F                        00            .byte	0
02286 0790                        00            .byte	0
02287 0791                        00            .byte	0
02288 0792                        00            .byte	0
02289 0793                        00            .byte	0
02290 0794                        00            .byte	0
02291 0795                        00            .byte	0
02292 0796                        00            .byte	0
02293                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02294 0797                        00            .byte	0
02295 0798                        00            .byte	0
02296 0799                        00            .byte	0
02297 079A                        00            .byte	0
02298 079B                        00            .byte	0
02299 079C                        00            .byte	0
02300 079D                        00            .byte	0
02301 079E                        00            .byte	0
02302                                           ! 682 },
02303                                           ! 683 {
02304                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02305 079F                        00            .byte	0
02306 07A0                        00            .byte	0
02307 07A1                        00            .byte	0
02308 07A2                        00            .byte	0
02309 07A3                        00            .byte	0
02310 07A4                        00            .byte	0
02311 07A5                        00            .byte	0
02312 07A6                        00            .byte	0
02313                                           ! 685  0
02314                                           ! 685 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02315 07A7                        00            .byte	0
02316 07A8                        00            .byte	0
02317 07A9                        00            .byte	0
02318 07AA                        00            .byte	0
02319 07AB                        00            .byte	0
02320 07AC                        00            .byte	0
02321 07AD                        00            .byte	0
02322 07AE                        00            .byte	0
02323                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02324 07AF                        00            .byte	0
02325 07B0                        00            .byte	0
02326 07B1                        00            .byte	0
02327 07B2                        00            .byte	0
02328 07B3                        00            .byte	0
02329 07B4                        00            .byte	0
02330 07B5                        00            .byte	0
02331 07B6                        00            .byte	0
02332                                           ! 687  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02333 07B7                        00            .byte	0
02334 07B8                        00            .byte	0
02335 07B9                        00            .byte	0
02336 07BA                        00            .byte	0
02337 07BB                        00            .byte	0
02338 07BC                        00            .byte	0
02339 07BD                        00            .byte	0
02340 07BE                        00            .byte	0
02341                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02342 07BF                        00            .byte	0
02343 07C0                        00            .byte	0
02344 07C1                        00            .byte	0
02345 07C2                        00            .byte	0
02346 07C3                        00            .byte	0
02347 07C4                        00            .byte	0
02348 07C5                        00            .byte	0
02349 07C6                        00            .byte	0
02350                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02351 07C7                        00            .byte	0
02352 07C8                        00            .byte	0
02353 07C9                        00            .byte	0
02354 07CA                        00            .byte	0
02355 07CB                        00            .byte	0
02356 07CC                        00            .byte	0
02357 07CD                        00            .byte	0
02358 07CE                        00            .byte	0
02359                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02360 07CF                        00            .byte	0
02361 07D0                        00            .byte	0
02362 07D1                        00            .byte	0
02363 07D2                        00            .byte	0
02364 07D3                        00            .byte	0
02365 07D4                        00            .byte	0
02366 07D5                        00            .byte	0
02367 07D6                        00            .byte	0
02368                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02369 07D7                        00            .byte	0
02370 07D8                        00            .byte	0
02371 07D9                        00            .byte	0
02372 07DA                        00            .byte	0
02373 07DB                        00            .byte	0
02374 07DC                        00            .byte	0
02375 07DD                        00            .byte	0
02376 07DE                        00            .byte	0
02377                                           ! 692 },
02378                                           ! 693 {
02379                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02380 07DF                        00            .byte	0
02381 07E0                        00            .byte	0
02382 07E1                        00            .byte	0
02383 07E2                        00            .byte	0
02384 07E3                        00            .byte	0
02385 07E4                        00            .byte	0
02386 07E5                        00            .byte	0
02387 07E6                        00            .byte	0
02388                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02389 07E7                        00            .byte	0
02390 07E8                        00            .byte	0
02391 07E9                        00            .byte	0
02392 07EA                        00            .byte	0
02393 07EB                        00            .byte	0
02394 07EC                        00            .byte	0
02395 07ED                        00            .byte	0
02396 07EE                        00            .byte	0
02397                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02398 07EF                        00            .byte	0
02399 07F0                        00            .byte	0
02400 07F1                        00            .byte	0
02401 07F2                        00            .byte	0
02402 07F3                        00            .byte	0
02403 07F4                        00            .byte	0
02404 07F5                        00            .byte	0
02405 07F6                        00            .byte	0
02406                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02407 07F7                        00            .byte	0
02408 07F8                        00            .byte	0
02409 07F9                        00            .byte	0
02410 07FA                        00            .byte	0
02411 07FB                        00            .byte	0
02412 07FC                        00            .byte	0
02413 07FD                        00            .byte	0
02414 07FE                        00            .byte	0
02415                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02416 07FF                        00            .byte	0
02417 0800                        00            .byte	0
02418 0801                        00            .byte	0
02419 0802                        00            .byte	0
02420 0803                        00            .byte	0
02421 0804                        00            .byte	0
02422 0805                        00            .byte	0
02423 0806                        00            .byte	0
02424                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02425 0807                        00            .byte	0
02426 0808                        00            .byte	0
02427 0809                        00            .byte	0
02428 080A                        00            .byte	0
02429 080B                        00            .byte	0
02430 080C                        00            .byte	0
02431 080D                        00            .byte	0
02432 080E                        00            .byte	0
02433                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02434 080F                        00            .byte	0
02435 0810                        00            .byte	0
02436 0811                        00            .byte	0
02437 0812                        00            .byte	0
02438 0813                        00            .byte	0
02439 0814                        00            .byte	0
02440 0815                        00            .byte	0
02441 0816                        00            .byte	0
02442                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02443 0817                        00            .byte	0
02444 0818                        00            .byte	0
02445 0819                        00            .byte	0
02446 081A                        00            .byte	0
02447 081B                        00            .byte	0
02448 081C                        00            .byte	0
02449 081D                        00            .byte	0
02450 081E                        00            .byte	0
02451                                           ! 702 },
02452                                           ! 703 {
02453                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02454 081F                        00            .byte	0
02455 0820                        00            .byte	0
02456 0821                        00            .byte	0
02457 0822                        00            .byte	0
02458 0823                        00            .byte	0
02459 0824                        00            .byte	0
02460 0825                        00            .byte	0
02461 0826                        00            .byte	0
02462                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02463 0827                        00            .byte	0
02464 0828                        00            .byte	0
02465 0829                        00            .byte	0
02466 082A                        00            .byte	0
02467 082B                        00            .byte	0
02468 082C                        00            .byte	0
02469 082D                        00            .byte	0
02470 082E                        00            .byte	0
02471                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02472 082F                        00            .byte	0
02473 0830                        00            .byte	0
02474 0831                        00            .byte	0
02475 0832                        00            .byte	0
02476 0833                        00            .byte	0
02477 0834                        00            .byte	0
02478 0835                        00            .byte	0
02479 0836                        00            .byte	0
02480                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02481 0837                        00            .byte	0
02482 0838                        00            .byte	0
02483 0839                        00            .byte	0
02484 083A                        00            .byte	0
02485 083B                        00            .byte	0
02486 083C                        00            .byte	0
02487 083D                        00            .byte	0
02488 083E                        00            .byte	0
02489                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02490 083F                        00            .byte	0
02491 0840                        00            .byte	0
02492 0841                        00            .byte	0
02493 0842                        00            .byte	0
02494 0843                        00            .byte	0
02495 0844                        00            .byte	0
02496 0845                        00            .byte	0
02497 0846                        00            .byte	0
02498                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02499 0847                        00            .byte	0
02500 0848                        00            .byte	0
02501 0849                        00            .byte	0
02502 084A                        00            .byte	0
02503 084B                        00            .byte	0
02504 084C                        00            .byte	0
02505 084D                        00            .byte	0
02506 084E                        00            .byte	0
02507                                           ! 710  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02508 084F                        00            .byte	0
02509 0850                        00            .byte	0
02510 0851                        00            .byte	0
02511 0852                        00            .byte	0
02512 0853                        00            .byte	0
02513 0854                        00            .byte	0
02514 0855                        00            .byte	0
02515 0856                        00            .byte	0
02516                                           ! 711  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02517 0857                        00            .byte	0
02518 0858                        00            .byte	0
02519 0859                        00            .byte	0
02520 085A                        00            .byte	0
02521 085B                        00            .byte	0
02522 085C                        00            .byte	0
02523 085D                        00            .byte	0
02524 085E                        00            .byte	0
02525                                           ! 712 },
02526                                           ! 713 {
02527                                           ! 714  40, 24, 16, 0x00, 0x08,
02528 085F                        28            .byte	$28
02529 0860                        18            .byte	$18
02530 0861                        10            .byte	$10
02531 0862                        00            .byte	0
02532 0863                        08            .byte	8
02533                                           ! 715  0x08, 0x03, 0x00, 0x02,
02534 0864                        08            .byte	8
02535 0865                        03            .byte	3
02536 0866                        00            .byte	0
02537 0867                        02            .byte	2
02538                                           ! 716  0x67,
02539 0868                        67            .byte	$67
02540                                           ! 717  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02541 0869                        2D            .byte	$2D
02542 086A                        27            .byte	$27
02543 086B                        28            .byte	$28
02544 086C                        90            .byte	$90
02545 086D                        2B            .byte	$2B
02546 086E                        A0            .byte	$A0
02547 086F                        BF            .byte	$BF
02548 0870                        1F            .byte	$1F
02549                                           ! 718  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02550 0871                        00            .byte	0
02551 0872                        4F            .byte	$4F
02552 0873                        0D            .byte	$D
02553 0874                        0E            .byte	$E
02554 0875                        00            .byte	0
02555 0876                        00            .byte	0
02556 0877                        00            .byte	0
02557 0878                        00            .byte	0
02558                                           ! 719  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02559 0879                        9C            .byte	$9C
02560 087A                        8E            .byte	$8E
02561 087B                        8F            .byte	$8F
02562 087C                        14            .byte	$14
02563 087D                        1F            .byte	$1F
02564 087E                        96            .byte	$96
02565 087F                        B9            .byte	$B9
02566 0880                        A3            .byte	$A3
02567                                           ! 720  0xff,
02568 0881                        FF            .byte	$FF
02569                                           ! 721  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02570 0882                        00            .byte	0
02571 0883                        01            .byte	1
02572 0884                        02            .byte	2
02573 0885                        03            .byte	3
02574 0886                        04            .byte	4
02575 0887                        05            .byte	5
02576 0888                        14            .byte	$14
02577 0889                        07            .byte	7
02578                                           ! 722  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02579 088A                        38            .byte	$38
02580 088B                        39            .byte	$39
02581 088C                        3A            .byte	$3A
02582 088D                        3B            .byte	$3B
02583 088E                        3C            .byte	$3C
02584 088F                        3D            .byte	$3D
02585 0890                        3E            .byte	$3E
02586 0891                        3F            .byte	$3F
02587                                           ! 723  0x0c, 0x00, 0x0f, 0x08,
02588 0892                        0C            .byte	$C
02589 0893                        00            .byte	0
02590 0894                        0F            .byte	$F
02591 0895                        08            .byte	8
02592                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02593 0896                        00            .byte	0
02594 0897                        00            .byte	0
02595 0898                        00            .byte	0
02596 0899                        00            .byte	0
02597 089A                        00            .byte	0
02598 089B                        10            .byte	$10
02599 089C                        0E            .byte	$E
02600 089D                        0F            .byte	$F
02601 089E                        FF            .byte	$FF
02602                                           ! 725 },
02603                                           ! 726 {
02604                                           ! 727  80, 24, 16, 0x00, 0x10,
02605 089F                        50            .byte	$50
02606 08A0                        18            .byte	$18
02607 08A1                        10            .byte	$10
02608 08A2                        00            .byte	0
02609 08A3                        10            .byte	$10
02610                                           ! 728  0x00, 0x03, 0x00, 0x02,
02611 08A4                        00            .byte	0
02612 08A5                        03            .byte	3
02613 08A6                        00            .byte	0
02614 08A7                        02            .byte	2
02615                                           ! 729  0x67,
02616 08A8                        67            .byte	$67
02617                                           ! 730  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02618 08A9                        5F            .byte	$5F
02619 08AA                        4F            .byte	$4F
02620 08AB                        50            .byte	$50
02621 08AC                        82            .byte	$82
02622 08AD                        55            .byte	$55
02623 08AE                        81            .byte	$81
02624 08AF                        BF            .byte	$BF
02625 08B0                        1F            .byte	$1F
02626                                           ! 731  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02627 08B1                        00            .byte	0
02628 08B2                        4F            .byte	$4F
02629 08B3                        0D            .byte	$D
02630 08B4                        0E            .byte	$E
02631 08B5                        00            .byte	0
02632 08B6                        00            .byte	0
02633 08B7                        00            .byte	0
02634 08B8                        00            .byte	0
02635                                           ! 732  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02636 08B9                        9C            .byte	$9C
02637 08BA                        8E            .byte	$8E
02638 08BB                        8F            .byte	$8F
02639 08BC                        28            .byte	$28
02640 08BD                        1F            .byte	$1F
02641 08BE                        96            .byte	$96
02642 08BF                        B9            .byte	$B9
02643 08C0                        A3            .byte	$A3
02644                                           ! 733  0xff,
02645 08C1                        FF            .byte	$FF
02646                                           ! 734  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02647 08C2                        00            .byte	0
02648 08C3                        01            .byte	1
02649 08C4                        02            .byte	2
02650 08C5                        03            .byte	3
02651 08C6                        04            .byte	4
02652 08C7                        05            .byte	5
02653 08C8                        14            .byte	$14
02654 08C9                        07            .byte	7
02655                                           ! 735  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02656 08CA                        38            .byte	$38
02657 08CB                        39            .byte	$39
02658 08CC                        3A            .byte	$3A
02659 08CD                        3B            .byte	$3B
02660 08CE                        3C            .byte	$3C
02661 08CF                        3D            .byte	$3D
02662 08D0                        3E            .byte	$3E
02663 08D1                        3F            .byte	$3F
02664                                           ! 736  0x0c, 0x00, 0x0f, 0x08,
02665 08D2                        0C            .byte	$C
02666 08D3                        00            .byte	0
02667 08D4                        0F            .byte	$F
02668 08D5                        08            .byte	8
02669                                           ! 737  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02670 08D6                        00            .byte	0
02671 08D7                        00            .byte	0
02672 08D8                        00            .byte	0
02673 08D9                        00            .byte	0
02674 08DA                        00            .byte	0
02675 08DB                        10            .byte	$10
02676 08DC                        0E            .byte	$E
02677 08DD                        0F            .byte	$F
02678 08DE                        FF            .byte	$FF
02679                                           ! 738 },
02680                                           ! 739 {
02681                                           ! 740  80, 24, 16, 0x00, 0x10,
02682 08DF                        50            .byte	$50
02683 08E0                        18            .byte	$18
02684 08E1                        10            .byte	$10
02685 08E2                        00            .byte	0
02686 08E3                        10            .byte	$10
02687                                           ! 741  0x00, 0x03, 0x00, 0x02,
02688 08E4                        00            .byte	0
02689 08E5                        03            .byte	3
02690 08E6                        00            .byte	0
02691 08E7                        02            .byte	2
02692                                           ! 742  0x66,
02693 08E8                        66            .byte	$66
02694                                           ! 743  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02695 08E9                        5F            .byte	$5F
02696 08EA                        4F            .byte	$4F
02697 08EB                        50            .byte	$50
02698 08EC                        82            .byte	$82
02699 08ED                        55            .byte	$55
02700 08EE                        81            .byte	$81
02701 08EF                        BF            .byte	$BF
02702 08F0                        1F            .byte	$1F
02703                                           ! 744  0x00, 0x4f, 0
02704 08F1                        00            .byte	0
02705 08F2                        4F            .byte	$4F
02706                                           ! 744 x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02707 08F3                        0D            .byte	$D
02708 08F4                        0E            .byte	$E
02709 08F5                        00            .byte	0
02710 08F6                        00            .byte	0
02711 08F7                        00            .byte	0
02712 08F8                        00            .byte	0
02713                                           ! 745  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02714 08F9                        9C            .byte	$9C
02715 08FA                        8E            .byte	$8E
02716 08FB                        8F            .byte	$8F
02717 08FC                        28            .byte	$28
02718 08FD                        0F            .byte	$F
02719 08FE                        96            .byte	$96
02720 08FF                        B9            .byte	$B9
02721 0900                        A3            .byte	$A3
02722                                           ! 746  0xff,
02723 0901                        FF            .byte	$FF
02724                                           ! 747  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02725 0902                        00            .byte	0
02726 0903                        08            .byte	8
02727 0904                        08            .byte	8
02728 0905                        08            .byte	8
02729 0906                        08            .byte	8
02730 0907                        08            .byte	8
02731 0908                        08            .byte	8
02732 0909                        08            .byte	8
02733                                           ! 748  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02734 090A                        10            .byte	$10
02735 090B                        18            .byte	$18
02736 090C                        18            .byte	$18
02737 090D                        18            .byte	$18
02738 090E                        18            .byte	$18
02739 090F                        18            .byte	$18
02740 0910                        18            .byte	$18
02741 0911                        18            .byte	$18
02742                                           ! 749  0x0e, 0x00, 0x0f, 0x08,
02743 0912                        0E            .byte	$E
02744 0913                        00            .byte	0
02745 0914                        0F            .byte	$F
02746 0915                        08            .byte	8
02747                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02748 0916                        00            .byte	0
02749 0917                        00            .byte	0
02750 0918                        00            .byte	0
02751 0919                        00            .byte	0
02752 091A                        00            .byte	0
02753 091B                        10            .byte	$10
02754 091C                        0A            .byte	$A
02755 091D                        0F            .byte	$F
02756 091E                        FF            .byte	$FF
02757                                           ! 751 },
02758                                           ! 752 {
02759                                           ! 753  80, 29, 16, 0x00, 0x00,
02760 091F                        50            .byte	$50
02761 0920                        1D            .byte	$1D
02762 0921                        10            .byte	$10
02763 0922                        00            .byte	0
02764 0923                        00            .byte	0
02765                                           ! 754  0x01, 0x0f, 0x00, 0x06,
02766 0924                        01            .byte	1
02767 0925                        0F            .byte	$F
02768 0926                        00            .byte	0
02769 0927                        06            .byte	6
02770                                           ! 755  0xe3,
02771 0928                        E3            .byte	$E3
02772                                           ! 756  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02773 0929                        5F            .byte	$5F
02774 092A                        4F            .byte	$4F
02775 092B                        50            .byte	$50
02776 092C                        82            .byte	$82
02777 092D                        54            .byte	$54
02778 092E                        80            .byte	$80
02779 092F                        0B            .byte	$B
02780 0930                        3E            .byte	$3E
02781                                           ! 757  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02782 0931                        00            .byte	0
02783 0932                        40            .byte	$40
02784 0933                        00            .byte	0
02785 0934                        00            .byte	0
02786 0935                        00            .byte	0
02787 0936                        00            .byte	0
02788 0937                        00            .byte	0
02789 0938                        00            .byte	0
02790                                           ! 758  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02791 0939                        EA            .byte	$EA
02792 093A                        8C            .byte	$8C
02793 093B                        DF            .byte	$DF
02794 093C                        28            .byte	$28
02795 093D                        00            .byte	0
02796 093E                        E7            .byte	$E7
02797 093F                        04            .byte	4
02798 0940                        E3            .byte	$E3
02799                                           ! 759  0xff,
02800 0941                        FF            .byte	$FF
02801                                           ! 760  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02802 0942                        00            .byte	0
02803 0943                        3F            .byte	$3F
02804 0944                        00            .byte	0
02805 0945                        3F            .byte	$3F
02806 0946                        00            .byte	0
02807 0947                        3F            .byte	$3F
02808 0948                        00            .byte	0
02809 0949                        3F            .byte	$3F
02810                                           ! 761  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02811 094A                        00            .byte	0
02812 094B                        3F            .byte	$3F
02813 094C                        00            .byte	0
02814 094D                        3F            .byte	$3F
02815 094E                        00            .byte	0
02816 094F                        3F            .byte	$3F
02817 0950                        00            .byte	0
02818 0951                        3F            .byte	$3F
02819                                           ! 762  0x01, 0x00, 0x0f, 0x00,
02820 0952                        01            .byte	1
02821 0953                        00            .byte	0
02822 0954                        0F            .byte	$F
02823 0955                        00            .byte	0
02824                                           ! 763  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02825 0956                        00            .byte	0
02826 0957                        00            .byte	0
02827 0958                        00            .byte	0
02828 0959                        00            .byte	0
02829 095A                        00            .byte	0
02830 095B                        00            .byte	0
02831 095C                        05            .byte	5
02832 095D                        0F            .byte	$F
02833 095E                        FF            .byte	$FF
02834                                           ! 764 },
02835                                           ! 765 {
02836                                           ! 766  80, 29, 16, 0x00, 0x00,
02837 095F                        50            .byte	$50
02838 0960                        1D            .byte	$1D
02839 0961                        10            .byte	$10
02840 0962                        00            .byte	0
02841 0963                        00            .byte	0
02842                                           ! 767  0x01, 0x0f, 0x00, 0x06,
02843 0964                        01            .byte	1
02844 0965                        0F            .byte	$F
02845 0966                        00            .byte	0
02846 0967                        06            .byte	6
02847                                           ! 768  0xe3,
02848 0968                        E3            .byte	$E3
02849                                           ! 769  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02850 0969                        5F            .byte	$5F
02851 096A                        4F            .byte	$4F
02852 096B                        50            .byte	$50
02853 096C                        82            .byte	$82
02854 096D                        54            .byte	$54
02855 096E                        80            .byte	$80
02856 096F                        0B            .byte	$B
02857 0970                        3E            .byte	$3E
02858                                           ! 770  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02859 0971                        00            .byte	0
02860 0972                        40            .byte	$40
02861 0973                        00            .byte	0
02862 0974                        00            .byte	0
02863 0975                        00            .byte	0
02864 0976                        00            .byte	0
02865 0977                        00            .byte	0
02866 0978                        00            .byte	0
02867                                           ! 771  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02868 0979                        EA            .byte	$EA
02869 097A                        8C            .byte	$8C
02870 097B                        DF            .byte	$DF
02871 097C                        28            .byte	$28
02872 097D                        00            .byte	0
02873 097E                        E7            .byte	$E7
02874 097F                        04            .byte	4
02875 0980                        E3            .byte	$E3
02876                                           ! 772  0xff,
02877 0981                        FF            .byte	$FF
02878                                           ! 773  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02879 0982                        00            .byte	0
02880 0983                        01            .byte	1
02881 0984                        02            .byte	2
02882 0985                        03            .byte	3
02883 0986                        04            .byte	4
02884 0987                        05            .byte	5
02885 0988                        14            .byte	$14
02886 0989                        07            .byte	7
02887                                           ! 774  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02888 098A                        38            .byte	$38
02889 098B                        39            .byte	$39
02890 098C                        3A            .byte	$3A
02891 098D                        3B            .byte	$3B
02892 098E                        3C            .byte	$3C
02893 098F                        3D            .byte	$3D
02894 0990                        3E            .byte	$3E
02895 0991                        3F            .byte	$3F
02896                                           ! 775  0x01, 0x00, 0x0f, 0x00,
02897 0992                        01            .byte	1
02898 0993                        00            .byte	0
02899 0994                        0F            .byte	$F
02900 0995                        00            .byte	0
02901                                           ! 776  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02902 0996                        00            .byte	0
02903 0997                        00            .byte	0
02904 0998                        00            .byte	0
02905 0999                        00            .byte	0
02906 099A                        00            .byte	0
02907 099B                        00            .byte	0
02908 099C                        05            .byte	5
02909 099D                        0F            .byte	$F
02910 099E                        FF            .byte	$FF
02911                                           ! 777 },
02912                                           ! 778 {
02913                                           ! 779  40, 24, 8, 0x00, 0x00,
02914 099F                        28            .byte	$28
02915 09A0                        18            .byte	$18
02916 09A1                        08            .byte	8
02917 09A2                        00            .byte	0
02918 09A3                        00            .byte	0
02919                                           ! 780  0x01, 0x0f, 0x00, 0x0e,
02920 09A4                        01            .byte	1
02921 09A5                        0F            .byte	$F
02922 09A6                        00            .byte	0
02923 09A7                        0E            .byte	$E
02924                                           ! 781  0x63,
02925 09A8                        63            .byte	$63
02926                                           ! 782  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02927 09A9                        5F            .byte	$5F
02928 09AA                        4F            .byte	$4F
02929 09AB                        50            .byte	$50
02930 09AC                        82            .byte	$82
02931 09AD                        54            .byte	$54
02932 09AE                        80            .byte	$80
02933 09AF                        BF            .byte	$BF
02934 09B0                        1F            .byte	$1F
02935                                           ! 783  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02936 09B1                        00            .byte	0
02937 09B2                        41            .byte	$41
02938 09B3                        00            .byte	0
02939 09B4                        00            .byte	0
02940 09B5                        00            .byte	0
02941 09B6                        00            .byte	0
02942 09B7                        00            .byte	0
02943 09B8                        00            .byte	0
02944                                           ! 784  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02945 09B9                        9C            .byte	$9C
02946 09BA                        8E            .byte	$8E
02947 09BB                        8F            .byte	$8F
02948 09BC                        28            .byte	$28
02949 09BD                        40            .byte	$40
02950 09BE                        96            .byte	$96
02951 09BF                        B9            .byte	$B9
02952 09C0                        A3            .byte	$A3
02953                                           ! 785  0xff,
02954 09C1                        FF            .byte	$FF
02955                                           ! 786  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02956 09C2                        00            .byte	0
02957 09C3                        01            .byte	1
02958 09C4                        02            .byte	2
02959 09C5                        03            .byte	3
02960 09C6                        04            .byte	4
02961 09C7                        05            .byte	5
02962 09C8                        06            .byte	6
02963 09C9                        07            .byte	7
02964                                           ! 787  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02965 09CA                        08            .byte	8
02966 09CB                        09            .byte	9
02967 09CC                        0A            .byte	$A
02968 09CD                        0B            .byte	$B
02969 09CE                        0C            .byte	$C
02970 09CF                        0D            .byte	$D
02971 09D0                        0E            .byte	$E
02972 09D1                        0F            .byte	$F
02973                                           ! 788  0x41, 0x00, 0x0f, 0x00,
02974 09D2                        41            .byte	$41
02975 09D3                        00            .byte	0
02976 09D4                        0F            .byte	$F
02977 09D5                        00            .byte	0
02978                                           ! 789  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02979 09D6                        00            .byte	0
02980 09D7                        00            .byte	0
02981 09D8                        00            .byte	0
02982 09D9                        00            .byte	0
02983 09DA                        00            .byte	0
02984 09DB                        40            .byte	$40
02985 09DC                        05            .byte	5
02986 09DD                        0F            .byte	$F
02987 09DE                        FF            .byte	$FF
02988                                           ! 790 },
02989                                           ! 791 {
02990                                           ! 792  100, 36, 16, 0x00, 0x00,
02991 09DF                        64            .byte	$64
02992 09E0                        24            .byte	$24
02993 09E1                        10            .byte	$10
02994 09E2                        00            .byte	0
02995 09E3                        00            .byte	0
02996                                           ! 793  0x01, 0x0f, 0x00, 0x06,
02997 09E4                        01            .byte	1
02998 09E5                        0F            .byte	$F
02999 09E6                        00            .byte	0
03000 09E7                        06            .byte	6
03001                                           ! 794  0xe3,
03002 09E8                        E3            .byte	$E3
03003                                           ! 795  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
03004 09E9                        7F            .byte	$7F
03005 09EA                        63            .byte	$63
03006 09EB                        63            .byte	$63
03007 09EC                        83            .byte	$83
03008 09ED                        6B            .byte	$6B
03009 09EE                        1B            .byte	$1B
03010 09EF                        72            .byte	$72
03011 09F0                        F0            .byte	$F0
03012                                           ! 796  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03013 09F1                        00            .byte	0
03014 09F2                        60            .byte	$60
03015 09F3                        00            .byte	0
03016 09F4                        00            .byte	0
03017 09F5                        00            .byte	0
03018 09F6                        00            .byte	0
03019 09F7                        00            .byte	0
03020 09F8                        00            .byte	0
03021                                           ! 797  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03022 09F9                        59            .byte	$59
03023 09FA                        8D            .byte	$8D
03024 09FB                        57            .byte	$57
03025 09FC                        32            .byte	$32
03026 09FD                        00            .byte	0
03027 09FE                        57            .byte	$57
03028 09FF                        73            .byte	$73
03029 0A00                        E3            .byte	$E3
03030                                           ! 798  0xff,
03031 0A01                        FF            .byte	$FF
03032                                           ! 799  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03033 0A02                        00            .byte	0
03034 0A03                        01            .byte	1
03035 0A04                        02            .byte	2
03036 0A05                        03            .byte	3
03037 0A06                        04            .byte	4
03038 0A07                        05            .byte	5
03039 0A08                        14            .byte	$14
03040 0A09                        07            .byte	7
03041                                           ! 800  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03042 0A0A                        38            .byte	$38
03043 0A0B                        39            .byte	$39
03044 0A0C                        3A            .byte	$3A
03045 0A0D                        3B            .byte	$3B
03046 0A0E                        3C            .byte	$3C
03047 0A0F                        3D            .byte	$3D
03048 0A10                        3E            .byte	$3E
03049 0A11                        3F            .byte	$3F
03050                                           ! 801  0x01, 0x00, 0x0f, 0x00,
03051 0A12                        01            .byte	1
03052 0A13                        00            .byte	0
03053 0A14                        0F            .byte	$F
03054 0A15                        00            .byte	0
03055                                           ! 802  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03056 0A16                        00            .byte	0
03057 0A17                        00            .byte	0
03058 0A18                        00            .byte	0
03059 0A19                        00            .byte	0
03060 0A1A                        00            .byte	0
03061 0A1B                        00            .byte	0
03062 0A1C                        05            .byte	5
03063 0A1D                        0F            .byte	$F
03064 0A1E                        FF            .byte	$FF
03065                                           ! 803 },
03066                                           ! 804 };
03067                                           !BCC_EOS
03068                                           ! 805 static Bit8u palette0[63+1][3]=
03069                                           ! 806 {
03070                       00000A1F            _palette0:
03071                                           ! 807   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03072 0A1F                        00            .byte	0
03073 0A20                        00            .byte	0
03074 0A21                        00            .byte	0
03075 0A22                        00            .byte	0
03076 0A23                        00            .byte	0
03077 0A24                        00            .byte	0
03078 0A25                        00            .byte	0
03079 0A26                        00            .byte	0
03080 0A27                        00            .byte	0
03081 0A28                        00            .byte	0
03082 0A29                        00            .byte	0
03083 0A2A                        00            .byte	0
03084 0A2B                        00            .byte	0
03085 0A2C                        00            .byte	0
03086 0A2D                        00            .byte	0
03087 0A2E                        00            .byte	0
03088 0A2F                        00            .byte	0
03089 0A30                        00            .byte	0
03090 0A31                        00            .byte	0
03091 0A32                        00            .byte	0
03092 0A33                        00            .byte	0
03093 0A34                        00            .byte	0
03094 0A35                        00            .byte	0
03095 0A36                        00            .byte	0
03096                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03097 0A37                        2A            .byte	$2A
03098 0A38                        2A            .byte	$2A
03099 0A39                        2A            .byte	$2A
03100 0A3A                        2A            .byte	$2A
03101 0A3B                        2A            .byte	$2A
03102                                           ! 808  0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03103 0A3C                        2A            .byte	$2A
03104 0A3D                        2A            .byte	$2A
03105 0A3E                        2A            .byte	$2A
03106 0A3F                        2A            .byte	$2A
03107 0A40                        2A            .byte	$2A
03108 0A41                        2A            .byte	$2A
03109 0A42                        2A            .byte	$2A
03110 0A43                        2A            .byte	$2A
03111 0A44                        2A            .byte	$2A
03112 0A45                        2A            .byte	$2A
03113 0A46                        2A            .byte	$2A
03114 0A47                        2A            .byte	$2A
03115 0A48                        2A            .byte	$2A
03116 0A49                        2A            .byte	$2A
03117 0A4A                        2A            .byte	$2A
03118 0A4B                        2A            .byte	$2A
03119 0A4C                        2A            .byte	$2A
03120 0A4D                        2A            .byte	$2A
03121 0A4E                        2A            .byte	$2A
03122                                           ! 809   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03123 0A4F                        2A            .byte	$2A
03124 0A50                        2A            .byte	$2A
03125 0A51                        2A            .byte	$2A
03126 0A52                        2A            .byte	$2A
03127 0A53                        2A            .byte	$2A
03128 0A54                        2A            .byte	$2A
03129 0A55                        2A            .byte	$2A
03130 0A56                        2A            .byte	$2A
03131 0A57                        2A            .byte	$2A
03132 0A58                        2A            .byte	$2A
03133 0A59                        2A            .byte	$2A
03134 0A5A                        2A            .byte	$2A
03135 0A5B                        2A            .byte	$2A
03136 0A5C                        2A            .byte	$2A
03137 0A5D                        2A            .byte	$2A
03138 0A5E                        2A            .byte	$2A
03139 0A5F                        2A            .byte	$2A
03140 0A60                        2A            .byte	$2A
03141 0A61                        2A            .byte	$2A
03142 0A62                        2A            .byte	$2A
03143 0A63                        2A            .byte	$2A
03144 0A64                        2A            .byte	$2A
03145 0A65                        2A            .byte	$2A
03146 0A66                        2A            .byte	$2A
03147                                           ! 810   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03148 0A67                        3F            .byte	$3F
03149 0A68                        3F            .byte	$3F
03150 0A69                        3F            .byte	$3F
03151 0A6A                        3F            .byte	$3F
03152 0A6B                        3F            .byte	$3F
03153 0A6C                        3F            .byte	$3F
03154 0A6D                        3F            .byte	$3F
03155 0A6E                        3F            .byte	$3F
03156 0A6F                        3F            .byte	$3F
03157 0A70                        3F            .byte	$3F
03158 0A71                        3F            .byte	$3F
03159 0A72                        3F            .byte	$3F
03160 0A73                        3F            .byte	$3F
03161 0A74                        3F            .byte	$3F
03162 0A75                        3F            .byte	$3F
03163 0A76                        3F            .byte	$3F
03164 0A77                        3F            .byte	$3F
03165 0A78                        3F            .byte	$3F
03166 0A79                        3F            .byte	$3F
03167 0A7A                        3F            .byte	$3F
03168 0A7B                        3F            .byte	$3F
03169 0A7C                        3F            .byte	$3F
03170 0A7D                        3F            .byte	$3F
03171 0A7E                        3F            .byte	$3F
03172                                           ! 811   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03173 0A7F                        00            .byte	0
03174 0A80                        00            .byte	0
03175 0A81                        00            .byte	0
03176 0A82                        00            .byte	0
03177 0A83                        00            .byte	0
03178 0A84                        00            .byte	0
03179 0A85                        00            .byte	0
03180 0A86                        00            .byte	0
03181 0A87                        00            .byte	0
03182 0A88                        00            .byte	0
03183 0A89                        00            .byte	0
03184 0A8A                        00            .byte	0
03185 0A8B                        00            .byte	0
03186 0A8C                        00            .byte	0
03187 0A8D                        00            .byte	0
03188 0A8E                        00            .byte	0
03189 0A8F                        00            .byte	0
03190 0A90                        00            .byte	0
03191 0A91                        00            .byte	0
03192 0A92                        00            .byte	0
03193 0A93                        00            .byte	0
03194 0A94                        00            .byte	0
03195 0A95                        00            .byte	0
03196 0A96                        00            .byte	0
03197                                           ! 812   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03198 0A97                        2A            .byte	$2A
03199 0A98                        2A            .byte	$2A
03200 0A99                        2A            .byte	$2A
03201 0A9A                        2A            .byte	$2A
03202 0A9B                        2A            .byte	$2A
03203 0A9C                        2A            .byte	$2A
03204 0A9D                        2A            .byte	$2A
03205 0A9E                        2A            .byte	$2A
03206 0A9F                        2A            .byte	$2A
03207 0AA0                        2A            .byte	$2A
03208 0AA1                        2A            .byte	$2A
03209 0AA2                        2A            .byte	$2A
03210 0AA3                        2A            .byte	$2A
03211 0AA4                        2A            .byte	$2A
03212 0AA5                        2A            .byte	$2A
03213 0AA6                        2A            .byte	$2A
03214 0AA7                        2A            .byte	$2A
03215 0AA8                        2A            .byte	$2A
03216 0AA9                        2A            .byte	$2A
03217 0AAA                        2A            .byte	$2A
03218 0AAB                        2A            .byte	$2A
03219 0AAC                        2A            .byte	$2A
03220 0AAD                        2A            .byte	$2A
03221 0AAE                        2A            .byte	$2A
03222                                           ! 813   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03223 0AAF                        2A            .byte	$2A
03224 0AB0                        2A            .byte	$2A
03225 0AB1                        2A            .byte	$2A
03226 0AB2                        2A            .byte	$2A
03227 0AB3                        2A            .byte	$2A
03228 0AB4                        2A            .byte	$2A
03229 0AB5                        2A            .byte	$2A
03230 0AB6                        2A            .byte	$2A
03231 0AB7                        2A            .byte	$2A
03232 0AB8                        2A            .byte	$2A
03233 0AB9                        2A            .byte	$2A
03234 0ABA                        2A            .byte	$2A
03235 0ABB                        2A            .byte	$2A
03236 0ABC                        2A            .byte	$2A
03237 0ABD                        2A            .byte	$2A
03238 0ABE                        2A            .byte	$2A
03239 0ABF                        2A            .byte	$2A
03240 0AC0                        2A            .byte	$2A
03241 0AC1                        2A            .byte	$2A
03242 0AC2                        2A            .byte	$2A
03243 0AC3                        2A            .byte	$2A
03244 0AC4                        2A            .byte	$2A
03245 0AC5                        2A            .byte	$2A
03246 0AC6                        2A            .byte	$2A
03247                                           ! 814   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03248 0AC7                        3F            .byte	$3F
03249 0AC8                        3F            .byte	$3F
03250 0AC9                        3F            .byte	$3F
03251 0ACA                        3F            .byte	$3F
03252 0ACB                        3F            .byte	$3F
03253 0ACC                        3F            .byte	$3F
03254 0ACD                        3F            .byte	$3F
03255 0ACE                        3F            .byte	$3F
03256 0ACF                        3F            .byte	$3F
03257 0AD0                        3F            .byte	$3F
03258 0AD1                        3F            .byte	$3F
03259 0AD2                        3F            .byte	$3F
03260 0AD3                        3F            .byte	$3F
03261 0AD4                        3F            .byte	$3F
03262 0AD5                        3F            .byte	$3F
03263 0AD6                        3F            .byte	$3F
03264 0AD7                        3F            .byte	$3F
03265 0AD8                        3F            .byte	$3F
03266 0AD9                        3F            .byte	$3F
03267 0ADA                        3F            .byte	$3F
03268 0ADB                        3F            .byte	$3F
03269 0ADC                        3F            .byte	$3F
03270 0ADD                        3F            .byte	$3F
03271                                           ! 815 };
03272 0ADE                        3F            .byte	$3F
03273                                           !BCC_EOS
03274                                           ! 816 static Bit8u palette1[63+1][3]=
03275                                           ! 817 {
03276                       00000ADF            _palette1:
03277                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03278 0ADF                        00            .byte	0
03279 0AE0                        00            .byte	0
03280 0AE1                        00            .byte	0
03281 0AE2                        00            .byte	0
03282 0AE3                        00            .byte	0
03283 0AE4                        2A            .byte	$2A
03284 0AE5                        00            .byte	0
03285 0AE6                        2A            .byte	$2A
03286 0AE7                        00            .byte	0
03287 0AE8                        00            .byte	0
03288 0AE9                        2A            .byte	$2A
03289 0AEA                        2A            .byte	$2A
03290 0AEB                        2A            .byte	$2A
03291 0AEC                        00            .byte	0
03292 0AED                        00            .byte	0
03293 0AEE                        2A            .byte	$2A
03294 0AEF                        00            .byte	0
03295 0AF0                        2A            .byte	$2A
03296 0AF1                        2A            .byte	$2A
03297 0AF2                        15            .byte	$15
03298 0AF3                        00            .byte	0
03299 0AF4                        2A            .byte	$2A
03300 0AF5                        2A            .byte	$2A
03301 0AF6                        2A            .byte	$2A
03302                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03303 0AF7                        00            .byte	0
03304 0AF8                        00            .byte	0
03305 0AF9                        00            .byte	0
03306 0AFA                        00            .byte	0
03307 0AFB                        00            .byte	0
03308 0AFC                        2A            .byte	$2A
03309 0AFD                        00            .byte	0
03310 0AFE                        2A            .byte	$2A
03311 0AFF                        00            .byte	0
03312 0B00                        00            .byte	0
03313 0B01                        2A            .byte	$2A
03314 0B02                        2A            .byte	$2A
03315 0B03                        2A            .byte	$2A
03316 0B04                        00            .byte	0
03317 0B05                        00            .byte	0
03318 0B06                        2A            .byte	$2A
03319 0B07                        00            .byte	0
03320 0B08                        2A            .byte	$2A
03321 0B09                        2A            .byte	$2A
03322 0B0A                        15            .byte	$15
03323 0B0B                        00            .byte	0
03324 0B0C                        2A            .byte	$2A
03325 0B0D                        2A            .byte	$2A
03326 0B0E                        2A            .byte	$2A
03327                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03328 0B0F                        15            .byte	$15
03329 0B10                        15            .byte	$15
03330 0B11                        15            .byte	$15
03331 0B12                        15            .byte	$15
03332 0B13                        15            .byte	$15
03333 0B14                        3F            .byte	$3F
03334 0B15                        15            .byte	$15
03335 0B16                        3F            .byte	$3F
03336 0B17                        15            .byte	$15
03337 0B18                        15            .byte	$15
03338 0B19                        3F            .byte	$3F
03339 0B1A                        3F            .byte	$3F
03340 0B1B                        3F            .byte	$3F
03341 0B1C                        15            .byte	$15
03342 0B1D                        15            .byte	$15
03343 0B1E                        3F            .byte	$3F
03344 0B1F                        15            .byte	$15
03345 0B20                        3F            .byte	$3F
03346 0B21                        3F            .byte	$3F
03347 0B22                        3F            .byte	$3F
03348 0B23                        15            .byte	$15
03349 0B24                        3F            .byte	$3F
03350 0B25                        3F            .byte	$3F
03351 0B26                        3F            .byte	$3F
03352                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03353 0B27                        15            .byte	$15
03354 0B28                        15            .byte	$15
03355 0B29                        15            .byte	$15
03356 0B2A                        15            .byte	$15
03357 0B2B                        15            .byte	$15
03358 0B2C                        3F            .byte	$3F
03359 0B2D                        15            .byte	$15
03360 0B2E                        3F            .byte	$3F
03361 0B2F                        15            .byte	$15
03362 0B30                        15            .byte	$15
03363 0B31                        3F            .byte	$3F
03364 0B32                        3F            .byte	$3F
03365 0B33                        3F            .byte	$3F
03366 0B34                        15            .byte	$15
03367 0B35                        15            .byte	$15
03368 0B36                        3F            .byte	$3F
03369 0B37                        15            .byte	$15
03370 0B38                        3F            .byte	$3F
03371 0B39                        3F            .byte	$3F
03372 0B3A                        3F            .byte	$3F
03373 0B3B                        15            .byte	$15
03374 0B3C                        3F            .byte	$3F
03375 0B3D                        3F            .byte	$3F
03376 0B3E                        3F            .byte	$3F
03377                                           ! 822   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03378 0B3F                        00            .byte	0
03379 0B40                        00            .byte	0
03380 0B41                        00            .byte	0
03381 0B42                        00            .byte	0
03382 0B43                        00            .byte	0
03383 0B44                        2A            .byte	$2A
03384 0B45                        00            .byte	0
03385 0B46                        2A            .byte	$2A
03386 0B47                        00            .byte	0
03387 0B48                        00            .byte	0
03388 0B49                        2A            .byte	$2A
03389 0B4A                        2A            .byte	$2A
03390 0B4B                        2A            .byte	$2A
03391 0B4C                        00            .byte	0
03392 0B4D                        00            .byte	0
03393 0B4E                        2A            .byte	$2A
03394 0B4F                        00            .byte	0
03395 0B50                        2A            .byte	$2A
03396 0B51                        2A            .byte	$2A
03397 0B52                        15            .byte	$15
03398 0B53                        00            .byte	0
03399 0B54                        2A            .byte	$2A
03400 0B55                        2A            .byte	$2A
03401 0B56                        2A            .byte	$2A
03402                                           ! 823   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03403 0B57                        00            .byte	0
03404 0B58                        00            .byte	0
03405 0B59                        00            .byte	0
03406 0B5A                        00            .byte	0
03407 0B5B                        00            .byte	0
03408 0B5C                        2A            .byte	$2A
03409 0B5D                        00            .byte	0
03410 0B5E                        2A            .byte	$2A
03411 0B5F                        00            .byte	0
03412 0B60                        00            .byte	0
03413 0B61                        2A            .byte	$2A
03414 0B62                        2A            .byte	$2A
03415 0B63                        2A            .byte	$2A
03416 0B64                        00            .byte	0
03417 0B65                        00            .byte	0
03418 0B66                        2A            .byte	$2A
03419 0B67                        00            .byte	0
03420 0B68                        2A            .byte	$2A
03421 0B69                        2A            .byte	$2A
03422 0B6A                        15            .byte	$15
03423 0B6B                        00            .byte	0
03424 0B6C                        2A            .byte	$2A
03425 0B6D                        2A            .byte	$2A
03426 0B6E                        2A            .byte	$2A
03427                                           ! 824   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03428 0B6F                        15            .byte	$15
03429 0B70                        15            .byte	$15
03430 0B71                        15            .byte	$15
03431 0B72                        15            .byte	$15
03432 0B73                        15            .byte	$15
03433 0B74                        3F            .byte	$3F
03434 0B75                        15            .byte	$15
03435 0B76                        3F            .byte	$3F
03436 0B77                        15            .byte	$15
03437 0B78                        15            .byte	$15
03438 0B79                        3F            .byte	$3F
03439 0B7A                        3F            .byte	$3F
03440 0B7B                        3F            .byte	$3F
03441 0B7C                        15            .byte	$15
03442 0B7D                        15            .byte	$15
03443 0B7E                        3F            .byte	$3F
03444 0B7F                        15            .byte	$15
03445 0B80                        3F            .byte	$3F
03446 0B81                        3F            .byte	$3F
03447 0B82                        3F            .byte	$3F
03448 0B83                        15            .byte	$15
03449 0B84                        3F            .byte	$3F
03450 0B85                        3F            .byte	$3F
03451 0B86                        3F            .byte	$3F
03452                                           ! 825   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03453 0B87                        15            .byte	$15
03454 0B88                        15            .byte	$15
03455 0B89                        15            .byte	$15
03456 0B8A                        15            .byte	$15
03457 0B8B                        15            .byte	$15
03458 0B8C                        3F            .byte	$3F
03459 0B8D                        15            .byte	$15
03460 0B8E                        3F            .byte	$3F
03461 0B8F                        15            .byte	$15
03462 0B90                        15            .byte	$15
03463 0B91                        3F            .byte	$3F
03464 0B92                        3F            .byte	$3F
03465 0B93                        3F            .byte	$3F
03466 0B94                        15            .byte	$15
03467 0B95                        15            .byte	$15
03468 0B96                        3F            .byte	$3F
03469 0B97                        15            .byte	$15
03470 0B98                        3F            .byte	$3F
03471 0B99                        3F            .byte	$3F
03472 0B9A                        3F            .byte	$3F
03473 0B9B                        15            .byte	$15
03474 0B9C                        3F            .byte	$3F
03475 0B9D                        3F            .byte	$3F
03476                                           ! 826 };
03477 0B9E                        3F            .byte	$3F
03478                                           !BCC_EOS
03479                                           ! 827 static Bit8u palette2[63+1][3]=
03480                                           ! 828 {
03481                       00000B9F            _palette2:
03482                                           ! 829   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a
03483 0B9F                        00            .byte	0
03484 0BA0                        00            .byte	0
03485 0BA1                        00            .byte	0
03486 0BA2                        00            .byte	0
03487 0BA3                        00            .byte	0
03488 0BA4                        2A            .byte	$2A
03489 0BA5                        00            .byte	0
03490 0BA6                        2A            .byte	$2A
03491 0BA7                        00            .byte	0
03492 0BA8                        00            .byte	0
03493                                           ! 829 ,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03494 0BA9                        2A            .byte	$2A
03495 0BAA                        2A            .byte	$2A
03496 0BAB                        2A            .byte	$2A
03497 0BAC                        00            .byte	0
03498 0BAD                        00            .byte	0
03499 0BAE                        2A            .byte	$2A
03500 0BAF                        00            .byte	0
03501 0BB0                        2A            .byte	$2A
03502 0BB1                        2A            .byte	$2A
03503 0BB2                        2A            .byte	$2A
03504 0BB3                        00            .byte	0
03505 0BB4                        2A            .byte	$2A
03506 0BB5                        2A            .byte	$2A
03507 0BB6                        2A            .byte	$2A
03508                                           ! 830   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03509 0BB7                        00            .byte	0
03510 0BB8                        00            .byte	0
03511 0BB9                        15            .byte	$15
03512 0BBA                        00            .byte	0
03513 0BBB                        00            .byte	0
03514 0BBC                        3F            .byte	$3F
03515 0BBD                        00            .byte	0
03516 0BBE                        2A            .byte	$2A
03517 0BBF                        15            .byte	$15
03518 0BC0                        00            .byte	0
03519 0BC1                        2A            .byte	$2A
03520 0BC2                        3F            .byte	$3F
03521 0BC3                        2A            .byte	$2A
03522 0BC4                        00            .byte	0
03523 0BC5                        15            .byte	$15
03524 0BC6                        2A            .byte	$2A
03525 0BC7                        00            .byte	0
03526 0BC8                        3F            .byte	$3F
03527 0BC9                        2A            .byte	$2A
03528 0BCA                        2A            .byte	$2A
03529 0BCB                        15            .byte	$15
03530 0BCC                        2A            .byte	$2A
03531 0BCD                        2A            .byte	$2A
03532 0BCE                        3F            .byte	$3F
03533                                           ! 831   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03534 0BCF                        00            .byte	0
03535 0BD0                        15            .byte	$15
03536 0BD1                        00            .byte	0
03537 0BD2                        00            .byte	0
03538 0BD3                        15            .byte	$15
03539 0BD4                        2A            .byte	$2A
03540 0BD5                        00            .byte	0
03541 0BD6                        3F            .byte	$3F
03542 0BD7                        00            .byte	0
03543 0BD8                        00            .byte	0
03544 0BD9                        3F            .byte	$3F
03545 0BDA                        2A            .byte	$2A
03546 0BDB                        2A            .byte	$2A
03547 0BDC                        15            .byte	$15
03548 0BDD                        00            .byte	0
03549 0BDE                        2A            .byte	$2A
03550 0BDF                        15            .byte	$15
03551 0BE0                        2A            .byte	$2A
03552 0BE1                        2A            .byte	$2A
03553 0BE2                        3F            .byte	$3F
03554 0BE3                        00            .byte	0
03555 0BE4                        2A            .byte	$2A
03556 0BE5                        3F            .byte	$3F
03557 0BE6                        2A            .byte	$2A
03558                                           ! 832   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03559 0BE7                        00            .byte	0
03560 0BE8                        15            .byte	$15
03561 0BE9                        15            .byte	$15
03562 0BEA                        00            .byte	0
03563 0BEB                        15            .byte	$15
03564 0BEC                        3F            .byte	$3F
03565 0BED                        00            .byte	0
03566 0BEE                        3F            .byte	$3F
03567 0BEF                        15            .byte	$15
03568 0BF0                        00            .byte	0
03569 0BF1                        3F            .byte	$3F
03570 0BF2                        3F            .byte	$3F
03571 0BF3                        2A            .byte	$2A
03572 0BF4                        15            .byte	$15
03573 0BF5                        15            .byte	$15
03574 0BF6                        2A            .byte	$2A
03575 0BF7                        15            .byte	$15
03576 0BF8                        3F            .byte	$3F
03577 0BF9                        2A            .byte	$2A
03578 0BFA                        3F            .byte	$3F
03579 0BFB                        15            .byte	$15
03580 0BFC                        2A            .byte	$2A
03581 0BFD                        3F            .byte	$3F
03582 0BFE                        3F            .byte	$3F
03583                                           ! 833   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03584 0BFF                        15            .byte	$15
03585 0C00                        00            .byte	0
03586 0C01                        00            .byte	0
03587 0C02                        15            .byte	$15
03588 0C03                        00            .byte	0
03589 0C04                        2A            .byte	$2A
03590 0C05                        15            .byte	$15
03591 0C06                        2A            .byte	$2A
03592 0C07                        00            .byte	0
03593 0C08                        15            .byte	$15
03594 0C09                        2A            .byte	$2A
03595 0C0A                        2A            .byte	$2A
03596 0C0B                        3F            .byte	$3F
03597 0C0C                        00            .byte	0
03598 0C0D                        00            .byte	0
03599 0C0E                        3F            .byte	$3F
03600 0C0F                        00            .byte	0
03601 0C10                        2A            .byte	$2A
03602 0C11                        3F            .byte	$3F
03603 0C12                        2A            .byte	$2A
03604 0C13                        00            .byte	0
03605 0C14                        3F            .byte	$3F
03606 0C15                        2A            .byte	$2A
03607 0C16                        2A            .byte	$2A
03608                                           ! 834   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03609 0C17                        15            .byte	$15
03610 0C18                        00            .byte	0
03611 0C19                        15            .byte	$15
03612 0C1A                        15            .byte	$15
03613 0C1B                        00            .byte	0
03614 0C1C                        3F            .byte	$3F
03615 0C1D                        15            .byte	$15
03616 0C1E                        2A            .byte	$2A
03617 0C1F                        15            .byte	$15
03618 0C20                        15            .byte	$15
03619 0C21                        2A            .byte	$2A
03620 0C22                        3F            .byte	$3F
03621 0C23                        3F            .byte	$3F
03622 0C24                        00            .byte	0
03623 0C25                        15            .byte	$15
03624 0C26                        3F            .byte	$3F
03625 0C27                        00            .byte	0
03626 0C28                        3F            .byte	$3F
03627 0C29                        3F            .byte	$3F
03628 0C2A                        2A            .byte	$2A
03629 0C2B                        15            .byte	$15
03630 0C2C                        3F            .byte	$3F
03631 0C2D                        2A            .byte	$2A
03632 0C2E                        3F            .byte	$3F
03633                                           ! 835   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03634 0C2F                        15            .byte	$15
03635 0C30                        15            .byte	$15
03636 0C31                        00            .byte	0
03637 0C32                        15            .byte	$15
03638 0C33                        15            .byte	$15
03639 0C34                        2A            .byte	$2A
03640 0C35                        15            .byte	$15
03641 0C36                        3F            .byte	$3F
03642 0C37                        00            .byte	0
03643 0C38                        15            .byte	$15
03644 0C39                        3F            .byte	$3F
03645 0C3A                        2A            .byte	$2A
03646 0C3B                        3F            .byte	$3F
03647 0C3C                        15            .byte	$15
03648 0C3D                        00            .byte	0
03649 0C3E                        3F            .byte	$3F
03650 0C3F                        15            .byte	$15
03651 0C40                        2A            .byte	$2A
03652 0C41                        3F            .byte	$3F
03653 0C42                        3F            .byte	$3F
03654 0C43                        00            .byte	0
03655 0C44                        3F            .byte	$3F
03656 0C45                        3F            .byte	$3F
03657 0C46                        2A            .byte	$2A
03658                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03659 0C47                        15            .byte	$15
03660 0C48                        15            .byte	$15
03661 0C49                        15            .byte	$15
03662 0C4A                        15            .byte	$15
03663 0C4B                        15            .byte	$15
03664 0C4C                        3F            .byte	$3F
03665 0C4D                        15            .byte	$15
03666 0C4E                        3F            .byte	$3F
03667 0C4F                        15            .byte	$15
03668 0C50                        15            .byte	$15
03669 0C51                        3F            .byte	$3F
03670 0C52                        3F            .byte	$3F
03671 0C53                        3F            .byte	$3F
03672 0C54                        15            .byte	$15
03673 0C55                        15            .byte	$15
03674 0C56                        3F            .byte	$3F
03675 0C57                        15            .byte	$15
03676 0C58                        3F            .byte	$3F
03677 0C59                        3F            .byte	$3F
03678 0C5A                        3F            .byte	$3F
03679 0C5B                        15            .byte	$15
03680 0C5C                        3F            .byte	$3F
03681 0C5D                        3F            .byte	$3F
03682                                           ! 837 };
03683 0C5E                        3F            .byte	$3F
03684                                           !BCC_EOS
03685                                           ! 838 static Bit8u palette3[256][3]=
03686                                           ! 839 {
03687                       00000C5F            _palette3:
03688                                           ! 840   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03689 0C5F                        00            .byte	0
03690 0C60                        00            .byte	0
03691 0C61                        00            .byte	0
03692 0C62                        00            .byte	0
03693 0C63                        00            .byte	0
03694 0C64                        2A            .byte	$2A
03695 0C65                        00            .byte	0
03696 0C66                        2A            .byte	$2A
03697 0C67                        00            .byte	0
03698 0C68                        00            .byte	0
03699 0C69                        2A            .byte	$2A
03700 0C6A                        2A            .byte	$2A
03701 0C6B                        2A            .byte	$2A
03702 0C6C                        00            .byte	0
03703 0C6D                        00            .byte	0
03704 0C6E                        2A            .byte	$2A
03705 0C6F                        00            .byte	0
03706 0C70                        2A            .byte	$2A
03707 0C71                        2A            .byte	$2A
03708 0C72                        15            .byte	$15
03709 0C73                        00            .byte	0
03710 0C74                        2A            .byte	$2A
03711 0C75                        2A            .byte	$2A
03712 0C76                        2A            .byte	$2A
03713                                           ! 841   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03714 0C77                        15            .byte	$15
03715 0C78                        15            .byte	$15
03716 0C79                        15            .byte	$15
03717 0C7A                        15            .byte	$15
03718 0C7B                        15            .byte	$15
03719 0C7C                        3F            .byte	$3F
03720 0C7D                        15            .byte	$15
03721 0C7E                        3F            .byte	$3F
03722 0C7F                        15            .byte	$15
03723 0C80                        15            .byte	$15
03724 0C81                        3F            .byte	$3F
03725 0C82                        3F            .byte	$3F
03726 0C83                        3F            .byte	$3F
03727 0C84                        15            .byte	$15
03728 0C85                        15            .byte	$15
03729 0C86                        3F            .byte	$3F
03730 0C87                        15            .byte	$15
03731 0C88                        3F            .byte	$3F
03732 0C89                        3F            .byte	$3F
03733 0C8A                        3F            .byte	$3F
03734 0C8B                        15            .byte	$15
03735 0C8C                        3F            .byte	$3F
03736 0C8D                        3F            .byte	$3F
03737 0C8E                        3F            .byte	$3F
03738                                           ! 842   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03739 0C8F                        00            .byte	0
03740 0C90                        00            .byte	0
03741 0C91                        00            .byte	0
03742 0C92                        05            .byte	5
03743 0C93                        05            .byte	5
03744 0C94                        05            .byte	5
03745 0C95                        08            .byte	8
03746 0C96                        08            .byte	8
03747 0C97                        08            .byte	8
03748 0C98                        0B            .byte	$B
03749 0C99                        0B            .byte	$B
03750 0C9A                        0B            .byte	$B
03751 0C9B                        0E            .byte	$E
03752 0C9C                        0E            .byte	$E
03753 0C9D                        0E            .byte	$E
03754 0C9E                        11            .byte	$11
03755 0C9F                        11            .byte	$11
03756 0CA0                        11            .byte	$11
03757 0CA1                        14            .byte	$14
03758 0CA2                        14            .byte	$14
03759 0CA3                        14            .byte	$14
03760 0CA4                        18            .byte	$18
03761 0CA5                        18            .byte	$18
03762 0CA6                        18            .byte	$18
03763                                           ! 843   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03764 0CA7                        1C            .byte	$1C
03765 0CA8                        1C            .byte	$1C
03766 0CA9                        1C            .byte	$1C
03767 0CAA                        20            .byte	$20
03768 0CAB                        20            .byte	$20
03769 0CAC                        20            .byte	$20
03770 0CAD                        24            .byte	$24
03771 0CAE                        24            .byte	$24
03772 0CAF                        24            .byte	$24
03773 0CB0                        28            .byte	$28
03774 0CB1                        28            .byte	$28
03775 0CB2                        28            .byte	$28
03776 0CB3                        2D            .byte	$2D
03777 0CB4                        2D            .byte	$2D
03778 0CB5                        2D            .byte	$2D
03779 0CB6                        32            .byte	$32
03780 0CB7                        32            .byte	$32
03781 0CB8                        32            .byte	$32
03782 0CB9                        38            .byte	$38
03783 0CBA                        38            .byte	$38
03784 0CBB                        38            .byte	$38
03785 0CBC                        3F            .byte	$3F
03786 0CBD                        3F            .byte	$3F
03787 0CBE                        3F            .byte	$3F
03788                                           ! 844   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03789 0CBF                        00            .byte	0
03790 0CC0                        00            .byte	0
03791 0CC1                        3F            .byte	$3F
03792 0CC2                        10            .byte	$10
03793 0CC3                        00            .byte	0
03794 0CC4                        3F            .byte	$3F
03795 0CC5                        1F            .byte	$1F
03796 0CC6                        00            .byte	0
03797 0CC7                        3F            .byte	$3F
03798 0CC8                        2F            .byte	$2F
03799 0CC9                        00            .byte	0
03800 0CCA                        3F            .byte	$3F
03801 0CCB                        3F            .byte	$3F
03802 0CCC                        00            .byte	0
03803 0CCD                        3F            .byte	$3F
03804 0CCE                        3F            .byte	$3F
03805 0CCF                        00            .byte	0
03806 0CD0                        2F            .byte	$2F
03807 0CD1                        3F            .byte	$3F
03808 0CD2                        00            .byte	0
03809 0CD3                        1F            .byte	$1F
03810 0CD4                        3F            .byte	$3F
03811 0CD5                        00            .byte	0
03812 0CD6                        10            .byte	$10
03813                                           ! 845   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03814 0CD7                        3F            .byte	$3F
03815 0CD8                        00            .byte	0
03816 0CD9                        00            .byte	0
03817 0CDA                        3F            .byte	$3F
03818 0CDB                        10            .byte	$10
03819 0CDC                        00            .byte	0
03820 0CDD                        3F            .byte	$3F
03821 0CDE                        1F            .byte	$1F
03822 0CDF                        00            .byte	0
03823 0CE0                        3F            .byte	$3F
03824 0CE1                        2F            .byte	$2F
03825 0CE2                        00            .byte	0
03826 0CE3                        3F            .byte	$3F
03827 0CE4                        3F            .byte	$3F
03828 0CE5                        00            .byte	0
03829 0CE6                        2F            .byte	$2F
03830 0CE7                        3F            .byte	$3F
03831 0CE8                        00            .byte	0
03832 0CE9                        1F            .byte	$1F
03833 0CEA                        3F            .byte	$3F
03834 0CEB                        00            .byte	0
03835 0CEC                        10            .byte	$10
03836 0CED                        3F            .byte	$3F
03837 0CEE                        00            .byte	0
03838                                           ! 846   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03839 0CEF                        00            .byte	0
03840 0CF0                        3F            .byte	$3F
03841 0CF1                        00            .byte	0
03842 0CF2                        00            .byte	0
03843 0CF3                        3F            .byte	$3F
03844 0CF4                        10            .byte	$10
03845 0CF5                        00            .byte	0
03846 0CF6                        3F            .byte	$3F
03847 0CF7                        1F            .byte	$1F
03848 0CF8                        00            .byte	0
03849 0CF9                        3F            .byte	$3F
03850 0CFA                        2F            .byte	$2F
03851 0CFB                        00            .byte	0
03852 0CFC                        3F            .byte	$3F
03853 0CFD                        3F            .byte	$3F
03854 0CFE                        00            .byte	0
03855 0CFF                        2F            .byte	$2F
03856 0D00                        3F            .byte	$3F
03857 0D01                        00            .byte	0
03858 0D02                        1F            .byte	$1F
03859 0D03                        3F            .byte	$3F
03860 0D04                        00            .byte	0
03861 0D05                        10            .byte	$10
03862 0D06                        3F            .byte	$3F
03863                                           ! 847   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1
03864 0D07                        1F            .byte	$1F
03865 0D08                        1F            .byte	$1F
03866 0D09                        3F            .byte	$3F
03867 0D0A                        27            .byte	$27
03868 0D0B                        1F            .byte	$1F
03869 0D0C                        3F            .byte	$3F
03870 0D0D                        2F            .byte	$2F
03871 0D0E                        1F            .byte	$1F
03872 0D0F                        3F            .byte	$3F
03873 0D10                        37            .byte	$37
03874 0D11                        1F            .byte	$1F
03875 0D12                        3F            .byte	$3F
03876 0D13                        3F            .byte	$3F
03877 0D14                        1F            .byte	$1F
03878 0D15                        3F            .byte	$3F
03879 0D16                        3F            .byte	$3F
03880 0D17                        1F            .byte	$1F
03881 0D18                        37            .byte	$37
03882 0D19                        3F            .byte	$3F
03883 0D1A                        1F            .byte	$1F
03884 0D1B                        2F            .byte	$2F
03885 0D1C                        3F            .byte	$3F
03886                                           ! 847 f,0x27,
03887 0D1D                        1F            .byte	$1F
03888 0D1E                        27            .byte	$27
03889                                           ! 848   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03890 0D1F                        3F            .byte	$3F
03891 0D20                        1F            .byte	$1F
03892 0D21                        1F            .byte	$1F
03893 0D22                        3F            .byte	$3F
03894 0D23                        27            .byte	$27
03895 0D24                        1F            .byte	$1F
03896 0D25                        3F            .byte	$3F
03897 0D26                        2F            .byte	$2F
03898 0D27                        1F            .byte	$1F
03899 0D28                        3F            .byte	$3F
03900 0D29                        37            .byte	$37
03901 0D2A                        1F            .byte	$1F
03902 0D2B                        3F            .byte	$3F
03903 0D2C                        3F            .byte	$3F
03904 0D2D                        1F            .byte	$1F
03905 0D2E                        37            .byte	$37
03906 0D2F                        3F            .byte	$3F
03907 0D30                        1F            .byte	$1F
03908 0D31                        2F            .byte	$2F
03909 0D32                        3F            .byte	$3F
03910 0D33                        1F            .byte	$1F
03911 0D34                        27            .byte	$27
03912 0D35                        3F            .byte	$3F
03913 0D36                        1F            .byte	$1F
03914                                           ! 849   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03915 0D37                        1F            .byte	$1F
03916 0D38                        3F            .byte	$3F
03917 0D39                        1F            .byte	$1F
03918 0D3A                        1F            .byte	$1F
03919 0D3B                        3F            .byte	$3F
03920 0D3C                        27            .byte	$27
03921 0D3D                        1F            .byte	$1F
03922 0D3E                        3F            .byte	$3F
03923 0D3F                        2F            .byte	$2F
03924 0D40                        1F            .byte	$1F
03925 0D41                        3F            .byte	$3F
03926 0D42                        37            .byte	$37
03927 0D43                        1F            .byte	$1F
03928 0D44                        3F            .byte	$3F
03929 0D45                        3F            .byte	$3F
03930 0D46                        1F            .byte	$1F
03931 0D47                        37            .byte	$37
03932 0D48                        3F            .byte	$3F
03933 0D49                        1F            .byte	$1F
03934 0D4A                        2F            .byte	$2F
03935 0D4B                        3F            .byte	$3F
03936 0D4C                        1F            .byte	$1F
03937 0D4D                        27            .byte	$27
03938 0D4E                        3F            .byte	$3F
03939                                           ! 850   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03940 0D4F                        2D            .byte	$2D
03941 0D50                        2D            .byte	$2D
03942 0D51                        3F            .byte	$3F
03943 0D52                        31            .byte	$31
03944 0D53                        2D            .byte	$2D
03945 0D54                        3F            .byte	$3F
03946 0D55                        36            .byte	$36
03947 0D56                        2D            .byte	$2D
03948 0D57                        3F            .byte	$3F
03949 0D58                        3A            .byte	$3A
03950 0D59                        2D            .byte	$2D
03951 0D5A                        3F            .byte	$3F
03952 0D5B                        3F            .byte	$3F
03953 0D5C                        2D            .byte	$2D
03954 0D5D                        3F            .byte	$3F
03955 0D5E                        3F            .byte	$3F
03956 0D5F                        2D            .byte	$2D
03957 0D60                        3A            .byte	$3A
03958 0D61                        3F            .byte	$3F
03959 0D62                        2D            .byte	$2D
03960 0D63                        36            .byte	$36
03961 0D64                        3F            .byte	$3F
03962 0D65                        2D            .byte	$2D
03963 0D66                        31            .byte	$31
03964                                           ! 851   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03965 0D67                        3F            .byte	$3F
03966 0D68                        2D            .byte	$2D
03967 0D69                        2D            .byte	$2D
03968 0D6A                        3F            .byte	$3F
03969 0D6B                        31            .byte	$31
03970 0D6C                        2D            .byte	$2D
03971 0D6D                        3F            .byte	$3F
03972 0D6E                        36            .byte	$36
03973 0D6F                        2D            .byte	$2D
03974 0D70                        3F            .byte	$3F
03975 0D71                        3A            .byte	$3A
03976 0D72                        2D            .byte	$2D
03977 0D73                        3F            .byte	$3F
03978 0D74                        3F            .byte	$3F
03979 0D75                        2D            .byte	$2D
03980 0D76                        3A            .byte	$3A
03981 0D77                        3F            .byte	$3F
03982 0D78                        2D            .byte	$2D
03983 0D79                        36            .byte	$36
03984 0D7A                        3F            .byte	$3F
03985 0D7B                        2D            .byte	$2D
03986 0D7C                        31            .byte	$31
03987 0D7D                        3F            .byte	$3F
03988 0D7E                        2D            .byte	$2D
03989                                           ! 852   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03990 0D7F                        2D            .byte	$2D
03991 0D80                        3F            .byte	$3F
03992 0D81                        2D            .byte	$2D
03993 0D82                        2D            .byte	$2D
03994 0D83                        3F            .byte	$3F
03995 0D84                        31            .byte	$31
03996 0D85                        2D            .byte	$2D
03997 0D86                        3F            .byte	$3F
03998 0D87                        36            .byte	$36
03999 0D88                        2D            .byte	$2D
04000 0D89                        3F            .byte	$3F
04001 0D8A                        3A            .byte	$3A
04002 0D8B                        2D            .byte	$2D
04003 0D8C                        3F            .byte	$3F
04004 0D8D                        3F            .byte	$3F
04005 0D8E                        2D            .byte	$2D
04006 0D8F                        3A            .byte	$3A
04007 0D90                        3F            .byte	$3F
04008 0D91                        2D            .byte	$2D
04009 0D92                        36            .byte	$36
04010 0D93                        3F            .byte	$3F
04011 0D94                        2D            .byte	$2D
04012 0D95                        31            .byte	$31
04013 0D96                        3F            .byte	$3F
04014                                           ! 853   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04015 0D97                        00            .byte	0
04016 0D98                        00            .byte	0
04017 0D99                        1C            .byte	$1C
04018 0D9A                        07            .byte	7
04019 0D9B                        00            .byte	0
04020 0D9C                        1C            .byte	$1C
04021 0D9D                        0E            .byte	$E
04022 0D9E                        00            .byte	0
04023 0D9F                        1C            .byte	$1C
04024 0DA0                        15            .byte	$15
04025 0DA1                        00            .byte	0
04026 0DA2                        1C            .byte	$1C
04027 0DA3                        1C            .byte	$1C
04028 0DA4                        00            .byte	0
04029 0DA5                        1C            .byte	$1C
04030 0DA6                        1C            .byte	$1C
04031 0DA7                        00            .byte	0
04032 0DA8                        15            .byte	$15
04033 0DA9                        1C            .byte	$1C
04034 0DAA                        00            .byte	0
04035 0DAB                        0E            .byte	$E
04036 0DAC                        1C            .byte	$1C
04037 0DAD                        00            .byte	0
04038 0DAE                        07            .byte	7
04039                                           ! 854   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04040 0DAF                        1C            .byte	$1C
04041 0DB0                        00            .byte	0
04042 0DB1                        00            .byte	0
04043 0DB2                        1C            .byte	$1C
04044 0DB3                        07            .byte	7
04045 0DB4                        00            .byte	0
04046 0DB5                        1C            .byte	$1C
04047 0DB6                        0E            .byte	$E
04048 0DB7                        00            .byte	0
04049 0DB8                        1C            .byte	$1C
04050 0DB9                        15            .byte	$15
04051 0DBA                        00            .byte	0
04052 0DBB                        1C            .byte	$1C
04053 0DBC                        1C            .byte	$1C
04054 0DBD                        00            .byte	0
04055 0DBE                        15            .byte	$15
04056 0DBF                        1C            .byte	$1C
04057 0DC0                        00            .byte	0
04058 0DC1                        0E            .byte	$E
04059 0DC2                        1C            .byte	$1C
04060 0DC3                        00            .byte	0
04061 0DC4                        07            .byte	7
04062 0DC5                        1C            .byte	$1C
04063 0DC6                        00            .byte	0
04064                                           ! 855   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04065 0DC7                        00            .byte	0
04066 0DC8                        1C            .byte	$1C
04067 0DC9                        00            .byte	0
04068 0DCA                        00            .byte	0
04069 0DCB                        1C            .byte	$1C
04070 0DCC                        07            .byte	7
04071 0DCD                        00            .byte	0
04072 0DCE                        1C            .byte	$1C
04073 0DCF                        0E            .byte	$E
04074 0DD0                        00            .byte	0
04075 0DD1                        1C            .byte	$1C
04076 0DD2                        15            .byte	$15
04077 0DD3                        00            .byte	0
04078 0DD4                        1C            .byte	$1C
04079 0DD5                        1C            .byte	$1C
04080 0DD6                        00            .byte	0
04081 0DD7                        15            .byte	$15
04082 0DD8                        1C            .byte	$1C
04083 0DD9                        00            .byte	0
04084 0DDA                        0E            .byte	$E
04085 0DDB                        1C            .byte	$1C
04086 0DDC                        00            .byte	0
04087 0DDD                        07            .byte	7
04088 0DDE                        1C            .byte	$1C
04089                                           ! 856   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04090 0DDF                        0E            .byte	$E
04091 0DE0                        0E            .byte	$E
04092 0DE1                        1C            .byte	$1C
04093 0DE2                        11            .byte	$11
04094 0DE3                        0E            .byte	$E
04095 0DE4                        1C            .byte	$1C
04096 0DE5                        15            .byte	$15
04097 0DE6                        0E            .byte	$E
04098 0DE7                        1C            .byte	$1C
04099 0DE8                        18            .byte	$18
04100 0DE9                        0E            .byte	$E
04101 0DEA                        1C            .byte	$1C
04102 0DEB                        1C            .byte	$1C
04103 0DEC                        0E            .byte	$E
04104 0DED                        1C            .byte	$1C
04105 0DEE                        1C            .byte	$1C
04106 0DEF                        0E            .byte	$E
04107 0DF0                        18            .byte	$18
04108 0DF1                        1C            .byte	$1C
04109 0DF2                        0E            .byte	$E
04110 0DF3                        15            .byte	$15
04111 0DF4                        1C            .byte	$1C
04112 0DF5                        0E            .byte	$E
04113 0DF6                        11            .byte	$11
04114                                           ! 857   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04115 0DF7                        1C            .byte	$1C
04116 0DF8                        0E            .byte	$E
04117 0DF9                        0E            .byte	$E
04118 0DFA                        1C            .byte	$1C
04119 0DFB                        11            .byte	$11
04120 0DFC                        0E            .byte	$E
04121 0DFD                        1C            .byte	$1C
04122 0DFE                        15            .byte	$15
04123 0DFF                        0E            .byte	$E
04124 0E00                        1C            .byte	$1C
04125 0E01                        18            .byte	$18
04126 0E02                        0E            .byte	$E
04127 0E03                        1C            .byte	$1C
04128 0E04                        1C            .byte	$1C
04129 0E05                        0E            .byte	$E
04130 0E06                        18            .byte	$18
04131 0E07                        1C            .byte	$1C
04132 0E08                        0E            .byte	$E
04133 0E09                        15            .byte	$15
04134 0E0A                        1C            .byte	$1C
04135 0E0B                        0E            .byte	$E
04136 0E0C                        11            .byte	$11
04137 0E0D                        1C            .byte	$1C
04138 0E0E                        0E            .byte	$E
04139                                           ! 858   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04140 0E0F                        0E            .byte	$E
04141 0E10                        1C            .byte	$1C
04142 0E11                        0E            .byte	$E
04143 0E12                        0E            .byte	$E
04144 0E13                        1C            .byte	$1C
04145 0E14                        11            .byte	$11
04146 0E15                        0E            .byte	$E
04147 0E16                        1C            .byte	$1C
04148 0E17                        15            .byte	$15
04149 0E18                        0E            .byte	$E
04150 0E19                        1C            .byte	$1C
04151 0E1A                        18            .byte	$18
04152 0E1B                        0E            .byte	$E
04153 0E1C                        1C            .byte	$1C
04154 0E1D                        1C            .byte	$1C
04155 0E1E                        0E            .byte	$E
04156 0E1F                        18            .byte	$18
04157 0E20                        1C            .byte	$1C
04158 0E21                        0E            .byte	$E
04159 0E22                        15            .byte	$15
04160 0E23                        1C            .byte	$1C
04161 0E24                        0E            .byte	$E
04162 0E25                        11            .byte	$11
04163 0E26                        1C            .byte	$1C
04164                                           ! 859   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04165 0E27                        14            .byte	$14
04166 0E28                        14            .byte	$14
04167 0E29                        1C            .byte	$1C
04168 0E2A                        16            .byte	$16
04169 0E2B                        14            .byte	$14
04170 0E2C                        1C            .byte	$1C
04171 0E2D                        18            .byte	$18
04172 0E2E                        14            .byte	$14
04173 0E2F                        1C            .byte	$1C
04174 0E30                        1A            .byte	$1A
04175 0E31                        14            .byte	$14
04176 0E32                        1C            .byte	$1C
04177 0E33                        1C            .byte	$1C
04178 0E34                        14            .byte	$14
04179 0E35                        1C            .byte	$1C
04180 0E36                        1C            .byte	$1C
04181 0E37                        14            .byte	$14
04182 0E38                        1A            .byte	$1A
04183 0E39                        1C            .byte	$1C
04184 0E3A                        14            .byte	$14
04185 0E3B                        18            .byte	$18
04186 0E3C                        1C            .byte	$1C
04187 0E3D                        14            .byte	$14
04188 0E3E                        16            .byte	$16
04189                                           ! 860   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04190 0E3F                        1C            .byte	$1C
04191 0E40                        14            .byte	$14
04192 0E41                        14            .byte	$14
04193 0E42                        1C            .byte	$1C
04194 0E43                        16            .byte	$16
04195 0E44                        14            .byte	$14
04196 0E45                        1C            .byte	$1C
04197 0E46                        18            .byte	$18
04198 0E47                        14            .byte	$14
04199 0E48                        1C            .byte	$1C
04200 0E49                        1A            .byte	$1A
04201 0E4A                        14            .byte	$14
04202 0E4B                        1C            .byte	$1C
04203 0E4C                        1C            .byte	$1C
04204 0E4D                        14            .byte	$14
04205 0E4E                        1A            .byte	$1A
04206 0E4F                        1C            .byte	$1C
04207 0E50                        14            .byte	$14
04208 0E51                        18            .byte	$18
04209 0E52                        1C            .byte	$1C
04210 0E53                        14            .byte	$14
04211 0E54                        16            .byte	$16
04212 0E55                        1C            .byte	$1C
04213 0E56                        14            .byte	$14
04214                                           ! 861   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04215 0E57                        14            .byte	$14
04216 0E58                        1C            .byte	$1C
04217 0E59                        14            .byte	$14
04218 0E5A                        14            .byte	$14
04219 0E5B                        1C            .byte	$1C
04220 0E5C                        16            .byte	$16
04221 0E5D                        14            .byte	$14
04222 0E5E                        1C            .byte	$1C
04223 0E5F                        18            .byte	$18
04224 0E60                        14            .byte	$14
04225 0E61                        1C            .byte	$1C
04226 0E62                        1A            .byte	$1A
04227 0E63                        14            .byte	$14
04228 0E64                        1C            .byte	$1C
04229 0E65                        1C            .byte	$1C
04230 0E66                        14            .byte	$14
04231 0E67                        1A            .byte	$1A
04232 0E68                        1C            .byte	$1C
04233 0E69                        14            .byte	$14
04234 0E6A                        18            .byte	$18
04235 0E6B                        1C            .byte	$1C
04236 0E6C                        14            .byte	$14
04237 0E6D                        16            .byte	$16
04238 0E6E                        1C            .byte	$1C
04239                                           ! 862   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04240 0E6F                        00            .byte	0
04241 0E70                        00            .byte	0
04242 0E71                        10            .byte	$10
04243 0E72                        04            .byte	4
04244 0E73                        00            .byte	0
04245 0E74                        10            .byte	$10
04246 0E75                        08            .byte	8
04247 0E76                        00            .byte	0
04248 0E77                        10            .byte	$10
04249 0E78                        0C            .byte	$C
04250 0E79                        00            .byte	0
04251 0E7A                        10            .byte	$10
04252 0E7B                        10            .byte	$10
04253 0E7C                        00            .byte	0
04254 0E7D                        10            .byte	$10
04255 0E7E                        10            .byte	$10
04256 0E7F                        00            .byte	0
04257 0E80                        0C            .byte	$C
04258 0E81                        10            .byte	$10
04259 0E82                        00            .byte	0
04260 0E83                        08            .byte	8
04261 0E84                        10            .byte	$10
04262 0E85                        00            .byte	0
04263 0E86                        04            .byte	4
04264                                           ! 863   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x1
04265 0E87                        10            .byte	$10
04266 0E88                        00            .byte	0
04267 0E89                        00            .byte	0
04268 0E8A                        10            .byte	$10
04269 0E8B                        04            .byte	4
04270 0E8C                        00            .byte	0
04271 0E8D                        10            .byte	$10
04272 0E8E                        08            .byte	8
04273 0E8F                        00            .byte	0
04274 0E90                        10            .byte	$10
04275 0E91                        0C            .byte	$C
04276 0E92                        00            .byte	0
04277 0E93                        10            .byte	$10
04278 0E94                        10            .byte	$10
04279 0E95                        00            .byte	0
04280 0E96                        0C            .byte	$C
04281                                           ! 863 0,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04282 0E97                        10            .byte	$10
04283 0E98                        00            .byte	0
04284 0E99                        08            .byte	8
04285 0E9A                        10            .byte	$10
04286 0E9B                        00            .byte	0
04287 0E9C                        04            .byte	4
04288 0E9D                        10            .byte	$10
04289 0E9E                        00            .byte	0
04290                                           ! 864   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04291 0E9F                        00            .byte	0
04292 0EA0                        10            .byte	$10
04293 0EA1                        00            .byte	0
04294 0EA2                        00            .byte	0
04295 0EA3                        10            .byte	$10
04296 0EA4                        04            .byte	4
04297 0EA5                        00            .byte	0
04298 0EA6                        10            .byte	$10
04299 0EA7                        08            .byte	8
04300 0EA8                        00            .byte	0
04301 0EA9                        10            .byte	$10
04302 0EAA                        0C            .byte	$C
04303 0EAB                        00            .byte	0
04304 0EAC                        10            .byte	$10
04305 0EAD                        10            .byte	$10
04306 0EAE                        00            .byte	0
04307 0EAF                        0C            .byte	$C
04308 0EB0                        10            .byte	$10
04309 0EB1                        00            .byte	0
04310 0EB2                        08            .byte	8
04311 0EB3                        10            .byte	$10
04312 0EB4                        00            .byte	0
04313 0EB5                        04            .byte	4
04314 0EB6                        10            .byte	$10
04315                                           ! 865   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04316 0EB7                        08            .byte	8
04317 0EB8                        08            .byte	8
04318 0EB9                        10            .byte	$10
04319 0EBA                        0A            .byte	$A
04320 0EBB                        08            .byte	8
04321 0EBC                        10            .byte	$10
04322 0EBD                        0C            .byte	$C
04323 0EBE                        08            .byte	8
04324 0EBF                        10            .byte	$10
04325 0EC0                        0E            .byte	$E
04326 0EC1                        08            .byte	8
04327 0EC2                        10            .byte	$10
04328 0EC3                        10            .byte	$10
04329 0EC4                        08            .byte	8
04330 0EC5                        10            .byte	$10
04331 0EC6                        10            .byte	$10
04332 0EC7                        08            .byte	8
04333 0EC8                        0E            .byte	$E
04334 0EC9                        10            .byte	$10
04335 0ECA                        08            .byte	8
04336 0ECB                        0C            .byte	$C
04337 0ECC                        10            .byte	$10
04338 0ECD                        08            .byte	8
04339 0ECE                        0A            .byte	$A
04340                                           ! 866   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04341 0ECF                        10            .byte	$10
04342 0ED0                        08            .byte	8
04343 0ED1                        08            .byte	8
04344 0ED2                        10            .byte	$10
04345 0ED3                        0A            .byte	$A
04346 0ED4                        08            .byte	8
04347 0ED5                        10            .byte	$10
04348 0ED6                        0C            .byte	$C
04349 0ED7                        08            .byte	8
04350 0ED8                        10            .byte	$10
04351 0ED9                        0E            .byte	$E
04352 0EDA                        08            .byte	8
04353 0EDB                        10            .byte	$10
04354 0EDC                        10            .byte	$10
04355 0EDD                        08            .byte	8
04356 0EDE                        0E            .byte	$E
04357 0EDF                        10            .byte	$10
04358 0EE0                        08            .byte	8
04359 0EE1                        0C            .byte	$C
04360 0EE2                        10            .byte	$10
04361 0EE3                        08            .byte	8
04362 0EE4                        0A            .byte	$A
04363 0EE5                        10            .byte	$10
04364 0EE6                        08            .byte	8
04365                                           ! 867   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04366 0EE7                        08            .byte	8
04367 0EE8                        10            .byte	$10
04368 0EE9                        08            .byte	8
04369 0EEA                        08            .byte	8
04370 0EEB                        10            .byte	$10
04371 0EEC                        0A            .byte	$A
04372 0EED                        08            .byte	8
04373 0EEE                        10            .byte	$10
04374 0EEF                        0C            .byte	$C
04375 0EF0                        08            .byte	8
04376 0EF1                        10            .byte	$10
04377 0EF2                        0E            .byte	$E
04378 0EF3                        08            .byte	8
04379 0EF4                        10            .byte	$10
04380 0EF5                        10            .byte	$10
04381 0EF6                        08            .byte	8
04382 0EF7                        0E            .byte	$E
04383 0EF8                        10            .byte	$10
04384 0EF9                        08            .byte	8
04385 0EFA                        0C            .byte	$C
04386 0EFB                        10            .byte	$10
04387 0EFC                        08            .byte	8
04388 0EFD                        0A            .byte	$A
04389 0EFE                        10            .byte	$10
04390                                           ! 868   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04391 0EFF                        0B            .byte	$B
04392 0F00                        0B            .byte	$B
04393 0F01                        10            .byte	$10
04394 0F02                        0C            .byte	$C
04395 0F03                        0B            .byte	$B
04396 0F04                        10            .byte	$10
04397 0F05                        0D            .byte	$D
04398 0F06                        0B            .byte	$B
04399 0F07                        10            .byte	$10
04400 0F08                        0F            .byte	$F
04401 0F09                        0B            .byte	$B
04402 0F0A                        10            .byte	$10
04403 0F0B                        10            .byte	$10
04404 0F0C                        0B            .byte	$B
04405 0F0D                        10            .byte	$10
04406 0F0E                        10            .byte	$10
04407 0F0F                        0B            .byte	$B
04408 0F10                        0F            .byte	$F
04409 0F11                        10            .byte	$10
04410 0F12                        0B            .byte	$B
04411 0F13                        0D            .byte	$D
04412 0F14                        10            .byte	$10
04413 0F15                        0B            .byte	$B
04414 0F16                        0C            .byte	$C
04415                                           ! 869   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04416 0F17                        10            .byte	$10
04417 0F18                        0B            .byte	$B
04418 0F19                        0B            .byte	$B
04419 0F1A                        10            .byte	$10
04420 0F1B                        0C            .byte	$C
04421 0F1C                        0B            .byte	$B
04422 0F1D                        10            .byte	$10
04423 0F1E                        0D            .byte	$D
04424 0F1F                        0B            .byte	$B
04425 0F20                        10            .byte	$10
04426 0F21                        0F            .byte	$F
04427 0F22                        0B            .byte	$B
04428 0F23                        10            .byte	$10
04429 0F24                        10            .byte	$10
04430 0F25                        0B            .byte	$B
04431 0F26                        0F            .byte	$F
04432 0F27                        10            .byte	$10
04433 0F28                        0B            .byte	$B
04434 0F29                        0D            .byte	$D
04435 0F2A                        10            .byte	$10
04436 0F2B                        0B            .byte	$B
04437 0F2C                        0C            .byte	$C
04438 0F2D                        10            .byte	$10
04439 0F2E                        0B            .byte	$B
04440                                           ! 870   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04441 0F2F                        0B            .byte	$B
04442 0F30                        10            .byte	$10
04443 0F31                        0B            .byte	$B
04444 0F32                        0B            .byte	$B
04445 0F33                        10            .byte	$10
04446 0F34                        0C            .byte	$C
04447 0F35                        0B            .byte	$B
04448 0F36                        10            .byte	$10
04449 0F37                        0D            .byte	$D
04450 0F38                        0B            .byte	$B
04451 0F39                        10            .byte	$10
04452 0F3A                        0F            .byte	$F
04453 0F3B                        0B            .byte	$B
04454 0F3C                        10            .byte	$10
04455 0F3D                        10            .byte	$10
04456 0F3E                        0B            .byte	$B
04457 0F3F                        0F            .byte	$F
04458 0F40                        10            .byte	$10
04459 0F41                        0B            .byte	$B
04460 0F42                        0D            .byte	$D
04461 0F43                        10            .byte	$10
04462 0F44                        0B            .byte	$B
04463 0F45                        0C            .byte	$C
04464 0F46                        10            .byte	$10
04465                                           ! 871   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04466 0F47                        00            .byte	0
04467 0F48                        00            .byte	0
04468 0F49                        00            .byte	0
04469 0F4A                        00            .byte	0
04470 0F4B                        00            .byte	0
04471 0F4C                        00            .byte	0
04472 0F4D                        00            .byte	0
04473 0F4E                        00            .byte	0
04474 0F4F                        00            .byte	0
04475 0F50                        00            .byte	0
04476 0F51                        00            .byte	0
04477 0F52                        00            .byte	0
04478 0F53                        00            .byte	0
04479 0F54                        00            .byte	0
04480 0F55                        00            .byte	0
04481 0F56                        00            .byte	0
04482 0F57                        00            .byte	0
04483 0F58                        00            .byte	0
04484 0F59                        00            .byte	0
04485 0F5A                        00            .byte	0
04486 0F5B                        00            .byte	0
04487 0F5C                        00            .byte	0
04488 0F5D                        00            .byte	0
04489                                           ! 872 };
04490 0F5E                        00            .byte	0
04491                                           !BCC_EOS
04492                                           ! 873 static Bit8u static_functionality[0x10]=
04493                                           ! 874 {
04494                       00000F5F            _static_functionality:
04495                                           ! 875          0xff,
04496 0F5F                        FF            .byte	$FF
04497                                           ! 876          0xe0,
04498 0F60                        E0            .byte	$E0
04499                                           ! 877          0x0f,
04500 0F61                        0F            .byte	$F
04501                                           ! 878          0x00, 0x00, 0x00, 0x00,
04502 0F62                        00            .byte	0
04503 0F63                        00            .byte	0
04504 0F64                        00            .byte	0
04505 0F65                        00            .byte	0
04506                                           ! 879          0x07,
04507 0F66                        07            .byte	7
04508                                           ! 880          0x02,
04509 0F67                        02            .byte	2
04510                                           ! 881          0x08,
04511 0F68                        08            .byte	8
04512                                           ! 882          0xe7,
04513 0F69                        E7            .byte	$E7
04514                                           ! 883          0x0c,
04515 0F6A                        0C            .byte	$C
04516                                           ! 884          0x00,
04517 0F6B                        00            .byte	0
04518                                           ! 885          0x00,
04519 0F6C                        00            .byte	0
04520                                           ! 886          0x00,
04521 0F6D                        00            .byte	0
04522                                           ! 887          0x00
04523                                           ! 888 };
04524 0F6E                        00            .byte	0
04525                                           !BCC_EOS
04526                                           ! 889 static Bit8u vgafont8[256*8]=
04527                                           ! 890 {
04528                       00000F6F            _vgafont8:
04529                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04530 0F6F                        00            .byte	0
04531 0F70                        00            .byte	0
04532 0F71                        00            .byte	0
04533 0F72                        00            .byte	0
04534 0F73                        00            .byte	0
04535 0F74                        00            .byte	0
04536 0F75                        00            .byte	0
04537 0F76                        00            .byte	0
04538                                           ! 892  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04539 0F77                        7E            .byte	$7E
04540 0F78                        81            .byte	$81
04541 0F79                        A5            .byte	$A5
04542 0F7A                        81            .byte	$81
04543 0F7B                        BD            .byte	$BD
04544 0F7C                        99            .byte	$99
04545 0F7D                        81            .byte	$81
04546 0F7E                        7E            .byte	$7E
04547                                           ! 893  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04548 0F7F                        7E            .byte	$7E
04549 0F80                        FF            .byte	$FF
04550 0F81                        DB            .byte	$DB
04551 0F82                        FF            .byte	$FF
04552 0F83                        C3            .byte	$C3
04553 0F84                        E7            .byte	$E7
04554 0F85                        FF            .byte	$FF
04555 0F86                        7E            .byte	$7E
04556                                           ! 894  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04557 0F87                        6C            .byte	$6C
04558 0F88                        FE            .byte	$FE
04559 0F89                        FE            .byte	$FE
04560 0F8A                        FE            .byte	$FE
04561 0F8B                        7C            .byte	$7C
04562 0F8C                        38            .byte	$38
04563 0F8D                        10            .byte	$10
04564 0F8E                        00            .byte	0
04565                                           ! 895  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04566 0F8F                        10            .byte	$10
04567 0F90                        38            .byte	$38
04568 0F91                        7C            .byte	$7C
04569 0F92                        FE            .byte	$FE
04570 0F93                        7C            .byte	$7C
04571 0F94                        38            .byte	$38
04572 0F95                        10            .byte	$10
04573 0F96                        00            .byte	0
04574                                           ! 896  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04575 0F97                        38            .byte	$38
04576 0F98                        7C            .byte	$7C
04577 0F99                        38            .byte	$38
04578 0F9A                        FE            .byte	$FE
04579 0F9B                        FE            .byte	$FE
04580 0F9C                        7C            .byte	$7C
04581 0F9D                        38            .byte	$38
04582 0F9E                        7C            .byte	$7C
04583                                           ! 897  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04584 0F9F                        10            .byte	$10
04585 0FA0                        10            .byte	$10
04586 0FA1                        38            .byte	$38
04587 0FA2                        7C            .byte	$7C
04588 0FA3                        FE            .byte	$FE
04589 0FA4                        7C            .byte	$7C
04590 0FA5                        38            .byte	$38
04591 0FA6                        7C            .byte	$7C
04592                                           ! 898  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04593 0FA7                        00            .byte	0
04594 0FA8                        00            .byte	0
04595 0FA9                        18            .byte	$18
04596 0FAA                        3C            .byte	$3C
04597 0FAB                        3C            .byte	$3C
04598 0FAC                        18            .byte	$18
04599 0FAD                        00            .byte	0
04600 0FAE                        00            .byte	0
04601                                           ! 899  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04602 0FAF                        FF            .byte	$FF
04603 0FB0                        FF            .byte	$FF
04604 0FB1                        E7            .byte	$E7
04605 0FB2                        C3            .byte	$C3
04606 0FB3                        C3            .byte	$C3
04607 0FB4                        E7            .byte	$E7
04608 0FB5                        FF            .byte	$FF
04609 0FB6                        FF            .byte	$FF
04610                                           ! 900  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04611 0FB7                        00            .byte	0
04612 0FB8                        3C            .byte	$3C
04613 0FB9                        66            .byte	$66
04614 0FBA                        42            .byte	$42
04615 0FBB                        42            .byte	$42
04616 0FBC                        66            .byte	$66
04617 0FBD                        3C            .byte	$3C
04618 0FBE                        00            .byte	0
04619                                           ! 901  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04620 0FBF                        FF            .byte	$FF
04621 0FC0                        C3            .byte	$C3
04622 0FC1                        99            .byte	$99
04623 0FC2                        BD            .byte	$BD
04624 0FC3                        BD            .byte	$BD
04625 0FC4                        99            .byte	$99
04626 0FC5                        C3            .byte	$C3
04627 0FC6                        FF            .byte	$FF
04628                                           ! 902  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04629 0FC7                        0F            .byte	$F
04630 0FC8                        07            .byte	7
04631 0FC9                        0F            .byte	$F
04632 0FCA                        7D            .byte	$7D
04633 0FCB                        CC            .byte	$CC
04634 0FCC                        CC            .byte	$CC
04635 0FCD                        CC            .byte	$CC
04636 0FCE                        78            .byte	$78
04637                                           ! 903  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04638 0FCF                        3C            .byte	$3C
04639 0FD0                        66            .byte	$66
04640 0FD1                        66            .byte	$66
04641 0FD2                        66            .byte	$66
04642 0FD3                        3C            .byte	$3C
04643 0FD4                        18            .byte	$18
04644 0FD5                        7E            .byte	$7E
04645 0FD6                        18            .byte	$18
04646                                           ! 904  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0x
04647 0FD7                        3F            .byte	$3F
04648 0FD8                        33            .byte	$33
04649 0FD9                        3F            .byte	$3F
04650 0FDA                        30            .byte	$30
04651 0FDB                        30            .byte	$30
04652 0FDC                        70            .byte	$70
04653                                           ! 904 f0, 0xe0,
04654 0FDD                        F0            .byte	$F0
04655 0FDE                        E0            .byte	$E0
04656                                           ! 905  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04657 0FDF                        7F            .byte	$7F
04658 0FE0                        63            .byte	$63
04659 0FE1                        7F            .byte	$7F
04660 0FE2                        63            .byte	$63
04661 0FE3                        63            .byte	$63
04662 0FE4                        67            .byte	$67
04663 0FE5                        E6            .byte	$E6
04664 0FE6                        C0            .byte	$C0
04665                                           ! 906  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04666 0FE7                        99            .byte	$99
04667 0FE8                        5A            .byte	$5A
04668 0FE9                        3C            .byte	$3C
04669 0FEA                        E7            .byte	$E7
04670 0FEB                        E7            .byte	$E7
04671 0FEC                        3C            .byte	$3C
04672 0FED                        5A            .byte	$5A
04673 0FEE                        99            .byte	$99
04674                                           ! 907  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04675 0FEF                        80            .byte	$80
04676 0FF0                        E0            .byte	$E0
04677 0FF1                        F8            .byte	$F8
04678 0FF2                        FE            .byte	$FE
04679 0FF3                        F8            .byte	$F8
04680 0FF4                        E0            .byte	$E0
04681 0FF5                        80            .byte	$80
04682 0FF6                        00            .byte	0
04683                                           ! 908  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04684 0FF7                        02            .byte	2
04685 0FF8                        0E            .byte	$E
04686 0FF9                        3E            .byte	$3E
04687 0FFA                        FE            .byte	$FE
04688 0FFB                        3E            .byte	$3E
04689 0FFC                        0E            .byte	$E
04690 0FFD                        02            .byte	2
04691 0FFE                        00            .byte	0
04692                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04693 0FFF                        18            .byte	$18
04694 1000                        3C            .byte	$3C
04695 1001                        7E            .byte	$7E
04696 1002                        18            .byte	$18
04697 1003                        18            .byte	$18
04698 1004                        7E            .byte	$7E
04699 1005                        3C            .byte	$3C
04700 1006                        18            .byte	$18
04701                                           ! 910  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04702 1007                        66            .byte	$66
04703 1008                        66            .byte	$66
04704 1009                        66            .byte	$66
04705 100A                        66            .byte	$66
04706 100B                        66            .byte	$66
04707 100C                        00            .byte	0
04708 100D                        66            .byte	$66
04709 100E                        00            .byte	0
04710                                           ! 911  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04711 100F                        7F            .byte	$7F
04712 1010                        DB            .byte	$DB
04713 1011                        DB            .byte	$DB
04714 1012                        7B            .byte	$7B
04715 1013                        1B            .byte	$1B
04716 1014                        1B            .byte	$1B
04717 1015                        1B            .byte	$1B
04718 1016                        00            .byte	0
04719                                           ! 912  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04720 1017                        3E            .byte	$3E
04721 1018                        63            .byte	$63
04722 1019                        38            .byte	$38
04723 101A                        6C            .byte	$6C
04724 101B                        6C            .byte	$6C
04725 101C                        38            .byte	$38
04726 101D                        CC            .byte	$CC
04727 101E                        78            .byte	$78
04728                                           ! 913  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04729 101F                        00            .byte	0
04730 1020                        00            .byte	0
04731 1021                        00            .byte	0
04732 1022                        00            .byte	0
04733 1023                        7E            .byte	$7E
04734 1024                        7E            .byte	$7E
04735 1025                        7E            .byte	$7E
04736 1026                        00            .byte	0
04737                                           ! 914  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04738 1027                        18            .byte	$18
04739 1028                        3C            .byte	$3C
04740 1029                        7E            .byte	$7E
04741 102A                        18            .byte	$18
04742 102B                        7E            .byte	$7E
04743 102C                        3C            .byte	$3C
04744 102D                        18            .byte	$18
04745 102E                        FF            .byte	$FF
04746                                           ! 915  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04747 102F                        18            .byte	$18
04748 1030                        3C            .byte	$3C
04749 1031                        7E            .byte	$7E
04750 1032                        18            .byte	$18
04751 1033                        18            .byte	$18
04752 1034                        18            .byte	$18
04753 1035                        18            .byte	$18
04754 1036                        00            .byte	0
04755                                           ! 916  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04756 1037                        18            .byte	$18
04757 1038                        18            .byte	$18
04758 1039                        18            .byte	$18
04759 103A                        18            .byte	$18
04760 103B                        7E            .byte	$7E
04761 103C                        3C            .byte	$3C
04762 103D                        18            .byte	$18
04763 103E                        00            .byte	0
04764                                           ! 917  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04765 103F                        00            .byte	0
04766 1040                        18            .byte	$18
04767 1041                        0C            .byte	$C
04768 1042                        FE            .byte	$FE
04769 1043                        0C            .byte	$C
04770 1044                        18            .byte	$18
04771 1045                        00            .byte	0
04772 1046                        00            .byte	0
04773                                           ! 918  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04774 1047                        00            .byte	0
04775 1048                        30            .byte	$30
04776 1049                        60            .byte	$60
04777 104A                        FE            .byte	$FE
04778 104B                        60            .byte	$60
04779 104C                        30            .byte	$30
04780 104D                        00            .byte	0
04781 104E                        00            .byte	0
04782                                           ! 919  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04783 104F                        00            .byte	0
04784 1050                        00            .byte	0
04785 1051                        C0            .byte	$C0
04786 1052                        C0            .byte	$C0
04787 1053                        C0            .byte	$C0
04788 1054                        FE            .byte	$FE
04789 1055                        00            .byte	0
04790 1056                        00            .byte	0
04791                                           ! 920  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04792 1057                        00            .byte	0
04793 1058                        24            .byte	$24
04794 1059                        66            .byte	$66
04795 105A                        FF            .byte	$FF
04796 105B                        66            .byte	$66
04797 105C                        24            .byte	$24
04798 105D                        00            .byte	0
04799 105E                        00            .byte	0
04800                                           ! 921  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04801 105F                        00            .byte	0
04802 1060                        18            .byte	$18
04803 1061                        3C            .byte	$3C
04804 1062                        7E            .byte	$7E
04805 1063                        FF            .byte	$FF
04806 1064                        FF            .byte	$FF
04807 1065                        00            .byte	0
04808 1066                        00            .byte	0
04809                                           ! 922  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04810 1067                        00            .byte	0
04811 1068                        FF            .byte	$FF
04812 1069                        FF            .byte	$FF
04813 106A                        7E            .byte	$7E
04814 106B                        3C            .byte	$3C
04815 106C                        18            .byte	$18
04816 106D                        00            .byte	0
04817 106E                        00            .byte	0
04818                                           ! 923  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04819 106F                        00            .byte	0
04820 1070                        00            .byte	0
04821 1071                        00            .byte	0
04822 1072                        00            .byte	0
04823 1073                        00            .byte	0
04824 1074                        00            .byte	0
04825 1075                        00            .byte	0
04826 1076                        00            .byte	0
04827                                           ! 924  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04828 1077                        30            .byte	$30
04829 1078                        78            .byte	$78
04830 1079                        78            .byte	$78
04831 107A                        30            .byte	$30
04832 107B                        30            .byte	$30
04833 107C                        00            .byte	0
04834 107D                        30            .byte	$30
04835 107E                        00            .byte	0
04836                                           ! 925  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04837 107F                        6C            .byte	$6C
04838 1080                        6C            .byte	$6C
04839 1081                        6C            .byte	$6C
04840 1082                        00            .byte	0
04841 1083                        00            .byte	0
04842 1084                        00            .byte	0
04843 1085                        00            .byte	0
04844 1086                        00            .byte	0
04845                                           ! 926  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04846 1087                        6C            .byte	$6C
04847 1088                        6C            .byte	$6C
04848 1089                        FE            .byte	$FE
04849 108A                        6C            .byte	$6C
04850 108B                        FE            .byte	$FE
04851 108C                        6C            .byte	$6C
04852 108D                        6C            .byte	$6C
04853 108E                        00            .byte	0
04854                                           ! 927  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04855 108F                        30            .byte	$30
04856 1090                        7C            .byte	$7C
04857 1091                        C0            .byte	$C0
04858 1092                        78            .byte	$78
04859 1093                        0C            .byte	$C
04860 1094                        F8            .byte	$F8
04861 1095                        30            .byte	$30
04862 1096                        00            .byte	0
04863                                           ! 928  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04864 1097                        00            .byte	0
04865 1098                        C6            .byte	$C6
04866 1099                        CC            .byte	$CC
04867 109A                        18            .byte	$18
04868 109B                        30            .byte	$30
04869 109C                        66            .byte	$66
04870 109D                        C6            .byte	$C6
04871 109E                        00            .byte	0
04872                                           ! 929  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04873 109F                        38            .byte	$38
04874 10A0                        6C            .byte	$6C
04875 10A1                        38            .byte	$38
04876 10A2                        76            .byte	$76
04877 10A3                        DC            .byte	$DC
04878 10A4                        CC            .byte	$CC
04879 10A5                        76            .byte	$76
04880 10A6                        00            .byte	0
04881                                           ! 930  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04882 10A7                        60            .byte	$60
04883 10A8                        60            .byte	$60
04884 10A9                        C0            .byte	$C0
04885 10AA                        00            .byte	0
04886 10AB                        00            .byte	0
04887 10AC                        00            .byte	0
04888 10AD                        00            .byte	0
04889 10AE                        00            .byte	0
04890                                           ! 931  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04891 10AF                        18            .byte	$18
04892 10B0                        30            .byte	$30
04893 10B1                        60            .byte	$60
04894 10B2                        60            .byte	$60
04895 10B3                        60            .byte	$60
04896 10B4                        30            .byte	$30
04897 10B5                        18            .byte	$18
04898 10B6                        00            .byte	0
04899                                           ! 932  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04900 10B7                        60            .byte	$60
04901 10B8                        30            .byte	$30
04902 10B9                        18            .byte	$18
04903 10BA                        18            .byte	$18
04904 10BB                        18            .byte	$18
04905 10BC                        30            .byte	$30
04906 10BD                        60            .byte	$60
04907 10BE                        00            .byte	0
04908                                           ! 933  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04909 10BF                        00            .byte	0
04910 10C0                        66            .byte	$66
04911 10C1                        3C            .byte	$3C
04912 10C2                        FF            .byte	$FF
04913 10C3                        3C            .byte	$3C
04914 10C4                        66            .byte	$66
04915 10C5                        00            .byte	0
04916 10C6                        00            .byte	0
04917                                           ! 934  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04918 10C7                        00            .byte	0
04919 10C8                        30            .byte	$30
04920 10C9                        30            .byte	$30
04921 10CA                        FC            .byte	$FC
04922 10CB                        30            .byte	$30
04923 10CC                        30            .byte	$30
04924 10CD                        00            .byte	0
04925 10CE                        00            .byte	0
04926                                           ! 935  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04927 10CF                        00            .byte	0
04928 10D0                        00            .byte	0
04929 10D1                        00            .byte	0
04930 10D2                        00            .byte	0
04931 10D3                        00            .byte	0
04932 10D4                        30            .byte	$30
04933 10D5                        30            .byte	$30
04934 10D6                        60            .byte	$60
04935                                           ! 936  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04936 10D7                        00            .byte	0
04937 10D8                        00            .byte	0
04938 10D9                        00            .byte	0
04939 10DA                        FC            .byte	$FC
04940 10DB                        00            .byte	0
04941 10DC                        00            .byte	0
04942 10DD                        00            .byte	0
04943 10DE                        00            .byte	0
04944                                           ! 937  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04945 10DF                        00            .byte	0
04946 10E0                        00            .byte	0
04947 10E1                        00            .byte	0
04948 10E2                        00            .byte	0
04949 10E3                        00            .byte	0
04950 10E4                        30            .byte	$30
04951 10E5                        30            .byte	$30
04952 10E6                        00            .byte	0
04953                                           ! 938  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04954 10E7                        06            .byte	6
04955 10E8                        0C            .byte	$C
04956 10E9                        18            .byte	$18
04957 10EA                        30            .byte	$30
04958 10EB                        60            .byte	$60
04959 10EC                        C0            .byte	$C0
04960 10ED                        80            .byte	$80
04961 10EE                        00            .byte	0
04962                                           ! 939  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04963 10EF                        7C            .byte	$7C
04964 10F0                        C6            .byte	$C6
04965 10F1                        CE            .byte	$CE
04966 10F2                        DE            .byte	$DE
04967 10F3                        F6            .byte	$F6
04968 10F4                        E6            .byte	$E6
04969 10F5                        7C            .byte	$7C
04970 10F6                        00            .byte	0
04971                                           ! 940  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04972 10F7                        30            .byte	$30
04973 10F8                        70            .byte	$70
04974 10F9                        30            .byte	$30
04975 10FA                        30            .byte	$30
04976 10FB                        30            .byte	$30
04977 10FC                        30            .byte	$30
04978 10FD                        FC            .byte	$FC
04979 10FE                        00            .byte	0
04980                                           ! 941  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04981 10FF                        78            .byte	$78
04982 1100                        CC            .byte	$CC
04983 1101                        0C            .byte	$C
04984 1102                        38            .byte	$38
04985 1103                        60            .byte	$60
04986 1104                        CC            .byte	$CC
04987 1105                        FC            .byte	$FC
04988 1106                        00            .byte	0
04989                                           ! 942  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04990 1107                        78            .byte	$78
04991 1108                        CC            .byte	$CC
04992 1109                        0C            .byte	$C
04993 110A                        38            .byte	$38
04994 110B                        0C            .byte	$C
04995 110C                        CC            .byte	$CC
04996 110D                        78            .byte	$78
04997 110E                        00            .byte	0
04998                                           ! 943  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04999 110F                        1C            .byte	$1C
05000 1110                        3C            .byte	$3C
05001 1111                        6C            .byte	$6C
05002 1112                        CC            .byte	$CC
05003 1113                        FE            .byte	$FE
05004 1114                        0C            .byte	$C
05005 1115                        1E            .byte	$1E
05006 1116                        00            .byte	0
05007                                           ! 944  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05008 1117                        FC            .byte	$FC
05009 1118                        C0            .byte	$C0
05010 1119                        F8            .byte	$F8
05011 111A                        0C            .byte	$C
05012 111B                        0C            .byte	$C
05013 111C                        CC            .byte	$CC
05014 111D                        78            .byte	$78
05015 111E                        00            .byte	0
05016                                           ! 945  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05017 111F                        38            .byte	$38
05018 1120                        60            .byte	$60
05019 1121                        C0            .byte	$C0
05020 1122                        F8            .byte	$F8
05021 1123                        CC            .byte	$CC
05022 1124                        CC            .byte	$CC
05023 1125                        78            .byte	$78
05024 1126                        00            .byte	0
05025                                           ! 946  0xfc, 0xcc, 0x0c, 0x18, 0x30
05026 1127                        FC            .byte	$FC
05027 1128                        CC            .byte	$CC
05028 1129                        0C            .byte	$C
05029 112A                        18            .byte	$18
05030                                           ! 946 , 0x30, 0x30, 0x00,
05031 112B                        30            .byte	$30
05032 112C                        30            .byte	$30
05033 112D                        30            .byte	$30
05034 112E                        00            .byte	0
05035                                           ! 947  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05036 112F                        78            .byte	$78
05037 1130                        CC            .byte	$CC
05038 1131                        CC            .byte	$CC
05039 1132                        78            .byte	$78
05040 1133                        CC            .byte	$CC
05041 1134                        CC            .byte	$CC
05042 1135                        78            .byte	$78
05043 1136                        00            .byte	0
05044                                           ! 948  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05045 1137                        78            .byte	$78
05046 1138                        CC            .byte	$CC
05047 1139                        CC            .byte	$CC
05048 113A                        7C            .byte	$7C
05049 113B                        0C            .byte	$C
05050 113C                        18            .byte	$18
05051 113D                        70            .byte	$70
05052 113E                        00            .byte	0
05053                                           ! 949  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05054 113F                        00            .byte	0
05055 1140                        30            .byte	$30
05056 1141                        30            .byte	$30
05057 1142                        00            .byte	0
05058 1143                        00            .byte	0
05059 1144                        30            .byte	$30
05060 1145                        30            .byte	$30
05061 1146                        00            .byte	0
05062                                           ! 950  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05063 1147                        00            .byte	0
05064 1148                        30            .byte	$30
05065 1149                        30            .byte	$30
05066 114A                        00            .byte	0
05067 114B                        00            .byte	0
05068 114C                        30            .byte	$30
05069 114D                        30            .byte	$30
05070 114E                        60            .byte	$60
05071                                           ! 951  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05072 114F                        18            .byte	$18
05073 1150                        30            .byte	$30
05074 1151                        60            .byte	$60
05075 1152                        C0            .byte	$C0
05076 1153                        60            .byte	$60
05077 1154                        30            .byte	$30
05078 1155                        18            .byte	$18
05079 1156                        00            .byte	0
05080                                           ! 952  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05081 1157                        00            .byte	0
05082 1158                        00            .byte	0
05083 1159                        FC            .byte	$FC
05084 115A                        00            .byte	0
05085 115B                        00            .byte	0
05086 115C                        FC            .byte	$FC
05087 115D                        00            .byte	0
05088 115E                        00            .byte	0
05089                                           ! 953  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05090 115F                        60            .byte	$60
05091 1160                        30            .byte	$30
05092 1161                        18            .byte	$18
05093 1162                        0C            .byte	$C
05094 1163                        18            .byte	$18
05095 1164                        30            .byte	$30
05096 1165                        60            .byte	$60
05097 1166                        00            .byte	0
05098                                           ! 954  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05099 1167                        78            .byte	$78
05100 1168                        CC            .byte	$CC
05101 1169                        0C            .byte	$C
05102 116A                        18            .byte	$18
05103 116B                        30            .byte	$30
05104 116C                        00            .byte	0
05105 116D                        30            .byte	$30
05106 116E                        00            .byte	0
05107                                           ! 955  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05108 116F                        7C            .byte	$7C
05109 1170                        C6            .byte	$C6
05110 1171                        DE            .byte	$DE
05111 1172                        DE            .byte	$DE
05112 1173                        DE            .byte	$DE
05113 1174                        C0            .byte	$C0
05114 1175                        78            .byte	$78
05115 1176                        00            .byte	0
05116                                           ! 956  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05117 1177                        30            .byte	$30
05118 1178                        78            .byte	$78
05119 1179                        CC            .byte	$CC
05120 117A                        CC            .byte	$CC
05121 117B                        FC            .byte	$FC
05122 117C                        CC            .byte	$CC
05123 117D                        CC            .byte	$CC
05124 117E                        00            .byte	0
05125                                           ! 957  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05126 117F                        FC            .byte	$FC
05127 1180                        66            .byte	$66
05128 1181                        66            .byte	$66
05129 1182                        7C            .byte	$7C
05130 1183                        66            .byte	$66
05131 1184                        66            .byte	$66
05132 1185                        FC            .byte	$FC
05133 1186                        00            .byte	0
05134                                           ! 958  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05135 1187                        3C            .byte	$3C
05136 1188                        66            .byte	$66
05137 1189                        C0            .byte	$C0
05138 118A                        C0            .byte	$C0
05139 118B                        C0            .byte	$C0
05140 118C                        66            .byte	$66
05141 118D                        3C            .byte	$3C
05142 118E                        00            .byte	0
05143                                           ! 959  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05144 118F                        F8            .byte	$F8
05145 1190                        6C            .byte	$6C
05146 1191                        66            .byte	$66
05147 1192                        66            .byte	$66
05148 1193                        66            .byte	$66
05149 1194                        6C            .byte	$6C
05150 1195                        F8            .byte	$F8
05151 1196                        00            .byte	0
05152                                           ! 960  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05153 1197                        FE            .byte	$FE
05154 1198                        62            .byte	$62
05155 1199                        68            .byte	$68
05156 119A                        78            .byte	$78
05157 119B                        68            .byte	$68
05158 119C                        62            .byte	$62
05159 119D                        FE            .byte	$FE
05160 119E                        00            .byte	0
05161                                           ! 961  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05162 119F                        FE            .byte	$FE
05163 11A0                        62            .byte	$62
05164 11A1                        68            .byte	$68
05165 11A2                        78            .byte	$78
05166 11A3                        68            .byte	$68
05167 11A4                        60            .byte	$60
05168 11A5                        F0            .byte	$F0
05169 11A6                        00            .byte	0
05170                                           ! 962  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05171 11A7                        3C            .byte	$3C
05172 11A8                        66            .byte	$66
05173 11A9                        C0            .byte	$C0
05174 11AA                        C0            .byte	$C0
05175 11AB                        CE            .byte	$CE
05176 11AC                        66            .byte	$66
05177 11AD                        3E            .byte	$3E
05178 11AE                        00            .byte	0
05179                                           ! 963  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05180 11AF                        CC            .byte	$CC
05181 11B0                        CC            .byte	$CC
05182 11B1                        CC            .byte	$CC
05183 11B2                        FC            .byte	$FC
05184 11B3                        CC            .byte	$CC
05185 11B4                        CC            .byte	$CC
05186 11B5                        CC            .byte	$CC
05187 11B6                        00            .byte	0
05188                                           ! 964  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05189 11B7                        78            .byte	$78
05190 11B8                        30            .byte	$30
05191 11B9                        30            .byte	$30
05192 11BA                        30            .byte	$30
05193 11BB                        30            .byte	$30
05194 11BC                        30            .byte	$30
05195 11BD                        78            .byte	$78
05196 11BE                        00            .byte	0
05197                                           ! 965  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05198 11BF                        1E            .byte	$1E
05199 11C0                        0C            .byte	$C
05200 11C1                        0C            .byte	$C
05201 11C2                        0C            .byte	$C
05202 11C3                        CC            .byte	$CC
05203 11C4                        CC            .byte	$CC
05204 11C5                        78            .byte	$78
05205 11C6                        00            .byte	0
05206                                           ! 966  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05207 11C7                        E6            .byte	$E6
05208 11C8                        66            .byte	$66
05209 11C9                        6C            .byte	$6C
05210 11CA                        78            .byte	$78
05211 11CB                        6C            .byte	$6C
05212 11CC                        66            .byte	$66
05213 11CD                        E6            .byte	$E6
05214 11CE                        00            .byte	0
05215                                           ! 967  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05216 11CF                        F0            .byte	$F0
05217 11D0                        60            .byte	$60
05218 11D1                        60            .byte	$60
05219 11D2                        60            .byte	$60
05220 11D3                        62            .byte	$62
05221 11D4                        66            .byte	$66
05222 11D5                        FE            .byte	$FE
05223 11D6                        00            .byte	0
05224                                           ! 968  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05225 11D7                        C6            .byte	$C6
05226 11D8                        EE            .byte	$EE
05227 11D9                        FE            .byte	$FE
05228 11DA                        FE            .byte	$FE
05229 11DB                        D6            .byte	$D6
05230 11DC                        C6            .byte	$C6
05231 11DD                        C6            .byte	$C6
05232 11DE                        00            .byte	0
05233                                           ! 969  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05234 11DF                        C6            .byte	$C6
05235 11E0                        E6            .byte	$E6
05236 11E1                        F6            .byte	$F6
05237 11E2                        DE            .byte	$DE
05238 11E3                        CE            .byte	$CE
05239 11E4                        C6            .byte	$C6
05240 11E5                        C6            .byte	$C6
05241 11E6                        00            .byte	0
05242                                           ! 970  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05243 11E7                        38            .byte	$38
05244 11E8                        6C            .byte	$6C
05245 11E9                        C6            .byte	$C6
05246 11EA                        C6            .byte	$C6
05247 11EB                        C6            .byte	$C6
05248 11EC                        6C            .byte	$6C
05249 11ED                        38            .byte	$38
05250 11EE                        00            .byte	0
05251                                           ! 971  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05252 11EF                        FC            .byte	$FC
05253 11F0                        66            .byte	$66
05254 11F1                        66            .byte	$66
05255 11F2                        7C            .byte	$7C
05256 11F3                        60            .byte	$60
05257 11F4                        60            .byte	$60
05258 11F5                        F0            .byte	$F0
05259 11F6                        00            .byte	0
05260                                           ! 972  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05261 11F7                        78            .byte	$78
05262 11F8                        CC            .byte	$CC
05263 11F9                        CC            .byte	$CC
05264 11FA                        CC            .byte	$CC
05265 11FB                        DC            .byte	$DC
05266 11FC                        78            .byte	$78
05267 11FD                        1C            .byte	$1C
05268 11FE                        00            .byte	0
05269                                           ! 973  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05270 11FF                        FC            .byte	$FC
05271 1200                        66            .byte	$66
05272 1201                        66            .byte	$66
05273 1202                        7C            .byte	$7C
05274 1203                        6C            .byte	$6C
05275 1204                        66            .byte	$66
05276 1205                        E6            .byte	$E6
05277 1206                        00            .byte	0
05278                                           ! 974  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05279 1207                        78            .byte	$78
05280 1208                        CC            .byte	$CC
05281 1209                        E0            .byte	$E0
05282 120A                        70            .byte	$70
05283 120B                        1C            .byte	$1C
05284 120C                        CC            .byte	$CC
05285 120D                        78            .byte	$78
05286 120E                        00            .byte	0
05287                                           ! 975  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05288 120F                        FC            .byte	$FC
05289 1210                        B4            .byte	$B4
05290 1211                        30            .byte	$30
05291 1212                        30            .byte	$30
05292 1213                        30            .byte	$30
05293 1214                        30            .byte	$30
05294 1215                        78            .byte	$78
05295 1216                        00            .byte	0
05296                                           ! 976  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05297 1217                        CC            .byte	$CC
05298 1218                        CC            .byte	$CC
05299 1219                        CC            .byte	$CC
05300 121A                        CC            .byte	$CC
05301 121B                        CC            .byte	$CC
05302 121C                        CC            .byte	$CC
05303 121D                        FC            .byte	$FC
05304 121E                        00            .byte	0
05305                                           ! 977  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05306 121F                        CC            .byte	$CC
05307 1220                        CC            .byte	$CC
05308 1221                        CC            .byte	$CC
05309 1222                        CC            .byte	$CC
05310 1223                        CC            .byte	$CC
05311 1224                        78            .byte	$78
05312 1225                        30            .byte	$30
05313 1226                        00            .byte	0
05314                                           ! 978  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05315 1227                        C6            .byte	$C6
05316 1228                        C6            .byte	$C6
05317 1229                        C6            .byte	$C6
05318 122A                        D6            .byte	$D6
05319 122B                        FE            .byte	$FE
05320 122C                        EE            .byte	$EE
05321 122D                        C6            .byte	$C6
05322 122E                        00            .byte	0
05323                                           ! 979  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05324 122F                        C6            .byte	$C6
05325 1230                        C6            .byte	$C6
05326 1231                        6C            .byte	$6C
05327 1232                        38            .byte	$38
05328 1233                        38            .byte	$38
05329 1234                        6C            .byte	$6C
05330 1235                        C6            .byte	$C6
05331 1236                        00            .byte	0
05332                                           ! 980  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05333 1237                        CC            .byte	$CC
05334 1238                        CC            .byte	$CC
05335 1239                        CC            .byte	$CC
05336 123A                        78            .byte	$78
05337 123B                        30            .byte	$30
05338 123C                        30            .byte	$30
05339 123D                        78            .byte	$78
05340 123E                        00            .byte	0
05341                                           ! 981  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05342 123F                        FE            .byte	$FE
05343 1240                        C6            .byte	$C6
05344 1241                        8C            .byte	$8C
05345 1242                        18            .byte	$18
05346 1243                        32            .byte	$32
05347 1244                        66            .byte	$66
05348 1245                        FE            .byte	$FE
05349 1246                        00            .byte	0
05350                                           ! 982  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05351 1247                        78            .byte	$78
05352 1248                        60            .byte	$60
05353 1249                        60            .byte	$60
05354 124A                        60            .byte	$60
05355 124B                        60            .byte	$60
05356 124C                        60            .byte	$60
05357 124D                        78            .byte	$78
05358 124E                        00            .byte	0
05359                                           ! 983  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05360 124F                        C0            .byte	$C0
05361 1250                        60            .byte	$60
05362 1251                        30            .byte	$30
05363 1252                        18            .byte	$18
05364 1253                        0C            .byte	$C
05365 1254                        06            .byte	6
05366 1255                        02            .byte	2
05367 1256                        00            .byte	0
05368                                           ! 984  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05369 1257                        78            .byte	$78
05370 1258                        18            .byte	$18
05371 1259                        18            .byte	$18
05372 125A                        18            .byte	$18
05373 125B                        18            .byte	$18
05374 125C                        18            .byte	$18
05375 125D                        78            .byte	$78
05376 125E                        00            .byte	0
05377                                           ! 985  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05378 125F                        10            .byte	$10
05379 1260                        38            .byte	$38
05380 1261                        6C            .byte	$6C
05381 1262                        C6            .byte	$C6
05382 1263                        00            .byte	0
05383 1264                        00            .byte	0
05384 1265                        00            .byte	0
05385 1266                        00            .byte	0
05386                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05387 1267                        00            .byte	0
05388 1268                        00            .byte	0
05389 1269                        00            .byte	0
05390 126A                        00            .byte	0
05391 126B                        00            .byte	0
05392 126C                        00            .byte	0
05393 126D                        00            .byte	0
05394 126E                        FF            .byte	$FF
05395                                           ! 987  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05396 126F                        30            .byte	$30
05397 1270                        30            .byte	$30
05398 1271                        18            .byte	$18
05399 1272                        00            .byte	0
05400 1273                        00            .byte	0
05401 1274                        00            .byte	0
05402 1275                        00            .byte	0
05403 1276                        00            .byte	0
05404                                           ! 988  0x00, 0x00, 0x78, 
05405 1277                        00            .byte	0
05406 1278                        00            .byte	0
05407 1279                        78            .byte	$78
05408                                           ! 988 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05409 127A                        0C            .byte	$C
05410 127B                        7C            .byte	$7C
05411 127C                        CC            .byte	$CC
05412 127D                        76            .byte	$76
05413 127E                        00            .byte	0
05414                                           ! 989  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05415 127F                        E0            .byte	$E0
05416 1280                        60            .byte	$60
05417 1281                        60            .byte	$60
05418 1282                        7C            .byte	$7C
05419 1283                        66            .byte	$66
05420 1284                        66            .byte	$66
05421 1285                        DC            .byte	$DC
05422 1286                        00            .byte	0
05423                                           ! 990  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05424 1287                        00            .byte	0
05425 1288                        00            .byte	0
05426 1289                        78            .byte	$78
05427 128A                        CC            .byte	$CC
05428 128B                        C0            .byte	$C0
05429 128C                        CC            .byte	$CC
05430 128D                        78            .byte	$78
05431 128E                        00            .byte	0
05432                                           ! 991  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05433 128F                        1C            .byte	$1C
05434 1290                        0C            .byte	$C
05435 1291                        0C            .byte	$C
05436 1292                        7C            .byte	$7C
05437 1293                        CC            .byte	$CC
05438 1294                        CC            .byte	$CC
05439 1295                        76            .byte	$76
05440 1296                        00            .byte	0
05441                                           ! 992  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05442 1297                        00            .byte	0
05443 1298                        00            .byte	0
05444 1299                        78            .byte	$78
05445 129A                        CC            .byte	$CC
05446 129B                        FC            .byte	$FC
05447 129C                        C0            .byte	$C0
05448 129D                        78            .byte	$78
05449 129E                        00            .byte	0
05450                                           ! 993  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05451 129F                        38            .byte	$38
05452 12A0                        6C            .byte	$6C
05453 12A1                        60            .byte	$60
05454 12A2                        F0            .byte	$F0
05455 12A3                        60            .byte	$60
05456 12A4                        60            .byte	$60
05457 12A5                        F0            .byte	$F0
05458 12A6                        00            .byte	0
05459                                           ! 994  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05460 12A7                        00            .byte	0
05461 12A8                        00            .byte	0
05462 12A9                        76            .byte	$76
05463 12AA                        CC            .byte	$CC
05464 12AB                        CC            .byte	$CC
05465 12AC                        7C            .byte	$7C
05466 12AD                        0C            .byte	$C
05467 12AE                        F8            .byte	$F8
05468                                           ! 995  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05469 12AF                        E0            .byte	$E0
05470 12B0                        60            .byte	$60
05471 12B1                        6C            .byte	$6C
05472 12B2                        76            .byte	$76
05473 12B3                        66            .byte	$66
05474 12B4                        66            .byte	$66
05475 12B5                        E6            .byte	$E6
05476 12B6                        00            .byte	0
05477                                           ! 996  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05478 12B7                        30            .byte	$30
05479 12B8                        00            .byte	0
05480 12B9                        70            .byte	$70
05481 12BA                        30            .byte	$30
05482 12BB                        30            .byte	$30
05483 12BC                        30            .byte	$30
05484 12BD                        78            .byte	$78
05485 12BE                        00            .byte	0
05486                                           ! 997  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05487 12BF                        0C            .byte	$C
05488 12C0                        00            .byte	0
05489 12C1                        0C            .byte	$C
05490 12C2                        0C            .byte	$C
05491 12C3                        0C            .byte	$C
05492 12C4                        CC            .byte	$CC
05493 12C5                        CC            .byte	$CC
05494 12C6                        78            .byte	$78
05495                                           ! 998  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05496 12C7                        E0            .byte	$E0
05497 12C8                        60            .byte	$60
05498 12C9                        66            .byte	$66
05499 12CA                        6C            .byte	$6C
05500 12CB                        78            .byte	$78
05501 12CC                        6C            .byte	$6C
05502 12CD                        E6            .byte	$E6
05503 12CE                        00            .byte	0
05504                                           ! 999  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05505 12CF                        70            .byte	$70
05506 12D0                        30            .byte	$30
05507 12D1                        30            .byte	$30
05508 12D2                        30            .byte	$30
05509 12D3                        30            .byte	$30
05510 12D4                        30            .byte	$30
05511 12D5                        78            .byte	$78
05512 12D6                        00            .byte	0
05513                                           ! 1000  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05514 12D7                        00            .byte	0
05515 12D8                        00            .byte	0
05516 12D9                        CC            .byte	$CC
05517 12DA                        FE            .byte	$FE
05518 12DB                        FE            .byte	$FE
05519 12DC                        D6            .byte	$D6
05520 12DD                        C6            .byte	$C6
05521 12DE                        00            .byte	0
05522                                           ! 1001  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05523 12DF                        00            .byte	0
05524 12E0                        00            .byte	0
05525 12E1                        F8            .byte	$F8
05526 12E2                        CC            .byte	$CC
05527 12E3                        CC            .byte	$CC
05528 12E4                        CC            .byte	$CC
05529 12E5                        CC            .byte	$CC
05530 12E6                        00            .byte	0
05531                                           ! 1002  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05532 12E7                        00            .byte	0
05533 12E8                        00            .byte	0
05534 12E9                        78            .byte	$78
05535 12EA                        CC            .byte	$CC
05536 12EB                        CC            .byte	$CC
05537 12EC                        CC            .byte	$CC
05538 12ED                        78            .byte	$78
05539 12EE                        00            .byte	0
05540                                           ! 1003  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05541 12EF                        00            .byte	0
05542 12F0                        00            .byte	0
05543 12F1                        DC            .byte	$DC
05544 12F2                        66            .byte	$66
05545 12F3                        66            .byte	$66
05546 12F4                        7C            .byte	$7C
05547 12F5                        60            .byte	$60
05548 12F6                        F0            .byte	$F0
05549                                           ! 1004  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05550 12F7                        00            .byte	0
05551 12F8                        00            .byte	0
05552 12F9                        76            .byte	$76
05553 12FA                        CC            .byte	$CC
05554 12FB                        CC            .byte	$CC
05555 12FC                        7C            .byte	$7C
05556 12FD                        0C            .byte	$C
05557 12FE                        1E            .byte	$1E
05558                                           ! 1005  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05559 12FF                        00            .byte	0
05560 1300                        00            .byte	0
05561 1301                        DC            .byte	$DC
05562 1302                        76            .byte	$76
05563 1303                        66            .byte	$66
05564 1304                        60            .byte	$60
05565 1305                        F0            .byte	$F0
05566 1306                        00            .byte	0
05567                                           ! 1006  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05568 1307                        00            .byte	0
05569 1308                        00            .byte	0
05570 1309                        7C            .byte	$7C
05571 130A                        C0            .byte	$C0
05572 130B                        78            .byte	$78
05573 130C                        0C            .byte	$C
05574 130D                        F8            .byte	$F8
05575 130E                        00            .byte	0
05576                                           ! 1007  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05577 130F                        10            .byte	$10
05578 1310                        30            .byte	$30
05579 1311                        7C            .byte	$7C
05580 1312                        30            .byte	$30
05581 1313                        30            .byte	$30
05582 1314                        34            .byte	$34
05583 1315                        18            .byte	$18
05584 1316                        00            .byte	0
05585                                           ! 1008  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05586 1317                        00            .byte	0
05587 1318                        00            .byte	0
05588 1319                        CC            .byte	$CC
05589 131A                        CC            .byte	$CC
05590 131B                        CC            .byte	$CC
05591 131C                        CC            .byte	$CC
05592 131D                        76            .byte	$76
05593 131E                        00            .byte	0
05594                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05595 131F                        00            .byte	0
05596 1320                        00            .byte	0
05597 1321                        CC            .byte	$CC
05598 1322                        CC            .byte	$CC
05599 1323                        CC            .byte	$CC
05600 1324                        78            .byte	$78
05601 1325                        30            .byte	$30
05602 1326                        00            .byte	0
05603                                           ! 1010  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05604 1327                        00            .byte	0
05605 1328                        00            .byte	0
05606 1329                        C6            .byte	$C6
05607 132A                        D6            .byte	$D6
05608 132B                        FE            .byte	$FE
05609 132C                        FE            .byte	$FE
05610 132D                        6C            .byte	$6C
05611 132E                        00            .byte	0
05612                                           ! 1011  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05613 132F                        00            .byte	0
05614 1330                        00            .byte	0
05615 1331                        C6            .byte	$C6
05616 1332                        6C            .byte	$6C
05617 1333                        38            .byte	$38
05618 1334                        6C            .byte	$6C
05619 1335                        C6            .byte	$C6
05620 1336                        00            .byte	0
05621                                           ! 1012  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05622 1337                        00            .byte	0
05623 1338                        00            .byte	0
05624 1339                        CC            .byte	$CC
05625 133A                        CC            .byte	$CC
05626 133B                        CC            .byte	$CC
05627 133C                        7C            .byte	$7C
05628 133D                        0C            .byte	$C
05629 133E                        F8            .byte	$F8
05630                                           ! 1013  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05631 133F                        00            .byte	0
05632 1340                        00            .byte	0
05633 1341                        FC            .byte	$FC
05634 1342                        98            .byte	$98
05635 1343                        30            .byte	$30
05636 1344                        64            .byte	$64
05637 1345                        FC            .byte	$FC
05638 1346                        00            .byte	0
05639                                           ! 1014  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05640 1347                        1C            .byte	$1C
05641 1348                        30            .byte	$30
05642 1349                        30            .byte	$30
05643 134A                        E0            .byte	$E0
05644 134B                        30            .byte	$30
05645 134C                        30            .byte	$30
05646 134D                        1C            .byte	$1C
05647 134E                        00            .byte	0
05648                                           ! 1015  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05649 134F                        18            .byte	$18
05650 1350                        18            .byte	$18
05651 1351                        18            .byte	$18
05652 1352                        00            .byte	0
05653 1353                        18            .byte	$18
05654 1354                        18            .byte	$18
05655 1355                        18            .byte	$18
05656 1356                        00            .byte	0
05657                                           ! 1016  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05658 1357                        E0            .byte	$E0
05659 1358                        30            .byte	$30
05660 1359                        30            .byte	$30
05661 135A                        1C            .byte	$1C
05662 135B                        30            .byte	$30
05663 135C                        30            .byte	$30
05664 135D                        E0            .byte	$E0
05665 135E                        00            .byte	0
05666                                           ! 1017  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05667 135F                        76            .byte	$76
05668 1360                        DC            .byte	$DC
05669 1361                        00            .byte	0
05670 1362                        00            .byte	0
05671 1363                        00            .byte	0
05672 1364                        00            .byte	0
05673 1365                        00            .byte	0
05674 1366                        00            .byte	0
05675                                           ! 1018  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05676 1367                        00            .byte	0
05677 1368                        10            .byte	$10
05678 1369                        38            .byte	$38
05679 136A                        6C            .byte	$6C
05680 136B                        C6            .byte	$C6
05681 136C                        C6            .byte	$C6
05682 136D                        FE            .byte	$FE
05683 136E                        00            .byte	0
05684                                           ! 1019  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05685 136F                        78            .byte	$78
05686 1370                        CC            .byte	$CC
05687 1371                        C0            .byte	$C0
05688 1372                        CC            .byte	$CC
05689 1373                        78            .byte	$78
05690 1374                        18            .byte	$18
05691 1375                        0C            .byte	$C
05692 1376                        78            .byte	$78
05693                                           ! 1020  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05694 1377                        00            .byte	0
05695 1378                        CC            .byte	$CC
05696 1379                        00            .byte	0
05697 137A                        CC            .byte	$CC
05698 137B                        CC            .byte	$CC
05699 137C                        CC            .byte	$CC
05700 137D                        7E            .byte	$7E
05701 137E                        00            .byte	0
05702                                           ! 1021  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05703 137F                        1C            .byte	$1C
05704 1380                        00            .byte	0
05705 1381                        78            .byte	$78
05706 1382                        CC            .byte	$CC
05707 1383                        FC            .byte	$FC
05708 1384                        C0            .byte	$C0
05709 1385                        78            .byte	$78
05710 1386                        00            .byte	0
05711                                           ! 1022  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05712 1387                        7E            .byte	$7E
05713 1388                        C3            .byte	$C3
05714 1389                        3C            .byte	$3C
05715 138A                        06            .byte	6
05716 138B                        3E            .byte	$3E
05717 138C                        66            .byte	$66
05718 138D                        3F            .byte	$3F
05719 138E                        00            .byte	0
05720                                           ! 1023  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05721 138F                        CC            .byte	$CC
05722 1390                        00            .byte	0
05723 1391                        78            .byte	$78
05724 1392                        0C            .byte	$C
05725 1393                        7C            .byte	$7C
05726 1394                        CC            .byte	$CC
05727 1395                        7E            .byte	$7E
05728 1396                        00            .byte	0
05729                                           ! 1024  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05730 1397                        E0            .byte	$E0
05731 1398                        00            .byte	0
05732 1399                        78            .byte	$78
05733 139A                        0C            .byte	$C
05734 139B                        7C            .byte	$7C
05735 139C                        CC            .byte	$CC
05736 139D                        7E            .byte	$7E
05737 139E                        00            .byte	0
05738                                           ! 1025  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05739 139F                        30            .byte	$30
05740 13A0                        30            .byte	$30
05741 13A1                        78            .byte	$78
05742 13A2                        0C            .byte	$C
05743 13A3                        7C            .byte	$7C
05744 13A4                        CC            .byte	$CC
05745 13A5                        7E            .byte	$7E
05746 13A6                        00            .byte	0
05747                                           ! 1026  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05748 13A7                        00            .byte	0
05749 13A8                        00            .byte	0
05750 13A9                        78            .byte	$78
05751 13AA                        C0            .byte	$C0
05752 13AB                        C0            .byte	$C0
05753 13AC                        78            .byte	$78
05754 13AD                        0C            .byte	$C
05755 13AE                        38            .byte	$38
05756                                           ! 1027  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05757 13AF                        7E            .byte	$7E
05758 13B0                        C3            .byte	$C3
05759 13B1                        3C            .byte	$3C
05760 13B2                        66            .byte	$66
05761 13B3                        7E            .byte	$7E
05762 13B4                        60            .byte	$60
05763 13B5                        3C            .byte	$3C
05764 13B6                        00            .byte	0
05765                                           ! 1028  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05766 13B7                        CC            .byte	$CC
05767 13B8                        00            .byte	0
05768 13B9                        78            .byte	$78
05769 13BA                        CC            .byte	$CC
05770 13BB                        FC            .byte	$FC
05771 13BC                        C0            .byte	$C0
05772 13BD                        78            .byte	$78
05773 13BE                        00            .byte	0
05774                                           ! 1029  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05775 13BF                        E0            .byte	$E0
05776 13C0                        00            .byte	0
05777 13C1                        78            .byte	$78
05778 13C2                        CC            .byte	$CC
05779 13C3                        FC            .byte	$FC
05780 13C4                        C0            .byte	$C0
05781 13C5                        78            .byte	$78
05782 13C6                        00            .byte	0
05783                                           ! 1030  0xcc, 0x
05784 13C7                        CC            .byte	$CC
05785                                           ! 1030 00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05786 13C8                        00            .byte	0
05787 13C9                        70            .byte	$70
05788 13CA                        30            .byte	$30
05789 13CB                        30            .byte	$30
05790 13CC                        30            .byte	$30
05791 13CD                        78            .byte	$78
05792 13CE                        00            .byte	0
05793                                           ! 1031  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05794 13CF                        7C            .byte	$7C
05795 13D0                        C6            .byte	$C6
05796 13D1                        38            .byte	$38
05797 13D2                        18            .byte	$18
05798 13D3                        18            .byte	$18
05799 13D4                        18            .byte	$18
05800 13D5                        3C            .byte	$3C
05801 13D6                        00            .byte	0
05802                                           ! 1032  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05803 13D7                        E0            .byte	$E0
05804 13D8                        00            .byte	0
05805 13D9                        70            .byte	$70
05806 13DA                        30            .byte	$30
05807 13DB                        30            .byte	$30
05808 13DC                        30            .byte	$30
05809 13DD                        78            .byte	$78
05810 13DE                        00            .byte	0
05811                                           ! 1033  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05812 13DF                        C6            .byte	$C6
05813 13E0                        38            .byte	$38
05814 13E1                        6C            .byte	$6C
05815 13E2                        C6            .byte	$C6
05816 13E3                        FE            .byte	$FE
05817 13E4                        C6            .byte	$C6
05818 13E5                        C6            .byte	$C6
05819 13E6                        00            .byte	0
05820                                           ! 1034  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05821 13E7                        30            .byte	$30
05822 13E8                        30            .byte	$30
05823 13E9                        00            .byte	0
05824 13EA                        78            .byte	$78
05825 13EB                        CC            .byte	$CC
05826 13EC                        FC            .byte	$FC
05827 13ED                        CC            .byte	$CC
05828 13EE                        00            .byte	0
05829                                           ! 1035  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05830 13EF                        1C            .byte	$1C
05831 13F0                        00            .byte	0
05832 13F1                        FC            .byte	$FC
05833 13F2                        60            .byte	$60
05834 13F3                        78            .byte	$78
05835 13F4                        60            .byte	$60
05836 13F5                        FC            .byte	$FC
05837 13F6                        00            .byte	0
05838                                           ! 1036  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05839 13F7                        00            .byte	0
05840 13F8                        00            .byte	0
05841 13F9                        7F            .byte	$7F
05842 13FA                        0C            .byte	$C
05843 13FB                        7F            .byte	$7F
05844 13FC                        CC            .byte	$CC
05845 13FD                        7F            .byte	$7F
05846 13FE                        00            .byte	0
05847                                           ! 1037  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05848 13FF                        3E            .byte	$3E
05849 1400                        6C            .byte	$6C
05850 1401                        CC            .byte	$CC
05851 1402                        FE            .byte	$FE
05852 1403                        CC            .byte	$CC
05853 1404                        CC            .byte	$CC
05854 1405                        CE            .byte	$CE
05855 1406                        00            .byte	0
05856                                           ! 1038  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05857 1407                        78            .byte	$78
05858 1408                        CC            .byte	$CC
05859 1409                        00            .byte	0
05860 140A                        78            .byte	$78
05861 140B                        CC            .byte	$CC
05862 140C                        CC            .byte	$CC
05863 140D                        78            .byte	$78
05864 140E                        00            .byte	0
05865                                           ! 1039  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05866 140F                        00            .byte	0
05867 1410                        CC            .byte	$CC
05868 1411                        00            .byte	0
05869 1412                        78            .byte	$78
05870 1413                        CC            .byte	$CC
05871 1414                        CC            .byte	$CC
05872 1415                        78            .byte	$78
05873 1416                        00            .byte	0
05874                                           ! 1040  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05875 1417                        00            .byte	0
05876 1418                        E0            .byte	$E0
05877 1419                        00            .byte	0
05878 141A                        78            .byte	$78
05879 141B                        CC            .byte	$CC
05880 141C                        CC            .byte	$CC
05881 141D                        78            .byte	$78
05882 141E                        00            .byte	0
05883                                           ! 1041  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05884 141F                        78            .byte	$78
05885 1420                        CC            .byte	$CC
05886 1421                        00            .byte	0
05887 1422                        CC            .byte	$CC
05888 1423                        CC            .byte	$CC
05889 1424                        CC            .byte	$CC
05890 1425                        7E            .byte	$7E
05891 1426                        00            .byte	0
05892                                           ! 1042  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05893 1427                        00            .byte	0
05894 1428                        E0            .byte	$E0
05895 1429                        00            .byte	0
05896 142A                        CC            .byte	$CC
05897 142B                        CC            .byte	$CC
05898 142C                        CC            .byte	$CC
05899 142D                        7E            .byte	$7E
05900 142E                        00            .byte	0
05901                                           ! 1043  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05902 142F                        00            .byte	0
05903 1430                        CC            .byte	$CC
05904 1431                        00            .byte	0
05905 1432                        CC            .byte	$CC
05906 1433                        CC            .byte	$CC
05907 1434                        7C            .byte	$7C
05908 1435                        0C            .byte	$C
05909 1436                        F8            .byte	$F8
05910                                           ! 1044  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05911 1437                        C3            .byte	$C3
05912 1438                        18            .byte	$18
05913 1439                        3C            .byte	$3C
05914 143A                        66            .byte	$66
05915 143B                        66            .byte	$66
05916 143C                        3C            .byte	$3C
05917 143D                        18            .byte	$18
05918 143E                        00            .byte	0
05919                                           ! 1045  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05920 143F                        CC            .byte	$CC
05921 1440                        00            .byte	0
05922 1441                        CC            .byte	$CC
05923 1442                        CC            .byte	$CC
05924 1443                        CC            .byte	$CC
05925 1444                        CC            .byte	$CC
05926 1445                        78            .byte	$78
05927 1446                        00            .byte	0
05928                                           ! 1046  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05929 1447                        18            .byte	$18
05930 1448                        18            .byte	$18
05931 1449                        7E            .byte	$7E
05932 144A                        C0            .byte	$C0
05933 144B                        C0            .byte	$C0
05934 144C                        7E            .byte	$7E
05935 144D                        18            .byte	$18
05936 144E                        18            .byte	$18
05937                                           ! 1047  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05938 144F                        38            .byte	$38
05939 1450                        6C            .byte	$6C
05940 1451                        64            .byte	$64
05941 1452                        F0            .byte	$F0
05942 1453                        60            .byte	$60
05943 1454                        E6            .byte	$E6
05944 1455                        FC            .byte	$FC
05945 1456                        00            .byte	0
05946                                           ! 1048  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05947 1457                        CC            .byte	$CC
05948 1458                        CC            .byte	$CC
05949 1459                        78            .byte	$78
05950 145A                        FC            .byte	$FC
05951 145B                        30            .byte	$30
05952 145C                        FC            .byte	$FC
05953 145D                        30            .byte	$30
05954 145E                        30            .byte	$30
05955                                           ! 1049  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05956 145F                        F8            .byte	$F8
05957 1460                        CC            .byte	$CC
05958 1461                        CC            .byte	$CC
05959 1462                        FA            .byte	$FA
05960 1463                        C6            .byte	$C6
05961 1464                        CF            .byte	$CF
05962 1465                        C6            .byte	$C6
05963 1466                        C7            .byte	$C7
05964                                           ! 1050  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05965 1467                        0E            .byte	$E
05966 1468                        1B            .byte	$1B
05967 1469                        18            .byte	$18
05968 146A                        3C            .byte	$3C
05969 146B                        18            .byte	$18
05970 146C                        18            .byte	$18
05971 146D                        D8            .byte	$D8
05972 146E                        70            .byte	$70
05973                                           ! 1051  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05974 146F                        1C            .byte	$1C
05975 1470                        00            .byte	0
05976 1471                        78            .byte	$78
05977 1472                        0C            .byte	$C
05978 1473                        7C            .byte	$7C
05979 1474                        CC            .byte	$CC
05980 1475                        7E            .byte	$7E
05981 1476                        00            .byte	0
05982                                           ! 1052  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05983 1477                        38            .byte	$38
05984 1478                        00            .byte	0
05985 1479                        70            .byte	$70
05986 147A                        30            .byte	$30
05987 147B                        30            .byte	$30
05988 147C                        30            .byte	$30
05989 147D                        78            .byte	$78
05990 147E                        00            .byte	0
05991                                           ! 1053  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05992 147F                        00            .byte	0
05993 1480                        1C            .byte	$1C
05994 1481                        00            .byte	0
05995 1482                        78            .byte	$78
05996 1483                        CC            .byte	$CC
05997 1484                        CC            .byte	$CC
05998 1485                        78            .byte	$78
05999 1486                        00            .byte	0
06000                                           ! 1054  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
06001 1487                        00            .byte	0
06002 1488                        1C            .byte	$1C
06003 1489                        00            .byte	0
06004 148A                        CC            .byte	$CC
06005 148B                        CC            .byte	$CC
06006 148C                        CC            .byte	$CC
06007 148D                        7E            .byte	$7E
06008 148E                        00            .byte	0
06009                                           ! 1055  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06010 148F                        00            .byte	0
06011 1490                        F8            .byte	$F8
06012 1491                        00            .byte	0
06013 1492                        F8            .byte	$F8
06014 1493                        CC            .byte	$CC
06015 1494                        CC            .byte	$CC
06016 1495                        CC            .byte	$CC
06017 1496                        00            .byte	0
06018                                           ! 1056  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06019 1497                        FC            .byte	$FC
06020 1498                        00            .byte	0
06021 1499                        CC            .byte	$CC
06022 149A                        EC            .byte	$EC
06023 149B                        FC            .byte	$FC
06024 149C                        DC            .byte	$DC
06025 149D                        CC            .byte	$CC
06026 149E                        00            .byte	0
06027                                           ! 1057  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06028 149F                        3C            .byte	$3C
06029 14A0                        6C            .byte	$6C
06030 14A1                        6C            .byte	$6C
06031 14A2                        3E            .byte	$3E
06032 14A3                        00            .byte	0
06033 14A4                        7E            .byte	$7E
06034 14A5                        00            .byte	0
06035 14A6                        00            .byte	0
06036                                           ! 1058  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06037 14A7                        38            .byte	$38
06038 14A8                        6C            .byte	$6C
06039 14A9                        6C            .byte	$6C
06040 14AA                        38            .byte	$38
06041 14AB                        00            .byte	0
06042 14AC                        7C            .byte	$7C
06043 14AD                        00            .byte	0
06044 14AE                        00            .byte	0
06045                                           ! 1059  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06046 14AF                        30            .byte	$30
06047 14B0                        00            .byte	0
06048 14B1                        30            .byte	$30
06049 14B2                        60            .byte	$60
06050 14B3                        C0            .byte	$C0
06051 14B4                        CC            .byte	$CC
06052 14B5                        78            .byte	$78
06053 14B6                        00            .byte	0
06054                                           ! 1060  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06055 14B7                        00            .byte	0
06056 14B8                        00            .byte	0
06057 14B9                        00            .byte	0
06058 14BA                        FC            .byte	$FC
06059 14BB                        C0            .byte	$C0
06060 14BC                        C0            .byte	$C0
06061 14BD                        00            .byte	0
06062 14BE                        00            .byte	0
06063                                           ! 1061  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06064 14BF                        00            .byte	0
06065 14C0                        00            .byte	0
06066 14C1                        00            .byte	0
06067 14C2                        FC            .byte	$FC
06068 14C3                        0C            .byte	$C
06069 14C4                        0C            .byte	$C
06070 14C5                        00            .byte	0
06071 14C6                        00            .byte	0
06072                                           ! 1062  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06073 14C7                        C3            .byte	$C3
06074 14C8                        C6            .byte	$C6
06075 14C9                        CC            .byte	$CC
06076 14CA                        DE            .byte	$DE
06077 14CB                        33            .byte	$33
06078 14CC                        66            .byte	$66
06079 14CD                        CC            .byte	$CC
06080 14CE                        0F            .byte	$F
06081                                           ! 1063  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06082 14CF                        C3            .byte	$C3
06083 14D0                        C6            .byte	$C6
06084 14D1                        CC            .byte	$CC
06085 14D2                        DB            .byte	$DB
06086 14D3                        37            .byte	$37
06087 14D4                        6F            .byte	$6F
06088 14D5                        CF            .byte	$CF
06089 14D6                        03            .byte	3
06090                                           ! 1064  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06091 14D7                        18            .byte	$18
06092 14D8                        18            .byte	$18
06093 14D9                        00            .byte	0
06094 14DA                        18            .byte	$18
06095 14DB                        18            .byte	$18
06096 14DC                        18            .byte	$18
06097 14DD                        18            .byte	$18
06098 14DE                        00            .byte	0
06099                                           ! 1065  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06100 14DF                        00            .byte	0
06101 14E0                        33            .byte	$33
06102 14E1                        66            .byte	$66
06103 14E2                        CC            .byte	$CC
06104 14E3                        66            .byte	$66
06105 14E4                        33            .byte	$33
06106 14E5                        00            .byte	0
06107 14E6                        00            .byte	0
06108                                           ! 1066  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06109 14E7                        00            .byte	0
06110 14E8                        CC            .byte	$CC
06111 14E9                        66            .byte	$66
06112 14EA                        33            .byte	$33
06113 14EB                        66            .byte	$66
06114 14EC                        CC            .byte	$CC
06115 14ED                        00            .byte	0
06116 14EE                        00            .byte	0
06117                                           ! 1067  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06118 14EF                        22            .byte	$22
06119 14F0                        88            .byte	$88
06120 14F1                        22            .byte	$22
06121 14F2                        88            .byte	$88
06122 14F3                        22            .byte	$22
06123 14F4                        88            .byte	$88
06124 14F5                        22            .byte	$22
06125 14F6                        88            .byte	$88
06126                                           ! 1068  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06127 14F7                        55            .byte	$55
06128 14F8                        AA            .byte	$AA
06129 14F9                        55            .byte	$55
06130 14FA                        AA            .byte	$AA
06131 14FB                        55            .byte	$55
06132 14FC                        AA            .byte	$AA
06133 14FD                        55            .byte	$55
06134 14FE                        AA            .byte	$AA
06135                                           ! 1069  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06136 14FF                        DB            .byte	$DB
06137 1500                        77            .byte	$77
06138 1501                        DB            .byte	$DB
06139 1502                        EE            .byte	$EE
06140 1503                        DB            .byte	$DB
06141 1504                        77            .byte	$77
06142 1505                        DB            .byte	$DB
06143 1506                        EE            .byte	$EE
06144                                           ! 1070  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06145 1507                        18            .byte	$18
06146 1508                        18            .byte	$18
06147 1509                        18            .byte	$18
06148 150A                        18            .byte	$18
06149 150B                        18            .byte	$18
06150 150C                        18            .byte	$18
06151 150D                        18            .byte	$18
06152 150E                        18            .byte	$18
06153                                           ! 1071  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06154 150F                        18            .byte	$18
06155 1510                        18            .byte	$18
06156 1511                        18            .byte	$18
06157 1512                        18            .byte	$18
06158 1513                        F8            .byte	$F8
06159 1514                        18            .byte	$18
06160 1515                        18            .byte	$18
06161                                           ! 1071 
06162 1516                        18            .byte	$18
06163                                           ! 1072  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06164 1517                        18            .byte	$18
06165 1518                        18            .byte	$18
06166 1519                        F8            .byte	$F8
06167 151A                        18            .byte	$18
06168 151B                        F8            .byte	$F8
06169 151C                        18            .byte	$18
06170 151D                        18            .byte	$18
06171 151E                        18            .byte	$18
06172                                           ! 1073  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06173 151F                        36            .byte	$36
06174 1520                        36            .byte	$36
06175 1521                        36            .byte	$36
06176 1522                        36            .byte	$36
06177 1523                        F6            .byte	$F6
06178 1524                        36            .byte	$36
06179 1525                        36            .byte	$36
06180 1526                        36            .byte	$36
06181                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06182 1527                        00            .byte	0
06183 1528                        00            .byte	0
06184 1529                        00            .byte	0
06185 152A                        00            .byte	0
06186 152B                        FE            .byte	$FE
06187 152C                        36            .byte	$36
06188 152D                        36            .byte	$36
06189 152E                        36            .byte	$36
06190                                           ! 1075  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06191 152F                        00            .byte	0
06192 1530                        00            .byte	0
06193 1531                        F8            .byte	$F8
06194 1532                        18            .byte	$18
06195 1533                        F8            .byte	$F8
06196 1534                        18            .byte	$18
06197 1535                        18            .byte	$18
06198 1536                        18            .byte	$18
06199                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06200 1537                        36            .byte	$36
06201 1538                        36            .byte	$36
06202 1539                        F6            .byte	$F6
06203 153A                        06            .byte	6
06204 153B                        F6            .byte	$F6
06205 153C                        36            .byte	$36
06206 153D                        36            .byte	$36
06207 153E                        36            .byte	$36
06208                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06209 153F                        36            .byte	$36
06210 1540                        36            .byte	$36
06211 1541                        36            .byte	$36
06212 1542                        36            .byte	$36
06213 1543                        36            .byte	$36
06214 1544                        36            .byte	$36
06215 1545                        36            .byte	$36
06216 1546                        36            .byte	$36
06217                                           ! 1078  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06218 1547                        00            .byte	0
06219 1548                        00            .byte	0
06220 1549                        FE            .byte	$FE
06221 154A                        06            .byte	6
06222 154B                        F6            .byte	$F6
06223 154C                        36            .byte	$36
06224 154D                        36            .byte	$36
06225 154E                        36            .byte	$36
06226                                           ! 1079  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06227 154F                        36            .byte	$36
06228 1550                        36            .byte	$36
06229 1551                        F6            .byte	$F6
06230 1552                        06            .byte	6
06231 1553                        FE            .byte	$FE
06232 1554                        00            .byte	0
06233 1555                        00            .byte	0
06234 1556                        00            .byte	0
06235                                           ! 1080  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06236 1557                        36            .byte	$36
06237 1558                        36            .byte	$36
06238 1559                        36            .byte	$36
06239 155A                        36            .byte	$36
06240 155B                        FE            .byte	$FE
06241 155C                        00            .byte	0
06242 155D                        00            .byte	0
06243 155E                        00            .byte	0
06244                                           ! 1081  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06245 155F                        18            .byte	$18
06246 1560                        18            .byte	$18
06247 1561                        F8            .byte	$F8
06248 1562                        18            .byte	$18
06249 1563                        F8            .byte	$F8
06250 1564                        00            .byte	0
06251 1565                        00            .byte	0
06252 1566                        00            .byte	0
06253                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06254 1567                        00            .byte	0
06255 1568                        00            .byte	0
06256 1569                        00            .byte	0
06257 156A                        00            .byte	0
06258 156B                        F8            .byte	$F8
06259 156C                        18            .byte	$18
06260 156D                        18            .byte	$18
06261 156E                        18            .byte	$18
06262                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06263 156F                        18            .byte	$18
06264 1570                        18            .byte	$18
06265 1571                        18            .byte	$18
06266 1572                        18            .byte	$18
06267 1573                        1F            .byte	$1F
06268 1574                        00            .byte	0
06269 1575                        00            .byte	0
06270 1576                        00            .byte	0
06271                                           ! 1084  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06272 1577                        18            .byte	$18
06273 1578                        18            .byte	$18
06274 1579                        18            .byte	$18
06275 157A                        18            .byte	$18
06276 157B                        FF            .byte	$FF
06277 157C                        00            .byte	0
06278 157D                        00            .byte	0
06279 157E                        00            .byte	0
06280                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06281 157F                        00            .byte	0
06282 1580                        00            .byte	0
06283 1581                        00            .byte	0
06284 1582                        00            .byte	0
06285 1583                        FF            .byte	$FF
06286 1584                        18            .byte	$18
06287 1585                        18            .byte	$18
06288 1586                        18            .byte	$18
06289                                           ! 1086  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06290 1587                        18            .byte	$18
06291 1588                        18            .byte	$18
06292 1589                        18            .byte	$18
06293 158A                        18            .byte	$18
06294 158B                        1F            .byte	$1F
06295 158C                        18            .byte	$18
06296 158D                        18            .byte	$18
06297 158E                        18            .byte	$18
06298                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06299 158F                        00            .byte	0
06300 1590                        00            .byte	0
06301 1591                        00            .byte	0
06302 1592                        00            .byte	0
06303 1593                        FF            .byte	$FF
06304 1594                        00            .byte	0
06305 1595                        00            .byte	0
06306 1596                        00            .byte	0
06307                                           ! 1088  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06308 1597                        18            .byte	$18
06309 1598                        18            .byte	$18
06310 1599                        18            .byte	$18
06311 159A                        18            .byte	$18
06312 159B                        FF            .byte	$FF
06313 159C                        18            .byte	$18
06314 159D                        18            .byte	$18
06315 159E                        18            .byte	$18
06316                                           ! 1089  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06317 159F                        18            .byte	$18
06318 15A0                        18            .byte	$18
06319 15A1                        1F            .byte	$1F
06320 15A2                        18            .byte	$18
06321 15A3                        1F            .byte	$1F
06322 15A4                        18            .byte	$18
06323 15A5                        18            .byte	$18
06324 15A6                        18            .byte	$18
06325                                           ! 1090  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06326 15A7                        36            .byte	$36
06327 15A8                        36            .byte	$36
06328 15A9                        36            .byte	$36
06329 15AA                        36            .byte	$36
06330 15AB                        37            .byte	$37
06331 15AC                        36            .byte	$36
06332 15AD                        36            .byte	$36
06333 15AE                        36            .byte	$36
06334                                           ! 1091  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06335 15AF                        36            .byte	$36
06336 15B0                        36            .byte	$36
06337 15B1                        37            .byte	$37
06338 15B2                        30            .byte	$30
06339 15B3                        3F            .byte	$3F
06340 15B4                        00            .byte	0
06341 15B5                        00            .byte	0
06342 15B6                        00            .byte	0
06343                                           ! 1092  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06344 15B7                        00            .byte	0
06345 15B8                        00            .byte	0
06346 15B9                        3F            .byte	$3F
06347 15BA                        30            .byte	$30
06348 15BB                        37            .byte	$37
06349 15BC                        36            .byte	$36
06350 15BD                        36            .byte	$36
06351 15BE                        36            .byte	$36
06352                                           ! 1093  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06353 15BF                        36            .byte	$36
06354 15C0                        36            .byte	$36
06355 15C1                        F7            .byte	$F7
06356 15C2                        00            .byte	0
06357 15C3                        FF            .byte	$FF
06358 15C4                        00            .byte	0
06359 15C5                        00            .byte	0
06360 15C6                        00            .byte	0
06361                                           ! 1094  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06362 15C7                        00            .byte	0
06363 15C8                        00            .byte	0
06364 15C9                        FF            .byte	$FF
06365 15CA                        00            .byte	0
06366 15CB                        F7            .byte	$F7
06367 15CC                        36            .byte	$36
06368 15CD                        36            .byte	$36
06369 15CE                        36            .byte	$36
06370                                           ! 1095  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06371 15CF                        36            .byte	$36
06372 15D0                        36            .byte	$36
06373 15D1                        37            .byte	$37
06374 15D2                        30            .byte	$30
06375 15D3                        37            .byte	$37
06376 15D4                        36            .byte	$36
06377 15D5                        36            .byte	$36
06378 15D6                        36            .byte	$36
06379                                           ! 1096  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06380 15D7                        00            .byte	0
06381 15D8                        00            .byte	0
06382 15D9                        FF            .byte	$FF
06383 15DA                        00            .byte	0
06384 15DB                        FF            .byte	$FF
06385 15DC                        00            .byte	0
06386 15DD                        00            .byte	0
06387 15DE                        00            .byte	0
06388                                           ! 1097  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06389 15DF                        36            .byte	$36
06390 15E0                        36            .byte	$36
06391 15E1                        F7            .byte	$F7
06392 15E2                        00            .byte	0
06393 15E3                        F7            .byte	$F7
06394 15E4                        36            .byte	$36
06395 15E5                        36            .byte	$36
06396 15E6                        36            .byte	$36
06397                                           ! 1098  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06398 15E7                        18            .byte	$18
06399 15E8                        18            .byte	$18
06400 15E9                        FF            .byte	$FF
06401 15EA                        00            .byte	0
06402 15EB                        FF            .byte	$FF
06403 15EC                        00            .byte	0
06404 15ED                        00            .byte	0
06405 15EE                        00            .byte	0
06406                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06407 15EF                        36            .byte	$36
06408 15F0                        36            .byte	$36
06409 15F1                        36            .byte	$36
06410 15F2                        36            .byte	$36
06411 15F3                        FF            .byte	$FF
06412 15F4                        00            .byte	0
06413 15F5                        00            .byte	0
06414 15F6                        00            .byte	0
06415                                           ! 1100  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06416 15F7                        00            .byte	0
06417 15F8                        00            .byte	0
06418 15F9                        FF            .byte	$FF
06419 15FA                        00            .byte	0
06420 15FB                        FF            .byte	$FF
06421 15FC                        18            .byte	$18
06422 15FD                        18            .byte	$18
06423 15FE                        18            .byte	$18
06424                                           ! 1101  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06425 15FF                        00            .byte	0
06426 1600                        00            .byte	0
06427 1601                        00            .byte	0
06428 1602                        00            .byte	0
06429 1603                        FF            .byte	$FF
06430 1604                        36            .byte	$36
06431 1605                        36            .byte	$36
06432 1606                        36            .byte	$36
06433                                           ! 1102  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06434 1607                        36            .byte	$36
06435 1608                        36            .byte	$36
06436 1609                        36            .byte	$36
06437 160A                        36            .byte	$36
06438 160B                        3F            .byte	$3F
06439 160C                        00            .byte	0
06440 160D                        00            .byte	0
06441 160E                        00            .byte	0
06442                                           ! 1103  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06443 160F                        18            .byte	$18
06444 1610                        18            .byte	$18
06445 1611                        1F            .byte	$1F
06446 1612                        18            .byte	$18
06447 1613                        1F            .byte	$1F
06448 1614                        00            .byte	0
06449 1615                        00            .byte	0
06450 1616                        00            .byte	0
06451                                           ! 1104  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06452 1617                        00            .byte	0
06453 1618                        00            .byte	0
06454 1619                        1F            .byte	$1F
06455 161A                        18            .byte	$18
06456 161B                        1F            .byte	$1F
06457 161C                        18            .byte	$18
06458 161D                        18            .byte	$18
06459 161E                        18            .byte	$18
06460                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06461 161F                        00            .byte	0
06462 1620                        00            .byte	0
06463 1621                        00            .byte	0
06464 1622                        00            .byte	0
06465 1623                        3F            .byte	$3F
06466 1624                        36            .byte	$36
06467 1625                        36            .byte	$36
06468 1626                        36            .byte	$36
06469                                           ! 1106  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06470 1627                        36            .byte	$36
06471 1628                        36            .byte	$36
06472 1629                        36            .byte	$36
06473 162A                        36            .byte	$36
06474 162B                        FF            .byte	$FF
06475 162C                        36            .byte	$36
06476 162D                        36            .byte	$36
06477 162E                        36            .byte	$36
06478                                           ! 1107  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06479 162F                        18            .byte	$18
06480 1630                        18            .byte	$18
06481 1631                        FF            .byte	$FF
06482 1632                        18            .byte	$18
06483 1633                        FF            .byte	$FF
06484 1634                        18            .byte	$18
06485 1635                        18            .byte	$18
06486 1636                        18            .byte	$18
06487                                           ! 1108  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06488 1637                        18            .byte	$18
06489 1638                        18            .byte	$18
06490 1639                        18            .byte	$18
06491 163A                        18            .byte	$18
06492 163B                        F8            .byte	$F8
06493 163C                        00            .byte	0
06494 163D                        00            .byte	0
06495 163E                        00            .byte	0
06496                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06497 163F                        00            .byte	0
06498 1640                        00            .byte	0
06499 1641                        00            .byte	0
06500 1642                        00            .byte	0
06501 1643                        1F            .byte	$1F
06502 1644                        18            .byte	$18
06503 1645                        18            .byte	$18
06504 1646                        18            .byte	$18
06505                                           ! 1110  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06506 1647                        FF            .byte	$FF
06507 1648                        FF            .byte	$FF
06508 1649                        FF            .byte	$FF
06509 164A                        FF            .byte	$FF
06510 164B                        FF            .byte	$FF
06511 164C                        FF            .byte	$FF
06512 164D                        FF            .byte	$FF
06513 164E                        FF            .byte	$FF
06514                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06515 164F                        00            .byte	0
06516 1650                        00            .byte	0
06517 1651                        00            .byte	0
06518 1652                        00            .byte	0
06519 1653                        FF            .byte	$FF
06520 1654                        FF            .byte	$FF
06521 1655                        FF            .byte	$FF
06522 1656                        FF            .byte	$FF
06523                                           ! 1112  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06524 1657                        F0            .byte	$F0
06525 1658                        F0            .byte	$F0
06526 1659                        F0            .byte	$F0
06527 165A                        F0            .byte	$F0
06528 165B                        F0            .byte	$F0
06529 165C                        F0            .byte	$F0
06530 165D                        F0            .byte	$F0
06531 165E                        F0            .byte	$F0
06532                                           ! 1113  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
06533 165F                        0F            .byte	$F
06534 1660                        0F            .byte	$F
06535 1661                        0F            .byte	$F
06536 1662                        0F            .byte	$F
06537 1663                        0F            .byte	$F
06538 1664                        0F            .byte	$F
06539                                           ! 1113 x0f, 0x0f,
06540 1665                        0F            .byte	$F
06541 1666                        0F            .byte	$F
06542                                           ! 1114  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06543 1667                        FF            .byte	$FF
06544 1668                        FF            .byte	$FF
06545 1669                        FF            .byte	$FF
06546 166A                        FF            .byte	$FF
06547 166B                        00            .byte	0
06548 166C                        00            .byte	0
06549 166D                        00            .byte	0
06550 166E                        00            .byte	0
06551                                           ! 1115  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06552 166F                        00            .byte	0
06553 1670                        00            .byte	0
06554 1671                        76            .byte	$76
06555 1672                        DC            .byte	$DC
06556 1673                        C8            .byte	$C8
06557 1674                        DC            .byte	$DC
06558 1675                        76            .byte	$76
06559 1676                        00            .byte	0
06560                                           ! 1116  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06561 1677                        00            .byte	0
06562 1678                        78            .byte	$78
06563 1679                        CC            .byte	$CC
06564 167A                        F8            .byte	$F8
06565 167B                        CC            .byte	$CC
06566 167C                        F8            .byte	$F8
06567 167D                        C0            .byte	$C0
06568 167E                        C0            .byte	$C0
06569                                           ! 1117  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06570 167F                        00            .byte	0
06571 1680                        FC            .byte	$FC
06572 1681                        CC            .byte	$CC
06573 1682                        C0            .byte	$C0
06574 1683                        C0            .byte	$C0
06575 1684                        C0            .byte	$C0
06576 1685                        C0            .byte	$C0
06577 1686                        00            .byte	0
06578                                           ! 1118  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06579 1687                        00            .byte	0
06580 1688                        FE            .byte	$FE
06581 1689                        6C            .byte	$6C
06582 168A                        6C            .byte	$6C
06583 168B                        6C            .byte	$6C
06584 168C                        6C            .byte	$6C
06585 168D                        6C            .byte	$6C
06586 168E                        00            .byte	0
06587                                           ! 1119  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06588 168F                        FC            .byte	$FC
06589 1690                        CC            .byte	$CC
06590 1691                        60            .byte	$60
06591 1692                        30            .byte	$30
06592 1693                        60            .byte	$60
06593 1694                        CC            .byte	$CC
06594 1695                        FC            .byte	$FC
06595 1696                        00            .byte	0
06596                                           ! 1120  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06597 1697                        00            .byte	0
06598 1698                        00            .byte	0
06599 1699                        7E            .byte	$7E
06600 169A                        D8            .byte	$D8
06601 169B                        D8            .byte	$D8
06602 169C                        D8            .byte	$D8
06603 169D                        70            .byte	$70
06604 169E                        00            .byte	0
06605                                           ! 1121  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06606 169F                        00            .byte	0
06607 16A0                        66            .byte	$66
06608 16A1                        66            .byte	$66
06609 16A2                        66            .byte	$66
06610 16A3                        66            .byte	$66
06611 16A4                        7C            .byte	$7C
06612 16A5                        60            .byte	$60
06613 16A6                        C0            .byte	$C0
06614                                           ! 1122  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06615 16A7                        00            .byte	0
06616 16A8                        76            .byte	$76
06617 16A9                        DC            .byte	$DC
06618 16AA                        18            .byte	$18
06619 16AB                        18            .byte	$18
06620 16AC                        18            .byte	$18
06621 16AD                        18            .byte	$18
06622 16AE                        00            .byte	0
06623                                           ! 1123  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06624 16AF                        FC            .byte	$FC
06625 16B0                        30            .byte	$30
06626 16B1                        78            .byte	$78
06627 16B2                        CC            .byte	$CC
06628 16B3                        CC            .byte	$CC
06629 16B4                        78            .byte	$78
06630 16B5                        30            .byte	$30
06631 16B6                        FC            .byte	$FC
06632                                           ! 1124  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06633 16B7                        38            .byte	$38
06634 16B8                        6C            .byte	$6C
06635 16B9                        C6            .byte	$C6
06636 16BA                        FE            .byte	$FE
06637 16BB                        C6            .byte	$C6
06638 16BC                        6C            .byte	$6C
06639 16BD                        38            .byte	$38
06640 16BE                        00            .byte	0
06641                                           ! 1125  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06642 16BF                        38            .byte	$38
06643 16C0                        6C            .byte	$6C
06644 16C1                        C6            .byte	$C6
06645 16C2                        C6            .byte	$C6
06646 16C3                        6C            .byte	$6C
06647 16C4                        6C            .byte	$6C
06648 16C5                        EE            .byte	$EE
06649 16C6                        00            .byte	0
06650                                           ! 1126  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06651 16C7                        1C            .byte	$1C
06652 16C8                        30            .byte	$30
06653 16C9                        18            .byte	$18
06654 16CA                        7C            .byte	$7C
06655 16CB                        CC            .byte	$CC
06656 16CC                        CC            .byte	$CC
06657 16CD                        78            .byte	$78
06658 16CE                        00            .byte	0
06659                                           ! 1127  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06660 16CF                        00            .byte	0
06661 16D0                        00            .byte	0
06662 16D1                        7E            .byte	$7E
06663 16D2                        DB            .byte	$DB
06664 16D3                        DB            .byte	$DB
06665 16D4                        7E            .byte	$7E
06666 16D5                        00            .byte	0
06667 16D6                        00            .byte	0
06668                                           ! 1128  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06669 16D7                        06            .byte	6
06670 16D8                        0C            .byte	$C
06671 16D9                        7E            .byte	$7E
06672 16DA                        DB            .byte	$DB
06673 16DB                        DB            .byte	$DB
06674 16DC                        7E            .byte	$7E
06675 16DD                        60            .byte	$60
06676 16DE                        C0            .byte	$C0
06677                                           ! 1129  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06678 16DF                        38            .byte	$38
06679 16E0                        60            .byte	$60
06680 16E1                        C0            .byte	$C0
06681 16E2                        F8            .byte	$F8
06682 16E3                        C0            .byte	$C0
06683 16E4                        60            .byte	$60
06684 16E5                        38            .byte	$38
06685 16E6                        00            .byte	0
06686                                           ! 1130  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06687 16E7                        78            .byte	$78
06688 16E8                        CC            .byte	$CC
06689 16E9                        CC            .byte	$CC
06690 16EA                        CC            .byte	$CC
06691 16EB                        CC            .byte	$CC
06692 16EC                        CC            .byte	$CC
06693 16ED                        CC            .byte	$CC
06694 16EE                        00            .byte	0
06695                                           ! 1131  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06696 16EF                        00            .byte	0
06697 16F0                        FC            .byte	$FC
06698 16F1                        00            .byte	0
06699 16F2                        FC            .byte	$FC
06700 16F3                        00            .byte	0
06701 16F4                        FC            .byte	$FC
06702 16F5                        00            .byte	0
06703 16F6                        00            .byte	0
06704                                           ! 1132  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06705 16F7                        30            .byte	$30
06706 16F8                        30            .byte	$30
06707 16F9                        FC            .byte	$FC
06708 16FA                        30            .byte	$30
06709 16FB                        30            .byte	$30
06710 16FC                        00            .byte	0
06711 16FD                        FC            .byte	$FC
06712 16FE                        00            .byte	0
06713                                           ! 1133  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06714 16FF                        60            .byte	$60
06715 1700                        30            .byte	$30
06716 1701                        18            .byte	$18
06717 1702                        30            .byte	$30
06718 1703                        60            .byte	$60
06719 1704                        00            .byte	0
06720 1705                        FC            .byte	$FC
06721 1706                        00            .byte	0
06722                                           ! 1134  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06723 1707                        18            .byte	$18
06724 1708                        30            .byte	$30
06725 1709                        60            .byte	$60
06726 170A                        30            .byte	$30
06727 170B                        18            .byte	$18
06728 170C                        00            .byte	0
06729 170D                        FC            .byte	$FC
06730 170E                        00            .byte	0
06731                                           ! 1135  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06732 170F                        0E            .byte	$E
06733 1710                        1B            .byte	$1B
06734 1711                        1B            .byte	$1B
06735 1712                        18            .byte	$18
06736 1713                        18            .byte	$18
06737 1714                        18            .byte	$18
06738 1715                        18            .byte	$18
06739 1716                        18            .byte	$18
06740                                           ! 1136  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06741 1717                        18            .byte	$18
06742 1718                        18            .byte	$18
06743 1719                        18            .byte	$18
06744 171A                        18            .byte	$18
06745 171B                        18            .byte	$18
06746 171C                        D8            .byte	$D8
06747 171D                        D8            .byte	$D8
06748 171E                        70            .byte	$70
06749                                           ! 1137  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06750 171F                        30            .byte	$30
06751 1720                        30            .byte	$30
06752 1721                        00            .byte	0
06753 1722                        FC            .byte	$FC
06754 1723                        00            .byte	0
06755 1724                        30            .byte	$30
06756 1725                        30            .byte	$30
06757 1726                        00            .byte	0
06758                                           ! 1138  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06759 1727                        00            .byte	0
06760 1728                        76            .byte	$76
06761 1729                        DC            .byte	$DC
06762 172A                        00            .byte	0
06763 172B                        76            .byte	$76
06764 172C                        DC            .byte	$DC
06765 172D                        00            .byte	0
06766 172E                        00            .byte	0
06767                                           ! 1139  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06768 172F                        38            .byte	$38
06769 1730                        6C            .byte	$6C
06770 1731                        6C            .byte	$6C
06771 1732                        38            .byte	$38
06772 1733                        00            .byte	0
06773 1734                        00            .byte	0
06774 1735                        00            .byte	0
06775 1736                        00            .byte	0
06776                                           ! 1140  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06777 1737                        00            .byte	0
06778 1738                        00            .byte	0
06779 1739                        00            .byte	0
06780 173A                        18            .byte	$18
06781 173B                        18            .byte	$18
06782 173C                        00            .byte	0
06783 173D                        00            .byte	0
06784 173E                        00            .byte	0
06785                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06786 173F                        00            .byte	0
06787 1740                        00            .byte	0
06788 1741                        00            .byte	0
06789 1742                        00            .byte	0
06790 1743                        18            .byte	$18
06791 1744                        00            .byte	0
06792 1745                        00            .byte	0
06793 1746                        00            .byte	0
06794                                           ! 1142  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06795 1747                        0F            .byte	$F
06796 1748                        0C            .byte	$C
06797 1749                        0C            .byte	$C
06798 174A                        0C            .byte	$C
06799 174B                        EC            .byte	$EC
06800 174C                        6C            .byte	$6C
06801 174D                        3C            .byte	$3C
06802 174E                        1C            .byte	$1C
06803                                           ! 1143  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06804 174F                        78            .byte	$78
06805 1750                        6C            .byte	$6C
06806 1751                        6C            .byte	$6C
06807 1752                        6C            .byte	$6C
06808 1753                        6C            .byte	$6C
06809 1754                        00            .byte	0
06810 1755                        00            .byte	0
06811 1756                        00            .byte	0
06812                                           ! 1144  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06813 1757                        70            .byte	$70
06814 1758                        18            .byte	$18
06815 1759                        30            .byte	$30
06816 175A                        60            .byte	$60
06817 175B                        78            .byte	$78
06818 175C                        00            .byte	0
06819 175D                        00            .byte	0
06820 175E                        00            .byte	0
06821                                           ! 1145  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06822 175F                        00            .byte	0
06823 1760                        00            .byte	0
06824 1761                        3C            .byte	$3C
06825 1762                        3C            .byte	$3C
06826 1763                        3C            .byte	$3C
06827 1764                        3C            .byte	$3C
06828 1765                        00            .byte	0
06829 1766                        00            .byte	0
06830                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06831 1767                        00            .byte	0
06832 1768                        00            .byte	0
06833 1769                        00            .byte	0
06834 176A                        00            .byte	0
06835 176B                        00            .byte	0
06836 176C                        00            .byte	0
06837 176D                        00            .byte	0
06838                                           ! 1147 };
06839 176E                        00            .byte	0
06840                                           !BCC_EOS
06841                                           ! 1148 static Bit8u vgafont14[256*14]=
06842                                           ! 1149 {
06843                       0000176F            _vgafont14:
06844                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06845 176F                        00            .byte	0
06846 1770                        00            .byte	0
06847 1771                        00            .byte	0
06848 1772                        00            .byte	0
06849 1773                        00            .byte	0
06850 1774                        00            .byte	0
06851 1775                        00            .byte	0
06852 1776                        00            .byte	0
06853 1777                        00            .byte	0
06854 1778                        00            .byte	0
06855 1779                        00            .byte	0
06856 177A                        00            .byte	0
06857 177B                        00            .byte	0
06858 177C                        00            .byte	0
06859                                           ! 1151  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06860 177D                        00            .byte	0
06861 177E                        00            .byte	0
06862 177F                        7E            .byte	$7E
06863 1780                        81            .byte	$81
06864 1781                        A5            .byte	$A5
06865 1782                        81            .byte	$81
06866 1783                        81            .byte	$81
06867 1784                        BD            .byte	$BD
06868 1785                        99            .byte	$99
06869 1786                        81            .byte	$81
06870 1787                        7E            .byte	$7E
06871 1788                        00            .byte	0
06872 1789                        00            .byte	0
06873 178A                        00            .byte	0
06874                                           ! 1152  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06875 178B                        00            .byte	0
06876 178C                        00            .byte	0
06877 178D                        7E            .byte	$7E
06878 178E                        FF            .byte	$FF
06879 178F                        DB            .byte	$DB
06880 1790                        FF            .byte	$FF
06881 1791                        FF            .byte	$FF
06882 1792                        C3            .byte	$C3
06883 1793                        E7            .byte	$E7
06884 1794                        FF            .byte	$FF
06885 1795                        7E            .byte	$7E
06886 1796                        00            .byte	0
06887 1797                        00            .byte	0
06888 1798                        00            .byte	0
06889                                           ! 1153  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06890 1799                        00            .byte	0
06891 179A                        00            .byte	0
06892 179B                        00            .byte	0
06893 179C                        6C            .byte	$6C
06894 179D                        FE            .byte	$FE
06895 179E                        FE            .byte	$FE
06896 179F                        FE            .byte	$FE
06897 17A0                        FE            .byte	$FE
06898 17A1                        7C            .byte	$7C
06899 17A2                        38            .byte	$38
06900 17A3                        10            .byte	$10
06901 17A4                        00            .byte	0
06902 17A5                        00            .byte	0
06903 17A6                        00            .byte	0
06904                                           ! 1154  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0
06905 17A7                        00            .byte	0
06906 17A8                        00            .byte	0
06907 17A9                        00            .byte	0
06908 17AA                        10            .byte	$10
06909 17AB                        38            .byte	$38
06910 17AC                        7C            .byte	$7C
06911 17AD                        FE            .byte	$FE
06912                                           ! 1154 x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06913 17AE                        7C            .byte	$7C
06914 17AF                        38            .byte	$38
06915 17B0                        10            .byte	$10
06916 17B1                        00            .byte	0
06917 17B2                        00            .byte	0
06918 17B3                        00            .byte	0
06919 17B4                        00            .byte	0
06920                                           ! 1155  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06921 17B5                        00            .byte	0
06922 17B6                        00            .byte	0
06923 17B7                        18            .byte	$18
06924 17B8                        3C            .byte	$3C
06925 17B9                        3C            .byte	$3C
06926 17BA                        E7            .byte	$E7
06927 17BB                        E7            .byte	$E7
06928 17BC                        E7            .byte	$E7
06929 17BD                        18            .byte	$18
06930 17BE                        18            .byte	$18
06931 17BF                        3C            .byte	$3C
06932 17C0                        00            .byte	0
06933 17C1                        00            .byte	0
06934 17C2                        00            .byte	0
06935                                           ! 1156  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06936 17C3                        00            .byte	0
06937 17C4                        00            .byte	0
06938 17C5                        18            .byte	$18
06939 17C6                        3C            .byte	$3C
06940 17C7                        7E            .byte	$7E
06941 17C8                        FF            .byte	$FF
06942 17C9                        FF            .byte	$FF
06943 17CA                        7E            .byte	$7E
06944 17CB                        18            .byte	$18
06945 17CC                        18            .byte	$18
06946 17CD                        3C            .byte	$3C
06947 17CE                        00            .byte	0
06948 17CF                        00            .byte	0
06949 17D0                        00            .byte	0
06950                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06951 17D1                        00            .byte	0
06952 17D2                        00            .byte	0
06953 17D3                        00            .byte	0
06954 17D4                        00            .byte	0
06955 17D5                        00            .byte	0
06956 17D6                        18            .byte	$18
06957 17D7                        3C            .byte	$3C
06958 17D8                        3C            .byte	$3C
06959 17D9                        18            .byte	$18
06960 17DA                        00            .byte	0
06961 17DB                        00            .byte	0
06962 17DC                        00            .byte	0
06963 17DD                        00            .byte	0
06964 17DE                        00            .byte	0
06965                                           ! 1158  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06966 17DF                        FF            .byte	$FF
06967 17E0                        FF            .byte	$FF
06968 17E1                        FF            .byte	$FF
06969 17E2                        FF            .byte	$FF
06970 17E3                        FF            .byte	$FF
06971 17E4                        E7            .byte	$E7
06972 17E5                        C3            .byte	$C3
06973 17E6                        C3            .byte	$C3
06974 17E7                        E7            .byte	$E7
06975 17E8                        FF            .byte	$FF
06976 17E9                        FF            .byte	$FF
06977 17EA                        FF            .byte	$FF
06978 17EB                        FF            .byte	$FF
06979 17EC                        FF            .byte	$FF
06980                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06981 17ED                        00            .byte	0
06982 17EE                        00            .byte	0
06983 17EF                        00            .byte	0
06984 17F0                        00            .byte	0
06985 17F1                        3C            .byte	$3C
06986 17F2                        66            .byte	$66
06987 17F3                        42            .byte	$42
06988 17F4                        42            .byte	$42
06989 17F5                        66            .byte	$66
06990 17F6                        3C            .byte	$3C
06991 17F7                        00            .byte	0
06992 17F8                        00            .byte	0
06993 17F9                        00            .byte	0
06994 17FA                        00            .byte	0
06995                                           ! 1160  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06996 17FB                        FF            .byte	$FF
06997 17FC                        FF            .byte	$FF
06998 17FD                        FF            .byte	$FF
06999 17FE                        FF            .byte	$FF
07000 17FF                        C3            .byte	$C3
07001 1800                        99            .byte	$99
07002 1801                        BD            .byte	$BD
07003 1802                        BD            .byte	$BD
07004 1803                        99            .byte	$99
07005 1804                        C3            .byte	$C3
07006 1805                        FF            .byte	$FF
07007 1806                        FF            .byte	$FF
07008 1807                        FF            .byte	$FF
07009 1808                        FF            .byte	$FF
07010                                           ! 1161  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07011 1809                        00            .byte	0
07012 180A                        00            .byte	0
07013 180B                        1E            .byte	$1E
07014 180C                        0E            .byte	$E
07015 180D                        1A            .byte	$1A
07016 180E                        32            .byte	$32
07017 180F                        78            .byte	$78
07018 1810                        CC            .byte	$CC
07019 1811                        CC            .byte	$CC
07020 1812                        CC            .byte	$CC
07021 1813                        78            .byte	$78
07022 1814                        00            .byte	0
07023 1815                        00            .byte	0
07024 1816                        00            .byte	0
07025                                           ! 1162  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07026 1817                        00            .byte	0
07027 1818                        00            .byte	0
07028 1819                        3C            .byte	$3C
07029 181A                        66            .byte	$66
07030 181B                        66            .byte	$66
07031 181C                        66            .byte	$66
07032 181D                        3C            .byte	$3C
07033 181E                        18            .byte	$18
07034 181F                        7E            .byte	$7E
07035 1820                        18            .byte	$18
07036 1821                        18            .byte	$18
07037 1822                        00            .byte	0
07038 1823                        00            .byte	0
07039 1824                        00            .byte	0
07040                                           ! 1163  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07041 1825                        00            .byte	0
07042 1826                        00            .byte	0
07043 1827                        3F            .byte	$3F
07044 1828                        33            .byte	$33
07045 1829                        3F            .byte	$3F
07046 182A                        30            .byte	$30
07047 182B                        30            .byte	$30
07048 182C                        30            .byte	$30
07049 182D                        70            .byte	$70
07050 182E                        F0            .byte	$F0
07051 182F                        E0            .byte	$E0
07052 1830                        00            .byte	0
07053 1831                        00            .byte	0
07054 1832                        00            .byte	0
07055                                           ! 1164  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07056 1833                        00            .byte	0
07057 1834                        00            .byte	0
07058 1835                        7F            .byte	$7F
07059 1836                        63            .byte	$63
07060 1837                        7F            .byte	$7F
07061 1838                        63            .byte	$63
07062 1839                        63            .byte	$63
07063 183A                        63            .byte	$63
07064 183B                        67            .byte	$67
07065 183C                        E7            .byte	$E7
07066 183D                        E6            .byte	$E6
07067 183E                        C0            .byte	$C0
07068 183F                        00            .byte	0
07069 1840                        00            .byte	0
07070                                           ! 1165  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07071 1841                        00            .byte	0
07072 1842                        00            .byte	0
07073 1843                        18            .byte	$18
07074 1844                        18            .byte	$18
07075 1845                        DB            .byte	$DB
07076 1846                        3C            .byte	$3C
07077 1847                        E7            .byte	$E7
07078 1848                        3C            .byte	$3C
07079 1849                        DB            .byte	$DB
07080 184A                        18            .byte	$18
07081 184B                        18            .byte	$18
07082 184C                        00            .byte	0
07083 184D                        00            .byte	0
07084 184E                        00            .byte	0
07085                                           ! 1166  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07086 184F                        00            .byte	0
07087 1850                        00            .byte	0
07088 1851                        80            .byte	$80
07089 1852                        C0            .byte	$C0
07090 1853                        E0            .byte	$E0
07091 1854                        F8            .byte	$F8
07092 1855                        FE            .byte	$FE
07093 1856                        F8            .byte	$F8
07094 1857                        E0            .byte	$E0
07095 1858                        C0            .byte	$C0
07096 1859                        80            .byte	$80
07097 185A                        00            .byte	0
07098 185B                        00            .byte	0
07099 185C                        00            .byte	0
07100                                           ! 1167  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07101 185D                        00            .byte	0
07102 185E                        00            .byte	0
07103 185F                        02            .byte	2
07104 1860                        06            .byte	6
07105 1861                        0E            .byte	$E
07106 1862                        3E            .byte	$3E
07107 1863                        FE            .byte	$FE
07108 1864                        3E            .byte	$3E
07109 1865                        0E            .byte	$E
07110 1866                        06            .byte	6
07111 1867                        02            .byte	2
07112 1868                        00            .byte	0
07113 1869                        00            .byte	0
07114 186A                        00            .byte	0
07115                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07116 186B                        00            .byte	0
07117 186C                        00            .byte	0
07118 186D                        18            .byte	$18
07119 186E                        3C            .byte	$3C
07120 186F                        7E            .byte	$7E
07121 1870                        18            .byte	$18
07122 1871                        18            .byte	$18
07123 1872                        18            .byte	$18
07124 1873                        7E            .byte	$7E
07125 1874                        3C            .byte	$3C
07126 1875                        18            .byte	$18
07127 1876                        00            .byte	0
07128 1877                        00            .byte	0
07129 1878                        00            .byte	0
07130                                           ! 1169  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07131 1879                        00            .byte	0
07132 187A                        00            .byte	0
07133 187B                        66            .byte	$66
07134 187C                        66            .byte	$66
07135 187D                        66            .byte	$66
07136 187E                        66            .byte	$66
07137 187F                        66            .byte	$66
07138 1880                        66            .byte	$66
07139 1881                        00            .byte	0
07140 1882                        66            .byte	$66
07141 1883                        66            .byte	$66
07142 1884                        00            .byte	0
07143 1885                        00            .byte	0
07144 1886                        00            .byte	0
07145                                           ! 1170  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07146 1887                        00            .byte	0
07147 1888                        00            .byte	0
07148 1889                        7F            .byte	$7F
07149 188A                        DB            .byte	$DB
07150 188B                        DB            .byte	$DB
07151 188C                        DB            .byte	$DB
07152 188D                        7B            .byte	$7B
07153 188E                        1B            .byte	$1B
07154 188F                        1B            .byte	$1B
07155 1890                        1B            .byte	$1B
07156 1891                        1B            .byte	$1B
07157 1892                        00            .byte	0
07158 1893                        00            .byte	0
07159 1894                        00            .byte	0
07160                                           ! 1171  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07161 1895                        00            .byte	0
07162 1896                        7C            .byte	$7C
07163 1897                        C6            .byte	$C6
07164 1898                        60            .byte	$60
07165 1899                        38            .byte	$38
07166 189A                        6C            .byte	$6C
07167 189B                        C6            .byte	$C6
07168 189C                        C6            .byte	$C6
07169 189D                        6C            .byte	$6C
07170 189E                        38            .byte	$38
07171 189F                        0C            .byte	$C
07172 18A0                        C6            .byte	$C6
07173 18A1                        7C            .byte	$7C
07174 18A2                        00            .byte	0
07175                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07176 18A3                        00            .byte	0
07177 18A4                        00            .byte	0
07178 18A5                        00            .byte	0
07179 18A6                        00            .byte	0
07180 18A7                        00            .byte	0
07181 18A8                        00            .byte	0
07182 18A9                        00            .byte	0
07183 18AA                        00            .byte	0
07184 18AB                        FE            .byte	$FE
07185 18AC                        FE            .byte	$FE
07186 18AD                        FE            .byte	$FE
07187 18AE                        00            .byte	0
07188 18AF                        00            .byte	0
07189 18B0                        00            .byte	0
07190                                           ! 1173  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07191 18B1                        00            .byte	0
07192 18B2                        00            .byte	0
07193 18B3                        18            .byte	$18
07194 18B4                        3C            .byte	$3C
07195 18B5                        7E            .byte	$7E
07196 18B6                        18            .byte	$18
07197 18B7                        18            .byte	$18
07198 18B8                        18            .byte	$18
07199 18B9                        7E            .byte	$7E
07200 18BA                        3C            .byte	$3C
07201 18BB                        18            .byte	$18
07202 18BC                        7E            .byte	$7E
07203 18BD                        00            .byte	0
07204 18BE                        00            .byte	0
07205                                           ! 1174  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07206 18BF                        00            .byte	0
07207 18C0                        00            .byte	0
07208 18C1                        18            .byte	$18
07209 18C2                        3C            .byte	$3C
07210 18C3                        7E            .byte	$7E
07211 18C4                        18            .byte	$18
07212 18C5                        18            .byte	$18
07213 18C6                        18            .byte	$18
07214 18C7                        18            .byte	$18
07215 18C8                        18            .byte	$18
07216 18C9                        18            .byte	$18
07217 18CA                        00            .byte	0
07218 18CB                        00            .byte	0
07219 18CC                        00            .byte	0
07220                                           ! 1175  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07221 18CD                        00            .byte	0
07222 18CE                        00            .byte	0
07223 18CF                        18            .byte	$18
07224 18D0                        18            .byte	$18
07225 18D1                        18            .byte	$18
07226 18D2                        18            .byte	$18
07227 18D3                        18            .byte	$18
07228 18D4                        18            .byte	$18
07229 18D5                        7E            .byte	$7E
07230 18D6                        3C            .byte	$3C
07231 18D7                        18            .byte	$18
07232 18D8                        00            .byte	0
07233 18D9                        00            .byte	0
07234 18DA                        00            .byte	0
07235                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07236 18DB                        00            .byte	0
07237 18DC                        00            .byte	0
07238 18DD                        00            .byte	0
07239 18DE                        00            .byte	0
07240 18DF                        18            .byte	$18
07241 18E0                        0C            .byte	$C
07242 18E1                        FE            .byte	$FE
07243 18E2                        0C            .byte	$C
07244 18E3                        18            .byte	$18
07245 18E4                        00            .byte	0
07246 18E5                        00            .byte	0
07247 18E6                        00            .byte	0
07248 18E7                        00            .byte	0
07249 18E8                        00            .byte	0
07250                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07251 18E9                        00            .byte	0
07252 18EA                        00            .byte	0
07253 18EB                        00            .byte	0
07254 18EC                        00            .byte	0
07255 18ED                        30            .byte	$30
07256 18EE                        60            .byte	$60
07257 18EF                        FE            .byte	$FE
07258 18F0                        60            .byte	$60
07259 18F1                        30            .byte	$30
07260 18F2                        00            .byte	0
07261 18F3                        00            .byte	0
07262 18F4                        00            .byte	0
07263 18F5                        00            .byte	0
07264 18F6                        00            .byte	0
07265                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xf
07266 18F7                        00            .byte	0
07267 18F8                        00            .byte	0
07268 18F9                        00            .byte	0
07269 18FA                        00            .byte	0
07270 18FB                        00            .byte	0
07271 18FC                        C0            .byte	$C0
07272 18FD                        C0            .byte	$C0
07273 18FE                        C0            .byte	$C0
07274                                           ! 1178 e, 0x00, 0x00, 0x00, 0x00, 0x00,
07275 18FF                        FE            .byte	$FE
07276 1900                        00            .byte	0
07277 1901                        00            .byte	0
07278 1902                        00            .byte	0
07279 1903                        00            .byte	0
07280 1904                        00            .byte	0
07281                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07282 1905                        00            .byte	0
07283 1906                        00            .byte	0
07284 1907                        00            .byte	0
07285 1908                        00            .byte	0
07286 1909                        28            .byte	$28
07287 190A                        6C            .byte	$6C
07288 190B                        FE            .byte	$FE
07289 190C                        6C            .byte	$6C
07290 190D                        28            .byte	$28
07291 190E                        00            .byte	0
07292 190F                        00            .byte	0
07293 1910                        00            .byte	0
07294 1911                        00            .byte	0
07295 1912                        00            .byte	0
07296                                           ! 1180  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07297 1913                        00            .byte	0
07298 1914                        00            .byte	0
07299 1915                        00            .byte	0
07300 1916                        10            .byte	$10
07301 1917                        38            .byte	$38
07302 1918                        38            .byte	$38
07303 1919                        7C            .byte	$7C
07304 191A                        7C            .byte	$7C
07305 191B                        FE            .byte	$FE
07306 191C                        FE            .byte	$FE
07307 191D                        00            .byte	0
07308 191E                        00            .byte	0
07309 191F                        00            .byte	0
07310 1920                        00            .byte	0
07311                                           ! 1181  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07312 1921                        00            .byte	0
07313 1922                        00            .byte	0
07314 1923                        00            .byte	0
07315 1924                        FE            .byte	$FE
07316 1925                        FE            .byte	$FE
07317 1926                        7C            .byte	$7C
07318 1927                        7C            .byte	$7C
07319 1928                        38            .byte	$38
07320 1929                        38            .byte	$38
07321 192A                        10            .byte	$10
07322 192B                        00            .byte	0
07323 192C                        00            .byte	0
07324 192D                        00            .byte	0
07325 192E                        00            .byte	0
07326                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07327 192F                        00            .byte	0
07328 1930                        00            .byte	0
07329 1931                        00            .byte	0
07330 1932                        00            .byte	0
07331 1933                        00            .byte	0
07332 1934                        00            .byte	0
07333 1935                        00            .byte	0
07334 1936                        00            .byte	0
07335 1937                        00            .byte	0
07336 1938                        00            .byte	0
07337 1939                        00            .byte	0
07338 193A                        00            .byte	0
07339 193B                        00            .byte	0
07340 193C                        00            .byte	0
07341                                           ! 1183  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07342 193D                        00            .byte	0
07343 193E                        00            .byte	0
07344 193F                        18            .byte	$18
07345 1940                        3C            .byte	$3C
07346 1941                        3C            .byte	$3C
07347 1942                        3C            .byte	$3C
07348 1943                        18            .byte	$18
07349 1944                        18            .byte	$18
07350 1945                        00            .byte	0
07351 1946                        18            .byte	$18
07352 1947                        18            .byte	$18
07353 1948                        00            .byte	0
07354 1949                        00            .byte	0
07355 194A                        00            .byte	0
07356                                           ! 1184  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07357 194B                        00            .byte	0
07358 194C                        66            .byte	$66
07359 194D                        66            .byte	$66
07360 194E                        66            .byte	$66
07361 194F                        24            .byte	$24
07362 1950                        00            .byte	0
07363 1951                        00            .byte	0
07364 1952                        00            .byte	0
07365 1953                        00            .byte	0
07366 1954                        00            .byte	0
07367 1955                        00            .byte	0
07368 1956                        00            .byte	0
07369 1957                        00            .byte	0
07370 1958                        00            .byte	0
07371                                           ! 1185  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07372 1959                        00            .byte	0
07373 195A                        00            .byte	0
07374 195B                        6C            .byte	$6C
07375 195C                        6C            .byte	$6C
07376 195D                        FE            .byte	$FE
07377 195E                        6C            .byte	$6C
07378 195F                        6C            .byte	$6C
07379 1960                        6C            .byte	$6C
07380 1961                        FE            .byte	$FE
07381 1962                        6C            .byte	$6C
07382 1963                        6C            .byte	$6C
07383 1964                        00            .byte	0
07384 1965                        00            .byte	0
07385 1966                        00            .byte	0
07386                                           ! 1186  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07387 1967                        18            .byte	$18
07388 1968                        18            .byte	$18
07389 1969                        7C            .byte	$7C
07390 196A                        C6            .byte	$C6
07391 196B                        C2            .byte	$C2
07392 196C                        C0            .byte	$C0
07393 196D                        7C            .byte	$7C
07394 196E                        06            .byte	6
07395 196F                        86            .byte	$86
07396 1970                        C6            .byte	$C6
07397 1971                        7C            .byte	$7C
07398 1972                        18            .byte	$18
07399 1973                        18            .byte	$18
07400 1974                        00            .byte	0
07401                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07402 1975                        00            .byte	0
07403 1976                        00            .byte	0
07404 1977                        00            .byte	0
07405 1978                        00            .byte	0
07406 1979                        C2            .byte	$C2
07407 197A                        C6            .byte	$C6
07408 197B                        0C            .byte	$C
07409 197C                        18            .byte	$18
07410 197D                        30            .byte	$30
07411 197E                        66            .byte	$66
07412 197F                        C6            .byte	$C6
07413 1980                        00            .byte	0
07414 1981                        00            .byte	0
07415 1982                        00            .byte	0
07416                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07417 1983                        00            .byte	0
07418 1984                        00            .byte	0
07419 1985                        38            .byte	$38
07420 1986                        6C            .byte	$6C
07421 1987                        6C            .byte	$6C
07422 1988                        38            .byte	$38
07423 1989                        76            .byte	$76
07424 198A                        DC            .byte	$DC
07425 198B                        CC            .byte	$CC
07426 198C                        CC            .byte	$CC
07427 198D                        76            .byte	$76
07428 198E                        00            .byte	0
07429 198F                        00            .byte	0
07430 1990                        00            .byte	0
07431                                           ! 1189  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07432 1991                        00            .byte	0
07433 1992                        30            .byte	$30
07434 1993                        30            .byte	$30
07435 1994                        30            .byte	$30
07436 1995                        60            .byte	$60
07437 1996                        00            .byte	0
07438 1997                        00            .byte	0
07439 1998                        00            .byte	0
07440 1999                        00            .byte	0
07441 199A                        00            .byte	0
07442 199B                        00            .byte	0
07443 199C                        00            .byte	0
07444 199D                        00            .byte	0
07445 199E                        00            .byte	0
07446                                           ! 1190  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07447 199F                        00            .byte	0
07448 19A0                        00            .byte	0
07449 19A1                        0C            .byte	$C
07450 19A2                        18            .byte	$18
07451 19A3                        30            .byte	$30
07452 19A4                        30            .byte	$30
07453 19A5                        30            .byte	$30
07454 19A6                        30            .byte	$30
07455 19A7                        30            .byte	$30
07456 19A8                        18            .byte	$18
07457 19A9                        0C            .byte	$C
07458 19AA                        00            .byte	0
07459 19AB                        00            .byte	0
07460 19AC                        00            .byte	0
07461                                           ! 1191  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07462 19AD                        00            .byte	0
07463 19AE                        00            .byte	0
07464 19AF                        30            .byte	$30
07465 19B0                        18            .byte	$18
07466 19B1                        0C            .byte	$C
07467 19B2                        0C            .byte	$C
07468 19B3                        0C            .byte	$C
07469 19B4                        0C            .byte	$C
07470 19B5                        0C            .byte	$C
07471 19B6                        18            .byte	$18
07472 19B7                        30            .byte	$30
07473 19B8                        00            .byte	0
07474 19B9                        00            .byte	0
07475 19BA                        00            .byte	0
07476                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07477 19BB                        00            .byte	0
07478 19BC                        00            .byte	0
07479 19BD                        00            .byte	0
07480 19BE                        00            .byte	0
07481 19BF                        66            .byte	$66
07482 19C0                        3C            .byte	$3C
07483 19C1                        FF            .byte	$FF
07484 19C2                        3C            .byte	$3C
07485 19C3                        66            .byte	$66
07486 19C4                        00            .byte	0
07487 19C5                        00            .byte	0
07488 19C6                        00            .byte	0
07489 19C7                        00            .byte	0
07490 19C8                        00            .byte	0
07491                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07492 19C9                        00            .byte	0
07493 19CA                        00            .byte	0
07494 19CB                        00            .byte	0
07495 19CC                        00            .byte	0
07496 19CD                        18            .byte	$18
07497 19CE                        18            .byte	$18
07498 19CF                        7E            .byte	$7E
07499 19D0                        18            .byte	$18
07500 19D1                        18            .byte	$18
07501 19D2                        00            .byte	0
07502 19D3                        00            .byte	0
07503 19D4                        00            .byte	0
07504 19D5                        00            .byte	0
07505 19D6                        00            .byte	0
07506                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07507 19D7                        00            .byte	0
07508 19D8                        00            .byte	0
07509 19D9                        00            .byte	0
07510 19DA                        00            .byte	0
07511 19DB                        00            .byte	0
07512 19DC                        00            .byte	0
07513 19DD                        00            .byte	0
07514 19DE                        00            .byte	0
07515 19DF                        18            .byte	$18
07516 19E0                        18            .byte	$18
07517 19E1                        18            .byte	$18
07518 19E2                        30            .byte	$30
07519 19E3                        00            .byte	0
07520 19E4                        00            .byte	0
07521                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07522 19E5                        00            .byte	0
07523 19E6                        00            .byte	0
07524 19E7                        00            .byte	0
07525 19E8                        00            .byte	0
07526 19E9                        00            .byte	0
07527 19EA                        00            .byte	0
07528 19EB                        FE            .byte	$FE
07529 19EC                        00            .byte	0
07530 19ED                        00            .byte	0
07531 19EE                        00            .byte	0
07532 19EF                        00            .byte	0
07533 19F0                        00            .byte	0
07534 19F1                        00            .byte	0
07535 19F2                        00            .byte	0
07536                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07537 19F3                        00            .byte	0
07538 19F4                        00            .byte	0
07539 19F5                        00            .byte	0
07540 19F6                        00            .byte	0
07541 19F7                        00            .byte	0
07542 19F8                        00            .byte	0
07543 19F9                        00            .byte	0
07544 19FA                        00            .byte	0
07545 19FB                        00            .byte	0
07546 19FC                        18            .byte	$18
07547 19FD                        18            .byte	$18
07548 19FE                        00            .byte	0
07549 19FF                        00            .byte	0
07550 1A00                        00            .byte	0
07551                                           ! 1197  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07552 1A01                        00            .byte	0
07553 1A02                        00            .byte	0
07554 1A03                        02            .byte	2
07555 1A04                        06            .byte	6
07556 1A05                        0C            .byte	$C
07557 1A06                        18            .byte	$18
07558 1A07                        30            .byte	$30
07559 1A08                        60            .byte	$60
07560 1A09                        C0            .byte	$C0
07561 1A0A                        80            .byte	$80
07562 1A0B                        00            .byte	0
07563 1A0C                        00            .byte	0
07564 1A0D                        00            .byte	0
07565 1A0E                        00            .byte	0
07566                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07567 1A0F                        00            .byte	0
07568 1A10                        00            .byte	0
07569 1A11                        7C            .byte	$7C
07570 1A12                        C6            .byte	$C6
07571 1A13                        CE            .byte	$CE
07572 1A14                        DE            .byte	$DE
07573 1A15                        F6            .byte	$F6
07574 1A16                        E6            .byte	$E6
07575 1A17                        C6            .byte	$C6
07576 1A18                        C6            .byte	$C6
07577 1A19                        7C            .byte	$7C
07578 1A1A                        00            .byte	0
07579 1A1B                        00            .byte	0
07580 1A1C                        00            .byte	0
07581                                           ! 1199  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07582 1A1D                        00            .byte	0
07583 1A1E                        00            .byte	0
07584 1A1F                        18            .byte	$18
07585 1A20                        38            .byte	$38
07586 1A21                        78            .byte	$78
07587 1A22                        18            .byte	$18
07588 1A23                        18            .byte	$18
07589 1A24                        18            .byte	$18
07590 1A25                        18            .byte	$18
07591 1A26                        18            .byte	$18
07592 1A27                        7E            .byte	$7E
07593 1A28                        00            .byte	0
07594 1A29                        00            .byte	0
07595 1A2A                        00            .byte	0
07596                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07597 1A2B                        00            .byte	0
07598 1A2C                        00            .byte	0
07599 1A2D                        7C            .byte	$7C
07600 1A2E                        C6            .byte	$C6
07601 1A2F                        06            .byte	6
07602 1A30                        0C            .byte	$C
07603 1A31                        18            .byte	$18
07604 1A32                        30            .byte	$30
07605 1A33                        60            .byte	$60
07606 1A34                        C6            .byte	$C6
07607 1A35                        FE            .byte	$FE
07608 1A36                        00            .byte	0
07609 1A37                        00            .byte	0
07610 1A38                        00            .byte	0
07611                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07612 1A39                        00            .byte	0
07613 1A3A                        00            .byte	0
07614 1A3B                        7C            .byte	$7C
07615 1A3C                        C6            .byte	$C6
07616 1A3D                        06            .byte	6
07617 1A3E                        06            .byte	6
07618 1A3F                        3C            .byte	$3C
07619 1A40                        06            .byte	6
07620 1A41                        06            .byte	6
07621 1A42                        C6            .byte	$C6
07622 1A43                        7C            .byte	$7C
07623 1A44                        00            .byte	0
07624 1A45                        00            .byte	0
07625 1A46                        00            .byte	0
07626                                           ! 1202  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c,
07627 1A47                        00            .byte	0
07628 1A48                        00            .byte	0
07629 1A49                        0C            .byte	$C
07630 1A4A                        1C            .byte	$1C
07631 1A4B                        3C            .byte	$3C
07632 1A4C                        6C            .byte	$6C
07633 1A4D                        CC            .byte	$CC
07634 1A4E                        FE            .byte	$FE
07635 1A4F                        0C            .byte	$C
07636                                           ! 1202  0x1e, 0x00, 0x00, 0x00,
07637 1A50                        0C            .byte	$C
07638 1A51                        1E            .byte	$1E
07639 1A52                        00            .byte	0
07640 1A53                        00            .byte	0
07641 1A54                        00            .byte	0
07642                                           ! 1203  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07643 1A55                        00            .byte	0
07644 1A56                        00            .byte	0
07645 1A57                        FE            .byte	$FE
07646 1A58                        C0            .byte	$C0
07647 1A59                        C0            .byte	$C0
07648 1A5A                        C0            .byte	$C0
07649 1A5B                        FC            .byte	$FC
07650 1A5C                        06            .byte	6
07651 1A5D                        06            .byte	6
07652 1A5E                        C6            .byte	$C6
07653 1A5F                        7C            .byte	$7C
07654 1A60                        00            .byte	0
07655 1A61                        00            .byte	0
07656 1A62                        00            .byte	0
07657                                           ! 1204  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07658 1A63                        00            .byte	0
07659 1A64                        00            .byte	0
07660 1A65                        38            .byte	$38
07661 1A66                        60            .byte	$60
07662 1A67                        C0            .byte	$C0
07663 1A68                        C0            .byte	$C0
07664 1A69                        FC            .byte	$FC
07665 1A6A                        C6            .byte	$C6
07666 1A6B                        C6            .byte	$C6
07667 1A6C                        C6            .byte	$C6
07668 1A6D                        7C            .byte	$7C
07669 1A6E                        00            .byte	0
07670 1A6F                        00            .byte	0
07671 1A70                        00            .byte	0
07672                                           ! 1205  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07673 1A71                        00            .byte	0
07674 1A72                        00            .byte	0
07675 1A73                        FE            .byte	$FE
07676 1A74                        C6            .byte	$C6
07677 1A75                        06            .byte	6
07678 1A76                        0C            .byte	$C
07679 1A77                        18            .byte	$18
07680 1A78                        30            .byte	$30
07681 1A79                        30            .byte	$30
07682 1A7A                        30            .byte	$30
07683 1A7B                        30            .byte	$30
07684 1A7C                        00            .byte	0
07685 1A7D                        00            .byte	0
07686 1A7E                        00            .byte	0
07687                                           ! 1206  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07688 1A7F                        00            .byte	0
07689 1A80                        00            .byte	0
07690 1A81                        7C            .byte	$7C
07691 1A82                        C6            .byte	$C6
07692 1A83                        C6            .byte	$C6
07693 1A84                        C6            .byte	$C6
07694 1A85                        7C            .byte	$7C
07695 1A86                        C6            .byte	$C6
07696 1A87                        C6            .byte	$C6
07697 1A88                        C6            .byte	$C6
07698 1A89                        7C            .byte	$7C
07699 1A8A                        00            .byte	0
07700 1A8B                        00            .byte	0
07701 1A8C                        00            .byte	0
07702                                           ! 1207  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07703 1A8D                        00            .byte	0
07704 1A8E                        00            .byte	0
07705 1A8F                        7C            .byte	$7C
07706 1A90                        C6            .byte	$C6
07707 1A91                        C6            .byte	$C6
07708 1A92                        C6            .byte	$C6
07709 1A93                        7E            .byte	$7E
07710 1A94                        06            .byte	6
07711 1A95                        06            .byte	6
07712 1A96                        0C            .byte	$C
07713 1A97                        78            .byte	$78
07714 1A98                        00            .byte	0
07715 1A99                        00            .byte	0
07716 1A9A                        00            .byte	0
07717                                           ! 1208  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07718 1A9B                        00            .byte	0
07719 1A9C                        00            .byte	0
07720 1A9D                        00            .byte	0
07721 1A9E                        18            .byte	$18
07722 1A9F                        18            .byte	$18
07723 1AA0                        00            .byte	0
07724 1AA1                        00            .byte	0
07725 1AA2                        00            .byte	0
07726 1AA3                        18            .byte	$18
07727 1AA4                        18            .byte	$18
07728 1AA5                        00            .byte	0
07729 1AA6                        00            .byte	0
07730 1AA7                        00            .byte	0
07731 1AA8                        00            .byte	0
07732                                           ! 1209  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07733 1AA9                        00            .byte	0
07734 1AAA                        00            .byte	0
07735 1AAB                        00            .byte	0
07736 1AAC                        18            .byte	$18
07737 1AAD                        18            .byte	$18
07738 1AAE                        00            .byte	0
07739 1AAF                        00            .byte	0
07740 1AB0                        00            .byte	0
07741 1AB1                        18            .byte	$18
07742 1AB2                        18            .byte	$18
07743 1AB3                        30            .byte	$30
07744 1AB4                        00            .byte	0
07745 1AB5                        00            .byte	0
07746 1AB6                        00            .byte	0
07747                                           ! 1210  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07748 1AB7                        00            .byte	0
07749 1AB8                        00            .byte	0
07750 1AB9                        06            .byte	6
07751 1ABA                        0C            .byte	$C
07752 1ABB                        18            .byte	$18
07753 1ABC                        30            .byte	$30
07754 1ABD                        60            .byte	$60
07755 1ABE                        30            .byte	$30
07756 1ABF                        18            .byte	$18
07757 1AC0                        0C            .byte	$C
07758 1AC1                        06            .byte	6
07759 1AC2                        00            .byte	0
07760 1AC3                        00            .byte	0
07761 1AC4                        00            .byte	0
07762                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07763 1AC5                        00            .byte	0
07764 1AC6                        00            .byte	0
07765 1AC7                        00            .byte	0
07766 1AC8                        00            .byte	0
07767 1AC9                        00            .byte	0
07768 1ACA                        7E            .byte	$7E
07769 1ACB                        00            .byte	0
07770 1ACC                        00            .byte	0
07771 1ACD                        7E            .byte	$7E
07772 1ACE                        00            .byte	0
07773 1ACF                        00            .byte	0
07774 1AD0                        00            .byte	0
07775 1AD1                        00            .byte	0
07776 1AD2                        00            .byte	0
07777                                           ! 1212  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07778 1AD3                        00            .byte	0
07779 1AD4                        00            .byte	0
07780 1AD5                        60            .byte	$60
07781 1AD6                        30            .byte	$30
07782 1AD7                        18            .byte	$18
07783 1AD8                        0C            .byte	$C
07784 1AD9                        06            .byte	6
07785 1ADA                        0C            .byte	$C
07786 1ADB                        18            .byte	$18
07787 1ADC                        30            .byte	$30
07788 1ADD                        60            .byte	$60
07789 1ADE                        00            .byte	0
07790 1ADF                        00            .byte	0
07791 1AE0                        00            .byte	0
07792                                           ! 1213  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07793 1AE1                        00            .byte	0
07794 1AE2                        00            .byte	0
07795 1AE3                        7C            .byte	$7C
07796 1AE4                        C6            .byte	$C6
07797 1AE5                        C6            .byte	$C6
07798 1AE6                        0C            .byte	$C
07799 1AE7                        18            .byte	$18
07800 1AE8                        18            .byte	$18
07801 1AE9                        00            .byte	0
07802 1AEA                        18            .byte	$18
07803 1AEB                        18            .byte	$18
07804 1AEC                        00            .byte	0
07805 1AED                        00            .byte	0
07806 1AEE                        00            .byte	0
07807                                           ! 1214  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07808 1AEF                        00            .byte	0
07809 1AF0                        00            .byte	0
07810 1AF1                        7C            .byte	$7C
07811 1AF2                        C6            .byte	$C6
07812 1AF3                        C6            .byte	$C6
07813 1AF4                        DE            .byte	$DE
07814 1AF5                        DE            .byte	$DE
07815 1AF6                        DE            .byte	$DE
07816 1AF7                        DC            .byte	$DC
07817 1AF8                        C0            .byte	$C0
07818 1AF9                        7C            .byte	$7C
07819 1AFA                        00            .byte	0
07820 1AFB                        00            .byte	0
07821 1AFC                        00            .byte	0
07822                                           ! 1215  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07823 1AFD                        00            .byte	0
07824 1AFE                        00            .byte	0
07825 1AFF                        10            .byte	$10
07826 1B00                        38            .byte	$38
07827 1B01                        6C            .byte	$6C
07828 1B02                        C6            .byte	$C6
07829 1B03                        C6            .byte	$C6
07830 1B04                        FE            .byte	$FE
07831 1B05                        C6            .byte	$C6
07832 1B06                        C6            .byte	$C6
07833 1B07                        C6            .byte	$C6
07834 1B08                        00            .byte	0
07835 1B09                        00            .byte	0
07836 1B0A                        00            .byte	0
07837                                           ! 1216  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07838 1B0B                        00            .byte	0
07839 1B0C                        00            .byte	0
07840 1B0D                        FC            .byte	$FC
07841 1B0E                        66            .byte	$66
07842 1B0F                        66            .byte	$66
07843 1B10                        66            .byte	$66
07844 1B11                        7C            .byte	$7C
07845 1B12                        66            .byte	$66
07846 1B13                        66            .byte	$66
07847 1B14                        66            .byte	$66
07848 1B15                        FC            .byte	$FC
07849 1B16                        00            .byte	0
07850 1B17                        00            .byte	0
07851 1B18                        00            .byte	0
07852                                           ! 1217  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07853 1B19                        00            .byte	0
07854 1B1A                        00            .byte	0
07855 1B1B                        3C            .byte	$3C
07856 1B1C                        66            .byte	$66
07857 1B1D                        C2            .byte	$C2
07858 1B1E                        C0            .byte	$C0
07859 1B1F                        C0            .byte	$C0
07860 1B20                        C0            .byte	$C0
07861 1B21                        C2            .byte	$C2
07862 1B22                        66            .byte	$66
07863 1B23                        3C            .byte	$3C
07864 1B24                        00            .byte	0
07865 1B25                        00            .byte	0
07866 1B26                        00            .byte	0
07867                                           ! 1218  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07868 1B27                        00            .byte	0
07869 1B28                        00            .byte	0
07870 1B29                        F8            .byte	$F8
07871 1B2A                        6C            .byte	$6C
07872 1B2B                        66            .byte	$66
07873 1B2C                        66            .byte	$66
07874 1B2D                        66            .byte	$66
07875 1B2E                        66            .byte	$66
07876 1B2F                        66            .byte	$66
07877 1B30                        6C            .byte	$6C
07878 1B31                        F8            .byte	$F8
07879 1B32                        00            .byte	0
07880 1B33                        00            .byte	0
07881 1B34                        00            .byte	0
07882                                           ! 1219  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07883 1B35                        00            .byte	0
07884 1B36                        00            .byte	0
07885 1B37                        FE            .byte	$FE
07886 1B38                        66            .byte	$66
07887 1B39                        62            .byte	$62
07888 1B3A                        68            .byte	$68
07889 1B3B                        78            .byte	$78
07890 1B3C                        68            .byte	$68
07891 1B3D                        62            .byte	$62
07892 1B3E                        66            .byte	$66
07893 1B3F                        FE            .byte	$FE
07894 1B40                        00            .byte	0
07895 1B41                        00            .byte	0
07896 1B42                        00            .byte	0
07897                                           ! 1220  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07898 1B43                        00            .byte	0
07899 1B44                        00            .byte	0
07900 1B45                        FE            .byte	$FE
07901 1B46                        66            .byte	$66
07902 1B47                        62            .byte	$62
07903 1B48                        68            .byte	$68
07904 1B49                        78            .byte	$78
07905 1B4A                        68            .byte	$68
07906 1B4B                        60            .byte	$60
07907 1B4C                        60            .byte	$60
07908 1B4D                        F0            .byte	$F0
07909 1B4E                        00            .byte	0
07910 1B4F                        00            .byte	0
07911 1B50                        00            .byte	0
07912                                           ! 1221  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07913 1B51                        00            .byte	0
07914 1B52                        00            .byte	0
07915 1B53                        3C            .byte	$3C
07916 1B54                        66            .byte	$66
07917 1B55                        C2            .byte	$C2
07918 1B56                        C0            .byte	$C0
07919 1B57                        C0            .byte	$C0
07920 1B58                        DE            .byte	$DE
07921 1B59                        C6            .byte	$C6
07922 1B5A                        66            .byte	$66
07923 1B5B                        3A            .byte	$3A
07924 1B5C                        00            .byte	0
07925 1B5D                        00            .byte	0
07926 1B5E                        00            .byte	0
07927                                           ! 1222  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07928 1B5F                        00            .byte	0
07929 1B60                        00            .byte	0
07930 1B61                        C6            .byte	$C6
07931 1B62                        C6            .byte	$C6
07932 1B63                        C6            .byte	$C6
07933 1B64                        C6            .byte	$C6
07934 1B65                        FE            .byte	$FE
07935 1B66                        C6            .byte	$C6
07936 1B67                        C6            .byte	$C6
07937 1B68                        C6            .byte	$C6
07938 1B69                        C6            .byte	$C6
07939 1B6A                        00            .byte	0
07940 1B6B                        00            .byte	0
07941 1B6C                        00            .byte	0
07942                                           ! 1223  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07943 1B6D                        00            .byte	0
07944 1B6E                        00            .byte	0
07945 1B6F                        3C            .byte	$3C
07946 1B70                        18            .byte	$18
07947 1B71                        18            .byte	$18
07948 1B72                        18            .byte	$18
07949 1B73                        18            .byte	$18
07950 1B74                        18            .byte	$18
07951 1B75                        18            .byte	$18
07952 1B76                        18            .byte	$18
07953 1B77                        3C            .byte	$3C
07954 1B78                        00            .byte	0
07955 1B79                        00            .byte	0
07956 1B7A                        00            .byte	0
07957                                           ! 1224  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07958 1B7B                        00            .byte	0
07959 1B7C                        00            .byte	0
07960 1B7D                        1E            .byte	$1E
07961 1B7E                        0C            .byte	$C
07962 1B7F                        0C            .byte	$C
07963 1B80                        0C            .byte	$C
07964 1B81                        0C            .byte	$C
07965 1B82                        0C            .byte	$C
07966 1B83                        CC            .byte	$CC
07967 1B84                        CC            .byte	$CC
07968 1B85                        78            .byte	$78
07969 1B86                        00            .byte	0
07970 1B87                        00            .byte	0
07971 1B88                        00            .byte	0
07972                                           ! 1225  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07973 1B89                        00            .byte	0
07974 1B8A                        00            .byte	0
07975 1B8B                        E6            .byte	$E6
07976 1B8C                        66            .byte	$66
07977 1B8D                        6C            .byte	$6C
07978 1B8E                        6C            .byte	$6C
07979 1B8F                        78            .byte	$78
07980 1B90                        6C            .byte	$6C
07981 1B91                        6C            .byte	$6C
07982 1B92                        66            .byte	$66
07983 1B93                        E6            .byte	$E6
07984 1B94                        00            .byte	0
07985 1B95                        00            .byte	0
07986 1B96                        00            .byte	0
07987                                           ! 1226  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0
07988 1B97                        00            .byte	0
07989 1B98                        00            .byte	0
07990 1B99                        F0            .byte	$F0
07991 1B9A                        60            .byte	$60
07992 1B9B                        60            .byte	$60
07993 1B9C                        60            .byte	$60
07994 1B9D                        60            .byte	$60
07995 1B9E                        60            .byte	$60
07996 1B9F                        62            .byte	$62
07997 1BA0                        66            .byte	$66
07998 1BA1                        FE            .byte	$FE
07999                                           ! 1226 x00, 0x00, 0x00,
08000 1BA2                        00            .byte	0
08001 1BA3                        00            .byte	0
08002 1BA4                        00            .byte	0
08003                                           ! 1227  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08004 1BA5                        00            .byte	0
08005 1BA6                        00            .byte	0
08006 1BA7                        C6            .byte	$C6
08007 1BA8                        EE            .byte	$EE
08008 1BA9                        FE            .byte	$FE
08009 1BAA                        FE            .byte	$FE
08010 1BAB                        D6            .byte	$D6
08011 1BAC                        C6            .byte	$C6
08012 1BAD                        C6            .byte	$C6
08013 1BAE                        C6            .byte	$C6
08014 1BAF                        C6            .byte	$C6
08015 1BB0                        00            .byte	0
08016 1BB1                        00            .byte	0
08017 1BB2                        00            .byte	0
08018                                           ! 1228  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08019 1BB3                        00            .byte	0
08020 1BB4                        00            .byte	0
08021 1BB5                        C6            .byte	$C6
08022 1BB6                        E6            .byte	$E6
08023 1BB7                        F6            .byte	$F6
08024 1BB8                        FE            .byte	$FE
08025 1BB9                        DE            .byte	$DE
08026 1BBA                        CE            .byte	$CE
08027 1BBB                        C6            .byte	$C6
08028 1BBC                        C6            .byte	$C6
08029 1BBD                        C6            .byte	$C6
08030 1BBE                        00            .byte	0
08031 1BBF                        00            .byte	0
08032 1BC0                        00            .byte	0
08033                                           ! 1229  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08034 1BC1                        00            .byte	0
08035 1BC2                        00            .byte	0
08036 1BC3                        38            .byte	$38
08037 1BC4                        6C            .byte	$6C
08038 1BC5                        C6            .byte	$C6
08039 1BC6                        C6            .byte	$C6
08040 1BC7                        C6            .byte	$C6
08041 1BC8                        C6            .byte	$C6
08042 1BC9                        C6            .byte	$C6
08043 1BCA                        6C            .byte	$6C
08044 1BCB                        38            .byte	$38
08045 1BCC                        00            .byte	0
08046 1BCD                        00            .byte	0
08047 1BCE                        00            .byte	0
08048                                           ! 1230  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08049 1BCF                        00            .byte	0
08050 1BD0                        00            .byte	0
08051 1BD1                        FC            .byte	$FC
08052 1BD2                        66            .byte	$66
08053 1BD3                        66            .byte	$66
08054 1BD4                        66            .byte	$66
08055 1BD5                        7C            .byte	$7C
08056 1BD6                        60            .byte	$60
08057 1BD7                        60            .byte	$60
08058 1BD8                        60            .byte	$60
08059 1BD9                        F0            .byte	$F0
08060 1BDA                        00            .byte	0
08061 1BDB                        00            .byte	0
08062 1BDC                        00            .byte	0
08063                                           ! 1231  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08064 1BDD                        00            .byte	0
08065 1BDE                        00            .byte	0
08066 1BDF                        7C            .byte	$7C
08067 1BE0                        C6            .byte	$C6
08068 1BE1                        C6            .byte	$C6
08069 1BE2                        C6            .byte	$C6
08070 1BE3                        C6            .byte	$C6
08071 1BE4                        D6            .byte	$D6
08072 1BE5                        DE            .byte	$DE
08073 1BE6                        7C            .byte	$7C
08074 1BE7                        0C            .byte	$C
08075 1BE8                        0E            .byte	$E
08076 1BE9                        00            .byte	0
08077 1BEA                        00            .byte	0
08078                                           ! 1232  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08079 1BEB                        00            .byte	0
08080 1BEC                        00            .byte	0
08081 1BED                        FC            .byte	$FC
08082 1BEE                        66            .byte	$66
08083 1BEF                        66            .byte	$66
08084 1BF0                        66            .byte	$66
08085 1BF1                        7C            .byte	$7C
08086 1BF2                        6C            .byte	$6C
08087 1BF3                        66            .byte	$66
08088 1BF4                        66            .byte	$66
08089 1BF5                        E6            .byte	$E6
08090 1BF6                        00            .byte	0
08091 1BF7                        00            .byte	0
08092 1BF8                        00            .byte	0
08093                                           ! 1233  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08094 1BF9                        00            .byte	0
08095 1BFA                        00            .byte	0
08096 1BFB                        7C            .byte	$7C
08097 1BFC                        C6            .byte	$C6
08098 1BFD                        C6            .byte	$C6
08099 1BFE                        60            .byte	$60
08100 1BFF                        38            .byte	$38
08101 1C00                        0C            .byte	$C
08102 1C01                        C6            .byte	$C6
08103 1C02                        C6            .byte	$C6
08104 1C03                        7C            .byte	$7C
08105 1C04                        00            .byte	0
08106 1C05                        00            .byte	0
08107 1C06                        00            .byte	0
08108                                           ! 1234  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08109 1C07                        00            .byte	0
08110 1C08                        00            .byte	0
08111 1C09                        7E            .byte	$7E
08112 1C0A                        7E            .byte	$7E
08113 1C0B                        5A            .byte	$5A
08114 1C0C                        18            .byte	$18
08115 1C0D                        18            .byte	$18
08116 1C0E                        18            .byte	$18
08117 1C0F                        18            .byte	$18
08118 1C10                        18            .byte	$18
08119 1C11                        3C            .byte	$3C
08120 1C12                        00            .byte	0
08121 1C13                        00            .byte	0
08122 1C14                        00            .byte	0
08123                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08124 1C15                        00            .byte	0
08125 1C16                        00            .byte	0
08126 1C17                        C6            .byte	$C6
08127 1C18                        C6            .byte	$C6
08128 1C19                        C6            .byte	$C6
08129 1C1A                        C6            .byte	$C6
08130 1C1B                        C6            .byte	$C6
08131 1C1C                        C6            .byte	$C6
08132 1C1D                        C6            .byte	$C6
08133 1C1E                        C6            .byte	$C6
08134 1C1F                        7C            .byte	$7C
08135 1C20                        00            .byte	0
08136 1C21                        00            .byte	0
08137 1C22                        00            .byte	0
08138                                           ! 1236  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08139 1C23                        00            .byte	0
08140 1C24                        00            .byte	0
08141 1C25                        C6            .byte	$C6
08142 1C26                        C6            .byte	$C6
08143 1C27                        C6            .byte	$C6
08144 1C28                        C6            .byte	$C6
08145 1C29                        C6            .byte	$C6
08146 1C2A                        C6            .byte	$C6
08147 1C2B                        6C            .byte	$6C
08148 1C2C                        38            .byte	$38
08149 1C2D                        10            .byte	$10
08150 1C2E                        00            .byte	0
08151 1C2F                        00            .byte	0
08152 1C30                        00            .byte	0
08153                                           ! 1237  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08154 1C31                        00            .byte	0
08155 1C32                        00            .byte	0
08156 1C33                        C6            .byte	$C6
08157 1C34                        C6            .byte	$C6
08158 1C35                        C6            .byte	$C6
08159 1C36                        C6            .byte	$C6
08160 1C37                        D6            .byte	$D6
08161 1C38                        D6            .byte	$D6
08162 1C39                        FE            .byte	$FE
08163 1C3A                        7C            .byte	$7C
08164 1C3B                        6C            .byte	$6C
08165 1C3C                        00            .byte	0
08166 1C3D                        00            .byte	0
08167 1C3E                        00            .byte	0
08168                                           ! 1238  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08169 1C3F                        00            .byte	0
08170 1C40                        00            .byte	0
08171 1C41                        C6            .byte	$C6
08172 1C42                        C6            .byte	$C6
08173 1C43                        6C            .byte	$6C
08174 1C44                        38            .byte	$38
08175 1C45                        38            .byte	$38
08176 1C46                        38            .byte	$38
08177 1C47                        6C            .byte	$6C
08178 1C48                        C6            .byte	$C6
08179 1C49                        C6            .byte	$C6
08180 1C4A                        00            .byte	0
08181 1C4B                        00            .byte	0
08182 1C4C                        00            .byte	0
08183                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08184 1C4D                        00            .byte	0
08185 1C4E                        00            .byte	0
08186 1C4F                        66            .byte	$66
08187 1C50                        66            .byte	$66
08188 1C51                        66            .byte	$66
08189 1C52                        66            .byte	$66
08190 1C53                        3C            .byte	$3C
08191 1C54                        18            .byte	$18
08192 1C55                        18            .byte	$18
08193 1C56                        18            .byte	$18
08194 1C57                        3C            .byte	$3C
08195 1C58                        00            .byte	0
08196 1C59                        00            .byte	0
08197 1C5A                        00            .byte	0
08198                                           ! 1240  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08199 1C5B                        00            .byte	0
08200 1C5C                        00            .byte	0
08201 1C5D                        FE            .byte	$FE
08202 1C5E                        C6            .byte	$C6
08203 1C5F                        8C            .byte	$8C
08204 1C60                        18            .byte	$18
08205 1C61                        30            .byte	$30
08206 1C62                        60            .byte	$60
08207 1C63                        C2            .byte	$C2
08208 1C64                        C6            .byte	$C6
08209 1C65                        FE            .byte	$FE
08210 1C66                        00            .byte	0
08211 1C67                        00            .byte	0
08212 1C68                        00            .byte	0
08213                                           ! 1241  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08214 1C69                        00            .byte	0
08215 1C6A                        00            .byte	0
08216 1C6B                        3C            .byte	$3C
08217 1C6C                        30            .byte	$30
08218 1C6D                        30            .byte	$30
08219 1C6E                        30            .byte	$30
08220 1C6F                        30            .byte	$30
08221 1C70                        30            .byte	$30
08222 1C71                        30            .byte	$30
08223 1C72                        30            .byte	$30
08224 1C73                        3C            .byte	$3C
08225 1C74                        00            .byte	0
08226 1C75                        00            .byte	0
08227 1C76                        00            .byte	0
08228                                           ! 1242  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08229 1C77                        00            .byte	0
08230 1C78                        00            .byte	0
08231 1C79                        80            .byte	$80
08232 1C7A                        C0            .byte	$C0
08233 1C7B                        E0            .byte	$E0
08234 1C7C                        70            .byte	$70
08235 1C7D                        38            .byte	$38
08236 1C7E                        1C            .byte	$1C
08237 1C7F                        0E            .byte	$E
08238 1C80                        06            .byte	6
08239 1C81                        02            .byte	2
08240 1C82                        00            .byte	0
08241 1C83                        00            .byte	0
08242 1C84                        00            .byte	0
08243                                           ! 1243  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08244 1C85                        00            .byte	0
08245 1C86                        00            .byte	0
08246 1C87                        3C            .byte	$3C
08247 1C88                        0C            .byte	$C
08248 1C89                        0C            .byte	$C
08249 1C8A                        0C            .byte	$C
08250 1C8B                        0C            .byte	$C
08251 1C8C                        0C            .byte	$C
08252 1C8D                        0C            .byte	$C
08253 1C8E                        0C            .byte	$C
08254 1C8F                        3C            .byte	$3C
08255 1C90                        00            .byte	0
08256 1C91                        00            .byte	0
08257 1C92                        00            .byte	0
08258                                           ! 1244  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08259 1C93                        10            .byte	$10
08260 1C94                        38            .byte	$38
08261 1C95                        6C            .byte	$6C
08262 1C96                        C6            .byte	$C6
08263 1C97                        00            .byte	0
08264 1C98                        00            .byte	0
08265 1C99                        00            .byte	0
08266 1C9A                        00            .byte	0
08267 1C9B                        00            .byte	0
08268 1C9C                        00            .byte	0
08269 1C9D                        00            .byte	0
08270 1C9E                        00            .byte	0
08271 1C9F                        00            .byte	0
08272 1CA0                        00            .byte	0
08273                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08274 1CA1                        00            .byte	0
08275 1CA2                        00            .byte	0
08276 1CA3                        00            .byte	0
08277 1CA4                        00            .byte	0
08278 1CA5                        00            .byte	0
08279 1CA6                        00            .byte	0
08280 1CA7                        00            .byte	0
08281 1CA8                        00            .byte	0
08282 1CA9                        00            .byte	0
08283 1CAA                        00            .byte	0
08284 1CAB                        00            .byte	0
08285 1CAC                        00            .byte	0
08286 1CAD                        FF            .byte	$FF
08287 1CAE                        00            .byte	0
08288                                           ! 1246  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08289 1CAF                        30            .byte	$30
08290 1CB0                        30            .byte	$30
08291 1CB1                        18            .byte	$18
08292 1CB2                        00            .byte	0
08293 1CB3                        00            .byte	0
08294 1CB4                        00            .byte	0
08295 1CB5                        00            .byte	0
08296 1CB6                        00            .byte	0
08297 1CB7                        00            .byte	0
08298 1CB8                        00            .byte	0
08299 1CB9                        00            .byte	0
08300 1CBA                        00            .byte	0
08301 1CBB                        00            .byte	0
08302 1CBC                        00            .byte	0
08303                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08304 1CBD                        00            .byte	0
08305 1CBE                        00            .byte	0
08306 1CBF                        00            .byte	0
08307 1CC0                        00            .byte	0
08308 1CC1                        00            .byte	0
08309 1CC2                        78            .byte	$78
08310 1CC3                        0C            .byte	$C
08311 1CC4                        7C            .byte	$7C
08312 1CC5                        CC            .byte	$CC
08313 1CC6                        CC            .byte	$CC
08314 1CC7                        76            .byte	$76
08315 1CC8                        00            .byte	0
08316 1CC9                        00            .byte	0
08317 1CCA                        00            .byte	0
08318                                           ! 1248  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08319 1CCB                        00            .byte	0
08320 1CCC                        00            .byte	0
08321 1CCD                        E0            .byte	$E0
08322 1CCE                        60            .byte	$60
08323 1CCF                        60            .byte	$60
08324 1CD0                        78            .byte	$78
08325 1CD1                        6C            .byte	$6C
08326 1CD2                        66            .byte	$66
08327 1CD3                        66            .byte	$66
08328 1CD4                        66            .byte	$66
08329 1CD5                        7C            .byte	$7C
08330 1CD6                        00            .byte	0
08331 1CD7                        00            .byte	0
08332 1CD8                        00            .byte	0
08333                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08334 1CD9                        00            .byte	0
08335 1CDA                        00            .byte	0
08336 1CDB                        00            .byte	0
08337 1CDC                        00            .byte	0
08338 1CDD                        00            .byte	0
08339 1CDE                        7C            .byte	$7C
08340 1CDF                        C6            .byte	$C6
08341 1CE0                        C0            .byte	$C0
08342 1CE1                        C0            .byte	$C0
08343 1CE2                        C6            .byte	$C6
08344 1CE3                        7C            .byte	$7C
08345 1CE4                        00            .byte	0
08346 1CE5                        00            .byte	0
08347 1CE6                        00            .byte	0
08348                                           ! 1250  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x0
08349 1CE7                        00            .byte	0
08350 1CE8                        00            .byte	0
08351 1CE9                        1C            .byte	$1C
08352 1CEA                        0C            .byte	$C
08353 1CEB                        0C            .byte	$C
08354 1CEC                        3C            .byte	$3C
08355 1CED                        6C            .byte	$6C
08356 1CEE                        CC            .byte	$CC
08357 1CEF                        CC            .byte	$CC
08358 1CF0                        CC            .byte	$CC
08359 1CF1                        76            .byte	$76
08360 1CF2                        00            .byte	0
08361                                           ! 1250 0, 0x00,
08362 1CF3                        00            .byte	0
08363 1CF4                        00            .byte	0
08364                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08365 1CF5                        00            .byte	0
08366 1CF6                        00            .byte	0
08367 1CF7                        00            .byte	0
08368 1CF8                        00            .byte	0
08369 1CF9                        00            .byte	0
08370 1CFA                        7C            .byte	$7C
08371 1CFB                        C6            .byte	$C6
08372 1CFC                        FE            .byte	$FE
08373 1CFD                        C0            .byte	$C0
08374 1CFE                        C6            .byte	$C6
08375 1CFF                        7C            .byte	$7C
08376 1D00                        00            .byte	0
08377 1D01                        00            .byte	0
08378 1D02                        00            .byte	0
08379                                           ! 1252  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08380 1D03                        00            .byte	0
08381 1D04                        00            .byte	0
08382 1D05                        38            .byte	$38
08383 1D06                        6C            .byte	$6C
08384 1D07                        64            .byte	$64
08385 1D08                        60            .byte	$60
08386 1D09                        F0            .byte	$F0
08387 1D0A                        60            .byte	$60
08388 1D0B                        60            .byte	$60
08389 1D0C                        60            .byte	$60
08390 1D0D                        F0            .byte	$F0
08391 1D0E                        00            .byte	0
08392 1D0F                        00            .byte	0
08393 1D10                        00            .byte	0
08394                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08395 1D11                        00            .byte	0
08396 1D12                        00            .byte	0
08397 1D13                        00            .byte	0
08398 1D14                        00            .byte	0
08399 1D15                        00            .byte	0
08400 1D16                        76            .byte	$76
08401 1D17                        CC            .byte	$CC
08402 1D18                        CC            .byte	$CC
08403 1D19                        CC            .byte	$CC
08404 1D1A                        7C            .byte	$7C
08405 1D1B                        0C            .byte	$C
08406 1D1C                        CC            .byte	$CC
08407 1D1D                        78            .byte	$78
08408 1D1E                        00            .byte	0
08409                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08410 1D1F                        00            .byte	0
08411 1D20                        00            .byte	0
08412 1D21                        E0            .byte	$E0
08413 1D22                        60            .byte	$60
08414 1D23                        60            .byte	$60
08415 1D24                        6C            .byte	$6C
08416 1D25                        76            .byte	$76
08417 1D26                        66            .byte	$66
08418 1D27                        66            .byte	$66
08419 1D28                        66            .byte	$66
08420 1D29                        E6            .byte	$E6
08421 1D2A                        00            .byte	0
08422 1D2B                        00            .byte	0
08423 1D2C                        00            .byte	0
08424                                           ! 1255  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08425 1D2D                        00            .byte	0
08426 1D2E                        00            .byte	0
08427 1D2F                        18            .byte	$18
08428 1D30                        18            .byte	$18
08429 1D31                        00            .byte	0
08430 1D32                        38            .byte	$38
08431 1D33                        18            .byte	$18
08432 1D34                        18            .byte	$18
08433 1D35                        18            .byte	$18
08434 1D36                        18            .byte	$18
08435 1D37                        3C            .byte	$3C
08436 1D38                        00            .byte	0
08437 1D39                        00            .byte	0
08438 1D3A                        00            .byte	0
08439                                           ! 1256  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08440 1D3B                        00            .byte	0
08441 1D3C                        00            .byte	0
08442 1D3D                        06            .byte	6
08443 1D3E                        06            .byte	6
08444 1D3F                        00            .byte	0
08445 1D40                        0E            .byte	$E
08446 1D41                        06            .byte	6
08447 1D42                        06            .byte	6
08448 1D43                        06            .byte	6
08449 1D44                        06            .byte	6
08450 1D45                        66            .byte	$66
08451 1D46                        66            .byte	$66
08452 1D47                        3C            .byte	$3C
08453 1D48                        00            .byte	0
08454                                           ! 1257  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08455 1D49                        00            .byte	0
08456 1D4A                        00            .byte	0
08457 1D4B                        E0            .byte	$E0
08458 1D4C                        60            .byte	$60
08459 1D4D                        60            .byte	$60
08460 1D4E                        66            .byte	$66
08461 1D4F                        6C            .byte	$6C
08462 1D50                        78            .byte	$78
08463 1D51                        6C            .byte	$6C
08464 1D52                        66            .byte	$66
08465 1D53                        E6            .byte	$E6
08466 1D54                        00            .byte	0
08467 1D55                        00            .byte	0
08468 1D56                        00            .byte	0
08469                                           ! 1258  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08470 1D57                        00            .byte	0
08471 1D58                        00            .byte	0
08472 1D59                        38            .byte	$38
08473 1D5A                        18            .byte	$18
08474 1D5B                        18            .byte	$18
08475 1D5C                        18            .byte	$18
08476 1D5D                        18            .byte	$18
08477 1D5E                        18            .byte	$18
08478 1D5F                        18            .byte	$18
08479 1D60                        18            .byte	$18
08480 1D61                        3C            .byte	$3C
08481 1D62                        00            .byte	0
08482 1D63                        00            .byte	0
08483 1D64                        00            .byte	0
08484                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08485 1D65                        00            .byte	0
08486 1D66                        00            .byte	0
08487 1D67                        00            .byte	0
08488 1D68                        00            .byte	0
08489 1D69                        00            .byte	0
08490 1D6A                        EC            .byte	$EC
08491 1D6B                        FE            .byte	$FE
08492 1D6C                        D6            .byte	$D6
08493 1D6D                        D6            .byte	$D6
08494 1D6E                        D6            .byte	$D6
08495 1D6F                        C6            .byte	$C6
08496 1D70                        00            .byte	0
08497 1D71                        00            .byte	0
08498 1D72                        00            .byte	0
08499                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08500 1D73                        00            .byte	0
08501 1D74                        00            .byte	0
08502 1D75                        00            .byte	0
08503 1D76                        00            .byte	0
08504 1D77                        00            .byte	0
08505 1D78                        DC            .byte	$DC
08506 1D79                        66            .byte	$66
08507 1D7A                        66            .byte	$66
08508 1D7B                        66            .byte	$66
08509 1D7C                        66            .byte	$66
08510 1D7D                        66            .byte	$66
08511 1D7E                        00            .byte	0
08512 1D7F                        00            .byte	0
08513 1D80                        00            .byte	0
08514                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08515 1D81                        00            .byte	0
08516 1D82                        00            .byte	0
08517 1D83                        00            .byte	0
08518 1D84                        00            .byte	0
08519 1D85                        00            .byte	0
08520 1D86                        7C            .byte	$7C
08521 1D87                        C6            .byte	$C6
08522 1D88                        C6            .byte	$C6
08523 1D89                        C6            .byte	$C6
08524 1D8A                        C6            .byte	$C6
08525 1D8B                        7C            .byte	$7C
08526 1D8C                        00            .byte	0
08527 1D8D                        00            .byte	0
08528 1D8E                        00            .byte	0
08529                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08530 1D8F                        00            .byte	0
08531 1D90                        00            .byte	0
08532 1D91                        00            .byte	0
08533 1D92                        00            .byte	0
08534 1D93                        00            .byte	0
08535 1D94                        DC            .byte	$DC
08536 1D95                        66            .byte	$66
08537 1D96                        66            .byte	$66
08538 1D97                        66            .byte	$66
08539 1D98                        7C            .byte	$7C
08540 1D99                        60            .byte	$60
08541 1D9A                        60            .byte	$60
08542 1D9B                        F0            .byte	$F0
08543 1D9C                        00            .byte	0
08544                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08545 1D9D                        00            .byte	0
08546 1D9E                        00            .byte	0
08547 1D9F                        00            .byte	0
08548 1DA0                        00            .byte	0
08549 1DA1                        00            .byte	0
08550 1DA2                        76            .byte	$76
08551 1DA3                        CC            .byte	$CC
08552 1DA4                        CC            .byte	$CC
08553 1DA5                        CC            .byte	$CC
08554 1DA6                        7C            .byte	$7C
08555 1DA7                        0C            .byte	$C
08556 1DA8                        0C            .byte	$C
08557 1DA9                        1E            .byte	$1E
08558 1DAA                        00            .byte	0
08559                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08560 1DAB                        00            .byte	0
08561 1DAC                        00            .byte	0
08562 1DAD                        00            .byte	0
08563 1DAE                        00            .byte	0
08564 1DAF                        00            .byte	0
08565 1DB0                        DC            .byte	$DC
08566 1DB1                        76            .byte	$76
08567 1DB2                        66            .byte	$66
08568 1DB3                        60            .byte	$60
08569 1DB4                        60            .byte	$60
08570 1DB5                        F0            .byte	$F0
08571 1DB6                        00            .byte	0
08572 1DB7                        00            .byte	0
08573 1DB8                        00            .byte	0
08574                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08575 1DB9                        00            .byte	0
08576 1DBA                        00            .byte	0
08577 1DBB                        00            .byte	0
08578 1DBC                        00            .byte	0
08579 1DBD                        00            .byte	0
08580 1DBE                        7C            .byte	$7C
08581 1DBF                        C6            .byte	$C6
08582 1DC0                        70            .byte	$70
08583 1DC1                        1C            .byte	$1C
08584 1DC2                        C6            .byte	$C6
08585 1DC3                        7C            .byte	$7C
08586 1DC4                        00            .byte	0
08587 1DC5                        00            .byte	0
08588 1DC6                        00            .byte	0
08589                                           ! 1266  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08590 1DC7                        00            .byte	0
08591 1DC8                        00            .byte	0
08592 1DC9                        10            .byte	$10
08593 1DCA                        30            .byte	$30
08594 1DCB                        30            .byte	$30
08595 1DCC                        FC            .byte	$FC
08596 1DCD                        30            .byte	$30
08597 1DCE                        30            .byte	$30
08598 1DCF                        30            .byte	$30
08599 1DD0                        36            .byte	$36
08600 1DD1                        1C            .byte	$1C
08601 1DD2                        00            .byte	0
08602 1DD3                        00            .byte	0
08603 1DD4                        00            .byte	0
08604                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08605 1DD5                        00            .byte	0
08606 1DD6                        00            .byte	0
08607 1DD7                        00            .byte	0
08608 1DD8                        00            .byte	0
08609 1DD9                        00            .byte	0
08610 1DDA                        CC            .byte	$CC
08611 1DDB                        CC            .byte	$CC
08612 1DDC                        CC            .byte	$CC
08613 1DDD                        CC            .byte	$CC
08614 1DDE                        CC            .byte	$CC
08615 1DDF                        76            .byte	$76
08616 1DE0                        00            .byte	0
08617 1DE1                        00            .byte	0
08618 1DE2                        00            .byte	0
08619                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08620 1DE3                        00            .byte	0
08621 1DE4                        00            .byte	0
08622 1DE5                        00            .byte	0
08623 1DE6                        00            .byte	0
08624 1DE7                        00            .byte	0
08625 1DE8                        66            .byte	$66
08626 1DE9                        66            .byte	$66
08627 1DEA                        66            .byte	$66
08628 1DEB                        66            .byte	$66
08629 1DEC                        3C            .byte	$3C
08630 1DED                        18            .byte	$18
08631 1DEE                        00            .byte	0
08632 1DEF                        00            .byte	0
08633 1DF0                        00            .byte	0
08634                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08635 1DF1                        00            .byte	0
08636 1DF2                        00            .byte	0
08637 1DF3                        00            .byte	0
08638 1DF4                        00            .byte	0
08639 1DF5                        00            .byte	0
08640 1DF6                        C6            .byte	$C6
08641 1DF7                        C6            .byte	$C6
08642 1DF8                        D6            .byte	$D6
08643 1DF9                        D6            .byte	$D6
08644 1DFA                        FE            .byte	$FE
08645 1DFB                        6C            .byte	$6C
08646 1DFC                        00            .byte	0
08647 1DFD                        00            .byte	0
08648 1DFE                        00            .byte	0
08649                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08650 1DFF                        00            .byte	0
08651 1E00                        00            .byte	0
08652 1E01                        00            .byte	0
08653 1E02                        00            .byte	0
08654 1E03                        00            .byte	0
08655 1E04                        C6            .byte	$C6
08656 1E05                        6C            .byte	$6C
08657 1E06                        38            .byte	$38
08658 1E07                        38            .byte	$38
08659 1E08                        6C            .byte	$6C
08660 1E09                        C6            .byte	$C6
08661 1E0A                        00            .byte	0
08662 1E0B                        00            .byte	0
08663 1E0C                        00            .byte	0
08664                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08665 1E0D                        00            .byte	0
08666 1E0E                        00            .byte	0
08667 1E0F                        00            .byte	0
08668 1E10                        00            .byte	0
08669 1E11                        00            .byte	0
08670 1E12                        C6            .byte	$C6
08671 1E13                        C6            .byte	$C6
08672 1E14                        C6            .byte	$C6
08673 1E15                        C6            .byte	$C6
08674 1E16                        7E            .byte	$7E
08675 1E17                        06            .byte	6
08676 1E18                        0C            .byte	$C
08677 1E19                        F8            .byte	$F8
08678 1E1A                        00            .byte	0
08679                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08680 1E1B                        00            .byte	0
08681 1E1C                        00            .byte	0
08682 1E1D                        00            .byte	0
08683 1E1E                        00            .byte	0
08684 1E1F                        00            .byte	0
08685 1E20                        FE            .byte	$FE
08686 1E21                        CC            .byte	$CC
08687 1E22                        18            .byte	$18
08688 1E23                        30            .byte	$30
08689 1E24                        66            .byte	$66
08690 1E25                        FE            .byte	$FE
08691 1E26                        00            .byte	0
08692 1E27                        00            .byte	0
08693 1E28                        00            .byte	0
08694                                           ! 1273  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08695 1E29                        00            .byte	0
08696 1E2A                        00            .byte	0
08697 1E2B                        0E            .byte	$E
08698 1E2C                        18            .byte	$18
08699 1E2D                        18            .byte	$18
08700 1E2E                        18            .byte	$18
08701 1E2F                        70            .byte	$70
08702 1E30                        18            .byte	$18
08703 1E31                        18            .byte	$18
08704 1E32                        18            .byte	$18
08705 1E33                        0E            .byte	$E
08706 1E34                        00            .byte	0
08707 1E35                        00            .byte	0
08708 1E36                        00            .byte	0
08709                                           ! 1274  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08710 1E37                        00            .byte	0
08711 1E38                        00            .byte	0
08712 1E39                        18            .byte	$18
08713 1E3A                        18            .byte	$18
08714 1E3B                        18            .byte	$18
08715 1E3C                        18            .byte	$18
08716 1E3D                        00            .byte	0
08717 1E3E                        18            .byte	$18
08718 1E3F                        18            .byte	$18
08719 1E40                        18            .byte	$18
08720 1E41                        18            .byte	$18
08721 1E42                        00            .byte	0
08722 1E43                        00            .byte	0
08723                                           ! 1274 
08724 1E44                        00            .byte	0
08725                                           ! 1275  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08726 1E45                        00            .byte	0
08727 1E46                        00            .byte	0
08728 1E47                        70            .byte	$70
08729 1E48                        18            .byte	$18
08730 1E49                        18            .byte	$18
08731 1E4A                        18            .byte	$18
08732 1E4B                        0E            .byte	$E
08733 1E4C                        18            .byte	$18
08734 1E4D                        18            .byte	$18
08735 1E4E                        18            .byte	$18
08736 1E4F                        70            .byte	$70
08737 1E50                        00            .byte	0
08738 1E51                        00            .byte	0
08739 1E52                        00            .byte	0
08740                                           ! 1276  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08741 1E53                        00            .byte	0
08742 1E54                        00            .byte	0
08743 1E55                        76            .byte	$76
08744 1E56                        DC            .byte	$DC
08745 1E57                        00            .byte	0
08746 1E58                        00            .byte	0
08747 1E59                        00            .byte	0
08748 1E5A                        00            .byte	0
08749 1E5B                        00            .byte	0
08750 1E5C                        00            .byte	0
08751 1E5D                        00            .byte	0
08752 1E5E                        00            .byte	0
08753 1E5F                        00            .byte	0
08754 1E60                        00            .byte	0
08755                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08756 1E61                        00            .byte	0
08757 1E62                        00            .byte	0
08758 1E63                        00            .byte	0
08759 1E64                        00            .byte	0
08760 1E65                        10            .byte	$10
08761 1E66                        38            .byte	$38
08762 1E67                        6C            .byte	$6C
08763 1E68                        C6            .byte	$C6
08764 1E69                        C6            .byte	$C6
08765 1E6A                        FE            .byte	$FE
08766 1E6B                        00            .byte	0
08767 1E6C                        00            .byte	0
08768 1E6D                        00            .byte	0
08769 1E6E                        00            .byte	0
08770                                           ! 1278  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08771 1E6F                        00            .byte	0
08772 1E70                        00            .byte	0
08773 1E71                        3C            .byte	$3C
08774 1E72                        66            .byte	$66
08775 1E73                        C2            .byte	$C2
08776 1E74                        C0            .byte	$C0
08777 1E75                        C0            .byte	$C0
08778 1E76                        C2            .byte	$C2
08779 1E77                        66            .byte	$66
08780 1E78                        3C            .byte	$3C
08781 1E79                        0C            .byte	$C
08782 1E7A                        06            .byte	6
08783 1E7B                        7C            .byte	$7C
08784 1E7C                        00            .byte	0
08785                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08786 1E7D                        00            .byte	0
08787 1E7E                        00            .byte	0
08788 1E7F                        CC            .byte	$CC
08789 1E80                        CC            .byte	$CC
08790 1E81                        00            .byte	0
08791 1E82                        CC            .byte	$CC
08792 1E83                        CC            .byte	$CC
08793 1E84                        CC            .byte	$CC
08794 1E85                        CC            .byte	$CC
08795 1E86                        CC            .byte	$CC
08796 1E87                        76            .byte	$76
08797 1E88                        00            .byte	0
08798 1E89                        00            .byte	0
08799 1E8A                        00            .byte	0
08800                                           ! 1280  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08801 1E8B                        00            .byte	0
08802 1E8C                        0C            .byte	$C
08803 1E8D                        18            .byte	$18
08804 1E8E                        30            .byte	$30
08805 1E8F                        00            .byte	0
08806 1E90                        7C            .byte	$7C
08807 1E91                        C6            .byte	$C6
08808 1E92                        FE            .byte	$FE
08809 1E93                        C0            .byte	$C0
08810 1E94                        C6            .byte	$C6
08811 1E95                        7C            .byte	$7C
08812 1E96                        00            .byte	0
08813 1E97                        00            .byte	0
08814 1E98                        00            .byte	0
08815                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08816 1E99                        00            .byte	0
08817 1E9A                        10            .byte	$10
08818 1E9B                        38            .byte	$38
08819 1E9C                        6C            .byte	$6C
08820 1E9D                        00            .byte	0
08821 1E9E                        78            .byte	$78
08822 1E9F                        0C            .byte	$C
08823 1EA0                        7C            .byte	$7C
08824 1EA1                        CC            .byte	$CC
08825 1EA2                        CC            .byte	$CC
08826 1EA3                        76            .byte	$76
08827 1EA4                        00            .byte	0
08828 1EA5                        00            .byte	0
08829 1EA6                        00            .byte	0
08830                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08831 1EA7                        00            .byte	0
08832 1EA8                        00            .byte	0
08833 1EA9                        CC            .byte	$CC
08834 1EAA                        CC            .byte	$CC
08835 1EAB                        00            .byte	0
08836 1EAC                        78            .byte	$78
08837 1EAD                        0C            .byte	$C
08838 1EAE                        7C            .byte	$7C
08839 1EAF                        CC            .byte	$CC
08840 1EB0                        CC            .byte	$CC
08841 1EB1                        76            .byte	$76
08842 1EB2                        00            .byte	0
08843 1EB3                        00            .byte	0
08844 1EB4                        00            .byte	0
08845                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08846 1EB5                        00            .byte	0
08847 1EB6                        60            .byte	$60
08848 1EB7                        30            .byte	$30
08849 1EB8                        18            .byte	$18
08850 1EB9                        00            .byte	0
08851 1EBA                        78            .byte	$78
08852 1EBB                        0C            .byte	$C
08853 1EBC                        7C            .byte	$7C
08854 1EBD                        CC            .byte	$CC
08855 1EBE                        CC            .byte	$CC
08856 1EBF                        76            .byte	$76
08857 1EC0                        00            .byte	0
08858 1EC1                        00            .byte	0
08859 1EC2                        00            .byte	0
08860                                           ! 1284  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08861 1EC3                        00            .byte	0
08862 1EC4                        38            .byte	$38
08863 1EC5                        6C            .byte	$6C
08864 1EC6                        38            .byte	$38
08865 1EC7                        00            .byte	0
08866 1EC8                        78            .byte	$78
08867 1EC9                        0C            .byte	$C
08868 1ECA                        7C            .byte	$7C
08869 1ECB                        CC            .byte	$CC
08870 1ECC                        CC            .byte	$CC
08871 1ECD                        76            .byte	$76
08872 1ECE                        00            .byte	0
08873 1ECF                        00            .byte	0
08874 1ED0                        00            .byte	0
08875                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08876 1ED1                        00            .byte	0
08877 1ED2                        00            .byte	0
08878 1ED3                        00            .byte	0
08879 1ED4                        00            .byte	0
08880 1ED5                        3C            .byte	$3C
08881 1ED6                        66            .byte	$66
08882 1ED7                        60            .byte	$60
08883 1ED8                        66            .byte	$66
08884 1ED9                        3C            .byte	$3C
08885 1EDA                        0C            .byte	$C
08886 1EDB                        06            .byte	6
08887 1EDC                        3C            .byte	$3C
08888 1EDD                        00            .byte	0
08889 1EDE                        00            .byte	0
08890                                           ! 1286  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08891 1EDF                        00            .byte	0
08892 1EE0                        10            .byte	$10
08893 1EE1                        38            .byte	$38
08894 1EE2                        6C            .byte	$6C
08895 1EE3                        00            .byte	0
08896 1EE4                        7C            .byte	$7C
08897 1EE5                        C6            .byte	$C6
08898 1EE6                        FE            .byte	$FE
08899 1EE7                        C0            .byte	$C0
08900 1EE8                        C6            .byte	$C6
08901 1EE9                        7C            .byte	$7C
08902 1EEA                        00            .byte	0
08903 1EEB                        00            .byte	0
08904 1EEC                        00            .byte	0
08905                                           ! 1287  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08906 1EED                        00            .byte	0
08907 1EEE                        00            .byte	0
08908 1EEF                        CC            .byte	$CC
08909 1EF0                        CC            .byte	$CC
08910 1EF1                        00            .byte	0
08911 1EF2                        7C            .byte	$7C
08912 1EF3                        C6            .byte	$C6
08913 1EF4                        FE            .byte	$FE
08914 1EF5                        C0            .byte	$C0
08915 1EF6                        C6            .byte	$C6
08916 1EF7                        7C            .byte	$7C
08917 1EF8                        00            .byte	0
08918 1EF9                        00            .byte	0
08919 1EFA                        00            .byte	0
08920                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08921 1EFB                        00            .byte	0
08922 1EFC                        60            .byte	$60
08923 1EFD                        30            .byte	$30
08924 1EFE                        18            .byte	$18
08925 1EFF                        00            .byte	0
08926 1F00                        7C            .byte	$7C
08927 1F01                        C6            .byte	$C6
08928 1F02                        FE            .byte	$FE
08929 1F03                        C0            .byte	$C0
08930 1F04                        C6            .byte	$C6
08931 1F05                        7C            .byte	$7C
08932 1F06                        00            .byte	0
08933 1F07                        00            .byte	0
08934 1F08                        00            .byte	0
08935                                           ! 1289  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08936 1F09                        00            .byte	0
08937 1F0A                        00            .byte	0
08938 1F0B                        66            .byte	$66
08939 1F0C                        66            .byte	$66
08940 1F0D                        00            .byte	0
08941 1F0E                        38            .byte	$38
08942 1F0F                        18            .byte	$18
08943 1F10                        18            .byte	$18
08944 1F11                        18            .byte	$18
08945 1F12                        18            .byte	$18
08946 1F13                        3C            .byte	$3C
08947 1F14                        00            .byte	0
08948 1F15                        00            .byte	0
08949 1F16                        00            .byte	0
08950                                           ! 1290  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08951 1F17                        00            .byte	0
08952 1F18                        18            .byte	$18
08953 1F19                        3C            .byte	$3C
08954 1F1A                        66            .byte	$66
08955 1F1B                        00            .byte	0
08956 1F1C                        38            .byte	$38
08957 1F1D                        18            .byte	$18
08958 1F1E                        18            .byte	$18
08959 1F1F                        18            .byte	$18
08960 1F20                        18            .byte	$18
08961 1F21                        3C            .byte	$3C
08962 1F22                        00            .byte	0
08963 1F23                        00            .byte	0
08964 1F24                        00            .byte	0
08965                                           ! 1291  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08966 1F25                        00            .byte	0
08967 1F26                        60            .byte	$60
08968 1F27                        30            .byte	$30
08969 1F28                        18            .byte	$18
08970 1F29                        00            .byte	0
08971 1F2A                        38            .byte	$38
08972 1F2B                        18            .byte	$18
08973 1F2C                        18            .byte	$18
08974 1F2D                        18            .byte	$18
08975 1F2E                        18            .byte	$18
08976 1F2F                        3C            .byte	$3C
08977 1F30                        00            .byte	0
08978 1F31                        00            .byte	0
08979 1F32                        00            .byte	0
08980                                           ! 1292  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08981 1F33                        00            .byte	0
08982 1F34                        C6            .byte	$C6
08983 1F35                        C6            .byte	$C6
08984 1F36                        10            .byte	$10
08985 1F37                        38            .byte	$38
08986 1F38                        6C            .byte	$6C
08987 1F39                        C6            .byte	$C6
08988 1F3A                        C6            .byte	$C6
08989 1F3B                        FE            .byte	$FE
08990 1F3C                        C6            .byte	$C6
08991 1F3D                        C6            .byte	$C6
08992 1F3E                        00            .byte	0
08993 1F3F                        00            .byte	0
08994 1F40                        00            .byte	0
08995                                           ! 1293  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08996 1F41                        38            .byte	$38
08997 1F42                        6C            .byte	$6C
08998 1F43                        38            .byte	$38
08999 1F44                        00            .byte	0
09000 1F45                        38            .byte	$38
09001 1F46                        6C            .byte	$6C
09002 1F47                        C6            .byte	$C6
09003 1F48                        C6            .byte	$C6
09004 1F49                        FE            .byte	$FE
09005 1F4A                        C6            .byte	$C6
09006 1F4B                        C6            .byte	$C6
09007 1F4C                        00            .byte	0
09008 1F4D                        00            .byte	0
09009 1F4E                        00            .byte	0
09010                                           ! 1294  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09011 1F4F                        18            .byte	$18
09012 1F50                        30            .byte	$30
09013 1F51                        60            .byte	$60
09014 1F52                        00            .byte	0
09015 1F53                        FE            .byte	$FE
09016 1F54                        66            .byte	$66
09017 1F55                        60            .byte	$60
09018 1F56                        7C            .byte	$7C
09019 1F57                        60            .byte	$60
09020 1F58                        66            .byte	$66
09021 1F59                        FE            .byte	$FE
09022 1F5A                        00            .byte	0
09023 1F5B                        00            .byte	0
09024 1F5C                        00            .byte	0
09025                                           ! 1295  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09026 1F5D                        00            .byte	0
09027 1F5E                        00            .byte	0
09028 1F5F                        00            .byte	0
09029 1F60                        00            .byte	0
09030 1F61                        CC            .byte	$CC
09031 1F62                        76            .byte	$76
09032 1F63                        36            .byte	$36
09033 1F64                        7E            .byte	$7E
09034 1F65                        D8            .byte	$D8
09035 1F66                        D8            .byte	$D8
09036 1F67                        6E            .byte	$6E
09037 1F68                        00            .byte	0
09038 1F69                        00            .byte	0
09039 1F6A                        00            .byte	0
09040                                           ! 1296  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09041 1F6B                        00            .byte	0
09042 1F6C                        00            .byte	0
09043 1F6D                        3E            .byte	$3E
09044 1F6E                        6C            .byte	$6C
09045 1F6F                        CC            .byte	$CC
09046 1F70                        CC            .byte	$CC
09047 1F71                        FE            .byte	$FE
09048 1F72                        CC            .byte	$CC
09049 1F73                        CC            .byte	$CC
09050 1F74                        CC            .byte	$CC
09051 1F75                        CE            .byte	$CE
09052 1F76                        00            .byte	0
09053 1F77                        00            .byte	0
09054 1F78                        00            .byte	0
09055                                           ! 1297  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09056 1F79                        00            .byte	0
09057 1F7A                        10            .byte	$10
09058 1F7B                        38            .byte	$38
09059 1F7C                        6C            .byte	$6C
09060 1F7D                        00            .byte	0
09061 1F7E                        7C            .byte	$7C
09062 1F7F                        C6            .byte	$C6
09063 1F80                        C6            .byte	$C6
09064 1F81                        C6            .byte	$C6
09065 1F82                        C6            .byte	$C6
09066 1F83                        7C            .byte	$7C
09067 1F84                        00            .byte	0
09068 1F85                        00            .byte	0
09069 1F86                        00            .byte	0
09070                                           ! 1298  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09071 1F87                        00            .byte	0
09072 1F88                        00            .byte	0
09073 1F89                        C6            .byte	$C6
09074 1F8A                        C6            .byte	$C6
09075 1F8B                        00            .byte	0
09076 1F8C                        7C            .byte	$7C
09077 1F8D                        C6            .byte	$C6
09078 1F8E                        C6            .byte	$C6
09079 1F8F                        C6            .byte	$C6
09080 1F90                        C6            .byte	$C6
09081 1F91                        7C            .byte	$7C
09082 1F92                        00            .byte	0
09083 1F93                        00            .byte	0
09084 1F94                        00            .byte	0
09085                                           ! 1299  0x00, 
09086 1F95                        00            .byte	0
09087                                           ! 1299 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09088 1F96                        60            .byte	$60
09089 1F97                        30            .byte	$30
09090 1F98                        18            .byte	$18
09091 1F99                        00            .byte	0
09092 1F9A                        7C            .byte	$7C
09093 1F9B                        C6            .byte	$C6
09094 1F9C                        C6            .byte	$C6
09095 1F9D                        C6            .byte	$C6
09096 1F9E                        C6            .byte	$C6
09097 1F9F                        7C            .byte	$7C
09098 1FA0                        00            .byte	0
09099 1FA1                        00            .byte	0
09100 1FA2                        00            .byte	0
09101                                           ! 1300  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09102 1FA3                        00            .byte	0
09103 1FA4                        30            .byte	$30
09104 1FA5                        78            .byte	$78
09105 1FA6                        CC            .byte	$CC
09106 1FA7                        00            .byte	0
09107 1FA8                        CC            .byte	$CC
09108 1FA9                        CC            .byte	$CC
09109 1FAA                        CC            .byte	$CC
09110 1FAB                        CC            .byte	$CC
09111 1FAC                        CC            .byte	$CC
09112 1FAD                        76            .byte	$76
09113 1FAE                        00            .byte	0
09114 1FAF                        00            .byte	0
09115 1FB0                        00            .byte	0
09116                                           ! 1301  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09117 1FB1                        00            .byte	0
09118 1FB2                        60            .byte	$60
09119 1FB3                        30            .byte	$30
09120 1FB4                        18            .byte	$18
09121 1FB5                        00            .byte	0
09122 1FB6                        CC            .byte	$CC
09123 1FB7                        CC            .byte	$CC
09124 1FB8                        CC            .byte	$CC
09125 1FB9                        CC            .byte	$CC
09126 1FBA                        CC            .byte	$CC
09127 1FBB                        76            .byte	$76
09128 1FBC                        00            .byte	0
09129 1FBD                        00            .byte	0
09130 1FBE                        00            .byte	0
09131                                           ! 1302  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09132 1FBF                        00            .byte	0
09133 1FC0                        00            .byte	0
09134 1FC1                        C6            .byte	$C6
09135 1FC2                        C6            .byte	$C6
09136 1FC3                        00            .byte	0
09137 1FC4                        C6            .byte	$C6
09138 1FC5                        C6            .byte	$C6
09139 1FC6                        C6            .byte	$C6
09140 1FC7                        C6            .byte	$C6
09141 1FC8                        7E            .byte	$7E
09142 1FC9                        06            .byte	6
09143 1FCA                        0C            .byte	$C
09144 1FCB                        78            .byte	$78
09145 1FCC                        00            .byte	0
09146                                           ! 1303  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09147 1FCD                        00            .byte	0
09148 1FCE                        C6            .byte	$C6
09149 1FCF                        C6            .byte	$C6
09150 1FD0                        38            .byte	$38
09151 1FD1                        6C            .byte	$6C
09152 1FD2                        C6            .byte	$C6
09153 1FD3                        C6            .byte	$C6
09154 1FD4                        C6            .byte	$C6
09155 1FD5                        C6            .byte	$C6
09156 1FD6                        6C            .byte	$6C
09157 1FD7                        38            .byte	$38
09158 1FD8                        00            .byte	0
09159 1FD9                        00            .byte	0
09160 1FDA                        00            .byte	0
09161                                           ! 1304  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09162 1FDB                        00            .byte	0
09163 1FDC                        C6            .byte	$C6
09164 1FDD                        C6            .byte	$C6
09165 1FDE                        00            .byte	0
09166 1FDF                        C6            .byte	$C6
09167 1FE0                        C6            .byte	$C6
09168 1FE1                        C6            .byte	$C6
09169 1FE2                        C6            .byte	$C6
09170 1FE3                        C6            .byte	$C6
09171 1FE4                        C6            .byte	$C6
09172 1FE5                        7C            .byte	$7C
09173 1FE6                        00            .byte	0
09174 1FE7                        00            .byte	0
09175 1FE8                        00            .byte	0
09176                                           ! 1305  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09177 1FE9                        00            .byte	0
09178 1FEA                        18            .byte	$18
09179 1FEB                        18            .byte	$18
09180 1FEC                        3C            .byte	$3C
09181 1FED                        66            .byte	$66
09182 1FEE                        60            .byte	$60
09183 1FEF                        60            .byte	$60
09184 1FF0                        66            .byte	$66
09185 1FF1                        3C            .byte	$3C
09186 1FF2                        18            .byte	$18
09187 1FF3                        18            .byte	$18
09188 1FF4                        00            .byte	0
09189 1FF5                        00            .byte	0
09190 1FF6                        00            .byte	0
09191                                           ! 1306  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09192 1FF7                        00            .byte	0
09193 1FF8                        38            .byte	$38
09194 1FF9                        6C            .byte	$6C
09195 1FFA                        64            .byte	$64
09196 1FFB                        60            .byte	$60
09197 1FFC                        F0            .byte	$F0
09198 1FFD                        60            .byte	$60
09199 1FFE                        60            .byte	$60
09200 1FFF                        60            .byte	$60
09201 2000                        E6            .byte	$E6
09202 2001                        FC            .byte	$FC
09203 2002                        00            .byte	0
09204 2003                        00            .byte	0
09205 2004                        00            .byte	0
09206                                           ! 1307  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09207 2005                        00            .byte	0
09208 2006                        00            .byte	0
09209 2007                        66            .byte	$66
09210 2008                        66            .byte	$66
09211 2009                        3C            .byte	$3C
09212 200A                        18            .byte	$18
09213 200B                        7E            .byte	$7E
09214 200C                        18            .byte	$18
09215 200D                        7E            .byte	$7E
09216 200E                        18            .byte	$18
09217 200F                        18            .byte	$18
09218 2010                        00            .byte	0
09219 2011                        00            .byte	0
09220 2012                        00            .byte	0
09221                                           ! 1308  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09222 2013                        00            .byte	0
09223 2014                        F8            .byte	$F8
09224 2015                        CC            .byte	$CC
09225 2016                        CC            .byte	$CC
09226 2017                        F8            .byte	$F8
09227 2018                        C4            .byte	$C4
09228 2019                        CC            .byte	$CC
09229 201A                        DE            .byte	$DE
09230 201B                        CC            .byte	$CC
09231 201C                        CC            .byte	$CC
09232 201D                        C6            .byte	$C6
09233 201E                        00            .byte	0
09234 201F                        00            .byte	0
09235 2020                        00            .byte	0
09236                                           ! 1309  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09237 2021                        00            .byte	0
09238 2022                        0E            .byte	$E
09239 2023                        1B            .byte	$1B
09240 2024                        18            .byte	$18
09241 2025                        18            .byte	$18
09242 2026                        18            .byte	$18
09243 2027                        7E            .byte	$7E
09244 2028                        18            .byte	$18
09245 2029                        18            .byte	$18
09246 202A                        18            .byte	$18
09247 202B                        18            .byte	$18
09248 202C                        D8            .byte	$D8
09249 202D                        70            .byte	$70
09250 202E                        00            .byte	0
09251                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09252 202F                        00            .byte	0
09253 2030                        18            .byte	$18
09254 2031                        30            .byte	$30
09255 2032                        60            .byte	$60
09256 2033                        00            .byte	0
09257 2034                        78            .byte	$78
09258 2035                        0C            .byte	$C
09259 2036                        7C            .byte	$7C
09260 2037                        CC            .byte	$CC
09261 2038                        CC            .byte	$CC
09262 2039                        76            .byte	$76
09263 203A                        00            .byte	0
09264 203B                        00            .byte	0
09265 203C                        00            .byte	0
09266                                           ! 1311  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09267 203D                        00            .byte	0
09268 203E                        0C            .byte	$C
09269 203F                        18            .byte	$18
09270 2040                        30            .byte	$30
09271 2041                        00            .byte	0
09272 2042                        38            .byte	$38
09273 2043                        18            .byte	$18
09274 2044                        18            .byte	$18
09275 2045                        18            .byte	$18
09276 2046                        18            .byte	$18
09277 2047                        3C            .byte	$3C
09278 2048                        00            .byte	0
09279 2049                        00            .byte	0
09280 204A                        00            .byte	0
09281                                           ! 1312  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09282 204B                        00            .byte	0
09283 204C                        18            .byte	$18
09284 204D                        30            .byte	$30
09285 204E                        60            .byte	$60
09286 204F                        00            .byte	0
09287 2050                        7C            .byte	$7C
09288 2051                        C6            .byte	$C6
09289 2052                        C6            .byte	$C6
09290 2053                        C6            .byte	$C6
09291 2054                        C6            .byte	$C6
09292 2055                        7C            .byte	$7C
09293 2056                        00            .byte	0
09294 2057                        00            .byte	0
09295 2058                        00            .byte	0
09296                                           ! 1313  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09297 2059                        00            .byte	0
09298 205A                        18            .byte	$18
09299 205B                        30            .byte	$30
09300 205C                        60            .byte	$60
09301 205D                        00            .byte	0
09302 205E                        CC            .byte	$CC
09303 205F                        CC            .byte	$CC
09304 2060                        CC            .byte	$CC
09305 2061                        CC            .byte	$CC
09306 2062                        CC            .byte	$CC
09307 2063                        76            .byte	$76
09308 2064                        00            .byte	0
09309 2065                        00            .byte	0
09310 2066                        00            .byte	0
09311                                           ! 1314  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09312 2067                        00            .byte	0
09313 2068                        00            .byte	0
09314 2069                        76            .byte	$76
09315 206A                        DC            .byte	$DC
09316 206B                        00            .byte	0
09317 206C                        DC            .byte	$DC
09318 206D                        66            .byte	$66
09319 206E                        66            .byte	$66
09320 206F                        66            .byte	$66
09321 2070                        66            .byte	$66
09322 2071                        66            .byte	$66
09323 2072                        00            .byte	0
09324 2073                        00            .byte	0
09325 2074                        00            .byte	0
09326                                           ! 1315  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09327 2075                        76            .byte	$76
09328 2076                        DC            .byte	$DC
09329 2077                        00            .byte	0
09330 2078                        C6            .byte	$C6
09331 2079                        E6            .byte	$E6
09332 207A                        F6            .byte	$F6
09333 207B                        FE            .byte	$FE
09334 207C                        DE            .byte	$DE
09335 207D                        CE            .byte	$CE
09336 207E                        C6            .byte	$C6
09337 207F                        C6            .byte	$C6
09338 2080                        00            .byte	0
09339 2081                        00            .byte	0
09340 2082                        00            .byte	0
09341                                           ! 1316  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09342 2083                        00            .byte	0
09343 2084                        3C            .byte	$3C
09344 2085                        6C            .byte	$6C
09345 2086                        6C            .byte	$6C
09346 2087                        3E            .byte	$3E
09347 2088                        00            .byte	0
09348 2089                        7E            .byte	$7E
09349 208A                        00            .byte	0
09350 208B                        00            .byte	0
09351 208C                        00            .byte	0
09352 208D                        00            .byte	0
09353 208E                        00            .byte	0
09354 208F                        00            .byte	0
09355 2090                        00            .byte	0
09356                                           ! 1317  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09357 2091                        00            .byte	0
09358 2092                        38            .byte	$38
09359 2093                        6C            .byte	$6C
09360 2094                        6C            .byte	$6C
09361 2095                        38            .byte	$38
09362 2096                        00            .byte	0
09363 2097                        7C            .byte	$7C
09364 2098                        00            .byte	0
09365 2099                        00            .byte	0
09366 209A                        00            .byte	0
09367 209B                        00            .byte	0
09368 209C                        00            .byte	0
09369 209D                        00            .byte	0
09370 209E                        00            .byte	0
09371                                           ! 1318  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09372 209F                        00            .byte	0
09373 20A0                        00            .byte	0
09374 20A1                        30            .byte	$30
09375 20A2                        30            .byte	$30
09376 20A3                        00            .byte	0
09377 20A4                        30            .byte	$30
09378 20A5                        30            .byte	$30
09379 20A6                        60            .byte	$60
09380 20A7                        C6            .byte	$C6
09381 20A8                        C6            .byte	$C6
09382 20A9                        7C            .byte	$7C
09383 20AA                        00            .byte	0
09384 20AB                        00            .byte	0
09385 20AC                        00            .byte	0
09386                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09387 20AD                        00            .byte	0
09388 20AE                        00            .byte	0
09389 20AF                        00            .byte	0
09390 20B0                        00            .byte	0
09391 20B1                        00            .byte	0
09392 20B2                        00            .byte	0
09393 20B3                        FE            .byte	$FE
09394 20B4                        C0            .byte	$C0
09395 20B5                        C0            .byte	$C0
09396 20B6                        C0            .byte	$C0
09397 20B7                        00            .byte	0
09398 20B8                        00            .byte	0
09399 20B9                        00            .byte	0
09400 20BA                        00            .byte	0
09401                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09402 20BB                        00            .byte	0
09403 20BC                        00            .byte	0
09404 20BD                        00            .byte	0
09405 20BE                        00            .byte	0
09406 20BF                        00            .byte	0
09407 20C0                        00            .byte	0
09408 20C1                        FE            .byte	$FE
09409 20C2                        06            .byte	6
09410 20C3                        06            .byte	6
09411 20C4                        06            .byte	6
09412 20C5                        00            .byte	0
09413 20C6                        00            .byte	0
09414 20C7                        00            .byte	0
09415 20C8                        00            .byte	0
09416                                           ! 1321  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09417 20C9                        00            .byte	0
09418 20CA                        C0            .byte	$C0
09419 20CB                        C0            .byte	$C0
09420 20CC                        C6            .byte	$C6
09421 20CD                        CC            .byte	$CC
09422 20CE                        D8            .byte	$D8
09423 20CF                        30            .byte	$30
09424 20D0                        60            .byte	$60
09425 20D1                        DC            .byte	$DC
09426 20D2                        86            .byte	$86
09427 20D3                        0C            .byte	$C
09428 20D4                        18            .byte	$18
09429 20D5                        3E            .byte	$3E
09430 20D6                        00            .byte	0
09431                                           ! 1322  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09432 20D7                        00            .byte	0
09433 20D8                        C0            .byte	$C0
09434 20D9                        C0            .byte	$C0
09435 20DA                        C6            .byte	$C6
09436 20DB                        CC            .byte	$CC
09437 20DC                        D8            .byte	$D8
09438 20DD                        30            .byte	$30
09439 20DE                        66            .byte	$66
09440 20DF                        CE            .byte	$CE
09441 20E0                        9E            .byte	$9E
09442 20E1                        3E            .byte	$3E
09443 20E2                        06            .byte	6
09444 20E3                        06            .byte	6
09445 20E4                        00            .byte	0
09446                                           ! 1323  0x00, 0x00, 0x
09447 20E5                        00            .byte	0
09448 20E6                        00            .byte	0
09449                                           ! 1323 18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09450 20E7                        18            .byte	$18
09451 20E8                        18            .byte	$18
09452 20E9                        00            .byte	0
09453 20EA                        18            .byte	$18
09454 20EB                        18            .byte	$18
09455 20EC                        3C            .byte	$3C
09456 20ED                        3C            .byte	$3C
09457 20EE                        3C            .byte	$3C
09458 20EF                        18            .byte	$18
09459 20F0                        00            .byte	0
09460 20F1                        00            .byte	0
09461 20F2                        00            .byte	0
09462                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09463 20F3                        00            .byte	0
09464 20F4                        00            .byte	0
09465 20F5                        00            .byte	0
09466 20F6                        00            .byte	0
09467 20F7                        36            .byte	$36
09468 20F8                        6C            .byte	$6C
09469 20F9                        D8            .byte	$D8
09470 20FA                        6C            .byte	$6C
09471 20FB                        36            .byte	$36
09472 20FC                        00            .byte	0
09473 20FD                        00            .byte	0
09474 20FE                        00            .byte	0
09475 20FF                        00            .byte	0
09476 2100                        00            .byte	0
09477                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09478 2101                        00            .byte	0
09479 2102                        00            .byte	0
09480 2103                        00            .byte	0
09481 2104                        00            .byte	0
09482 2105                        D8            .byte	$D8
09483 2106                        6C            .byte	$6C
09484 2107                        36            .byte	$36
09485 2108                        6C            .byte	$6C
09486 2109                        D8            .byte	$D8
09487 210A                        00            .byte	0
09488 210B                        00            .byte	0
09489 210C                        00            .byte	0
09490 210D                        00            .byte	0
09491 210E                        00            .byte	0
09492                                           ! 1326  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09493 210F                        11            .byte	$11
09494 2110                        44            .byte	$44
09495 2111                        11            .byte	$11
09496 2112                        44            .byte	$44
09497 2113                        11            .byte	$11
09498 2114                        44            .byte	$44
09499 2115                        11            .byte	$11
09500 2116                        44            .byte	$44
09501 2117                        11            .byte	$11
09502 2118                        44            .byte	$44
09503 2119                        11            .byte	$11
09504 211A                        44            .byte	$44
09505 211B                        11            .byte	$11
09506 211C                        44            .byte	$44
09507                                           ! 1327  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09508 211D                        55            .byte	$55
09509 211E                        AA            .byte	$AA
09510 211F                        55            .byte	$55
09511 2120                        AA            .byte	$AA
09512 2121                        55            .byte	$55
09513 2122                        AA            .byte	$AA
09514 2123                        55            .byte	$55
09515 2124                        AA            .byte	$AA
09516 2125                        55            .byte	$55
09517 2126                        AA            .byte	$AA
09518 2127                        55            .byte	$55
09519 2128                        AA            .byte	$AA
09520 2129                        55            .byte	$55
09521 212A                        AA            .byte	$AA
09522                                           ! 1328  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09523 212B                        DD            .byte	$DD
09524 212C                        77            .byte	$77
09525 212D                        DD            .byte	$DD
09526 212E                        77            .byte	$77
09527 212F                        DD            .byte	$DD
09528 2130                        77            .byte	$77
09529 2131                        DD            .byte	$DD
09530 2132                        77            .byte	$77
09531 2133                        DD            .byte	$DD
09532 2134                        77            .byte	$77
09533 2135                        DD            .byte	$DD
09534 2136                        77            .byte	$77
09535 2137                        DD            .byte	$DD
09536 2138                        77            .byte	$77
09537                                           ! 1329  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09538 2139                        18            .byte	$18
09539 213A                        18            .byte	$18
09540 213B                        18            .byte	$18
09541 213C                        18            .byte	$18
09542 213D                        18            .byte	$18
09543 213E                        18            .byte	$18
09544 213F                        18            .byte	$18
09545 2140                        18            .byte	$18
09546 2141                        18            .byte	$18
09547 2142                        18            .byte	$18
09548 2143                        18            .byte	$18
09549 2144                        18            .byte	$18
09550 2145                        18            .byte	$18
09551 2146                        18            .byte	$18
09552                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09553 2147                        18            .byte	$18
09554 2148                        18            .byte	$18
09555 2149                        18            .byte	$18
09556 214A                        18            .byte	$18
09557 214B                        18            .byte	$18
09558 214C                        18            .byte	$18
09559 214D                        18            .byte	$18
09560 214E                        F8            .byte	$F8
09561 214F                        18            .byte	$18
09562 2150                        18            .byte	$18
09563 2151                        18            .byte	$18
09564 2152                        18            .byte	$18
09565 2153                        18            .byte	$18
09566 2154                        18            .byte	$18
09567                                           ! 1331  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09568 2155                        18            .byte	$18
09569 2156                        18            .byte	$18
09570 2157                        18            .byte	$18
09571 2158                        18            .byte	$18
09572 2159                        18            .byte	$18
09573 215A                        F8            .byte	$F8
09574 215B                        18            .byte	$18
09575 215C                        F8            .byte	$F8
09576 215D                        18            .byte	$18
09577 215E                        18            .byte	$18
09578 215F                        18            .byte	$18
09579 2160                        18            .byte	$18
09580 2161                        18            .byte	$18
09581 2162                        18            .byte	$18
09582                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09583 2163                        36            .byte	$36
09584 2164                        36            .byte	$36
09585 2165                        36            .byte	$36
09586 2166                        36            .byte	$36
09587 2167                        36            .byte	$36
09588 2168                        36            .byte	$36
09589 2169                        36            .byte	$36
09590 216A                        F6            .byte	$F6
09591 216B                        36            .byte	$36
09592 216C                        36            .byte	$36
09593 216D                        36            .byte	$36
09594 216E                        36            .byte	$36
09595 216F                        36            .byte	$36
09596 2170                        36            .byte	$36
09597                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09598 2171                        00            .byte	0
09599 2172                        00            .byte	0
09600 2173                        00            .byte	0
09601 2174                        00            .byte	0
09602 2175                        00            .byte	0
09603 2176                        00            .byte	0
09604 2177                        00            .byte	0
09605 2178                        FE            .byte	$FE
09606 2179                        36            .byte	$36
09607 217A                        36            .byte	$36
09608 217B                        36            .byte	$36
09609 217C                        36            .byte	$36
09610 217D                        36            .byte	$36
09611 217E                        36            .byte	$36
09612                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09613 217F                        00            .byte	0
09614 2180                        00            .byte	0
09615 2181                        00            .byte	0
09616 2182                        00            .byte	0
09617 2183                        00            .byte	0
09618 2184                        F8            .byte	$F8
09619 2185                        18            .byte	$18
09620 2186                        F8            .byte	$F8
09621 2187                        18            .byte	$18
09622 2188                        18            .byte	$18
09623 2189                        18            .byte	$18
09624 218A                        18            .byte	$18
09625 218B                        18            .byte	$18
09626 218C                        18            .byte	$18
09627                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09628 218D                        36            .byte	$36
09629 218E                        36            .byte	$36
09630 218F                        36            .byte	$36
09631 2190                        36            .byte	$36
09632 2191                        36            .byte	$36
09633 2192                        F6            .byte	$F6
09634 2193                        06            .byte	6
09635 2194                        F6            .byte	$F6
09636 2195                        36            .byte	$36
09637 2196                        36            .byte	$36
09638 2197                        36            .byte	$36
09639 2198                        36            .byte	$36
09640 2199                        36            .byte	$36
09641 219A                        36            .byte	$36
09642                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09643 219B                        36            .byte	$36
09644 219C                        36            .byte	$36
09645 219D                        36            .byte	$36
09646 219E                        36            .byte	$36
09647 219F                        36            .byte	$36
09648 21A0                        36            .byte	$36
09649 21A1                        36            .byte	$36
09650 21A2                        36            .byte	$36
09651 21A3                        36            .byte	$36
09652 21A4                        36            .byte	$36
09653 21A5                        36            .byte	$36
09654 21A6                        36            .byte	$36
09655 21A7                        36            .byte	$36
09656 21A8                        36            .byte	$36
09657                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09658 21A9                        00            .byte	0
09659 21AA                        00            .byte	0
09660 21AB                        00            .byte	0
09661 21AC                        00            .byte	0
09662 21AD                        00            .byte	0
09663 21AE                        FE            .byte	$FE
09664 21AF                        06            .byte	6
09665 21B0                        F6            .byte	$F6
09666 21B1                        36            .byte	$36
09667 21B2                        36            .byte	$36
09668 21B3                        36            .byte	$36
09669 21B4                        36            .byte	$36
09670 21B5                        36            .byte	$36
09671 21B6                        36            .byte	$36
09672                                           ! 1338  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09673 21B7                        36            .byte	$36
09674 21B8                        36            .byte	$36
09675 21B9                        36            .byte	$36
09676 21BA                        36            .byte	$36
09677 21BB                        36            .byte	$36
09678 21BC                        F6            .byte	$F6
09679 21BD                        06            .byte	6
09680 21BE                        FE            .byte	$FE
09681 21BF                        00            .byte	0
09682 21C0                        00            .byte	0
09683 21C1                        00            .byte	0
09684 21C2                        00            .byte	0
09685 21C3                        00            .byte	0
09686 21C4                        00            .byte	0
09687                                           ! 1339  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09688 21C5                        36            .byte	$36
09689 21C6                        36            .byte	$36
09690 21C7                        36            .byte	$36
09691 21C8                        36            .byte	$36
09692 21C9                        36            .byte	$36
09693 21CA                        36            .byte	$36
09694 21CB                        36            .byte	$36
09695 21CC                        FE            .byte	$FE
09696 21CD                        00            .byte	0
09697 21CE                        00            .byte	0
09698 21CF                        00            .byte	0
09699 21D0                        00            .byte	0
09700 21D1                        00            .byte	0
09701 21D2                        00            .byte	0
09702                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09703 21D3                        18            .byte	$18
09704 21D4                        18            .byte	$18
09705 21D5                        18            .byte	$18
09706 21D6                        18            .byte	$18
09707 21D7                        18            .byte	$18
09708 21D8                        F8            .byte	$F8
09709 21D9                        18            .byte	$18
09710 21DA                        F8            .byte	$F8
09711 21DB                        00            .byte	0
09712 21DC                        00            .byte	0
09713 21DD                        00            .byte	0
09714 21DE                        00            .byte	0
09715 21DF                        00            .byte	0
09716 21E0                        00            .byte	0
09717                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09718 21E1                        00            .byte	0
09719 21E2                        00            .byte	0
09720 21E3                        00            .byte	0
09721 21E4                        00            .byte	0
09722 21E5                        00            .byte	0
09723 21E6                        00            .byte	0
09724 21E7                        00            .byte	0
09725 21E8                        F8            .byte	$F8
09726 21E9                        18            .byte	$18
09727 21EA                        18            .byte	$18
09728 21EB                        18            .byte	$18
09729 21EC                        18            .byte	$18
09730 21ED                        18            .byte	$18
09731 21EE                        18            .byte	$18
09732                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09733 21EF                        18            .byte	$18
09734 21F0                        18            .byte	$18
09735 21F1                        18            .byte	$18
09736 21F2                        18            .byte	$18
09737 21F3                        18            .byte	$18
09738 21F4                        18            .byte	$18
09739 21F5                        18            .byte	$18
09740 21F6                        1F            .byte	$1F
09741 21F7                        00            .byte	0
09742 21F8                        00            .byte	0
09743 21F9                        00            .byte	0
09744 21FA                        00            .byte	0
09745 21FB                        00            .byte	0
09746 21FC                        00            .byte	0
09747                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09748 21FD                        18            .byte	$18
09749 21FE                        18            .byte	$18
09750 21FF                        18            .byte	$18
09751 2200                        18            .byte	$18
09752 2201                        18            .byte	$18
09753 2202                        18            .byte	$18
09754 2203                        18            .byte	$18
09755 2204                        FF            .byte	$FF
09756 2205                        00            .byte	0
09757 2206                        00            .byte	0
09758 2207                        00            .byte	0
09759 2208                        00            .byte	0
09760 2209                        00            .byte	0
09761 220A                        00            .byte	0
09762                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09763 220B                        00            .byte	0
09764 220C                        00            .byte	0
09765 220D                        00            .byte	0
09766 220E                        00            .byte	0
09767 220F                        00            .byte	0
09768 2210                        00            .byte	0
09769 2211                        00            .byte	0
09770 2212                        FF            .byte	$FF
09771 2213                        18            .byte	$18
09772 2214                        18            .byte	$18
09773 2215                        18            .byte	$18
09774 2216                        18            .byte	$18
09775 2217                        18            .byte	$18
09776 2218                        18            .byte	$18
09777                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09778 2219                        18            .byte	$18
09779 221A                        18            .byte	$18
09780 221B                        18            .byte	$18
09781 221C                        18            .byte	$18
09782 221D                        18            .byte	$18
09783 221E                        18            .byte	$18
09784 221F                        18            .byte	$18
09785 2220                        1F            .byte	$1F
09786 2221                        18            .byte	$18
09787 2222                        18            .byte	$18
09788 2223                        18            .byte	$18
09789 2224                        18            .byte	$18
09790 2225                        18            .byte	$18
09791 2226                        18            .byte	$18
09792                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09793 2227                        00            .byte	0
09794 2228                        00            .byte	0
09795 2229                        00            .byte	0
09796 222A                        00            .byte	0
09797 222B                        00            .byte	0
09798 222C                        00            .byte	0
09799 222D                        00            .byte	0
09800 222E                        FF            .byte	$FF
09801 222F                        00            .byte	0
09802 2230                        00            .byte	0
09803 2231                        00            .byte	0
09804 2232                        00            .byte	0
09805 2233                        00            .byte	0
09806 2234                        00            .byte	0
09807                                           ! 1347  0x18, 0x18, 0x18, 0x18
09808 2235                        18            .byte	$18
09809 2236                        18            .byte	$18
09810 2237                        18            .byte	$18
09811                                           ! 1347 , 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09812 2238                        18            .byte	$18
09813 2239                        18            .byte	$18
09814 223A                        18            .byte	$18
09815 223B                        18            .byte	$18
09816 223C                        FF            .byte	$FF
09817 223D                        18            .byte	$18
09818 223E                        18            .byte	$18
09819 223F                        18            .byte	$18
09820 2240                        18            .byte	$18
09821 2241                        18            .byte	$18
09822 2242                        18            .byte	$18
09823                                           ! 1348  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09824 2243                        18            .byte	$18
09825 2244                        18            .byte	$18
09826 2245                        18            .byte	$18
09827 2246                        18            .byte	$18
09828 2247                        18            .byte	$18
09829 2248                        1F            .byte	$1F
09830 2249                        18            .byte	$18
09831 224A                        1F            .byte	$1F
09832 224B                        18            .byte	$18
09833 224C                        18            .byte	$18
09834 224D                        18            .byte	$18
09835 224E                        18            .byte	$18
09836 224F                        18            .byte	$18
09837 2250                        18            .byte	$18
09838                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09839 2251                        36            .byte	$36
09840 2252                        36            .byte	$36
09841 2253                        36            .byte	$36
09842 2254                        36            .byte	$36
09843 2255                        36            .byte	$36
09844 2256                        36            .byte	$36
09845 2257                        36            .byte	$36
09846 2258                        37            .byte	$37
09847 2259                        36            .byte	$36
09848 225A                        36            .byte	$36
09849 225B                        36            .byte	$36
09850 225C                        36            .byte	$36
09851 225D                        36            .byte	$36
09852 225E                        36            .byte	$36
09853                                           ! 1350  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09854 225F                        36            .byte	$36
09855 2260                        36            .byte	$36
09856 2261                        36            .byte	$36
09857 2262                        36            .byte	$36
09858 2263                        36            .byte	$36
09859 2264                        37            .byte	$37
09860 2265                        30            .byte	$30
09861 2266                        3F            .byte	$3F
09862 2267                        00            .byte	0
09863 2268                        00            .byte	0
09864 2269                        00            .byte	0
09865 226A                        00            .byte	0
09866 226B                        00            .byte	0
09867 226C                        00            .byte	0
09868                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09869 226D                        00            .byte	0
09870 226E                        00            .byte	0
09871 226F                        00            .byte	0
09872 2270                        00            .byte	0
09873 2271                        00            .byte	0
09874 2272                        3F            .byte	$3F
09875 2273                        30            .byte	$30
09876 2274                        37            .byte	$37
09877 2275                        36            .byte	$36
09878 2276                        36            .byte	$36
09879 2277                        36            .byte	$36
09880 2278                        36            .byte	$36
09881 2279                        36            .byte	$36
09882 227A                        36            .byte	$36
09883                                           ! 1352  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09884 227B                        36            .byte	$36
09885 227C                        36            .byte	$36
09886 227D                        36            .byte	$36
09887 227E                        36            .byte	$36
09888 227F                        36            .byte	$36
09889 2280                        F7            .byte	$F7
09890 2281                        00            .byte	0
09891 2282                        FF            .byte	$FF
09892 2283                        00            .byte	0
09893 2284                        00            .byte	0
09894 2285                        00            .byte	0
09895 2286                        00            .byte	0
09896 2287                        00            .byte	0
09897 2288                        00            .byte	0
09898                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09899 2289                        00            .byte	0
09900 228A                        00            .byte	0
09901 228B                        00            .byte	0
09902 228C                        00            .byte	0
09903 228D                        00            .byte	0
09904 228E                        FF            .byte	$FF
09905 228F                        00            .byte	0
09906 2290                        F7            .byte	$F7
09907 2291                        36            .byte	$36
09908 2292                        36            .byte	$36
09909 2293                        36            .byte	$36
09910 2294                        36            .byte	$36
09911 2295                        36            .byte	$36
09912 2296                        36            .byte	$36
09913                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09914 2297                        36            .byte	$36
09915 2298                        36            .byte	$36
09916 2299                        36            .byte	$36
09917 229A                        36            .byte	$36
09918 229B                        36            .byte	$36
09919 229C                        37            .byte	$37
09920 229D                        30            .byte	$30
09921 229E                        37            .byte	$37
09922 229F                        36            .byte	$36
09923 22A0                        36            .byte	$36
09924 22A1                        36            .byte	$36
09925 22A2                        36            .byte	$36
09926 22A3                        36            .byte	$36
09927 22A4                        36            .byte	$36
09928                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09929 22A5                        00            .byte	0
09930 22A6                        00            .byte	0
09931 22A7                        00            .byte	0
09932 22A8                        00            .byte	0
09933 22A9                        00            .byte	0
09934 22AA                        FF            .byte	$FF
09935 22AB                        00            .byte	0
09936 22AC                        FF            .byte	$FF
09937 22AD                        00            .byte	0
09938 22AE                        00            .byte	0
09939 22AF                        00            .byte	0
09940 22B0                        00            .byte	0
09941 22B1                        00            .byte	0
09942 22B2                        00            .byte	0
09943                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09944 22B3                        36            .byte	$36
09945 22B4                        36            .byte	$36
09946 22B5                        36            .byte	$36
09947 22B6                        36            .byte	$36
09948 22B7                        36            .byte	$36
09949 22B8                        F7            .byte	$F7
09950 22B9                        00            .byte	0
09951 22BA                        F7            .byte	$F7
09952 22BB                        36            .byte	$36
09953 22BC                        36            .byte	$36
09954 22BD                        36            .byte	$36
09955 22BE                        36            .byte	$36
09956 22BF                        36            .byte	$36
09957 22C0                        36            .byte	$36
09958                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09959 22C1                        18            .byte	$18
09960 22C2                        18            .byte	$18
09961 22C3                        18            .byte	$18
09962 22C4                        18            .byte	$18
09963 22C5                        18            .byte	$18
09964 22C6                        FF            .byte	$FF
09965 22C7                        00            .byte	0
09966 22C8                        FF            .byte	$FF
09967 22C9                        00            .byte	0
09968 22CA                        00            .byte	0
09969 22CB                        00            .byte	0
09970 22CC                        00            .byte	0
09971 22CD                        00            .byte	0
09972 22CE                        00            .byte	0
09973                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09974 22CF                        36            .byte	$36
09975 22D0                        36            .byte	$36
09976 22D1                        36            .byte	$36
09977 22D2                        36            .byte	$36
09978 22D3                        36            .byte	$36
09979 22D4                        36            .byte	$36
09980 22D5                        36            .byte	$36
09981 22D6                        FF            .byte	$FF
09982 22D7                        00            .byte	0
09983 22D8                        00            .byte	0
09984 22D9                        00            .byte	0
09985 22DA                        00            .byte	0
09986 22DB                        00            .byte	0
09987 22DC                        00            .byte	0
09988                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09989 22DD                        00            .byte	0
09990 22DE                        00            .byte	0
09991 22DF                        00            .byte	0
09992 22E0                        00            .byte	0
09993 22E1                        00            .byte	0
09994 22E2                        FF            .byte	$FF
09995 22E3                        00            .byte	0
09996 22E4                        FF            .byte	$FF
09997 22E5                        18            .byte	$18
09998 22E6                        18            .byte	$18
09999 22E7                        18            .byte	$18
10000 22E8                        18            .byte	$18
10001 22E9                        18            .byte	$18
10002 22EA                        18            .byte	$18
10003                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10004 22EB                        00            .byte	0
10005 22EC                        00            .byte	0
10006 22ED                        00            .byte	0
10007 22EE                        00            .byte	0
10008 22EF                        00            .byte	0
10009 22F0                        00            .byte	0
10010 22F1                        00            .byte	0
10011 22F2                        FF            .byte	$FF
10012 22F3                        36            .byte	$36
10013 22F4                        36            .byte	$36
10014 22F5                        36            .byte	$36
10015 22F6                        36            .byte	$36
10016 22F7                        36            .byte	$36
10017 22F8                        36            .byte	$36
10018                                           ! 1361  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10019 22F9                        36            .byte	$36
10020 22FA                        36            .byte	$36
10021 22FB                        36            .byte	$36
10022 22FC                        36            .byte	$36
10023 22FD                        36            .byte	$36
10024 22FE                        36            .byte	$36
10025 22FF                        36            .byte	$36
10026 2300                        3F            .byte	$3F
10027 2301                        00            .byte	0
10028 2302                        00            .byte	0
10029 2303                        00            .byte	0
10030 2304                        00            .byte	0
10031 2305                        00            .byte	0
10032 2306                        00            .byte	0
10033                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10034 2307                        18            .byte	$18
10035 2308                        18            .byte	$18
10036 2309                        18            .byte	$18
10037 230A                        18            .byte	$18
10038 230B                        18            .byte	$18
10039 230C                        1F            .byte	$1F
10040 230D                        18            .byte	$18
10041 230E                        1F            .byte	$1F
10042 230F                        00            .byte	0
10043 2310                        00            .byte	0
10044 2311                        00            .byte	0
10045 2312                        00            .byte	0
10046 2313                        00            .byte	0
10047 2314                        00            .byte	0
10048                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10049 2315                        00            .byte	0
10050 2316                        00            .byte	0
10051 2317                        00            .byte	0
10052 2318                        00            .byte	0
10053 2319                        00            .byte	0
10054 231A                        1F            .byte	$1F
10055 231B                        18            .byte	$18
10056 231C                        1F            .byte	$1F
10057 231D                        18            .byte	$18
10058 231E                        18            .byte	$18
10059 231F                        18            .byte	$18
10060 2320                        18            .byte	$18
10061 2321                        18            .byte	$18
10062 2322                        18            .byte	$18
10063                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10064 2323                        00            .byte	0
10065 2324                        00            .byte	0
10066 2325                        00            .byte	0
10067 2326                        00            .byte	0
10068 2327                        00            .byte	0
10069 2328                        00            .byte	0
10070 2329                        00            .byte	0
10071 232A                        3F            .byte	$3F
10072 232B                        36            .byte	$36
10073 232C                        36            .byte	$36
10074 232D                        36            .byte	$36
10075 232E                        36            .byte	$36
10076 232F                        36            .byte	$36
10077 2330                        36            .byte	$36
10078                                           ! 1365  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10079 2331                        36            .byte	$36
10080 2332                        36            .byte	$36
10081 2333                        36            .byte	$36
10082 2334                        36            .byte	$36
10083 2335                        36            .byte	$36
10084 2336                        36            .byte	$36
10085 2337                        36            .byte	$36
10086 2338                        FF            .byte	$FF
10087 2339                        36            .byte	$36
10088 233A                        36            .byte	$36
10089 233B                        36            .byte	$36
10090 233C                        36            .byte	$36
10091 233D                        36            .byte	$36
10092 233E                        36            .byte	$36
10093                                           ! 1366  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10094 233F                        18            .byte	$18
10095 2340                        18            .byte	$18
10096 2341                        18            .byte	$18
10097 2342                        18            .byte	$18
10098 2343                        18            .byte	$18
10099 2344                        FF            .byte	$FF
10100 2345                        18            .byte	$18
10101 2346                        FF            .byte	$FF
10102 2347                        18            .byte	$18
10103 2348                        18            .byte	$18
10104 2349                        18            .byte	$18
10105 234A                        18            .byte	$18
10106 234B                        18            .byte	$18
10107 234C                        18            .byte	$18
10108                                           ! 1367  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10109 234D                        18            .byte	$18
10110 234E                        18            .byte	$18
10111 234F                        18            .byte	$18
10112 2350                        18            .byte	$18
10113 2351                        18            .byte	$18
10114 2352                        18            .byte	$18
10115 2353                        18            .byte	$18
10116 2354                        F8            .byte	$F8
10117 2355                        00            .byte	0
10118 2356                        00            .byte	0
10119 2357                        00            .byte	0
10120 2358                        00            .byte	0
10121 2359                        00            .byte	0
10122 235A                        00            .byte	0
10123                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10124 235B                        00            .byte	0
10125 235C                        00            .byte	0
10126 235D                        00            .byte	0
10127 235E                        00            .byte	0
10128 235F                        00            .byte	0
10129 2360                        00            .byte	0
10130 2361                        00            .byte	0
10131 2362                        1F            .byte	$1F
10132 2363                        18            .byte	$18
10133 2364                        18            .byte	$18
10134 2365                        18            .byte	$18
10135 2366                        18            .byte	$18
10136 2367                        18            .byte	$18
10137 2368                        18            .byte	$18
10138                                           ! 1369  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10139 2369                        FF            .byte	$FF
10140 236A                        FF            .byte	$FF
10141 236B                        FF            .byte	$FF
10142 236C                        FF            .byte	$FF
10143 236D                        FF            .byte	$FF
10144 236E                        FF            .byte	$FF
10145 236F                        FF            .byte	$FF
10146 2370                        FF            .byte	$FF
10147 2371                        FF            .byte	$FF
10148 2372                        FF            .byte	$FF
10149 2373                        FF            .byte	$FF
10150 2374                        FF            .byte	$FF
10151 2375                        FF            .byte	$FF
10152 2376                        FF            .byte	$FF
10153                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10154 2377                        00            .byte	0
10155 2378                        00            .byte	0
10156 2379                        00            .byte	0
10157 237A                        00            .byte	0
10158 237B                        00            .byte	0
10159 237C                        00            .byte	0
10160 237D                        00            .byte	0
10161 237E                        FF            .byte	$FF
10162 237F                        FF            .byte	$FF
10163 2380                        FF            .byte	$FF
10164 2381                        FF            .byte	$FF
10165 2382                        FF            .byte	$FF
10166 2383                        FF            .byte	$FF
10167 2384                        FF            .byte	$FF
10168                                           ! 1371  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
10169 2385                        F0            .byte	$F0
10170 2386                        F0            .byte	$F0
10171 2387                        F0            .byte	$F0
10172 2388                        F0            .byte	$F0
10173 2389                        F0            .byte	$F0
10174                                           ! 1371 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10175 238A                        F0            .byte	$F0
10176 238B                        F0            .byte	$F0
10177 238C                        F0            .byte	$F0
10178 238D                        F0            .byte	$F0
10179 238E                        F0            .byte	$F0
10180 238F                        F0            .byte	$F0
10181 2390                        F0            .byte	$F0
10182 2391                        F0            .byte	$F0
10183 2392                        F0            .byte	$F0
10184                                           ! 1372  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10185 2393                        0F            .byte	$F
10186 2394                        0F            .byte	$F
10187 2395                        0F            .byte	$F
10188 2396                        0F            .byte	$F
10189 2397                        0F            .byte	$F
10190 2398                        0F            .byte	$F
10191 2399                        0F            .byte	$F
10192 239A                        0F            .byte	$F
10193 239B                        0F            .byte	$F
10194 239C                        0F            .byte	$F
10195 239D                        0F            .byte	$F
10196 239E                        0F            .byte	$F
10197 239F                        0F            .byte	$F
10198 23A0                        0F            .byte	$F
10199                                           ! 1373  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10200 23A1                        FF            .byte	$FF
10201 23A2                        FF            .byte	$FF
10202 23A3                        FF            .byte	$FF
10203 23A4                        FF            .byte	$FF
10204 23A5                        FF            .byte	$FF
10205 23A6                        FF            .byte	$FF
10206 23A7                        FF            .byte	$FF
10207 23A8                        00            .byte	0
10208 23A9                        00            .byte	0
10209 23AA                        00            .byte	0
10210 23AB                        00            .byte	0
10211 23AC                        00            .byte	0
10212 23AD                        00            .byte	0
10213 23AE                        00            .byte	0
10214                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10215 23AF                        00            .byte	0
10216 23B0                        00            .byte	0
10217 23B1                        00            .byte	0
10218 23B2                        00            .byte	0
10219 23B3                        00            .byte	0
10220 23B4                        76            .byte	$76
10221 23B5                        DC            .byte	$DC
10222 23B6                        D8            .byte	$D8
10223 23B7                        D8            .byte	$D8
10224 23B8                        DC            .byte	$DC
10225 23B9                        76            .byte	$76
10226 23BA                        00            .byte	0
10227 23BB                        00            .byte	0
10228 23BC                        00            .byte	0
10229                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10230 23BD                        00            .byte	0
10231 23BE                        00            .byte	0
10232 23BF                        00            .byte	0
10233 23C0                        00            .byte	0
10234 23C1                        7C            .byte	$7C
10235 23C2                        C6            .byte	$C6
10236 23C3                        FC            .byte	$FC
10237 23C4                        C6            .byte	$C6
10238 23C5                        C6            .byte	$C6
10239 23C6                        FC            .byte	$FC
10240 23C7                        C0            .byte	$C0
10241 23C8                        C0            .byte	$C0
10242 23C9                        40            .byte	$40
10243 23CA                        00            .byte	0
10244                                           ! 1376  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10245 23CB                        00            .byte	0
10246 23CC                        00            .byte	0
10247 23CD                        FE            .byte	$FE
10248 23CE                        C6            .byte	$C6
10249 23CF                        C6            .byte	$C6
10250 23D0                        C0            .byte	$C0
10251 23D1                        C0            .byte	$C0
10252 23D2                        C0            .byte	$C0
10253 23D3                        C0            .byte	$C0
10254 23D4                        C0            .byte	$C0
10255 23D5                        C0            .byte	$C0
10256 23D6                        00            .byte	0
10257 23D7                        00            .byte	0
10258 23D8                        00            .byte	0
10259                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10260 23D9                        00            .byte	0
10261 23DA                        00            .byte	0
10262 23DB                        00            .byte	0
10263 23DC                        00            .byte	0
10264 23DD                        FE            .byte	$FE
10265 23DE                        6C            .byte	$6C
10266 23DF                        6C            .byte	$6C
10267 23E0                        6C            .byte	$6C
10268 23E1                        6C            .byte	$6C
10269 23E2                        6C            .byte	$6C
10270 23E3                        6C            .byte	$6C
10271 23E4                        00            .byte	0
10272 23E5                        00            .byte	0
10273 23E6                        00            .byte	0
10274                                           ! 1378  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10275 23E7                        00            .byte	0
10276 23E8                        00            .byte	0
10277 23E9                        FE            .byte	$FE
10278 23EA                        C6            .byte	$C6
10279 23EB                        60            .byte	$60
10280 23EC                        30            .byte	$30
10281 23ED                        18            .byte	$18
10282 23EE                        30            .byte	$30
10283 23EF                        60            .byte	$60
10284 23F0                        C6            .byte	$C6
10285 23F1                        FE            .byte	$FE
10286 23F2                        00            .byte	0
10287 23F3                        00            .byte	0
10288 23F4                        00            .byte	0
10289                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10290 23F5                        00            .byte	0
10291 23F6                        00            .byte	0
10292 23F7                        00            .byte	0
10293 23F8                        00            .byte	0
10294 23F9                        00            .byte	0
10295 23FA                        7E            .byte	$7E
10296 23FB                        D8            .byte	$D8
10297 23FC                        D8            .byte	$D8
10298 23FD                        D8            .byte	$D8
10299 23FE                        D8            .byte	$D8
10300 23FF                        70            .byte	$70
10301 2400                        00            .byte	0
10302 2401                        00            .byte	0
10303 2402                        00            .byte	0
10304                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10305 2403                        00            .byte	0
10306 2404                        00            .byte	0
10307 2405                        00            .byte	0
10308 2406                        00            .byte	0
10309 2407                        66            .byte	$66
10310 2408                        66            .byte	$66
10311 2409                        66            .byte	$66
10312 240A                        66            .byte	$66
10313 240B                        7C            .byte	$7C
10314 240C                        60            .byte	$60
10315 240D                        60            .byte	$60
10316 240E                        C0            .byte	$C0
10317 240F                        00            .byte	0
10318 2410                        00            .byte	0
10319                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10320 2411                        00            .byte	0
10321 2412                        00            .byte	0
10322 2413                        00            .byte	0
10323 2414                        00            .byte	0
10324 2415                        76            .byte	$76
10325 2416                        DC            .byte	$DC
10326 2417                        18            .byte	$18
10327 2418                        18            .byte	$18
10328 2419                        18            .byte	$18
10329 241A                        18            .byte	$18
10330 241B                        18            .byte	$18
10331 241C                        00            .byte	0
10332 241D                        00            .byte	0
10333 241E                        00            .byte	0
10334                                           ! 1382  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10335 241F                        00            .byte	0
10336 2420                        00            .byte	0
10337 2421                        7E            .byte	$7E
10338 2422                        18            .byte	$18
10339 2423                        3C            .byte	$3C
10340 2424                        66            .byte	$66
10341 2425                        66            .byte	$66
10342 2426                        66            .byte	$66
10343 2427                        3C            .byte	$3C
10344 2428                        18            .byte	$18
10345 2429                        7E            .byte	$7E
10346 242A                        00            .byte	0
10347 242B                        00            .byte	0
10348 242C                        00            .byte	0
10349                                           ! 1383  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10350 242D                        00            .byte	0
10351 242E                        00            .byte	0
10352 242F                        38            .byte	$38
10353 2430                        6C            .byte	$6C
10354 2431                        C6            .byte	$C6
10355 2432                        C6            .byte	$C6
10356 2433                        FE            .byte	$FE
10357 2434                        C6            .byte	$C6
10358 2435                        C6            .byte	$C6
10359 2436                        6C            .byte	$6C
10360 2437                        38            .byte	$38
10361 2438                        00            .byte	0
10362 2439                        00            .byte	0
10363 243A                        00            .byte	0
10364                                           ! 1384  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10365 243B                        00            .byte	0
10366 243C                        00            .byte	0
10367 243D                        38            .byte	$38
10368 243E                        6C            .byte	$6C
10369 243F                        C6            .byte	$C6
10370 2440                        C6            .byte	$C6
10371 2441                        C6            .byte	$C6
10372 2442                        6C            .byte	$6C
10373 2443                        6C            .byte	$6C
10374 2444                        6C            .byte	$6C
10375 2445                        EE            .byte	$EE
10376 2446                        00            .byte	0
10377 2447                        00            .byte	0
10378 2448                        00            .byte	0
10379                                           ! 1385  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10380 2449                        00            .byte	0
10381 244A                        00            .byte	0
10382 244B                        1E            .byte	$1E
10383 244C                        30            .byte	$30
10384 244D                        18            .byte	$18
10385 244E                        0C            .byte	$C
10386 244F                        3E            .byte	$3E
10387 2450                        66            .byte	$66
10388 2451                        66            .byte	$66
10389 2452                        66            .byte	$66
10390 2453                        3C            .byte	$3C
10391 2454                        00            .byte	0
10392 2455                        00            .byte	0
10393 2456                        00            .byte	0
10394                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10395 2457                        00            .byte	0
10396 2458                        00            .byte	0
10397 2459                        00            .byte	0
10398 245A                        00            .byte	0
10399 245B                        00            .byte	0
10400 245C                        7E            .byte	$7E
10401 245D                        DB            .byte	$DB
10402 245E                        DB            .byte	$DB
10403 245F                        7E            .byte	$7E
10404 2460                        00            .byte	0
10405 2461                        00            .byte	0
10406 2462                        00            .byte	0
10407 2463                        00            .byte	0
10408 2464                        00            .byte	0
10409                                           ! 1387  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10410 2465                        00            .byte	0
10411 2466                        00            .byte	0
10412 2467                        03            .byte	3
10413 2468                        06            .byte	6
10414 2469                        7E            .byte	$7E
10415 246A                        DB            .byte	$DB
10416 246B                        DB            .byte	$DB
10417 246C                        F3            .byte	$F3
10418 246D                        7E            .byte	$7E
10419 246E                        60            .byte	$60
10420 246F                        C0            .byte	$C0
10421 2470                        00            .byte	0
10422 2471                        00            .byte	0
10423 2472                        00            .byte	0
10424                                           ! 1388  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10425 2473                        00            .byte	0
10426 2474                        00            .byte	0
10427 2475                        1C            .byte	$1C
10428 2476                        30            .byte	$30
10429 2477                        60            .byte	$60
10430 2478                        60            .byte	$60
10431 2479                        7C            .byte	$7C
10432 247A                        60            .byte	$60
10433 247B                        60            .byte	$60
10434 247C                        30            .byte	$30
10435 247D                        1C            .byte	$1C
10436 247E                        00            .byte	0
10437 247F                        00            .byte	0
10438 2480                        00            .byte	0
10439                                           ! 1389  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10440 2481                        00            .byte	0
10441 2482                        00            .byte	0
10442 2483                        00            .byte	0
10443 2484                        7C            .byte	$7C
10444 2485                        C6            .byte	$C6
10445 2486                        C6            .byte	$C6
10446 2487                        C6            .byte	$C6
10447 2488                        C6            .byte	$C6
10448 2489                        C6            .byte	$C6
10449 248A                        C6            .byte	$C6
10450 248B                        C6            .byte	$C6
10451 248C                        00            .byte	0
10452 248D                        00            .byte	0
10453 248E                        00            .byte	0
10454                                           ! 1390  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10455 248F                        00            .byte	0
10456 2490                        00            .byte	0
10457 2491                        00            .byte	0
10458 2492                        FE            .byte	$FE
10459 2493                        00            .byte	0
10460 2494                        00            .byte	0
10461 2495                        FE            .byte	$FE
10462 2496                        00            .byte	0
10463 2497                        00            .byte	0
10464 2498                        FE            .byte	$FE
10465 2499                        00            .byte	0
10466 249A                        00            .byte	0
10467 249B                        00            .byte	0
10468 249C                        00            .byte	0
10469                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10470 249D                        00            .byte	0
10471 249E                        00            .byte	0
10472 249F                        00            .byte	0
10473 24A0                        18            .byte	$18
10474 24A1                        18            .byte	$18
10475 24A2                        7E            .byte	$7E
10476 24A3                        18            .byte	$18
10477 24A4                        18            .byte	$18
10478 24A5                        00            .byte	0
10479 24A6                        00            .byte	0
10480 24A7                        FF            .byte	$FF
10481 24A8                        00            .byte	0
10482 24A9                        00            .byte	0
10483 24AA                        00            .byte	0
10484                                           ! 1392  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10485 24AB                        00            .byte	0
10486 24AC                        00            .byte	0
10487 24AD                        30            .byte	$30
10488 24AE                        18            .byte	$18
10489 24AF                        0C            .byte	$C
10490 24B0                        06            .byte	6
10491 24B1                        0C            .byte	$C
10492 24B2                        18            .byte	$18
10493 24B3                        30            .byte	$30
10494 24B4                        00            .byte	0
10495 24B5                        7E            .byte	$7E
10496 24B6                        00            .byte	0
10497 24B7                        00            .byte	0
10498 24B8                        00            .byte	0
10499                                           ! 1393  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10500 24B9                        00            .byte	0
10501 24BA                        00            .byte	0
10502 24BB                        0C            .byte	$C
10503 24BC                        18            .byte	$18
10504 24BD                        30            .byte	$30
10505 24BE                        60            .byte	$60
10506 24BF                        30            .byte	$30
10507 24C0                        18            .byte	$18
10508 24C1                        0C            .byte	$C
10509 24C2                        00            .byte	0
10510 24C3                        7E            .byte	$7E
10511 24C4                        00            .byte	0
10512 24C5                        00            .byte	0
10513 24C6                        00            .byte	0
10514                                           ! 1394  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10515 24C7                        00            .byte	0
10516 24C8                        00            .byte	0
10517 24C9                        0E            .byte	$E
10518 24CA                        1B            .byte	$1B
10519 24CB                        1B            .byte	$1B
10520 24CC                        18            .byte	$18
10521 24CD                        18            .byte	$18
10522 24CE                        18            .byte	$18
10523 24CF                        18            .byte	$18
10524 24D0                        18            .byte	$18
10525 24D1                        18            .byte	$18
10526 24D2                        18            .byte	$18
10527 24D3                        18            .byte	$18
10528 24D4                        18            .byte	$18
10529                                           ! 1395  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
10530 24D5                        18            .byte	$18
10531 24D6                        18            .byte	$18
10532 24D7                        18            .byte	$18
10533 24D8                        18            .byte	$18
10534 24D9                        18            .byte	$18
10535 24DA                        18            .byte	$18
10536                                           ! 1395 18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10537 24DB                        18            .byte	$18
10538 24DC                        18            .byte	$18
10539 24DD                        D8            .byte	$D8
10540 24DE                        D8            .byte	$D8
10541 24DF                        70            .byte	$70
10542 24E0                        00            .byte	0
10543 24E1                        00            .byte	0
10544 24E2                        00            .byte	0
10545                                           ! 1396  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10546 24E3                        00            .byte	0
10547 24E4                        00            .byte	0
10548 24E5                        00            .byte	0
10549 24E6                        18            .byte	$18
10550 24E7                        18            .byte	$18
10551 24E8                        00            .byte	0
10552 24E9                        7E            .byte	$7E
10553 24EA                        00            .byte	0
10554 24EB                        18            .byte	$18
10555 24EC                        18            .byte	$18
10556 24ED                        00            .byte	0
10557 24EE                        00            .byte	0
10558 24EF                        00            .byte	0
10559 24F0                        00            .byte	0
10560                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10561 24F1                        00            .byte	0
10562 24F2                        00            .byte	0
10563 24F3                        00            .byte	0
10564 24F4                        00            .byte	0
10565 24F5                        76            .byte	$76
10566 24F6                        DC            .byte	$DC
10567 24F7                        00            .byte	0
10568 24F8                        76            .byte	$76
10569 24F9                        DC            .byte	$DC
10570 24FA                        00            .byte	0
10571 24FB                        00            .byte	0
10572 24FC                        00            .byte	0
10573 24FD                        00            .byte	0
10574 24FE                        00            .byte	0
10575                                           ! 1398  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10576 24FF                        00            .byte	0
10577 2500                        38            .byte	$38
10578 2501                        6C            .byte	$6C
10579 2502                        6C            .byte	$6C
10580 2503                        38            .byte	$38
10581 2504                        00            .byte	0
10582 2505                        00            .byte	0
10583 2506                        00            .byte	0
10584 2507                        00            .byte	0
10585 2508                        00            .byte	0
10586 2509                        00            .byte	0
10587 250A                        00            .byte	0
10588 250B                        00            .byte	0
10589 250C                        00            .byte	0
10590                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10591 250D                        00            .byte	0
10592 250E                        00            .byte	0
10593 250F                        00            .byte	0
10594 2510                        00            .byte	0
10595 2511                        00            .byte	0
10596 2512                        00            .byte	0
10597 2513                        18            .byte	$18
10598 2514                        18            .byte	$18
10599 2515                        00            .byte	0
10600 2516                        00            .byte	0
10601 2517                        00            .byte	0
10602 2518                        00            .byte	0
10603 2519                        00            .byte	0
10604 251A                        00            .byte	0
10605                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10606 251B                        00            .byte	0
10607 251C                        00            .byte	0
10608 251D                        00            .byte	0
10609 251E                        00            .byte	0
10610 251F                        00            .byte	0
10611 2520                        00            .byte	0
10612 2521                        00            .byte	0
10613 2522                        18            .byte	$18
10614 2523                        00            .byte	0
10615 2524                        00            .byte	0
10616 2525                        00            .byte	0
10617 2526                        00            .byte	0
10618 2527                        00            .byte	0
10619 2528                        00            .byte	0
10620                                           ! 1401  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10621 2529                        00            .byte	0
10622 252A                        0F            .byte	$F
10623 252B                        0C            .byte	$C
10624 252C                        0C            .byte	$C
10625 252D                        0C            .byte	$C
10626 252E                        0C            .byte	$C
10627 252F                        0C            .byte	$C
10628 2530                        EC            .byte	$EC
10629 2531                        6C            .byte	$6C
10630 2532                        3C            .byte	$3C
10631 2533                        1C            .byte	$1C
10632 2534                        00            .byte	0
10633 2535                        00            .byte	0
10634 2536                        00            .byte	0
10635                                           ! 1402  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10636 2537                        00            .byte	0
10637 2538                        D8            .byte	$D8
10638 2539                        6C            .byte	$6C
10639 253A                        6C            .byte	$6C
10640 253B                        6C            .byte	$6C
10641 253C                        6C            .byte	$6C
10642 253D                        6C            .byte	$6C
10643 253E                        00            .byte	0
10644 253F                        00            .byte	0
10645 2540                        00            .byte	0
10646 2541                        00            .byte	0
10647 2542                        00            .byte	0
10648 2543                        00            .byte	0
10649 2544                        00            .byte	0
10650                                           ! 1403  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10651 2545                        00            .byte	0
10652 2546                        70            .byte	$70
10653 2547                        D8            .byte	$D8
10654 2548                        30            .byte	$30
10655 2549                        60            .byte	$60
10656 254A                        C8            .byte	$C8
10657 254B                        F8            .byte	$F8
10658 254C                        00            .byte	0
10659 254D                        00            .byte	0
10660 254E                        00            .byte	0
10661 254F                        00            .byte	0
10662 2550                        00            .byte	0
10663 2551                        00            .byte	0
10664 2552                        00            .byte	0
10665                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10666 2553                        00            .byte	0
10667 2554                        00            .byte	0
10668 2555                        00            .byte	0
10669 2556                        00            .byte	0
10670 2557                        7C            .byte	$7C
10671 2558                        7C            .byte	$7C
10672 2559                        7C            .byte	$7C
10673 255A                        7C            .byte	$7C
10674 255B                        7C            .byte	$7C
10675 255C                        7C            .byte	$7C
10676 255D                        00            .byte	0
10677 255E                        00            .byte	0
10678 255F                        00            .byte	0
10679 2560                        00            .byte	0
10680                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10681 2561                        00            .byte	0
10682 2562                        00            .byte	0
10683 2563                        00            .byte	0
10684 2564                        00            .byte	0
10685 2565                        00            .byte	0
10686 2566                        00            .byte	0
10687 2567                        00            .byte	0
10688 2568                        00            .byte	0
10689 2569                        00            .byte	0
10690 256A                        00            .byte	0
10691 256B                        00            .byte	0
10692 256C                        00            .byte	0
10693 256D                        00            .byte	0
10694                                           ! 1406 };
10695 256E                        00            .byte	0
10696                                           !BCC_EOS
10697                                           ! 1407 static Bit8u vgafont16[256*16]=
10698                                           ! 1408 {
10699                       0000256F            _vgafont16:
10700                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10701 256F                        00            .byte	0
10702 2570                        00            .byte	0
10703 2571                        00            .byte	0
10704 2572                        00            .byte	0
10705 2573                        00            .byte	0
10706 2574                        00            .byte	0
10707 2575                        00            .byte	0
10708 2576                        00            .byte	0
10709 2577                        00            .byte	0
10710 2578                        00            .byte	0
10711 2579                        00            .byte	0
10712 257A                        00            .byte	0
10713 257B                        00            .byte	0
10714 257C                        00            .byte	0
10715 257D                        00            .byte	0
10716 257E                        00            .byte	0
10717                                           ! 1410  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10718 257F                        00            .byte	0
10719 2580                        00            .byte	0
10720 2581                        7E            .byte	$7E
10721 2582                        81            .byte	$81
10722 2583                        A5            .byte	$A5
10723 2584                        81            .byte	$81
10724 2585                        81            .byte	$81
10725 2586                        BD            .byte	$BD
10726 2587                        99            .byte	$99
10727 2588                        81            .byte	$81
10728 2589                        81            .byte	$81
10729 258A                        7E            .byte	$7E
10730 258B                        00            .byte	0
10731 258C                        00            .byte	0
10732 258D                        00            .byte	0
10733 258E                        00            .byte	0
10734                                           ! 1411  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10735 258F                        00            .byte	0
10736 2590                        00            .byte	0
10737 2591                        7E            .byte	$7E
10738 2592                        FF            .byte	$FF
10739 2593                        DB            .byte	$DB
10740 2594                        FF            .byte	$FF
10741 2595                        FF            .byte	$FF
10742 2596                        C3            .byte	$C3
10743 2597                        E7            .byte	$E7
10744 2598                        FF            .byte	$FF
10745 2599                        FF            .byte	$FF
10746 259A                        7E            .byte	$7E
10747 259B                        00            .byte	0
10748 259C                        00            .byte	0
10749 259D                        00            .byte	0
10750 259E                        00            .byte	0
10751                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10752 259F                        00            .byte	0
10753 25A0                        00            .byte	0
10754 25A1                        00            .byte	0
10755 25A2                        00            .byte	0
10756 25A3                        6C            .byte	$6C
10757 25A4                        FE            .byte	$FE
10758 25A5                        FE            .byte	$FE
10759 25A6                        FE            .byte	$FE
10760 25A7                        FE            .byte	$FE
10761 25A8                        7C            .byte	$7C
10762 25A9                        38            .byte	$38
10763 25AA                        10            .byte	$10
10764 25AB                        00            .byte	0
10765 25AC                        00            .byte	0
10766 25AD                        00            .byte	0
10767 25AE                        00            .byte	0
10768                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10769 25AF                        00            .byte	0
10770 25B0                        00            .byte	0
10771 25B1                        00            .byte	0
10772 25B2                        00            .byte	0
10773 25B3                        10            .byte	$10
10774 25B4                        38            .byte	$38
10775 25B5                        7C            .byte	$7C
10776 25B6                        FE            .byte	$FE
10777 25B7                        7C            .byte	$7C
10778 25B8                        38            .byte	$38
10779 25B9                        10            .byte	$10
10780 25BA                        00            .byte	0
10781 25BB                        00            .byte	0
10782 25BC                        00            .byte	0
10783 25BD                        00            .byte	0
10784 25BE                        00            .byte	0
10785                                           ! 1414  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10786 25BF                        00            .byte	0
10787 25C0                        00            .byte	0
10788 25C1                        00            .byte	0
10789 25C2                        18            .byte	$18
10790 25C3                        3C            .byte	$3C
10791 25C4                        3C            .byte	$3C
10792 25C5                        E7            .byte	$E7
10793 25C6                        E7            .byte	$E7
10794 25C7                        E7            .byte	$E7
10795 25C8                        18            .byte	$18
10796 25C9                        18            .byte	$18
10797 25CA                        3C            .byte	$3C
10798 25CB                        00            .byte	0
10799 25CC                        00            .byte	0
10800 25CD                        00            .byte	0
10801 25CE                        00            .byte	0
10802                                           ! 1415  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10803 25CF                        00            .byte	0
10804 25D0                        00            .byte	0
10805 25D1                        00            .byte	0
10806 25D2                        18            .byte	$18
10807 25D3                        3C            .byte	$3C
10808 25D4                        7E            .byte	$7E
10809 25D5                        FF            .byte	$FF
10810 25D6                        FF            .byte	$FF
10811 25D7                        7E            .byte	$7E
10812 25D8                        18            .byte	$18
10813 25D9                        18            .byte	$18
10814 25DA                        3C            .byte	$3C
10815 25DB                        00            .byte	0
10816 25DC                        00            .byte	0
10817 25DD                        00            .byte	0
10818 25DE                        00            .byte	0
10819                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10820 25DF                        00            .byte	0
10821 25E0                        00            .byte	0
10822 25E1                        00            .byte	0
10823 25E2                        00            .byte	0
10824 25E3                        00            .byte	0
10825 25E4                        00            .byte	0
10826 25E5                        18            .byte	$18
10827 25E6                        3C            .byte	$3C
10828 25E7                        3C            .byte	$3C
10829 25E8                        18            .byte	$18
10830 25E9                        00            .byte	0
10831 25EA                        00            .byte	0
10832 25EB                        00            .byte	0
10833 25EC                        00            .byte	0
10834 25ED                        00            .byte	0
10835 25EE                        00            .byte	0
10836                                           ! 1417  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10837 25EF                        FF            .byte	$FF
10838 25F0                        FF            .byte	$FF
10839 25F1                        FF            .byte	$FF
10840 25F2                        FF            .byte	$FF
10841 25F3                        FF            .byte	$FF
10842 25F4                        FF            .byte	$FF
10843 25F5                        E7            .byte	$E7
10844 25F6                        C3            .byte	$C3
10845 25F7                        C3            .byte	$C3
10846 25F8                        E7            .byte	$E7
10847 25F9                        FF            .byte	$FF
10848 25FA                        FF            .byte	$FF
10849 25FB                        FF            .byte	$FF
10850 25FC                        FF            .byte	$FF
10851 25FD                        FF            .byte	$FF
10852 25FE                        FF            .byte	$FF
10853                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10854 25FF                        00            .byte	0
10855 2600                        00            .byte	0
10856 2601                        00            .byte	0
10857 2602                        00            .byte	0
10858 2603                        00            .byte	0
10859 2604                        3C            .byte	$3C
10860 2605                        66            .byte	$66
10861 2606                        42            .byte	$42
10862 2607                        42            .byte	$42
10863 2608                        66            .byte	$66
10864 2609                        3C            .byte	$3C
10865 260A                        00            .byte	0
10866 260B                        00            .byte	0
10867 260C                        00            .byte	0
10868 260D                        00            .byte	0
10869 260E                        00            .byte	0
10870                                           ! 1419  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10871 260F                        FF            .byte	$FF
10872 2610                        FF            .byte	$FF
10873 2611                        FF            .byte	$FF
10874 2612                        FF            .byte	$FF
10875 2613                        FF            .byte	$FF
10876 2614                        C3            .byte	$C3
10877 2615                        99            .byte	$99
10878 2616                        BD            .byte	$BD
10879 2617                        BD            .byte	$BD
10880 2618                        99            .byte	$99
10881 2619                        C3            .byte	$C3
10882 261A                        FF            .byte	$FF
10883 261B                        FF            .byte	$FF
10884 261C                        FF            .byte	$FF
10885 261D                        FF            .byte	$FF
10886 261E                        FF            .byte	$FF
10887                                           ! 1420  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 
10888 261F                        00            .byte	0
10889 2620                        00            .byte	0
10890 2621                        1E            .byte	$1E
10891 2622                        0E            .byte	$E
10892 2623                        1A            .byte	$1A
10893 2624                        32            .byte	$32
10894 2625                        78            .byte	$78
10895 2626                        CC            .byte	$CC
10896                                           ! 1420 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10897 2627                        CC            .byte	$CC
10898 2628                        CC            .byte	$CC
10899 2629                        CC            .byte	$CC
10900 262A                        78            .byte	$78
10901 262B                        00            .byte	0
10902 262C                        00            .byte	0
10903 262D                        00            .byte	0
10904 262E                        00            .byte	0
10905                                           ! 1421  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10906 262F                        00            .byte	0
10907 2630                        00            .byte	0
10908 2631                        3C            .byte	$3C
10909 2632                        66            .byte	$66
10910 2633                        66            .byte	$66
10911 2634                        66            .byte	$66
10912 2635                        66            .byte	$66
10913 2636                        3C            .byte	$3C
10914 2637                        18            .byte	$18
10915 2638                        7E            .byte	$7E
10916 2639                        18            .byte	$18
10917 263A                        18            .byte	$18
10918 263B                        00            .byte	0
10919 263C                        00            .byte	0
10920 263D                        00            .byte	0
10921 263E                        00            .byte	0
10922                                           ! 1422  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10923 263F                        00            .byte	0
10924 2640                        00            .byte	0
10925 2641                        3F            .byte	$3F
10926 2642                        33            .byte	$33
10927 2643                        3F            .byte	$3F
10928 2644                        30            .byte	$30
10929 2645                        30            .byte	$30
10930 2646                        30            .byte	$30
10931 2647                        30            .byte	$30
10932 2648                        70            .byte	$70
10933 2649                        F0            .byte	$F0
10934 264A                        E0            .byte	$E0
10935 264B                        00            .byte	0
10936 264C                        00            .byte	0
10937 264D                        00            .byte	0
10938 264E                        00            .byte	0
10939                                           ! 1423  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10940 264F                        00            .byte	0
10941 2650                        00            .byte	0
10942 2651                        7F            .byte	$7F
10943 2652                        63            .byte	$63
10944 2653                        7F            .byte	$7F
10945 2654                        63            .byte	$63
10946 2655                        63            .byte	$63
10947 2656                        63            .byte	$63
10948 2657                        63            .byte	$63
10949 2658                        67            .byte	$67
10950 2659                        E7            .byte	$E7
10951 265A                        E6            .byte	$E6
10952 265B                        C0            .byte	$C0
10953 265C                        00            .byte	0
10954 265D                        00            .byte	0
10955 265E                        00            .byte	0
10956                                           ! 1424  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10957 265F                        00            .byte	0
10958 2660                        00            .byte	0
10959 2661                        00            .byte	0
10960 2662                        18            .byte	$18
10961 2663                        18            .byte	$18
10962 2664                        DB            .byte	$DB
10963 2665                        3C            .byte	$3C
10964 2666                        E7            .byte	$E7
10965 2667                        3C            .byte	$3C
10966 2668                        DB            .byte	$DB
10967 2669                        18            .byte	$18
10968 266A                        18            .byte	$18
10969 266B                        00            .byte	0
10970 266C                        00            .byte	0
10971 266D                        00            .byte	0
10972 266E                        00            .byte	0
10973                                           ! 1425  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10974 266F                        00            .byte	0
10975 2670                        80            .byte	$80
10976 2671                        C0            .byte	$C0
10977 2672                        E0            .byte	$E0
10978 2673                        F0            .byte	$F0
10979 2674                        F8            .byte	$F8
10980 2675                        FE            .byte	$FE
10981 2676                        F8            .byte	$F8
10982 2677                        F0            .byte	$F0
10983 2678                        E0            .byte	$E0
10984 2679                        C0            .byte	$C0
10985 267A                        80            .byte	$80
10986 267B                        00            .byte	0
10987 267C                        00            .byte	0
10988 267D                        00            .byte	0
10989 267E                        00            .byte	0
10990                                           ! 1426  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10991 267F                        00            .byte	0
10992 2680                        02            .byte	2
10993 2681                        06            .byte	6
10994 2682                        0E            .byte	$E
10995 2683                        1E            .byte	$1E
10996 2684                        3E            .byte	$3E
10997 2685                        FE            .byte	$FE
10998 2686                        3E            .byte	$3E
10999 2687                        1E            .byte	$1E
11000 2688                        0E            .byte	$E
11001 2689                        06            .byte	6
11002 268A                        02            .byte	2
11003 268B                        00            .byte	0
11004 268C                        00            .byte	0
11005 268D                        00            .byte	0
11006 268E                        00            .byte	0
11007                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11008 268F                        00            .byte	0
11009 2690                        00            .byte	0
11010 2691                        18            .byte	$18
11011 2692                        3C            .byte	$3C
11012 2693                        7E            .byte	$7E
11013 2694                        18            .byte	$18
11014 2695                        18            .byte	$18
11015 2696                        18            .byte	$18
11016 2697                        7E            .byte	$7E
11017 2698                        3C            .byte	$3C
11018 2699                        18            .byte	$18
11019 269A                        00            .byte	0
11020 269B                        00            .byte	0
11021 269C                        00            .byte	0
11022 269D                        00            .byte	0
11023 269E                        00            .byte	0
11024                                           ! 1428  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11025 269F                        00            .byte	0
11026 26A0                        00            .byte	0
11027 26A1                        66            .byte	$66
11028 26A2                        66            .byte	$66
11029 26A3                        66            .byte	$66
11030 26A4                        66            .byte	$66
11031 26A5                        66            .byte	$66
11032 26A6                        66            .byte	$66
11033 26A7                        66            .byte	$66
11034 26A8                        00            .byte	0
11035 26A9                        66            .byte	$66
11036 26AA                        66            .byte	$66
11037 26AB                        00            .byte	0
11038 26AC                        00            .byte	0
11039 26AD                        00            .byte	0
11040 26AE                        00            .byte	0
11041                                           ! 1429  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11042 26AF                        00            .byte	0
11043 26B0                        00            .byte	0
11044 26B1                        7F            .byte	$7F
11045 26B2                        DB            .byte	$DB
11046 26B3                        DB            .byte	$DB
11047 26B4                        DB            .byte	$DB
11048 26B5                        7B            .byte	$7B
11049 26B6                        1B            .byte	$1B
11050 26B7                        1B            .byte	$1B
11051 26B8                        1B            .byte	$1B
11052 26B9                        1B            .byte	$1B
11053 26BA                        1B            .byte	$1B
11054 26BB                        00            .byte	0
11055 26BC                        00            .byte	0
11056 26BD                        00            .byte	0
11057 26BE                        00            .byte	0
11058                                           ! 1430  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11059 26BF                        00            .byte	0
11060 26C0                        7C            .byte	$7C
11061 26C1                        C6            .byte	$C6
11062 26C2                        60            .byte	$60
11063 26C3                        38            .byte	$38
11064 26C4                        6C            .byte	$6C
11065 26C5                        C6            .byte	$C6
11066 26C6                        C6            .byte	$C6
11067 26C7                        6C            .byte	$6C
11068 26C8                        38            .byte	$38
11069 26C9                        0C            .byte	$C
11070 26CA                        C6            .byte	$C6
11071 26CB                        7C            .byte	$7C
11072 26CC                        00            .byte	0
11073 26CD                        00            .byte	0
11074 26CE                        00            .byte	0
11075                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11076 26CF                        00            .byte	0
11077 26D0                        00            .byte	0
11078 26D1                        00            .byte	0
11079 26D2                        00            .byte	0
11080 26D3                        00            .byte	0
11081 26D4                        00            .byte	0
11082 26D5                        00            .byte	0
11083 26D6                        00            .byte	0
11084 26D7                        FE            .byte	$FE
11085 26D8                        FE            .byte	$FE
11086 26D9                        FE            .byte	$FE
11087 26DA                        FE            .byte	$FE
11088 26DB                        00            .byte	0
11089 26DC                        00            .byte	0
11090 26DD                        00            .byte	0
11091 26DE                        00            .byte	0
11092                                           ! 1432  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11093 26DF                        00            .byte	0
11094 26E0                        00            .byte	0
11095 26E1                        18            .byte	$18
11096 26E2                        3C            .byte	$3C
11097 26E3                        7E            .byte	$7E
11098 26E4                        18            .byte	$18
11099 26E5                        18            .byte	$18
11100 26E6                        18            .byte	$18
11101 26E7                        7E            .byte	$7E
11102 26E8                        3C            .byte	$3C
11103 26E9                        18            .byte	$18
11104 26EA                        7E            .byte	$7E
11105 26EB                        00            .byte	0
11106 26EC                        00            .byte	0
11107 26ED                        00            .byte	0
11108 26EE                        00            .byte	0
11109                                           ! 1433  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11110 26EF                        00            .byte	0
11111 26F0                        00            .byte	0
11112 26F1                        18            .byte	$18
11113 26F2                        3C            .byte	$3C
11114 26F3                        7E            .byte	$7E
11115 26F4                        18            .byte	$18
11116 26F5                        18            .byte	$18
11117 26F6                        18            .byte	$18
11118 26F7                        18            .byte	$18
11119 26F8                        18            .byte	$18
11120 26F9                        18            .byte	$18
11121 26FA                        18            .byte	$18
11122 26FB                        00            .byte	0
11123 26FC                        00            .byte	0
11124 26FD                        00            .byte	0
11125 26FE                        00            .byte	0
11126                                           ! 1434  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11127 26FF                        00            .byte	0
11128 2700                        00            .byte	0
11129 2701                        18            .byte	$18
11130 2702                        18            .byte	$18
11131 2703                        18            .byte	$18
11132 2704                        18            .byte	$18
11133 2705                        18            .byte	$18
11134 2706                        18            .byte	$18
11135 2707                        18            .byte	$18
11136 2708                        7E            .byte	$7E
11137 2709                        3C            .byte	$3C
11138 270A                        18            .byte	$18
11139 270B                        00            .byte	0
11140 270C                        00            .byte	0
11141 270D                        00            .byte	0
11142 270E                        00            .byte	0
11143                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11144 270F                        00            .byte	0
11145 2710                        00            .byte	0
11146 2711                        00            .byte	0
11147 2712                        00            .byte	0
11148 2713                        00            .byte	0
11149 2714                        18            .byte	$18
11150 2715                        0C            .byte	$C
11151 2716                        FE            .byte	$FE
11152 2717                        0C            .byte	$C
11153 2718                        18            .byte	$18
11154 2719                        00            .byte	0
11155 271A                        00            .byte	0
11156 271B                        00            .byte	0
11157 271C                        00            .byte	0
11158 271D                        00            .byte	0
11159 271E                        00            .byte	0
11160                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11161 271F                        00            .byte	0
11162 2720                        00            .byte	0
11163 2721                        00            .byte	0
11164 2722                        00            .byte	0
11165 2723                        00            .byte	0
11166 2724                        30            .byte	$30
11167 2725                        60            .byte	$60
11168 2726                        FE            .byte	$FE
11169 2727                        60            .byte	$60
11170 2728                        30            .byte	$30
11171 2729                        00            .byte	0
11172 272A                        00            .byte	0
11173 272B                        00            .byte	0
11174 272C                        00            .byte	0
11175 272D                        00            .byte	0
11176 272E                        00            .byte	0
11177                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11178 272F                        00            .byte	0
11179 2730                        00            .byte	0
11180 2731                        00            .byte	0
11181 2732                        00            .byte	0
11182 2733                        00            .byte	0
11183 2734                        00            .byte	0
11184 2735                        C0            .byte	$C0
11185 2736                        C0            .byte	$C0
11186 2737                        C0            .byte	$C0
11187 2738                        FE            .byte	$FE
11188 2739                        00            .byte	0
11189 273A                        00            .byte	0
11190 273B                        00            .byte	0
11191 273C                        00            .byte	0
11192 273D                        00            .byte	0
11193 273E                        00            .byte	0
11194                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11195 273F                        00            .byte	0
11196 2740                        00            .byte	0
11197 2741                        00            .byte	0
11198 2742                        00            .byte	0
11199 2743                        00            .byte	0
11200 2744                        24            .byte	$24
11201 2745                        66            .byte	$66
11202 2746                        FF            .byte	$FF
11203 2747                        66            .byte	$66
11204 2748                        24            .byte	$24
11205 2749                        00            .byte	0
11206 274A                        00            .byte	0
11207 274B                        00            .byte	0
11208 274C                        00            .byte	0
11209 274D                        00            .byte	0
11210 274E                        00            .byte	0
11211                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11212 274F                        00            .byte	0
11213 2750                        00            .byte	0
11214 2751                        00            .byte	0
11215 2752                        00            .byte	0
11216 2753                        10            .byte	$10
11217 2754                        38            .byte	$38
11218 2755                        38            .byte	$38
11219 2756                        7C            .byte	$7C
11220 2757                        7C            .byte	$7C
11221 2758                        FE            .byte	$FE
11222 2759                        FE            .byte	$FE
11223 275A                        00            .byte	0
11224 275B                        00            .byte	0
11225 275C                        00            .byte	0
11226 275D                        00            .byte	0
11227 275E                        00            .byte	0
11228                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11229 275F                        00            .byte	0
11230 2760                        00            .byte	0
11231 2761                        00            .byte	0
11232 2762                        00            .byte	0
11233 2763                        FE            .byte	$FE
11234 2764                        FE            .byte	$FE
11235 2765                        7C            .byte	$7C
11236 2766                        7C            .byte	$7C
11237 2767                        38            .byte	$38
11238 2768                        38            .byte	$38
11239 2769                        10            .byte	$10
11240 276A                        00            .byte	0
11241 276B                        00            .byte	0
11242 276C                        00            .byte	0
11243 276D                        00            .byte	0
11244 276E                        00            .byte	0
11245                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11246 276F                        00            .byte	0
11247 2770                        00            .byte	0
11248 2771                        00            .byte	0
11249 2772                        00            .byte	0
11250 2773                        00            .byte	0
11251 2774                        00            .byte	0
11252 2775                        00            .byte	0
11253 2776                        00            .byte	0
11254 2777                        00            .byte	0
11255                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11256 2778                        00            .byte	0
11257 2779                        00            .byte	0
11258 277A                        00            .byte	0
11259 277B                        00            .byte	0
11260 277C                        00            .byte	0
11261 277D                        00            .byte	0
11262 277E                        00            .byte	0
11263                                           ! 1442  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11264 277F                        00            .byte	0
11265 2780                        00            .byte	0
11266 2781                        18            .byte	$18
11267 2782                        3C            .byte	$3C
11268 2783                        3C            .byte	$3C
11269 2784                        3C            .byte	$3C
11270 2785                        18            .byte	$18
11271 2786                        18            .byte	$18
11272 2787                        18            .byte	$18
11273 2788                        00            .byte	0
11274 2789                        18            .byte	$18
11275 278A                        18            .byte	$18
11276 278B                        00            .byte	0
11277 278C                        00            .byte	0
11278 278D                        00            .byte	0
11279 278E                        00            .byte	0
11280                                           ! 1443  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11281 278F                        00            .byte	0
11282 2790                        66            .byte	$66
11283 2791                        66            .byte	$66
11284 2792                        66            .byte	$66
11285 2793                        24            .byte	$24
11286 2794                        00            .byte	0
11287 2795                        00            .byte	0
11288 2796                        00            .byte	0
11289 2797                        00            .byte	0
11290 2798                        00            .byte	0
11291 2799                        00            .byte	0
11292 279A                        00            .byte	0
11293 279B                        00            .byte	0
11294 279C                        00            .byte	0
11295 279D                        00            .byte	0
11296 279E                        00            .byte	0
11297                                           ! 1444  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11298 279F                        00            .byte	0
11299 27A0                        00            .byte	0
11300 27A1                        00            .byte	0
11301 27A2                        6C            .byte	$6C
11302 27A3                        6C            .byte	$6C
11303 27A4                        FE            .byte	$FE
11304 27A5                        6C            .byte	$6C
11305 27A6                        6C            .byte	$6C
11306 27A7                        6C            .byte	$6C
11307 27A8                        FE            .byte	$FE
11308 27A9                        6C            .byte	$6C
11309 27AA                        6C            .byte	$6C
11310 27AB                        00            .byte	0
11311 27AC                        00            .byte	0
11312 27AD                        00            .byte	0
11313 27AE                        00            .byte	0
11314                                           ! 1445  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11315 27AF                        18            .byte	$18
11316 27B0                        18            .byte	$18
11317 27B1                        7C            .byte	$7C
11318 27B2                        C6            .byte	$C6
11319 27B3                        C2            .byte	$C2
11320 27B4                        C0            .byte	$C0
11321 27B5                        7C            .byte	$7C
11322 27B6                        06            .byte	6
11323 27B7                        06            .byte	6
11324 27B8                        86            .byte	$86
11325 27B9                        C6            .byte	$C6
11326 27BA                        7C            .byte	$7C
11327 27BB                        18            .byte	$18
11328 27BC                        18            .byte	$18
11329 27BD                        00            .byte	0
11330 27BE                        00            .byte	0
11331                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11332 27BF                        00            .byte	0
11333 27C0                        00            .byte	0
11334 27C1                        00            .byte	0
11335 27C2                        00            .byte	0
11336 27C3                        C2            .byte	$C2
11337 27C4                        C6            .byte	$C6
11338 27C5                        0C            .byte	$C
11339 27C6                        18            .byte	$18
11340 27C7                        30            .byte	$30
11341 27C8                        60            .byte	$60
11342 27C9                        C6            .byte	$C6
11343 27CA                        86            .byte	$86
11344 27CB                        00            .byte	0
11345 27CC                        00            .byte	0
11346 27CD                        00            .byte	0
11347 27CE                        00            .byte	0
11348                                           ! 1447  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11349 27CF                        00            .byte	0
11350 27D0                        00            .byte	0
11351 27D1                        38            .byte	$38
11352 27D2                        6C            .byte	$6C
11353 27D3                        6C            .byte	$6C
11354 27D4                        38            .byte	$38
11355 27D5                        76            .byte	$76
11356 27D6                        DC            .byte	$DC
11357 27D7                        CC            .byte	$CC
11358 27D8                        CC            .byte	$CC
11359 27D9                        CC            .byte	$CC
11360 27DA                        76            .byte	$76
11361 27DB                        00            .byte	0
11362 27DC                        00            .byte	0
11363 27DD                        00            .byte	0
11364 27DE                        00            .byte	0
11365                                           ! 1448  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11366 27DF                        00            .byte	0
11367 27E0                        30            .byte	$30
11368 27E1                        30            .byte	$30
11369 27E2                        30            .byte	$30
11370 27E3                        60            .byte	$60
11371 27E4                        00            .byte	0
11372 27E5                        00            .byte	0
11373 27E6                        00            .byte	0
11374 27E7                        00            .byte	0
11375 27E8                        00            .byte	0
11376 27E9                        00            .byte	0
11377 27EA                        00            .byte	0
11378 27EB                        00            .byte	0
11379 27EC                        00            .byte	0
11380 27ED                        00            .byte	0
11381 27EE                        00            .byte	0
11382                                           ! 1449  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11383 27EF                        00            .byte	0
11384 27F0                        00            .byte	0
11385 27F1                        0C            .byte	$C
11386 27F2                        18            .byte	$18
11387 27F3                        30            .byte	$30
11388 27F4                        30            .byte	$30
11389 27F5                        30            .byte	$30
11390 27F6                        30            .byte	$30
11391 27F7                        30            .byte	$30
11392 27F8                        30            .byte	$30
11393 27F9                        18            .byte	$18
11394 27FA                        0C            .byte	$C
11395 27FB                        00            .byte	0
11396 27FC                        00            .byte	0
11397 27FD                        00            .byte	0
11398 27FE                        00            .byte	0
11399                                           ! 1450  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11400 27FF                        00            .byte	0
11401 2800                        00            .byte	0
11402 2801                        30            .byte	$30
11403 2802                        18            .byte	$18
11404 2803                        0C            .byte	$C
11405 2804                        0C            .byte	$C
11406 2805                        0C            .byte	$C
11407 2806                        0C            .byte	$C
11408 2807                        0C            .byte	$C
11409 2808                        0C            .byte	$C
11410 2809                        18            .byte	$18
11411 280A                        30            .byte	$30
11412 280B                        00            .byte	0
11413 280C                        00            .byte	0
11414 280D                        00            .byte	0
11415 280E                        00            .byte	0
11416                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11417 280F                        00            .byte	0
11418 2810                        00            .byte	0
11419 2811                        00            .byte	0
11420 2812                        00            .byte	0
11421 2813                        00            .byte	0
11422 2814                        66            .byte	$66
11423 2815                        3C            .byte	$3C
11424 2816                        FF            .byte	$FF
11425 2817                        3C            .byte	$3C
11426 2818                        66            .byte	$66
11427 2819                        00            .byte	0
11428 281A                        00            .byte	0
11429 281B                        00            .byte	0
11430 281C                        00            .byte	0
11431 281D                        00            .byte	0
11432 281E                        00            .byte	0
11433                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11434 281F                        00            .byte	0
11435 2820                        00            .byte	0
11436 2821                        00            .byte	0
11437 2822                        00            .byte	0
11438 2823                        00            .byte	0
11439 2824                        18            .byte	$18
11440 2825                        18            .byte	$18
11441 2826                        7E            .byte	$7E
11442 2827                        18            .byte	$18
11443 2828                        18            .byte	$18
11444 2829                        00            .byte	0
11445 282A                        00            .byte	0
11446 282B                        00            .byte	0
11447 282C                        00            .byte	0
11448 282D                        00            .byte	0
11449 282E                        00            .byte	0
11450                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11451 282F                        00            .byte	0
11452 2830                        00            .byte	0
11453 2831                        00            .byte	0
11454 2832                        00            .byte	0
11455 2833                        00            .byte	0
11456 2834                        00            .byte	0
11457 2835                        00            .byte	0
11458 2836                        00            .byte	0
11459 2837                        00            .byte	0
11460 2838                        18            .byte	$18
11461 2839                        18            .byte	$18
11462 283A                        18            .byte	$18
11463 283B                        30            .byte	$30
11464 283C                        00            .byte	0
11465 283D                        00            .byte	0
11466 283E                        00            .byte	0
11467                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11468 283F                        00            .byte	0
11469 2840                        00            .byte	0
11470 2841                        00            .byte	0
11471 2842                        00            .byte	0
11472 2843                        00            .byte	0
11473 2844                        00            .byte	0
11474 2845                        00            .byte	0
11475 2846                        FE            .byte	$FE
11476 2847                        00            .byte	0
11477 2848                        00            .byte	0
11478 2849                        00            .byte	0
11479 284A                        00            .byte	0
11480 284B                        00            .byte	0
11481 284C                        00            .byte	0
11482 284D                        00            .byte	0
11483 284E                        00            .byte	0
11484                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11485 284F                        00            .byte	0
11486 2850                        00            .byte	0
11487 2851                        00            .byte	0
11488 2852                        00            .byte	0
11489 2853                        00            .byte	0
11490 2854                        00            .byte	0
11491 2855                        00            .byte	0
11492 2856                        00            .byte	0
11493 2857                        00            .byte	0
11494 2858                        00            .byte	0
11495 2859                        18            .byte	$18
11496 285A                        18            .byte	$18
11497 285B                        00            .byte	0
11498 285C                        00            .byte	0
11499 285D                        00            .byte	0
11500 285E                        00            .byte	0
11501                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11502 285F                        00            .byte	0
11503 2860                        00            .byte	0
11504 2861                        00            .byte	0
11505 2862                        00            .byte	0
11506 2863                        02            .byte	2
11507 2864                        06            .byte	6
11508 2865                        0C            .byte	$C
11509 2866                        18            .byte	$18
11510 2867                        30            .byte	$30
11511 2868                        60            .byte	$60
11512 2869                        C0            .byte	$C0
11513 286A                        80            .byte	$80
11514 286B                        00            .byte	0
11515 286C                        00            .byte	0
11516 286D                        00            .byte	0
11517 286E                        00            .byte	0
11518                                           ! 1457  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11519 286F                        00            .byte	0
11520 2870                        00            .byte	0
11521 2871                        3C            .byte	$3C
11522 2872                        66            .byte	$66
11523 2873                        C3            .byte	$C3
11524 2874                        C3            .byte	$C3
11525 2875                        DB            .byte	$DB
11526 2876                        DB            .byte	$DB
11527 2877                        C3            .byte	$C3
11528 2878                        C3            .byte	$C3
11529 2879                        66            .byte	$66
11530 287A                        3C            .byte	$3C
11531 287B                        00            .byte	0
11532 287C                        00            .byte	0
11533 287D                        00            .byte	0
11534 287E                        00            .byte	0
11535                                           ! 1458  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11536 287F                        00            .byte	0
11537 2880                        00            .byte	0
11538 2881                        18            .byte	$18
11539 2882                        38            .byte	$38
11540 2883                        78            .byte	$78
11541 2884                        18            .byte	$18
11542 2885                        18            .byte	$18
11543 2886                        18            .byte	$18
11544 2887                        18            .byte	$18
11545 2888                        18            .byte	$18
11546 2889                        18            .byte	$18
11547 288A                        7E            .byte	$7E
11548 288B                        00            .byte	0
11549 288C                        00            .byte	0
11550 288D                        00            .byte	0
11551 288E                        00            .byte	0
11552                                           ! 1459  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11553 288F                        00            .byte	0
11554 2890                        00            .byte	0
11555 2891                        7C            .byte	$7C
11556 2892                        C6            .byte	$C6
11557 2893                        06            .byte	6
11558 2894                        0C            .byte	$C
11559 2895                        18            .byte	$18
11560 2896                        30            .byte	$30
11561 2897                        60            .byte	$60
11562 2898                        C0            .byte	$C0
11563 2899                        C6            .byte	$C6
11564 289A                        FE            .byte	$FE
11565 289B                        00            .byte	0
11566 289C                        00            .byte	0
11567 289D                        00            .byte	0
11568 289E                        00            .byte	0
11569                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11570 289F                        00            .byte	0
11571 28A0                        00            .byte	0
11572 28A1                        7C            .byte	$7C
11573 28A2                        C6            .byte	$C6
11574 28A3                        06            .byte	6
11575 28A4                        06            .byte	6
11576 28A5                        3C            .byte	$3C
11577 28A6                        06            .byte	6
11578 28A7                        06            .byte	6
11579 28A8                        06            .byte	6
11580 28A9                        C6            .byte	$C6
11581 28AA                        7C            .byte	$7C
11582 28AB                        00            .byte	0
11583 28AC                        00            .byte	0
11584 28AD                        00            .byte	0
11585 28AE                        00            .byte	0
11586                                           ! 1461  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11587 28AF                        00            .byte	0
11588 28B0                        00            .byte	0
11589 28B1                        0C            .byte	$C
11590 28B2                        1C            .byte	$1C
11591 28B3                        3C            .byte	$3C
11592 28B4                        6C            .byte	$6C
11593 28B5                        CC            .byte	$CC
11594 28B6                        FE            .byte	$FE
11595 28B7                        0C            .byte	$C
11596 28B8                        0C            .byte	$C
11597 28B9                        0C            .byte	$C
11598 28BA                        1E            .byte	$1E
11599 28BB                        00            .byte	0
11600 28BC                        00            .byte	0
11601 28BD                        00            .byte	0
11602 28BE                        00            .byte	0
11603                                           ! 1462  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c
11604 28BF                        00            .byte	0
11605 28C0                        00            .byte	0
11606 28C1                        FE            .byte	$FE
11607 28C2                        C0            .byte	$C0
11608 28C3                        C0            .byte	$C0
11609 28C4                        C0            .byte	$C0
11610 28C5                        FC            .byte	$FC
11611 28C6                        06            .byte	6
11612 28C7                        06            .byte	6
11613 28C8                        06            .byte	6
11614 28C9                        C6            .byte	$C6
11615                                           ! 1462 , 0x00, 0x00, 0x00, 0x00,
11616 28CA                        7C            .byte	$7C
11617 28CB                        00            .byte	0
11618 28CC                        00            .byte	0
11619 28CD                        00            .byte	0
11620 28CE                        00            .byte	0
11621                                           ! 1463  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11622 28CF                        00            .byte	0
11623 28D0                        00            .byte	0
11624 28D1                        38            .byte	$38
11625 28D2                        60            .byte	$60
11626 28D3                        C0            .byte	$C0
11627 28D4                        C0            .byte	$C0
11628 28D5                        FC            .byte	$FC
11629 28D6                        C6            .byte	$C6
11630 28D7                        C6            .byte	$C6
11631 28D8                        C6            .byte	$C6
11632 28D9                        C6            .byte	$C6
11633 28DA                        7C            .byte	$7C
11634 28DB                        00            .byte	0
11635 28DC                        00            .byte	0
11636 28DD                        00            .byte	0
11637 28DE                        00            .byte	0
11638                                           ! 1464  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11639 28DF                        00            .byte	0
11640 28E0                        00            .byte	0
11641 28E1                        FE            .byte	$FE
11642 28E2                        C6            .byte	$C6
11643 28E3                        06            .byte	6
11644 28E4                        06            .byte	6
11645 28E5                        0C            .byte	$C
11646 28E6                        18            .byte	$18
11647 28E7                        30            .byte	$30
11648 28E8                        30            .byte	$30
11649 28E9                        30            .byte	$30
11650 28EA                        30            .byte	$30
11651 28EB                        00            .byte	0
11652 28EC                        00            .byte	0
11653 28ED                        00            .byte	0
11654 28EE                        00            .byte	0
11655                                           ! 1465  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11656 28EF                        00            .byte	0
11657 28F0                        00            .byte	0
11658 28F1                        7C            .byte	$7C
11659 28F2                        C6            .byte	$C6
11660 28F3                        C6            .byte	$C6
11661 28F4                        C6            .byte	$C6
11662 28F5                        7C            .byte	$7C
11663 28F6                        C6            .byte	$C6
11664 28F7                        C6            .byte	$C6
11665 28F8                        C6            .byte	$C6
11666 28F9                        C6            .byte	$C6
11667 28FA                        7C            .byte	$7C
11668 28FB                        00            .byte	0
11669 28FC                        00            .byte	0
11670 28FD                        00            .byte	0
11671 28FE                        00            .byte	0
11672                                           ! 1466  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11673 28FF                        00            .byte	0
11674 2900                        00            .byte	0
11675 2901                        7C            .byte	$7C
11676 2902                        C6            .byte	$C6
11677 2903                        C6            .byte	$C6
11678 2904                        C6            .byte	$C6
11679 2905                        7E            .byte	$7E
11680 2906                        06            .byte	6
11681 2907                        06            .byte	6
11682 2908                        06            .byte	6
11683 2909                        0C            .byte	$C
11684 290A                        78            .byte	$78
11685 290B                        00            .byte	0
11686 290C                        00            .byte	0
11687 290D                        00            .byte	0
11688 290E                        00            .byte	0
11689                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11690 290F                        00            .byte	0
11691 2910                        00            .byte	0
11692 2911                        00            .byte	0
11693 2912                        00            .byte	0
11694 2913                        18            .byte	$18
11695 2914                        18            .byte	$18
11696 2915                        00            .byte	0
11697 2916                        00            .byte	0
11698 2917                        00            .byte	0
11699 2918                        18            .byte	$18
11700 2919                        18            .byte	$18
11701 291A                        00            .byte	0
11702 291B                        00            .byte	0
11703 291C                        00            .byte	0
11704 291D                        00            .byte	0
11705 291E                        00            .byte	0
11706                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11707 291F                        00            .byte	0
11708 2920                        00            .byte	0
11709 2921                        00            .byte	0
11710 2922                        00            .byte	0
11711 2923                        18            .byte	$18
11712 2924                        18            .byte	$18
11713 2925                        00            .byte	0
11714 2926                        00            .byte	0
11715 2927                        00            .byte	0
11716 2928                        18            .byte	$18
11717 2929                        18            .byte	$18
11718 292A                        30            .byte	$30
11719 292B                        00            .byte	0
11720 292C                        00            .byte	0
11721 292D                        00            .byte	0
11722 292E                        00            .byte	0
11723                                           ! 1469  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11724 292F                        00            .byte	0
11725 2930                        00            .byte	0
11726 2931                        00            .byte	0
11727 2932                        06            .byte	6
11728 2933                        0C            .byte	$C
11729 2934                        18            .byte	$18
11730 2935                        30            .byte	$30
11731 2936                        60            .byte	$60
11732 2937                        30            .byte	$30
11733 2938                        18            .byte	$18
11734 2939                        0C            .byte	$C
11735 293A                        06            .byte	6
11736 293B                        00            .byte	0
11737 293C                        00            .byte	0
11738 293D                        00            .byte	0
11739 293E                        00            .byte	0
11740                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11741 293F                        00            .byte	0
11742 2940                        00            .byte	0
11743 2941                        00            .byte	0
11744 2942                        00            .byte	0
11745 2943                        00            .byte	0
11746 2944                        7E            .byte	$7E
11747 2945                        00            .byte	0
11748 2946                        00            .byte	0
11749 2947                        7E            .byte	$7E
11750 2948                        00            .byte	0
11751 2949                        00            .byte	0
11752 294A                        00            .byte	0
11753 294B                        00            .byte	0
11754 294C                        00            .byte	0
11755 294D                        00            .byte	0
11756 294E                        00            .byte	0
11757                                           ! 1471  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11758 294F                        00            .byte	0
11759 2950                        00            .byte	0
11760 2951                        00            .byte	0
11761 2952                        60            .byte	$60
11762 2953                        30            .byte	$30
11763 2954                        18            .byte	$18
11764 2955                        0C            .byte	$C
11765 2956                        06            .byte	6
11766 2957                        0C            .byte	$C
11767 2958                        18            .byte	$18
11768 2959                        30            .byte	$30
11769 295A                        60            .byte	$60
11770 295B                        00            .byte	0
11771 295C                        00            .byte	0
11772 295D                        00            .byte	0
11773 295E                        00            .byte	0
11774                                           ! 1472  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11775 295F                        00            .byte	0
11776 2960                        00            .byte	0
11777 2961                        7C            .byte	$7C
11778 2962                        C6            .byte	$C6
11779 2963                        C6            .byte	$C6
11780 2964                        0C            .byte	$C
11781 2965                        18            .byte	$18
11782 2966                        18            .byte	$18
11783 2967                        18            .byte	$18
11784 2968                        00            .byte	0
11785 2969                        18            .byte	$18
11786 296A                        18            .byte	$18
11787 296B                        00            .byte	0
11788 296C                        00            .byte	0
11789 296D                        00            .byte	0
11790 296E                        00            .byte	0
11791                                           ! 1473  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11792 296F                        00            .byte	0
11793 2970                        00            .byte	0
11794 2971                        00            .byte	0
11795 2972                        7C            .byte	$7C
11796 2973                        C6            .byte	$C6
11797 2974                        C6            .byte	$C6
11798 2975                        DE            .byte	$DE
11799 2976                        DE            .byte	$DE
11800 2977                        DE            .byte	$DE
11801 2978                        DC            .byte	$DC
11802 2979                        C0            .byte	$C0
11803 297A                        7C            .byte	$7C
11804 297B                        00            .byte	0
11805 297C                        00            .byte	0
11806 297D                        00            .byte	0
11807 297E                        00            .byte	0
11808                                           ! 1474  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11809 297F                        00            .byte	0
11810 2980                        00            .byte	0
11811 2981                        10            .byte	$10
11812 2982                        38            .byte	$38
11813 2983                        6C            .byte	$6C
11814 2984                        C6            .byte	$C6
11815 2985                        C6            .byte	$C6
11816 2986                        FE            .byte	$FE
11817 2987                        C6            .byte	$C6
11818 2988                        C6            .byte	$C6
11819 2989                        C6            .byte	$C6
11820 298A                        C6            .byte	$C6
11821 298B                        00            .byte	0
11822 298C                        00            .byte	0
11823 298D                        00            .byte	0
11824 298E                        00            .byte	0
11825                                           ! 1475  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11826 298F                        00            .byte	0
11827 2990                        00            .byte	0
11828 2991                        FC            .byte	$FC
11829 2992                        66            .byte	$66
11830 2993                        66            .byte	$66
11831 2994                        66            .byte	$66
11832 2995                        7C            .byte	$7C
11833 2996                        66            .byte	$66
11834 2997                        66            .byte	$66
11835 2998                        66            .byte	$66
11836 2999                        66            .byte	$66
11837 299A                        FC            .byte	$FC
11838 299B                        00            .byte	0
11839 299C                        00            .byte	0
11840 299D                        00            .byte	0
11841 299E                        00            .byte	0
11842                                           ! 1476  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11843 299F                        00            .byte	0
11844 29A0                        00            .byte	0
11845 29A1                        3C            .byte	$3C
11846 29A2                        66            .byte	$66
11847 29A3                        C2            .byte	$C2
11848 29A4                        C0            .byte	$C0
11849 29A5                        C0            .byte	$C0
11850 29A6                        C0            .byte	$C0
11851 29A7                        C0            .byte	$C0
11852 29A8                        C2            .byte	$C2
11853 29A9                        66            .byte	$66
11854 29AA                        3C            .byte	$3C
11855 29AB                        00            .byte	0
11856 29AC                        00            .byte	0
11857 29AD                        00            .byte	0
11858 29AE                        00            .byte	0
11859                                           ! 1477  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11860 29AF                        00            .byte	0
11861 29B0                        00            .byte	0
11862 29B1                        F8            .byte	$F8
11863 29B2                        6C            .byte	$6C
11864 29B3                        66            .byte	$66
11865 29B4                        66            .byte	$66
11866 29B5                        66            .byte	$66
11867 29B6                        66            .byte	$66
11868 29B7                        66            .byte	$66
11869 29B8                        66            .byte	$66
11870 29B9                        6C            .byte	$6C
11871 29BA                        F8            .byte	$F8
11872 29BB                        00            .byte	0
11873 29BC                        00            .byte	0
11874 29BD                        00            .byte	0
11875 29BE                        00            .byte	0
11876                                           ! 1478  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11877 29BF                        00            .byte	0
11878 29C0                        00            .byte	0
11879 29C1                        FE            .byte	$FE
11880 29C2                        66            .byte	$66
11881 29C3                        62            .byte	$62
11882 29C4                        68            .byte	$68
11883 29C5                        78            .byte	$78
11884 29C6                        68            .byte	$68
11885 29C7                        60            .byte	$60
11886 29C8                        62            .byte	$62
11887 29C9                        66            .byte	$66
11888 29CA                        FE            .byte	$FE
11889 29CB                        00            .byte	0
11890 29CC                        00            .byte	0
11891 29CD                        00            .byte	0
11892 29CE                        00            .byte	0
11893                                           ! 1479  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11894 29CF                        00            .byte	0
11895 29D0                        00            .byte	0
11896 29D1                        FE            .byte	$FE
11897 29D2                        66            .byte	$66
11898 29D3                        62            .byte	$62
11899 29D4                        68            .byte	$68
11900 29D5                        78            .byte	$78
11901 29D6                        68            .byte	$68
11902 29D7                        60            .byte	$60
11903 29D8                        60            .byte	$60
11904 29D9                        60            .byte	$60
11905 29DA                        F0            .byte	$F0
11906 29DB                        00            .byte	0
11907 29DC                        00            .byte	0
11908 29DD                        00            .byte	0
11909 29DE                        00            .byte	0
11910                                           ! 1480  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11911 29DF                        00            .byte	0
11912 29E0                        00            .byte	0
11913 29E1                        3C            .byte	$3C
11914 29E2                        66            .byte	$66
11915 29E3                        C2            .byte	$C2
11916 29E4                        C0            .byte	$C0
11917 29E5                        C0            .byte	$C0
11918 29E6                        DE            .byte	$DE
11919 29E7                        C6            .byte	$C6
11920 29E8                        C6            .byte	$C6
11921 29E9                        66            .byte	$66
11922 29EA                        3A            .byte	$3A
11923 29EB                        00            .byte	0
11924 29EC                        00            .byte	0
11925 29ED                        00            .byte	0
11926 29EE                        00            .byte	0
11927                                           ! 1481  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11928 29EF                        00            .byte	0
11929 29F0                        00            .byte	0
11930 29F1                        C6            .byte	$C6
11931 29F2                        C6            .byte	$C6
11932 29F3                        C6            .byte	$C6
11933 29F4                        C6            .byte	$C6
11934 29F5                        FE            .byte	$FE
11935 29F6                        C6            .byte	$C6
11936 29F7                        C6            .byte	$C6
11937 29F8                        C6            .byte	$C6
11938 29F9                        C6            .byte	$C6
11939 29FA                        C6            .byte	$C6
11940 29FB                        00            .byte	0
11941 29FC                        00            .byte	0
11942 29FD                        00            .byte	0
11943 29FE                        00            .byte	0
11944                                           ! 1482  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11945 29FF                        00            .byte	0
11946 2A00                        00            .byte	0
11947 2A01                        3C            .byte	$3C
11948 2A02                        18            .byte	$18
11949 2A03                        18            .byte	$18
11950 2A04                        18            .byte	$18
11951 2A05                        18            .byte	$18
11952 2A06                        18            .byte	$18
11953 2A07                        18            .byte	$18
11954 2A08                        18            .byte	$18
11955 2A09                        18            .byte	$18
11956 2A0A                        3C            .byte	$3C
11957 2A0B                        00            .byte	0
11958 2A0C                        00            .byte	0
11959 2A0D                        00            .byte	0
11960 2A0E                        00            .byte	0
11961                                           ! 1483  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x0
11962 2A0F                        00            .byte	0
11963 2A10                        00            .byte	0
11964 2A11                        1E            .byte	$1E
11965 2A12                        0C            .byte	$C
11966 2A13                        0C            .byte	$C
11967 2A14                        0C            .byte	$C
11968 2A15                        0C            .byte	$C
11969 2A16                        0C            .byte	$C
11970 2A17                        CC            .byte	$CC
11971 2A18                        CC            .byte	$CC
11972 2A19                        CC            .byte	$CC
11973 2A1A                        78            .byte	$78
11974 2A1B                        00            .byte	0
11975                                           ! 1483 0, 0x00, 0x00,
11976 2A1C                        00            .byte	0
11977 2A1D                        00            .byte	0
11978 2A1E                        00            .byte	0
11979                                           ! 1484  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11980 2A1F                        00            .byte	0
11981 2A20                        00            .byte	0
11982 2A21                        E6            .byte	$E6
11983 2A22                        66            .byte	$66
11984 2A23                        66            .byte	$66
11985 2A24                        6C            .byte	$6C
11986 2A25                        78            .byte	$78
11987 2A26                        78            .byte	$78
11988 2A27                        6C            .byte	$6C
11989 2A28                        66            .byte	$66
11990 2A29                        66            .byte	$66
11991 2A2A                        E6            .byte	$E6
11992 2A2B                        00            .byte	0
11993 2A2C                        00            .byte	0
11994 2A2D                        00            .byte	0
11995 2A2E                        00            .byte	0
11996                                           ! 1485  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11997 2A2F                        00            .byte	0
11998 2A30                        00            .byte	0
11999 2A31                        F0            .byte	$F0
12000 2A32                        60            .byte	$60
12001 2A33                        60            .byte	$60
12002 2A34                        60            .byte	$60
12003 2A35                        60            .byte	$60
12004 2A36                        60            .byte	$60
12005 2A37                        60            .byte	$60
12006 2A38                        62            .byte	$62
12007 2A39                        66            .byte	$66
12008 2A3A                        FE            .byte	$FE
12009 2A3B                        00            .byte	0
12010 2A3C                        00            .byte	0
12011 2A3D                        00            .byte	0
12012 2A3E                        00            .byte	0
12013                                           ! 1486  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12014 2A3F                        00            .byte	0
12015 2A40                        00            .byte	0
12016 2A41                        C3            .byte	$C3
12017 2A42                        E7            .byte	$E7
12018 2A43                        FF            .byte	$FF
12019 2A44                        FF            .byte	$FF
12020 2A45                        DB            .byte	$DB
12021 2A46                        C3            .byte	$C3
12022 2A47                        C3            .byte	$C3
12023 2A48                        C3            .byte	$C3
12024 2A49                        C3            .byte	$C3
12025 2A4A                        C3            .byte	$C3
12026 2A4B                        00            .byte	0
12027 2A4C                        00            .byte	0
12028 2A4D                        00            .byte	0
12029 2A4E                        00            .byte	0
12030                                           ! 1487  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12031 2A4F                        00            .byte	0
12032 2A50                        00            .byte	0
12033 2A51                        C6            .byte	$C6
12034 2A52                        E6            .byte	$E6
12035 2A53                        F6            .byte	$F6
12036 2A54                        FE            .byte	$FE
12037 2A55                        DE            .byte	$DE
12038 2A56                        CE            .byte	$CE
12039 2A57                        C6            .byte	$C6
12040 2A58                        C6            .byte	$C6
12041 2A59                        C6            .byte	$C6
12042 2A5A                        C6            .byte	$C6
12043 2A5B                        00            .byte	0
12044 2A5C                        00            .byte	0
12045 2A5D                        00            .byte	0
12046 2A5E                        00            .byte	0
12047                                           ! 1488  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12048 2A5F                        00            .byte	0
12049 2A60                        00            .byte	0
12050 2A61                        7C            .byte	$7C
12051 2A62                        C6            .byte	$C6
12052 2A63                        C6            .byte	$C6
12053 2A64                        C6            .byte	$C6
12054 2A65                        C6            .byte	$C6
12055 2A66                        C6            .byte	$C6
12056 2A67                        C6            .byte	$C6
12057 2A68                        C6            .byte	$C6
12058 2A69                        C6            .byte	$C6
12059 2A6A                        7C            .byte	$7C
12060 2A6B                        00            .byte	0
12061 2A6C                        00            .byte	0
12062 2A6D                        00            .byte	0
12063 2A6E                        00            .byte	0
12064                                           ! 1489  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12065 2A6F                        00            .byte	0
12066 2A70                        00            .byte	0
12067 2A71                        FC            .byte	$FC
12068 2A72                        66            .byte	$66
12069 2A73                        66            .byte	$66
12070 2A74                        66            .byte	$66
12071 2A75                        7C            .byte	$7C
12072 2A76                        60            .byte	$60
12073 2A77                        60            .byte	$60
12074 2A78                        60            .byte	$60
12075 2A79                        60            .byte	$60
12076 2A7A                        F0            .byte	$F0
12077 2A7B                        00            .byte	0
12078 2A7C                        00            .byte	0
12079 2A7D                        00            .byte	0
12080 2A7E                        00            .byte	0
12081                                           ! 1490  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12082 2A7F                        00            .byte	0
12083 2A80                        00            .byte	0
12084 2A81                        7C            .byte	$7C
12085 2A82                        C6            .byte	$C6
12086 2A83                        C6            .byte	$C6
12087 2A84                        C6            .byte	$C6
12088 2A85                        C6            .byte	$C6
12089 2A86                        C6            .byte	$C6
12090 2A87                        C6            .byte	$C6
12091 2A88                        D6            .byte	$D6
12092 2A89                        DE            .byte	$DE
12093 2A8A                        7C            .byte	$7C
12094 2A8B                        0C            .byte	$C
12095 2A8C                        0E            .byte	$E
12096 2A8D                        00            .byte	0
12097 2A8E                        00            .byte	0
12098                                           ! 1491  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12099 2A8F                        00            .byte	0
12100 2A90                        00            .byte	0
12101 2A91                        FC            .byte	$FC
12102 2A92                        66            .byte	$66
12103 2A93                        66            .byte	$66
12104 2A94                        66            .byte	$66
12105 2A95                        7C            .byte	$7C
12106 2A96                        6C            .byte	$6C
12107 2A97                        66            .byte	$66
12108 2A98                        66            .byte	$66
12109 2A99                        66            .byte	$66
12110 2A9A                        E6            .byte	$E6
12111 2A9B                        00            .byte	0
12112 2A9C                        00            .byte	0
12113 2A9D                        00            .byte	0
12114 2A9E                        00            .byte	0
12115                                           ! 1492  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12116 2A9F                        00            .byte	0
12117 2AA0                        00            .byte	0
12118 2AA1                        7C            .byte	$7C
12119 2AA2                        C6            .byte	$C6
12120 2AA3                        C6            .byte	$C6
12121 2AA4                        60            .byte	$60
12122 2AA5                        38            .byte	$38
12123 2AA6                        0C            .byte	$C
12124 2AA7                        06            .byte	6
12125 2AA8                        C6            .byte	$C6
12126 2AA9                        C6            .byte	$C6
12127 2AAA                        7C            .byte	$7C
12128 2AAB                        00            .byte	0
12129 2AAC                        00            .byte	0
12130 2AAD                        00            .byte	0
12131 2AAE                        00            .byte	0
12132                                           ! 1493  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12133 2AAF                        00            .byte	0
12134 2AB0                        00            .byte	0
12135 2AB1                        FF            .byte	$FF
12136 2AB2                        DB            .byte	$DB
12137 2AB3                        99            .byte	$99
12138 2AB4                        18            .byte	$18
12139 2AB5                        18            .byte	$18
12140 2AB6                        18            .byte	$18
12141 2AB7                        18            .byte	$18
12142 2AB8                        18            .byte	$18
12143 2AB9                        18            .byte	$18
12144 2ABA                        3C            .byte	$3C
12145 2ABB                        00            .byte	0
12146 2ABC                        00            .byte	0
12147 2ABD                        00            .byte	0
12148 2ABE                        00            .byte	0
12149                                           ! 1494  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12150 2ABF                        00            .byte	0
12151 2AC0                        00            .byte	0
12152 2AC1                        C6            .byte	$C6
12153 2AC2                        C6            .byte	$C6
12154 2AC3                        C6            .byte	$C6
12155 2AC4                        C6            .byte	$C6
12156 2AC5                        C6            .byte	$C6
12157 2AC6                        C6            .byte	$C6
12158 2AC7                        C6            .byte	$C6
12159 2AC8                        C6            .byte	$C6
12160 2AC9                        C6            .byte	$C6
12161 2ACA                        7C            .byte	$7C
12162 2ACB                        00            .byte	0
12163 2ACC                        00            .byte	0
12164 2ACD                        00            .byte	0
12165 2ACE                        00            .byte	0
12166                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12167 2ACF                        00            .byte	0
12168 2AD0                        00            .byte	0
12169 2AD1                        C3            .byte	$C3
12170 2AD2                        C3            .byte	$C3
12171 2AD3                        C3            .byte	$C3
12172 2AD4                        C3            .byte	$C3
12173 2AD5                        C3            .byte	$C3
12174 2AD6                        C3            .byte	$C3
12175 2AD7                        C3            .byte	$C3
12176 2AD8                        66            .byte	$66
12177 2AD9                        3C            .byte	$3C
12178 2ADA                        18            .byte	$18
12179 2ADB                        00            .byte	0
12180 2ADC                        00            .byte	0
12181 2ADD                        00            .byte	0
12182 2ADE                        00            .byte	0
12183                                           ! 1496  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12184 2ADF                        00            .byte	0
12185 2AE0                        00            .byte	0
12186 2AE1                        C3            .byte	$C3
12187 2AE2                        C3            .byte	$C3
12188 2AE3                        C3            .byte	$C3
12189 2AE4                        C3            .byte	$C3
12190 2AE5                        C3            .byte	$C3
12191 2AE6                        DB            .byte	$DB
12192 2AE7                        DB            .byte	$DB
12193 2AE8                        FF            .byte	$FF
12194 2AE9                        66            .byte	$66
12195 2AEA                        66            .byte	$66
12196 2AEB                        00            .byte	0
12197 2AEC                        00            .byte	0
12198 2AED                        00            .byte	0
12199 2AEE                        00            .byte	0
12200                                           ! 1497  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12201 2AEF                        00            .byte	0
12202 2AF0                        00            .byte	0
12203 2AF1                        C3            .byte	$C3
12204 2AF2                        C3            .byte	$C3
12205 2AF3                        66            .byte	$66
12206 2AF4                        3C            .byte	$3C
12207 2AF5                        18            .byte	$18
12208 2AF6                        18            .byte	$18
12209 2AF7                        3C            .byte	$3C
12210 2AF8                        66            .byte	$66
12211 2AF9                        C3            .byte	$C3
12212 2AFA                        C3            .byte	$C3
12213 2AFB                        00            .byte	0
12214 2AFC                        00            .byte	0
12215 2AFD                        00            .byte	0
12216 2AFE                        00            .byte	0
12217                                           ! 1498  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12218 2AFF                        00            .byte	0
12219 2B00                        00            .byte	0
12220 2B01                        C3            .byte	$C3
12221 2B02                        C3            .byte	$C3
12222 2B03                        C3            .byte	$C3
12223 2B04                        66            .byte	$66
12224 2B05                        3C            .byte	$3C
12225 2B06                        18            .byte	$18
12226 2B07                        18            .byte	$18
12227 2B08                        18            .byte	$18
12228 2B09                        18            .byte	$18
12229 2B0A                        3C            .byte	$3C
12230 2B0B                        00            .byte	0
12231 2B0C                        00            .byte	0
12232 2B0D                        00            .byte	0
12233 2B0E                        00            .byte	0
12234                                           ! 1499  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12235 2B0F                        00            .byte	0
12236 2B10                        00            .byte	0
12237 2B11                        FF            .byte	$FF
12238 2B12                        C3            .byte	$C3
12239 2B13                        86            .byte	$86
12240 2B14                        0C            .byte	$C
12241 2B15                        18            .byte	$18
12242 2B16                        30            .byte	$30
12243 2B17                        60            .byte	$60
12244 2B18                        C1            .byte	$C1
12245 2B19                        C3            .byte	$C3
12246 2B1A                        FF            .byte	$FF
12247 2B1B                        00            .byte	0
12248 2B1C                        00            .byte	0
12249 2B1D                        00            .byte	0
12250 2B1E                        00            .byte	0
12251                                           ! 1500  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12252 2B1F                        00            .byte	0
12253 2B20                        00            .byte	0
12254 2B21                        3C            .byte	$3C
12255 2B22                        30            .byte	$30
12256 2B23                        30            .byte	$30
12257 2B24                        30            .byte	$30
12258 2B25                        30            .byte	$30
12259 2B26                        30            .byte	$30
12260 2B27                        30            .byte	$30
12261 2B28                        30            .byte	$30
12262 2B29                        30            .byte	$30
12263 2B2A                        3C            .byte	$3C
12264 2B2B                        00            .byte	0
12265 2B2C                        00            .byte	0
12266 2B2D                        00            .byte	0
12267 2B2E                        00            .byte	0
12268                                           ! 1501  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12269 2B2F                        00            .byte	0
12270 2B30                        00            .byte	0
12271 2B31                        00            .byte	0
12272 2B32                        80            .byte	$80
12273 2B33                        C0            .byte	$C0
12274 2B34                        E0            .byte	$E0
12275 2B35                        70            .byte	$70
12276 2B36                        38            .byte	$38
12277 2B37                        1C            .byte	$1C
12278 2B38                        0E            .byte	$E
12279 2B39                        06            .byte	6
12280 2B3A                        02            .byte	2
12281 2B3B                        00            .byte	0
12282 2B3C                        00            .byte	0
12283 2B3D                        00            .byte	0
12284 2B3E                        00            .byte	0
12285                                           ! 1502  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12286 2B3F                        00            .byte	0
12287 2B40                        00            .byte	0
12288 2B41                        3C            .byte	$3C
12289 2B42                        0C            .byte	$C
12290 2B43                        0C            .byte	$C
12291 2B44                        0C            .byte	$C
12292 2B45                        0C            .byte	$C
12293 2B46                        0C            .byte	$C
12294 2B47                        0C            .byte	$C
12295 2B48                        0C            .byte	$C
12296 2B49                        0C            .byte	$C
12297 2B4A                        3C            .byte	$3C
12298 2B4B                        00            .byte	0
12299 2B4C                        00            .byte	0
12300 2B4D                        00            .byte	0
12301 2B4E                        00            .byte	0
12302                                           ! 1503  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12303 2B4F                        10            .byte	$10
12304 2B50                        38            .byte	$38
12305 2B51                        6C            .byte	$6C
12306 2B52                        C6            .byte	$C6
12307 2B53                        00            .byte	0
12308 2B54                        00            .byte	0
12309 2B55                        00            .byte	0
12310 2B56                        00            .byte	0
12311 2B57                        00            .byte	0
12312 2B58                        00            .byte	0
12313 2B59                        00            .byte	0
12314 2B5A                        00            .byte	0
12315 2B5B                        00            .byte	0
12316 2B5C                        00            .byte	0
12317 2B5D                        00            .byte	0
12318 2B5E                        00            .byte	0
12319                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x
12320 2B5F                        00            .byte	0
12321 2B60                        00            .byte	0
12322 2B61                        00            .byte	0
12323 2B62                        00            .byte	0
12324 2B63                        00            .byte	0
12325 2B64                        00            .byte	0
12326 2B65                        00            .byte	0
12327 2B66                        00            .byte	0
12328 2B67                        00            .byte	0
12329 2B68                        00            .byte	0
12330 2B69                        00            .byte	0
12331 2B6A                        00            .byte	0
12332 2B6B                        00            .byte	0
12333 2B6C                        FF            .byte	$FF
12334 2B6D                        00            .byte	0
12335                                           ! 1504 00,
12336 2B6E                        00            .byte	0
12337                                           ! 1505  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12338 2B6F                        30            .byte	$30
12339 2B70                        30            .byte	$30
12340 2B71                        18            .byte	$18
12341 2B72                        00            .byte	0
12342 2B73                        00            .byte	0
12343 2B74                        00            .byte	0
12344 2B75                        00            .byte	0
12345 2B76                        00            .byte	0
12346 2B77                        00            .byte	0
12347 2B78                        00            .byte	0
12348 2B79                        00            .byte	0
12349 2B7A                        00            .byte	0
12350 2B7B                        00            .byte	0
12351 2B7C                        00            .byte	0
12352 2B7D                        00            .byte	0
12353 2B7E                        00            .byte	0
12354                                           ! 1506  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12355 2B7F                        00            .byte	0
12356 2B80                        00            .byte	0
12357 2B81                        00            .byte	0
12358 2B82                        00            .byte	0
12359 2B83                        00            .byte	0
12360 2B84                        78            .byte	$78
12361 2B85                        0C            .byte	$C
12362 2B86                        7C            .byte	$7C
12363 2B87                        CC            .byte	$CC
12364 2B88                        CC            .byte	$CC
12365 2B89                        CC            .byte	$CC
12366 2B8A                        76            .byte	$76
12367 2B8B                        00            .byte	0
12368 2B8C                        00            .byte	0
12369 2B8D                        00            .byte	0
12370 2B8E                        00            .byte	0
12371                                           ! 1507  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12372 2B8F                        00            .byte	0
12373 2B90                        00            .byte	0
12374 2B91                        E0            .byte	$E0
12375 2B92                        60            .byte	$60
12376 2B93                        60            .byte	$60
12377 2B94                        78            .byte	$78
12378 2B95                        6C            .byte	$6C
12379 2B96                        66            .byte	$66
12380 2B97                        66            .byte	$66
12381 2B98                        66            .byte	$66
12382 2B99                        66            .byte	$66
12383 2B9A                        7C            .byte	$7C
12384 2B9B                        00            .byte	0
12385 2B9C                        00            .byte	0
12386 2B9D                        00            .byte	0
12387 2B9E                        00            .byte	0
12388                                           ! 1508  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12389 2B9F                        00            .byte	0
12390 2BA0                        00            .byte	0
12391 2BA1                        00            .byte	0
12392 2BA2                        00            .byte	0
12393 2BA3                        00            .byte	0
12394 2BA4                        7C            .byte	$7C
12395 2BA5                        C6            .byte	$C6
12396 2BA6                        C0            .byte	$C0
12397 2BA7                        C0            .byte	$C0
12398 2BA8                        C0            .byte	$C0
12399 2BA9                        C6            .byte	$C6
12400 2BAA                        7C            .byte	$7C
12401 2BAB                        00            .byte	0
12402 2BAC                        00            .byte	0
12403 2BAD                        00            .byte	0
12404 2BAE                        00            .byte	0
12405                                           ! 1509  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12406 2BAF                        00            .byte	0
12407 2BB0                        00            .byte	0
12408 2BB1                        1C            .byte	$1C
12409 2BB2                        0C            .byte	$C
12410 2BB3                        0C            .byte	$C
12411 2BB4                        3C            .byte	$3C
12412 2BB5                        6C            .byte	$6C
12413 2BB6                        CC            .byte	$CC
12414 2BB7                        CC            .byte	$CC
12415 2BB8                        CC            .byte	$CC
12416 2BB9                        CC            .byte	$CC
12417 2BBA                        76            .byte	$76
12418 2BBB                        00            .byte	0
12419 2BBC                        00            .byte	0
12420 2BBD                        00            .byte	0
12421 2BBE                        00            .byte	0
12422                                           ! 1510  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12423 2BBF                        00            .byte	0
12424 2BC0                        00            .byte	0
12425 2BC1                        00            .byte	0
12426 2BC2                        00            .byte	0
12427 2BC3                        00            .byte	0
12428 2BC4                        7C            .byte	$7C
12429 2BC5                        C6            .byte	$C6
12430 2BC6                        FE            .byte	$FE
12431 2BC7                        C0            .byte	$C0
12432 2BC8                        C0            .byte	$C0
12433 2BC9                        C6            .byte	$C6
12434 2BCA                        7C            .byte	$7C
12435 2BCB                        00            .byte	0
12436 2BCC                        00            .byte	0
12437 2BCD                        00            .byte	0
12438 2BCE                        00            .byte	0
12439                                           ! 1511  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12440 2BCF                        00            .byte	0
12441 2BD0                        00            .byte	0
12442 2BD1                        38            .byte	$38
12443 2BD2                        6C            .byte	$6C
12444 2BD3                        64            .byte	$64
12445 2BD4                        60            .byte	$60
12446 2BD5                        F0            .byte	$F0
12447 2BD6                        60            .byte	$60
12448 2BD7                        60            .byte	$60
12449 2BD8                        60            .byte	$60
12450 2BD9                        60            .byte	$60
12451 2BDA                        F0            .byte	$F0
12452 2BDB                        00            .byte	0
12453 2BDC                        00            .byte	0
12454 2BDD                        00            .byte	0
12455 2BDE                        00            .byte	0
12456                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12457 2BDF                        00            .byte	0
12458 2BE0                        00            .byte	0
12459 2BE1                        00            .byte	0
12460 2BE2                        00            .byte	0
12461 2BE3                        00            .byte	0
12462 2BE4                        76            .byte	$76
12463 2BE5                        CC            .byte	$CC
12464 2BE6                        CC            .byte	$CC
12465 2BE7                        CC            .byte	$CC
12466 2BE8                        CC            .byte	$CC
12467 2BE9                        CC            .byte	$CC
12468 2BEA                        7C            .byte	$7C
12469 2BEB                        0C            .byte	$C
12470 2BEC                        CC            .byte	$CC
12471 2BED                        78            .byte	$78
12472 2BEE                        00            .byte	0
12473                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12474 2BEF                        00            .byte	0
12475 2BF0                        00            .byte	0
12476 2BF1                        E0            .byte	$E0
12477 2BF2                        60            .byte	$60
12478 2BF3                        60            .byte	$60
12479 2BF4                        6C            .byte	$6C
12480 2BF5                        76            .byte	$76
12481 2BF6                        66            .byte	$66
12482 2BF7                        66            .byte	$66
12483 2BF8                        66            .byte	$66
12484 2BF9                        66            .byte	$66
12485 2BFA                        E6            .byte	$E6
12486 2BFB                        00            .byte	0
12487 2BFC                        00            .byte	0
12488 2BFD                        00            .byte	0
12489 2BFE                        00            .byte	0
12490                                           ! 1514  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12491 2BFF                        00            .byte	0
12492 2C00                        00            .byte	0
12493 2C01                        18            .byte	$18
12494 2C02                        18            .byte	$18
12495 2C03                        00            .byte	0
12496 2C04                        38            .byte	$38
12497 2C05                        18            .byte	$18
12498 2C06                        18            .byte	$18
12499 2C07                        18            .byte	$18
12500 2C08                        18            .byte	$18
12501 2C09                        18            .byte	$18
12502 2C0A                        3C            .byte	$3C
12503 2C0B                        00            .byte	0
12504 2C0C                        00            .byte	0
12505 2C0D                        00            .byte	0
12506 2C0E                        00            .byte	0
12507                                           ! 1515  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12508 2C0F                        00            .byte	0
12509 2C10                        00            .byte	0
12510 2C11                        06            .byte	6
12511 2C12                        06            .byte	6
12512 2C13                        00            .byte	0
12513 2C14                        0E            .byte	$E
12514 2C15                        06            .byte	6
12515 2C16                        06            .byte	6
12516 2C17                        06            .byte	6
12517 2C18                        06            .byte	6
12518 2C19                        06            .byte	6
12519 2C1A                        06            .byte	6
12520 2C1B                        66            .byte	$66
12521 2C1C                        66            .byte	$66
12522 2C1D                        3C            .byte	$3C
12523 2C1E                        00            .byte	0
12524                                           ! 1516  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12525 2C1F                        00            .byte	0
12526 2C20                        00            .byte	0
12527 2C21                        E0            .byte	$E0
12528 2C22                        60            .byte	$60
12529 2C23                        60            .byte	$60
12530 2C24                        66            .byte	$66
12531 2C25                        6C            .byte	$6C
12532 2C26                        78            .byte	$78
12533 2C27                        78            .byte	$78
12534 2C28                        6C            .byte	$6C
12535 2C29                        66            .byte	$66
12536 2C2A                        E6            .byte	$E6
12537 2C2B                        00            .byte	0
12538 2C2C                        00            .byte	0
12539 2C2D                        00            .byte	0
12540 2C2E                        00            .byte	0
12541                                           ! 1517  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12542 2C2F                        00            .byte	0
12543 2C30                        00            .byte	0
12544 2C31                        38            .byte	$38
12545 2C32                        18            .byte	$18
12546 2C33                        18            .byte	$18
12547 2C34                        18            .byte	$18
12548 2C35                        18            .byte	$18
12549 2C36                        18            .byte	$18
12550 2C37                        18            .byte	$18
12551 2C38                        18            .byte	$18
12552 2C39                        18            .byte	$18
12553 2C3A                        3C            .byte	$3C
12554 2C3B                        00            .byte	0
12555 2C3C                        00            .byte	0
12556 2C3D                        00            .byte	0
12557 2C3E                        00            .byte	0
12558                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12559 2C3F                        00            .byte	0
12560 2C40                        00            .byte	0
12561 2C41                        00            .byte	0
12562 2C42                        00            .byte	0
12563 2C43                        00            .byte	0
12564 2C44                        E6            .byte	$E6
12565 2C45                        FF            .byte	$FF
12566 2C46                        DB            .byte	$DB
12567 2C47                        DB            .byte	$DB
12568 2C48                        DB            .byte	$DB
12569 2C49                        DB            .byte	$DB
12570 2C4A                        DB            .byte	$DB
12571 2C4B                        00            .byte	0
12572 2C4C                        00            .byte	0
12573 2C4D                        00            .byte	0
12574 2C4E                        00            .byte	0
12575                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12576 2C4F                        00            .byte	0
12577 2C50                        00            .byte	0
12578 2C51                        00            .byte	0
12579 2C52                        00            .byte	0
12580 2C53                        00            .byte	0
12581 2C54                        DC            .byte	$DC
12582 2C55                        66            .byte	$66
12583 2C56                        66            .byte	$66
12584 2C57                        66            .byte	$66
12585 2C58                        66            .byte	$66
12586 2C59                        66            .byte	$66
12587 2C5A                        66            .byte	$66
12588 2C5B                        00            .byte	0
12589 2C5C                        00            .byte	0
12590 2C5D                        00            .byte	0
12591 2C5E                        00            .byte	0
12592                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12593 2C5F                        00            .byte	0
12594 2C60                        00            .byte	0
12595 2C61                        00            .byte	0
12596 2C62                        00            .byte	0
12597 2C63                        00            .byte	0
12598 2C64                        7C            .byte	$7C
12599 2C65                        C6            .byte	$C6
12600 2C66                        C6            .byte	$C6
12601 2C67                        C6            .byte	$C6
12602 2C68                        C6            .byte	$C6
12603 2C69                        C6            .byte	$C6
12604 2C6A                        7C            .byte	$7C
12605 2C6B                        00            .byte	0
12606 2C6C                        00            .byte	0
12607 2C6D                        00            .byte	0
12608 2C6E                        00            .byte	0
12609                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12610 2C6F                        00            .byte	0
12611 2C70                        00            .byte	0
12612 2C71                        00            .byte	0
12613 2C72                        00            .byte	0
12614 2C73                        00            .byte	0
12615 2C74                        DC            .byte	$DC
12616 2C75                        66            .byte	$66
12617 2C76                        66            .byte	$66
12618 2C77                        66            .byte	$66
12619 2C78                        66            .byte	$66
12620 2C79                        66            .byte	$66
12621 2C7A                        7C            .byte	$7C
12622 2C7B                        60            .byte	$60
12623 2C7C                        60            .byte	$60
12624 2C7D                        F0            .byte	$F0
12625 2C7E                        00            .byte	0
12626                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12627 2C7F                        00            .byte	0
12628 2C80                        00            .byte	0
12629 2C81                        00            .byte	0
12630 2C82                        00            .byte	0
12631 2C83                        00            .byte	0
12632 2C84                        76            .byte	$76
12633 2C85                        CC            .byte	$CC
12634 2C86                        CC            .byte	$CC
12635 2C87                        CC            .byte	$CC
12636 2C88                        CC            .byte	$CC
12637 2C89                        CC            .byte	$CC
12638 2C8A                        7C            .byte	$7C
12639 2C8B                        0C            .byte	$C
12640 2C8C                        0C            .byte	$C
12641 2C8D                        1E            .byte	$1E
12642 2C8E                        00            .byte	0
12643                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12644 2C8F                        00            .byte	0
12645 2C90                        00            .byte	0
12646 2C91                        00            .byte	0
12647 2C92                        00            .byte	0
12648 2C93                        00            .byte	0
12649 2C94                        DC            .byte	$DC
12650 2C95                        76            .byte	$76
12651 2C96                        66            .byte	$66
12652 2C97                        60            .byte	$60
12653 2C98                        60            .byte	$60
12654 2C99                        60            .byte	$60
12655 2C9A                        F0            .byte	$F0
12656 2C9B                        00            .byte	0
12657 2C9C                        00            .byte	0
12658 2C9D                        00            .byte	0
12659 2C9E                        00            .byte	0
12660                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12661 2C9F                        00            .byte	0
12662 2CA0                        00            .byte	0
12663 2CA1                        00            .byte	0
12664 2CA2                        00            .byte	0
12665 2CA3                        00            .byte	0
12666 2CA4                        7C            .byte	$7C
12667 2CA5                        C6            .byte	$C6
12668 2CA6                        60            .byte	$60
12669 2CA7                        38            .byte	$38
12670 2CA8                        0C            .byte	$C
12671 2CA9                        C6            .byte	$C6
12672 2CAA                        7C            .byte	$7C
12673 2CAB                        00            .byte	0
12674 2CAC                        00            .byte	0
12675 2CAD                        00            .byte	0
12676 2CAE                        00            .byte	0
12677                                           ! 1525  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12678 2CAF                        00            .byte	0
12679 2CB0                        00            .byte	0
12680 2CB1                        10            .byte	$10
12681 2CB2                        30            .byte	$30
12682 2CB3                        30            .byte	$30
12683 2CB4                        FC            .byte	$FC
12684 2CB5                        30            .byte	$30
12685 2CB6                        30            .byte	$30
12686 2CB7                        30            .byte	$30
12687 2CB8                        30            .byte	$30
12688 2CB9                        36            .byte	$36
12689 2CBA                        1C            .byte	$1C
12690 2CBB                        00            .byte	0
12691 2CBC                        00            .byte	0
12692 2CBD                        00            .byte	0
12693 2CBE                        00            .byte	0
12694                                           ! 1526  0x00, 
12695 2CBF                        00            .byte	0
12696                                           ! 1526 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12697 2CC0                        00            .byte	0
12698 2CC1                        00            .byte	0
12699 2CC2                        00            .byte	0
12700 2CC3                        00            .byte	0
12701 2CC4                        CC            .byte	$CC
12702 2CC5                        CC            .byte	$CC
12703 2CC6                        CC            .byte	$CC
12704 2CC7                        CC            .byte	$CC
12705 2CC8                        CC            .byte	$CC
12706 2CC9                        CC            .byte	$CC
12707 2CCA                        76            .byte	$76
12708 2CCB                        00            .byte	0
12709 2CCC                        00            .byte	0
12710 2CCD                        00            .byte	0
12711 2CCE                        00            .byte	0
12712                                           ! 1527  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12713 2CCF                        00            .byte	0
12714 2CD0                        00            .byte	0
12715 2CD1                        00            .byte	0
12716 2CD2                        00            .byte	0
12717 2CD3                        00            .byte	0
12718 2CD4                        C3            .byte	$C3
12719 2CD5                        C3            .byte	$C3
12720 2CD6                        C3            .byte	$C3
12721 2CD7                        C3            .byte	$C3
12722 2CD8                        66            .byte	$66
12723 2CD9                        3C            .byte	$3C
12724 2CDA                        18            .byte	$18
12725 2CDB                        00            .byte	0
12726 2CDC                        00            .byte	0
12727 2CDD                        00            .byte	0
12728 2CDE                        00            .byte	0
12729                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12730 2CDF                        00            .byte	0
12731 2CE0                        00            .byte	0
12732 2CE1                        00            .byte	0
12733 2CE2                        00            .byte	0
12734 2CE3                        00            .byte	0
12735 2CE4                        C3            .byte	$C3
12736 2CE5                        C3            .byte	$C3
12737 2CE6                        C3            .byte	$C3
12738 2CE7                        DB            .byte	$DB
12739 2CE8                        DB            .byte	$DB
12740 2CE9                        FF            .byte	$FF
12741 2CEA                        66            .byte	$66
12742 2CEB                        00            .byte	0
12743 2CEC                        00            .byte	0
12744 2CED                        00            .byte	0
12745 2CEE                        00            .byte	0
12746                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12747 2CEF                        00            .byte	0
12748 2CF0                        00            .byte	0
12749 2CF1                        00            .byte	0
12750 2CF2                        00            .byte	0
12751 2CF3                        00            .byte	0
12752 2CF4                        C3            .byte	$C3
12753 2CF5                        66            .byte	$66
12754 2CF6                        3C            .byte	$3C
12755 2CF7                        18            .byte	$18
12756 2CF8                        3C            .byte	$3C
12757 2CF9                        66            .byte	$66
12758 2CFA                        C3            .byte	$C3
12759 2CFB                        00            .byte	0
12760 2CFC                        00            .byte	0
12761 2CFD                        00            .byte	0
12762 2CFE                        00            .byte	0
12763                                           ! 1530  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12764 2CFF                        00            .byte	0
12765 2D00                        00            .byte	0
12766 2D01                        00            .byte	0
12767 2D02                        00            .byte	0
12768 2D03                        00            .byte	0
12769 2D04                        C6            .byte	$C6
12770 2D05                        C6            .byte	$C6
12771 2D06                        C6            .byte	$C6
12772 2D07                        C6            .byte	$C6
12773 2D08                        C6            .byte	$C6
12774 2D09                        C6            .byte	$C6
12775 2D0A                        7E            .byte	$7E
12776 2D0B                        06            .byte	6
12777 2D0C                        0C            .byte	$C
12778 2D0D                        F8            .byte	$F8
12779 2D0E                        00            .byte	0
12780                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12781 2D0F                        00            .byte	0
12782 2D10                        00            .byte	0
12783 2D11                        00            .byte	0
12784 2D12                        00            .byte	0
12785 2D13                        00            .byte	0
12786 2D14                        FE            .byte	$FE
12787 2D15                        CC            .byte	$CC
12788 2D16                        18            .byte	$18
12789 2D17                        30            .byte	$30
12790 2D18                        60            .byte	$60
12791 2D19                        C6            .byte	$C6
12792 2D1A                        FE            .byte	$FE
12793 2D1B                        00            .byte	0
12794 2D1C                        00            .byte	0
12795 2D1D                        00            .byte	0
12796 2D1E                        00            .byte	0
12797                                           ! 1532  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12798 2D1F                        00            .byte	0
12799 2D20                        00            .byte	0
12800 2D21                        0E            .byte	$E
12801 2D22                        18            .byte	$18
12802 2D23                        18            .byte	$18
12803 2D24                        18            .byte	$18
12804 2D25                        70            .byte	$70
12805 2D26                        18            .byte	$18
12806 2D27                        18            .byte	$18
12807 2D28                        18            .byte	$18
12808 2D29                        18            .byte	$18
12809 2D2A                        0E            .byte	$E
12810 2D2B                        00            .byte	0
12811 2D2C                        00            .byte	0
12812 2D2D                        00            .byte	0
12813 2D2E                        00            .byte	0
12814                                           ! 1533  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12815 2D2F                        00            .byte	0
12816 2D30                        00            .byte	0
12817 2D31                        18            .byte	$18
12818 2D32                        18            .byte	$18
12819 2D33                        18            .byte	$18
12820 2D34                        18            .byte	$18
12821 2D35                        00            .byte	0
12822 2D36                        18            .byte	$18
12823 2D37                        18            .byte	$18
12824 2D38                        18            .byte	$18
12825 2D39                        18            .byte	$18
12826 2D3A                        18            .byte	$18
12827 2D3B                        00            .byte	0
12828 2D3C                        00            .byte	0
12829 2D3D                        00            .byte	0
12830 2D3E                        00            .byte	0
12831                                           ! 1534  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12832 2D3F                        00            .byte	0
12833 2D40                        00            .byte	0
12834 2D41                        70            .byte	$70
12835 2D42                        18            .byte	$18
12836 2D43                        18            .byte	$18
12837 2D44                        18            .byte	$18
12838 2D45                        0E            .byte	$E
12839 2D46                        18            .byte	$18
12840 2D47                        18            .byte	$18
12841 2D48                        18            .byte	$18
12842 2D49                        18            .byte	$18
12843 2D4A                        70            .byte	$70
12844 2D4B                        00            .byte	0
12845 2D4C                        00            .byte	0
12846 2D4D                        00            .byte	0
12847 2D4E                        00            .byte	0
12848                                           ! 1535  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12849 2D4F                        00            .byte	0
12850 2D50                        00            .byte	0
12851 2D51                        76            .byte	$76
12852 2D52                        DC            .byte	$DC
12853 2D53                        00            .byte	0
12854 2D54                        00            .byte	0
12855 2D55                        00            .byte	0
12856 2D56                        00            .byte	0
12857 2D57                        00            .byte	0
12858 2D58                        00            .byte	0
12859 2D59                        00            .byte	0
12860 2D5A                        00            .byte	0
12861 2D5B                        00            .byte	0
12862 2D5C                        00            .byte	0
12863 2D5D                        00            .byte	0
12864 2D5E                        00            .byte	0
12865                                           ! 1536  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12866 2D5F                        00            .byte	0
12867 2D60                        00            .byte	0
12868 2D61                        00            .byte	0
12869 2D62                        00            .byte	0
12870 2D63                        10            .byte	$10
12871 2D64                        38            .byte	$38
12872 2D65                        6C            .byte	$6C
12873 2D66                        C6            .byte	$C6
12874 2D67                        C6            .byte	$C6
12875 2D68                        C6            .byte	$C6
12876 2D69                        FE            .byte	$FE
12877 2D6A                        00            .byte	0
12878 2D6B                        00            .byte	0
12879 2D6C                        00            .byte	0
12880 2D6D                        00            .byte	0
12881 2D6E                        00            .byte	0
12882                                           ! 1537  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12883 2D6F                        00            .byte	0
12884 2D70                        00            .byte	0
12885 2D71                        3C            .byte	$3C
12886 2D72                        66            .byte	$66
12887 2D73                        C2            .byte	$C2
12888 2D74                        C0            .byte	$C0
12889 2D75                        C0            .byte	$C0
12890 2D76                        C0            .byte	$C0
12891 2D77                        C2            .byte	$C2
12892 2D78                        66            .byte	$66
12893 2D79                        3C            .byte	$3C
12894 2D7A                        0C            .byte	$C
12895 2D7B                        06            .byte	6
12896 2D7C                        7C            .byte	$7C
12897 2D7D                        00            .byte	0
12898 2D7E                        00            .byte	0
12899                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12900 2D7F                        00            .byte	0
12901 2D80                        00            .byte	0
12902 2D81                        CC            .byte	$CC
12903 2D82                        00            .byte	0
12904 2D83                        00            .byte	0
12905 2D84                        CC            .byte	$CC
12906 2D85                        CC            .byte	$CC
12907 2D86                        CC            .byte	$CC
12908 2D87                        CC            .byte	$CC
12909 2D88                        CC            .byte	$CC
12910 2D89                        CC            .byte	$CC
12911 2D8A                        76            .byte	$76
12912 2D8B                        00            .byte	0
12913 2D8C                        00            .byte	0
12914 2D8D                        00            .byte	0
12915 2D8E                        00            .byte	0
12916                                           ! 1539  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12917 2D8F                        00            .byte	0
12918 2D90                        0C            .byte	$C
12919 2D91                        18            .byte	$18
12920 2D92                        30            .byte	$30
12921 2D93                        00            .byte	0
12922 2D94                        7C            .byte	$7C
12923 2D95                        C6            .byte	$C6
12924 2D96                        FE            .byte	$FE
12925 2D97                        C0            .byte	$C0
12926 2D98                        C0            .byte	$C0
12927 2D99                        C6            .byte	$C6
12928 2D9A                        7C            .byte	$7C
12929 2D9B                        00            .byte	0
12930 2D9C                        00            .byte	0
12931 2D9D                        00            .byte	0
12932 2D9E                        00            .byte	0
12933                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12934 2D9F                        00            .byte	0
12935 2DA0                        10            .byte	$10
12936 2DA1                        38            .byte	$38
12937 2DA2                        6C            .byte	$6C
12938 2DA3                        00            .byte	0
12939 2DA4                        78            .byte	$78
12940 2DA5                        0C            .byte	$C
12941 2DA6                        7C            .byte	$7C
12942 2DA7                        CC            .byte	$CC
12943 2DA8                        CC            .byte	$CC
12944 2DA9                        CC            .byte	$CC
12945 2DAA                        76            .byte	$76
12946 2DAB                        00            .byte	0
12947 2DAC                        00            .byte	0
12948 2DAD                        00            .byte	0
12949 2DAE                        00            .byte	0
12950                                           ! 1541  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12951 2DAF                        00            .byte	0
12952 2DB0                        00            .byte	0
12953 2DB1                        CC            .byte	$CC
12954 2DB2                        00            .byte	0
12955 2DB3                        00            .byte	0
12956 2DB4                        78            .byte	$78
12957 2DB5                        0C            .byte	$C
12958 2DB6                        7C            .byte	$7C
12959 2DB7                        CC            .byte	$CC
12960 2DB8                        CC            .byte	$CC
12961 2DB9                        CC            .byte	$CC
12962 2DBA                        76            .byte	$76
12963 2DBB                        00            .byte	0
12964 2DBC                        00            .byte	0
12965 2DBD                        00            .byte	0
12966 2DBE                        00            .byte	0
12967                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12968 2DBF                        00            .byte	0
12969 2DC0                        60            .byte	$60
12970 2DC1                        30            .byte	$30
12971 2DC2                        18            .byte	$18
12972 2DC3                        00            .byte	0
12973 2DC4                        78            .byte	$78
12974 2DC5                        0C            .byte	$C
12975 2DC6                        7C            .byte	$7C
12976 2DC7                        CC            .byte	$CC
12977 2DC8                        CC            .byte	$CC
12978 2DC9                        CC            .byte	$CC
12979 2DCA                        76            .byte	$76
12980 2DCB                        00            .byte	0
12981 2DCC                        00            .byte	0
12982 2DCD                        00            .byte	0
12983 2DCE                        00            .byte	0
12984                                           ! 1543  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12985 2DCF                        00            .byte	0
12986 2DD0                        38            .byte	$38
12987 2DD1                        6C            .byte	$6C
12988 2DD2                        38            .byte	$38
12989 2DD3                        00            .byte	0
12990 2DD4                        78            .byte	$78
12991 2DD5                        0C            .byte	$C
12992 2DD6                        7C            .byte	$7C
12993 2DD7                        CC            .byte	$CC
12994 2DD8                        CC            .byte	$CC
12995 2DD9                        CC            .byte	$CC
12996 2DDA                        76            .byte	$76
12997 2DDB                        00            .byte	0
12998 2DDC                        00            .byte	0
12999 2DDD                        00            .byte	0
13000 2DDE                        00            .byte	0
13001                                           ! 1544  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
13002 2DDF                        00            .byte	0
13003 2DE0                        00            .byte	0
13004 2DE1                        00            .byte	0
13005 2DE2                        00            .byte	0
13006 2DE3                        3C            .byte	$3C
13007 2DE4                        66            .byte	$66
13008 2DE5                        60            .byte	$60
13009 2DE6                        60            .byte	$60
13010 2DE7                        66            .byte	$66
13011 2DE8                        3C            .byte	$3C
13012 2DE9                        0C            .byte	$C
13013 2DEA                        06            .byte	6
13014 2DEB                        3C            .byte	$3C
13015 2DEC                        00            .byte	0
13016 2DED                        00            .byte	0
13017 2DEE                        00            .byte	0
13018                                           ! 1545  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13019 2DEF                        00            .byte	0
13020 2DF0                        10            .byte	$10
13021 2DF1                        38            .byte	$38
13022 2DF2                        6C            .byte	$6C
13023 2DF3                        00            .byte	0
13024 2DF4                        7C            .byte	$7C
13025 2DF5                        C6            .byte	$C6
13026 2DF6                        FE            .byte	$FE
13027 2DF7                        C0            .byte	$C0
13028 2DF8                        C0            .byte	$C0
13029 2DF9                        C6            .byte	$C6
13030 2DFA                        7C            .byte	$7C
13031 2DFB                        00            .byte	0
13032 2DFC                        00            .byte	0
13033 2DFD                        00            .byte	0
13034 2DFE                        00            .byte	0
13035                                           ! 1546  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13036 2DFF                        00            .byte	0
13037 2E00                        00            .byte	0
13038 2E01                        C6            .byte	$C6
13039 2E02                        00            .byte	0
13040 2E03                        00            .byte	0
13041 2E04                        7C            .byte	$7C
13042 2E05                        C6            .byte	$C6
13043 2E06                        FE            .byte	$FE
13044 2E07                        C0            .byte	$C0
13045 2E08                        C0            .byte	$C0
13046 2E09                        C6            .byte	$C6
13047 2E0A                        7C            .byte	$7C
13048 2E0B                        00            .byte	0
13049 2E0C                        00            .byte	0
13050 2E0D                        00            .byte	0
13051 2E0E                        00            .byte	0
13052                                           ! 1547  0x00, 0x60, 0x30,
13053 2E0F                        00            .byte	0
13054 2E10                        60            .byte	$60
13055                                           ! 1547  0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13056 2E11                        30            .byte	$30
13057 2E12                        18            .byte	$18
13058 2E13                        00            .byte	0
13059 2E14                        7C            .byte	$7C
13060 2E15                        C6            .byte	$C6
13061 2E16                        FE            .byte	$FE
13062 2E17                        C0            .byte	$C0
13063 2E18                        C0            .byte	$C0
13064 2E19                        C6            .byte	$C6
13065 2E1A                        7C            .byte	$7C
13066 2E1B                        00            .byte	0
13067 2E1C                        00            .byte	0
13068 2E1D                        00            .byte	0
13069 2E1E                        00            .byte	0
13070                                           ! 1548  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13071 2E1F                        00            .byte	0
13072 2E20                        00            .byte	0
13073 2E21                        66            .byte	$66
13074 2E22                        00            .byte	0
13075 2E23                        00            .byte	0
13076 2E24                        38            .byte	$38
13077 2E25                        18            .byte	$18
13078 2E26                        18            .byte	$18
13079 2E27                        18            .byte	$18
13080 2E28                        18            .byte	$18
13081 2E29                        18            .byte	$18
13082 2E2A                        3C            .byte	$3C
13083 2E2B                        00            .byte	0
13084 2E2C                        00            .byte	0
13085 2E2D                        00            .byte	0
13086 2E2E                        00            .byte	0
13087                                           ! 1549  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13088 2E2F                        00            .byte	0
13089 2E30                        18            .byte	$18
13090 2E31                        3C            .byte	$3C
13091 2E32                        66            .byte	$66
13092 2E33                        00            .byte	0
13093 2E34                        38            .byte	$38
13094 2E35                        18            .byte	$18
13095 2E36                        18            .byte	$18
13096 2E37                        18            .byte	$18
13097 2E38                        18            .byte	$18
13098 2E39                        18            .byte	$18
13099 2E3A                        3C            .byte	$3C
13100 2E3B                        00            .byte	0
13101 2E3C                        00            .byte	0
13102 2E3D                        00            .byte	0
13103 2E3E                        00            .byte	0
13104                                           ! 1550  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13105 2E3F                        00            .byte	0
13106 2E40                        60            .byte	$60
13107 2E41                        30            .byte	$30
13108 2E42                        18            .byte	$18
13109 2E43                        00            .byte	0
13110 2E44                        38            .byte	$38
13111 2E45                        18            .byte	$18
13112 2E46                        18            .byte	$18
13113 2E47                        18            .byte	$18
13114 2E48                        18            .byte	$18
13115 2E49                        18            .byte	$18
13116 2E4A                        3C            .byte	$3C
13117 2E4B                        00            .byte	0
13118 2E4C                        00            .byte	0
13119 2E4D                        00            .byte	0
13120 2E4E                        00            .byte	0
13121                                           ! 1551  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13122 2E4F                        00            .byte	0
13123 2E50                        C6            .byte	$C6
13124 2E51                        00            .byte	0
13125 2E52                        10            .byte	$10
13126 2E53                        38            .byte	$38
13127 2E54                        6C            .byte	$6C
13128 2E55                        C6            .byte	$C6
13129 2E56                        C6            .byte	$C6
13130 2E57                        FE            .byte	$FE
13131 2E58                        C6            .byte	$C6
13132 2E59                        C6            .byte	$C6
13133 2E5A                        C6            .byte	$C6
13134 2E5B                        00            .byte	0
13135 2E5C                        00            .byte	0
13136 2E5D                        00            .byte	0
13137 2E5E                        00            .byte	0
13138                                           ! 1552  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13139 2E5F                        38            .byte	$38
13140 2E60                        6C            .byte	$6C
13141 2E61                        38            .byte	$38
13142 2E62                        00            .byte	0
13143 2E63                        38            .byte	$38
13144 2E64                        6C            .byte	$6C
13145 2E65                        C6            .byte	$C6
13146 2E66                        C6            .byte	$C6
13147 2E67                        FE            .byte	$FE
13148 2E68                        C6            .byte	$C6
13149 2E69                        C6            .byte	$C6
13150 2E6A                        C6            .byte	$C6
13151 2E6B                        00            .byte	0
13152 2E6C                        00            .byte	0
13153 2E6D                        00            .byte	0
13154 2E6E                        00            .byte	0
13155                                           ! 1553  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13156 2E6F                        18            .byte	$18
13157 2E70                        30            .byte	$30
13158 2E71                        60            .byte	$60
13159 2E72                        00            .byte	0
13160 2E73                        FE            .byte	$FE
13161 2E74                        66            .byte	$66
13162 2E75                        60            .byte	$60
13163 2E76                        7C            .byte	$7C
13164 2E77                        60            .byte	$60
13165 2E78                        60            .byte	$60
13166 2E79                        66            .byte	$66
13167 2E7A                        FE            .byte	$FE
13168 2E7B                        00            .byte	0
13169 2E7C                        00            .byte	0
13170 2E7D                        00            .byte	0
13171 2E7E                        00            .byte	0
13172                                           ! 1554  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13173 2E7F                        00            .byte	0
13174 2E80                        00            .byte	0
13175 2E81                        00            .byte	0
13176 2E82                        00            .byte	0
13177 2E83                        00            .byte	0
13178 2E84                        6E            .byte	$6E
13179 2E85                        3B            .byte	$3B
13180 2E86                        1B            .byte	$1B
13181 2E87                        7E            .byte	$7E
13182 2E88                        D8            .byte	$D8
13183 2E89                        DC            .byte	$DC
13184 2E8A                        77            .byte	$77
13185 2E8B                        00            .byte	0
13186 2E8C                        00            .byte	0
13187 2E8D                        00            .byte	0
13188 2E8E                        00            .byte	0
13189                                           ! 1555  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13190 2E8F                        00            .byte	0
13191 2E90                        00            .byte	0
13192 2E91                        3E            .byte	$3E
13193 2E92                        6C            .byte	$6C
13194 2E93                        CC            .byte	$CC
13195 2E94                        CC            .byte	$CC
13196 2E95                        FE            .byte	$FE
13197 2E96                        CC            .byte	$CC
13198 2E97                        CC            .byte	$CC
13199 2E98                        CC            .byte	$CC
13200 2E99                        CC            .byte	$CC
13201 2E9A                        CE            .byte	$CE
13202 2E9B                        00            .byte	0
13203 2E9C                        00            .byte	0
13204 2E9D                        00            .byte	0
13205 2E9E                        00            .byte	0
13206                                           ! 1556  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13207 2E9F                        00            .byte	0
13208 2EA0                        10            .byte	$10
13209 2EA1                        38            .byte	$38
13210 2EA2                        6C            .byte	$6C
13211 2EA3                        00            .byte	0
13212 2EA4                        7C            .byte	$7C
13213 2EA5                        C6            .byte	$C6
13214 2EA6                        C6            .byte	$C6
13215 2EA7                        C6            .byte	$C6
13216 2EA8                        C6            .byte	$C6
13217 2EA9                        C6            .byte	$C6
13218 2EAA                        7C            .byte	$7C
13219 2EAB                        00            .byte	0
13220 2EAC                        00            .byte	0
13221 2EAD                        00            .byte	0
13222 2EAE                        00            .byte	0
13223                                           ! 1557  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13224 2EAF                        00            .byte	0
13225 2EB0                        00            .byte	0
13226 2EB1                        C6            .byte	$C6
13227 2EB2                        00            .byte	0
13228 2EB3                        00            .byte	0
13229 2EB4                        7C            .byte	$7C
13230 2EB5                        C6            .byte	$C6
13231 2EB6                        C6            .byte	$C6
13232 2EB7                        C6            .byte	$C6
13233 2EB8                        C6            .byte	$C6
13234 2EB9                        C6            .byte	$C6
13235 2EBA                        7C            .byte	$7C
13236 2EBB                        00            .byte	0
13237 2EBC                        00            .byte	0
13238 2EBD                        00            .byte	0
13239 2EBE                        00            .byte	0
13240                                           ! 1558  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13241 2EBF                        00            .byte	0
13242 2EC0                        60            .byte	$60
13243 2EC1                        30            .byte	$30
13244 2EC2                        18            .byte	$18
13245 2EC3                        00            .byte	0
13246 2EC4                        7C            .byte	$7C
13247 2EC5                        C6            .byte	$C6
13248 2EC6                        C6            .byte	$C6
13249 2EC7                        C6            .byte	$C6
13250 2EC8                        C6            .byte	$C6
13251 2EC9                        C6            .byte	$C6
13252 2ECA                        7C            .byte	$7C
13253 2ECB                        00            .byte	0
13254 2ECC                        00            .byte	0
13255 2ECD                        00            .byte	0
13256 2ECE                        00            .byte	0
13257                                           ! 1559  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13258 2ECF                        00            .byte	0
13259 2ED0                        30            .byte	$30
13260 2ED1                        78            .byte	$78
13261 2ED2                        CC            .byte	$CC
13262 2ED3                        00            .byte	0
13263 2ED4                        CC            .byte	$CC
13264 2ED5                        CC            .byte	$CC
13265 2ED6                        CC            .byte	$CC
13266 2ED7                        CC            .byte	$CC
13267 2ED8                        CC            .byte	$CC
13268 2ED9                        CC            .byte	$CC
13269 2EDA                        76            .byte	$76
13270 2EDB                        00            .byte	0
13271 2EDC                        00            .byte	0
13272 2EDD                        00            .byte	0
13273 2EDE                        00            .byte	0
13274                                           ! 1560  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13275 2EDF                        00            .byte	0
13276 2EE0                        60            .byte	$60
13277 2EE1                        30            .byte	$30
13278 2EE2                        18            .byte	$18
13279 2EE3                        00            .byte	0
13280 2EE4                        CC            .byte	$CC
13281 2EE5                        CC            .byte	$CC
13282 2EE6                        CC            .byte	$CC
13283 2EE7                        CC            .byte	$CC
13284 2EE8                        CC            .byte	$CC
13285 2EE9                        CC            .byte	$CC
13286 2EEA                        76            .byte	$76
13287 2EEB                        00            .byte	0
13288 2EEC                        00            .byte	0
13289 2EED                        00            .byte	0
13290 2EEE                        00            .byte	0
13291                                           ! 1561  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13292 2EEF                        00            .byte	0
13293 2EF0                        00            .byte	0
13294 2EF1                        C6            .byte	$C6
13295 2EF2                        00            .byte	0
13296 2EF3                        00            .byte	0
13297 2EF4                        C6            .byte	$C6
13298 2EF5                        C6            .byte	$C6
13299 2EF6                        C6            .byte	$C6
13300 2EF7                        C6            .byte	$C6
13301 2EF8                        C6            .byte	$C6
13302 2EF9                        C6            .byte	$C6
13303 2EFA                        7E            .byte	$7E
13304 2EFB                        06            .byte	6
13305 2EFC                        0C            .byte	$C
13306 2EFD                        78            .byte	$78
13307 2EFE                        00            .byte	0
13308                                           ! 1562  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13309 2EFF                        00            .byte	0
13310 2F00                        C6            .byte	$C6
13311 2F01                        00            .byte	0
13312 2F02                        7C            .byte	$7C
13313 2F03                        C6            .byte	$C6
13314 2F04                        C6            .byte	$C6
13315 2F05                        C6            .byte	$C6
13316 2F06                        C6            .byte	$C6
13317 2F07                        C6            .byte	$C6
13318 2F08                        C6            .byte	$C6
13319 2F09                        C6            .byte	$C6
13320 2F0A                        7C            .byte	$7C
13321 2F0B                        00            .byte	0
13322 2F0C                        00            .byte	0
13323 2F0D                        00            .byte	0
13324 2F0E                        00            .byte	0
13325                                           ! 1563  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13326 2F0F                        00            .byte	0
13327 2F10                        C6            .byte	$C6
13328 2F11                        00            .byte	0
13329 2F12                        C6            .byte	$C6
13330 2F13                        C6            .byte	$C6
13331 2F14                        C6            .byte	$C6
13332 2F15                        C6            .byte	$C6
13333 2F16                        C6            .byte	$C6
13334 2F17                        C6            .byte	$C6
13335 2F18                        C6            .byte	$C6
13336 2F19                        C6            .byte	$C6
13337 2F1A                        7C            .byte	$7C
13338 2F1B                        00            .byte	0
13339 2F1C                        00            .byte	0
13340 2F1D                        00            .byte	0
13341 2F1E                        00            .byte	0
13342                                           ! 1564  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13343 2F1F                        00            .byte	0
13344 2F20                        18            .byte	$18
13345 2F21                        18            .byte	$18
13346 2F22                        7E            .byte	$7E
13347 2F23                        C3            .byte	$C3
13348 2F24                        C0            .byte	$C0
13349 2F25                        C0            .byte	$C0
13350 2F26                        C0            .byte	$C0
13351 2F27                        C3            .byte	$C3
13352 2F28                        7E            .byte	$7E
13353 2F29                        18            .byte	$18
13354 2F2A                        18            .byte	$18
13355 2F2B                        00            .byte	0
13356 2F2C                        00            .byte	0
13357 2F2D                        00            .byte	0
13358 2F2E                        00            .byte	0
13359                                           ! 1565  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13360 2F2F                        00            .byte	0
13361 2F30                        38            .byte	$38
13362 2F31                        6C            .byte	$6C
13363 2F32                        64            .byte	$64
13364 2F33                        60            .byte	$60
13365 2F34                        F0            .byte	$F0
13366 2F35                        60            .byte	$60
13367 2F36                        60            .byte	$60
13368 2F37                        60            .byte	$60
13369 2F38                        60            .byte	$60
13370 2F39                        E6            .byte	$E6
13371 2F3A                        FC            .byte	$FC
13372 2F3B                        00            .byte	0
13373 2F3C                        00            .byte	0
13374 2F3D                        00            .byte	0
13375 2F3E                        00            .byte	0
13376                                           ! 1566  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13377 2F3F                        00            .byte	0
13378 2F40                        00            .byte	0
13379 2F41                        C3            .byte	$C3
13380 2F42                        66            .byte	$66
13381 2F43                        3C            .byte	$3C
13382 2F44                        18            .byte	$18
13383 2F45                        FF            .byte	$FF
13384 2F46                        18            .byte	$18
13385 2F47                        FF            .byte	$FF
13386 2F48                        18            .byte	$18
13387 2F49                        18            .byte	$18
13388 2F4A                        18            .byte	$18
13389 2F4B                        00            .byte	0
13390 2F4C                        00            .byte	0
13391 2F4D                        00            .byte	0
13392 2F4E                        00            .byte	0
13393                                           ! 1567  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13394 2F4F                        00            .byte	0
13395 2F50                        FC            .byte	$FC
13396 2F51                        66            .byte	$66
13397 2F52                        66            .byte	$66
13398 2F53                        7C            .byte	$7C
13399 2F54                        62            .byte	$62
13400 2F55                        66            .byte	$66
13401 2F56                        6F            .byte	$6F
13402 2F57                        66            .byte	$66
13403 2F58                        66            .byte	$66
13404 2F59                        66            .byte	$66
13405 2F5A                        F3            .byte	$F3
13406 2F5B                        00            .byte	0
13407 2F5C                        00            .byte	0
13408 2F5D                        00            .byte	0
13409 2F5E                        00            .byte	0
13410                                           ! 1568  0x00, 0x0e, 0x1b, 0x18, 0x18
13411 2F5F                        00            .byte	0
13412 2F60                        0E            .byte	$E
13413 2F61                        1B            .byte	$1B
13414 2F62                        18            .byte	$18
13415                                           ! 1568 , 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13416 2F63                        18            .byte	$18
13417 2F64                        18            .byte	$18
13418 2F65                        7E            .byte	$7E
13419 2F66                        18            .byte	$18
13420 2F67                        18            .byte	$18
13421 2F68                        18            .byte	$18
13422 2F69                        18            .byte	$18
13423 2F6A                        18            .byte	$18
13424 2F6B                        D8            .byte	$D8
13425 2F6C                        70            .byte	$70
13426 2F6D                        00            .byte	0
13427 2F6E                        00            .byte	0
13428                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13429 2F6F                        00            .byte	0
13430 2F70                        18            .byte	$18
13431 2F71                        30            .byte	$30
13432 2F72                        60            .byte	$60
13433 2F73                        00            .byte	0
13434 2F74                        78            .byte	$78
13435 2F75                        0C            .byte	$C
13436 2F76                        7C            .byte	$7C
13437 2F77                        CC            .byte	$CC
13438 2F78                        CC            .byte	$CC
13439 2F79                        CC            .byte	$CC
13440 2F7A                        76            .byte	$76
13441 2F7B                        00            .byte	0
13442 2F7C                        00            .byte	0
13443 2F7D                        00            .byte	0
13444 2F7E                        00            .byte	0
13445                                           ! 1570  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13446 2F7F                        00            .byte	0
13447 2F80                        0C            .byte	$C
13448 2F81                        18            .byte	$18
13449 2F82                        30            .byte	$30
13450 2F83                        00            .byte	0
13451 2F84                        38            .byte	$38
13452 2F85                        18            .byte	$18
13453 2F86                        18            .byte	$18
13454 2F87                        18            .byte	$18
13455 2F88                        18            .byte	$18
13456 2F89                        18            .byte	$18
13457 2F8A                        3C            .byte	$3C
13458 2F8B                        00            .byte	0
13459 2F8C                        00            .byte	0
13460 2F8D                        00            .byte	0
13461 2F8E                        00            .byte	0
13462                                           ! 1571  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13463 2F8F                        00            .byte	0
13464 2F90                        18            .byte	$18
13465 2F91                        30            .byte	$30
13466 2F92                        60            .byte	$60
13467 2F93                        00            .byte	0
13468 2F94                        7C            .byte	$7C
13469 2F95                        C6            .byte	$C6
13470 2F96                        C6            .byte	$C6
13471 2F97                        C6            .byte	$C6
13472 2F98                        C6            .byte	$C6
13473 2F99                        C6            .byte	$C6
13474 2F9A                        7C            .byte	$7C
13475 2F9B                        00            .byte	0
13476 2F9C                        00            .byte	0
13477 2F9D                        00            .byte	0
13478 2F9E                        00            .byte	0
13479                                           ! 1572  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13480 2F9F                        00            .byte	0
13481 2FA0                        18            .byte	$18
13482 2FA1                        30            .byte	$30
13483 2FA2                        60            .byte	$60
13484 2FA3                        00            .byte	0
13485 2FA4                        CC            .byte	$CC
13486 2FA5                        CC            .byte	$CC
13487 2FA6                        CC            .byte	$CC
13488 2FA7                        CC            .byte	$CC
13489 2FA8                        CC            .byte	$CC
13490 2FA9                        CC            .byte	$CC
13491 2FAA                        76            .byte	$76
13492 2FAB                        00            .byte	0
13493 2FAC                        00            .byte	0
13494 2FAD                        00            .byte	0
13495 2FAE                        00            .byte	0
13496                                           ! 1573  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13497 2FAF                        00            .byte	0
13498 2FB0                        00            .byte	0
13499 2FB1                        76            .byte	$76
13500 2FB2                        DC            .byte	$DC
13501 2FB3                        00            .byte	0
13502 2FB4                        DC            .byte	$DC
13503 2FB5                        66            .byte	$66
13504 2FB6                        66            .byte	$66
13505 2FB7                        66            .byte	$66
13506 2FB8                        66            .byte	$66
13507 2FB9                        66            .byte	$66
13508 2FBA                        66            .byte	$66
13509 2FBB                        00            .byte	0
13510 2FBC                        00            .byte	0
13511 2FBD                        00            .byte	0
13512 2FBE                        00            .byte	0
13513                                           ! 1574  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13514 2FBF                        76            .byte	$76
13515 2FC0                        DC            .byte	$DC
13516 2FC1                        00            .byte	0
13517 2FC2                        C6            .byte	$C6
13518 2FC3                        E6            .byte	$E6
13519 2FC4                        F6            .byte	$F6
13520 2FC5                        FE            .byte	$FE
13521 2FC6                        DE            .byte	$DE
13522 2FC7                        CE            .byte	$CE
13523 2FC8                        C6            .byte	$C6
13524 2FC9                        C6            .byte	$C6
13525 2FCA                        C6            .byte	$C6
13526 2FCB                        00            .byte	0
13527 2FCC                        00            .byte	0
13528 2FCD                        00            .byte	0
13529 2FCE                        00            .byte	0
13530                                           ! 1575  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13531 2FCF                        00            .byte	0
13532 2FD0                        3C            .byte	$3C
13533 2FD1                        6C            .byte	$6C
13534 2FD2                        6C            .byte	$6C
13535 2FD3                        3E            .byte	$3E
13536 2FD4                        00            .byte	0
13537 2FD5                        7E            .byte	$7E
13538 2FD6                        00            .byte	0
13539 2FD7                        00            .byte	0
13540 2FD8                        00            .byte	0
13541 2FD9                        00            .byte	0
13542 2FDA                        00            .byte	0
13543 2FDB                        00            .byte	0
13544 2FDC                        00            .byte	0
13545 2FDD                        00            .byte	0
13546 2FDE                        00            .byte	0
13547                                           ! 1576  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13548 2FDF                        00            .byte	0
13549 2FE0                        38            .byte	$38
13550 2FE1                        6C            .byte	$6C
13551 2FE2                        6C            .byte	$6C
13552 2FE3                        38            .byte	$38
13553 2FE4                        00            .byte	0
13554 2FE5                        7C            .byte	$7C
13555 2FE6                        00            .byte	0
13556 2FE7                        00            .byte	0
13557 2FE8                        00            .byte	0
13558 2FE9                        00            .byte	0
13559 2FEA                        00            .byte	0
13560 2FEB                        00            .byte	0
13561 2FEC                        00            .byte	0
13562 2FED                        00            .byte	0
13563 2FEE                        00            .byte	0
13564                                           ! 1577  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13565 2FEF                        00            .byte	0
13566 2FF0                        00            .byte	0
13567 2FF1                        30            .byte	$30
13568 2FF2                        30            .byte	$30
13569 2FF3                        00            .byte	0
13570 2FF4                        30            .byte	$30
13571 2FF5                        30            .byte	$30
13572 2FF6                        60            .byte	$60
13573 2FF7                        C0            .byte	$C0
13574 2FF8                        C6            .byte	$C6
13575 2FF9                        C6            .byte	$C6
13576 2FFA                        7C            .byte	$7C
13577 2FFB                        00            .byte	0
13578 2FFC                        00            .byte	0
13579 2FFD                        00            .byte	0
13580 2FFE                        00            .byte	0
13581                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13582 2FFF                        00            .byte	0
13583 3000                        00            .byte	0
13584 3001                        00            .byte	0
13585 3002                        00            .byte	0
13586 3003                        00            .byte	0
13587 3004                        00            .byte	0
13588 3005                        FE            .byte	$FE
13589 3006                        C0            .byte	$C0
13590 3007                        C0            .byte	$C0
13591 3008                        C0            .byte	$C0
13592 3009                        C0            .byte	$C0
13593 300A                        00            .byte	0
13594 300B                        00            .byte	0
13595 300C                        00            .byte	0
13596 300D                        00            .byte	0
13597 300E                        00            .byte	0
13598                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13599 300F                        00            .byte	0
13600 3010                        00            .byte	0
13601 3011                        00            .byte	0
13602 3012                        00            .byte	0
13603 3013                        00            .byte	0
13604 3014                        00            .byte	0
13605 3015                        FE            .byte	$FE
13606 3016                        06            .byte	6
13607 3017                        06            .byte	6
13608 3018                        06            .byte	6
13609 3019                        06            .byte	6
13610 301A                        00            .byte	0
13611 301B                        00            .byte	0
13612 301C                        00            .byte	0
13613 301D                        00            .byte	0
13614 301E                        00            .byte	0
13615                                           ! 1580  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13616 301F                        00            .byte	0
13617 3020                        C0            .byte	$C0
13618 3021                        C0            .byte	$C0
13619 3022                        C2            .byte	$C2
13620 3023                        C6            .byte	$C6
13621 3024                        CC            .byte	$CC
13622 3025                        18            .byte	$18
13623 3026                        30            .byte	$30
13624 3027                        60            .byte	$60
13625 3028                        CE            .byte	$CE
13626 3029                        9B            .byte	$9B
13627 302A                        06            .byte	6
13628 302B                        0C            .byte	$C
13629 302C                        1F            .byte	$1F
13630 302D                        00            .byte	0
13631 302E                        00            .byte	0
13632                                           ! 1581  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13633 302F                        00            .byte	0
13634 3030                        C0            .byte	$C0
13635 3031                        C0            .byte	$C0
13636 3032                        C2            .byte	$C2
13637 3033                        C6            .byte	$C6
13638 3034                        CC            .byte	$CC
13639 3035                        18            .byte	$18
13640 3036                        30            .byte	$30
13641 3037                        66            .byte	$66
13642 3038                        CE            .byte	$CE
13643 3039                        96            .byte	$96
13644 303A                        3E            .byte	$3E
13645 303B                        06            .byte	6
13646 303C                        06            .byte	6
13647 303D                        00            .byte	0
13648 303E                        00            .byte	0
13649                                           ! 1582  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13650 303F                        00            .byte	0
13651 3040                        00            .byte	0
13652 3041                        18            .byte	$18
13653 3042                        18            .byte	$18
13654 3043                        00            .byte	0
13655 3044                        18            .byte	$18
13656 3045                        18            .byte	$18
13657 3046                        18            .byte	$18
13658 3047                        3C            .byte	$3C
13659 3048                        3C            .byte	$3C
13660 3049                        3C            .byte	$3C
13661 304A                        18            .byte	$18
13662 304B                        00            .byte	0
13663 304C                        00            .byte	0
13664 304D                        00            .byte	0
13665 304E                        00            .byte	0
13666                                           ! 1583  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13667 304F                        00            .byte	0
13668 3050                        00            .byte	0
13669 3051                        00            .byte	0
13670 3052                        00            .byte	0
13671 3053                        00            .byte	0
13672 3054                        36            .byte	$36
13673 3055                        6C            .byte	$6C
13674 3056                        D8            .byte	$D8
13675 3057                        6C            .byte	$6C
13676 3058                        36            .byte	$36
13677 3059                        00            .byte	0
13678 305A                        00            .byte	0
13679 305B                        00            .byte	0
13680 305C                        00            .byte	0
13681 305D                        00            .byte	0
13682 305E                        00            .byte	0
13683                                           ! 1584  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13684 305F                        00            .byte	0
13685 3060                        00            .byte	0
13686 3061                        00            .byte	0
13687 3062                        00            .byte	0
13688 3063                        00            .byte	0
13689 3064                        D8            .byte	$D8
13690 3065                        6C            .byte	$6C
13691 3066                        36            .byte	$36
13692 3067                        6C            .byte	$6C
13693 3068                        D8            .byte	$D8
13694 3069                        00            .byte	0
13695 306A                        00            .byte	0
13696 306B                        00            .byte	0
13697 306C                        00            .byte	0
13698 306D                        00            .byte	0
13699 306E                        00            .byte	0
13700                                           ! 1585  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13701 306F                        11            .byte	$11
13702 3070                        44            .byte	$44
13703 3071                        11            .byte	$11
13704 3072                        44            .byte	$44
13705 3073                        11            .byte	$11
13706 3074                        44            .byte	$44
13707 3075                        11            .byte	$11
13708 3076                        44            .byte	$44
13709 3077                        11            .byte	$11
13710 3078                        44            .byte	$44
13711 3079                        11            .byte	$11
13712 307A                        44            .byte	$44
13713 307B                        11            .byte	$11
13714 307C                        44            .byte	$44
13715 307D                        11            .byte	$11
13716 307E                        44            .byte	$44
13717                                           ! 1586  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13718 307F                        55            .byte	$55
13719 3080                        AA            .byte	$AA
13720 3081                        55            .byte	$55
13721 3082                        AA            .byte	$AA
13722 3083                        55            .byte	$55
13723 3084                        AA            .byte	$AA
13724 3085                        55            .byte	$55
13725 3086                        AA            .byte	$AA
13726 3087                        55            .byte	$55
13727 3088                        AA            .byte	$AA
13728 3089                        55            .byte	$55
13729 308A                        AA            .byte	$AA
13730 308B                        55            .byte	$55
13731 308C                        AA            .byte	$AA
13732 308D                        55            .byte	$55
13733 308E                        AA            .byte	$AA
13734                                           ! 1587  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13735 308F                        DD            .byte	$DD
13736 3090                        77            .byte	$77
13737 3091                        DD            .byte	$DD
13738 3092                        77            .byte	$77
13739 3093                        DD            .byte	$DD
13740 3094                        77            .byte	$77
13741 3095                        DD            .byte	$DD
13742 3096                        77            .byte	$77
13743 3097                        DD            .byte	$DD
13744 3098                        77            .byte	$77
13745 3099                        DD            .byte	$DD
13746 309A                        77            .byte	$77
13747 309B                        DD            .byte	$DD
13748 309C                        77            .byte	$77
13749 309D                        DD            .byte	$DD
13750 309E                        77            .byte	$77
13751                                           ! 1588  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13752 309F                        18            .byte	$18
13753 30A0                        18            .byte	$18
13754 30A1                        18            .byte	$18
13755 30A2                        18            .byte	$18
13756 30A3                        18            .byte	$18
13757 30A4                        18            .byte	$18
13758 30A5                        18            .byte	$18
13759 30A6                        18            .byte	$18
13760 30A7                        18            .byte	$18
13761 30A8                        18            .byte	$18
13762 30A9                        18            .byte	$18
13763 30AA                        18            .byte	$18
13764 30AB                        18            .byte	$18
13765 30AC                        18            .byte	$18
13766 30AD                        18            .byte	$18
13767 30AE                        18            .byte	$18
13768                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1
13769 30AF                        18            .byte	$18
13770 30B0                        18            .byte	$18
13771 30B1                        18            .byte	$18
13772 30B2                        18            .byte	$18
13773 30B3                        18            .byte	$18
13774 30B4                        18            .byte	$18
13775                                           ! 1589 8, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13776 30B5                        18            .byte	$18
13777 30B6                        F8            .byte	$F8
13778 30B7                        18            .byte	$18
13779 30B8                        18            .byte	$18
13780 30B9                        18            .byte	$18
13781 30BA                        18            .byte	$18
13782 30BB                        18            .byte	$18
13783 30BC                        18            .byte	$18
13784 30BD                        18            .byte	$18
13785 30BE                        18            .byte	$18
13786                                           ! 1590  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13787 30BF                        18            .byte	$18
13788 30C0                        18            .byte	$18
13789 30C1                        18            .byte	$18
13790 30C2                        18            .byte	$18
13791 30C3                        18            .byte	$18
13792 30C4                        F8            .byte	$F8
13793 30C5                        18            .byte	$18
13794 30C6                        F8            .byte	$F8
13795 30C7                        18            .byte	$18
13796 30C8                        18            .byte	$18
13797 30C9                        18            .byte	$18
13798 30CA                        18            .byte	$18
13799 30CB                        18            .byte	$18
13800 30CC                        18            .byte	$18
13801 30CD                        18            .byte	$18
13802 30CE                        18            .byte	$18
13803                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13804 30CF                        36            .byte	$36
13805 30D0                        36            .byte	$36
13806 30D1                        36            .byte	$36
13807 30D2                        36            .byte	$36
13808 30D3                        36            .byte	$36
13809 30D4                        36            .byte	$36
13810 30D5                        36            .byte	$36
13811 30D6                        F6            .byte	$F6
13812 30D7                        36            .byte	$36
13813 30D8                        36            .byte	$36
13814 30D9                        36            .byte	$36
13815 30DA                        36            .byte	$36
13816 30DB                        36            .byte	$36
13817 30DC                        36            .byte	$36
13818 30DD                        36            .byte	$36
13819 30DE                        36            .byte	$36
13820                                           ! 1592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13821 30DF                        00            .byte	0
13822 30E0                        00            .byte	0
13823 30E1                        00            .byte	0
13824 30E2                        00            .byte	0
13825 30E3                        00            .byte	0
13826 30E4                        00            .byte	0
13827 30E5                        00            .byte	0
13828 30E6                        FE            .byte	$FE
13829 30E7                        36            .byte	$36
13830 30E8                        36            .byte	$36
13831 30E9                        36            .byte	$36
13832 30EA                        36            .byte	$36
13833 30EB                        36            .byte	$36
13834 30EC                        36            .byte	$36
13835 30ED                        36            .byte	$36
13836 30EE                        36            .byte	$36
13837                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13838 30EF                        00            .byte	0
13839 30F0                        00            .byte	0
13840 30F1                        00            .byte	0
13841 30F2                        00            .byte	0
13842 30F3                        00            .byte	0
13843 30F4                        F8            .byte	$F8
13844 30F5                        18            .byte	$18
13845 30F6                        F8            .byte	$F8
13846 30F7                        18            .byte	$18
13847 30F8                        18            .byte	$18
13848 30F9                        18            .byte	$18
13849 30FA                        18            .byte	$18
13850 30FB                        18            .byte	$18
13851 30FC                        18            .byte	$18
13852 30FD                        18            .byte	$18
13853 30FE                        18            .byte	$18
13854                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13855 30FF                        36            .byte	$36
13856 3100                        36            .byte	$36
13857 3101                        36            .byte	$36
13858 3102                        36            .byte	$36
13859 3103                        36            .byte	$36
13860 3104                        F6            .byte	$F6
13861 3105                        06            .byte	6
13862 3106                        F6            .byte	$F6
13863 3107                        36            .byte	$36
13864 3108                        36            .byte	$36
13865 3109                        36            .byte	$36
13866 310A                        36            .byte	$36
13867 310B                        36            .byte	$36
13868 310C                        36            .byte	$36
13869 310D                        36            .byte	$36
13870 310E                        36            .byte	$36
13871                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13872 310F                        36            .byte	$36
13873 3110                        36            .byte	$36
13874 3111                        36            .byte	$36
13875 3112                        36            .byte	$36
13876 3113                        36            .byte	$36
13877 3114                        36            .byte	$36
13878 3115                        36            .byte	$36
13879 3116                        36            .byte	$36
13880 3117                        36            .byte	$36
13881 3118                        36            .byte	$36
13882 3119                        36            .byte	$36
13883 311A                        36            .byte	$36
13884 311B                        36            .byte	$36
13885 311C                        36            .byte	$36
13886 311D                        36            .byte	$36
13887 311E                        36            .byte	$36
13888                                           ! 1596  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13889 311F                        00            .byte	0
13890 3120                        00            .byte	0
13891 3121                        00            .byte	0
13892 3122                        00            .byte	0
13893 3123                        00            .byte	0
13894 3124                        FE            .byte	$FE
13895 3125                        06            .byte	6
13896 3126                        F6            .byte	$F6
13897 3127                        36            .byte	$36
13898 3128                        36            .byte	$36
13899 3129                        36            .byte	$36
13900 312A                        36            .byte	$36
13901 312B                        36            .byte	$36
13902 312C                        36            .byte	$36
13903 312D                        36            .byte	$36
13904 312E                        36            .byte	$36
13905                                           ! 1597  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13906 312F                        36            .byte	$36
13907 3130                        36            .byte	$36
13908 3131                        36            .byte	$36
13909 3132                        36            .byte	$36
13910 3133                        36            .byte	$36
13911 3134                        F6            .byte	$F6
13912 3135                        06            .byte	6
13913 3136                        FE            .byte	$FE
13914 3137                        00            .byte	0
13915 3138                        00            .byte	0
13916 3139                        00            .byte	0
13917 313A                        00            .byte	0
13918 313B                        00            .byte	0
13919 313C                        00            .byte	0
13920 313D                        00            .byte	0
13921 313E                        00            .byte	0
13922                                           ! 1598  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13923 313F                        36            .byte	$36
13924 3140                        36            .byte	$36
13925 3141                        36            .byte	$36
13926 3142                        36            .byte	$36
13927 3143                        36            .byte	$36
13928 3144                        36            .byte	$36
13929 3145                        36            .byte	$36
13930 3146                        FE            .byte	$FE
13931 3147                        00            .byte	0
13932 3148                        00            .byte	0
13933 3149                        00            .byte	0
13934 314A                        00            .byte	0
13935 314B                        00            .byte	0
13936 314C                        00            .byte	0
13937 314D                        00            .byte	0
13938 314E                        00            .byte	0
13939                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13940 314F                        18            .byte	$18
13941 3150                        18            .byte	$18
13942 3151                        18            .byte	$18
13943 3152                        18            .byte	$18
13944 3153                        18            .byte	$18
13945 3154                        F8            .byte	$F8
13946 3155                        18            .byte	$18
13947 3156                        F8            .byte	$F8
13948 3157                        00            .byte	0
13949 3158                        00            .byte	0
13950 3159                        00            .byte	0
13951 315A                        00            .byte	0
13952 315B                        00            .byte	0
13953 315C                        00            .byte	0
13954 315D                        00            .byte	0
13955 315E                        00            .byte	0
13956                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13957 315F                        00            .byte	0
13958 3160                        00            .byte	0
13959 3161                        00            .byte	0
13960 3162                        00            .byte	0
13961 3163                        00            .byte	0
13962 3164                        00            .byte	0
13963 3165                        00            .byte	0
13964 3166                        F8            .byte	$F8
13965 3167                        18            .byte	$18
13966 3168                        18            .byte	$18
13967 3169                        18            .byte	$18
13968 316A                        18            .byte	$18
13969 316B                        18            .byte	$18
13970 316C                        18            .byte	$18
13971 316D                        18            .byte	$18
13972 316E                        18            .byte	$18
13973                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13974 316F                        18            .byte	$18
13975 3170                        18            .byte	$18
13976 3171                        18            .byte	$18
13977 3172                        18            .byte	$18
13978 3173                        18            .byte	$18
13979 3174                        18            .byte	$18
13980 3175                        18            .byte	$18
13981 3176                        1F            .byte	$1F
13982 3177                        00            .byte	0
13983 3178                        00            .byte	0
13984 3179                        00            .byte	0
13985 317A                        00            .byte	0
13986 317B                        00            .byte	0
13987 317C                        00            .byte	0
13988 317D                        00            .byte	0
13989 317E                        00            .byte	0
13990                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13991 317F                        18            .byte	$18
13992 3180                        18            .byte	$18
13993 3181                        18            .byte	$18
13994 3182                        18            .byte	$18
13995 3183                        18            .byte	$18
13996 3184                        18            .byte	$18
13997 3185                        18            .byte	$18
13998 3186                        FF            .byte	$FF
13999 3187                        00            .byte	0
14000 3188                        00            .byte	0
14001 3189                        00            .byte	0
14002 318A                        00            .byte	0
14003 318B                        00            .byte	0
14004 318C                        00            .byte	0
14005 318D                        00            .byte	0
14006 318E                        00            .byte	0
14007                                           ! 1603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14008 318F                        00            .byte	0
14009 3190                        00            .byte	0
14010 3191                        00            .byte	0
14011 3192                        00            .byte	0
14012 3193                        00            .byte	0
14013 3194                        00            .byte	0
14014 3195                        00            .byte	0
14015 3196                        FF            .byte	$FF
14016 3197                        18            .byte	$18
14017 3198                        18            .byte	$18
14018 3199                        18            .byte	$18
14019 319A                        18            .byte	$18
14020 319B                        18            .byte	$18
14021 319C                        18            .byte	$18
14022 319D                        18            .byte	$18
14023 319E                        18            .byte	$18
14024                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14025 319F                        18            .byte	$18
14026 31A0                        18            .byte	$18
14027 31A1                        18            .byte	$18
14028 31A2                        18            .byte	$18
14029 31A3                        18            .byte	$18
14030 31A4                        18            .byte	$18
14031 31A5                        18            .byte	$18
14032 31A6                        1F            .byte	$1F
14033 31A7                        18            .byte	$18
14034 31A8                        18            .byte	$18
14035 31A9                        18            .byte	$18
14036 31AA                        18            .byte	$18
14037 31AB                        18            .byte	$18
14038 31AC                        18            .byte	$18
14039 31AD                        18            .byte	$18
14040 31AE                        18            .byte	$18
14041                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14042 31AF                        00            .byte	0
14043 31B0                        00            .byte	0
14044 31B1                        00            .byte	0
14045 31B2                        00            .byte	0
14046 31B3                        00            .byte	0
14047 31B4                        00            .byte	0
14048 31B5                        00            .byte	0
14049 31B6                        FF            .byte	$FF
14050 31B7                        00            .byte	0
14051 31B8                        00            .byte	0
14052 31B9                        00            .byte	0
14053 31BA                        00            .byte	0
14054 31BB                        00            .byte	0
14055 31BC                        00            .byte	0
14056 31BD                        00            .byte	0
14057 31BE                        00            .byte	0
14058                                           ! 1606  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14059 31BF                        18            .byte	$18
14060 31C0                        18            .byte	$18
14061 31C1                        18            .byte	$18
14062 31C2                        18            .byte	$18
14063 31C3                        18            .byte	$18
14064 31C4                        18            .byte	$18
14065 31C5                        18            .byte	$18
14066 31C6                        FF            .byte	$FF
14067 31C7                        18            .byte	$18
14068 31C8                        18            .byte	$18
14069 31C9                        18            .byte	$18
14070 31CA                        18            .byte	$18
14071 31CB                        18            .byte	$18
14072 31CC                        18            .byte	$18
14073 31CD                        18            .byte	$18
14074 31CE                        18            .byte	$18
14075                                           ! 1607  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14076 31CF                        18            .byte	$18
14077 31D0                        18            .byte	$18
14078 31D1                        18            .byte	$18
14079 31D2                        18            .byte	$18
14080 31D3                        18            .byte	$18
14081 31D4                        1F            .byte	$1F
14082 31D5                        18            .byte	$18
14083 31D6                        1F            .byte	$1F
14084 31D7                        18            .byte	$18
14085 31D8                        18            .byte	$18
14086 31D9                        18            .byte	$18
14087 31DA                        18            .byte	$18
14088 31DB                        18            .byte	$18
14089 31DC                        18            .byte	$18
14090 31DD                        18            .byte	$18
14091 31DE                        18            .byte	$18
14092                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14093 31DF                        36            .byte	$36
14094 31E0                        36            .byte	$36
14095 31E1                        36            .byte	$36
14096 31E2                        36            .byte	$36
14097 31E3                        36            .byte	$36
14098 31E4                        36            .byte	$36
14099 31E5                        36            .byte	$36
14100 31E6                        37            .byte	$37
14101 31E7                        36            .byte	$36
14102 31E8                        36            .byte	$36
14103 31E9                        36            .byte	$36
14104 31EA                        36            .byte	$36
14105 31EB                        36            .byte	$36
14106 31EC                        36            .byte	$36
14107 31ED                        36            .byte	$36
14108 31EE                        36            .byte	$36
14109                                           ! 1609  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14110 31EF                        36            .byte	$36
14111 31F0                        36            .byte	$36
14112 31F1                        36            .byte	$36
14113 31F2                        36            .byte	$36
14114 31F3                        36            .byte	$36
14115 31F4                        37            .byte	$37
14116 31F5                        30            .byte	$30
14117 31F6                        3F            .byte	$3F
14118 31F7                        00            .byte	0
14119 31F8                        00            .byte	0
14120 31F9                        00            .byte	0
14121 31FA                        00            .byte	0
14122 31FB                        00            .byte	0
14123 31FC                        00            .byte	0
14124 31FD                        00            .byte	0
14125 31FE                        00            .byte	0
14126                                           ! 1610  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x
14127 31FF                        00            .byte	0
14128 3200                        00            .byte	0
14129 3201                        00            .byte	0
14130 3202                        00            .byte	0
14131 3203                        00            .byte	0
14132 3204                        3F            .byte	$3F
14133 3205                        30            .byte	$30
14134 3206                        37            .byte	$37
14135                                           ! 1610 36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14136 3207                        36            .byte	$36
14137 3208                        36            .byte	$36
14138 3209                        36            .byte	$36
14139 320A                        36            .byte	$36
14140 320B                        36            .byte	$36
14141 320C                        36            .byte	$36
14142 320D                        36            .byte	$36
14143 320E                        36            .byte	$36
14144                                           ! 1611  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14145 320F                        36            .byte	$36
14146 3210                        36            .byte	$36
14147 3211                        36            .byte	$36
14148 3212                        36            .byte	$36
14149 3213                        36            .byte	$36
14150 3214                        F7            .byte	$F7
14151 3215                        00            .byte	0
14152 3216                        FF            .byte	$FF
14153 3217                        00            .byte	0
14154 3218                        00            .byte	0
14155 3219                        00            .byte	0
14156 321A                        00            .byte	0
14157 321B                        00            .byte	0
14158 321C                        00            .byte	0
14159 321D                        00            .byte	0
14160 321E                        00            .byte	0
14161                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14162 321F                        00            .byte	0
14163 3220                        00            .byte	0
14164 3221                        00            .byte	0
14165 3222                        00            .byte	0
14166 3223                        00            .byte	0
14167 3224                        FF            .byte	$FF
14168 3225                        00            .byte	0
14169 3226                        F7            .byte	$F7
14170 3227                        36            .byte	$36
14171 3228                        36            .byte	$36
14172 3229                        36            .byte	$36
14173 322A                        36            .byte	$36
14174 322B                        36            .byte	$36
14175 322C                        36            .byte	$36
14176 322D                        36            .byte	$36
14177 322E                        36            .byte	$36
14178                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14179 322F                        36            .byte	$36
14180 3230                        36            .byte	$36
14181 3231                        36            .byte	$36
14182 3232                        36            .byte	$36
14183 3233                        36            .byte	$36
14184 3234                        37            .byte	$37
14185 3235                        30            .byte	$30
14186 3236                        37            .byte	$37
14187 3237                        36            .byte	$36
14188 3238                        36            .byte	$36
14189 3239                        36            .byte	$36
14190 323A                        36            .byte	$36
14191 323B                        36            .byte	$36
14192 323C                        36            .byte	$36
14193 323D                        36            .byte	$36
14194 323E                        36            .byte	$36
14195                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14196 323F                        00            .byte	0
14197 3240                        00            .byte	0
14198 3241                        00            .byte	0
14199 3242                        00            .byte	0
14200 3243                        00            .byte	0
14201 3244                        FF            .byte	$FF
14202 3245                        00            .byte	0
14203 3246                        FF            .byte	$FF
14204 3247                        00            .byte	0
14205 3248                        00            .byte	0
14206 3249                        00            .byte	0
14207 324A                        00            .byte	0
14208 324B                        00            .byte	0
14209 324C                        00            .byte	0
14210 324D                        00            .byte	0
14211 324E                        00            .byte	0
14212                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14213 324F                        36            .byte	$36
14214 3250                        36            .byte	$36
14215 3251                        36            .byte	$36
14216 3252                        36            .byte	$36
14217 3253                        36            .byte	$36
14218 3254                        F7            .byte	$F7
14219 3255                        00            .byte	0
14220 3256                        F7            .byte	$F7
14221 3257                        36            .byte	$36
14222 3258                        36            .byte	$36
14223 3259                        36            .byte	$36
14224 325A                        36            .byte	$36
14225 325B                        36            .byte	$36
14226 325C                        36            .byte	$36
14227 325D                        36            .byte	$36
14228 325E                        36            .byte	$36
14229                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14230 325F                        18            .byte	$18
14231 3260                        18            .byte	$18
14232 3261                        18            .byte	$18
14233 3262                        18            .byte	$18
14234 3263                        18            .byte	$18
14235 3264                        FF            .byte	$FF
14236 3265                        00            .byte	0
14237 3266                        FF            .byte	$FF
14238 3267                        00            .byte	0
14239 3268                        00            .byte	0
14240 3269                        00            .byte	0
14241 326A                        00            .byte	0
14242 326B                        00            .byte	0
14243 326C                        00            .byte	0
14244 326D                        00            .byte	0
14245 326E                        00            .byte	0
14246                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14247 326F                        36            .byte	$36
14248 3270                        36            .byte	$36
14249 3271                        36            .byte	$36
14250 3272                        36            .byte	$36
14251 3273                        36            .byte	$36
14252 3274                        36            .byte	$36
14253 3275                        36            .byte	$36
14254 3276                        FF            .byte	$FF
14255 3277                        00            .byte	0
14256 3278                        00            .byte	0
14257 3279                        00            .byte	0
14258 327A                        00            .byte	0
14259 327B                        00            .byte	0
14260 327C                        00            .byte	0
14261 327D                        00            .byte	0
14262 327E                        00            .byte	0
14263                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14264 327F                        00            .byte	0
14265 3280                        00            .byte	0
14266 3281                        00            .byte	0
14267 3282                        00            .byte	0
14268 3283                        00            .byte	0
14269 3284                        FF            .byte	$FF
14270 3285                        00            .byte	0
14271 3286                        FF            .byte	$FF
14272 3287                        18            .byte	$18
14273 3288                        18            .byte	$18
14274 3289                        18            .byte	$18
14275 328A                        18            .byte	$18
14276 328B                        18            .byte	$18
14277 328C                        18            .byte	$18
14278 328D                        18            .byte	$18
14279 328E                        18            .byte	$18
14280                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14281 328F                        00            .byte	0
14282 3290                        00            .byte	0
14283 3291                        00            .byte	0
14284 3292                        00            .byte	0
14285 3293                        00            .byte	0
14286 3294                        00            .byte	0
14287 3295                        00            .byte	0
14288 3296                        FF            .byte	$FF
14289 3297                        36            .byte	$36
14290 3298                        36            .byte	$36
14291 3299                        36            .byte	$36
14292 329A                        36            .byte	$36
14293 329B                        36            .byte	$36
14294 329C                        36            .byte	$36
14295 329D                        36            .byte	$36
14296 329E                        36            .byte	$36
14297                                           ! 1620  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14298 329F                        36            .byte	$36
14299 32A0                        36            .byte	$36
14300 32A1                        36            .byte	$36
14301 32A2                        36            .byte	$36
14302 32A3                        36            .byte	$36
14303 32A4                        36            .byte	$36
14304 32A5                        36            .byte	$36
14305 32A6                        3F            .byte	$3F
14306 32A7                        00            .byte	0
14307 32A8                        00            .byte	0
14308 32A9                        00            .byte	0
14309 32AA                        00            .byte	0
14310 32AB                        00            .byte	0
14311 32AC                        00            .byte	0
14312 32AD                        00            .byte	0
14313 32AE                        00            .byte	0
14314                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14315 32AF                        18            .byte	$18
14316 32B0                        18            .byte	$18
14317 32B1                        18            .byte	$18
14318 32B2                        18            .byte	$18
14319 32B3                        18            .byte	$18
14320 32B4                        1F            .byte	$1F
14321 32B5                        18            .byte	$18
14322 32B6                        1F            .byte	$1F
14323 32B7                        00            .byte	0
14324 32B8                        00            .byte	0
14325 32B9                        00            .byte	0
14326 32BA                        00            .byte	0
14327 32BB                        00            .byte	0
14328 32BC                        00            .byte	0
14329 32BD                        00            .byte	0
14330 32BE                        00            .byte	0
14331                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14332 32BF                        00            .byte	0
14333 32C0                        00            .byte	0
14334 32C1                        00            .byte	0
14335 32C2                        00            .byte	0
14336 32C3                        00            .byte	0
14337 32C4                        1F            .byte	$1F
14338 32C5                        18            .byte	$18
14339 32C6                        1F            .byte	$1F
14340 32C7                        18            .byte	$18
14341 32C8                        18            .byte	$18
14342 32C9                        18            .byte	$18
14343 32CA                        18            .byte	$18
14344 32CB                        18            .byte	$18
14345 32CC                        18            .byte	$18
14346 32CD                        18            .byte	$18
14347 32CE                        18            .byte	$18
14348                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14349 32CF                        00            .byte	0
14350 32D0                        00            .byte	0
14351 32D1                        00            .byte	0
14352 32D2                        00            .byte	0
14353 32D3                        00            .byte	0
14354 32D4                        00            .byte	0
14355 32D5                        00            .byte	0
14356 32D6                        3F            .byte	$3F
14357 32D7                        36            .byte	$36
14358 32D8                        36            .byte	$36
14359 32D9                        36            .byte	$36
14360 32DA                        36            .byte	$36
14361 32DB                        36            .byte	$36
14362 32DC                        36            .byte	$36
14363 32DD                        36            .byte	$36
14364 32DE                        36            .byte	$36
14365                                           ! 1624  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14366 32DF                        36            .byte	$36
14367 32E0                        36            .byte	$36
14368 32E1                        36            .byte	$36
14369 32E2                        36            .byte	$36
14370 32E3                        36            .byte	$36
14371 32E4                        36            .byte	$36
14372 32E5                        36            .byte	$36
14373 32E6                        FF            .byte	$FF
14374 32E7                        36            .byte	$36
14375 32E8                        36            .byte	$36
14376 32E9                        36            .byte	$36
14377 32EA                        36            .byte	$36
14378 32EB                        36            .byte	$36
14379 32EC                        36            .byte	$36
14380 32ED                        36            .byte	$36
14381 32EE                        36            .byte	$36
14382                                           ! 1625  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14383 32EF                        18            .byte	$18
14384 32F0                        18            .byte	$18
14385 32F1                        18            .byte	$18
14386 32F2                        18            .byte	$18
14387 32F3                        18            .byte	$18
14388 32F4                        FF            .byte	$FF
14389 32F5                        18            .byte	$18
14390 32F6                        FF            .byte	$FF
14391 32F7                        18            .byte	$18
14392 32F8                        18            .byte	$18
14393 32F9                        18            .byte	$18
14394 32FA                        18            .byte	$18
14395 32FB                        18            .byte	$18
14396 32FC                        18            .byte	$18
14397 32FD                        18            .byte	$18
14398 32FE                        18            .byte	$18
14399                                           ! 1626  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14400 32FF                        18            .byte	$18
14401 3300                        18            .byte	$18
14402 3301                        18            .byte	$18
14403 3302                        18            .byte	$18
14404 3303                        18            .byte	$18
14405 3304                        18            .byte	$18
14406 3305                        18            .byte	$18
14407 3306                        F8            .byte	$F8
14408 3307                        00            .byte	0
14409 3308                        00            .byte	0
14410 3309                        00            .byte	0
14411 330A                        00            .byte	0
14412 330B                        00            .byte	0
14413 330C                        00            .byte	0
14414 330D                        00            .byte	0
14415 330E                        00            .byte	0
14416                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14417 330F                        00            .byte	0
14418 3310                        00            .byte	0
14419 3311                        00            .byte	0
14420 3312                        00            .byte	0
14421 3313                        00            .byte	0
14422 3314                        00            .byte	0
14423 3315                        00            .byte	0
14424 3316                        1F            .byte	$1F
14425 3317                        18            .byte	$18
14426 3318                        18            .byte	$18
14427 3319                        18            .byte	$18
14428 331A                        18            .byte	$18
14429 331B                        18            .byte	$18
14430 331C                        18            .byte	$18
14431 331D                        18            .byte	$18
14432 331E                        18            .byte	$18
14433                                           ! 1628  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14434 331F                        FF            .byte	$FF
14435 3320                        FF            .byte	$FF
14436 3321                        FF            .byte	$FF
14437 3322                        FF            .byte	$FF
14438 3323                        FF            .byte	$FF
14439 3324                        FF            .byte	$FF
14440 3325                        FF            .byte	$FF
14441 3326                        FF            .byte	$FF
14442 3327                        FF            .byte	$FF
14443 3328                        FF            .byte	$FF
14444 3329                        FF            .byte	$FF
14445 332A                        FF            .byte	$FF
14446 332B                        FF            .byte	$FF
14447 332C                        FF            .byte	$FF
14448 332D                        FF            .byte	$FF
14449 332E                        FF            .byte	$FF
14450                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14451 332F                        00            .byte	0
14452 3330                        00            .byte	0
14453 3331                        00            .byte	0
14454 3332                        00            .byte	0
14455 3333                        00            .byte	0
14456 3334                        00            .byte	0
14457 3335                        00            .byte	0
14458 3336                        FF            .byte	$FF
14459 3337                        FF            .byte	$FF
14460 3338                        FF            .byte	$FF
14461 3339                        FF            .byte	$FF
14462 333A                        FF            .byte	$FF
14463 333B                        FF            .byte	$FF
14464 333C                        FF            .byte	$FF
14465 333D                        FF            .byte	$FF
14466 333E                        FF            .byte	$FF
14467                                           ! 1630  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14468 333F                        F0            .byte	$F0
14469 3340                        F0            .byte	$F0
14470 3341                        F0            .byte	$F0
14471 3342                        F0            .byte	$F0
14472 3343                        F0            .byte	$F0
14473 3344                        F0            .byte	$F0
14474 3345                        F0            .byte	$F0
14475 3346                        F0            .byte	$F0
14476 3347                        F0            .byte	$F0
14477 3348                        F0            .byte	$F0
14478 3349                        F0            .byte	$F0
14479 334A                        F0            .byte	$F0
14480 334B                        F0            .byte	$F0
14481 334C                        F0            .byte	$F0
14482 334D                        F0            .byte	$F0
14483 334E                        F0            .byte	$F0
14484                                           ! 1631  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
14485 334F                        0F            .byte	$F
14486 3350                        0F            .byte	$F
14487 3351                        0F            .byte	$F
14488 3352                        0F            .byte	$F
14489 3353                        0F            .byte	$F
14490 3354                        0F            .byte	$F
14491 3355                        0F            .byte	$F
14492 3356                        0F            .byte	$F
14493 3357                        0F            .byte	$F
14494 3358                        0F            .byte	$F
14495                                           ! 1631 x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14496 3359                        0F            .byte	$F
14497 335A                        0F            .byte	$F
14498 335B                        0F            .byte	$F
14499 335C                        0F            .byte	$F
14500 335D                        0F            .byte	$F
14501 335E                        0F            .byte	$F
14502                                           ! 1632  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14503 335F                        FF            .byte	$FF
14504 3360                        FF            .byte	$FF
14505 3361                        FF            .byte	$FF
14506 3362                        FF            .byte	$FF
14507 3363                        FF            .byte	$FF
14508 3364                        FF            .byte	$FF
14509 3365                        FF            .byte	$FF
14510 3366                        00            .byte	0
14511 3367                        00            .byte	0
14512 3368                        00            .byte	0
14513 3369                        00            .byte	0
14514 336A                        00            .byte	0
14515 336B                        00            .byte	0
14516 336C                        00            .byte	0
14517 336D                        00            .byte	0
14518 336E                        00            .byte	0
14519                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14520 336F                        00            .byte	0
14521 3370                        00            .byte	0
14522 3371                        00            .byte	0
14523 3372                        00            .byte	0
14524 3373                        00            .byte	0
14525 3374                        76            .byte	$76
14526 3375                        DC            .byte	$DC
14527 3376                        D8            .byte	$D8
14528 3377                        D8            .byte	$D8
14529 3378                        D8            .byte	$D8
14530 3379                        DC            .byte	$DC
14531 337A                        76            .byte	$76
14532 337B                        00            .byte	0
14533 337C                        00            .byte	0
14534 337D                        00            .byte	0
14535 337E                        00            .byte	0
14536                                           ! 1634  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14537 337F                        00            .byte	0
14538 3380                        00            .byte	0
14539 3381                        78            .byte	$78
14540 3382                        CC            .byte	$CC
14541 3383                        CC            .byte	$CC
14542 3384                        CC            .byte	$CC
14543 3385                        D8            .byte	$D8
14544 3386                        CC            .byte	$CC
14545 3387                        C6            .byte	$C6
14546 3388                        C6            .byte	$C6
14547 3389                        C6            .byte	$C6
14548 338A                        CC            .byte	$CC
14549 338B                        00            .byte	0
14550 338C                        00            .byte	0
14551 338D                        00            .byte	0
14552 338E                        00            .byte	0
14553                                           ! 1635  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14554 338F                        00            .byte	0
14555 3390                        00            .byte	0
14556 3391                        FE            .byte	$FE
14557 3392                        C6            .byte	$C6
14558 3393                        C6            .byte	$C6
14559 3394                        C0            .byte	$C0
14560 3395                        C0            .byte	$C0
14561 3396                        C0            .byte	$C0
14562 3397                        C0            .byte	$C0
14563 3398                        C0            .byte	$C0
14564 3399                        C0            .byte	$C0
14565 339A                        C0            .byte	$C0
14566 339B                        00            .byte	0
14567 339C                        00            .byte	0
14568 339D                        00            .byte	0
14569 339E                        00            .byte	0
14570                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14571 339F                        00            .byte	0
14572 33A0                        00            .byte	0
14573 33A1                        00            .byte	0
14574 33A2                        00            .byte	0
14575 33A3                        FE            .byte	$FE
14576 33A4                        6C            .byte	$6C
14577 33A5                        6C            .byte	$6C
14578 33A6                        6C            .byte	$6C
14579 33A7                        6C            .byte	$6C
14580 33A8                        6C            .byte	$6C
14581 33A9                        6C            .byte	$6C
14582 33AA                        6C            .byte	$6C
14583 33AB                        00            .byte	0
14584 33AC                        00            .byte	0
14585 33AD                        00            .byte	0
14586 33AE                        00            .byte	0
14587                                           ! 1637  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14588 33AF                        00            .byte	0
14589 33B0                        00            .byte	0
14590 33B1                        00            .byte	0
14591 33B2                        FE            .byte	$FE
14592 33B3                        C6            .byte	$C6
14593 33B4                        60            .byte	$60
14594 33B5                        30            .byte	$30
14595 33B6                        18            .byte	$18
14596 33B7                        30            .byte	$30
14597 33B8                        60            .byte	$60
14598 33B9                        C6            .byte	$C6
14599 33BA                        FE            .byte	$FE
14600 33BB                        00            .byte	0
14601 33BC                        00            .byte	0
14602 33BD                        00            .byte	0
14603 33BE                        00            .byte	0
14604                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14605 33BF                        00            .byte	0
14606 33C0                        00            .byte	0
14607 33C1                        00            .byte	0
14608 33C2                        00            .byte	0
14609 33C3                        00            .byte	0
14610 33C4                        7E            .byte	$7E
14611 33C5                        D8            .byte	$D8
14612 33C6                        D8            .byte	$D8
14613 33C7                        D8            .byte	$D8
14614 33C8                        D8            .byte	$D8
14615 33C9                        D8            .byte	$D8
14616 33CA                        70            .byte	$70
14617 33CB                        00            .byte	0
14618 33CC                        00            .byte	0
14619 33CD                        00            .byte	0
14620 33CE                        00            .byte	0
14621                                           ! 1639  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14622 33CF                        00            .byte	0
14623 33D0                        00            .byte	0
14624 33D1                        00            .byte	0
14625 33D2                        00            .byte	0
14626 33D3                        66            .byte	$66
14627 33D4                        66            .byte	$66
14628 33D5                        66            .byte	$66
14629 33D6                        66            .byte	$66
14630 33D7                        66            .byte	$66
14631 33D8                        7C            .byte	$7C
14632 33D9                        60            .byte	$60
14633 33DA                        60            .byte	$60
14634 33DB                        C0            .byte	$C0
14635 33DC                        00            .byte	0
14636 33DD                        00            .byte	0
14637 33DE                        00            .byte	0
14638                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14639 33DF                        00            .byte	0
14640 33E0                        00            .byte	0
14641 33E1                        00            .byte	0
14642 33E2                        00            .byte	0
14643 33E3                        76            .byte	$76
14644 33E4                        DC            .byte	$DC
14645 33E5                        18            .byte	$18
14646 33E6                        18            .byte	$18
14647 33E7                        18            .byte	$18
14648 33E8                        18            .byte	$18
14649 33E9                        18            .byte	$18
14650 33EA                        18            .byte	$18
14651 33EB                        00            .byte	0
14652 33EC                        00            .byte	0
14653 33ED                        00            .byte	0
14654 33EE                        00            .byte	0
14655                                           ! 1641  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14656 33EF                        00            .byte	0
14657 33F0                        00            .byte	0
14658 33F1                        00            .byte	0
14659 33F2                        7E            .byte	$7E
14660 33F3                        18            .byte	$18
14661 33F4                        3C            .byte	$3C
14662 33F5                        66            .byte	$66
14663 33F6                        66            .byte	$66
14664 33F7                        66            .byte	$66
14665 33F8                        3C            .byte	$3C
14666 33F9                        18            .byte	$18
14667 33FA                        7E            .byte	$7E
14668 33FB                        00            .byte	0
14669 33FC                        00            .byte	0
14670 33FD                        00            .byte	0
14671 33FE                        00            .byte	0
14672                                           ! 1642  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14673 33FF                        00            .byte	0
14674 3400                        00            .byte	0
14675 3401                        00            .byte	0
14676 3402                        38            .byte	$38
14677 3403                        6C            .byte	$6C
14678 3404                        C6            .byte	$C6
14679 3405                        C6            .byte	$C6
14680 3406                        FE            .byte	$FE
14681 3407                        C6            .byte	$C6
14682 3408                        C6            .byte	$C6
14683 3409                        6C            .byte	$6C
14684 340A                        38            .byte	$38
14685 340B                        00            .byte	0
14686 340C                        00            .byte	0
14687 340D                        00            .byte	0
14688 340E                        00            .byte	0
14689                                           ! 1643  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14690 340F                        00            .byte	0
14691 3410                        00            .byte	0
14692 3411                        38            .byte	$38
14693 3412                        6C            .byte	$6C
14694 3413                        C6            .byte	$C6
14695 3414                        C6            .byte	$C6
14696 3415                        C6            .byte	$C6
14697 3416                        6C            .byte	$6C
14698 3417                        6C            .byte	$6C
14699 3418                        6C            .byte	$6C
14700 3419                        6C            .byte	$6C
14701 341A                        EE            .byte	$EE
14702 341B                        00            .byte	0
14703 341C                        00            .byte	0
14704 341D                        00            .byte	0
14705 341E                        00            .byte	0
14706                                           ! 1644  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14707 341F                        00            .byte	0
14708 3420                        00            .byte	0
14709 3421                        1E            .byte	$1E
14710 3422                        30            .byte	$30
14711 3423                        18            .byte	$18
14712 3424                        0C            .byte	$C
14713 3425                        3E            .byte	$3E
14714 3426                        66            .byte	$66
14715 3427                        66            .byte	$66
14716 3428                        66            .byte	$66
14717 3429                        66            .byte	$66
14718 342A                        3C            .byte	$3C
14719 342B                        00            .byte	0
14720 342C                        00            .byte	0
14721 342D                        00            .byte	0
14722 342E                        00            .byte	0
14723                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14724 342F                        00            .byte	0
14725 3430                        00            .byte	0
14726 3431                        00            .byte	0
14727 3432                        00            .byte	0
14728 3433                        00            .byte	0
14729 3434                        7E            .byte	$7E
14730 3435                        DB            .byte	$DB
14731 3436                        DB            .byte	$DB
14732 3437                        DB            .byte	$DB
14733 3438                        7E            .byte	$7E
14734 3439                        00            .byte	0
14735 343A                        00            .byte	0
14736 343B                        00            .byte	0
14737 343C                        00            .byte	0
14738 343D                        00            .byte	0
14739 343E                        00            .byte	0
14740                                           ! 1646  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14741 343F                        00            .byte	0
14742 3440                        00            .byte	0
14743 3441                        00            .byte	0
14744 3442                        03            .byte	3
14745 3443                        06            .byte	6
14746 3444                        7E            .byte	$7E
14747 3445                        DB            .byte	$DB
14748 3446                        DB            .byte	$DB
14749 3447                        F3            .byte	$F3
14750 3448                        7E            .byte	$7E
14751 3449                        60            .byte	$60
14752 344A                        C0            .byte	$C0
14753 344B                        00            .byte	0
14754 344C                        00            .byte	0
14755 344D                        00            .byte	0
14756 344E                        00            .byte	0
14757                                           ! 1647  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14758 344F                        00            .byte	0
14759 3450                        00            .byte	0
14760 3451                        1C            .byte	$1C
14761 3452                        30            .byte	$30
14762 3453                        60            .byte	$60
14763 3454                        60            .byte	$60
14764 3455                        7C            .byte	$7C
14765 3456                        60            .byte	$60
14766 3457                        60            .byte	$60
14767 3458                        60            .byte	$60
14768 3459                        30            .byte	$30
14769 345A                        1C            .byte	$1C
14770 345B                        00            .byte	0
14771 345C                        00            .byte	0
14772 345D                        00            .byte	0
14773 345E                        00            .byte	0
14774                                           ! 1648  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14775 345F                        00            .byte	0
14776 3460                        00            .byte	0
14777 3461                        00            .byte	0
14778 3462                        7C            .byte	$7C
14779 3463                        C6            .byte	$C6
14780 3464                        C6            .byte	$C6
14781 3465                        C6            .byte	$C6
14782 3466                        C6            .byte	$C6
14783 3467                        C6            .byte	$C6
14784 3468                        C6            .byte	$C6
14785 3469                        C6            .byte	$C6
14786 346A                        C6            .byte	$C6
14787 346B                        00            .byte	0
14788 346C                        00            .byte	0
14789 346D                        00            .byte	0
14790 346E                        00            .byte	0
14791                                           ! 1649  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14792 346F                        00            .byte	0
14793 3470                        00            .byte	0
14794 3471                        00            .byte	0
14795 3472                        00            .byte	0
14796 3473                        FE            .byte	$FE
14797 3474                        00            .byte	0
14798 3475                        00            .byte	0
14799 3476                        FE            .byte	$FE
14800 3477                        00            .byte	0
14801 3478                        00            .byte	0
14802 3479                        FE            .byte	$FE
14803 347A                        00            .byte	0
14804 347B                        00            .byte	0
14805 347C                        00            .byte	0
14806 347D                        00            .byte	0
14807 347E                        00            .byte	0
14808                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14809 347F                        00            .byte	0
14810 3480                        00            .byte	0
14811 3481                        00            .byte	0
14812 3482                        00            .byte	0
14813 3483                        18            .byte	$18
14814 3484                        18            .byte	$18
14815 3485                        7E            .byte	$7E
14816 3486                        18            .byte	$18
14817 3487                        18            .byte	$18
14818 3488                        00            .byte	0
14819 3489                        00            .byte	0
14820 348A                        FF            .byte	$FF
14821 348B                        00            .byte	0
14822 348C                        00            .byte	0
14823 348D                        00            .byte	0
14824 348E                        00            .byte	0
14825                                           ! 1651  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14826 348F                        00            .byte	0
14827 3490                        00            .byte	0
14828 3491                        00            .byte	0
14829 3492                        30            .byte	$30
14830 3493                        18            .byte	$18
14831 3494                        0C            .byte	$C
14832 3495                        06            .byte	6
14833 3496                        0C            .byte	$C
14834 3497                        18            .byte	$18
14835 3498                        30            .byte	$30
14836 3499                        00            .byte	0
14837 349A                        7E            .byte	$7E
14838 349B                        00            .byte	0
14839 349C                        00            .byte	0
14840 349D                        00            .byte	0
14841 349E                        00            .byte	0
14842                                           ! 1652  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 
14843 349F                        00            .byte	0
14844 34A0                        00            .byte	0
14845 34A1                        00            .byte	0
14846 34A2                        0C            .byte	$C
14847 34A3                        18            .byte	$18
14848 34A4                        30            .byte	$30
14849 34A5                        60            .byte	$60
14850 34A6                        30            .byte	$30
14851 34A7                        18            .byte	$18
14852 34A8                        0C            .byte	$C
14853 34A9                        00            .byte	0
14854 34AA                        7E            .byte	$7E
14855                                           ! 1652 0x00, 0x00, 0x00, 0x00,
14856 34AB                        00            .byte	0
14857 34AC                        00            .byte	0
14858 34AD                        00            .byte	0
14859 34AE                        00            .byte	0
14860                                           ! 1653  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14861 34AF                        00            .byte	0
14862 34B0                        00            .byte	0
14863 34B1                        0E            .byte	$E
14864 34B2                        1B            .byte	$1B
14865 34B3                        1B            .byte	$1B
14866 34B4                        18            .byte	$18
14867 34B5                        18            .byte	$18
14868 34B6                        18            .byte	$18
14869 34B7                        18            .byte	$18
14870 34B8                        18            .byte	$18
14871 34B9                        18            .byte	$18
14872 34BA                        18            .byte	$18
14873 34BB                        18            .byte	$18
14874 34BC                        18            .byte	$18
14875 34BD                        18            .byte	$18
14876 34BE                        18            .byte	$18
14877                                           ! 1654  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14878 34BF                        18            .byte	$18
14879 34C0                        18            .byte	$18
14880 34C1                        18            .byte	$18
14881 34C2                        18            .byte	$18
14882 34C3                        18            .byte	$18
14883 34C4                        18            .byte	$18
14884 34C5                        18            .byte	$18
14885 34C6                        18            .byte	$18
14886 34C7                        D8            .byte	$D8
14887 34C8                        D8            .byte	$D8
14888 34C9                        D8            .byte	$D8
14889 34CA                        70            .byte	$70
14890 34CB                        00            .byte	0
14891 34CC                        00            .byte	0
14892 34CD                        00            .byte	0
14893 34CE                        00            .byte	0
14894                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14895 34CF                        00            .byte	0
14896 34D0                        00            .byte	0
14897 34D1                        00            .byte	0
14898 34D2                        00            .byte	0
14899 34D3                        18            .byte	$18
14900 34D4                        18            .byte	$18
14901 34D5                        00            .byte	0
14902 34D6                        7E            .byte	$7E
14903 34D7                        00            .byte	0
14904 34D8                        18            .byte	$18
14905 34D9                        18            .byte	$18
14906 34DA                        00            .byte	0
14907 34DB                        00            .byte	0
14908 34DC                        00            .byte	0
14909 34DD                        00            .byte	0
14910 34DE                        00            .byte	0
14911                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14912 34DF                        00            .byte	0
14913 34E0                        00            .byte	0
14914 34E1                        00            .byte	0
14915 34E2                        00            .byte	0
14916 34E3                        00            .byte	0
14917 34E4                        76            .byte	$76
14918 34E5                        DC            .byte	$DC
14919 34E6                        00            .byte	0
14920 34E7                        76            .byte	$76
14921 34E8                        DC            .byte	$DC
14922 34E9                        00            .byte	0
14923 34EA                        00            .byte	0
14924 34EB                        00            .byte	0
14925 34EC                        00            .byte	0
14926 34ED                        00            .byte	0
14927 34EE                        00            .byte	0
14928                                           ! 1657  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14929 34EF                        00            .byte	0
14930 34F0                        38            .byte	$38
14931 34F1                        6C            .byte	$6C
14932 34F2                        6C            .byte	$6C
14933 34F3                        38            .byte	$38
14934 34F4                        00            .byte	0
14935 34F5                        00            .byte	0
14936 34F6                        00            .byte	0
14937 34F7                        00            .byte	0
14938 34F8                        00            .byte	0
14939 34F9                        00            .byte	0
14940 34FA                        00            .byte	0
14941 34FB                        00            .byte	0
14942 34FC                        00            .byte	0
14943 34FD                        00            .byte	0
14944 34FE                        00            .byte	0
14945                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14946 34FF                        00            .byte	0
14947 3500                        00            .byte	0
14948 3501                        00            .byte	0
14949 3502                        00            .byte	0
14950 3503                        00            .byte	0
14951 3504                        00            .byte	0
14952 3505                        00            .byte	0
14953 3506                        18            .byte	$18
14954 3507                        18            .byte	$18
14955 3508                        00            .byte	0
14956 3509                        00            .byte	0
14957 350A                        00            .byte	0
14958 350B                        00            .byte	0
14959 350C                        00            .byte	0
14960 350D                        00            .byte	0
14961 350E                        00            .byte	0
14962                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14963 350F                        00            .byte	0
14964 3510                        00            .byte	0
14965 3511                        00            .byte	0
14966 3512                        00            .byte	0
14967 3513                        00            .byte	0
14968 3514                        00            .byte	0
14969 3515                        00            .byte	0
14970 3516                        00            .byte	0
14971 3517                        18            .byte	$18
14972 3518                        00            .byte	0
14973 3519                        00            .byte	0
14974 351A                        00            .byte	0
14975 351B                        00            .byte	0
14976 351C                        00            .byte	0
14977 351D                        00            .byte	0
14978 351E                        00            .byte	0
14979                                           ! 1660  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14980 351F                        00            .byte	0
14981 3520                        0F            .byte	$F
14982 3521                        0C            .byte	$C
14983 3522                        0C            .byte	$C
14984 3523                        0C            .byte	$C
14985 3524                        0C            .byte	$C
14986 3525                        0C            .byte	$C
14987 3526                        EC            .byte	$EC
14988 3527                        6C            .byte	$6C
14989 3528                        6C            .byte	$6C
14990 3529                        3C            .byte	$3C
14991 352A                        1C            .byte	$1C
14992 352B                        00            .byte	0
14993 352C                        00            .byte	0
14994 352D                        00            .byte	0
14995 352E                        00            .byte	0
14996                                           ! 1661  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14997 352F                        00            .byte	0
14998 3530                        D8            .byte	$D8
14999 3531                        6C            .byte	$6C
15000 3532                        6C            .byte	$6C
15001 3533                        6C            .byte	$6C
15002 3534                        6C            .byte	$6C
15003 3535                        6C            .byte	$6C
15004 3536                        00            .byte	0
15005 3537                        00            .byte	0
15006 3538                        00            .byte	0
15007 3539                        00            .byte	0
15008 353A                        00            .byte	0
15009 353B                        00            .byte	0
15010 353C                        00            .byte	0
15011 353D                        00            .byte	0
15012 353E                        00            .byte	0
15013                                           ! 1662  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15014 353F                        00            .byte	0
15015 3540                        70            .byte	$70
15016 3541                        D8            .byte	$D8
15017 3542                        30            .byte	$30
15018 3543                        60            .byte	$60
15019 3544                        C8            .byte	$C8
15020 3545                        F8            .byte	$F8
15021 3546                        00            .byte	0
15022 3547                        00            .byte	0
15023 3548                        00            .byte	0
15024 3549                        00            .byte	0
15025 354A                        00            .byte	0
15026 354B                        00            .byte	0
15027 354C                        00            .byte	0
15028 354D                        00            .byte	0
15029 354E                        00            .byte	0
15030                                           ! 1663  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15031 354F                        00            .byte	0
15032 3550                        00            .byte	0
15033 3551                        00            .byte	0
15034 3552                        00            .byte	0
15035 3553                        7C            .byte	$7C
15036 3554                        7C            .byte	$7C
15037 3555                        7C            .byte	$7C
15038 3556                        7C            .byte	$7C
15039 3557                        7C            .byte	$7C
15040 3558                        7C            .byte	$7C
15041 3559                        7C            .byte	$7C
15042 355A                        00            .byte	0
15043 355B                        00            .byte	0
15044 355C                        00            .byte	0
15045 355D                        00            .byte	0
15046 355E                        00            .byte	0
15047                                           ! 1664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15048 355F                        00            .byte	0
15049 3560                        00            .byte	0
15050 3561                        00            .byte	0
15051 3562                        00            .byte	0
15052 3563                        00            .byte	0
15053 3564                        00            .byte	0
15054 3565                        00            .byte	0
15055 3566                        00            .byte	0
15056 3567                        00            .byte	0
15057 3568                        00            .byte	0
15058 3569                        00            .byte	0
15059 356A                        00            .byte	0
15060 356B                        00            .byte	0
15061 356C                        00            .byte	0
15062 356D                        00            .byte	0
15063                                           ! 1665 };
15064 356E                        00            .byte	0
15065                                           !BCC_EOS
15066                                           ! 1666 static Bit8u vgafont14alt[1]={0x00};
15067                       0000356F            _vgafont14alt:
15068 356F                        00            .byte	0
15069                                           !BCC_EOS
15070                                           ! 1667 static Bit8u vgafont16alt[1]={0x00};
15071                       00003570            _vgafont16alt:
15072 3570                        00            .byte	0
15073                                           !BCC_EOS
15074                                           ! 1668 #asm
15075                                           !BCC_ASM
15076                       00003571            init_vga_card:
15077                                           ;; switch to color mode and enable CPU access 480 lines
15078 3571           BA                   03C2    mov dx, #0x3C2
15079 3574           B0                     C3    mov al, #0xC3
15080 3576           EE                           outb dx,al
15081                                           ;; more than 64k 3C4/04
15082 3577           BA                   03C4    mov dx, #0x3C4
15083 357A           B0                     04    mov al, #0x04
15084 357C           EE                           outb dx,al
15085 357D           BA                   03C5    mov dx, #0x3C5
15086 3580           B0                     02    mov al, #0x02
15087 3582           EE                           outb dx,al
15088 3583           BB                   358D    mov bx, #msg_vga_init
15089 3586           53                           push bx
15090 3587           E8         4860              call _printf
15091 358A           44                           inc sp
15092 358B           44                           inc sp
15093 358C           C3                           ret
15094                       0000358D            msg_vga_init:
15095 358D                        56            .ascii "VGABios $Id$"
15096 3599                        0D            .byte 0x0d,0x0a,0x00
15097                                           ! 1690 endasm
15098                                           !BCC_ENDASM
15099                                           ! 1691 #asm
15100                                           !BCC_ASM
15101                       0000359C            init_bios_area:
15102 359C           1E                           push ds
15103 359D           B8                   0040    mov ax, # 0x40
15104 35A0           8ED8                         mov ds, ax
15105                                           ;; init detected hardware BIOS Area
15106 35A2           BB                   0010    mov bx, # 0x10
15107 35A5           8B07                         mov ax, [bx]
15108 35A7           25                   FFCF    and ax, #0xffcf
15109                                           ;; set 80x25 color (not clear from RBIL but usual)
15110 35AA           0D                   0020    or ax, #0x0020
15111 35AD           8907                         mov [bx], ax
15112                                           ;; Just for the first int10 find its children
15113                                           ;; the default char height
15114 35AF           BB                   0085    mov bx, # 0x85
15115 35B2           B0                     10    mov al, #0x10
15116 35B4           8807                         mov [bx], al
15117                                           ;; Clear the screen
15118 35B6           BB                   0087    mov bx, # 0x87
15119 35B9           B0                     60    mov al, #0x60
15120 35BB           8807                         mov [bx], al
15121                                           ;; Set the basic screen we have
15122 35BD           BB                   0088    mov bx, # 0x88
15123 35C0           B0                     F9    mov al, #0xf9
15124 35C2           8807                         mov [bx], al
15125                                           ;; Set the basic modeset options
15126 35C4           BB                   0089    mov bx, # 0x89
15127 35C7           B0                     51    mov al, #0x51
15128 35C9           8807                         mov [bx], al
15129                                           ;; Set the default MSR
15130 35CB           BB                   0065    mov bx, # 0x65
15131 35CE           B0                     09    mov al, #0x09
15132 35D0           8807                         mov [bx], al
15133 35D2           1F                           pop ds
15134 35D3           C3                           ret
15135                       000035D4            _video_save_pointer_table:
15136 35D4                      029F              .word _video_param_table
15137 35D6                      C000              .word 0xc000
15138 35D8                      0000              .word 0
15139 35DA                      0000              .word 0
15140 35DC                      0000              .word 0
15141 35DE                      0000              .word 0
15142 35E0                      0000              .word 0
15143 35E2                      0000              .word 0
15144 35E4                      0000              .word 0
15145 35E6                      0000              .word 0
15146 35E8                      0000              .word 0
15147 35EA                      0000              .word 0
15148 35EC                      0000              .word 0
15149 35EE                      0000              .word 0
15150                                           ! 1741 endasm
15151                                           !BCC_ENDASM
15152                                           ! 1742 static void display_splash_screen()
15153                                           ! 1743 {
15154                                           
15155                       000035F0            _display_splash_screen:
15156                                           ! 1744 }
15157 35F0           C3                         ret
15158                                           ! 1745 static void display_info()
15159                                           ! 1746 {
15160                       000035F1            _display_info:
15161                                           ! 1747 #asm
15162                                           !BCC_ASM
15163 35F1           B8                   C000   mov ax,#0xc000
15164 35F4           8ED8                        mov ds,ax
15165 35F6           BE                   0022   mov si,#vgabios_name
15166 35F9           E8         0013             call _display_string
15167 35FC           BE                   0038   mov si,#vgabios_version
15168 35FF           E8         000D             call _display_string
15169                                            ;;mov si,#vgabios_copyright
15170                                            ;;call _display_string
15171                                            ;;mov si,#crlf
15172                                            ;;call _display_string
15173 3602           BE                   007E   mov si,#vgabios_license
15174 3605           E8         0007             call _display_string
15175 3608           BE                   00B3   mov si,#vgabios_website
15176 360B           E8         0001             call _display_string
15177                                           ! 1762 endasm
15178                                           !BCC_ENDASM
15179                                           ! 1763 }
15180 360E           C3                         ret
15181                                           ! 1764 static void display_string()
15182                                           ! 1765 {
15183                       0000360F            _display_string:
15184                                           ! 1766 #asm
15185                                           !BCC_ASM
15186 360F           8CD8                        mov ax,ds
15187 3611           8EC0                        mov es,ax
15188 3613           89F7                        mov di,si
15189 3615           31C9                        xor cx,cx
15190 3617           F7D1                        not cx
15191 3619           30C0                        xor al,al
15192 361B           FC                          cld
15193 361C           F2                          repne
15194 361D           AE                           scasb
15195 361E           F7D1                        not cx
15196 3620           49                          dec cx
15197 3621           51                          push cx
15198 3622           B8                   0300   mov ax,#0x0300
15199 3625           BB                   0000   mov bx,#0x0000
15200 3628           CD                     10   int #0x10
15201 362A           59                          pop cx
15202 362B           B8                   1301   mov ax,#0x1301
15203 362E           BB                   000B   mov bx,#0x000b
15204 3631           89F5                        mov bp,si
15205 3633           CD                     10   int #0x10
15206                                           ! 1787 endasm
15207                                           !BCC_ENDASM
15208                                           ! 1788 }
15209 3635           C3                         ret
15210                                           ! 1789 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15211                                           ! 1790   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15212                       00003636            _int10_debugmsg:
15213                                           !BCC_EOS
15214                                           ! 1791 {
15215                                           ! 1792  if(( AX >> 8 )!=0x0E)
15216 3636           55                         push	bp
15217 3637           89E5                       mov	bp,sp
15218                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15219 3639           8B46         12            mov	ax,$12[bp]
15220 363C           88E0                       mov	al,ah
15221 363E           30E4                       xor	ah,ah
15222                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15223 3640           3D                   000E  cmp	ax,*$E
15224 3643           74           20            je  	.1
15225                       00003645            .2:
15226                                           ! 1793   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15227                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15228 3645           FF76         0E            push	$E[bp]
15229                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15230 3648           FF76         10            push	$10[bp]
15231                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15232 364B           FF76         0C            push	$C[bp]
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15234 364E           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: list unsigned char = al+0 (used reg = )
15236 3651           30E4                       xor	ah,ah
15237 3653           50                         push	ax
15238                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15239 3654           8B46         12            mov	ax,$12[bp]
15240 3657           88E0                       mov	al,ah
15241 3659           30E4                       xor	ah,ah
15242                                           ! Debug: list unsigned int = ax+0 (used reg = )
15243 365B           50                         push	ax
15244                                           ! Debug: list * char = .3+0 (used reg = )
15245 365C           BB                   A600  mov	bx,#.3
15246 365F           53                         push	bx
15247                                           ! Debug: func () void = printf+0 (used reg = )
15248 3660           E8         4787            call	_printf
15249 3663           89EC                       mov	sp,bp
15250                                           !BCC_EOS
15251                                           ! 1794 }
15252                       00003665            .1:
15253 3665           5D                         pop	bp
15254 3666           C3                         ret
15255                                           ! 1795 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15256                                           ! Register BX used in function int10_debugmsg
15257                                           ! 1796   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15258                       00003667            _int10_func:
15259                                           !BCC_EOS
15260                                           ! 1797 {
15261                                           ! 1798  switch(( AX >> 8 ))
15262 3667           55                         push	bp
15263 3668           89E5                       mov	bp,sp
15264                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15265 366A           8B46         12            mov	ax,$12[bp]
15266 366D           88E0                       mov	al,ah
15267 366F           30E4                       xor	ah,ah
15268                                           ! 1799   {
15269 3671           E9         04F5            br 	.6
15270                                           ! 1800    case 0x00:
15271                                           ! 1801      biosfn_set_video_mode(( AX & 0x00ff ));
15272                       00003674            .7:
15273                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15274 3674           8A46         12            mov	al,$12[bp]
15275                                           ! Debug: list unsigned char = al+0 (used reg = )
15276 3677           30E4                       xor	ah,ah
15277 3679           50                         push	ax
15278                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15279 367A           E8         0544            call	_biosfn_set_video_mode
15280 367D           44                         inc	sp
15281 367E           44                         inc	sp
15282                                           !BCC_EOS
15283                                           ! 1802      switch(( AX & 0x00ff )&0x7F)
15284                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15285 367F           8A46         12            mov	al,$12[bp]
15286                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15287 3682           24                     7F  and	al,*$7F
15288                                           ! 1803       {case 6:
15289 3684           EB           24            jmp .A
15290                                           ! 1804         AX = ((AX & 0xff00) | (0x3F));
15291                       00003686            .B:
15292                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15293 3686           8B46         12            mov	ax,$12[bp]
15294 3689           30C0                       xor	al,al
15295                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15296 368B           0C                     3F  or	al,*$3F
15297                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15298 368D           8946         12            mov	$12[bp],ax
15299                                           !BCC_EOS
15300                                           ! 1805         break;
15301 3690           EB           3D            jmp .8
15302                                           !BCC_EOS
15303                                           ! 1806        case 0:
15304                                           ! 1807        case 1:
15305                       00003692            .C:
15306                                           ! 1808        case 2:
15307                       00003692            .D:
15308                                           ! 1809        case 3:
15309                       00003692            .E:
15310                                           ! 1810        case 4:
15311                       00003692            .F:
15312                                           ! 1811        case 5:
15313                       00003692            .10:
15314                                           ! 1812        case 7:
15315                       00003692            .11:
15316                                           ! 1813         AX = ((AX & 0xff00) | (0x30));
15317                       00003692            .12:
15318                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15319 3692           8B46         12            mov	ax,$12[bp]
15320 3695           30C0                       xor	al,al
15321                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15322 3697           0C                     30  or	al,*$30
15323                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15324 3699           8946         12            mov	$12[bp],ax
15325                                           !BCC_EOS
15326                                           ! 1814         break;
15327 369C           EB           31            jmp .8
15328                                           !BCC_EOS
15329                                           ! 1815       default:
15330                                           ! 1816         AX = ((AX & 0xff00) | (0x20));
15331                       0000369E            .13:
15332                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15333 369E           8B46         12            mov	ax,$12[bp]
15334 36A1           30C0                       xor	al,al
15335                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15336 36A3           0C                     20  or	al,*$20
15337                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15338 36A5           8946         12            mov	$12[bp],ax
15339                                           !BCC_EOS
15340                                           ! 1817       }
15341                                           ! 1818      break;
15342 36A8           EB           25            jmp .8
15343                       000036AA            .A:
15344 36AA           2C                     00  sub	al,*0
15345 36AC           72           F0            jb 	.13
15346 36AE           3C                     07  cmp	al,*7
15347 36B0           77           1B            ja  	.14
15348 36B2           30E4                       xor	ah,ah
15349 36B4           D1E0                       shl	ax,*1
15350 36B6           89C3                       mov	bx,ax
15351 36B8           2E                         seg	cs
15352 36B9           FFA7       36BD            br	.15[bx]
15353                       000036BD            .15:
15354 36BD                      3692            .word	.C
15355 36BF                      3692            .word	.D
15356 36C1                      3692            .word	.E
15357 36C3                      3692            .word	.F
15358 36C5                      3692            .word	.10
15359 36C7                      3692            .word	.11
15360 36C9                      3686            .word	.B
15361 36CB                      3692            .word	.12
15362                       000036CD            .14:
15363 36CD           EB           CF            jmp	.13
15364                       000036CF            .8:
15365 36CF           E9         04ED            br 	.4
15366                                           !BCC_EOS
15367                                           ! 1819    case 0x01:
15368                                           ! 1820      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15369                       000036D2            .16:
15370                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15371 36D2           8A46         10            mov	al,$10[bp]
15372                                           ! Debug: list unsigned char = al+0 (used reg = )
15373 36D5           30E4                       xor	ah,ah
15374 36D7           50                         push	ax
15375                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15376 36D8           8B46         10            mov	ax,$10[bp]
15377 36DB           88E0                       mov	al,ah
15378 36DD           30E4                       xor	ah,ah
15379                                           ! Debug: list unsigned int = ax+0 (used reg = )
15380 36DF           50                         push	ax
15381                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15382 36E0           E8         0B8B            call	_biosfn_set_cursor_shape
15383 36E3           83C4                   04  add	sp,*4
15384                                           !BCC_EOS
15385                                           ! 1821      break;
15386 36E6           E9         04D6            br 	.4
15387                                           !BCC_EOS
15388                                           ! 1822    case 0x02:
15389                                           ! 1823      biosfn_set_cursor_pos(( BX >> 8 ),DX
15390                       000036E9            .17:
15391                                           ! 1823 );
15392                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15393 36E9           FF76         0E            push	$E[bp]
15394                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15395 36EC           8B46         0C            mov	ax,$C[bp]
15396 36EF           88E0                       mov	al,ah
15397 36F1           30E4                       xor	ah,ah
15398                                           ! Debug: list unsigned int = ax+0 (used reg = )
15399 36F3           50                         push	ax
15400                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15401 36F4           E8         0C92            call	_biosfn_set_cursor_pos
15402 36F7           83C4                   04  add	sp,*4
15403                                           !BCC_EOS
15404                                           ! 1824      break;
15405 36FA           E9         04C2            br 	.4
15406                                           !BCC_EOS
15407                                           ! 1825    case 0x03:
15408                                           ! 1826      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15409                       000036FD            .18:
15410                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15411 36FD           8D5E         0E            lea	bx,$E[bp]
15412 3700           53                         push	bx
15413                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15414 3701           8D5E         10            lea	bx,$10[bp]
15415 3704           53                         push	bx
15416                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15417 3705           8B46         0C            mov	ax,$C[bp]
15418 3708           88E0                       mov	al,ah
15419 370A           30E4                       xor	ah,ah
15420                                           ! Debug: list unsigned int = ax+0 (used reg = )
15421 370C           50                         push	ax
15422                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15423 370D           E8         0D79            call	_biosfn_get_cursor_pos
15424 3710           83C4                   06  add	sp,*6
15425                                           !BCC_EOS
15426                                           ! 1827      break;
15427 3713           E9         04A9            br 	.4
15428                                           !BCC_EOS
15429                                           ! 1828    case 0x04:
15430                                           ! 1829      unimplemented();
15431                       00003716            .19:
15432                                           ! Debug: func () void = unimplemented+0 (used reg = )
15433 3716           E8         46B5            call	_unimplemented
15434                                           !BCC_EOS
15435                                           ! 1830      AX=0x00;
15436                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15437 3719           31C0                       xor	ax,ax
15438 371B           8946         12            mov	$12[bp],ax
15439                                           !BCC_EOS
15440                                           ! 1831      BX=0x00;
15441                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15442 371E           31C0                       xor	ax,ax
15443 3720           8946         0C            mov	$C[bp],ax
15444                                           !BCC_EOS
15445                                           ! 1832      CX=0x00;
15446                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15447 3723           31C0                       xor	ax,ax
15448 3725           8946         10            mov	$10[bp],ax
15449                                           !BCC_EOS
15450                                           ! 1833      DX=0x00;
15451                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15452 3728           31C0                       xor	ax,ax
15453 372A           8946         0E            mov	$E[bp],ax
15454                                           !BCC_EOS
15455                                           ! 1834      break;
15456 372D           E9         048F            br 	.4
15457                                           !BCC_EOS
15458                                           ! 1835    case 0x05:
15459                                           ! 1836      biosfn_set_active_page(( AX & 0x00ff ));
15460                       00003730            .1A:
15461                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15462 3730           8A46         12            mov	al,$12[bp]
15463                                           ! Debug: list unsigned char = al+0 (used reg = )
15464 3733           30E4                       xor	ah,ah
15465 3735           50                         push	ax
15466                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15467 3736           E8         0DC5            call	_biosfn_set_active_page
15468 3739           44                         inc	sp
15469 373A           44                         inc	sp
15470                                           !BCC_EOS
15471                                           ! 1837      break;
15472 373B           E9         0481            br 	.4
15473                                           !BCC_EOS
15474                                           ! 1838    case 0x06:
15475                                           ! 1839      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15476                       0000373E            .1B:
15477                                           ! Debug: list int = const 1 (used reg = )
15478 373E           B8                   0001  mov	ax,*1
15479 3741           50                         push	ax
15480                                           ! Debug: list int = const $FF (used reg = )
15481 3742           B8                   00FF  mov	ax,#$FF
15482 3745           50                         push	ax
15483                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15484 3746           8A46         0E            mov	al,$E[bp]
15485                                           ! Debug: list unsigned char = al+0 (used reg = )
15486 3749           30E4                       xor	ah,ah
15487 374B           50                         push	ax
15488                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15489 374C           8B46         0E            mov	ax,$E[bp]
15490 374F           88E0                       mov	al,ah
15491 3751           30E4                       xor	ah,ah
15492                                           ! Debug: list unsigned int = ax+0 (used reg = )
15493 3753           50                         push	ax
15494                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15495 3754           8A46         10            mov	al,$10[bp]
15496                                           ! Debug: list unsigned char = al+0 (used reg = )
15497 3757           30E4                       xor	ah,ah
15498 3759           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15500 375A           8B46         10            mov	ax,$10[bp]
15501 375D           88E0                       mov	al,ah
15502 375F           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 3761           50                         push	ax
15505                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15506 3762           8B46         0C            mov	ax,$C[bp]
15507 3765           88E0                       mov	al,ah
15508 3767           30E4                       xor	ah,ah
15509                                           ! Debug: list unsigned int = ax+0 (used reg = )
15510 3769           50                         push	ax
15511                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15512 376A           8A46         12            mov	al,$12[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 376D           30E4                       xor	ah,ah
15515 376F           50                         push	ax
15516                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15517 3770           E8         1221            call	_biosfn_scroll
15518 3773           83C4                   10  add	sp,*$10
15519                                           !BCC_EOS
15520                                           ! 1840      break;
15521 3776           E9         0446            br 	.4
15522                                           !BCC_EOS
15523                                           ! 1841    case 0x07:
15524                                           ! 1842      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15525                       00003779            .1C:
15526                                           ! Debug: list int = const 0 (used reg = )
15527 3779           31C0                       xor	ax,ax
15528 377B           50                         push	ax
15529                                           ! Debug: list int = const $FF (used reg = )
15530 377C           B8                   00FF  mov	ax,#$FF
15531 377F           50                         push	ax
15532                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15533 3780           8A46         0E            mov	al,$E[bp]
15534                                           ! Debug: list unsigned char = al+0 (used reg = )
15535 3783           30E4                       xor	ah,ah
15536 3785           50                         push	ax
15537                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15538 3786           8B46         0E            mov	ax,$E[bp]
15539 3789           88E0                       mov	al,ah
15540 378B           30E4                       xor	ah,ah
15541                                           ! Debug: list unsigned int = ax+0 (used reg = )
15542 378D           50                         push	ax
15543                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15544 378E           8A46         10            mov	al,$10[bp]
15545                                           ! Debug: list unsigned char = al+0 (used reg = )
15546 3791           30E4                       xor	ah,ah
15547 3793           50                         push	ax
15548                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15549 3794           8B46         10            mov	ax,$10[bp]
15550 3797           88E0                       mov	al,ah
15551 3799           30E4                       xor	ah,ah
15552                                           ! Debug: list unsigned int = ax+0 (used reg = )
15553 379B           50                         push	ax
15554                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15555 379C           8B46         0C            mov	ax,$C[bp]
15556 379F           88E0                       mov	al,ah
15557 37A1           30E4                       xor	ah,ah
15558                                           ! Debug: list unsigned int = ax+0 (used reg = )
15559 37A3           50                         push	ax
15560                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15561 37A4           8A46         12            mov	al,$12[bp]
15562                                           ! Debug: list unsigned char = al+0 (used reg = )
15563 37A7           30E4                       xor	ah,ah
15564 37A9           50                         push	ax
15565                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15566 37AA           E8         11E7            call	_biosfn_scroll
15567 37AD           83C4                   10  add	sp,*$10
15568                                           !BCC_EOS
15569                                           ! 1843      break;
15570 37B0           E9         040C            br 	.4
15571                                           !BCC_EOS
15572                                           ! 1844    case 0x08:
15573                                           ! 1845      biosfn_read_char_attr(( BX >> 8 ),&AX);
15574                       000037B3            .1D:
15575                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15576 37B3           8D5E         12            lea	bx,$12[bp]
15577 37B6           53                         push	bx
15578                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15579 37B7           8B46         0C            mov	ax,$C[bp]
15580 37BA           88E0                       mov	al,ah
15581 37BC           30E4                       xor	ah,ah
15582                                           ! Debug: list unsigned int = ax+0 (used reg = )
15583 37BE           50                         push	ax
15584                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15585 37BF           E8         1900            call	_biosfn_read_char_attr
15586 37C2           83C4                   04  add	sp,*4
15587                                           !BCC_EOS
15588                                           ! 1846      break;
15589 37C5           E9         03F7            br 	.4
15590                                           !BCC_EOS
15591                                           ! 1847    case 0x09:
15592                                           ! 1848      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15593                       000037C8            .1E:
15594                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15595 37C8           FF76         10            push	$10[bp]
15596                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15597 37CB           8A46         0C            mov	al,$C[bp]
15598                                           ! Debug: list unsigned char = al+0 (used reg = )
15599 37CE           30E4                       xor	ah,ah
15600 37D0           50                         push	ax
15601                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15602 37D1           8B46         0C            mov	ax,$C[bp]
15603 37D4           88E0                       mov	al,ah
15604 37D6           30E4                       xor	ah,ah
15605                                           ! Debug: list unsigned int = ax+0 (used reg = )
15606 37D8           50                         push	ax
15607                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15608 37D9           8A46         12            mov	al,$12[bp]
15609                                           ! Debug: list unsigned char = al+0 (used reg = )
15610 37DC           30E4                       xor	ah,ah
15611 37DE           50                         push	ax
15612                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15613 37DF           E8         1E28            call	_biosfn_write_char_attr
15614 37E2           83C4                   08  add	sp,*8
15615                                           !BCC_EOS
15616                                           ! 1849      break;
15617 37E5           E9         03D7            br 	.4
15618                                           !BCC_EOS
15619                                           ! 1850    case 0x0A:
15620                                           ! 1851      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15621                       000037E8            .1F:
15622                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15623 37E8           FF76         10            push	$10[bp]
15624                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15625 37EB           8A46         0C            mov	al,$C[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 37EE           30E4                       xor	ah,ah
15628 37F0           50                         push	ax
15629                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15630 37F1           8B46         0C            mov	ax,$C[bp]
15631 37F4           88E0                       mov	al,ah
15632 37F6           30E4                       xor	ah,ah
15633                                           ! Debug: list unsigned int = ax+0 (used reg = )
15634 37F8           50                         push	ax
15635                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15636 37F9           8A46         12            mov	al,$12[bp]
15637                                           ! Debug: list unsigned char = al+0 (used reg = )
15638 37FC           30E4                       xor	ah,ah
15639 37FE           50                         push	ax
15640                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15641 37FF           E8         1FFF            call	_biosfn_write_char_only
15642 3802           83C4                   08  add	sp,*8
15643                                           !BCC_EOS
15644                                           ! 1852      break;
15645 3805           E9         03B7            br 	.4
15646                                           !BCC_EOS
15647                                           ! 1853    case 0x0C:
15648                                           ! 1854      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15649                       00003808            .20:
15650                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15651 3808           FF76         0E            push	$E[bp]
15652                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15653 380B           FF76         10            push	$10[bp]
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15655 380E           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 3811           30E4                       xor	ah,ah
15658 3813           50                         push	ax
15659                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15660 3814           8B46         0C            mov	ax,$C[bp]
15661 3817           88E0                       mov	al,ah
15662 3819           30E4                       xor	ah,ah
15663                                           ! Debug: list unsigned int = ax+0 (used reg = )
15664 381B           50                         push	ax
15665                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15666 381C           E8         2258            call	_biosfn_write_pixel
15667 381F           83C4                   08  add	sp,*8
15668                                           !BCC_EOS
15669                                           ! 1855      break;
15670 3822           E9         039A            br 	.4
15671                                           !BCC_EOS
15672                                           ! 1856    case 0x0D:
15673                                           ! 1857      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15674                       00003825            .21:
15675                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15676 3825           8D5E         12            lea	bx,$12[bp]
15677 3828           53                         push	bx
15678                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15679 3829           FF76         0E            push	$E[bp]
15680                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15681 382C           FF76         10            push	$10[bp]
15682                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15683 382F           8B46         0C            mov	ax,$C[bp]
15684 3832           88E0                       mov	al,ah
15685 3834           30E4                       xor	ah,ah
15686                                           ! Debug: list unsigned int = ax+0 (used reg = )
15687 3836           50                         push	ax
15688                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15689 3837           E8         24DE            call	_biosfn_read_pixel
15690 383A           83C4                   08  add	sp,*8
15691                                           !BCC_EOS
15692                                           ! 1858      break;
15693 383D           E9         037F            br 	.4
15694                                           !BCC_EOS
15695                                           ! 1859    case 0x0E:
15696                                           ! 1860      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15697                       00003840            .22:
15698                                           ! Debug: list int = const 2 (used reg = )
15699 3840           B8                   0002  mov	ax,*2
15700 3843           50                         push	ax
15701                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15702 3844           8A46         0C            mov	al,$C[bp]
15703                                           ! Debug: list unsigned char = al+0 (used reg = )
15704 3847           30E4                       xor	ah,ah
15705 3849           50                         push	ax
15706                                           ! Debug: list int = const $FF (used reg = )
15707 384A           B8                   00FF  mov	ax,#$FF
15708 384D           50                         push	ax
15709                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15710 384E           8A46         12            mov	al,$12[bp]
15711                                           ! Debug: list unsigned char = al+0 (used reg = )
15712 3851           30E4                       xor	ah,ah
15713 3853           50                         push	ax
15714                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15715 3854           E8         26CA            call	_biosfn_write_teletype
15716 3857           83C4                   08  add	sp,*8
15717                                           !BCC_EOS
15718                                           ! 1861      break;
15719 385A           E9         0362            br 	.4
15720                                           !BCC_EOS
15721                                           ! 1862    case 0x10:
15722                                           ! 1863      biosfn_perform_gray_scale_summing(BX,CX);
15723                       0000385D            .23:
15724                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15725 385D           FF76         10            push	$10[bp]
15726                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15727 3860           FF76         0C            push	$C[bp]
15728                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15729 3863           E8         2D13            call	_biosfn_perform_gray_scale_summing
15730 3866           83C4                   04  add	sp,*4
15731                                           !BCC_EOS
15732                                           ! 1864      break;
15733 3869           E9         0353            br 	.4
15734                                           !BCC_EOS
15735                                           ! 1865    case 0x11:
15736                                           ! 1866      switch(( AX & 0x00ff ))
15737                       0000386C            .24:
15738                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15739 386C           8A46         12            mov	al,$12[bp]
15740                                           ! 1867       {
15741 386F           E9         00E4            br 	.27
15742                                           ! 1868        case 0x00:
15743                                           ! 1869        case 0x10:
15744                       00003872            .28:
15745                                           ! 1870         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15746                       00003872            .29:
15747                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15748 3872           8B46         0C            mov	ax,$C[bp]
15749 3875           88E0                       mov	al,ah
15750 3877           30E4                       xor	ah,ah
15751                                           ! Debug: list unsigned int = ax+0 (used reg = )
15752 3879           50                         push	ax
15753                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15754 387A           8A46         0C            mov	al,$C[bp]
15755                                           ! Debug: list unsigned char = al+0 (used reg = )
15756 387D           30E4                       xor	ah,ah
15757 387F           50                         push	ax
15758                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15759 3880           FF76         0E            push	$E[bp]
15760                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15761 3883           FF76         10            push	$10[bp]
15762                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15763 3886           FF76         08            push	8[bp]
15764                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15765 3889           FF76         16            push	$16[bp]
15766                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15767 388C           8A46         12            mov	al,$12[bp]
15768                                           ! Debug: list unsigned char = al+0 (used reg = )
15769 388F           30E4                       xor	ah,ah
15770 3891           50                         push	ax
15771                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15772 3892           E8         2F8B            call	_biosfn_load_text_user_pat
15773 3895           83C4                   0E  add	sp,*$E
15774                                           !BCC_EOS
15775                                           ! 1871         break;
15776 3898           E9         0111            br 	.25
15777                                           !BCC_EOS
15778                                           ! 1872        case 0x01:
15779                                           ! 1873        case 0x11:
15780                       0000389B            .2A:
15781                                           ! 1874         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15782                       0000389B            .2B:
15783                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15784 389B           8A46         0C            mov	al,$C[bp]
15785                                           ! Debug: list unsigned char = al+0 (used reg = )
15786 389E           30E4                       xor	ah,ah
15787 38A0           50                         push	ax
15788                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15789 38A1           8A46         12            mov	al,$12[bp]
15790                                           ! Debug: list unsigned char = al+0 (used reg = )
15791 38A4           30E4                       xor	ah,ah
15792 38A6           50                         push	ax
15793                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15794 38A7           E8         3012            call	_biosfn_load_text_8_14_pat
15795 38AA           83C4                   04  add	sp,*4
15796                                           !BCC_EOS
15797                                           ! 1875         break;
15798 38AD           E9         00FC            br 	.25
15799                                           !BCC_EOS
15800                                           ! 1876        case 0x02:
15801                                           ! 1877        case 0x12:
15802                       000038B0            .2C:
15803                                           ! 1878         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15804                       000038B0            .2D:
15805                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15806 38B0           8A46         0C            mov	al,$C[bp]
15807                                           ! Debug: list unsigned char = al+0 (used reg = )
15808 38B3           30E4                       xor	ah,ah
15809 38B5           50                         push	ax
15810                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15811 38B6           8A46         12            mov	al,$12[bp]
15812                                           ! Debug: list unsigned char = al+0 (used reg = )
15813 38B9           30E4                       xor	ah,ah
15814 38BB           50                         push	ax
15815                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15816 38BC           E8         3094            call	_biosfn_load_text_8_8_pat
15817 38BF           83C4                   04  add	sp,*4
15818                                           !BCC_EOS
15819                                           ! 1879         break;
15820 38C2           E9         00E7            br 	.25
15821                                           !BCC_EOS
15822                                           ! 1880        case 0x04:
15823                                           ! 1881        case 0x14:
15824                       000038C5            .2E:
15825                                           ! 1882         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15826                       000038C5            .2F:
15827                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15828 38C5           8A46         0C            mov	al,$C[bp]
15829                                           ! Debug: list unsigned char = al+0 (used reg = )
15830 38C8           30E4                       xor	ah,ah
15831 38CA           50                         push	ax
15832                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15833 38CB           8A46         12            mov	al,$12[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38CE           30E4                       xor	ah,ah
15836 38D0           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15838 38D1           E8         311D            call	_biosfn_load_text_8_16_pat
15839 38D4           83C4                   04  add	sp,*4
15840                                           !BCC_EOS
15841                                           ! 1883         break;
15842 38D7           E9         00D2            br 	.25
15843                                           !BCC_EOS
15844                                           ! 1884        case 0x20:
15845                                           ! 1885         biosfn_load_gfx_8_8_chars(ES,BP);
15846                       000038DA            .30:
15847                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15848 38DA           FF76         08            push	8[bp]
15849                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15850 38DD           FF76         16            push	$16[bp]
15851                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15852 38E0           E8         319F            call	_biosfn_load_gfx_8_8_chars
15853 38E3           83C4                   04  add	sp,*4
15854                                           !BCC_EOS
15855                                           ! 1886         break;
15856 38E6           E9         00C3            br 	.25
15857                                           !BCC_EOS
15858                                           ! 1887        case 0x21:
15859                                           ! 1888         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15860                       000038E9            .31:
15861                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15862 38E9           8A46         0E            mov	al,$E[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 38EC           30E4                       xor	ah,ah
15865 38EE           50                         push	ax
15866                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15867 38EF           8A46         0C            mov	al,$C[bp]
15868                                           ! Debug: list unsigned char = al+0 (used reg = )
15869 38F2           30E4                       xor	ah,ah
15870 38F4           50                         push	ax
15871                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15872 38F5           FF76         10            push	$10[bp]
15873                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15874 38F8           FF76         08            push	8[bp]
15875                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15876 38FB           FF76         16            push	$16[bp]
15877                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15878 38FE           E8         3189            call	_biosfn_load_gfx_user_chars
15879 3901           83C4                   0A  add	sp,*$A
15880                                           !BCC_EOS
15881                                           ! 1889         break;
15882 3904           E9         00A5            br 	.25
15883                                           !BCC_EOS
15884                                           ! 1890        case 0x22:
15885                                           ! 1891         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15886                       00003907            .32:
15887                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15888 3907           8A46         0C            mov	al,$C[bp]
15889                                           ! Debug: list unsigned char = al+0 (used reg = )
15890 390A           30E4                       xor	ah,ah
15891 390C           50                         push	ax
15892                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15893 390D           E8         3182            call	_biosfn_load_gfx_8_14_chars
15894 3910           44                         inc	sp
15895 3911           44                         inc	sp
15896                                           !BCC_EOS
15897                                           ! 1892         break;
15898 3912           E9         0097            br 	.25
15899                                           !BCC_EOS
15900                                           ! 1893        case 0x23:
15901                                           ! 1894         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15902                       00003915            .33:
15903                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15904 3915           8A46         0C            mov	al,$C[bp]
15905                                           ! Debug: list unsigned char = al+0 (used reg = )
15906 3918           30E4                       xor	ah,ah
15907 391A           50                         push	ax
15908                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15909 391B           E8         317C            call	_biosfn_load_gfx_8_8_dd_chars
15910 391E           44                         inc	sp
15911 391F           44                         inc	sp
15912                                           !BCC_EOS
15913                                           ! 1895         
15914                                           ! 1895 break;
15915 3920           E9         0089            br 	.25
15916                                           !BCC_EOS
15917                                           ! 1896        case 0x24:
15918                                           ! 1897         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15919                       00003923            .34:
15920                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15921 3923           8A46         0C            mov	al,$C[bp]
15922                                           ! Debug: list unsigned char = al+0 (used reg = )
15923 3926           30E4                       xor	ah,ah
15924 3928           50                         push	ax
15925                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15926 3929           E8         3176            call	_biosfn_load_gfx_8_16_chars
15927 392C           44                         inc	sp
15928 392D           44                         inc	sp
15929                                           !BCC_EOS
15930                                           ! 1898         break;
15931 392E           E9         007B            br 	.25
15932                                           !BCC_EOS
15933                                           ! 1899        case 0x30:
15934                                           ! 1900         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15935                       00003931            .35:
15936                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15937 3931           8D5E         0E            lea	bx,$E[bp]
15938 3934           53                         push	bx
15939                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15940 3935           8D5E         10            lea	bx,$10[bp]
15941 3938           53                         push	bx
15942                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15943 3939           8D5E         08            lea	bx,8[bp]
15944 393C           53                         push	bx
15945                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15946 393D           8D5E         16            lea	bx,$16[bp]
15947 3940           53                         push	bx
15948                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15949 3941           8B46         0C            mov	ax,$C[bp]
15950 3944           88E0                       mov	al,ah
15951 3946           30E4                       xor	ah,ah
15952                                           ! Debug: list unsigned int = ax+0 (used reg = )
15953 3948           50                         push	ax
15954                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15955 3949           E8         315E            call	_biosfn_get_font_info
15956 394C           83C4                   0A  add	sp,*$A
15957                                           !BCC_EOS
15958                                           ! 1901         break;
15959 394F           EB           5B            jmp .25
15960                                           !BCC_EOS
15961                                           ! 1902        default:
15962                                           ! 1903         unknown();
15963                       00003951            .36:
15964                                           ! Debug: func () void = unknown+0 (used reg = )
15965 3951           E8         4488            call	_unknown
15966                                           !BCC_EOS
15967                                           ! 1904       }
15968                                           ! 1905      break;
15969 3954           EB           56            jmp .25
15970                       00003956            .27:
15971 3956           2C                     00  sub	al,*0
15972 3958         0F84         FF16            beq 	.28
15973 395C           2C                     01  sub	al,*1
15974 395E         0F84         FF39            beq 	.2A
15975 3962           2C                     01  sub	al,*1
15976 3964         0F84         FF48            beq 	.2C
15977 3968           2C                     02  sub	al,*2
15978 396A         0F84         FF57            beq 	.2E
15979 396E           2C                     0C  sub	al,*$C
15980 3970         0F84         FEFE            beq 	.29
15981 3974           2C                     01  sub	al,*1
15982 3976         0F84         FF21            beq 	.2B
15983 397A           2C                     01  sub	al,*1
15984 397C         0F84         FF30            beq 	.2D
15985 3980           2C                     02  sub	al,*2
15986 3982         0F84         FF3F            beq 	.2F
15987 3986           2C                     0C  sub	al,*$C
15988 3988         0F84         FF4E            beq 	.30
15989 398C           2C                     01  sub	al,*1
15990 398E         0F84         FF57            beq 	.31
15991 3992           2C                     01  sub	al,*1
15992 3994         0F84         FF6F            beq 	.32
15993 3998           2C                     01  sub	al,*1
15994 399A         0F84         FF77            beq 	.33
15995 399E           2C                     01  sub	al,*1
15996 39A0         0F84         FF7F            beq 	.34
15997 39A4           2C                     0C  sub	al,*$C
15998 39A6         0F84         FF87            beq 	.35
15999 39AA           EB           A5            jmp	.36
16000                       000039AC            .25:
16001 39AC           E9         0210            br 	.4
16002                                           !BCC_EOS
16003                                           ! 1906    case 0x12:
16004                                           ! 1907      switch(( BX & 0x00ff ))
16005                       000039AF            .37:
16006                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
16007 39AF           8A46         0C            mov	al,$C[bp]
16008                                           ! 1908       {
16009 39B2           EB           3F            jmp .3A
16010                                           ! 1909        case 0x20:
16011                                           ! 1910         biosfn_alternate_prtsc();
16012                       000039B4            .3B:
16013                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
16014 39B4           E8         32DE            call	_biosfn_alternate_prtsc
16015                                           !BCC_EOS
16016                                           ! 1911         break;
16017 39B7           EB           48            jmp .38
16018                                           !BCC_EOS
16019                                           ! 1912        case 0x35:
16020                                           ! 1913         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
16021                       000039B9            .3C:
16022                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
16023 39B9           FF76         0E            push	$E[bp]
16024                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16025 39BC           FF76         16            push	$16[bp]
16026                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16027 39BF           8A46         12            mov	al,$12[bp]
16028                                           ! Debug: list unsigned char = al+0 (used reg = )
16029 39C2           30E4                       xor	ah,ah
16030 39C4           50                         push	ax
16031                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16032 39C5           E8         33E4            call	_biosfn_switch_video_interface
16033 39C8           83C4                   06  add	sp,*6
16034                                           !BCC_EOS
16035                                           ! 1914         AX = ((AX & 0xff00) | (0x12));
16036                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16037 39CB           8B46         12            mov	ax,$12[bp]
16038 39CE           30C0                       xor	al,al
16039                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16040 39D0           0C                     12  or	al,*$12
16041                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16042 39D2           8946         12            mov	$12[bp],ax
16043                                           !BCC_EOS
16044                                           ! 1915         break;
16045 39D5           EB           2A            jmp .38
16046                                           !BCC_EOS
16047                                           ! 1916        case 0x36:
16048                                           ! 1917         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16049                       000039D7            .3D:
16050                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16051 39D7           8A46         12            mov	al,$12[bp]
16052                                           ! Debug: list unsigned char = al+0 (used reg = )
16053 39DA           30E4                       xor	ah,ah
16054 39DC           50                         push	ax
16055                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16056 39DD           E8         33D4            call	_biosfn_enable_video_refresh_control
16057 39E0           44                         inc	sp
16058 39E1           44                         inc	sp
16059                                           !BCC_EOS
16060                                           ! 1918         AX = ((AX & 0xff00) | (0x12));
16061                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16062 39E2           8B46         12            mov	ax,$12[bp]
16063 39E5           30C0                       xor	al,al
16064                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16065 39E7           0C                     12  or	al,*$12
16066                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16067 39E9           8946         12            mov	$12[bp],ax
16068                                           !BCC_EOS
16069                                           ! 1919         break;
16070 39EC           EB           13            jmp .38
16071                                           !BCC_EOS
16072                                           ! 1920        default:
16073                                           ! 1921         unknown();
16074                       000039EE            .3E:
16075                                           ! Debug: func () void = unknown+0 (used reg = )
16076 39EE           E8         43EB            call	_unknown
16077                                           !BCC_EOS
16078                                           ! 1922       }
16079                                           ! 1923      break;
16080 39F1           EB           0E            jmp .38
16081                       000039F3            .3A:
16082 39F3           2C                     20  sub	al,*$20
16083 39F5           74           BD            je 	.3B
16084 39F7           2C                     15  sub	al,*$15
16085 39F9           74           BE            je 	.3C
16086 39FB           2C                     01  sub	al,*1
16087 39FD           74           D8            je 	.3D
16088 39FF           EB           ED            jmp	.3E
16089                       00003A01            .38:
16090 3A01           E9         01BB            br 	.4
16091                                           !BCC_EOS
16092                                           ! 1924    case 0x13:
16093                                           ! 1925      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16094                       00003A04            .3F:
16095                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16096 3A04           FF76         08            push	8[bp]
16097                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16098 3A07           FF76         16            push	$16[bp]
16099                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16100 3A0A           8A46         0E            mov	al,$E[bp]
16101                                           ! Debug: list unsigned char = al+0 (used reg = )
16102 3A0D           30E4                       xor	ah,ah
16103 3A0F           50                         push	ax
16104                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16105 3A10           8B46         0E            mov	ax,$E[bp]
16106 3A13           88E0                       mov	al,ah
16107 3A15           30E4                       xor	ah,ah
16108                                           ! Debug: list unsigned int = ax+0 (used reg = )
16109 3A17           50                         push	ax
16110                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16111 3A18           FF76         10            push	$10[bp]
16112                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16113 3A1B           8A46         0C            mov	al,$C[bp]
16114                                           ! Debug: list unsigned char = al+0 (used reg = )
16115 3A1E           30E4                       xor	ah,ah
16116 3A20           50                         push	ax
16117                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16118 3A21           8B46         0C            mov	ax,$C[bp]
16119 3A24           88E0                       mov	al,ah
16120 3A26           30E4                       xor	ah,ah
16121                                           ! Debug: list unsigned int = ax+0 (used reg = )
16122 3A28           50                         push	ax
16123                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16124 3A29           8A46         12            mov	al,$12[bp]
16125                                           ! Debug: list unsigned char = al+0 (used reg = )
16126 3A2C           30E4                       xor	ah,ah
16127 3A2E           50                         push	ax
16128                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16129 3A2F           E8         338A            call	_biosfn_write_string
16130 3A32           83C4                   10  add	sp,*$10
16131                                           !BCC_EOS
16132                                           ! 1926      break;
16133 3A35           E9         0187            br 	.4
16134                                           !BCC_EOS
16135                                           ! 1927    case 0x1B:
16136                                           ! 1928      biosfn_read_state_info(BX,ES,DI);
16137                       00003A38            .40:
16138                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16139 3A38           FF76         04            push	4[bp]
16140                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16141 3A3B           FF76         16            push	$16[bp]
16142                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16143 3A3E           FF76         0C            push	$C[bp]
16144                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16145 3A41           E8         34C4            call	_biosfn_read_state_info
16146 3A44           83C4                   06  add	sp,*6
16147                                           !BCC_EOS
16148                                           ! 1929      AX = ((AX & 0xff00) | (0x1B));
16149                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16150 3A47           8B46         12            mov	ax,$12[bp]
16151 3A4A           30C0                       xor	al,al
16152                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16153 3A4C           0C                     1B  or	al,*$1B
16154                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16155 3A4E           8946         12            mov	$12[bp],ax
16156                                           !BCC_EOS
16157                                           ! 1930      break;
16158 3A51           E9         016B            br 	.4
16159                                           !BCC_EOS
16160                                           ! 1931    case 0x1C:
16161                                           ! 1932      switch(( AX & 0x00ff ))
16162                       00003A54            .41:
16163                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16164 3A54           8A46         12            mov	al,$12[bp]
16165                                           ! 1933       {
16166 3A57           EB           36            jmp .44
16167                                           ! 1934        case 0x00:
16168                                           ! 1935         biosfn_read_video_state_size(CX,&BX);
16169                       00003A59            .45:
16170                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16171 3A59           8D5E         0C            lea	bx,$C[bp]
16172 3A5C           53                         push	bx
16173                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16174 3A5D           FF76         10            push	$10[bp]
16175                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16176 3A60           E8         3624            call	_biosfn_read_video_state_size
16177 3A63           83C4                   04  add	sp,*4
16178                                           !BCC_EOS
16179                                           ! 1936         break;
16180 3A66           EB           35            jmp .42
16181                                           !BCC_EOS
16182                                           ! 1937        case 0x01:
16183                                           ! 1938         biosfn_save_video_state(CX,ES,BX);
16184                       00003A68            .46:
16185                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16186 3A68           FF76         0C            push	$C[bp]
16187                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16188 3A6B           FF76         16            push	$16[bp]
16189                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16190 3A6E           FF76         10            push	$10[bp]
16191                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16192 3A71           E8         3637            call	_biosfn_save_video_state
16193 3A74           83C4                   06  add	sp,*6
16194                                           !BCC_EOS
16195                                           ! 1939         break;
16196 3A77           EB           24            jmp .42
16197                                           !BCC_EOS
16198                                           ! 1940        case 0x02:
16199                                           ! 1941         biosfn_restore_video_state(CX,ES,BX);
16200                       00003A79            .47:
16201                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16202 3A79           FF76         0C            push	$C[bp]
16203                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16204 3A7C           FF76         16            push	$16[bp]
16205                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16206 3A7F           FF76         10            push	$10[bp]
16207                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16208 3A82           E8         3BF0            call	_biosfn_restore_video_state
16209 3A85           83C4                   06  add	sp,*6
16210                                           !BCC_EOS
16211                                           ! 1942         break;
16212 3A88           EB           13            jmp .42
16213                                           !BCC_EOS
16214                                           ! 1943        default:
16215                                           ! 1944         unknown();
16216                       00003A8A            .48:
16217                                           ! Debug: func () void = unknown+0 (used reg = )
16218 3A8A           E8         434F            call	_unknown
16219                                           !BCC_EOS
16220                                           ! 1945       }
16221                                           ! 1946      AX = ((AX & 0xff00) | (0x1C));
16222 3A8D           EB           0E            jmp .42
16223                       00003A8F            .44:
16224 3A8F           2C                     00  sub	al,*0
16225 3A91           74           C6            je 	.45
16226 3A93           2C                     01  sub	al,*1
16227 3A95           74           D1            je 	.46
16228 3A97           2C                     01  sub	al,*1
16229 3A99           74           DE            je 	.47
16230 3A9B           EB           ED            jmp	.48
16231                       00003A9D            .42:
16232                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16233 3A9D           8B46         12            mov	ax,$12[bp]
16234 3AA0           30C0                       xor	al,al
16235                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16236 3AA2           0C                     1C  or	al,*$1C
16237                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16238 3AA4           8946         12            mov	$12[bp],ax
16239                                           !BCC_EOS
16240                                           ! 1947      break;
16241 3AA7           E9         0115            br 	.4
16242                                           !BCC_EOS
16243                                           ! 1948    case 0x4f:
16244                                           ! 1949      if (vbe_has_vbe_display()) {
16245                       00003AAA            .49:
16246                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16247 3AAA           E8         5EF7            call	_vbe_has_vbe_display
16248 3AAD           85C0                       test	ax,ax
16249 3AAF         0F84         00A9            beq 	.4A
16250                       00003AB3            .4B:
16251                                           ! 1950        switch(( AX & 0x00ff ))
16252                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16253 3AB3           8A46         12            mov	al,$12[bp]
16254                                           ! 1951        {
16255 3AB6           EB           77            jmp .4E
16256                                           ! 1952          case 0x00:
16257                                           ! 1953           vbe_biosfn_return_controller_information(&AX,ES,DI);
16258                       00003AB8            .4F:
16259                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16260 3AB8           FF76         04            push	4[bp]
16261                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16262 3ABB           FF76         16            push	$16[bp]
16263                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16264 3ABE           8D5E         12            lea	bx,$12[bp]
16265 3AC1           53                         push	bx
16266                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16267 3AC2           E8         5F56            call	_vbe_biosfn_return_controller_information
16268 3AC5           83C4                   06  add	sp,*6
16269                                           !BCC_EOS
16270                                           ! 1954           break;
16271 3AC8           E9         008F            br 	.4C
16272                                           !BCC_EOS
16273                                           ! 1955          case 0x01:
16274                                           ! 1956           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16275                       00003ACB            .50:
16276                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16277 3ACB           FF76         04            push	4[bp]
16278                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16279 3ACE           FF76         16            push	$16[bp]
16280                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16281 3AD1           FF76         10            push	$10[bp]
16282                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16283 3AD4           8D5E         12            lea	bx,$12[bp]
16284 3AD7           53                         push	bx
16285                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16286 3AD8           E8         61EA            call	_vbe_biosfn_return_mode_information
16287 3ADB           83C4                   08  add	sp,*8
16288                                           !BCC_EOS
16289                                           ! 1957           break;
16290 3ADE           EB           7A            jmp .4C
16291                                           !BCC_EOS
16292                                           ! 1958          case 0x02:
16293                                           ! 1959           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16294                       00003AE0            .51:
16295                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16296 3AE0           FF76         04            push	4[bp]
16297                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16298 3AE3           FF76         16            push	$16[bp]
16299                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16300 3AE6           FF76         0C            push	$C[bp]
16301                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16302 3AE9           8D5E         12            lea	bx,$12[bp]
16303 3AEC           53                         push	bx
16304                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16305 3AED           E8         631E            call	_vbe_biosfn_set_mode
16306 3AF0           83C4                   08  add	sp,*8
16307                                           !BCC_EOS
16308                                           ! 1960           break;
16309 3AF3           EB           65            jmp .4C
16310                                           !BCC_EOS
16311                                           ! 1961          case 0x04:
16312                                           ! 1962           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16313                       00003AF5            .52:
16314                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16315 3AF5           8D5E         0C            lea	bx,$C[bp]
16316 3AF8           53                         push	bx
16317                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16318 3AF9           FF76         16            push	$16[bp]
16319                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16320 3AFC           FF76         0E            push	$E[bp]
16321                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16322 3AFF           FF76         10            push	$10[bp]
16323                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16324 3B02           8D5E         12            lea	bx,$12[bp]
16325 3B05           53                         push	bx
16326                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16327 3B06           E8         6672            call	_vbe_biosfn_save_restore_state
16328 3B09           83C4                   0A  add	sp,*$A
16329                                           !BCC_EOS
16330                                           ! 1963           break;
16331 3B0C           EB           4C            jmp .4C
16332                                           !BCC_EOS
16333                                           ! 1964          case 0x09:
16334                                           ! 1965           unimplemented();
16335                       00003B0E            .53:
16336                                           ! Debug: func () void = unimplemented+0 (used reg = )
16337 3B0E           E8         42BD            call	_unimplemented
16338                                           !BCC_EOS
16339                                           ! 1966           AX=0x100;
16340                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16341 3B11           B8                   0100  mov	ax,#$100
16342 3B14           8946         12            mov	$12[bp],ax
16343                                           !BCC_EOS
16344                                           ! 1967           break;
16345 3B17           EB           41            jmp .4C
16346                                           !BCC_EOS
16347                                           ! 1968          case 0x0A:
16348                                           ! 1969           unimplemented();
16349                       00003B19            .54:
16350                                           ! Debug: func () void = unimplemented+0 (used reg = )
16351 3B19           E8         42B2            call	_unimplemented
16352                                           !BCC_EOS
16353                                           ! 1970           AX=0x100;
16354                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16355 3B1C           B8                   0100  mov	ax,#$100
16356 3B1F           8946         12            mov	$12[bp],ax
16357                                           !BCC_EOS
16358                                           ! 1971           break;
16359 3B22           EB           36            jmp .4C
16360                                           !BCC_EOS
16361                                           ! 1972          default:
16362                                           ! 1973           unknown();
16363                       00003B24            .55:
16364                                           ! Debug: func () void = unknown+0 (used reg = )
16365 3B24           E8         42B5            call	_unknown
16366                                           !BCC_EOS
16367                                           ! 1974           AX=0x100;
16368                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16369 3B27           B8                   0100  mov	ax,#$100
16370 3B2A           8946         12            mov	$12[bp],ax
16371                                           !BCC_EOS
16372                                           ! 1975           }
16373                                           ! 1976         }
16374 3B2D           EB           2B            jmp .4C
16375                       00003B2F            .4E:
16376 3B2F           2C                     00  sub	al,*0
16377 3B31           72           F1            jb 	.55
16378 3B33           3C                     0A  cmp	al,*$A
16379 3B35           77           21            ja  	.56
16380 3B37           30E4                       xor	ah,ah
16381 3B39           D1E0                       shl	ax,*1
16382 3B3B           89C3                       mov	bx,ax
16383 3B3D           2E                         seg	cs
16384 3B3E           FFA7       3B42            br	.57[bx]
16385                       00003B42            .57:
16386 3B42                      3AB8            .word	.4F
16387 3B44                      3ACB            .word	.50
16388 3B46                      3AE0            .word	.51
16389 3B48                      3B24            .word	.55
16390 3B4A                      3AF5            .word	.52
16391 3B4C                      3B24            .word	.55
16392 3B4E                      3B24            .word	.55
16393 3B50                      3B24            .word	.55
16394 3B52                      3B24            .word	.55
16395 3B54                      3B0E            .word	.53
16396 3B56                      3B19            .word	.54
16397                       00003B58            .56:
16398 3B58           EB           CA            jmp	.55
16399                       00003B5A            .4C:
16400                                           ! 1977         else {
16401 3B5A           EB           06            jmp .58
16402                       00003B5C            .4A:
16403                                           ! 1978           AX=0x0100;
16404                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16405 3B5C           B8                   0100  mov	ax,#$100
16406 3B5F           8946         12            mov	$12[bp],ax
16407                                           !BCC_EOS
16408                                           ! 1979     
16409                                           ! 1979       }
16410                                           ! 1980         break;
16411                       00003B62            .58:
16412 3B62           EB           5B            jmp .4
16413                                           !BCC_EOS
16414                                           ! 1981    default:
16415                                           ! 1982      unknown();
16416                       00003B64            .59:
16417                                           ! Debug: func () void = unknown+0 (used reg = )
16418 3B64           E8         4275            call	_unknown
16419                                           !BCC_EOS
16420                                           ! 1983   }
16421                                           ! 1984 }
16422 3B67           EB           56            jmp .4
16423                       00003B69            .6:
16424 3B69           2D                   0000  sub	ax,*0
16425 3B6C           7C           F6            jl 	.59
16426 3B6E           3D                   001C  cmp	ax,*$1C
16427 3B71           77           43            ja  	.5A
16428 3B73           D1E0                       shl	ax,*1
16429 3B75           89C3                       mov	bx,ax
16430 3B77           2E                         seg	cs
16431 3B78           FFA7       3B7C            br	.5B[bx]
16432                       00003B7C            .5B:
16433 3B7C                      3674            .word	.7
16434 3B7E                      36D2            .word	.16
16435 3B80                      36E9            .word	.17
16436 3B82                      36FD            .word	.18
16437 3B84                      3716            .word	.19
16438 3B86                      3730            .word	.1A
16439 3B88                      373E            .word	.1B
16440 3B8A                      3779            .word	.1C
16441 3B8C                      37B3            .word	.1D
16442 3B8E                      37C8            .word	.1E
16443 3B90                      37E8            .word	.1F
16444 3B92                      3B64            .word	.59
16445 3B94                      3808            .word	.20
16446 3B96                      3825            .word	.21
16447 3B98                      3840            .word	.22
16448 3B9A                      3B64            .word	.59
16449 3B9C                      385D            .word	.23
16450 3B9E                      386C            .word	.24
16451 3BA0                      39AF            .word	.37
16452 3BA2                      3A04            .word	.3F
16453 3BA4                      3B64            .word	.59
16454 3BA6                      3B64            .word	.59
16455 3BA8                      3B64            .word	.59
16456 3BAA                      3B64            .word	.59
16457 3BAC                      3B64            .word	.59
16458 3BAE                      3B64            .word	.59
16459 3BB0                      3B64            .word	.59
16460 3BB2                      3A38            .word	.40
16461 3BB4                      3A54            .word	.41
16462                       00003BB6            .5A:
16463 3BB6           2D                   004F  sub	ax,*$4F
16464 3BB9         0F84         FEED            beq 	.49
16465 3BBD           EB           A5            jmp	.59
16466                       00003BBF            .4:
16467                       FFFFFFFE            ..FFFF	=	-2
16468 3BBF           5D                         pop	bp
16469 3BC0           C3                         ret
16470                                           ! 1985 static void biosfn_set_video_mode(mode) Bit8u mode;
16471                                           ! Register BX used in function int10_func
16472                       00003BC1            _biosfn_set_video_mode:
16473                                           !BCC_EOS
16474                                           ! 1986 {
16475                                           ! 1987  Bit8u noclearmem=mode&0x80;
16476 3BC1           55                         push	bp
16477 3BC2           89E5                       mov	bp,sp
16478 3BC4           4C                         dec	sp
16479                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16480 3BC5           8A46         04            mov	al,4[bp]
16481 3BC8           24                     80  and	al,#$80
16482                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16483 3BCA           8846         FF            mov	-1[bp],al
16484                                           !BCC_EOS
16485                                           ! 1988  Bit8u line,mmask,*palette,vpti;
16486                                           !BCC_EOS
16487                                           ! 1989  Bit16u i,twidth,theightm1,cheight;
16488                                           !BCC_EOS
16489                                           ! 1990  Bit8u modeset_ctl,video_ctl,vga_switches;
16490                                           !BCC_EOS
16491                                           ! 1991  Bit16u crtc_addr;
16492                                           !BCC_EOS
16493                                           ! 1992  if (vbe_has_vbe_display()) {
16494 3BCD           83C4                   EB  add	sp,*-$15
16495                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16496 3BD0           E8         5DD1            call	_vbe_has_vbe_display
16497 3BD3           85C0                       test	ax,ax
16498 3BD5           74           08            je  	.5C
16499                       00003BD7            .5D:
16500                                           ! 1993    dispi_set_enable(0x00);
16501                                           ! Debug: list int = const 0 (used reg = )
16502 3BD7           31C0                       xor	ax,ax
16503 3BD9           50                         push	ax
16504                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16505 3BDA           E8         5B94            call	_dispi_set_enable
16506 3BDD           44                         inc	sp
16507 3BDE           44                         inc	sp
16508                                           !BCC_EOS
16509                                           ! 1994   }
16510                                           ! 1995  mode=mode&0x7f;
16511                       00003BDF            .5C:
16512                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16513 3BDF           8A46         04            mov	al,4[bp]
16514 3BE2           24                     7F  and	al,*$7F
16515                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16516 3BE4           8846         04            mov	4[bp],al
16517                                           !BCC_EOS
16518                                           ! 1996  line=find_vga_entry(mode);
16519                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16520 3BE7           8A46         04            mov	al,4[bp]
16521 3BEA           30E4                       xor	ah,ah
16522 3BEC           50                         push	ax
16523                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16524 3BED           E8         4063            call	_find_vga_entry
16525 3BF0           44                         inc	sp
16526 3BF1           44                         inc	sp
16527                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16528 3BF2           8846         FE            mov	-2[bp],al
16529                                           !BCC_EOS
16530                                           ! 1997  printf("mode search %02x found line %02x\n",mode,line);
16531                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16532 3BF5           8A46         FE            mov	al,-2[bp]
16533 3BF8           30E4                       xor	ah,ah
16534 3BFA           50                         push	ax
16535                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16536 3BFB           8A46         04            mov	al,4[bp]
16537 3BFE           30E4                       xor	ah,ah
16538 3C00           50                         push	ax
16539                                           ! Debug: list * char = .5E+0 (used reg = )
16540 3C01           BB                   A5DE  mov	bx,#.5E
16541 3C04           53                         push	bx
16542                                           ! Debug: func () void = printf+0 (used reg = )
16543 3C05           E8         41E2            call	_printf
16544 3C08           83C4                   06  add	sp,*6
16545                                           !BCC_EOS
16546                                           ! 1998  if(line==0xFF)
16547                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16548 3C0B           8A46         FE            mov	al,-2[bp]
16549 3C0E           3C                     FF  cmp	al,#$FF
16550 3C10           75           04            jne 	.5F
16551                       00003C12            .60:
16552                                           ! 1999   return;
16553 3C12           89EC                       mov	sp,bp
16554 3C14           5D                         pop	bp
16555 3C15           C3                         ret
16556                                           !BCC_EOS
16557                                           ! 2000  vpti=line_to_vpti[line];
16558                       00003C16            .5F:
16559                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16560 3C16           8A46         FE            mov	al,-2[bp]
16561 3C19           30E4                       xor	ah,ah
16562 3C1B           89C3                       mov	bx,ax
16563                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16564 3C1D           8A87       028B            mov	al,_line_to_vpti[bx]
16565 3C21           8846         F9            mov	-7[bp],al
16566                                           !BCC_EOS
16567                                           ! 2001  twidth=video_param_table[vpti].twidth;
16568                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16569 3C24           8A46         F9            mov	al,-7[bp]
16570 3C27           30E4                       xor	ah,ah
16571 3C29           B1                     06  mov	cl,*6
16572 3C2B           D3E0                       shl	ax,cl
16573 3C2D           89C3                       mov	bx,ax
16574                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16575 3C2F           8A87       029F            mov	al,_video_param_table[bx]
16576 3C33           30E4                       xor	ah,ah
16577 3C35           8946         F4            mov	-$C[bp],ax
16578                                           !BCC_EOS
16579                                           ! 2002  theightm1=video_param_table[vpti].theightm1;
16580                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16581 3C38           8A46         F9            mov	al,-7[bp]
16582 3C3B           30E4                       xor	ah,ah
16583 3C3D           B1                     06  mov	cl,*6
16584 3C3F           D3E0                       shl	ax,cl
16585 3C41           89C3                       mov	bx,ax
16586 3C43           81C3                 029F  add	bx,#_video_param_table
16587                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16588 3C47           8A47         01            mov	al,1[bx]
16589 3C4A           30E4                       xor	ah,ah
16590 3C4C           8946         F2            mov	-$E[bp],ax
16591                                           !BCC_EOS
16592                                           ! 2003  cheight=video_param_table[vpti].cheight;
16593                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16594 3C4F           8A46         F9            mov	al,-7[bp]
16595 3C52           30E4                       xor	ah,ah
16596 3C54           B1                     06  mov	cl,*6
16597 3C56           D3E0                       shl	ax,cl
16598 3C58           89C3                       mov	bx,ax
16599 3C5A           81C3                 029F  add	bx,#_video_param_table
16600                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16601 3C5E           8A47         02            mov	al,2[bx]
16602 3C61           30E4                       xor	ah,ah
16603 3C63           8946         F0            mov	-$10[bp],ax
16604                                           !BCC_EOS
16605                                           ! 2004  video_ctl=read_byte(0x40,0x87);
16606                                           ! Debug: list int = const $87 (used reg = )
16607 3C66           B8                   0087  mov	ax,#$87
16608 3C69           50                         push	ax
16609                                           ! Debug: list int = const $40 (used reg = )
16610 3C6A           B8                   0040  mov	ax,*$40
16611 3C6D           50                         push	ax
16612                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16613 3C6E           E8         40CE            call	_read_byte
16614 3C71           83C4                   04  add	sp,*4
16615                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16616 3C74           8846         EE            mov	-$12[bp],al
16617                                           !BCC_EOS
16618                                           ! 2005  vga_switches=read_byte(0x40,0x88);
16619                                           ! Debug: list int = const $88 (used reg = )
16620 3C77           B8                   0088  mov	ax,#$88
16621 3C7A           50                         push	ax
16622                                           ! Debug: list int = const $40 (used reg = )
16623 3C7B           B8                   0040  mov	ax,*$40
16624 3C7E           50                         push	ax
16625                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16626 3C7F           E8         40BD            call	_read_byte
16627 3C82           83C4                   04  add	sp,*4
16628                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16629 3C85           8846         ED            mov	-$13[bp],al
16630                                           !BCC_EOS
16631                                           ! 2006  modeset_ctl=read_byte(0x40,0x89);
16632                                           ! Debug: list int = const $89 (used reg = )
16633 3C88           B8                   0089  mov	ax,#$89
16634 3C8B           50                         push	ax
16635                                           ! Debug: list int = const $40 (used reg = )
16636 3C8C           B8                   0040  mov	ax,*$40
16637 3C8F           50                         push	ax
16638                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16639 3C90           E8         40AC            call	_read_byte
16640 3C93           83C4                   04  add	sp,*4
16641                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16642 3C96           8846         EF            mov	-$11[bp],al
16643                                           !BCC_EOS
16644                                           ! 2007  if((modeset_ctl&0x08)==0)
16645                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16646 3C99           8A46         EF            mov	al,-$11[bp]
16647 3C9C           24                     08  and	al,*8
16648                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16649 3C9E           84C0                       test	al,al
16650 3CA0         0F85         0145            bne 	.61
16651                       00003CA4            .62:
16652                                           ! 2008   {
16653                                           ! 2009    outb(0x3c6,vga_modes[line].pelmask);
16654                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16655 3CA4           8A46         FE            mov	al,-2[bp]
16656 3CA7           30E4                       xor	ah,ah
16657 3CA9           B1                     03  mov	cl,*3
16658 3CAB           D3E0                       shl	ax,cl
16659 3CAD           89C3                       mov	bx,ax
16660 3CAF           81C3                 020B  add	bx,#_vga_modes
16661                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16662 3CB3           8A47         06            mov	al,6[bx]
16663 3CB6           30E4                       xor	ah,ah
16664 3CB8           50                         push	ax
16665                                           ! Debug: list int = const $3C6 (used reg = )
16666 3CB9           B8                   03C6  mov	ax,#$3C6
16667 3CBC           50                         push	ax
16668                                           ! Debug: func () void = outb+0 (used reg = )
16669 3CBD           E8         40EB            call	_outb
16670 3CC0           83C4                   04  add	sp,*4
16671                                           !BCC_EOS
16672                                           ! 2010    outb(0x3c8,0x00);
16673                                           ! Debug: list int = const 0 (used reg = )
16674 3CC3           31C0                       xor	ax,ax
16675 3CC5           50                         push	ax
16676                                           ! Debug: list int = const $3C8 (used reg = )
16677 3CC6           B8                   03C8  mov	ax,#$3C8
16678 3CC9           50                         push	ax
16679                                           ! Debug: func () void = outb+0 (used reg = )
16680 3CCA           E8         40DE            call	_outb
16681 3CCD           83C4                   04  add	sp,*4
16682                                           !BCC_EOS
16683                                           ! 2011    switch(vga_modes[line].dacmodel)
16684                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16685 3CD0           8A46         FE            mov	al,-2[bp]
16686 3CD3           30E4                       xor	ah,ah
16687 3CD5           B1                     03  mov	cl,*3
16688 3CD7           D3E0                       shl	ax,cl
16689 3CD9           89C3                       mov	bx,ax
16690 3CDB           81C3                 020B  add	bx,#_vga_modes
16691 3CDF           8A47         07            mov	al,7[bx]
16692                                           ! 2012     {case 0:
16693 3CE2           EB           22            jmp .65
16694                                           ! 2013       palette=&palette0;
16695                       00003CE4            .66:
16696                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16697 3CE4           BB                   0A1F  mov	bx,#_palette0
16698 3CE7           895E         FA            mov	-6[bp],bx
16699                                           !BCC_EOS
16700                                           ! 2014       break;
16701 3CEA           EB           2A            jmp .63
16702                                           !BCC_EOS
16703                                           ! 2015      case 1:
16704                                           ! 2016       palette=&palette1;
16705                       00003CEC            .67:
16706                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16707 3CEC           BB                   0ADF  mov	bx,#_palette1
16708 3CEF           895E         FA            mov	-6[bp],bx
16709                                           !BCC_EOS
16710                                           ! 2017       break;
16711 3CF2           EB           22            jmp .63
16712                                           !BCC_EOS
16713                                           ! 2018      case 2:
16714                                           ! 2019       palette=&palette2;
16715                       00003CF4            .68:
16716                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16717 3CF4           BB                   0B9F  mov	bx,#_palette2
16718 3CF7           895E         FA            mov	-6[bp],bx
16719                                           !BCC_EOS
16720                                           ! 2020       break;
16721 3CFA           EB           1A            jmp .63
16722                                           !BCC_EOS
16723                                           ! 2021      case 3:
16724                                           ! 2022       palette=&palette3;
16725                       00003CFC            .69:
16726                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16727 3CFC           BB                   0C5F  mov	bx,#_palette3
16728 3CFF           895E         FA            mov	-6[bp],bx
16729                                           !BCC_EOS
16730                                           ! 2023       break;
16731 3D02           EB           12            jmp .63
16732                                           !BCC_EOS
16733                                           ! 2024     }
16734                                           ! 2025    for(i=0;i<0x0100;i++)
16735 3D04           EB           10            jmp .63
16736                       00003D06            .65:
16737 3D06           2C                     00  sub	al,*0
16738 3D08           74           DA            je 	.66
16739 3D0A           2C                     01  sub	al,*1
16740 3D0C           74           DE            je 	.67
16741 3D0E           2C                     01  sub	al,*1
16742 3D10           74           E2            je 	.68
16743 3D12           2C                     01  sub	al,*1
16744 3D14           74           E6            je 	.69
16745                       00003D16            .63:
16746                       FFFFFFE8            ..FFFE	=	-$18
16747                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16748 3D16           31C0                       xor	ax,ax
16749 3D18           8946         F6            mov	-$A[bp],ax
16750                                           !BCC_EOS
16751                                           !BCC_EOS
16752                                           ! 2026     {if(i<=dac_regs[vga_modes[line].dacmodel])
16753 3D1B           E9         00AB            br 	.6C
16754                       00003D1E            .6D:
16755                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16756 3D1E           8A46         FE            mov	al,-2[bp]
16757 3D21           30E4                       xor	ah,ah
16758 3D23           B1                     03  mov	cl,*3
16759 3D25           D3E0                       shl	ax,cl
16760 3D27           89C3                       mov	bx,ax
16761 3D29           81C3                 020B  add	bx,#_vga_modes
16762                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16763 3D2D           8A47         07            mov	al,7[bx]
16764 3D30           30E4                       xor	ah,ah
16765 3D32           89C3                       mov	bx,ax
16766                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16767 3D34           8A87       029B            mov	al,_dac_regs[bx]
16768 3D38           30E4                       xor	ah,ah
16769 3D3A           3B46         F6            cmp	ax,-$A[bp]
16770 3D3D           72           5C            jb  	.6E
16771                       00003D3F            .6F:
16772                                           ! 2027       {outb(0x3c9,palette[(i*3)+0]);
16773                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16774 3D3F           8B46         F6            mov	ax,-$A[bp]
16775 3D42           89C2                       mov	dx,ax
16776 3D44           D1E0                       shl	ax,*1
16777 3D46           01D0                       add	ax,dx
16778                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16779                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16780 3D48           0346         FA            add	ax,-6[bp]
16781 3D4B           89C3                       mov	bx,ax
16782                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16783 3D4D           8A07                       mov	al,[bx]
16784 3D4F           30E4                       xor	ah,ah
16785 3D51           50                         push	ax
16786                                           ! Debug: list int = const $3C9 (used reg = )
16787 3D52           B8                   03C9  mov	ax,#$3C9
16788 3D55           50                         push	ax
16789                                           ! Debug: func () void = outb+0 (used reg = )
16790 3D56           E8         4052            call	_outb
16791 3D59           83C4                   04  add	sp,*4
16792                                           !BCC_EOS
16793                                           ! 2028        outb(0x3c9,palette[(i*3)+1]);
16794                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16795 3D5C           8B46         F6            mov	ax,-$A[bp]
16796 3D5F           89C2                       mov	dx,ax
16797 3D61           D1E0                       shl	ax,*1
16798 3D63           01D0                       add	ax,dx
16799                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16800                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16801 3D65           40                         inc	ax
16802 3D66           0346         FA            add	ax,-6[bp]
16803 3D69           89C3                       mov	bx,ax
16804                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16805 3D6B           8A07                       mov	al,[bx]
16806 3D6D           30E4                       xor	ah,ah
16807 3D6F           50                         push	ax
16808                                           ! Debug: list int = const $3C9 (used reg = )
16809 3D70           B8                   03C9  mov	ax,#$3C9
16810 3D73           50                         push	ax
16811                                           ! Debug: func () void = outb+0 (used reg = )
16812 3D74           E8         4034            call	_outb
16813 3D77           83C4                   04  add	sp,*4
16814                                           !BCC_EOS
16815                                           ! 2029        outb(0x3c9,palette[(i*3)+2]);
16816                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16817 3D7A           8B46         F6            mov	ax,-$A[bp]
16818 3D7D           89C2                       mov	dx,ax
16819 3D7F           D1E0                       shl	ax,*1
16820 3D81           01D0                       add	ax,dx
16821                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16822                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16823 3D83           40                         inc	ax
16824 3D84           40                         inc	ax
16825 3D85           0346         FA            add	ax,-6[bp]
16826 3D88           89C3                       mov	bx,ax
16827                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16828 3D8A           8A07                       mov	al,[bx]
16829 3D8C           30E4                       xor	ah,ah
16830 3D8E           50                         push	ax
16831                                           ! Debug: list int = const $3C9 (used reg = )
16832 3D8F           B8                   03C9  mov	ax,#$3C9
16833 3D92           50                         push	ax
16834                                           ! Debug: func () void = outb+0 (used reg = )
16835 3D93           E8         4015            call	_outb
16836 3D96           83C4                   04  add	sp,*4
16837                                           !BCC_EOS
16838                                           ! 2030       }
16839                                           ! 2031      else
16840                                           ! 2032       {outb(0x3c9,0);
16841 3D99           EB           27            jmp .70
16842                       00003D9B            .6E:
16843                                           ! Debug: list int = const 0 (used reg = )
16844 3D9B           31C0                       xor	ax,ax
16845 3D9D           50                         push	ax
16846                                           ! Debug: list int = const $3C9 (used reg = )
16847 3D9E           B8                   03C9  mov	ax,#$3C9
16848 3DA1           50                         push	ax
16849                                           ! Debug: func () void = outb+0 (used reg = )
16850 3DA2           E8         4006            call	_outb
16851 3DA5           83C4                   04  add	sp,*4
16852                                           !BCC_EOS
16853                                           ! 2033        outb(0x3c9,0);
16854                                           ! Debug: list int = const 0 (used reg = )
16855 3DA8           31C0                       xor	ax,ax
16856 3DAA           50                         push	ax
16857                                           ! Debug: list int = const $3C9 (used reg = )
16858 3DAB           B8                   03C9  mov	ax,#$3C9
16859 3DAE           50                         push	ax
16860                                           ! Debug: func () void = outb+0 (used reg = )
16861 3DAF           E8         3FF9            call	_outb
16862 3DB2           83C4                   04  add	sp,*4
16863                                           !BCC_EOS
16864                                           ! 2034        outb(0x3c9,0);
16865                                           ! Debug: list int = const 0 (used reg = )
16866 3DB5           31C0                       xor	ax,ax
16867 3DB7           50                         push	ax
16868                                           ! Debug: list int = const $3C9 (used reg = )
16869 3DB8           B8                   03C9  mov	ax,#$3C9
16870 3DBB           50                         push	ax
16871                                           ! Debug: func () void = outb+0 (used reg = )
16872 3DBC           E8         3FEC            call	_outb
16873 3DBF           83C4                   04  add	sp,*4
16874                                           !BCC_EOS
16875                                           ! 2035       }
16876                                           ! 2036     }
16877                       00003DC2            .70:
16878                                           ! 2037    if((modeset_ctl&0x02)==0x02)
16879                       00003DC2            .6B:
16880                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16881 3DC2           8B46         F6            mov	ax,-$A[bp]
16882 3DC5           40                         inc	ax
16883 3DC6           8946         F6            mov	-$A[bp],ax
16884                       00003DC9            .6C:
16885                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16886 3DC9           8B46         F6            mov	ax,-$A[bp]
16887 3DCC           3D                   0100  cmp	ax,#$100
16888 3DCF         0F82         FF4B            blo 	.6D
16889                       00003DD3            .71:
16890                       00003DD3            .6A:
16891                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16892 3DD3           8A46         EF            mov	al,-$11[bp]
16893 3DD6           24                     02  and	al,*2
16894                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16895 3DD8           3C                     02  cmp	al,*2
16896 3DDA           75           0D            jne 	.72
16897                       00003DDC            .73:
16898                                           ! 2038     {
16899                                           ! 2039      biosfn_perform_gray_scale_summing(0x00, 0x100);
16900                                           ! Debug: list int = const $100 (used reg = )
16901 3DDC           B8                   0100  mov	ax,#$100
16902 3DDF           50                         push	ax
16903                                           ! Debug: list int = const 0 (used reg = )
16904 3DE0           31C0                       xor	ax,ax
16905 3DE2           50                         push	ax
16906                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16907 3DE3           E8         2793            call	_biosfn_perform_gray_scale_summing
16908 3DE6           83C4                   04  add	sp,*4
16909                                           !BCC_EOS
16910                                           ! 2040     }
16911                                           ! 2041   }
16912                       00003DE9            .72:
16913                                           ! 2042  inb(0x3da);
16914                       00003DE9            .61:
16915                                           ! Debug: list int = const $3DA (used reg = )
16916 3DE9           B8                   03DA  mov	ax,#$3DA
16917 3DEC           50                         push	ax
16918                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16919 3DED           E8         3FA5            call	_inb
16920 3DF0           44                         inc	sp
16921 3DF1           44                         inc	sp
16922                                           !BCC_EOS
16923                                           ! 2043  for(i=0;i<=0x13;i++)
16924                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16925 3DF2           31C0                       xor	ax,ax
16926 3DF4           8946         F6            mov	-$A[bp],ax
16927                                           !BCC_EOS
16928                                           !BCC_EOS
16929                                           ! 2044   {outb(0x3c0,i);
16930 3DF7           EB           38            jmp .76
16931                       00003DF9            .77:
16932                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16933 3DF9           FF76         F6            push	-$A[bp]
16934                                           ! Debug: list int = const $3C0 (used reg = )
16935 3DFC           B8                   03C0  mov	ax,#$3C0
16936 3DFF           50                         push	ax
16937                                           ! Debug: func () void = outb+0 (used reg = )
16938 3E00           E8         3FA8            call	_outb
16939 3E03           83C4                   04  add	sp,*4
16940                                           !BCC_EOS
16941                                           ! 2045    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16942                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16943 3E06           8A46         F9            mov	al,-7[bp]
16944 3E09           30E4                       xor	ah,ah
16945 3E0B           B1                     06  mov	cl,*6
16946 3E0D           D3E0                       shl	ax,cl
16947 3E0F           89C3                       mov	bx,ax
16948 3E11           81C3                 029F  add	bx,#_video_param_table
16949                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16950 3E15           8B46         F6            mov	ax,-$A[bp]
16951 3E18           01C3                       add	bx,ax
16952                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16953 3E1A           8A47         23            mov	al,$23[bx]
16954 3E1D           30E4                       xor	ah,ah
16955 3E1F           50                         push	ax
16956                                           ! Debug: list int = const $3C0 (used reg = )
16957 3E20           B8                   03C0  mov	ax,#$3C0
16958 3E23           50                         push	ax
16959                                           ! Debug: func () void = outb+0 (used reg = )
16960 3E24           E8         3F84            call	_outb
16961 3E27           83C4                   04  add	sp,*4
16962                                           !BCC_EOS
16963                                           ! 2046   }
16964                                           ! 2047  outb(0x3c0,0x14);
16965                       00003E2A            .75:
16966                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16967 3E2A           8B46         F6            mov	ax,-$A[bp]
16968 3E2D           40                         inc	ax
16969 3E2E           8946         F6            mov	-$A[bp],ax
16970                       00003E31            .76:
16971                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16972 3E31           8B46         F6            mov	ax,-$A[bp]
16973 3E34           3D                   0013  cmp	ax,*$13
16974 3E37           76           C0            jbe	.77
16975                       00003E39            .78:
16976                       00003E39            .74:
16977                                           ! Debug: list int = const $14 (used reg = )
16978 3E39           B8                   0014  mov	ax,*$14
16979 3E3C           50                         push	ax
16980                                           ! Debug: list int = const $3C0 (used reg = )
16981 3E3D           B8                   03C0  mov	ax,#$3C0
16982 3E40           50                         push	ax
16983                                           ! Debug: func () void = outb+0 (used reg = )
16984 3E41           E8         3F67            call	_outb
16985 3E44           83C4                   04  add	sp,*4
16986                                           !BCC_EOS
16987                                           ! 2048  outb(0x3c0,0x00);
16988                                           ! Debug: list int = const 0 (used reg = )
16989 3E47           31C0                       xor	ax,ax
16990 3E49           50                         push	ax
16991                                           ! Debug: list int = const $3C0 (used reg = )
16992 3E4A           B8                   03C0  mov	ax,#$3C0
16993 3E4D           50                         push	ax
16994                                           ! Debug: func () void = outb+0 (used reg = )
16995 3E4E           E8         3F5A            call	_outb
16996 3E51           83C4                   04  add	sp,*4
16997                                           !BCC_EOS
16998                                           ! 2049  outb(0x3c4,0);
16999                                           ! Debug: list int = const 0 (used reg = )
17000 3E54           31C0                       xor	ax,ax
17001 3E56           50                         push	ax
17002                                           ! Debug: list int = const $3C4 (used reg = )
17003 3E57           B8                   03C4  mov	ax,#$3C4
17004 3E5A           50                         push	ax
17005                                           ! Debug: func () void = outb+0 (used reg = )
17006 3E5B           E8         3F4D            call	_outb
17007 3E5E           83C4                   04  add	sp,*4
17008                                           !BCC_EOS
17009                                           ! 2050  outb(0x3c5,0x03);
17010                                           ! Debug: list int = const 3 (used reg = )
17011 3E61           B8                   0003  mov	ax,*3
17012 3E64           50                         push	ax
17013                                           ! Debug: list int = const $3C5 (used reg = )
17014 3E65           B8                   03C5  mov	ax,#$3C5
17015 3E68           50                         push	ax
17016                                           ! Debug: func () void = outb+0 (used reg = )
17017 3E69           E8         3F3F            call	_outb
17018 3E6C           83C4                   04  add	sp,*4
17019                                           !BCC_EOS
17020                                           ! 2051  for(i=1;i<=4;i++)
17021                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17022 3E6F           B8                   0001  mov	ax,*1
17023 3E72           8946         F6            mov	-$A[bp],ax
17024                                           !BCC_EOS
17025                                           !BCC_EOS
17026                                           ! 2052   {outb(0x3c4,i);
17027 3E75           EB           3F            jmp .7B
17028                       00003E77            .7C:
17029                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17030 3E77           FF76         F6            push	-$A[bp]
17031                                           ! Debug: list int = const $3C4 (used reg = )
17032 3E7A           B8                   03C4  mov	ax,#$3C4
17033 3E7D           50                         push	ax
17034                                           ! Debug: func () void = outb+0 (used reg = )
17035 3E7E           E8         3F2A            call	_outb
17036 3E81           83C4                   04  add	sp,*4
17037                                           !BCC_EOS
17038                                           ! 2053    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17039                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17040 3E84           8B46         F6            mov	ax,-$A[bp]
17041 3E87           48                         dec	ax
17042 3E88           50                         push	ax
17043                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17044 3E89           8A46         F9            mov	al,-7[bp]
17045 3E8C           30E4                       xor	ah,ah
17046 3E8E           B1                     06  mov	cl,*6
17047 3E90           D3E0                       shl	ax,cl
17048 3E92           89C3                       mov	bx,ax
17049 3E94           81C3                 029F  add	bx,#_video_param_table
17050                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17051 3E98           8B46         E8            mov	ax,-$18[bp]
17052 3E9B           01C3                       add	bx,ax
17053 3E9D           44                         inc	sp
17054 3E9E           44                         inc	sp
17055                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17056 3E9F           8A47         05            mov	al,5[bx]
17057 3EA2           30E4                       xor	ah,ah
17058 3EA4           50                         push	ax
17059                                           ! Debug: list int = const $3C5 (used reg = )
17060 3EA5           B8                   03C5  mov	ax,#$3C5
17061 3EA8           50                         push	ax
17062                                           ! Debug: func () void = outb+0 (used reg = )
17063 3EA9           E8         3EFF            call	_outb
17064 3EAC           83C4                   04  add	sp,*4
17065                                           !BCC_EOS
17066                                           ! 2054   }
17067                                           ! 2055  for(i=0;i<=8;i++)
17068                       00003EAF            .7A:
17069                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17070 3EAF           8B46         F6            mov	ax,-$A[bp]
17071 3EB2           40                         inc	ax
17072 3EB3           8946         F6            mov	-$A[bp],ax
17073                       00003EB6            .7B:
17074                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17075 3EB6           8B46         F6            mov	ax,-$A[bp]
17076 3EB9           3D                   0004  cmp	ax,*4
17077 3EBC           76           B9            jbe	.7C
17078                       00003EBE            .7D:
17079                       00003EBE            .79:
17080                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17081 3EBE           31C0                       xor	ax,ax
17082 3EC0           8946         F6            mov	-$A[bp],ax
17083                                           !BCC_EOS
17084                                           !BCC_EOS
17085                                           ! 2056   {outb(0x3ce,i);
17086 3EC3           EB           38            jmp .80
17087                       00003EC5            .81:
17088                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17089 3EC5           FF76         F6            push	-$A[bp]
17090                                           ! Debug: list int = const $3CE (used reg = )
17091 3EC8           B8                   03CE  mov	ax,#$3CE
17092 3ECB           50                         push	ax
17093                                           ! Debug: func () void = outb+0 (used reg = )
17094 3ECC           E8         3EDC            call	_outb
17095 3ECF           83C4                   04  add	sp,*4
17096                                           !BCC_EOS
17097                                           ! 2057    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17098                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17099 3ED2           8A46         F9            mov	al,-7[bp]
17100 3ED5           30E4                       xor	ah,ah
17101 3ED7           B1                     06  mov	cl,*6
17102 3ED9           D3E0                       shl	ax,cl
17103 3EDB           89C3                       mov	bx,ax
17104 3EDD           81C3                 029F  add	bx,#_video_param_table
17105                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17106 3EE1           8B46         F6            mov	ax,-$A[bp]
17107 3EE4           01C3                       add	bx,ax
17108                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17109 3EE6           8A47         37            mov	al,$37[bx]
17110 3EE9           30E4                       xor	ah,ah
17111 3EEB           50                         push	ax
17112                                           ! Debug: list int = const $3CF (used reg = )
17113 3EEC           B8                   03CF  mov	ax,#$3CF
17114 3EEF           50                         push	ax
17115                                           ! Debug: func () void = outb+0 (used reg = )
17116 3EF0           E8         3EB8            call	_outb
17117 3EF3           83C4                   04  add	sp,*4
17118                                           !BCC_EOS
17119                                           ! 2058   }
17120                                           ! 2059  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17121                       00003EF6            .7F:
17122                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17123 3EF6           8B46         F6            mov	ax,-$A[bp]
17124 3EF9           40                         inc	ax
17125 3EFA           8946         F6            mov	-$A[bp],ax
17126                       00003EFD            .80:
17127                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17128 3EFD           8B46         F6            mov	ax,-$A[bp]
17129 3F00           3D                   0008  cmp	ax,*8
17130 3F03           76           C0            jbe	.81
17131                       00003F05            .82:
17132                       00003F05            .7E:
17133                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17134 3F05           8A46         FE            mov	al,-2[bp]
17135 3F08           30E4                       xor	ah,ah
17136 3F0A           B1                     03  mov	cl,*3
17137 3F0C           D3E0                       shl	ax,cl
17138 3F0E           89C3                       mov	bx,ax
17139 3F10           81C3                 020B  add	bx,#_vga_modes
17140                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17141 3F14           8A47         02            mov	al,2[bx]
17142 3F17           3C                     01  cmp	al,*1
17143 3F19           75           05            jne 	.83
17144                       00003F1B            .84:
17145 3F1B           B8                   03B4  mov	ax,#$3B4
17146 3F1E           EB           03            jmp .85
17147                       00003F20            .83:
17148 3F20           B8                   03D4  mov	ax,#$3D4
17149                       00003F23            .85:
17150                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17151 3F23           8946         EA            mov	-$16[bp],ax
17152                                           !BCC_EOS
17153                                           ! 2060  outw(crtc_addr,0x0011);
17154                                           ! Debug: list int = const $11 (used reg = )
17155 3F26           B8                   0011  mov	ax,*$11
17156 3F29           50                         push	ax
17157                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17158 3F2A           FF76         EA            push	-$16[bp]
17159                                           ! Debug: func () void = outw+0 (used reg = )
17160 3F2D           E8         3E8B            call	_outw
17161 3F30           83C4                   04  add	sp,*4
17162                                           !BCC_EOS
17163                                           ! 2061  for(i=0;i<=0x18;i++)
17164                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17165 3F33           31C0                       xor	ax,ax
17166 3F35           8946         F6            mov	-$A[bp],ax
17167                                           !BCC_EOS
17168                                           !BCC_EOS
17169                                           ! 2062   {outb(crtc_addr,i);
17170 3F38           EB           38            jmp .88
17171                       00003F3A            .89:
17172                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17173 3F3A           FF76         F6            push	-$A[bp]
17174                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17175 3F3D           FF76         EA            push	-$16[bp]
17176                                           ! Debug: func () void = outb+0 (used reg = )
17177 3F40           E8         3E68            call	_outb
17178 3F43           83C4                   04  add	sp,*4
17179                                           !BCC_EOS
17180                                           ! 2063    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17181                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17182 3F46           8A46         F9            mov	al,-7[bp]
17183 3F49           30E4                       xor	ah,ah
17184 3F4B           B1                     06  mov	cl,*6
17185 3F4D           D3E0                       shl	ax,cl
17186 3F4F           89C3                       mov	bx,ax
17187 3F51           81C3                 029F  add	bx,#_video_param_table
17188                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17189 3F55           8B46         F6            mov	ax,-$A[bp]
17190 3F58           01C3                       add	bx,ax
17191                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17192 3F5A           8A47         0A            mov	al,$A[bx]
17193 3F5D           30E4                       xor	ah,ah
17194 3F5F           50                         push	ax
17195                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17196 3F60           8B46         EA            mov	ax,-$16[bp]
17197                                           ! Debug: list unsigned int = ax+1 (used reg = )
17198 3F63           40                         inc	ax
17199 3F64           50                         push	ax
17200                                           ! Debug: func () void = outb+0 (used reg = )
17201 3F65           E8         3E43            call	_outb
17202 3F68           83C4                   04  add	sp,*4
17203                                           !BCC_EOS
17204                                           ! 2064   }
17205                                           ! 2065  outb(0x3c2,video_param_table[vpti].miscreg);
17206                       00003F6B            .87:
17207                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17208 3F6B           8B46         F6            mov	ax,-$A[bp]
17209 3F6E           40                         inc	ax
17210 3F6F           8946         F6            mov	-$A[bp],ax
17211                       00003F72            .88:
17212                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17213 3F72           8B46         F6            mov	ax,-$A[bp]
17214 3F75           3D                   0018  cmp	ax,*$18
17215 3F78           76           C0            jbe	.89
17216                       00003F7A            .8A:
17217                       00003F7A            .86:
17218                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17219 3F7A           8A46         F9            mov	al,-7[bp]
17220 3F7D           30E4                       xor	ah,ah
17221 3F7F           B1                     06  mov	cl,*6
17222 3F81           D3E0                       shl	ax,cl
17223 3F83           89C3                       mov	bx,ax
17224 3F85           81C3                 029F  add	bx,#_video_param_table
17225                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17226 3F89           8A47         09            mov	al,9[bx]
17227 3F8C           30E4                       xor	ah,ah
17228 3F8E           50                         push	ax
17229                                           ! Debug: list int = const $3C2 (used reg = )
17230 3F8F           B8                   03C2  mov	ax,#$3C2
17231 3F92           50                         push	ax
17232                                           ! Debug: func () void = outb+0 (used reg = )
17233 3F93           E8         3E15            call	_outb
17234 3F96           83C4                   04  add	sp,*4
17235                                           !BCC_EOS
17236                                           ! 2066  o
17237                                           ! 2066 utb(0x3c0,0x20);
17238                                           ! Debug: list int = const $20 (used reg = )
17239 3F99           B8                   0020  mov	ax,*$20
17240 3F9C           50                         push	ax
17241                                           ! Debug: list int = const $3C0 (used reg = )
17242 3F9D           B8                   03C0  mov	ax,#$3C0
17243 3FA0           50                         push	ax
17244                                           ! Debug: func () void = outb+0 (used reg = )
17245 3FA1           E8         3E07            call	_outb
17246 3FA4           83C4                   04  add	sp,*4
17247                                           !BCC_EOS
17248                                           ! 2067  inb(0x3da);
17249                                           ! Debug: list int = const $3DA (used reg = )
17250 3FA7           B8                   03DA  mov	ax,#$3DA
17251 3FAA           50                         push	ax
17252                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17253 3FAB           E8         3DE7            call	_inb
17254 3FAE           44                         inc	sp
17255 3FAF           44                         inc	sp
17256                                           !BCC_EOS
17257                                           ! 2068  if(noclearmem==0x00)
17258                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17259 3FB0           8A46         FF            mov	al,-1[bp]
17260 3FB3           84C0                       test	al,al
17261 3FB5         0F85         00C1            bne 	.8B
17262                       00003FB9            .8C:
17263                                           ! 2069   {
17264                                           ! 2070    if(vga_modes[line].class==0x00)
17265                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17266 3FB9           8A46         FE            mov	al,-2[bp]
17267 3FBC           30E4                       xor	ah,ah
17268 3FBE           B1                     03  mov	cl,*3
17269 3FC0           D3E0                       shl	ax,cl
17270 3FC2           89C3                       mov	bx,ax
17271 3FC4           81C3                 020B  add	bx,#_vga_modes
17272                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17273 3FC8           8A47         01            mov	al,1[bx]
17274 3FCB           84C0                       test	al,al
17275 3FCD           75           26            jne 	.8D
17276                       00003FCF            .8E:
17277                                           ! 2071     {
17278                                           ! 2072      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17279                                           ! Debug: list int = const $4000 (used reg = )
17280 3FCF           B8                   4000  mov	ax,#$4000
17281 3FD2           50                         push	ax
17282                                           ! Debug: list int = const $720 (used reg = )
17283 3FD3           B8                   0720  mov	ax,#$720
17284 3FD6           50                         push	ax
17285                                           ! Debug: list int = const 0 (used reg = )
17286 3FD7           31C0                       xor	ax,ax
17287 3FD9           50                         push	ax
17288                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17289 3FDA           8A46         FE            mov	al,-2[bp]
17290 3FDD           30E4                       xor	ah,ah
17291 3FDF           B1                     03  mov	cl,*3
17292 3FE1           D3E0                       shl	ax,cl
17293 3FE3           89C3                       mov	bx,ax
17294 3FE5           81C3                 020B  add	bx,#_vga_modes
17295                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17296 3FE9           FF77         04            push	4[bx]
17297                                           ! Debug: func () void = memsetw+0 (used reg = )
17298 3FEC           E8         3CCB            call	_memsetw
17299 3FEF           83C4                   08  add	sp,*8
17300                                           !BCC_EOS
17301                                           ! 2073     }
17302                                           ! 2074    else
17303                                           ! 2075     {
17304 3FF2           E9         0085            br 	.8F
17305                       00003FF5            .8D:
17306                                           ! 2076      if(mode<0x0d)
17307                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17308 3FF5           8A46         04            mov	al,4[bp]
17309 3FF8           3C                     0D  cmp	al,*$D
17310 3FFA           73           24            jae 	.90
17311                       00003FFC            .91:
17312                                           ! 2077       {
17313                                           ! 2078        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17314                                           ! Debug: list int = const $4000 (used reg = )
17315 3FFC           B8                   4000  mov	ax,#$4000
17316 3FFF           50                         push	ax
17317                                           ! Debug: list int = const 0 (used reg = )
17318 4000           31C0                       xor	ax,ax
17319 4002           50                         push	ax
17320                                           ! Debug: list int = const 0 (used reg = )
17321 4003           31C0                       xor	ax,ax
17322 4005           50                         push	ax
17323                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17324 4006           8A46         FE            mov	al,-2[bp]
17325 4009           30E4                       xor	ah,ah
17326 400B           B1                     03  mov	cl,*3
17327 400D           D3E0                       shl	ax,cl
17328 400F           89C3                       mov	bx,ax
17329 4011           81C3                 020B  add	bx,#_vga_modes
17330                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17331 4015           FF77         04            push	4[bx]
17332                                           ! Debug: func () void = memsetw+0 (used reg = )
17333 4018           E8         3C9F            call	_memsetw
17334 401B           83C4                   08  add	sp,*8
17335                                           !BCC_EOS
17336                                           ! 2079       }
17337                                           ! 2080      else
17338                                           ! 2081       {
17339 401E           EB           5A            jmp .92
17340                       00004020            .90:
17341                                           ! 2082        outb( 0x3c4, 0x02 );
17342                                           ! Debug: list int = const 2 (used reg = )
17343 4020           B8                   0002  mov	ax,*2
17344 4023           50                         push	ax
17345                                           ! Debug: list int = const $3C4 (used reg = )
17346 4024           B8                   03C4  mov	ax,#$3C4
17347 4027           50                         push	ax
17348                                           ! Debug: func () void = outb+0 (used reg = )
17349 4028           E8         3D80            call	_outb
17350 402B           83C4                   04  add	sp,*4
17351                                           !BCC_EOS
17352                                           ! 2083        mmask = inb( 0x3c5 );
17353                                           ! Debug: list int = const $3C5 (used reg = )
17354 402E           B8                   03C5  mov	ax,#$3C5
17355 4031           50                         push	ax
17356                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17357 4032           E8         3D60            call	_inb
17358 4035           44                         inc	sp
17359 4036           44                         inc	sp
17360                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17361 4037           8846         FD            mov	-3[bp],al
17362                                           !BCC_EOS
17363                                           ! 2084        outb( 0x3c5, 0x0f );
17364                                           ! Debug: list int = const $F (used reg = )
17365 403A           B8                   000F  mov	ax,*$F
17366 403D           50                         push	ax
17367                                           ! Debug: list int = const $3C5 (used reg = )
17368 403E           B8                   03C5  mov	ax,#$3C5
17369 4041           50                         push	ax
17370                                           ! Debug: func () void = outb+0 (used reg = )
17371 4042           E8         3D66            call	_outb
17372 4045           83C4                   04  add	sp,*4
17373                                           !BCC_EOS
17374                                           ! 2085        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17375                                           ! Debug: list unsigned int = const $8000 (used reg = )
17376 4048           B8                   8000  mov	ax,#$8000
17377 404B           50                         push	ax
17378                                           ! Debug: list int = const 0 (used reg = )
17379 404C           31C0                       xor	ax,ax
17380 404E           50                         push	ax
17381                                           ! Debug: list int = const 0 (used reg = )
17382 404F           31C0                       xor	ax,ax
17383 4051           50                         push	ax
17384                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17385 4052           8A46         FE            mov	al,-2[bp]
17386 4055           30E4                       xor	ah,ah
17387 4057           B1                     03  mov	cl,*3
17388 4059           D3E0                       shl	ax,cl
17389 405B           89C3                       mov	bx,ax
17390 405D           81C3                 020B  add	bx,#_vga_modes
17391                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17392 4061           FF77         04            push	4[bx]
17393                                           ! Debug: func () void = memsetw+0 (used reg = )
17394 4064           E8         3C53            call	_memsetw
17395 4067           83C4                   08  add	sp,*8
17396                                           !BCC_EOS
17397                                           ! 2086        outb( 0x3c5, mmask );
17398                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17399 406A           8A46         FD            mov	al,-3[bp]
17400 406D           30E4                       xor	ah,ah
17401 406F           50                         push	ax
17402                                           ! Debug: list int = const $3C5 (used reg = )
17403 4070           B8                   03C5  mov	ax,#$3C5
17404 4073           50                         push	ax
17405                                           ! Debug: func () void = outb+0 (used reg = )
17406 4074           E8         3D34            call	_outb
17407 4077           83C4                   04  add	sp,*4
17408                                           !BCC_EOS
17409                                           ! 2087       }
17410                                           ! 2088     }
17411                       0000407A            .92:
17412                                           ! 2089   }
17413                       0000407A            .8F:
17414                                           ! 2090  write_byte(0x40,0x49,mode);
17415                       0000407A            .8B:
17416                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17417 407A           8A46         04            mov	al,4[bp]
17418 407D           30E4                       xor	ah,ah
17419 407F           50                         push	ax
17420                                           ! Debug: list int = const $49 (used reg = )
17421 4080           B8                   0049  mov	ax,*$49
17422 4083           50                         push	ax
17423                                           ! Debug: list int = const $40 (used reg = )
17424 4084           B8                   0040  mov	ax,*$40
17425 4087           50                         push	ax
17426                                           ! Debug: func () void = write_byte+0 (used reg = )
17427 4088           E8         3CDA            call	_write_byte
17428 408B           83C4                   06  add	sp,*6
17429                                           !BCC_EOS
17430                                           ! 2091  write_word(0x40,0x4A,twidth);
17431                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17432 408E           FF76         F4            push	-$C[bp]
17433                                           ! Debug: list int = const $4A (used reg = )
17434 4091           B8                   004A  mov	ax,*$4A
17435 4094           50                         push	ax
17436                                           ! Debug: list int = const $40 (used reg = )
17437 4095           B8                   0040  mov	ax,*$40
17438 4098           50                         push	ax
17439                                           ! Debug: func () void = write_word+0 (used reg = )
17440 4099           E8         3CE1            call	_write_word
17441 409C           83C4                   06  add	sp,*6
17442                                           !BCC_EOS
17443                                           ! 2092  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17444                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17445 409F           8A46         F9            mov	al,-7[bp]
17446 40A2           30E4                       xor	ah,ah
17447 40A4           B1                     06  mov	cl,*6
17448 40A6           D3E0                       shl	ax,cl
17449 40A8           89C3                       mov	bx,ax
17450 40AA           81C3                 029F  add	bx,#_video_param_table
17451                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17452                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17453                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17454 40AE           FF77         03            push	3[bx]
17455                                           ! Debug: list int = const $4C (used reg = )
17456 40B1           B8                   004C  mov	ax,*$4C
17457 40B4           50                         push	ax
17458                                           ! Debug: list int = const $40 (used reg = )
17459 40B5           B8                   0040  mov	ax,*$40
17460 40B8           50                         push	ax
17461                                           ! Debug: func () void = write_word+0 (used reg = )
17462 40B9           E8         3CC1            call	_write_word
17463 40BC           83C4                   06  add	sp,*6
17464                                           !BCC_EOS
17465                                           ! 2093  write_word(0x40,0x63,crtc_addr);
17466                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17467 40BF           FF76         EA            push	-$16[bp]
17468                                           ! Debug: list int = const $63 (used reg = )
17469 40C2           B8                   0063  mov	ax,*$63
17470 40C5           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 40C6           B8                   0040  mov	ax,*$40
17473 40C9           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 40CA           E8         3CB0            call	_write_word
17476 40CD           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2094  write_byte(0x40,0x84,theightm1);
17479                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17480 40D0           FF76         F2            push	-$E[bp]
17481                                           ! Debug: list int = const $84 (used reg = )
17482 40D3           B8                   0084  mov	ax,#$84
17483 40D6           50                         push	ax
17484                                           ! Debug: list int = const $40 (used reg = )
17485 40D7           B8                   0040  mov	ax,*$40
17486 40DA           50                         push	ax
17487                                           ! Debug: func () void = write_byte+0 (used reg = )
17488 40DB           E8         3C87            call	_write_byte
17489 40DE           83C4                   06  add	sp,*6
17490                                           !BCC_EOS
17491                                           ! 2095  write_word(0x40,0x85,cheight);
17492                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17493 40E1           FF76         F0            push	-$10[bp]
17494                                           ! Debug: list int = const $85 (used reg = )
17495 40E4           B8                   0085  mov	ax,#$85
17496 40E7           50                         push	ax
17497                                           ! Debug: list int = const $40 (used reg = )
17498 40E8           B8                   0040  mov	ax,*$40
17499 40EB           50                         push	ax
17500                                           ! Debug: func () void = write_word+0 (used reg = )
17501 40EC           E8         3C8E            call	_write_word
17502 40EF           83C4                   06  add	sp,*6
17503                                           !BCC_EOS
17504                                           ! 2096  write_byte(0x40,0x87,(0x60|noclearmem));
17505                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17506                                           ! Debug: expression subtree swapping
17507 40F2           8A46         FF            mov	al,-1[bp]
17508 40F5           0C                     60  or	al,*$60
17509                                           ! Debug: list unsigned char = al+0 (used reg = )
17510 40F7           30E4                       xor	ah,ah
17511 40F9           50                         push	ax
17512                                           ! Debug: list int = const $87 (used reg = )
17513 40FA           B8                   0087  mov	ax,#$87
17514 40FD           50                         push	ax
17515                                           ! Debug: list int = const $40 (used reg = )
17516 40FE           B8                   0040  mov	ax,*$40
17517 4101           50                         push	ax
17518                                           ! Debug: func () void = write_byte+0 (used reg = )
17519 4102           E8         3C60            call	_write_byte
17520 4105           83C4                   06  add	sp,*6
17521                                           !BCC_EOS
17522                                           ! 2097  write_byte(0x40,0x88,0xF9);
17523                                           ! Debug: list int = const $F9 (used reg = )
17524 4108           B8                   00F9  mov	ax,#$F9
17525 410B           50                         push	ax
17526                                           ! Debug: list int = const $88 (used reg = )
17527 410C           B8                   0088  mov	ax,#$88
17528 410F           50                         push	ax
17529                                           ! Debug: list int = const $40 (used reg = )
17530 4110           B8                   0040  mov	ax,*$40
17531 4113           50                         push	ax
17532                                           ! Debug: func () void = write_byte+0 (used reg = )
17533 4114           E8         3C4E            call	_write_byte
17534 4117           83C4                   06  add	sp,*6
17535                                           !BCC_EOS
17536                                           ! 2098  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17537                                           ! Debug: list int = const $89 (used reg = )
17538 411A           B8                   0089  mov	ax,#$89
17539 411D           50                         push	ax
17540                                           ! Debug: list int = const $40 (used reg = )
17541 411E           B8                   0040  mov	ax,*$40
17542 4121           50                         push	ax
17543                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17544 4122           E8         3C1A            call	_read_byte
17545 4125           83C4                   04  add	sp,*4
17546                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17547 4128           24                     7F  and	al,*$7F
17548                                           ! Debug: list unsigned char = al+0 (used reg = )
17549 412A           30E4                       xor	ah,ah
17550 412C           50                         push	ax
17551                                           ! Debug: list int = const $89 (used reg = )
17552 412D           B8                   0089  mov	ax,#$89
17553 4130           50                         push	ax
17554                                           ! Debug: list int = const $40 (used reg = )
17555 4131           B8                   0040  mov	ax,*$40
17556 4134           50                         push	ax
17557                                           ! Debug: func () void = write_byte+0 (used reg = )
17558 4135           E8         3C2D            call	_write_byte
17559 4138           83C4                   06  add	sp,*6
17560                                           !BCC_EOS
17561                                           ! 2099  write_byte(0x40,0x8A,0x08);
17562                                           ! Debug: list int = const 8 (used reg = )
17563 413B           B8                   0008  mov	ax,*8
17564 413E           50                         push	ax
17565                                           ! Debug: list int = const $8A (used reg = )
17566 413F           B8                   008A  mov	ax,#$8A
17567 4142           50                         push	ax
17568                                           ! Debug: list int = const $40 (used reg = )
17569 4143           B8                   0040  mov	ax,*$40
17570 4146           50                         push	ax
17571                                           ! Debug: func () void = write_byte+0 (used reg = )
17572 4147           E8         3C1B            call	_write_byte
17573 414A           83C4                   06  add	sp,*6
17574                                           !BCC_EOS
17575                                           ! 2100  write_word(0x40,0xA8, video_save_pointer_table);
17576                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17577 414D           BB                   35D4  mov	bx,#_video_save_pointer_table
17578 4150           53                         push	bx
17579                                           ! Debug: list int = const $A8 (used reg = )
17580 4151           B8                   00A8  mov	ax,#$A8
17581 4154           50                         push	ax
17582                                           ! Debug: list int = const $40 (used reg = )
17583 4155           B8                   0040  mov	ax,*$40
17584 4158           50                         push	ax
17585                                           ! Debug: func () void = write_word+0 (used reg = )
17586 4159           E8         3C21            call	_write_word
17587 415C           83C4                   06  add	sp,*6
17588                                           !BCC_EOS
17589                                           ! 2101  write_word(0x40,0xA8 +2, 0xc000);
17590                                           ! Debug: list unsigned int = const $C000 (used reg = )
17591 415F           B8                   C000  mov	ax,#$C000
17592 4162           50                         push	ax
17593                                           ! Debug: list int = const $AA (used reg = )
17594 4163           B8                   00AA  mov	ax,#$AA
17595 4166           50                         push	ax
17596                                           ! Debug: list int = const $40 (used reg = )
17597 4167           B8                   0040  mov	ax,*$40
17598 416A           50                         push	ax
17599                                           ! Debug: func () void = write_word+0 (used reg = )
17600 416B           E8         3C0F            call	_write_word
17601 416E           83C4                   06  add	sp,*6
17602                                           !BCC_EOS
17603                                           ! 2102  write_byte(0x40,0x65,0x00);
17604                                           ! Debug: list int = const 0 (used reg = )
17605 4171           31C0                       xor	ax,ax
17606 4173           50                         push	ax
17607                                           ! Debug: list int = const $65 (used reg = )
17608 4174           B8                   0065  mov	ax,*$65
17609 4177           50                         push	ax
17610                                           ! Debug: list int = const $40 (used reg = )
17611 4178           B8                   0040  mov	ax,*$40
17612 417B           50                         push	ax
17613                                           ! Debug: func () void = write_byte+0 (used reg = )
17614 417C           E8         3BE6            call	_write_byte
17615 417F           83C4                   06  add	sp,*6
17616                                           !BCC_EOS
17617                                           ! 2103  write_byte(0x40,0x66,0x00);
17618                                           ! Debug: list int = const 0 (used reg = )
17619 4182           31C0                       xor	ax,ax
17620 4184           50                         push	ax
17621                                           ! Debug: list int = const $66 (used reg = )
17622 4185           B8                   0066  mov	ax,*$66
17623 4188           50                         push	ax
17624                                           ! Debug: list int = const $40 (used reg = )
17625 4189           B8                   0040  mov	ax,*$40
17626 418C           50                         push	ax
17627                                           ! Debug: func () void = write_byte+0 (used reg = )
17628 418D           E8         3BD5            call	_write_byte
17629 4190           83C4                   06  add	sp,*6
17630                                           !BCC_EOS
17631                                           ! 2104  if(vga_modes[line].class==0x00)
17632                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17633 4193           8A46         FE            mov	al,-2[bp]
17634 4196           30E4                       xor	ah,ah
17635 4198           B1                     03  mov	cl,*3
17636 419A           D3E0                       shl	ax,cl
17637 419C           89C3                       mov	bx,ax
17638 419E           81C3                 020B  add	bx,#_vga_modes
17639                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17640 41A2           8A47         01            mov	al,1[bx]
17641 41A5           84C0                       test	al,al
17642 41A7           75           0E            jne 	.93
17643                       000041A9            .94:
17644                                           ! 2105   {
17645                                           ! 2106    biosfn_set_cursor_shape(0x06,0x07);
17646                                           ! Debug: list int = const 7 (used reg = )
17647 41A9           B8                   0007  mov	ax,*7
17648 41AC           50                         push	ax
17649                                           ! Debug: list int = const 6 (used reg = )
17650 41AD           B8                   0006  mov	ax,*6
17651 41B0           50                         push	ax
17652                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17653 41B1           E8         00BA            call	_biosfn_set_cursor_shape
17654 41B4           83C4                   04  add	sp,*4
17655                                           !BCC_EOS
17656                                           ! 2107   }
17657                                           ! 2108  for(i=0;i<8;i++)
17658                       000041B7            .93:
17659                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17660 41B7           31C0                       xor	ax,ax
17661 41B9           8946         F6            mov	-$A[bp],ax
17662                                           !BCC_EOS
17663                                           !BCC_EOS
17664                                           ! 2109   biosfn_set_cursor_pos(i,0x0000);
17665 41BC           EB           13            jmp .97
17666                       000041BE            .98:
17667                                           ! Debug: list int = const 0 (used reg = )
17668 41BE           31C0                       xor	ax,ax
17669 41C0           50                         push	ax
17670                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17671 41C1           FF76         F6            push	-$A[bp]
17672                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17673 41C4           E8         01C2            call	_biosfn_set_cursor_pos
17674 41C7           83C4                   04  add	sp,*4
17675                                           !BCC_EOS
17676                                           ! 2110  biosfn_set_active_page(0x00);
17677                       000041CA            .96:
17678                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17679 41CA           8B46         F6            mov	ax,-$A[bp]
17680 41CD           40                         inc	ax
17681 41CE           8946         F6            mov	-$A[bp],ax
17682                       000041D1            .97:
17683                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17684 41D1           8B46         F6            mov	ax,-$A[bp]
17685 41D4           3D                   0008  cmp	ax,*8
17686 41D7           72           E5            jb 	.98
17687                       000041D9            .99:
17688                       000041D9            .95:
17689                                           ! Debug: list int = const 0 (used reg = )
17690 41D9           31C0                       xor	ax,ax
17691 41DB           50                         push	ax
17692                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17693 41DC           E8         031F            call	_biosfn_set_active_page
17694 41DF           44                         inc	sp
17695 41E0           44                         inc	sp
17696                                           !BCC_EOS
17697                                           ! 2111  if(vga_modes[line].class==0x00)
17698                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17699 41E1           8A46         FE            mov	al,-2[bp]
17700 41E4           30E4                       xor	ah,ah
17701 41E6           B1                     03  mov	cl,*3
17702 41E8           D3E0                       shl	ax,cl
17703 41EA           89C3                       mov	bx,ax
17704 41EC           81C3                 020B  add	bx,#_vga_modes
17705                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17706 41F0           8A47         01            mov	al,1[bx]
17707 41F3           84C0                       test	al,al
17708 41F5           75           0E            jne 	.9A
17709                       000041F7            .9B:
17710                                           ! 2112   {
17711                                           ! 2113 #asm
17712                                           !BCC_EOS
17713                                           !BCC_ASM
17714                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17715                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17716                       00000008            _biosfn_set_video_mode.theightm1	set	8
17717                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17718                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17719                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17720                       00000014            _biosfn_set_video_mode.line	set	$14
17721                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17722                       00000006            _biosfn_set_video_mode.cheight	set	6
17723                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17724                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17725                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17726                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17727                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17728                       0000000C            _biosfn_set_video_mode.i	set	$C
17729                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17730                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17731                       00000004            .biosfn_set_video_mode.mode	set	4
17732                       00000010            _biosfn_set_video_mode.palette	set	$10
17733                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17734                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17735                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17736                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17737                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17738                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17739                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17740                       00000013            _biosfn_set_video_mode.mmask	set	$13
17741                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17742                                             ;; copy and activate 8x16 font
17743 41F7           B8                   1104    mov ax, #0x1104
17744 41FA           B3                     00    mov bl, #0x00
17745 41FC           CD                     10    int #0x10
17746 41FE           B8                   1103    mov ax, #0x1103
17747 4201           B3                     00    mov bl, #0x00
17748 4203           CD                     10    int #0x10
17749                                           ! 2121 endasm
17750                                           !BCC_ENDASM
17751                                           !BCC_EOS
17752                                           ! 2122   }
17753                                           ! 2123 #asm
17754                       00004205            .9A:
17755                                           !BCC_EOS
17756                                           !BCC_ASM
17757                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17758                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17759                       00000008            _biosfn_set_video_mode.theightm1	set	8
17760                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17761                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17762                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17763                       00000014            _biosfn_set_video_mode.line	set	$14
17764                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17765                       00000006            _biosfn_set_video_mode.cheight	set	6
17766                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17767                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17768                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17769                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17770                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17771                       0000000C            _biosfn_set_video_mode.i	set	$C
17772                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17773                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17774                       00000004            .biosfn_set_video_mode.mode	set	4
17775                       00000010            _biosfn_set_video_mode.palette	set	$10
17776                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17777                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17778                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17779                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17780                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17781                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17782                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17783                       00000013            _biosfn_set_video_mode.mmask	set	$13
17784                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17785                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4205           1E                           push ds
 +a   4206           31C0                         xor ax, ax
 +a   4208           8ED8                         mov ds, ax
 +a   420A           B8                   136F    mov ax,  #_vgafont8+128*8
 +a   420D           A3         007C              mov 0x1f*4, ax
 +a   4210           B8                   C000    mov ax,  #0xC000
 +a   4213           A3         007E              mov 0x1f*4+2, ax
 +a   4216           1F                           pop ds
17786                                           ! 2125 endasm
17787                                           !BCC_ENDASM
17788                                           !BCC_EOS
17789                                           ! 2126   switch(cheight)
17790 4217           8B46         F0            mov	ax,-$10[bp]
17791                                           ! 2127    {case 8:
17792 421A           E9         003E            br 	.9E
17793                                           ! 2128 #asm
17794                       0000421D            .9F:
17795                                           !BCC_EOS
17796                                           !BCC_ASM
17797                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17798                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17799                       00000008            _biosfn_set_video_mode.theightm1	set	8
17800                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17801                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17802                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17803                       00000014            _biosfn_set_video_mode.line	set	$14
17804                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17805                       00000006            _biosfn_set_video_mode.cheight	set	6
17806                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17807                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17808                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17809                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17810                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17811                       0000000C            _biosfn_set_video_mode.i	set	$C
17812                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17813                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17814                       00000004            .biosfn_set_video_mode.mode	set	4
17815                       00000010            _biosfn_set_video_mode.palette	set	$10
17816                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17817                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17818                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17819                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17820                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17821                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17822                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17823                       00000013            _biosfn_set_video_mode.mmask	set	$13
17824                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17825                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   421D           1E                           push ds
 +a   421E           31C0                         xor ax, ax
 +a   4220           8ED8                         mov ds, ax
 +a   4222           B8                   0F6F    mov ax,  #_vgafont8
 +a   4225           A3         010C              mov 0x43*4, ax
 +a   4228           B8                   C000    mov ax,  #0xC000
 +a   422B           A3         010E              mov 0x43*4+2, ax
 +a   422E           1F                           pop ds
17826                                           ! 2130 endasm
17827                                           !BCC_ENDASM
17828                                           !BCC_EOS
17829                                           ! 2131      break;
17830 422F           EB           39            jmp .9C
17831                                           !BCC_EOS
17832                                           ! 2132     case 14:
17833                                           ! 2133 #asm
17834                       00004231            .A0:
17835                                           !BCC_EOS
17836                                           !BCC_ASM
17837                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17838                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17839                       00000008            _biosfn_set_video_mode.theightm1	set	8
17840                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17841                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17842                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17843                       00000014            _biosfn_set_video_mode.line	set	$14
17844                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17845                       00000006            _biosfn_set_video_mode.cheight	set	6
17846                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17847                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17848                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17849                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17850                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17851                       0000000C            _biosfn_set_video_mode.i	set	$C
17852                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17853                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17854                       00000004            .biosfn_set_video_mode.mode	set	4
17855                       00000010            _biosfn_set_video_mode.palette	set	$10
17856                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17857                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17858                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17859                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17860                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17861                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17862                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17863                       00000013            _biosfn_set_video_mode.mmask	set	$13
17864                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17865                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4231           1E                           push ds
 +a   4232           31C0                         xor ax, ax
 +a   4234           8ED8                         mov ds, ax
 +a   4236           B8                   176F    mov ax,  #_vgafont14
 +a   4239           A3         010C              mov 0x43*4, ax
 +a   423C           B8                   C000    mov ax,  #0xC000
 +a   423F           A3         010E              mov 0x43*4+2, ax
 +a   4242           1F                           pop ds
17866                                           ! 2135 endasm
17867                                           !BCC_ENDASM
17868                                           !BCC_EOS
17869                                           ! 2136      break;
17870 4243           EB           25            jmp .9C
17871                                           !BCC_EOS
17872                                           ! 2137     case 16:
17873                                           ! 2138 #asm
17874                       00004245            .A1:
17875                                           !BCC_EOS
17876                                           !BCC_ASM
17877                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17878                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17879                       00000008            _biosfn_set_video_mode.theightm1	set	8
17880                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17881                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17882                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17883                       00000014            _biosfn_set_video_mode.line	set	$14
17884                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17885                       00000006            _biosfn_set_video_mode.cheight	set	6
17886                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17887                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17888                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17889                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17890                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17891                       0000000C            _biosfn_set_video_mode.i	set	$C
17892                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17893                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17894                       00000004            .biosfn_set_video_mode.mode	set	4
17895                       00000010            _biosfn_set_video_mode.palette	set	$10
17896                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17897                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17898                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17899                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17900                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17901                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17902                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17903                       00000013            _biosfn_set_video_mode.mmask	set	$13
17904                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17905                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4245           1E                           push ds
 +a   4246           31C0                         xor ax, ax
 +a   4248           8ED8                         mov ds, ax
 +a   424A           B8                   256F    mov ax,  #_vgafont16
 +a   424D           A3         010C              mov 0x43*4, ax
 +a   4250           B8                   C000    mov ax,  #0xC000
 +a   4253           A3         010E              mov 0x43*4+2, ax
 +a   4256           1F                           pop ds
17906                                           ! 2140 endasm
17907                                           !BCC_ENDASM
17908                                           !BCC_EOS
17909                                           ! 2141      break;
17910 4257           EB           11            jmp .9C
17911                                           !BCC_EOS
17912                                           ! 2142    }
17913                                           ! 2143 }
17914 4259           EB           0F            jmp .9C
17915                       0000425B            .9E:
17916 425B           2D                   0008  sub	ax,*8
17917 425E           74           BD            je 	.9F
17918 4260           2D                   0006  sub	ax,*6
17919 4263           74           CC            je 	.A0
17920 4265           2D                   0002  sub	ax,*2
17921 4268           74           DB            je 	.A1
17922                       0000426A            .9C:
17923                       FFFFFFE8            ..FFFD	=	-$18
17924 426A           89EC                       mov	sp,bp
17925 426C           5D                         pop	bp
17926 426D           C3                         ret
17927                                           ! 2144 static void biosfn_set_cursor_shape (CH,CL)
17928                                           ! Register BX used in function biosfn_set_video_mode
17929                                           ! 2145 Bit8u CH;Bit8u CL;
17930                       0000426E            _biosfn_set_cursor_shape:
17931                                           !BCC_EOS
17932                                           !BCC_EOS
17933                                           ! 2146 {Bit16u cheight,curs,crtc_addr;
17934                                           !BCC_EOS
17935                                           ! 2147  Bit8u modeset_ctl;
17936                                           !BCC_EOS
17937                                           ! 2148  CH&=0x3f;
17938 426E           55                         push	bp
17939 426F           89E5                       mov	bp,sp
17940 4271           83C4                   F8  add	sp,*-8
17941                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17942 4274           8A46         04            mov	al,4[bp]
17943 4277           24                     3F  and	al,*$3F
17944 4279           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2149  CL&=0x1f;
17947                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17948 427C           8A46         06            mov	al,6[bp]
17949 427F           24                     1F  and	al,*$1F
17950 4281           8846         06            mov	6[bp],al
17951                                           !BCC_EOS
17952                                           ! 2150  curs=(CH<<8)+CL;
17953                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17954 4284           8A46         04            mov	al,4[bp]
17955 4287           30E4                       xor	ah,ah
17956 4289           88C4                       mov	ah,al
17957 428B           30C0                       xor	al,al
17958                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17959 428D           0246         06            add	al,6[bp]
17960 4290           80D4                   00  adc	ah,*0
17961                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17962 4293           8946         FC            mov	-4[bp],ax
17963                                           !BCC_EOS
17964                                           ! 2151  write_word(0x40,0x60,curs);
17965                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17966 4296           FF76         FC            push	-4[bp]
17967                                           ! Debug: list int = const $60 (used reg = )
17968 4299           B8                   0060  mov	ax,*$60
17969 429C           50                         push	ax
17970                                           ! Debug: list int = const $40 (used reg = )
17971 429D           B8                   0040  mov	ax,*$40
17972 42A0           50                         push	ax
17973                                           ! Debug: func () void = write_word+0 (used reg = )
17974 42A1           E8         3AD9            call	_write_word
17975 42A4           83C4                   06  add	sp,*6
17976                                           !BCC_EOS
17977                                           ! 2152  modeset_ctl=read_byte(0x40,0x89);
17978                                           ! Debug: list int = const $89 (used reg = )
17979 42A7           B8                   0089  mov	ax,#$89
17980 42AA           50                         push	ax
17981                                           ! Debug: list int = const $40 (used reg = )
17982 42AB           B8                   0040  mov	ax,*$40
17983 42AE           50                         push	ax
17984                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17985 42AF           E8         3A8D            call	_read_byte
17986 42B2           83C4                   04  add	sp,*4
17987                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17988 42B5           8846         F9            mov	-7[bp],al
17989                                           !BCC_EOS
17990                                           ! 2153  cheight = read_word(0x40,0x85);
17991                                           ! Debug: list int = const $85 (used reg = )
17992 42B8           B8                   0085  mov	ax,#$85
17993 42BB           50                         push	ax
17994                                           ! Debug: list int = const $40 (used reg = )
17995 42BC           B8                   0040  mov	ax,*$40
17996 42BF           50                         push	ax
17997                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17998 42C0           E8         3A8F            call	_read_word
17999 42C3           83C4                   04  add	sp,*4
18000                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
18001 42C6           8946         FE            mov	-2[bp],ax
18002                                           !BCC_EOS
18003                                           ! 2154  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
18004                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18005 42C9           8A46         F9            mov	al,-7[bp]
18006 42CC           24                     01  and	al,*1
18007 42CE           84C0                       test	al,al
18008 42D0           74           66            je  	.A2
18009                       000042D2            .A6:
18010                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
18011 42D2           8B46         FE            mov	ax,-2[bp]
18012 42D5           3D                   0008  cmp	ax,*8
18013 42D8           76           5E            jbe 	.A2
18014                       000042DA            .A5:
18015                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
18016 42DA           8A46         06            mov	al,6[bp]
18017 42DD           3C                     08  cmp	al,*8
18018 42DF           73           57            jae 	.A2
18019                       000042E1            .A4:
18020                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
18021 42E1           8A46         04            mov	al,4[bp]
18022 42E4           3C                     20  cmp	al,*$20
18023 42E6           73           50            jae 	.A2
18024                       000042E8            .A3:
18025                                           ! 2155   {
18026                                           ! 2156    if(CL!=(CH+1))
18027                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18028 42E8           8A46         04            mov	al,4[bp]
18029 42EB           30E4                       xor	ah,ah
18030                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18031                                           ! Debug: expression subtree swapping
18032 42ED           40                         inc	ax
18033 42EE           50                         push	ax
18034 42EF           8A46         06            mov	al,6[bp]
18035 42F2           30E4                       xor	ah,ah
18036 42F4           3B46         F6            cmp	ax,-$A[bp]
18037 42F7           8D66         F8            lea	sp,-8[bp]
18038 42FA           74           15            je  	.A7
18039                       000042FC            .A8:
18040                                           ! 2157     {
18041                                           ! 2158      CH = ((CH+1) * cheight /
18042                                           ! 2158  8) -1;
18043                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18044 42FC           8A46         04            mov	al,4[bp]
18045 42FF           30E4                       xor	ah,ah
18046                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18047 4301           40                         inc	ax
18048 4302           8B4E         FE            mov	cx,-2[bp]
18049 4305           F7E9                       imul	cx
18050                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18051 4307           B1                     03  mov	cl,*3
18052 4309           D3E8                       shr	ax,cl
18053                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18054                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18055 430B           48                         dec	ax
18056 430C           8846         04            mov	4[bp],al
18057                                           !BCC_EOS
18058                                           ! 2159     }
18059                                           ! 2160    else
18060                                           ! 2161     {
18061 430F           EB           14            jmp .A9
18062                       00004311            .A7:
18063                                           ! 2162      CH = ((CL+1) * cheight / 8) - 2;
18064                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18065 4311           8A46         06            mov	al,6[bp]
18066 4314           30E4                       xor	ah,ah
18067                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18068 4316           40                         inc	ax
18069 4317           8B4E         FE            mov	cx,-2[bp]
18070 431A           F7E9                       imul	cx
18071                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18072 431C           B1                     03  mov	cl,*3
18073 431E           D3E8                       shr	ax,cl
18074                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18075                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18076 4320           48                         dec	ax
18077 4321           48                         dec	ax
18078 4322           8846         04            mov	4[bp],al
18079                                           !BCC_EOS
18080                                           ! 2163     }
18081                                           ! 2164    CL = ((CL+1) * cheight / 8) - 1;
18082                       00004325            .A9:
18083                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18084 4325           8A46         06            mov	al,6[bp]
18085 4328           30E4                       xor	ah,ah
18086                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18087 432A           40                         inc	ax
18088 432B           8B4E         FE            mov	cx,-2[bp]
18089 432E           F7E9                       imul	cx
18090                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18091 4330           B1                     03  mov	cl,*3
18092 4332           D3E8                       shr	ax,cl
18093                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18094                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18095 4334           48                         dec	ax
18096 4335           8846         06            mov	6[bp],al
18097                                           !BCC_EOS
18098                                           ! 2165   }
18099                                           ! 2166  crtc_addr=read_word(0x40,0x63);
18100                       00004338            .A2:
18101                                           ! Debug: list int = const $63 (used reg = )
18102 4338           B8                   0063  mov	ax,*$63
18103 433B           50                         push	ax
18104                                           ! Debug: list int = const $40 (used reg = )
18105 433C           B8                   0040  mov	ax,*$40
18106 433F           50                         push	ax
18107                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18108 4340           E8         3A0F            call	_read_word
18109 4343           83C4                   04  add	sp,*4
18110                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18111 4346           8946         FA            mov	-6[bp],ax
18112                                           !BCC_EOS
18113                                           ! 2167  outb(crtc_addr,0x0a);
18114                                           ! Debug: list int = const $A (used reg = )
18115 4349           B8                   000A  mov	ax,*$A
18116 434C           50                         push	ax
18117                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18118 434D           FF76         FA            push	-6[bp]
18119                                           ! Debug: func () void = outb+0 (used reg = )
18120 4350           E8         3A58            call	_outb
18121 4353           83C4                   04  add	sp,*4
18122                                           !BCC_EOS
18123                                           ! 2168  outb(crtc_addr+1,CH);
18124                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18125 4356           8A46         04            mov	al,4[bp]
18126 4359           30E4                       xor	ah,ah
18127 435B           50                         push	ax
18128                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18129 435C           8B46         FA            mov	ax,-6[bp]
18130                                           ! Debug: list unsigned int = ax+1 (used reg = )
18131 435F           40                         inc	ax
18132 4360           50                         push	ax
18133                                           ! Debug: func () void = outb+0 (used reg = )
18134 4361           E8         3A47            call	_outb
18135 4364           83C4                   04  add	sp,*4
18136                                           !BCC_EOS
18137                                           ! 2169  outb(crtc_addr,0x0b);
18138                                           ! Debug: list int = const $B (used reg = )
18139 4367           B8                   000B  mov	ax,*$B
18140 436A           50                         push	ax
18141                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18142 436B           FF76         FA            push	-6[bp]
18143                                           ! Debug: func () void = outb+0 (used reg = )
18144 436E           E8         3A3A            call	_outb
18145 4371           83C4                   04  add	sp,*4
18146                                           !BCC_EOS
18147                                           ! 2170  outb(crtc_addr+1,CL);
18148                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18149 4374           8A46         06            mov	al,6[bp]
18150 4377           30E4                       xor	ah,ah
18151 4379           50                         push	ax
18152                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18153 437A           8B46         FA            mov	ax,-6[bp]
18154                                           ! Debug: list unsigned int = ax+1 (used reg = )
18155 437D           40                         inc	ax
18156 437E           50                         push	ax
18157                                           ! Debug: func () void = outb+0 (used reg = )
18158 437F           E8         3A29            call	_outb
18159 4382           83C4                   04  add	sp,*4
18160                                           !BCC_EOS
18161                                           ! 2171 }
18162 4385           89EC                       mov	sp,bp
18163 4387           5D                         pop	bp
18164 4388           C3                         ret
18165                                           ! 2172 static void biosfn_set_cursor_pos (page, cursor)
18166                                           ! 2173 Bit8u page;Bit16u cursor;
18167                       00004389            _biosfn_set_cursor_pos:
18168                                           !BCC_EOS
18169                                           !BCC_EOS
18170                                           ! 2174 {
18171                                           ! 2175  Bit8u xcurs,ycurs,current;
18172                                           !BCC_EOS
18173                                           ! 2176  Bit16u nbcols,nbrows,address,crtc_addr;
18174                                           !BCC_EOS
18175                                           ! 2177  if(page>7)return;
18176 4389           55                         push	bp
18177 438A           89E5                       mov	bp,sp
18178 438C           83C4                   F4  add	sp,*-$C
18179                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18180 438F           8A46         04            mov	al,4[bp]
18181 4392           3C                     07  cmp	al,*7
18182 4394           76           04            jbe 	.AA
18183                       00004396            .AB:
18184 4396           89EC                       mov	sp,bp
18185 4398           5D                         pop	bp
18186 4399           C3                         ret
18187                                           !BCC_EOS
18188                                           ! 2178  write_word(0x40, 0x50 +2*page, cursor);
18189                       0000439A            .AA:
18190                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18191 439A           FF76         06            push	6[bp]
18192                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18193                                           ! Debug: expression subtree swapping
18194 439D           8A46         04            mov	al,4[bp]
18195 43A0           30E4                       xor	ah,ah
18196 43A2           D1E0                       shl	ax,*1
18197                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18198                                           ! Debug: expression subtree swapping
18199                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18200 43A4           05                   0050  add	ax,*$50
18201 43A7           50                         push	ax
18202                                           ! Debug: list int = const $40 (used reg = )
18203 43A8           B8                   0040  mov	ax,*$40
18204 43AB           50                         push	ax
18205                                           ! Debug: func () void = write_word+0 (used reg = )
18206 43AC           E8         39CE            call	_write_word
18207 43AF           83C4                   06  add	sp,*6
18208                                           !BCC_EOS
18209                                           ! 2179  current=read_byte(0x40,0x62);
18210                                           ! Debug: list int = const $62 (used reg = )
18211 43B2           B8                   0062  mov	ax,*$62
18212 43B5           50                         push	ax
18213                                           ! Debug: list int = const $40 (used reg = )
18214 43B6           B8                   0040  mov	ax,*$40
18215 43B9           50                         push	ax
18216                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18217 43BA           E8         3982            call	_read_byte
18218 43BD           83C4                   04  add	sp,*4
18219                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18220 43C0           8846         FD            mov	-3[bp],al
18221                                           !BCC_EOS
18222                                           ! 2180  if(page==current)
18223                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18224 43C3           8A46         04            mov	al,4[bp]
18225 43C6           3A46         FD            cmp	al,-3[bp]
18226 43C9         0F85         00B8            bne 	.AC
18227                       000043CD            .AD:
18228                                           ! 2181   {
18229                                           ! 2182    nbcols=read_word(0x40,0x4A);
18230                                           ! Debug: list int = const $4A (used reg = )
18231 43CD           B8                   004A  mov	ax,*$4A
18232 43D0           50                         push	ax
18233                                           ! Debug: list int = const $40 (used reg = )
18234 43D1           B8                   0040  mov	ax,*$40
18235 43D4           50                         push	ax
18236                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18237 43D5           E8         397A            call	_read_word
18238 43D8           83C4                   04  add	sp,*4
18239                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18240 43DB           8946         FA            mov	-6[bp],ax
18241                                           !BCC_EOS
18242                                           ! 2183    nbrows=read_byte(0x40,0x84)+1;
18243                                           ! Debug: list int = const $84 (used reg = )
18244 43DE           B8                   0084  mov	ax,#$84
18245 43E1           50                         push	ax
18246                                           ! Debug: list int = const $40 (used reg = )
18247 43E2           B8                   0040  mov	ax,*$40
18248 43E5           50                         push	ax
18249                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18250 43E6           E8         3956            call	_read_byte
18251 43E9           83C4                   04  add	sp,*4
18252                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18253 43EC           30E4                       xor	ah,ah
18254                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18255 43EE           40                         inc	ax
18256 43EF           8946         F8            mov	-8[bp],ax
18257                                           !BCC_EOS
18258                                           ! 2184    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18259                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18260 43F2           8A46         06            mov	al,6[bp]
18261                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18262 43F5           8846         FF            mov	-1[bp],al
18263                                           !BCC_EOS
18264                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18265 43F8           8B46         06            mov	ax,6[bp]
18266 43FB           30C0                       xor	al,al
18267                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18268 43FD           88E0                       mov	al,ah
18269 43FF           30E4                       xor	ah,ah
18270                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18271 4401           8846         FE            mov	-2[bp],al
18272                                           !BCC_EOS
18273                                           ! 2185    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18274                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18275 4404           8A46         FE            mov	al,-2[bp]
18276 4407           30E4                       xor	ah,ah
18277 4409           8B4E         FA            mov	cx,-6[bp]
18278 440C           F7E9                       imul	cx
18279 440E           50                         push	ax
18280                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18281 440F           8B46         FA            mov	ax,-6[bp]
18282 4412           8B4E         F8            mov	cx,-8[bp]
18283 4415           F7E9                       imul	cx
18284                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18285 4417           0C                     FF  or	al,#$FF
18286                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18287                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18288 4419           89C3                       mov	bx,ax
18289 441B           8A46         04            mov	al,4[bp]
18290 441E           30E4                       xor	ah,ah
18291 4420           93                         xchg	ax,bx
18292 4421           40                         inc	ax
18293 4422           89D9                       mov	cx,bx
18294 4424           F7E9                       imul	cx
18295                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18296 4426           0246         FF            add	al,-1[bp]
18297 4429           80D4                   00  adc	ah,*0
18298                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18299 442C           0346         F2            add	ax,-$E[bp]
18300 442F           44                         inc	sp
18301 4430           44                         inc	sp
18302                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18303 4431           8946         F6            mov	-$A[bp],ax
18304                                           !BCC_EOS
18305                                           ! 2186    crtc_addr=read_word(0x40,0x63);
18306                                           ! Debug: list int = const $63 (used reg = )
18307 4434           B8                   0063  mov	ax,*$63
18308 4437           50                         push	ax
18309                                           ! Debug: list int = const $40 (used reg = )
18310 4438           B8                   0040  mov	ax,*$40
18311 443B           50                         push	ax
18312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18313 443C           E8         3913            call	_read_word
18314 443F           83C4                   04  add	sp,*4
18315                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18316 4442           8946         F4            mov	-$C[bp],ax
18317                                           !BCC_EOS
18318                                           ! 2187    outb(crtc_addr,0x0e);
18319                                           ! Debug: list int = const $E (used reg = )
18320 4445           B8                   000E  mov	ax,*$E
18321 4448           50                         push	ax
18322                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18323 4449           FF76         F4            push	-$C[bp]
18324                                           ! Debug: func () void = outb+0 (used reg = )
18325 444C           E8         395C            call	_outb
18326 444F           83C4                   04  add	sp,*4
18327                                           !BCC_EOS
18328                                           ! 2188    outb(crtc_addr+1,(address&0xff00)>>8);
18329                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18330 4452           8B46         F6            mov	ax,-$A[bp]
18331 4455           30C0                       xor	al,al
18332                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18333 4457           88E0                       mov	al,ah
18334 4459           30E4                       xor	ah,ah
18335                                           ! Debug: list unsigned int = ax+0 (used reg = )
18336 445B           50                         push	ax
18337                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18338 445C           8B46         F4            mov	ax,-$C[bp]
18339                                           ! Debug: list unsigned int = ax+1 (used reg = )
18340 445F           40                         inc	ax
18341 4460           50                         push	ax
18342                                           ! Debug: func () void = outb+0 (used reg = )
18343 4461           E8         3947            call	_outb
18344 4464           83C4                   04  add	sp,*4
18345                                           !BCC_EOS
18346                                           ! 2189    outb(crtc_addr,0x0f);
18347                                           ! Debug: list int = const $F (used reg = )
18348 4467           B8                   000F  mov	ax,*$F
18349 446A           50                         push	ax
18350                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18351 446B           FF76         F4            push	-$C[bp]
18352                                           ! Debug: func () void = outb+0 (used reg = )
18353 446E           E8         393A            call	_outb
18354 4471           83C4                   04  add	sp,*4
18355                                           !BCC_EOS
18356                                           ! 2190    outb(crtc_addr+1,address&0x00ff);
18357                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18358 4474           8A46         F6            mov	al,-$A[bp]
18359                                           ! Debug: list unsigned char = al+0 (used reg = )
18360 4477           30E4                       xor	ah,ah
18361 4479           50                         push	ax
18362                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18363 447A           8B46         F4            mov	ax,-$C[bp]
18364                                           ! Debug: list unsigned int = ax+1 (used reg = )
18365 447D           40                         inc	ax
18366 447E           50                         push	ax
18367                                           ! Debug: func () void = outb+0 (used reg = )
18368 447F           E8         3929            call	_outb
18369 4482           83C4                   04  add	sp,*4
18370                                           !BCC_EOS
18371                                           ! 2191   }
18372                                           ! 2192 }
18373                       00004485            .AC:
18374 4485           89EC                       mov	sp,bp
18375 4487           5D                         pop	bp
18376 4488           C3                         ret
18377                                           ! 2193 static void biosfn_get_cursor_pos (page,shape, pos)
18378                                           ! Register BX used in function biosfn_set_cursor_pos
18379                                           ! 2194 Bit8u page;Bit16u *shape;Bit16u *pos;
18380                       00004489            _biosfn_get_cursor_pos:
18381                                           !BCC_EOS
18382                                           !BCC_EOS
18383                                           !BCC_EOS
18384                                           ! 2195 {
18385                                           ! 2196  Bit16u ss=get_SS();
18386 4489           55                         push	bp
18387 448A           89E5                       mov	bp,sp
18388 448C           4C                         dec	sp
18389 448D           4C                         dec	sp
18390                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18391 448E           E8         393A            call	_get_SS
18392                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18393 4491           8946         FE            mov	-2[bp],ax
18394                                           !BCC_EOS
18395                                           ! 2197  write_word(ss, shape, 0);
18396                                           ! Debug: list int = const 0 (used reg = )
18397 4494           31C0                       xor	ax,ax
18398 4496           50                         push	ax
18399                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18400 4497           FF76         06            push	6[bp]
18401                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18402 449A           FF76         FE            push	-2[bp]
18403                                           ! Debug: func () void = write_word+0 (used reg = )
18404 449D           E8         38DD            call	_write_word
18405 44A0           83C4                   06  add	sp,*6
18406                                           !BCC_EOS
18407                                           ! 2198  write_word(ss, pos, 0);
18408                                           ! Debug: list int = const 0 (used reg = )
18409 44A3           31C0                       xor	ax,ax
18410 44A5           50                         push	ax
18411                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18412 44A6           FF76         08            push	8[bp]
18413                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18414 44A9           FF76         FE            push	-2[bp]
18415                                           ! Debug: func () void = write_word+0 (used reg = )
18416 44AC           E8         38CE            call	_write_word
18417 44AF           83C4                   06  add	sp,*6
18418                                           !BCC_EOS
18419                                           ! 2199  if(page>7)return;
18420                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18421 44B2           8A46         04            mov	al,4[bp]
18422 44B5           3C                     07  cmp	al,*7
18423 44B7           76           04            jbe 	.AE
18424                       000044B9            .AF:
18425 44B9           89EC                       mov	sp,bp
18426 44BB           5D                         pop	bp
18427 44BC           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2200  write_word(ss,shape,read_word(0x40,0x60));
18430                       000044BD            .AE:
18431                                           ! Debug: list int = const $60 (used reg = )
18432 44BD           B8                   0060  mov	ax,*$60
18433 44C0           50                         push	ax
18434                                           ! Debug: list int = const $40 (used reg = )
18435 44C1           B8                   0040  mov	ax,*$40
18436 44C4           50                         push	ax
18437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18438 44C5           E8         388A            call	_read_word
18439 44C8           83C4                   04  add	sp,*4
18440                                           ! Debug: list unsigned short = ax+0 (used reg = )
18441 44CB           50                         push	ax
18442                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18443 44CC           FF76         06            push	6[bp]
18444                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18445 44CF           FF76         FE            push	-2[bp]
18446                                           ! Debug: func () void = write_word+0 (used reg = )
18447 44D2           E8         38A8            call	_write_word
18448 44D5           83C4                   06  add	sp,*6
18449                                           !BCC_EOS
18450                                           ! 2201  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18451                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18452 44D8           8A46         04            mov	al,4[bp]
18453 44DB           30E4                       xor	ah,ah
18454 44DD           D1E0                       shl	ax,*1
18455                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18456                                           ! Debug: expression subtree swapping
18457                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18458 44DF           05                   0050  add	ax,*$50
18459 44E2           50                         push	ax
18460                                           ! Debug: list int = const $40 (used reg = )
18461 44E3           B8                   0040  mov	ax,*$40
18462 44E6           50                         push	ax
18463                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18464 44E7           E8         3868            call	_read_word
18465 44EA           83C4                   04  add	sp,*4
18466                                           ! Debug: list unsigned short = ax+0 (used reg = )
18467 44ED           50                         push	ax
18468                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18469 44EE           FF76         08            push	8[bp]
18470                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18471 44F1           FF76         FE            push	-2[bp]
18472                                           ! Debug: func () void = write_word+0 (used reg = )
18473 44F4           E8         3886            call	_write_word
18474 44F7           83C4                   06  add	sp,*6
18475                                           !BCC_EOS
18476                                           ! 2202 }
18477 44FA           89EC                       mov	sp,bp
18478 44FC           5D                         pop	bp
18479 44FD           C3                         ret
18480                                           ! 2203 static void biosfn_set_active_page (page)
18481                                           ! 2204 Bit8u page;
18482                       000044FE            _biosfn_set_active_page:
18483                                           !BCC_EOS
18484                                           ! 2205 {
18485                                           ! 2206  Bit16u cursor,dummy,crtc_addr;
18486                                           !BCC_EOS
18487                                           ! 2207  Bit16u nbcols,nbrows,address;
18488                                           !BCC_EOS
18489                                           ! 2208  Bit8u mode,line;
18490                                           !BCC_EOS
18491                                           ! 2209  if(page>7)return;
18492 44FE           55                         push	bp
18493 44FF           89E5                       mov	bp,sp
18494 4501           83C4                   F2  add	sp,*-$E
18495                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18496 4504           8A46         04            mov	al,4[bp]
18497 4507           3C                     07  cmp	al,*7
18498 4509           76           04            jbe 	.B0
18499                       0000450B            .B1:
18500 450B           89EC                       mov	sp,bp
18501 450D           5D                         pop	bp
18502 450E           C3                         ret
18503                                           !BCC_EOS
18504                                           ! 2210  mode=read_byte(0x40,0x49);
18505                       0000450F            .B0:
18506                                           ! Debug: list int = const $49 (used reg = )
18507 450F           B8                   0049  mov	ax,*$49
18508 4512           50                         push	ax
18509                                           ! Debug: list int = const $40 (used reg = )
18510 4513           B8                   0040  mov	ax,*$40
18511 4516           50                         push	ax
18512                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18513 4517           E8         3825            call	_read_byte
18514 451A           83C4                   04  add	sp,*4
18515                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18516 451D           8846         F3            mov	-$D[bp],al
18517                                           !BCC_EOS
18518                                           ! 2211  line=find_vga_entry(mode);
18519                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18520 4520           8A46         F3            mov	al,-$D[bp]
18521 4523           30E4                       xor	ah,ah
18522 4525           50                         push	ax
18523                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18524 4526           E8         372A            call	_find_vga_entry
18525 4529           44                         inc	sp
18526 452A           44                         inc	sp
18527                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18528 452B           8846         F2            mov	-$E[bp],al
18529                                           !BCC_EOS
18530                                           ! 2212  if(line==0xFF)return;
18531                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18532 452E           8A46         F2            mov	al,-$E[bp]
18533 4531           3C                     FF  cmp	al,#$FF
18534 4533           75           04            jne 	.B2
18535                       00004535            .B3:
18536 4535           89EC                       mov	sp,bp
18537 4537           5D                         pop	bp
18538 4538           C3                         ret
18539                                           !BCC_EOS
18540                                           ! 2213  biosfn_get_cursor_pos(page,&dummy,&cursor);
18541                       00004539            .B2:
18542                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18543 4539           8D5E         FE            lea	bx,-2[bp]
18544 453C           53                         push	bx
18545                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18546 453D           8D5E         FC            lea	bx,-4[bp]
18547 4540           53                         push	bx
18548                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18549 4541           8A46         04            mov	al,4[bp]
18550 4544           30E4                       xor	ah,ah
18551 4546           50                         push	ax
18552                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18553 4547           E8         FF3F            call	_biosfn_get_cursor_pos
18554 454A           83C4                   06  add	sp,*6
18555                                           !BCC_EOS
18556                                           ! 2214  if(vga_modes[line].class==0x00)
18557                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18558 454D           8A46         F2            mov	al,-$E[bp]
18559 4550           30E4                       xor	ah,ah
18560 4552           B1                     03  mov	cl,*3
18561 4554           D3E0                       shl	ax,cl
18562 4556           89C3                       mov	bx,ax
18563 4558           81C3                 020B  add	bx,#_vga_modes
18564                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18565 455C           8A47         01            mov	al,1[bx]
18566 455F           84C0                       test	al,al
18567 4561           75           6E            jne 	.B4
18568                       00004563            .B5:
18569                                           ! 2215   {
18570                                           ! 2216    nbcols=read_word(0x40,0x4A);
18571                                           ! Debug: list int = const $4A (used reg = )
18572 4563           B8                   004A  mov	ax,*$4A
18573 4566           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 4567           B8                   0040  mov	ax,*$40
18576 456A           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 456B           E8         37E4            call	_read_word
18579 456E           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18581 4571           8946         F8            mov	-8[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2217    nbrows=read_byte(0x40,0x84)+1;
18584                                           ! Debug: list int = const $84 (used reg = )
18585 4574           B8                   0084  mov	ax,#$84
18586 4577           50                         push	ax
18587                                           ! Debug: list int = const $40 (used reg = )
18588 4578           B8                   0040  mov	ax,*$40
18589 457B           50                         push	ax
18590                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18591 457C           E8         37C0            call	_read_byte
18592 457F           83C4                   04  add	sp,*4
18593                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18594 4582           30E4                       xor	ah,ah
18595                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18596 4584           40                         inc	ax
18597 4585           8946         F6            mov	-$A[bp],ax
18598                                           !BCC_EOS
18599                                           ! 2218    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18600                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18601 4588           8B46         F8            mov	ax,-8[bp]
18602 458B           8B4E         F6            mov	cx,-$A[bp]
18603 458E           F7E9                       imul	cx
18604                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18605 4590           D1E0                       shl	ax,*1
18606                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18607 4592           0C                     FF  or	al,#$FF
18608                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18609                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18610 4594           89C3                       mov	bx,ax
18611 4596           8A46         04            mov	al,4[bp]
18612 4599           30E4                       xor	ah,ah
18613 459B           93                         xchg	ax,bx
18614 459C           40                         inc	ax
18615 459D           89D9                       mov	cx,bx
18616 459F           F7E9                       imul	cx
18617                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18618 45A1           8946         F4            mov	-$C[bp],ax
18619                                           !BCC_EOS
18620                                           ! 2219    write_word(0x40,0x4E,address);
18621                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18622 45A4           FF76         F4            push	-$C[bp]
18623                                           ! Debug: list int = const $4E (used reg = )
18624 45A7           B8                   004E  mov	ax,*$4E
18625 45AA           50                         push	ax
18626                                           ! Debug: list int = const $40 (used reg = )
18627 45AB           B8                   0040  mov	ax,*$40
18628 45AE           50                         push	ax
18629                                           ! Debug: func () void = write_word+0 (used reg = )
18630 45AF           E8         37CB            call	_write_word
18631 45B2           83C4                   06  add	sp,*6
18632                                           !BCC_EOS
18633                                           ! 2220    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18634                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18635 45B5           8B46         F8            mov	ax,-8[bp]
18636 45B8           8B4E         F6            mov	cx,-$A[bp]
18637 45BB           F7E9                       imul	cx
18638                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18639 45BD           0C                     FF  or	al,#$FF
18640                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18641                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18642 45BF           89C3                       mov	bx,ax
18643 45C1           8A46         04            mov	al,4[bp]
18644 45C4           30E4                       xor	ah,ah
18645 45C6           93                         xchg	ax,bx
18646 45C7           40                         inc	ax
18647 45C8           89D9                       mov	cx,bx
18648 45CA           F7E9                       imul	cx
18649                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18650 45CC           8946         F4            mov	-$C[bp],ax
18651                                           !BCC_EOS
18652                                           ! 2221   }
18653                                           ! 2222  else
18654                                           ! 2223   {
18655 45CF           EB           24            jmp .B6
18656                       000045D1            .B4:
18657                                           ! 2224    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18658                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18659 45D1           8A46         F2            mov	al,-$E[bp]
18660 45D4           30E4                       xor	ah,ah
18661 45D6           89C3                       mov	bx,ax
18662                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18663 45D8           8A87       028B            mov	al,_line_to_vpti[bx]
18664 45DC           30E4                       xor	ah,ah
18665 45DE           B1                     06  mov	cl,*6
18666 45E0           D3E0                       shl	ax,cl
18667 45E2           89C3                       mov	bx,ax
18668 45E4           81C3                 029F  add	bx,#_video_param_table
18669                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18670                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18671                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18672 45E8           8A46         04            mov	al,4[bp]
18673 45EB           30E4                       xor	ah,ah
18674 45ED           8B4F         03            mov	cx,3[bx]
18675 45F0           F7E9                       imul	cx
18676                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18677 45F2           8946         F4            mov	-$C[bp],ax
18678                                           !BCC_EOS
18679                                           ! 2225   }
18680                                           ! 2226  crtc_addr=read_word(0x40,0x63);
18681                       000045F5            .B6:
18682                                           ! Debug: list int = const $63 (used reg = )
18683 45F5           B8                   0063  mov	ax,*$63
18684 45F8           50                         push	ax
18685                                           ! Debug: list int = const $40 (used reg = )
18686 45F9           B8                   0040  mov	ax,*$40
18687 45FC           50                         push	ax
18688                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18689 45FD           E8         3752            call	_read_word
18690 4600           83C4                   04  add	sp,*4
18691                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18692 4603           8946         FA            mov	-6[bp],ax
18693                                           !BCC_EOS
18694                                           ! 2227  outb(crtc_addr,0x0c);
18695                                           ! Debug: list int = const $C (used reg = )
18696 4606           B8                   000C  mov	ax,*$C
18697 4609           50                         push	ax
18698                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18699 460A           FF76         FA            push	-6[bp]
18700                                           ! Debug: func () void = outb+0 (used reg = )
18701 460D           E8         379B            call	_outb
18702 4610           83C4                   04  add	sp,*4
18703                                           !BCC_EOS
18704                                           ! 2228  outb(crtc_addr+1,(address&0xff00)>>8);
18705                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18706 4613           8B46         F4            mov	ax,-$C[bp]
18707 4616           30C0                       xor	al,al
18708                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18709 4618           88E0                       mov	al,ah
18710 461A           30E4                       xor	ah,ah
18711                                           ! Debug: list unsigned int = ax+0 (used reg = )
18712 461C           50                         push	ax
18713                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18714 461D           8B46         FA            mov	ax,-6[bp]
18715                                           ! Debug: list unsigned int = ax+1 (used reg = )
18716 4620           40                         inc	ax
18717 4621           50                         push	ax
18718                                           ! Debug: func () void = outb+0 (used reg = )
18719 4622           E8         3786            call	_outb
18720 4625           83C4                   04  add	sp,*4
18721                                           !BCC_EOS
18722                                           ! 2229  outb(crtc_addr,0x0d);
18723                                           ! Debug: list int = const $D (used reg = )
18724 4628           B8                   000D  mov	ax,*$D
18725 462B           50                         push	ax
18726                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18727 462C           FF76         FA            push	-6[bp]
18728                                           ! Debug: func () void = outb+0 (used reg = )
18729 462F           E8         3779            call	_outb
18730 4632           83C4                   04  add	sp,*4
18731                                           !BCC_EOS
18732                                           ! 2230  outb(crtc_addr+1,address&0x00ff);
18733                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18734 4635           8A46         F4            mov	al,-$C[bp]
18735                                           ! Debug: list unsigned char = al+0 (used reg = )
18736 4638           30E4                       xor	ah,ah
18737 463A           50                         push	ax
18738                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18739 463B           8B46         FA            mov	ax,-6[bp]
18740                                           ! Debug: list unsigned int = ax+1 (used reg = )
18741 463E           40                         inc	ax
18742 463F           50                         push	ax
18743                                           ! Debug: func () void = outb+0 (used reg = )
18744 4640           E8         3768            call	_outb
18745 4643           83C4                   04  add	sp,*4
18746                                           !BCC_EOS
18747                                           ! 2231  write_byte(0x40,0x62,page);
18748                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18749 4646           8A46         04            mov	al,4[bp]
18750 4649           30E4                       xor	ah,ah
18751 464B           50                         push	ax
18752                                           ! Debug: list int = const $62 (used reg = )
18753 464C           B8                   0062  mov	ax,*$62
18754 464F           50                         push	ax
18755                                           ! Debug: list int = const $40 (used reg = )
18756 4650           B8                   0040  mov	ax,*$40
18757 4653           50                         push	ax
18758                                           ! Debug: func () void = write_byte+0 (used reg = )
18759 4654           E8         370E            call	_write_byte
18760 4657           83C4                   06  add	sp,*6
18761                                           !BCC_EOS
18762                                           ! 2232  printf("Set active page %02x address %04x\n",page,address);
18763                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18764 465A           FF76         F4            push	-$C[bp]
18765                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18766 465D           8A46         04            mov	al,4[bp]
18767 4660           30E4                       xor	ah,ah
18768 4662           50                         push	ax
18769                                           ! Debug: list * char = .B7+0 (used reg = )
18770 4663           BB                   A5BB  mov	bx,#.B7
18771 4666           53                         push	bx
18772                                           ! Debug: func () void = printf+0 (used reg = )
18773 4667           E8         3780            call	_printf
18774 466A           83C4                   06  add	sp,*6
18775                                           !BCC_EOS
18776                                           ! 2233  biosfn_set_cursor_pos(page,cursor);
18777                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18778 466D           FF76         FE            push	-2[bp]
18779                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18780 4670           8A46         04            mov	al,4[bp]
18781 4673           30E4                       xor	ah,ah
18782 4675           50                         push	ax
18783                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18784 4676           E8         FD10            call	_biosfn_set_cursor_pos
18785 4679           83C4                   04  add	sp,*4
18786                                           !BCC_EOS
18787                                           ! 2234 }
18788 467C           89EC                       mov	sp,bp
18789 467E           5D                         pop	bp
18790 467F           C3                         ret
18791                                           ! 2235 static void vgamem
18792                                           ! Register BX used in function biosfn_set_active_page
18793                                           ! 2235 _copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18794                                           ! 2236 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18795                       00004680            _vgamem_copy_pl4:
18796                                           !BCC_EOS
18797                                           !BCC_EOS
18798                                           !BCC_EOS
18799                                           !BCC_EOS
18800                                           !BCC_EOS
18801                                           !BCC_EOS
18802                                           ! 2237 {
18803                                           ! 2238  Bit16u src,dest;
18804                                           !BCC_EOS
18805                                           ! 2239  Bit8u i;
18806                                           !BCC_EOS
18807                                           ! 2240  src=ysrc*cheight*nbcols+xstart;
18808 4680           55                         push	bp
18809 4681           89E5                       mov	bp,sp
18810 4683           83C4                   FA  add	sp,*-6
18811                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18812 4686           8A46         0E            mov	al,$E[bp]
18813 4689           30E4                       xor	ah,ah
18814 468B           89C3                       mov	bx,ax
18815 468D           8A46         06            mov	al,6[bp]
18816 4690           30E4                       xor	ah,ah
18817 4692           89D9                       mov	cx,bx
18818 4694           F7E9                       imul	cx
18819                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18820 4696           89C3                       mov	bx,ax
18821 4698           8A46         0C            mov	al,$C[bp]
18822 469B           30E4                       xor	ah,ah
18823 469D           93                         xchg	ax,bx
18824 469E           89D9                       mov	cx,bx
18825 46A0           F7E9                       imul	cx
18826                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18827 46A2           0246         04            add	al,4[bp]
18828 46A5           80D4                   00  adc	ah,*0
18829                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18830 46A8           8946         FE            mov	-2[bp],ax
18831                                           !BCC_EOS
18832                                           ! 2241  dest=ydest*cheight*nbcols+xstart;
18833                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18834 46AB           8A46         0E            mov	al,$E[bp]
18835 46AE           30E4                       xor	ah,ah
18836 46B0           89C3                       mov	bx,ax
18837 46B2           8A46         08            mov	al,8[bp]
18838 46B5           30E4                       xor	ah,ah
18839 46B7           89D9                       mov	cx,bx
18840 46B9           F7E9                       imul	cx
18841                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18842 46BB           89C3                       mov	bx,ax
18843 46BD           8A46         0C            mov	al,$C[bp]
18844 46C0           30E4                       xor	ah,ah
18845 46C2           93                         xchg	ax,bx
18846 46C3           89D9                       mov	cx,bx
18847 46C5           F7E9                       imul	cx
18848                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18849 46C7           0246         04            add	al,4[bp]
18850 46CA           80D4                   00  adc	ah,*0
18851                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18852 46CD           8946         FC            mov	-4[bp],ax
18853                                           !BCC_EOS
18854                                           ! 2242  outw(0x3ce, 0x0105);
18855                                           ! Debug: list int = const $105 (used reg = )
18856 46D0           B8                   0105  mov	ax,#$105
18857 46D3           50                         push	ax
18858                                           ! Debug: list int = const $3CE (used reg = )
18859 46D4           B8                   03CE  mov	ax,#$3CE
18860 46D7           50                         push	ax
18861                                           ! Debug: func () void = outw+0 (used reg = )
18862 46D8           E8         36E0            call	_outw
18863 46DB           83C4                   04  add	sp,*4
18864                                           !BCC_EOS
18865                                           ! 2243  for(i=0;i<cheight;i++)
18866                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18867 46DE           30C0                       xor	al,al
18868 46E0           8846         FB            mov	-5[bp],al
18869                                           !BCC_EOS
18870                                           !BCC_EOS
18871                                           ! 2244   {
18872 46E3           EB           43            jmp .BA
18873                       000046E5            .BB:
18874                                           ! 2245    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18875                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18876 46E5           8A46         0A            mov	al,$A[bp]
18877 46E8           30E4                       xor	ah,ah
18878 46EA           50                         push	ax
18879                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18880 46EB           8A46         0C            mov	al,$C[bp]
18881 46EE           30E4                       xor	ah,ah
18882 46F0           89C3                       mov	bx,ax
18883 46F2           8A46         FB            mov	al,-5[bp]
18884 46F5           30E4                       xor	ah,ah
18885 46F7           89D9                       mov	cx,bx
18886 46F9           F7E9                       imul	cx
18887                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18888                                           ! Debug: expression subtree swapping
18889 46FB           0346         FE            add	ax,-2[bp]
18890                                           ! Debug: list unsigned int = ax+0 (used reg = )
18891 46FE           50                         push	ax
18892                                           ! Debug: list unsigned int = const $A000 (used reg = )
18893 46FF           B8                   A000  mov	ax,#$A000
18894 4702           50                         push	ax
18895                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18896 4703           8A46         0C            mov	al,$C[bp]
18897 4706           30E4                       xor	ah,ah
18898 4708           89C3                       mov	bx,ax
18899 470A           8A46         FB            mov	al,-5[bp]
18900 470D           30E4                       xor	ah,ah
18901 470F           89D9                       mov	cx,bx
18902 4711           F7E9                       imul	cx
18903                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18904                                           ! Debug: expression subtree swapping
18905 4713           0346         FC            add	ax,-4[bp]
18906                                           ! Debug: list unsigned int = ax+0 (used reg = )
18907 4716           50                         push	ax
18908                                           ! Debug: list unsigned int = const $A000 (used reg = )
18909 4717           B8                   A000  mov	ax,#$A000
18910 471A           50                         push	ax
18911                                           ! Debug: func () void = memcpyb+0 (used reg = )
18912 471B           E8         35C1            call	_memcpyb
18913 471E           83C4                   0A  add	sp,*$A
18914                                           !BCC_EOS
18915                                           ! 2246   }
18916                                           ! 2247  outw(0x3ce, 0x0005);
18917                       00004721            .B9:
18918                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18919 4721           8A46         FB            mov	al,-5[bp]
18920 4724           40                         inc	ax
18921 4725           8846         FB            mov	-5[bp],al
18922                       00004728            .BA:
18923                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18924 4728           8A46         FB            mov	al,-5[bp]
18925 472B           3A46         0E            cmp	al,$E[bp]
18926 472E           72           B5            jb 	.BB
18927                       00004730            .BC:
18928                       00004730            .B8:
18929                                           ! Debug: list int = const 5 (used reg = )
18930 4730           B8                   0005  mov	ax,*5
18931 4733           50                         push	ax
18932                                           ! Debug: list int = const $3CE (used reg = )
18933 4734           B8                   03CE  mov	ax,#$3CE
18934 4737           50                         push	ax
18935                                           ! Debug: func () void = outw+0 (used reg = )
18936 4738           E8         3680            call	_outw
18937 473B           83C4                   04  add	sp,*4
18938                                           !BCC_EOS
18939                                           ! 2248 }
18940 473E           89EC                       mov	sp,bp
18941 4740           5D                         pop	bp
18942 4741           C3                         ret
18943                                           ! 2249 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18944                                           ! Register BX used in function vgamem_copy_pl4
18945                                           ! 2250 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18946                       00004742            _vgamem_fill_pl4:
18947                                           !BCC_EOS
18948                                           !BCC_EOS
18949                                           !BCC_EOS
18950                                           !BCC_EOS
18951                                           !BCC_EOS
18952                                           !BCC_EOS
18953                                           ! 2251 {
18954                                           ! 2252  Bit16u dest;
18955                                           !BCC_EOS
18956                                           ! 2253  Bit8u i;
18957                                           !BCC_EOS
18958                                           ! 2254  dest=ystart*cheight*nbcols+xstart;
18959 4742           55                         push	bp
18960 4743           89E5                       mov	bp,sp
18961 4745           83C4                   FC  add	sp,*-4
18962                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18963 4748           8A46         0C            mov	al,$C[bp]
18964 474B           30E4                       xor	ah,ah
18965 474D           89C3                       mov	bx,ax
18966 474F           8A46         06            mov	al,6[bp]
18967 4752           30E4                       xor	ah,ah
18968 4754           89D9                       mov	cx,bx
18969 4756           F7E9                       imul	cx
18970                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18971 4758           89C3                       mov	bx,ax
18972 475A           8A46         0A            mov	al,$A[bp]
18973 475D           30E4                       xor	ah,ah
18974 475F           93                         xchg	ax,bx
18975 4760           89D9                       mov	cx,bx
18976 4762           F7E9                       imul	cx
18977                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18978 4764           0246         04            add	al,4[bp]
18979 4767           80D4                   00  adc	ah,*0
18980                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18981 476A           8946         FE            mov	-2[bp],ax
18982                                           !BCC_EOS
18983                                           ! 2255  outw(0x3ce, 0x0205);
18984                                           ! Debug: list int = const $205 (used reg = )
18985 476D           B8                   0205  mov	ax,#$205
18986 4770           50                         push	ax
18987                                           ! Debug: list int = const $3CE (used reg = )
18988 4771           B8                   03CE  mov	ax,#$3CE
18989 4774           50                         push	ax
18990                                           ! Debug: func () void = outw+0 (used reg = )
18991 4775           E8         3643            call	_outw
18992 4778           83C4                   04  add	sp,*4
18993                                           !BCC_EOS
18994                                           ! 2256  for(i=0;i<cheight;i++)
18995                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18996 477B           30C0                       xor	al,al
18997 477D           8846         FD            mov	-3[bp],al
18998                                           !BCC_EOS
18999                                           !BCC_EOS
19000                                           ! 2257   {
19001 4780           EB           31            jmp .BF
19002                       00004782            .C0:
19003                                           ! 2258    memsetb(0xa000,dest+i*nbcols,attr,cols);
19004                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19005 4782           8A46         08            mov	al,8[bp]
19006 4785           30E4                       xor	ah,ah
19007 4787           50                         push	ax
19008                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19009 4788           8A46         0E            mov	al,$E[bp]
19010 478B           30E4                       xor	ah,ah
19011 478D           50                         push	ax
19012                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
19013 478E           8A46         0A            mov	al,$A[bp]
19014 4791           30E4                       xor	ah,ah
19015 4793           89C3                       mov	bx,ax
19016 4795           8A46         FD            mov	al,-3[bp]
19017 4798           30E4                       xor	ah,ah
19018 479A           89D9                       mov	cx,bx
19019 479C           F7E9                       imul	cx
19020                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19021                                           ! Debug: expression subtree swapping
19022 479E           0346         FE            add	ax,-2[bp]
19023                                           ! Debug: list unsigned int = ax+0 (used reg = )
19024 47A1           50                         push	ax
19025                                           ! Debug: list unsigned int = const $A000 (used reg = )
19026 47A2           B8                   A000  mov	ax,#$A000
19027 47A5           50                         push	ax
19028                                           ! Debug: func () void = memsetb+0 (used reg = )
19029 47A6           E8         34EC            call	_memsetb
19030 47A9           83C4                   08  add	sp,*8
19031                                           !BCC_EOS
19032                                           ! 2259   }
19033                                           ! 2260  outw(0x3ce, 0x0005);
19034                       000047AC            .BE:
19035                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19036 47AC           8A46         FD            mov	al,-3[bp]
19037 47AF           40                         inc	ax
19038 47B0           8846         FD            mov	-3[bp],al
19039                       000047B3            .BF:
19040                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19041 47B3           8A46         FD            mov	al,-3[bp]
19042 47B6           3A46         0C            cmp	al,$C[bp]
19043 47B9           72           C7            jb 	.C0
19044                       000047BB            .C1:
19045                       000047BB            .BD:
19046                                           ! Debug: list int = const 5 (used reg = )
19047 47BB           B8                   0005  mov	ax,*5
19048 47BE           50                         push	ax
19049                                           ! Debug: list int = const $3CE (used reg = )
19050 47BF           B8                   03CE  mov	ax,#$3CE
19051 47C2           50                         push	ax
19052                                           ! Debug: func () void = outw+0 (used reg = )
19053 47C3           E8         35F5            call	_outw
19054 47C6           83C4                   04  add	sp,*4
19055                                           !BCC_EOS
19056                                           ! 2261 }
19057 47C9           89EC                       mov	sp,bp
19058 47CB           5D                         pop	bp
19059 47CC           C3                         ret
19060                                           ! 2262 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19061                                           ! Register BX used in function vgamem_fill_pl4
19062                                           ! 2263 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19063                       000047CD            _vgamem_copy_cga:
19064                                           !BCC_EOS
19065                                           !BCC_EOS
19066                                           !BCC_EOS
19067                                           !BCC_EOS
19068                                           !BCC_EOS
19069                                           !BCC_EOS
19070                                           ! 2264 {
19071                                           ! 2265  Bit16u src,dest;
19072                                           !BCC_EOS
19073                                           ! 2266  Bit8u i;
19074                                           !BCC_EOS
19075                                           ! 2267  src=((ysrc*cheight*nbcols)>>1)+xstart;
19076 47CD           55                         push	bp
19077 47CE           89E5                       mov	bp,sp
19078 47D0           83C4                   FA  add	sp,*-6
19079                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19080 47D3           8A46         0E            mov	al,$E[bp]
19081 47D6           30E4                       xor	ah,ah
19082 47D8           89C3                       mov	bx,ax
19083 47DA           8A46         06            mov	al,6[bp]
19084 47DD           30E4                       xor	ah,ah
19085 47DF           89D9                       mov	cx,bx
19086 47E1           F7E9                       imul	cx
19087                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19088 47E3           89C3                       mov	bx,ax
19089 47E5           8A46         0C            mov	al,$C[bp]
19090 47E8           30E4                       xor	ah,ah
19091 47EA           93                         xchg	ax,bx
19092 47EB           89D9                       mov	cx,bx
19093 47ED           F7E9                       imul	cx
19094                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19095 47EF           D1E8                       shr	ax,*1
19096                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19097 47F1           0246         04            add	al,4[bp]
19098 47F4           80D4                   00  adc	ah,*0
19099                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19100 47F7           8946         FE            mov	-2[bp],ax
19101                                           !BCC_EOS
19102                                           ! 2268  dest=((ydest*cheight*nbcols)>>1)+xstart;
19103                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19104 47FA           8A46         0E            mov	al,$E[bp]
19105 47FD           30E4                       xor	ah,ah
19106 47FF           89C3                       mov	bx,ax
19107 4801           8A46         08            mov	al,8[bp]
19108 4804           30E4                       xor	ah,ah
19109 4806           89D9                       mov	cx,bx
19110 4808           F7E9                       imul	cx
19111                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19112 480A           89C3                       mov	bx,ax
19113 480C           8A46         0C            mov	al,$C[bp]
19114 480F           30E4                       xor	ah,ah
19115 4811           93                         xchg	ax,bx
19116 4812           89D9                       mov	cx,bx
19117 4814           F7E9                       imul	cx
19118                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19119 4816           D1E8                       shr	ax,*1
19120                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19121 4818           0246         04            add	al,4[bp]
19122 481B           80D4                   00  adc	ah,*0
19123                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19124 481E           8946         FC            mov	-4[bp],ax
19125                                           !BCC_EOS
19126                                           ! 2269  for(i=0;i<cheight;i++)
19127                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19128 4821           30C0                       xor	al,al
19129 4823           8846         FB            mov	-5[bp],al
19130                                           !BCC_EOS
19131                                           !BCC_EOS
19132                                           ! 2270   {
19133 4826           E9         00A8            br 	.C4
19134                       00004829            .C5:
19135                                           ! 2271    if (i & 1)
19136                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19137 4829           8A46         FB            mov	al,-5[bp]
19138 482C           24                     01  and	al,*1
19139 482E           84C0                       test	al,al
19140 4830           74           56            je  	.C6
19141                       00004832            .C7:
19142                                           ! 2272      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19143                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19144 4832           8A46         0A            mov	al,$A[bp]
19145 4835           30E4                       xor	ah,ah
19146 4837           50                         push	ax
19147                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19148 4838           8A46         FB            mov	al,-5[bp]
19149 483B           30E4                       xor	ah,ah
19150 483D           D1E8                       shr	ax,*1
19151                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19152 483F           89C3                       mov	bx,ax
19153 4841           8A46         0C            mov	al,$C[bp]
19154 4844           30E4                       xor	ah,ah
19155 4846           93                         xchg	ax,bx
19156 4847           89D9                       mov	cx,bx
19157 4849           F7E9                       imul	cx
19158 484B           50                         push	ax
19159                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19160                                           ! Debug: expression subtree swapping
19161 484C           8B46         FE            mov	ax,-2[bp]
19162                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19163 484F           05                   2000  add	ax,#$2000
19164 4852           0346         F6            add	ax,-$A[bp]
19165 4855           44                         inc	sp
19166 4856           44                         inc	sp
19167                                           ! Debug: list unsigned int = ax+0 (used reg = )
19168 4857           50                         push	ax
19169                                           ! Debug: list unsigned int = const $B800 (used reg = )
19170 4858           B8                   B800  mov	ax,#$B800
19171 485B           50                         push	ax
19172                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19173 485C           8A46         FB            mov	al,-5[bp]
19174 485F           30E4                       xor	ah,ah
19175 4861           D1E8                       shr	ax,*1
19176                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19177 4863           89C3                       mov	bx,ax
19178 4865           8A46         0C            mov	al,$C[bp]
19179 4868           30E4                       xor	ah,ah
19180 486A           93                         xchg	ax,bx
19181 486B           89D9                       mov	cx,bx
19182 486D           F7E9                       imul	cx
19183 486F           50                         push	ax
19184                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19185                                           ! Debug: expression subtree swapping
19186 4870           8B46         FC            mov	ax,-4[bp]
19187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19188 4873           05                   2000  add	ax,#$2000
19189 4876           0346         F2            add	ax,-$E[bp]
19190 4879           44                         inc	sp
19191 487A           44                         inc	sp
19192                                           ! Debug: list unsigned int = ax+0 (used reg = )
19193 487B           50                         push	ax
19194                                           ! Debug: list unsigned int = const $B800 (used reg = )
19195 487C           B8                   B800  mov	ax,#$B800
19196 487F           50                         push	ax
19197                                           ! Debug: func () void = memcpyb+0 (used reg = )
19198 4880           E8         345C            call	_memcpyb
19199 4883           83C4                   0A  add	sp,*$A
19200                                           !BCC_EOS
19201                                           ! 2273    else
19202                                           ! 2274      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19203 4886           EB           42            jmp .C8
19204                       00004888            .C6:
19205                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19206 4888           8A46         0A            mov	al,$A[bp]
19207 488B           30E4                       xor	ah,ah
19208 488D           50                         push	ax
19209                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19210 488E           8A46         FB            mov	al,-5[bp]
19211 4891           30E4                       xor	ah,ah
19212 4893           D1E8                       shr	ax,*1
19213                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19214 4895           89C3                       mov	bx,ax
19215 4897           8A46         0C            mov	al,$C[bp]
19216 489A           30E4                       xor	ah,ah
19217 489C           93                         xchg	ax,bx
19218 489D           89D9                       mov	cx,bx
19219 489F           F7E9                       imul	cx
19220                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19221                                           ! Debug: expression subtree swapping
19222 48A1           0346         FE            add	ax,-2[bp]
19223                                           ! Debug: list unsigned int = ax+0 (used reg = )
19224 48A4           50                         push	ax
19225                                           ! Debug: list unsigned int = const $B800 (used reg = )
19226 48A5           B8                   B800  mov	ax,#$B800
19227 48A8           50                         push	ax
19228                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19229 48A9           8A46         FB            mov	al,-5[bp]
19230 48AC           30E4                       xor	ah,ah
19231 48AE           D1E8                       shr	ax,*1
19232                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19233 48B0           89C3                       mov	bx,ax
19234 48B2           8A46         0C            mov	al,$C[bp]
19235 48B5           30E4                       xor	ah,ah
19236 48B7           93                         xchg	ax,bx
19237 48B8           89D9                       mov	cx,bx
19238 48BA           F7E9                       imul	cx
19239                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19240                                           ! Debug: expression subtree swapping
19241 48BC           0346         FC            add	ax,-4[bp]
19242                                           ! Debug: list unsigned int = ax+0 (used reg = )
19243 48BF           50                         push	ax
19244                                           ! Debug: list unsigned int = const $B800 (used reg = )
19245 48C0           B8                   B800  mov	ax,#$B800
19246 48C3           50                         push	ax
19247                                           ! Debug: func () void = memcpyb+0 (used reg = )
19248 48C4           E8         3418            call	_memcpyb
19249 48C7           83C4                   0A  add	sp,*$A
19250                                           !BCC_EOS
19251                                           ! 2275   }
19252                       000048CA            .C8:
19253                                           ! 2276 }
19254                       000048CA            .C3:
19255                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19256 48CA           8A46         FB            mov	al,-5[bp]
19257 48CD           40                         inc	ax
19258 48CE           8846         FB            mov	-5[bp],al
19259                       000048D1            .C4:
19260                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19261 48D1           8A46         FB            mov	al,-5[bp]
19262 48D4           3A46         0E            cmp	al,$E[bp]
19263 48D7         0F82         FF4E            blo 	.C5
19264                       000048DB            .C9:
19265                       000048DB            .C2:
19266 48DB           89EC                       mov	sp,bp
19267 48DD           5D                         pop	bp
19268 48DE           C3                         ret
19269                                           ! 2277 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19270                                           ! Register BX used in function vgamem_copy_cga
19271                                           ! 2278 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19272                       000048DF            _vgamem_fill_cga:
19273                                           !BCC_EOS
19274                                           !BCC_EOS
19275                                           !BCC_EOS
19276                                           !BCC_EOS
19277                                           !BCC_EOS
19278                                           !BCC_EOS
19279                                           ! 2279 {
19280                                           ! 2280  Bit16u dest;
19281                                           !BCC_EOS
19282                                           ! 2281  Bit8u i;
19283                                           !BCC_EOS
19284                                           ! 2282  dest=((ystart*cheight*nbcols)>>1)+xstart;
19285 48DF           55                         push	bp
19286 48E0           89E5                       mov	bp,sp
19287 48E2           83C4                   FC  add	sp,*-4
19288                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19289 48E5           8A46         0C            mov	al,$C[bp]
19290 48E8           30E4                       xor	ah,ah
19291 48EA           89C3                       mov	bx,ax
19292 48EC           8A46         06            mov	al,6[bp]
19293 48EF           30E4                       xor	ah,ah
19294 48F1           89D9                       mov	cx,bx
19295 48F3           F7E9                       imul	cx
19296                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19297 48F5           89C3                       mov	bx,ax
19298 48F7           8A46         0A            mov	al,$A[bp]
19299 48FA           30E4                       xor	ah,ah
19300 48FC           93                         xchg	ax,bx
19301 48FD           89D9                       mov	cx,bx
19302 48FF           F7E9                       imul	cx
19303                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19304 4901           D1E8                       shr	ax,*1
19305                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19306 4903           0246         04            add	al,4[bp]
19307 4906           80D4                   00  adc	ah,*0
19308                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19309 4909           8946         FE            mov	-2[bp],ax
19310                                           !BCC_EOS
19311                                           ! 2283  for(i=0;i<cheight;i++)
19312                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19313 490C           30C0                       xor	al,al
19314 490E           8846         FD            mov	-3[bp],al
19315                                           !BCC_EOS
19316                                           !BCC_EOS
19317                                           ! 2284   {
19318 4911           EB           75            jmp .CC
19319                       00004913            .CD:
19320                                           ! 2285    if (i & 1)
19321                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19322 4913           8A46         FD            mov	al,-3[bp]
19323 4916           24                     01  and	al,*1
19324 4918           84C0                       test	al,al
19325 491A           74           38            je  	.CE
19326                       0000491C            .CF:
19327                                           ! 2286      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19328                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19329 491C           8A46         08            mov	al,8[bp]
19330 491F           30E4                       xor	ah,ah
19331 4921           50                         push	ax
19332                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19333 4922           8A46         0E            mov	al,$E[bp]
19334 4925           30E4                       xor	ah,ah
19335 4927           50                         push	ax
19336                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19337 4928           8A46         FD            mov	al,-3[bp]
19338 492B           30E4                       xor	ah,ah
19339 492D           D1E8                       shr	ax,*1
19340                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19341 492F           89C3                       mov	bx,ax
19342 4931           8A46         0A            mov	al,$A[bp]
19343 4934           30E4                       xor	ah,ah
19344 4936           93                         xchg	ax,bx
19345 4937           89D9                       mov	cx,bx
19346 4939           F7E9                       imul	cx
19347 493B           50                         push	ax
19348                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19349                                           ! Debug: expression subtree swapping
19350 493C           8B46         FE            mov	ax,-2[bp]
19351                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19352 493F           05                   2000  add	ax,#$2000
19353 4942           0346         F6            add	ax,-$A[bp]
19354 4945           44                         inc	sp
19355 4946           44                         inc	sp
19356                                           ! Debug: list unsigned int = ax+0 (used reg = )
19357 4947           50                         push	ax
19358                                           ! Debug: list unsigned int = const $B800 (used reg = )
19359 4948           B8                   B800  mov	ax,#$B800
19360 494B           50                         push	ax
19361                                           ! Debug: func () void = memsetb+0 (used reg = )
19362 494C           E8         3346            call	_memsetb
19363 494F           83C4                   08  add	sp,*8
19364                                           !BCC_EOS
19365                                           ! 2287    else
19366                                           ! 2288      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19367 4952           EB           2D            jmp .D0
19368                       00004954            .CE:
19369                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19370 4954           8A46         08            mov	al,8[bp]
19371 4957           30E4                       xor	ah,ah
19372 4959           50                         push	ax
19373                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19374 495A           8A46         0E            mov	al,$E[bp]
19375 495D           30E4                       xor	ah,ah
19376 495F           50                         push	ax
19377                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19378 4960           8A46         FD            mov	al,-3[bp]
19379 4963           30E4                       xor	ah,ah
19380 4965           D1E8                       shr	ax,*1
19381                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19382 4967           89C3                       mov	bx,ax
19383 4969           8A46         0A            mov	al,$A[bp]
19384 496C           30E4                       xor	ah,ah
19385 496E           93                         xchg	ax,bx
19386 496F           89D9                       mov	cx,bx
19387 4971           F7E9                       imul	cx
19388                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19389                                           ! Debug: expression subtree swapping
19390 4973           0346         FE            add	ax,-2[bp]
19391                                           ! Debug: list unsigned int = ax+0 (used reg = )
19392 4976           50                         push	ax
19393                                           ! Debug: list unsigned int = const $B800 (used reg = )
19394 4977           B8                   B800  mov	ax,#$B800
19395 497A           50                         push	ax
19396                                           ! Debug: func () void = memsetb+0 (used reg = )
19397 497B           E8         3317            call	_memsetb
19398 497E           83C4                   08  add	sp,*8
19399                                           !BCC_EOS
19400                                           ! 2289   }
19401                       00004981            .D0:
19402                                           ! 2290 }
19403                       00004981            .CB:
19404                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19405 4981           8A46         FD            mov	al,-3[bp]
19406 4984           40                         inc	ax
19407 4985           8846         FD            mov	-3[bp],al
19408                       00004988            .CC:
19409                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19410 4988           8A46         FD            mov	al,-3[bp]
19411 498B           3A46         0C            cmp	al,$C[bp]
19412 498E           72           83            jb 	.CD
19413                       00004990            .D1:
19414                       00004990            .CA:
19415 4990           89EC                       mov	sp,bp
19416 4992           5D                         pop	bp
19417 4993           C3                         ret
19418                                           ! 2291 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19419                                           ! Register BX used in function vgamem_fill_cga
19420                                           ! 2292 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19421                       00004994            _biosfn_scroll:
19422                                           !BCC_EOS
19423                                           !BCC_EOS
19424                                           !BCC_EOS
19425                                           !BCC_EOS
19426                                           !BCC_EOS
19427                                           !BCC_EOS
19428                                           !BCC_EOS
19429                                           !BCC_EOS
19430                                           ! 2293 {
19431                                           ! 2294  Bit8u mode,line,cheight,bpp,cols;
19432                                           !BCC_EOS
19433                                           ! 2295  Bit16u nbcols,nbrows,i;
19434                                           !BCC_EOS
19435                                           ! 2296  Bit16u address;
19436                                           !BCC_EOS
19437                                           ! 2297  if(rul>rlr)return;
19438 4994           55                         push	bp
19439 4995           89E5                       mov	bp,sp
19440 4997           83C4                   F2  add	sp,*-$E
19441                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19442 499A           8A46         08            mov	al,8[bp]
19443 499D           3A46         0C            cmp	al,$C[bp]
19444 49A0           76           04            jbe 	.D2
19445                       000049A2            .D3:
19446 49A2           89EC                       mov	sp,bp
19447 49A4           5D                         pop	bp
19448 49A5           C3                         ret
19449                                           !BCC_EOS
19450                                           ! 2298  if(cul>clr)return;
19451                       000049A6            .D2:
19452                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19453 49A6           8A46         0A            mov	al,$A[bp]
19454 49A9           3A46         0E            cmp	al,$E[bp]
19455 49AC           76           04            jbe 	.D4
19456                       000049AE            .D5:
19457 49AE           89EC                       mov	sp,bp
19458 49B0           5D                         pop	bp
19459 49B1           C3                         ret
19460                                           !BCC_EOS
19461                                           ! 2299  mode=read_byte(0x40,0x49);
19462                       000049B2            .D4:
19463                                           ! Debug: list int = const $49 (used reg = )
19464 49B2           B8                   0049  mov	ax,*$49
19465 49B5           50                         push	ax
19466                                           ! Debug: list int = const $40 (used reg = )
19467 49B6           B8                   0040  mov	ax,*$40
19468 49B9           50                         push	ax
19469                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19470 49BA           E8         3382            call	_read_byte
19471 49BD           83C4                   04  add	sp,*4
19472                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19473 49C0           8846         FF            mov	-1[bp],al
19474                                           !BCC_EOS
19475                                           ! 2300  line=find_vga_entry(mode);
19476                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19477 49C3           8A46         FF            mov	al,-1[bp]
19478 49C6           30E4                       xor	ah,ah
19479 49C8           50                         push	ax
19480                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19481 49C9           E8         3287            call	_find_vga_entry
19482 49CC           44                         inc	sp
19483 49CD           44                         inc	sp
19484                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19485 49CE           8846         FE            mov	-2[bp],al
19486                                           !BCC_EOS
19487                                           ! 2301  if(line==0xFF)return;
19488                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19489 49D1           8A46         FE            mov	al,-2[bp]
19490 49D4           3C                     FF  cmp	al,#$FF
19491 49D6           75           04            jne 	.D6
19492                       000049D8            .D7:
19493 49D8           89EC                       mov	sp,bp
19494 49DA           5D                         pop	bp
19495 49DB           C3                         ret
19496                                           !BCC_EOS
19497                                           ! 2302  nbrows=read_byte(0x40,0x84)+1;
19498                       000049DC            .D6:
19499                                           ! Debug: list int = const $84 (used reg = )
19500 49DC           B8                   0084  mov	ax,#$84
19501 49DF           50                         push	ax
19502                                           ! Debug: list int = const $40 (used reg = )
19503 49E0           B8                   0040  mov	ax,*$40
19504 49E3           50                         push	ax
19505                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19506 49E4           E8         3358            call	_read_byte
19507 49E7           83C4                   04  add	sp,*4
19508                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19509 49EA           30E4                       xor	ah,ah
19510                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19511 49EC           40                         inc	ax
19512 49ED           8946         F6            mov	-$A[bp],ax
19513                                           !BCC_EOS
19514                                           ! 2303  nbcols=read_word(0x40,0x4A);
19515                                           ! Debug: list int = const $4A (used reg = )
19516 49F0           B8                   004A  mov	ax,*$4A
19517 49F3           50                         push	ax
19518                                           ! Debug: list int = const $40 (used reg = )
19519 49F4           B8                   0040  mov	ax,*$40
19520 49F7           50                         push	ax
19521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19522 49F8           E8         3357            call	_read_word
19523 49FB           83C4                   04  add	sp,*4
19524                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19525 49FE           8946         F8            mov	-8[bp],ax
19526                                           !BCC_EOS
19527                                           ! 2304  if(page==0xFF)
19528                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19529 4A01           8A46         10            mov	al,$10[bp]
19530 4A04           3C                     FF  cmp	al,#$FF
19531 4A06           75           11            jne 	.D8
19532                       00004A08            .D9:
19533                                           ! 2305   page=read_byte(0x40,0x62);
19534                                           ! Debug: list int = const $62 (used reg = )
19535 4A08           B8                   0062  mov	ax,*$62
19536 4A0B           50                         push	ax
19537                                           ! Debug: list int = const $40 (used reg = )
19538 4A0C           B8                   0040  mov	ax,*$40
19539 4A0F           50                         push	ax
19540                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19541 4A10           E8         332C            call	_read_byte
19542 4A13           83C4                   04  add	sp,*4
19543                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19544 4A16           8846         10            mov	$10[bp],al
19545                                           !BCC_EOS
19546                                           ! 2306  if(rlr>=nbrows)rlr=nbrows-1;
19547                       00004A19            .D8:
19548                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19549 4A19           8A46         0C            mov	al,$C[bp]
19550 4A1C           30E4                       xor	ah,ah
19551 4A1E           3B46         F6            cmp	ax,-$A[bp]
19552 4A21           72           07            jb  	.DA
19553                       00004A23            .DB:
19554                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19555 4A23           8B46         F6            mov	ax,-$A[bp]
19556                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19557 4A26           48                         dec	ax
19558 4A27           8846         0C            mov	$C[bp],al
19559                                           !BCC_EOS
19560                                           ! 2307  if(clr>=nbcols)clr=nbcols-1;
19561                       00004A2A            .DA:
19562                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19563 4A2A           8A46         0E            mov	al,$E[bp]
19564 4A2D           30E4                       xor	ah,ah
19565 4A2F           3B46         F8            cmp	ax,-8[bp]
19566 4A32           72           07            jb  	.DC
19567                       00004A34            .DD:
19568                                           ! 2307 
19569                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19570 4A34           8B46         F8            mov	ax,-8[bp]
19571                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19572 4A37           48                         dec	ax
19573 4A38           8846         0E            mov	$E[bp],al
19574                                           !BCC_EOS
19575                                           ! 2308  if(nblines>nbrows)nblines=0;
19576                       00004A3B            .DC:
19577                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19578 4A3B           8A46         04            mov	al,4[bp]
19579 4A3E           30E4                       xor	ah,ah
19580 4A40           3B46         F6            cmp	ax,-$A[bp]
19581 4A43           76           05            jbe 	.DE
19582                       00004A45            .DF:
19583                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19584 4A45           30C0                       xor	al,al
19585 4A47           8846         04            mov	4[bp],al
19586                                           !BCC_EOS
19587                                           ! 2309  cols=clr-cul+1;
19588                       00004A4A            .DE:
19589                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19590 4A4A           8A46         0E            mov	al,$E[bp]
19591 4A4D           30E4                       xor	ah,ah
19592 4A4F           2A46         0A            sub	al,$A[bp]
19593 4A52           80DC                   00  sbb	ah,*0
19594                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19595                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19596 4A55           40                         inc	ax
19597 4A56           8846         FB            mov	-5[bp],al
19598                                           !BCC_EOS
19599                                           ! 2310  if(vga_modes[line].class==0x00)
19600                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19601 4A59           8A46         FE            mov	al,-2[bp]
19602 4A5C           30E4                       xor	ah,ah
19603 4A5E           B1                     03  mov	cl,*3
19604 4A60           D3E0                       shl	ax,cl
19605 4A62           89C3                       mov	bx,ax
19606 4A64           81C3                 020B  add	bx,#_vga_modes
19607                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19608 4A68           8A47         01            mov	al,1[bx]
19609 4A6B           84C0                       test	al,al
19610 4A6D         0F85         0269            bne 	.E0
19611                       00004A71            .E1:
19612                                           ! 2311   {
19613                                           ! 2312    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19614                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19615 4A71           8B46         F8            mov	ax,-8[bp]
19616 4A74           8B4E         F6            mov	cx,-$A[bp]
19617 4A77           F7E9                       imul	cx
19618                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19619 4A79           D1E0                       shl	ax,*1
19620                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19621 4A7B           0C                     FF  or	al,#$FF
19622                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19623                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19624 4A7D           89C3                       mov	bx,ax
19625 4A7F           8A46         10            mov	al,$10[bp]
19626 4A82           30E4                       xor	ah,ah
19627 4A84           93                         xchg	ax,bx
19628 4A85           40                         inc	ax
19629 4A86           89D9                       mov	cx,bx
19630 4A88           F7E9                       imul	cx
19631                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19632 4A8A           8946         F2            mov	-$E[bp],ax
19633                                           !BCC_EOS
19634                                           ! 2313    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19635                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19636 4A8D           8A46         10            mov	al,$10[bp]
19637 4A90           30E4                       xor	ah,ah
19638 4A92           50                         push	ax
19639                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19640 4A93           FF76         F8            push	-8[bp]
19641                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19642 4A96           FF76         F6            push	-$A[bp]
19643                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19644 4A99           FF76         F2            push	-$E[bp]
19645                                           ! Debug: list * char = .E2+0 (used reg = )
19646 4A9C           BB                   A594  mov	bx,#.E2
19647 4A9F           53                         push	bx
19648                                           ! Debug: func () void = printf+0 (used reg = )
19649 4AA0           E8         3347            call	_printf
19650 4AA3           83C4                   0A  add	sp,*$A
19651                                           !BCC_EOS
19652                                           ! 2314    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19653                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19654 4AA6           8A46         04            mov	al,4[bp]
19655 4AA9           84C0                       test	al,al
19656 4AAB           75           67            jne 	.E3
19657                       00004AAD            .E8:
19658                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19659 4AAD           8A46         08            mov	al,8[bp]
19660 4AB0           84C0                       test	al,al
19661 4AB2           75           60            jne 	.E3
19662                       00004AB4            .E7:
19663                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19664 4AB4           8A46         0A            mov	al,$A[bp]
19665 4AB7           84C0                       test	al,al
19666 4AB9           75           59            jne 	.E3
19667                       00004ABB            .E6:
19668                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19669 4ABB           8B46         F6            mov	ax,-$A[bp]
19670                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19671                                           ! Debug: expression subtree swapping
19672 4ABE           48                         dec	ax
19673 4ABF           50                         push	ax
19674 4AC0           8A46         0C            mov	al,$C[bp]
19675 4AC3           30E4                       xor	ah,ah
19676 4AC5           3B46         F0            cmp	ax,-$10[bp]
19677 4AC8           8D66         F2            lea	sp,-$E[bp]
19678 4ACB           75           47            jne 	.E3
19679                       00004ACD            .E5:
19680                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19681 4ACD           8B46         F8            mov	ax,-8[bp]
19682                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19683                                           ! Debug: expression subtree swapping
19684 4AD0           48                         dec	ax
19685 4AD1           50                         push	ax
19686 4AD2           8A46         0E            mov	al,$E[bp]
19687 4AD5           30E4                       xor	ah,ah
19688 4AD7           3B46         F0            cmp	ax,-$10[bp]
19689 4ADA           8D66         F2            lea	sp,-$E[bp]
19690 4ADD           75           35            jne 	.E3
19691                       00004ADF            .E4:
19692                                           ! 2315     {
19693                                           ! 2316      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19694                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19695 4ADF           8B46         F6            mov	ax,-$A[bp]
19696 4AE2           8B4E         F8            mov	cx,-8[bp]
19697 4AE5           F7E9                       imul	cx
19698                                           ! Debug: list unsigned int = ax+0 (used reg = )
19699 4AE7           50                         push	ax
19700                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19701 4AE8           8A46         06            mov	al,6[bp]
19702 4AEB           30E4                       xor	ah,ah
19703                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19704 4AED           B9                   0100  mov	cx,#$100
19705 4AF0           F7E9                       imul	cx
19706                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19707                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19708 4AF2           05                   0020  add	ax,*$20
19709 4AF5           50                         push	ax
19710                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19711 4AF6           FF76         F2            push	-$E[bp]
19712                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19713 4AF9           8A46         FE            mov	al,-2[bp]
19714 4AFC           30E4                       xor	ah,ah
19715 4AFE           B1                     03  mov	cl,*3
19716 4B00           D3E0                       shl	ax,cl
19717 4B02           89C3                       mov	bx,ax
19718 4B04           81C3                 020B  add	bx,#_vga_modes
19719                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19720 4B08           FF77         04            push	4[bx]
19721                                           ! Debug: func () void = memsetw+0 (used reg = )
19722 4B0B           E8         31AC            call	_memsetw
19723 4B0E           83C4                   08  add	sp,*8
19724                                           !BCC_EOS
19725                                           ! 2317     }
19726                                           ! 2318    else
19727                                           ! 2319     {
19728 4B11           E9         01C3            br 	.E9
19729                       00004B14            .E3:
19730                                           ! 2320      if(dir==1)
19731                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19732 4B14           8A46         12            mov	al,$12[bp]
19733 4B17           3C                     01  cmp	al,*1
19734 4B19         0F85         00DC            bne 	.EA
19735                       00004B1D            .EB:
19736                                           ! 2321       {for(i=rul;i<=rlr;i++)
19737                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19738 4B1D           8A46         08            mov	al,8[bp]
19739 4B20           30E4                       xor	ah,ah
19740 4B22           8946         F4            mov	-$C[bp],ax
19741                                           !BCC_EOS
19742                                           !BCC_EOS
19743                                           ! 2322         {
19744 4B25           E9         00C2            br 	.EE
19745                       00004B28            .EF:
19746                                           ! 2323          if((i+nblines>rlr)||(nblines==0))
19747                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19748 4B28           8B46         F4            mov	ax,-$C[bp]
19749 4B2B           0246         04            add	al,4[bp]
19750 4B2E           80D4                   00  adc	ah,*0
19751                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19752 4B31           50                         push	ax
19753 4B32           8A46         0C            mov	al,$C[bp]
19754 4B35           30E4                       xor	ah,ah
19755 4B37           3B46         F0            cmp	ax,-$10[bp]
19756 4B3A           8D66         F2            lea	sp,-$E[bp]
19757 4B3D           72           07            jb  	.F1
19758                       00004B3F            .F2:
19759                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19760 4B3F           8A46         04            mov	al,4[bp]
19761 4B42           84C0                       test	al,al
19762 4B44           75           42            jne 	.F0
19763                       00004B46            .F1:
19764                                           ! 2324           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19765                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19766 4B46           8A46         FB            mov	al,-5[bp]
19767 4B49           30E4                       xor	ah,ah
19768 4B4B           50                         push	ax
19769                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19770 4B4C           8A46         06            mov	al,6[bp]
19771 4B4F           30E4                       xor	ah,ah
19772                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19773 4B51           B9                   0100  mov	cx,#$100
19774 4B54           F7E9                       imul	cx
19775                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19776                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19777 4B56           05                   0020  add	ax,*$20
19778 4B59           50                         push	ax
19779                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19780 4B5A           8B46         F4            mov	ax,-$C[bp]
19781 4B5D           8B4E         F8            mov	cx,-8[bp]
19782 4B60           F7E9                       imul	cx
19783                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19784 4B62           0246         0A            add	al,$A[bp]
19785 4B65           80D4                   00  adc	ah,*0
19786                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19787 4B68           D1E0                       shl	ax,*1
19788                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19789                                           ! Debug: expression subtree swapping
19790 4B6A           0346         F2            add	ax,-$E[bp]
19791                                           ! Debug: list unsigned int = ax+0 (used reg = )
19792 4B6D           50                         push	ax
19793                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19794 4B6E           8A46         FE            mov	al,-2[bp]
19795 4B71           30E4                       xor	ah,ah
19796 4B73           B1                     03  mov	cl,*3
19797 4B75           D3E0                       shl	ax,cl
19798 4B77           89C3                       mov	bx,ax
19799 4B79           81C3                 020B  add	bx,#_vga_modes
19800                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19801 4B7D           FF77         04            push	4[bx]
19802                                           ! Debug: func () void = memsetw+0 (used reg = )
19803 4B80           E8         3137            call	_memsetw
19804 4B83           83C4                   08  add	sp,*8
19805                                           !BCC_EOS
19806                                           ! 2325          else
19807                                           ! 2326           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19808 4B86           EB           5B            jmp .F3
19809                       00004B88            .F0:
19810                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19811 4B88           8A46         FB            mov	al,-5[bp]
19812 4B8B           30E4                       xor	ah,ah
19813 4B8D           50                         push	ax
19814                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19815 4B8E           8B46         F4            mov	ax,-$C[bp]
19816 4B91           0246         04            add	al,4[bp]
19817 4B94           80D4                   00  adc	ah,*0
19818                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19819 4B97           8B4E         F8            mov	cx,-8[bp]
19820 4B9A           F7E9                       imul	cx
19821                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19822 4B9C           0246         0A            add	al,$A[bp]
19823 4B9F           80D4                   00  adc	ah,*0
19824                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19825 4BA2           D1E0                       shl	ax,*1
19826                                           ! Debug: list unsigned int = ax+0 (used reg = )
19827 4BA4           50                         push	ax
19828                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19829 4BA5           8A46         FE            mov	al,-2[bp]
19830 4BA8           30E4                       xor	ah,ah
19831 4BAA           B1                     03  mov	cl,*3
19832 4BAC           D3E0                       shl	ax,cl
19833 4BAE           89C3                       mov	bx,ax
19834 4BB0           81C3                 020B  add	bx,#_vga_modes
19835                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19836 4BB4           FF77         04            push	4[bx]
19837                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19838 4BB7           8B46         F4            mov	ax,-$C[bp]
19839 4BBA           8B4E         F8            mov	cx,-8[bp]
19840 4BBD           F7E9                       imul	cx
19841                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19842 4BBF           0246         0A            add	al,$A[bp]
19843 4BC2           80D4                   00  adc	ah,*0
19844                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19845 4BC5           D1E0                       shl	ax,*1
19846                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19847                                           ! Debug: expression subtree swapping
19848 4BC7           0346         F2            add	ax,-$E[bp]
19849                                           ! Debug: list unsigned int = ax+0 (used reg = )
19850 4BCA           50                         push	ax
19851                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19852 4BCB           8A46         FE            mov	al,-2[bp]
19853 4BCE           30E4                       xor	ah,ah
19854 4BD0           B1                     03  mov	cl,*3
19855 4BD2           D3E0                       shl	ax,cl
19856 4BD4           89C3                       mov	bx,ax
19857 4BD6           81C3                 020B  add	bx,#_vga_modes
19858                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19859 4BDA           FF77         04            push	4[bx]
19860                                           ! Debug: func () void = memcpyw+0 (used reg = )
19861 4BDD           E8         312F            call	_memcpyw
19862 4BE0           83C4                   0A  add	sp,*$A
19863                                           !BCC_EOS
19864                                           ! 2327         }
19865                       00004BE3            .F3:
19866                                           ! 2328       }
19867                       00004BE3            .ED:
19868                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19869 4BE3           8B46         F4            mov	ax,-$C[bp]
19870 4BE6           40                         inc	ax
19871 4BE7           8946         F4            mov	-$C[bp],ax
19872                       00004BEA            .EE:
19873                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19874 4BEA           8A46         0C            mov	al,$C[bp]
19875 4BED           30E4                       xor	ah,ah
19876 4BEF           3B46         F4            cmp	ax,-$C[bp]
19877 4BF2         0F83         FF32            bhis	.EF
19878                       00004BF6            .F4:
19879                       00004BF6            .EC:
19880                                           ! 2329      else
19881                                           ! 2330       {for(i=rlr;i>=rul;i--)
19882 4BF6           E9         00DE            br 	.F5
19883                       00004BF9            .EA:
19884                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19885 4BF9           8A46         0C            mov	al,$C[bp]
19886 4BFC           30E4                       xor	ah,ah
19887 4BFE           8946         F4            mov	-$C[bp],ax
19888                                           !BCC_EOS
19889                                           !BCC_EOS
19890                                           ! 2331         {
19891 4C01           E9         00C7            br 	.F8
19892                       00004C04            .F9:
19893                                           ! 2332          if((i<rul+nblines)||(nblines==0))
19894                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19895 4C04           8A46         08            mov	al,8[bp]
19896 4C07           30E4                       xor	ah,ah
19897 4C09           0246         04            add	al,4[bp]
19898 4C0C           80D4                   00  adc	ah,*0
19899                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19900 4C0F           3B46         F4            cmp	ax,-$C[bp]
19901 4C12           77           07            ja  	.FB
19902                       00004C14            .FC:
19903                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19904 4C14           8A46         04            mov	al,4[bp]
19905 4C17           84C0                       test	al,al
19906 4C19           75           42            jne 	.FA
19907                       00004C1B            .FB:
19908                                           ! 2333           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19909                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19910 4C1B           8A46         FB            mov	al,-5[bp]
19911 4C1E           30E4                       xor	ah,ah
19912 4C20           50                         push	ax
19913                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19914 4C21           8A46         06            mov	al,6[bp]
19915 4C24           30E4                       xor	ah,ah
19916                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19917 4C26           B9                   0100  mov	cx,#$100
19918 4C29           F7E9                       imul	cx
19919                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19920                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19921 4C2B           05                   0020  add	ax,*$20
19922 4C2E           50                         push	ax
19923                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19924 4C2F           8B46         F4            mov	ax,-$C[bp]
19925 4C32           8B4E         F8            mov	cx,-8[bp]
19926 4C35           F7E9                       imul	cx
19927                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19928 4C37           0246         0A            add	al,$A[bp]
19929 4C3A           80D4                   00  adc	ah,*0
19930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19931 4C3D           D1E0                       shl	ax,*1
19932                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19933                                           ! Debug: expression subtree swapping
19934 4C3F           0346         F2            add	ax,-$E[bp]
19935                                           ! Debug: list unsigned int = ax+0 (used reg = )
19936 4C42           50                         push	ax
19937                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19938 4C43           8A46         FE            mov	al,-2[bp]
19939 4C46           30E4                       xor	ah,ah
19940 4C48           B1                     03  mov	cl,*3
19941 4C4A           D3E0                       shl	ax,cl
19942 4C4C           89C3                       mov	bx,ax
19943 4C4E           81C3                 020B  add	bx,#_vga_modes
19944                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19945 4C52           FF77         04            push	4[bx]
19946                                           ! Debug: func () void = memsetw+0 (used reg = )
19947 4C55           E8         3062            call	_memsetw
19948 4C58           83C4                   08  add	sp,*8
19949                                           !BCC_EOS
19950                                           ! 2334          else
19951                                           ! 2335           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19952 4C5B           EB           5B            jmp .FD
19953                       00004C5D            .FA:
19954                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19955 4C5D           8A46         FB            mov	al,-5[bp]
19956 4C60           30E4                       xor	ah,ah
19957 4C62           50                         push	ax
19958                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19959 4C63           8B46         F4            mov	ax,-$C[bp]
19960 4C66           2A46         04            sub	al,4[bp]
19961 4C69           80DC                   00  sbb	ah,*0
19962                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19963 4C6C           8B4E         F8            mov	cx,-8[bp]
19964 4C6F           F7E9                       imul	cx
19965                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19966 4C71           0246         0A            add	al,$A[bp]
19967 4C74           80D4                   00  adc	ah,*0
19968                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19969 4C77           D1E0                       shl	ax,*1
19970                                           ! Debug: list unsigned int = ax+0 (used reg = )
19971 4C79           50                         push	ax
19972                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19973 4C7A           8A46         FE            mov	al,-2[bp]
19974 4C7D           30E4                       xor	ah,ah
19975 4C7F           B1                     03  mov	cl,*3
19976 4C81           D3E0                       shl	ax,cl
19977 4C83           89C3                       mov	bx,ax
19978 4C85           81C3                 020B  add	bx,#_vga_modes
19979                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19980 4C89           FF77         04            push	4[bx]
19981                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19982 4C8C           8B46         F4            mov	ax,-$C[bp]
19983 4C8F           8B4E         F8            mov	cx,-8[bp]
19984 4C92           F7E9                       imul	cx
19985                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19986 4C94           0246         0A            add	al,$A[bp]
19987 4C97           80D4                   00  adc	ah,*0
19988                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19989 4C9A           D1E0                       shl	ax,*1
19990                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19991                                           ! Debug: expression subtree swapping
19992 4C9C           0346         F2            add	ax,-$E[bp]
19993                                           ! Debug: list unsigned int = ax+0 (used reg = )
19994 4C9F           50                         push	ax
19995                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19996 4CA0           8A46         FE            mov	al,-2[bp]
19997 4CA3           30E4                       xor	ah,ah
19998 4CA5           B1                     03  mov	cl,*3
19999 4CA7           D3E0                       shl	ax,cl
20000 4CA9           89C3                       mov	bx,ax
20001 4CAB           81C3                 020B  add	bx,#_vga_modes
20002                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20003 4CAF           FF77         04            push	4[bx]
20004                                           ! Debug: func () void = memcpyw+0 (used reg = )
20005 4CB2           E8         305A            call	_memcpyw
20006 4CB5           83C4                   0A  add	sp,*$A
20007                                           !BCC_EOS
20008                                           ! 2336          if (i>rlr) break;
20009                       00004CB8            .FD:
20010                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20011 4CB8           8A46         0C            mov	al,$C[bp]
20012 4CBB           30E4                       xor	ah,ah
20013 4CBD           3B46         F4            cmp	ax,-$C[bp]
20014 4CC0           73           02            jae 	.FE
20015                       00004CC2            .FF:
20016 4CC2           EB           13            jmp .F6
20017                                           !BCC_EOS
20018                                           ! 2337         }
20019                       00004CC4            .FE:
20020                                           ! 2338       }
20021                       00004CC4            .F7:
20022                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20023 4CC4           8B46         F4            mov	ax,-$C[bp]
20024 4CC7           48                         dec	ax
20025 4CC8           8946         F4            mov	-$C[bp],ax
20026                       00004CCB            .F8:
20027                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20028 4CCB           8A46         08            mov	al,8[bp]
20029 4CCE           30E4                       xor	ah,ah
20030 4CD0           3B46         F4            cmp	ax,-$C[bp]
20031 4CD3         0F86         FF2D            blos	.F9
20032                       00004CD7            .100:
20033                       00004CD7            .F6:
20034                                           ! 2339     }
20035                       00004CD7            .F5:
20036                                           ! 2340   }
20037                       00004CD7            .E9:
20038                                           ! 2341  else
20039                                           ! 2342   {
20040 4CD7           E9         03E4            br 	.101
20041                       00004CDA            .E0:
20042                                           ! 2343    cheight=video_param_table[line_to_vpti[line]].cheight;
20043                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20044 4CDA           8A46         FE            mov	al,-2[bp]
20045 4CDD           30E4                       xor	ah,ah
20046 4CDF           89C3                       mov	bx,ax
20047                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20048 4CE1           8A87       028B            mov	al,_line_to_vpti[bx]
20049 4CE5           30E4                       xor	ah,ah
20050 4CE7           B1                     06  mov	cl,*6
20051 4CE9           D3E0                       shl	ax,cl
20052 4CEB           89C3                       mov	bx,ax
20053 4CED           81C3                 029F  add	bx,#_video_param_table
20054                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20055 4CF1           8A47         02            mov	al,2[bx]
20056 4CF4           8846         FD            mov	-3[bp],al
20057                                           !BCC_EOS
20058                                           ! 2344    switch(vga_modes[line].memmodel)
20059                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20060 4CF7           8A46         FE            mov	al,-2[bp]
20061 4CFA           30E4                       xor	ah,ah
20062 4CFC           B1                     03  mov	cl,*3
20063 4CFE           D3E0                       shl	ax,cl
20064 4D00           89C3                       mov	bx,ax
20065 4D02           81C3                 020B  add	bx,#_vga_modes
20066 4D06           8A47         02            mov	al,2[bx]
20067                                           ! 2345     {
20068 4D09           E9         039E            br 	.104
20069                                           ! 2346      case 0x04:
20070                                           ! 2347      case 0x03:
20071                       00004D0C            .105:
20072                                           ! 2348        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20073                       00004D0C            .106:
20074                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20075 4D0C           8A46         04            mov	al,4[bp]
20076 4D0F           84C0                       test	al,al
20077 4D11         0F85         0089            bne 	.107
20078                       00004D15            .10C:
20079                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20080 4D15           8A46         08            mov	al,8[bp]
20081 4D18           84C0                       test	al,al
20082 4D1A         0F85         0080            bne 	.107
20083                       00004D1E            .10B:
20084                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20085 4D1E           8A46         0A            mov	al,$A[bp]
20086 4D21           84C0                       test	al,al
20087 4D23           75           79            jne 	.107
20088                       00004D25            .10A:
20089                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20090 4D25           8B46         F6            mov	ax,-$A[bp]
20091                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20092                                           ! Debug: expression subtree swapping
20093 4D28           48                         dec	ax
20094 4D29           50                         push	ax
20095 4D2A           8A46         0C            mov	al,$C[bp]
20096 4D2D           30E4                       xor	ah,ah
20097 4D2F           3B46         F0            cmp	ax,0+..FFFC[bp]
20098 4D32           8D66         F2            lea	sp,2+..FFFC[bp]
20099 4D35           75           67            jne 	.107
20100                       00004D37            .109:
20101                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20102 4D37           8B46         F8            mov	ax,-8[bp]
20103                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20104                                           ! Debug: expression subtree swapping
20105 4D3A           48                         dec	ax
20106 4D3B           50                         push	ax
20107 4D3C           8A46         0E            mov	al,$E[bp]
20108 4D3F           30E4                       xor	ah,ah
20109 4D41           3B46         F0            cmp	ax,0+..FFFC[bp]
20110 4D44           8D66         F2            lea	sp,2+..FFFC[bp]
20111 4D47           75           55            jne 	.107
20112                       00004D49            .108:
20113                                           ! 2349         {
20114                                           ! 2350          outw(0x3ce, 0x0205);
20115                                           ! Debug: list int = const $205 (used reg = )
20116 4D49           B8                   0205  mov	ax,#$205
20117 4D4C           50                         push	ax
20118                                           ! Debug: list int = const $3CE (used reg = )
20119 4D4D           B8                   03CE  mov	ax,#$3CE
20120 4D50           50                         push	ax
20121                                           ! Debug: func () void = outw+0 (used reg = )
20122 4D51           E8         3067            call	_outw
20123 4D54           83C4                   04  add	sp,*4
20124                                           !BCC_EOS
20125                                           ! 2351          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20126                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20127 4D57           8B46         F6            mov	ax,-$A[bp]
20128 4D5A           8B4E         F8            mov	cx,-8[bp]
20129 4D5D           F7E9                       imul	cx
20130                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20131 4D5F           89C3                       mov	bx,ax
20132 4D61           8A46         FD            mov	al,-3[bp]
20133 4D64           30E4                       xor	ah,ah
20134 4D66           93                         xchg	ax,bx
20135 4D67           89D9                       mov	cx,bx
20136 4D69           F7E9                       imul	cx
20137                                           ! Debug: list unsigned int = ax+0 (used reg = )
20138 4D6B           50                         push	ax
20139                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20140 4D6C           8A46         06            mov	al,6[bp]
20141 4D6F           30E4                       xor	ah,ah
20142 4D71           50                         push	ax
20143                                           ! Debug: list int = const 0 (used reg = )
20144 4D72           31C0                       xor	ax,ax
20145 4D74           50                         push	ax
20146                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20147 4D75           8A46         FE            mov	al,-2[bp]
20148 4D78           30E4                       xor	ah,ah
20149 4D7A           B1                     03  mov	cl,*3
20150 4D7C           D3E0                       shl	ax,cl
20151 4D7E           89C3                       mov	bx,ax
20152 4D80           81C3                 020B  add	bx,#_vga_modes
20153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20154 4D84           FF77         04            push	4[bx]
20155                                           ! Debug: func () void = memsetb+0 (used reg = )
20156 4D87           E8         2F0B            call	_memsetb
20157 4D8A           83C4                   08  add	sp,*8
20158                                           !BCC_EOS
20159                                           ! 2352          outw(0x3ce, 0x0005);
20160                                           ! Debug: list int = const 5 (used reg = )
20161 4D8D           B8                   0005  mov	ax,*5
20162 4D90           50                         push	ax
20163                                           ! Debug: list int = const $3CE (used reg = )
20164 4D91           B8                   03CE  mov	ax,#$3CE
20165 4D94           50                         push	ax
20166                                           ! Debug: func () void = outw+0 (used reg = )
20167 4D95           E8         3023            call	_outw
20168 4D98           83C4                   04  add	sp,*4
20169                                           !BCC_EOS
20170                                           ! 2353         }
20171                                           ! 2354        else
20172                                           ! 2355         {
20173 4D9B           E9         0122            br 	.10D
20174                       00004D9E            .107:
20175                                           ! 2356          if(dir==1)
20176                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20177 4D9E           8A46         12            mov	al,$12[bp]
20178 4DA1           3C                     01  cmp	al,*1
20179 4DA3         0F85         008A            bne 	.10E
20180                       00004DA7            .10F:
20181                                           ! 2357           {for(i=rul;i<=rlr;i++)
20182                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20183 4DA7           8A46         08            mov	al,8[bp]
20184 4DAA           30E4                       xor	ah,ah
20185 4DAC           8946         F4            mov	-$C[bp],ax
20186                                           !BCC_EOS
20187                                           !BCC_EOS
20188                                           ! 2358             {
20189 4DAF           EB           73            jmp .112
20190                       00004DB1            .113:
20191                                           ! 2359              if((i+nblines>rlr)||(nblines==0))
20192                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20193 4DB1           8B46         F4            mov	ax,-$C[bp]
20194 4DB4           0246         04            add	al,4[bp]
20195 4DB7           80D4                   00  adc	ah,*0
20196                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20197 4DBA           50                         push	ax
20198 4DBB           8A46         0C            mov	al,$C[bp]
20199 4DBE           30E4                       xor	ah,ah
20200 4DC0           3B46         F0            cmp	ax,0+..FFFC[bp]
20201 4DC3           8D66         F2            lea	sp,2+..FFFC[bp]
20202 4DC6           72           07            jb  	.115
20203                       00004DC8            .116:
20204                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20205 4DC8           8A46         04            mov	al,4[bp]
20206 4DCB           84C0                       test	al,al
20207 4DCD           75           26            jne 	.114
20208                       00004DCF            .115:
20209                                           ! 2360               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20210                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20211 4DCF           8A46         06            mov	al,6[bp]
20212 4DD2           30E4                       xor	ah,ah
20213 4DD4           50                         push	ax
20214                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20215 4DD5           8A46         FD            mov	al,-3[bp]
20216 4DD8           30E4                       xor	ah,ah
20217 4DDA           50                         push	ax
20218                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20219 4DDB           FF76         F8            push	-8[bp]
20220                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20221 4DDE           8A46         FB            mov	al,-5[bp]
20222 4DE1           30E4                       xor	ah,ah
20223 4DE3           50                         push	ax
20224                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20225 4DE4           FF76         F4            push	-$C[bp]
20226                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20227 4DE7           8A46         0A            mov	al,$A[bp]
20228 4DEA           30E4                       xor	ah,ah
20229 4DEC           50                         push	ax
20230                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20231 4DED           E8         F952            call	_vgamem_fill_pl4
20232 4DF0           83C4                   0C  add	sp,*$C
20233                                           !BCC_EOS
20234                                           ! 2361              else
20235                                           ! 2362               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20236 4DF3           EB           28            jmp .117
20237                       00004DF5            .114:
20238                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20239 4DF5           8A46         FD            mov	al,-3[bp]
20240 4DF8           30E4                       xor	ah,ah
20241 4DFA           50                         push	ax
20242                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20243 4DFB           FF76         F8            push	-8[bp]
20244                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20245 4DFE           8A46         FB            mov	al,-5[bp]
20246 4E01           30E4                       xor	ah,ah
20247 4E03           50                         push	ax
20248                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20249 4E04           FF76         F4            push	-$C[bp]
20250                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20251 4E07           8B46         F4            mov	ax,-$C[bp]
20252 4E0A           0246         04            add	al,4[bp]
20253 4E0D           80D4                   00  adc	ah,*0
20254                                           ! Debug: list unsigned int = ax+0 (used reg = )
20255 4E10           50                         push	ax
20256                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20257 4E11           8A46         0A            mov	al,$A[bp]
20258 4E14           30E4                       xor	ah,ah
20259 4E16           50                         push	ax
20260                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20261 4E17           E8         F866            call	_vgamem_copy_pl4
20262 4E1A           83C4                   0C  add	sp,*$C
20263                                           !BCC_EOS
20264                                           ! 2363             }
20265                       00004E1D            .117:
20266                                           ! 2364           }
20267                       00004E1D            .111:
20268                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20269 4E1D           8B46         F4            mov	ax,-$C[bp]
20270 4E20           40                         inc	ax
20271 4E21           8946         F4            mov	-$C[bp],ax
20272                       00004E24            .112:
20273                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20274 4E24           8A46         0C            mov	al,$C[bp]
20275 4E27           30E4                       xor	ah,ah
20276 4E29           3B46         F4            cmp	ax,-$C[bp]
20277 4E2C           73           83            jae	.113
20278                       00004E2E            .118:
20279                       00004E2E            .110:
20280                                           ! 2365          else
20281                                           ! 2366           {for(i=rlr;i>=rul;i--)
20282 4E2E           E9         008F            br 	.119
20283                       00004E31            .10E:
20284                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20285 4E31           8A46         0C            mov	al,$C[bp]
20286 4E34           30E4                       xor	ah,ah
20287 4E36           8946         F4            mov	-$C[bp],ax
20288                                           !BCC_EOS
20289                                           !BCC_EOS
20290                                           ! 2367             {
20291 4E39           E9         0078            br 	.11C
20292                       00004E3C            .11D:
20293                                           ! 2368              if((i<rul+nblines)||(nblines==0))
20294                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20295 4E3C           8A46         08            mov	al,8[bp]
20296 4E3F           30E4                       xor	ah,ah
20297 4E41           0246         04            add	al,4[bp]
20298 4E44           80D4                   00  adc	ah,*0
20299                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20300 4E47           3B46         F4            cmp	ax,-$C[bp]
20301 4E4A           77           07            ja  	.11F
20302                       00004E4C            .120:
20303                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20304 4E4C           8A46         04            mov	al,4[bp]
20305 4E4F           84C0                       test	al,al
20306 4E51           75           26            jne 	.11E
20307                       00004E53            .11F:
20308                                           ! 2369               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20309                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20310 4E53           8A46         06            mov	al,6[bp]
20311 4E56           30E4                       xor	ah,ah
20312 4E58           50                         push	ax
20313                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20314 4E59           8A46         FD            mov	al,-3[bp]
20315 4E5C           30E4                       xor	ah,ah
20316 4E5E           50                         push	ax
20317                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20318 4E5F           FF76         F8            push	-8[bp]
20319                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20320 4E62           8A46         FB            mov	al,-5[bp]
20321 4E65           30E4                       xor	ah,ah
20322 4E67           50                         push	ax
20323                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20324 4E68           FF76         F4            push	-$C[bp]
20325                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20326 4E6B           8A46         0A            mov	al,$A[bp]
20327 4E6E           30E4                       xor	ah,ah
20328 4E70           50                         push	ax
20329                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20330 4E71           E8         F8CE            call	_vgamem_fill_pl4
20331 4E74           83C4                   0C  add	sp,*$C
20332                                           !BCC_EOS
20333                                           ! 2370              else
20334                                           ! 2371               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20335 4E77           EB           28            jmp .121
20336                       00004E79            .11E:
20337                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20338 4E79           8A46         FD            mov	al,-3[bp]
20339 4E7C           30E4                       xor	ah,ah
20340 4E7E           50                         push	ax
20341                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20342 4E7F           FF76         F8            push	-8[bp]
20343                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20344 4E82           8A46         FB            mov	al,-5[bp]
20345 4E85           30E4                       xor	ah,ah
20346 4E87           50                         push	ax
20347                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20348 4E88           8B46         F4            mov	ax,-$C[bp]
20349 4E8B           2A46         04            sub	al,4[bp]
20350 4E8E           80DC                   00  sbb	ah,*0
20351                                           ! Debug: list unsigned int = ax+0 (used reg = )
20352 4E91           50                         push	ax
20353                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20354 4E92           FF76         F4            push	-$C[bp]
20355                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20356 4E95           8A46         0A            mov	al,$A[bp]
20357 4E98           30E4                       xor	ah,ah
20358 4E9A           50                         push	ax
20359                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20360 4E9B           E8         F7E2            call	_vgamem_copy_pl4
20361 4E9E           83C4                   0C  add	sp,*$C
20362                                           !BCC_EOS
20363                                           ! 2372  
20364                                           ! 2372             if (i>rlr) break;
20365                       00004EA1            .121:
20366                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20367 4EA1           8A46         0C            mov	al,$C[bp]
20368 4EA4           30E4                       xor	ah,ah
20369 4EA6           3B46         F4            cmp	ax,-$C[bp]
20370 4EA9           73           02            jae 	.122
20371                       00004EAB            .123:
20372 4EAB           EB           13            jmp .11A
20373                                           !BCC_EOS
20374                                           ! 2373             }
20375                       00004EAD            .122:
20376                                           ! 2374           }
20377                       00004EAD            .11B:
20378                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20379 4EAD           8B46         F4            mov	ax,-$C[bp]
20380 4EB0           48                         dec	ax
20381 4EB1           8946         F4            mov	-$C[bp],ax
20382                       00004EB4            .11C:
20383                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20384 4EB4           8A46         08            mov	al,8[bp]
20385 4EB7           30E4                       xor	ah,ah
20386 4EB9           3B46         F4            cmp	ax,-$C[bp]
20387 4EBC         0F86         FF7C            blos	.11D
20388                       00004EC0            .124:
20389                       00004EC0            .11A:
20390                                           ! 2375         }
20391                       00004EC0            .119:
20392                                           ! 2376        break;
20393                       00004EC0            .10D:
20394 4EC0           E9         01FB            br 	.102
20395                                           !BCC_EOS
20396                                           ! 2377      case 0x02:
20397                                           ! 2378        bpp=vga_modes[line].pixbits;
20398                       00004EC3            .125:
20399                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20400 4EC3           8A46         FE            mov	al,-2[bp]
20401 4EC6           30E4                       xor	ah,ah
20402 4EC8           B1                     03  mov	cl,*3
20403 4ECA           D3E0                       shl	ax,cl
20404 4ECC           89C3                       mov	bx,ax
20405 4ECE           81C3                 020B  add	bx,#_vga_modes
20406                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20407 4ED2           8A47         03            mov	al,3[bx]
20408 4ED5           8846         FC            mov	-4[bp],al
20409                                           !BCC_EOS
20410                                           ! 2379        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4ED8           8A46         04            mov	al,4[bp]
20413 4EDB           84C0                       test	al,al
20414 4EDD           75           77            jne 	.126
20415                       00004EDF            .12B:
20416                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20417 4EDF           8A46         08            mov	al,8[bp]
20418 4EE2           84C0                       test	al,al
20419 4EE4           75           70            jne 	.126
20420                       00004EE6            .12A:
20421                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20422 4EE6           8A46         0A            mov	al,$A[bp]
20423 4EE9           84C0                       test	al,al
20424 4EEB           75           69            jne 	.126
20425                       00004EED            .129:
20426                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20427 4EED           8B46         F6            mov	ax,-$A[bp]
20428                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20429                                           ! Debug: expression subtree swapping
20430 4EF0           48                         dec	ax
20431 4EF1           50                         push	ax
20432 4EF2           8A46         0C            mov	al,$C[bp]
20433 4EF5           30E4                       xor	ah,ah
20434 4EF7           3B46         F0            cmp	ax,0+..FFFC[bp]
20435 4EFA           8D66         F2            lea	sp,2+..FFFC[bp]
20436 4EFD           75           57            jne 	.126
20437                       00004EFF            .128:
20438                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20439 4EFF           8B46         F8            mov	ax,-8[bp]
20440                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20441                                           ! Debug: expression subtree swapping
20442 4F02           48                         dec	ax
20443 4F03           50                         push	ax
20444 4F04           8A46         0E            mov	al,$E[bp]
20445 4F07           30E4                       xor	ah,ah
20446 4F09           3B46         F0            cmp	ax,0+..FFFC[bp]
20447 4F0C           8D66         F2            lea	sp,2+..FFFC[bp]
20448 4F0F           75           45            jne 	.126
20449                       00004F11            .127:
20450                                           ! 2380         {
20451                                           ! 2381          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20452                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20453 4F11           8B46         F6            mov	ax,-$A[bp]
20454 4F14           8B4E         F8            mov	cx,-8[bp]
20455 4F17           F7E9                       imul	cx
20456                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20457 4F19           89C3                       mov	bx,ax
20458 4F1B           8A46         FD            mov	al,-3[bp]
20459 4F1E           30E4                       xor	ah,ah
20460 4F20           93                         xchg	ax,bx
20461 4F21           89D9                       mov	cx,bx
20462 4F23           F7E9                       imul	cx
20463                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20464 4F25           89C3                       mov	bx,ax
20465 4F27           8A46         FC            mov	al,-4[bp]
20466 4F2A           30E4                       xor	ah,ah
20467 4F2C           93                         xchg	ax,bx
20468 4F2D           89D9                       mov	cx,bx
20469 4F2F           F7E9                       imul	cx
20470                                           ! Debug: list unsigned int = ax+0 (used reg = )
20471 4F31           50                         push	ax
20472                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20473 4F32           8A46         06            mov	al,6[bp]
20474 4F35           30E4                       xor	ah,ah
20475 4F37           50                         push	ax
20476                                           ! Debug: list int = const 0 (used reg = )
20477 4F38           31C0                       xor	ax,ax
20478 4F3A           50                         push	ax
20479                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20480 4F3B           8A46         FE            mov	al,-2[bp]
20481 4F3E           30E4                       xor	ah,ah
20482 4F40           B1                     03  mov	cl,*3
20483 4F42           D3E0                       shl	ax,cl
20484 4F44           89C3                       mov	bx,ax
20485 4F46           81C3                 020B  add	bx,#_vga_modes
20486                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20487 4F4A           FF77         04            push	4[bx]
20488                                           ! Debug: func () void = memsetb+0 (used reg = )
20489 4F4D           E8         2D45            call	_memsetb
20490 4F50           83C4                   08  add	sp,*8
20491                                           !BCC_EOS
20492                                           ! 2382         }
20493                                           ! 2383        else
20494                                           ! 2384         {
20495 4F53           E9         0144            br 	.12C
20496                       00004F56            .126:
20497                                           ! 2385          if(bpp==2)
20498                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20499 4F56           8A46         FC            mov	al,-4[bp]
20500 4F59           3C                     02  cmp	al,*2
20501 4F5B           75           1C            jne 	.12D
20502                       00004F5D            .12E:
20503                                           ! 2386           {
20504                                           ! 2387            cul<<=1;
20505                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20506 4F5D           8A46         0A            mov	al,$A[bp]
20507 4F60           30E4                       xor	ah,ah
20508 4F62           D1E0                       shl	ax,*1
20509 4F64           8846         0A            mov	$A[bp],al
20510                                           !BCC_EOS
20511                                           ! 2388            cols<<=1;
20512                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20513 4F67           8A46         FB            mov	al,-5[bp]
20514 4F6A           30E4                       xor	ah,ah
20515 4F6C           D1E0                       shl	ax,*1
20516 4F6E           8846         FB            mov	-5[bp],al
20517                                           !BCC_EOS
20518                                           ! 2389            nbcols<<=1;
20519                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20520 4F71           8B46         F8            mov	ax,-8[bp]
20521 4F74           D1E0                       shl	ax,*1
20522 4F76           8946         F8            mov	-8[bp],ax
20523                                           !BCC_EOS
20524                                           ! 2390           }
20525                                           ! 2391          if(dir==1)
20526                       00004F79            .12D:
20527                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20528 4F79           8A46         12            mov	al,$12[bp]
20529 4F7C           3C                     01  cmp	al,*1
20530 4F7E         0F85         008A            bne 	.12F
20531                       00004F82            .130:
20532                                           ! 2392           {for(i=rul;i<=rlr;i++)
20533                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20534 4F82           8A46         08            mov	al,8[bp]
20535 4F85           30E4                       xor	ah,ah
20536 4F87           8946         F4            mov	-$C[bp],ax
20537                                           !BCC_EOS
20538                                           !BCC_EOS
20539                                           ! 2393             {
20540 4F8A           EB           73            jmp .133
20541                       00004F8C            .134:
20542                                           ! 2394              if((i+nblines>rlr)||(nblines==0))
20543                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20544 4F8C           8B46         F4            mov	ax,-$C[bp]
20545 4F8F           0246         04            add	al,4[bp]
20546 4F92           80D4                   00  adc	ah,*0
20547                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20548 4F95           50                         push	ax
20549 4F96           8A46         0C            mov	al,$C[bp]
20550 4F99           30E4                       xor	ah,ah
20551 4F9B           3B46         F0            cmp	ax,0+..FFFC[bp]
20552 4F9E           8D66         F2            lea	sp,2+..FFFC[bp]
20553 4FA1           72           07            jb  	.136
20554                       00004FA3            .137:
20555                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20556 4FA3           8A46         04            mov	al,4[bp]
20557 4FA6           84C0                       test	al,al
20558 4FA8           75           26            jne 	.135
20559                       00004FAA            .136:
20560                                           ! 2395               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20561                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20562 4FAA           8A46         06            mov	al,6[bp]
20563 4FAD           30E4                       xor	ah,ah
20564 4FAF           50                         push	ax
20565                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20566 4FB0           8A46         FD            mov	al,-3[bp]
20567 4FB3           30E4                       xor	ah,ah
20568 4FB5           50                         push	ax
20569                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20570 4FB6           FF76         F8            push	-8[bp]
20571                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20572 4FB9           8A46         FB            mov	al,-5[bp]
20573 4FBC           30E4                       xor	ah,ah
20574 4FBE           50                         push	ax
20575                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20576 4FBF           FF76         F4            push	-$C[bp]
20577                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20578 4FC2           8A46         0A            mov	al,$A[bp]
20579 4FC5           30E4                       xor	ah,ah
20580 4FC7           50                         push	ax
20581                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20582 4FC8           E8         F914            call	_vgamem_fill_cga
20583 4FCB           83C4                   0C  add	sp,*$C
20584                                           !BCC_EOS
20585                                           ! 2396              else
20586                                           ! 2397               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20587 4FCE           EB           28            jmp .138
20588                       00004FD0            .135:
20589                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20590 4FD0           8A46         FD            mov	al,-3[bp]
20591 4FD3           30E4                       xor	ah,ah
20592 4FD5           50                         push	ax
20593                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20594 4FD6           FF76         F8            push	-8[bp]
20595                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20596 4FD9           8A46         FB            mov	al,-5[bp]
20597 4FDC           30E4                       xor	ah,ah
20598 4FDE           50                         push	ax
20599                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20600 4FDF           FF76         F4            push	-$C[bp]
20601                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20602 4FE2           8B46         F4            mov	ax,-$C[bp]
20603 4FE5           0246         04            add	al,4[bp]
20604 4FE8           80D4                   00  adc	ah,*0
20605                                           ! Debug: list unsigned int = ax+0 (used reg = )
20606 4FEB           50                         push	ax
20607                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20608 4FEC           8A46         0A            mov	al,$A[bp]
20609 4FEF           30E4                       xor	ah,ah
20610 4FF1           50                         push	ax
20611                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20612 4FF2           E8         F7D8            call	_vgamem_copy_cga
20613 4FF5           83C4                   0C  add	sp,*$C
20614                                           !BCC_EOS
20615                                           ! 2398             }
20616                       00004FF8            .138:
20617                                           ! 2399           }
20618                       00004FF8            .132:
20619                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20620 4FF8           8B46         F4            mov	ax,-$C[bp]
20621 4FFB           40                         inc	ax
20622 4FFC           8946         F4            mov	-$C[bp],ax
20623                       00004FFF            .133:
20624                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20625 4FFF           8A46         0C            mov	al,$C[bp]
20626 5002           30E4                       xor	ah,ah
20627 5004           3B46         F4            cmp	ax,-$C[bp]
20628 5007           73           83            jae	.134
20629                       00005009            .139:
20630                       00005009            .131:
20631                                           ! 2400          else
20632                                           ! 2401           {for(i=rlr;i>=rul;i--)
20633 5009           E9         008E            br 	.13A
20634                       0000500C            .12F:
20635                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20636 500C           8A46         0C            mov	al,$C[bp]
20637 500F           30E4                       xor	ah,ah
20638 5011           8946         F4            mov	-$C[bp],ax
20639                                           !BCC_EOS
20640                                           !BCC_EOS
20641                                           ! 2402             {
20642 5014           EB           78            jmp .13D
20643                       00005016            .13E:
20644                                           ! 2403              if((i<rul+nblines)||(nblines==0))
20645                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20646 5016           8A46         08            mov	al,8[bp]
20647 5019           30E4                       xor	ah,ah
20648 501B           0246         04            add	al,4[bp]
20649 501E           80D4                   00  adc	ah,*0
20650                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20651 5021           3B46         F4            cmp	ax,-$C[bp]
20652 5024           77           07            ja  	.140
20653                       00005026            .141:
20654                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20655 5026           8A46         04            mov	al,4[bp]
20656 5029           84C0                       test	al,al
20657 502B           75           26            jne 	.13F
20658                       0000502D            .140:
20659                                           ! 2404               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20660                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20661 502D           8A46         06            mov	al,6[bp]
20662 5030           30E4                       xor	ah,ah
20663 5032           50                         push	ax
20664                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20665 5033           8A46         FD            mov	al,-3[bp]
20666 5036           30E4                       xor	ah,ah
20667 5038           50                         push	ax
20668                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20669 5039           FF76         F8            push	-8[bp]
20670                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20671 503C           8A46         FB            mov	al,-5[bp]
20672 503F           30E4                       xor	ah,ah
20673 5041           50                         push	ax
20674                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20675 5042           FF76         F4            push	-$C[bp]
20676                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20677 5045           8A46         0A            mov	al,$A[bp]
20678 5048           30E4                       xor	ah,ah
20679 504A           50                         push	ax
20680                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20681 504B           E8         F891            call	_vgamem_fill_cga
20682 504E           83C4                   0C  add	sp,*$C
20683                                           !BCC_EOS
20684                                           ! 2405              else
20685                                           ! 2406               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20686 5051           EB           28            jmp .142
20687                       00005053            .13F:
20688                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20689 5053           8A46         FD            mov	al,-3[bp]
20690 5056           30E4                       xor	ah,ah
20691 5058           50                         push	ax
20692                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20693 5059           FF76         F8            push	-8[bp]
20694                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20695 505C           8A46         FB            mov	al,-5[bp]
20696 505F           30E4                       xor	ah,ah
20697 5061           50                         push	ax
20698                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20699 5062           8B46         F4            mov	ax,-$C[bp]
20700 5065           2A46         04            sub	al,4[bp]
20701 5068           80DC                   00  sbb	ah,*0
20702                                           ! Debug: list unsigned int = ax+0 (used reg = )
20703 506B           50                         push	ax
20704                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20705 506C           FF76         F4            push	-$C[bp]
20706                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20707 506F           8A46         0A            mov	al,$A[bp]
20708 5072           30E4                       xor	ah,ah
20709 5074           50                         push	ax
20710                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20711 5075           E8         F755            call	_vgamem_copy_cga
20712 5078           83C4                   0C  add	sp,*$C
20713                                           !BCC_EOS
20714                                           ! 2407              if (i>rlr) break;
20715                       0000507B            .142:
20716                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20717 507B           8A46         0C            mov	al,$C[bp]
20718 507E           30E4                       xor	ah,ah
20719 5080           3B46         F4            cmp	ax,-$C[bp]
20720 5083           73           02            jae 	.143
20721                       00005085            .144:
20722 5085           EB           13            jmp .13B
20723                                           !BCC_EOS
20724                                           ! 2408             }
20725                       00005087            .143:
20726                                           ! 2409           }
20727                       00005087            .13C:
20728                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20729 5087           8B46         F4            mov	ax,-$C[bp]
20730 508A           48                         dec	ax
20731 508B           8946         F4            mov	-$C[bp],ax
20732                       0000508E            .13D:
20733                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20734 508E           8A46         08            mov	al,8[bp]
20735 5091           30E4                       xor	ah,ah
20736 5093           3B46         F4            cmp	ax,-$C[bp]
20737 5096         0F86         FF7C            blos	.13E
20738                       0000509A            .145:
20739                       0000509A            .13B:
20740                                           ! 2410         }
20741                       0000509A            .13A:
20742                                           ! 2411        break;
20743                       0000509A            .12C:
20744 509A           EB           22            jmp .102
20745                                           !BCC_EOS
20746                                           ! 2412      default:
20747                                           ! 2413        printf("Scroll in graphics mode ");
20748                       0000509C            .146:
20749                                           ! Debug: list * char = .147+0 (used reg = )
20750 509C           BB                   A57B  mov	bx,#.147
20751 509F           53                         push	bx
20752                                           ! Debug: func () void = printf+0 (used reg = )
20753 50A0           E8         2D47            call	_printf
20754 50A3           44                         inc	sp
20755 50A4           44                         inc	sp
20756                                           !BCC_EOS
20757                                           ! 2414        unimplemented();
20758                                           ! Debug: func () void = unimplemented+0 (used reg = )
20759 50A5           E8         2D26            call	_unimplemented
20760                                           !BCC_EOS
20761                                           ! 2415     }
20762                                           ! 2416   }
20763 50A8           EB           14            jmp .102
20764                       000050AA            .104:
20765 50AA           2C                     02  sub	al,*2
20766 50AC         0F84         FE13            beq 	.125
20767 50B0           2C                     01  sub	al,*1
20768 50B2         0F84         FC56            beq 	.106
20769 50B6           2C                     01  sub	al,*1
20770 50B8         0F84         FC50            beq 	.105
20771 50BC           EB           DE            jmp	.146
20772                       000050BE            .102:
20773                       FFFFFFF0            ..FFFC	=	-$10
20774                                           ! 2417 }
20775                       000050BE            .101:
20776 50BE           89EC                       mov	sp,bp
20777 50C0           5D                         pop	bp
20778 50C1           C3                         ret
20779                                           ! 2418 static void biosfn_read_char_attr (page,car)
20780                                           ! Register BX used in function biosfn_scroll
20781                                           ! 2419 Bit8u page;Bit16u *car;
20782                       000050C2            _biosfn_read_char_attr:
20783                                           !BCC_EOS
20784                                           !BCC_EOS
20785                                           ! 2420 {Bit16u ss=get_SS();
20786 50C2           55                         push	bp
20787 50C3           89E5                       mov	bp,sp
20788 50C5           4C                         dec	sp
20789 50C6           4C                         dec	sp
20790                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20791 50C7           E8         2D01            call	_get_SS
20792                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20793 50CA           8946         FE            mov	-2[bp],ax
20794                                           !BCC_EOS
20795                                           ! 2421  Bit8u xcurs,ycurs,mode,line;
20796                                           !BCC_EOS
20797                                           ! 2422  Bit16u nbcols,nbrows,address;
20798                                           !BCC_EOS
20799                                           ! 2423  Bit16u cursor,dummy;
20800                                           !BCC_EOS
20801                                           ! 2424  mode=read_byte(0x40,0x49);
20802 50CD           83C4                   F2  add	sp,*-$E
20803                                           ! Debug: list int = const $49 (used reg = )
20804 50D0           B8                   0049  mov	ax,*$49
20805 50D3           50                         push	ax
20806                                           ! Debug: list int = const $40 (used reg = )
20807 50D4           B8                   0040  mov	ax,*$40
20808 50D7           50                         push	ax
20809                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20810 50D8           E8         2C64            call	_read_byte
20811 50DB           83C4                   04  add	sp,*4
20812                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20813 50DE           8846         FB            mov	-5[bp],al
20814                                           !BCC_EOS
20815                                           ! 2425  line=find_vga_entry(mode);
20816                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20817 50E1           8A46         FB            mov	al,-5[bp]
20818 50E4           30E4                       xor	ah,ah
20819 50E6           50                         push	ax
20820                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20821 50E7           E8         2B69            call	_find_vga_entry
20822 50EA           44                         inc	sp
20823 50EB           44                         inc	sp
20824                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20825 50EC           8846         FA            mov	-6[bp],al
20826                                           !BCC_EOS
20827                                           ! 2426  if(line==0xFF)return;
20828                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20829 50EF           8A46         FA            mov	al,-6[bp]
20830 50F2           3C                     FF  cmp	al,#$FF
20831 50F4           75           04            jne 	.148
20832                       000050F6            .149:
20833 50F6           89EC                       mov	sp,bp
20834 50F8           5D                         pop	bp
20835 50F9           C3                         ret
20836                                           !BCC_EOS
20837                                           ! 2427  biosfn_get_cursor_pos(page,&dummy,&cursor);
20838                       000050FA            .148:
20839                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20840 50FA           8D5E         F2            lea	bx,-$E[bp]
20841 50FD           53                         push	bx
20842                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20843 50FE           8D5E         F0            lea	bx,-$10[bp]
20844 5101           53                         push	bx
20845                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20846 5102           8A46         04            mov	al,4[bp]
20847 5105           30E4                       xor	ah,ah
20848 5107           50                         push	ax
20849                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20850 5108           E8         F37E            call	_biosfn_get_cursor_pos
20851 510B           83C4                   06  add	sp,*6
20852                                           !BCC_EOS
20853                                           ! 2428  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20854                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20855 510E           8A46         F2            mov	al,-$E[bp]
20856                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20857 5111           8846         FD            mov	-3[bp],al
20858                                           !BCC_EOS
20859                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20860 5114           8B46         F2            mov	ax,-$E[bp]
20861 5117           30C0                       xor	al,al
20862                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20863 5119           88E0                       mov	al,ah
20864 511B           30E4                       xor	ah,ah
20865                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20866 511D           8846         FC            mov	-4[bp],al
20867                                           !BCC_EOS
20868                                           ! 2429  nbrows=read_byte(0x40,0x84)+1;
20869                                           ! Debug: list int = const $84 (used reg = )
20870 5120           B8                   0084  mov	ax,#$84
20871 5123           50                         push	ax
20872                                           ! Debug: list int = const $40 (used reg = )
20873 5124           B8                   0040  mov	ax,*$40
20874 5127           50                         push	ax
20875                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20876 5128           E8         2C14            call	_read_byte
20877 512B           83C4                   04  add	sp,*4
20878                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20879 512E           30E4                       xor	ah,ah
20880                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20881 5130           40                         inc	ax
20882 5131           8946         F6            mov	-$A[bp],ax
20883                                           !BCC_EOS
20884                                           ! 2430  nbcols=read_word(0x40,0x4A);
20885                                           ! Debug: list int = const $4A (used reg = )
20886 5134           B8                   004A  mov	ax,*$4A
20887 5137           50                         push	ax
20888                                           ! Debug: list int = const $40 (used reg = )
20889 5138           B8                   0040  mov	ax,*$40
20890 513B           50                         push	ax
20891                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20892 513C           E8         2C13            call	_read_word
20893 513F           83C4                   04  add	sp,*4
20894                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20895 5142           8946         F8            mov	-8[bp],ax
20896                                           !BCC_EOS
20897                                           ! 2431  if(vga_modes[line].class==0x00)
20898                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20899 5145           8A46         FA            mov	al,-6[bp]
20900 5148           30E4                       xor	ah,ah
20901 514A           B1                     03  mov	cl,*3
20902 514C           D3E0                       shl	ax,cl
20903 514E           89C3                       mov	bx,ax
20904 5150           81C3                 020B  add	bx,#_vga_modes
20905                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20906 5154           8A47         01            mov	al,1[bx]
20907 5157           84C0                       test	al,al
20908 5159           75           5E            jne 	.14A
20909                       0000515B            .14B:
20910                                           ! 2432   {
20911                                           ! 2433    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20912                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20913 515B           8A46         FC            mov	al,-4[bp]
20914 515E           30E4                       xor	ah,ah
20915 5160           8B4E         F8            mov	cx,-8[bp]
20916 5163           F7E9                       imul	cx
20917                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20918                                           ! Debug: expression subtree swapping
20919 5165           0246         FD            add	al,-3[bp]
20920 5168           80D4                   00  adc	ah,*0
20921                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20922 516B           D1E0                       shl	ax,*1
20923 516D           50                         push	ax
20924                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20925 516E           8B46         F8            mov	ax,-8[bp]
20926 5171           8B4E         F6            mov	cx,-$A[bp]
20927 5174           F7E9                       imul	cx
20928                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20929 5176           D1E0                       shl	ax,*1
20930                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20931 5178           0C                     FF  or	al,#$FF
20932                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20933                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20934 517A           89C3                       mov	bx,ax
20935 517C           8A46         04            mov	al,4[bp]
20936 517F           30E4                       xor	ah,ah
20937 5181           93                         xchg	ax,bx
20938 5182           40                         inc	ax
20939 5183           89D9                       mov	cx,bx
20940 5185           F7E9                       imul	cx
20941                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20942 5187           0346         EE            add	ax,-$12[bp]
20943 518A           44                         inc	sp
20944 518B           44                         inc	sp
20945                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20946 518C           8946         F4            mov	-$C[bp],ax
20947                                           !BCC_EOS
20948                                           ! 2434    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20949                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20950 518F           FF76         F4            push	-$C[bp]
20951                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20952 5192           8A46         FA            mov	al,-6[bp]
20953 5195           30E4                       xor	ah,ah
20954 5197           B1                     03  mov	cl,*3
20955 5199           D3E0                       shl	ax,cl
20956 519B           89C3                       mov	bx,ax
20957 519D           81C3                 020B  add	bx,#_vga_modes
20958                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20959 51A1           FF77         04            push	4[bx]
20960                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20961 51A4           E8         2BAB            call	_read_word
20962 51A7           83C4                   04  add	sp,*4
20963                                           ! Debug: list unsigned short = ax+0 (used reg = )
20964 51AA           50                         push	ax
20965                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20966 51AB           FF76         06            push	6[bp]
20967                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20968 51AE           FF76         FE            push	-2[bp]
20969                                           ! Debug: func () void = write_word+0 (used reg = )
20970 51B1           E8         2BC9            call	_write_word
20971 51B4           83C4                   06  add	sp,*6
20972                                           !BCC_EOS
20973                                           ! 2435   }
20974                                           ! 2436  else
20975                                           ! 2437   {
20976 51B7           EB           03            jmp .14C
20977                       000051B9            .14A:
20978                                           ! 2438    unimplemented();
20979                                           ! Debug: func () void = unimplemented+0 (used reg = )
20980 51B9           E8         2C12            call	_unimplemented
20981                                           !BCC_EOS
20982                                           ! 2439   }
20983                                           ! 2440 }
20984                       000051BC            .14C:
20985 51BC           89EC                       mov	sp,bp
20986 51BE           5D                         pop	bp
20987 51BF           C3                         ret
20988                                           ! 2441 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20989                                           ! Register BX used in function biosfn_read_char_attr
20990                                           ! 2442 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20991                       000051C0            _write_gfx_char_pl4:
20992                                           !BCC_EOS
20993                                           !BCC_EOS
20994                                           !BCC_EOS
20995                                           !BCC_EOS
20996                                           !BCC_EOS
20997                                           !BCC_EOS
20998                                           ! 2443 {
20999                                           ! 2444  Bit8u i,j,mask;
21000                                           !BCC_EOS
21001                                           ! 2445  Bit8u *fdata;
21002                                           !BCC_EOS
21003                                           ! 2446  Bit16u addr,dest,src;
21004                                           !BCC_EOS
21005                                           ! 2447  switch(cheight)
21006 51C0           55                         push	bp
21007 51C1           89E5                       mov	bp,sp
21008 51C3           83C4                   F4  add	sp,*-$C
21009 51C6           8A46         0E            mov	al,$E[bp]
21010                                           ! 2448   {case 14:
21011 51C9           EB           18            jmp .14F
21012                                           ! 2449     fdata = &vgafont14;
21013                       000051CB            .150:
21014                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21015 51CB           BB                   176F  mov	bx,#_vgafont14
21016 51CE           895E         FA            mov	-6[bp],bx
21017                                           !BCC_EOS
21018                                           ! 2450     break;
21019 51D1           EB           1A            jmp .14D
21020                                           !BCC_EOS
21021                                           ! 2451    case 16:
21022                                           ! 2452     fdat
21023                                           ! 2452 a = &vgafont16;
21024                       000051D3            .151:
21025                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21026 51D3           BB                   256F  mov	bx,#_vgafont16
21027 51D6           895E         FA            mov	-6[bp],bx
21028                                           !BCC_EOS
21029                                           ! 2453     break;
21030 51D9           EB           12            jmp .14D
21031                                           !BCC_EOS
21032                                           ! 2454    default:
21033                                           ! 2455     fdata = &vgafont8;
21034                       000051DB            .152:
21035                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21036 51DB           BB                   0F6F  mov	bx,#_vgafont8
21037 51DE           895E         FA            mov	-6[bp],bx
21038                                           !BCC_EOS
21039                                           ! 2456   }
21040                                           ! 2457  addr=xcurs+ycurs*cheight*nbcols;
21041 51E1           EB           0A            jmp .14D
21042                       000051E3            .14F:
21043 51E3           2C                     0E  sub	al,*$E
21044 51E5           74           E4            je 	.150
21045 51E7           2C                     02  sub	al,*2
21046 51E9           74           E8            je 	.151
21047 51EB           EB           EE            jmp	.152
21048                       000051ED            .14D:
21049                       FFFFFFF2            ..FFFB	=	-$E
21050                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21051 51ED           8A46         0E            mov	al,$E[bp]
21052 51F0           30E4                       xor	ah,ah
21053 51F2           89C3                       mov	bx,ax
21054 51F4           8A46         0A            mov	al,$A[bp]
21055 51F7           30E4                       xor	ah,ah
21056 51F9           89D9                       mov	cx,bx
21057 51FB           F7E9                       imul	cx
21058                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21059 51FD           89C3                       mov	bx,ax
21060 51FF           8A46         0C            mov	al,$C[bp]
21061 5202           30E4                       xor	ah,ah
21062 5204           93                         xchg	ax,bx
21063 5205           89D9                       mov	cx,bx
21064 5207           F7E9                       imul	cx
21065                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21066                                           ! Debug: expression subtree swapping
21067 5209           0246         08            add	al,8[bp]
21068 520C           80D4                   00  adc	ah,*0
21069                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21070 520F           8946         F8            mov	-8[bp],ax
21071                                           !BCC_EOS
21072                                           ! 2458  src = car * cheight;
21073                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21074 5212           8A46         0E            mov	al,$E[bp]
21075 5215           30E4                       xor	ah,ah
21076 5217           89C3                       mov	bx,ax
21077 5219           8A46         04            mov	al,4[bp]
21078 521C           30E4                       xor	ah,ah
21079 521E           89D9                       mov	cx,bx
21080 5220           F7E9                       imul	cx
21081                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21082 5222           8946         F4            mov	-$C[bp],ax
21083                                           !BCC_EOS
21084                                           ! 2459  outw(0x3c4, 0x0f02);
21085                                           ! Debug: list int = const $F02 (used reg = )
21086 5225           B8                   0F02  mov	ax,#$F02
21087 5228           50                         push	ax
21088                                           ! Debug: list int = const $3C4 (used reg = )
21089 5229           B8                   03C4  mov	ax,#$3C4
21090 522C           50                         push	ax
21091                                           ! Debug: func () void = outw+0 (used reg = )
21092 522D           E8         2B8B            call	_outw
21093 5230           83C4                   04  add	sp,*4
21094                                           !BCC_EOS
21095                                           ! 2460  outw(0x3ce, 0x0205);
21096                                           ! Debug: list int = const $205 (used reg = )
21097 5233           B8                   0205  mov	ax,#$205
21098 5236           50                         push	ax
21099                                           ! Debug: list int = const $3CE (used reg = )
21100 5237           B8                   03CE  mov	ax,#$3CE
21101 523A           50                         push	ax
21102                                           ! Debug: func () void = outw+0 (used reg = )
21103 523B           E8         2B7D            call	_outw
21104 523E           83C4                   04  add	sp,*4
21105                                           !BCC_EOS
21106                                           ! 2461  if(attr&0x80)
21107                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21108 5241           8A46         06            mov	al,6[bp]
21109 5244           24                     80  and	al,#$80
21110 5246           84C0                       test	al,al
21111 5248           74           10            je  	.153
21112                       0000524A            .154:
21113                                           ! 2462   {
21114                                           ! 2463    outw(0x3ce, 0x1803);
21115                                           ! Debug: list int = const $1803 (used reg = )
21116 524A           B8                   1803  mov	ax,#$1803
21117 524D           50                         push	ax
21118                                           ! Debug: list int = const $3CE (used reg = )
21119 524E           B8                   03CE  mov	ax,#$3CE
21120 5251           50                         push	ax
21121                                           ! Debug: func () void = outw+0 (used reg = )
21122 5252           E8         2B66            call	_outw
21123 5255           83C4                   04  add	sp,*4
21124                                           !BCC_EOS
21125                                           ! 2464   }
21126                                           ! 2465  else
21127                                           ! 2466   {
21128 5258           EB           0E            jmp .155
21129                       0000525A            .153:
21130                                           ! 2467    outw(0x3ce, 0x0003);
21131                                           ! Debug: list int = const 3 (used reg = )
21132 525A           B8                   0003  mov	ax,*3
21133 525D           50                         push	ax
21134                                           ! Debug: list int = const $3CE (used reg = )
21135 525E           B8                   03CE  mov	ax,#$3CE
21136 5261           50                         push	ax
21137                                           ! Debug: func () void = outw+0 (used reg = )
21138 5262           E8         2B56            call	_outw
21139 5265           83C4                   04  add	sp,*4
21140                                           !BCC_EOS
21141                                           ! 2468   }
21142                                           ! 2469  for(i=0;i<cheight;i++)
21143                       00005268            .155:
21144                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21145 5268           30C0                       xor	al,al
21146 526A           8846         FF            mov	-1[bp],al
21147                                           !BCC_EOS
21148                                           !BCC_EOS
21149                                           ! 2470   {
21150 526D           E9         00A6            br 	.158
21151                       00005270            .159:
21152                                           ! 2471    dest=addr+i*nbcols;
21153                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21154 5270           8A46         0C            mov	al,$C[bp]
21155 5273           30E4                       xor	ah,ah
21156 5275           89C3                       mov	bx,ax
21157 5277           8A46         FF            mov	al,-1[bp]
21158 527A           30E4                       xor	ah,ah
21159 527C           89D9                       mov	cx,bx
21160 527E           F7E9                       imul	cx
21161                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21162                                           ! Debug: expression subtree swapping
21163 5280           0346         F8            add	ax,-8[bp]
21164                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21165 5283           8946         F6            mov	-$A[bp],ax
21166                                           !BCC_EOS
21167                                           ! 2472    for(j=0;j<8;j++)
21168                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21169 5286           30C0                       xor	al,al
21170 5288           8846         FE            mov	-2[bp],al
21171                                           !BCC_EOS
21172                                           !BCC_EOS
21173                                           ! 2473     {
21174 528B           EB           79            jmp .15C
21175                       0000528D            .15D:
21176                                           ! 2474      mask=0x80>>j;
21177                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21178 528D           8A46         FE            mov	al,-2[bp]
21179 5290           30E4                       xor	ah,ah
21180 5292           89C3                       mov	bx,ax
21181 5294           B8                   0080  mov	ax,#$80
21182 5297           89D9                       mov	cx,bx
21183 5299           D3F8                       sar	ax,cl
21184                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21185 529B           8846         FD            mov	-3[bp],al
21186                                           !BCC_EOS
21187                                           ! 2475      outw(0x3ce, (mask << 8) | 0x08);
21188                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21189 529E           8A46         FD            mov	al,-3[bp]
21190 52A1           30E4                       xor	ah,ah
21191 52A3           88C4                       mov	ah,al
21192 52A5           30C0                       xor	al,al
21193                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21194 52A7           0C                     08  or	al,*8
21195                                           ! Debug: list unsigned int = ax+0 (used reg = )
21196 52A9           50                         push	ax
21197                                           ! Debug: list int = const $3CE (used reg = )
21198 52AA           B8                   03CE  mov	ax,#$3CE
21199 52AD           50                         push	ax
21200                                           ! Debug: func () void = outw+0 (used reg = )
21201 52AE           E8         2B0A            call	_outw
21202 52B1           83C4                   04  add	sp,*4
21203                                           !BCC_EOS
21204                                           ! 2476      read_byte(0xa000,dest);
21205                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21206 52B4           FF76         F6            push	-$A[bp]
21207                                           ! Debug: list unsigned int = const $A000 (used reg = )
21208 52B7           B8                   A000  mov	ax,#$A000
21209 52BA           50                         push	ax
21210                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21211 52BB           E8         2A81            call	_read_byte
21212 52BE           83C4                   04  add	sp,*4
21213                                           !BCC_EOS
21214                                           ! 2477      if(fdata[src+i]&mask)
21215                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21216 52C1           8B46         F4            mov	ax,-$C[bp]
21217 52C4           0246         FF            add	al,-1[bp]
21218 52C7           80D4                   00  adc	ah,*0
21219                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21220 52CA           0346         FA            add	ax,-6[bp]
21221 52CD           89C3                       mov	bx,ax
21222                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21223 52CF           8A07                       mov	al,[bx]
21224 52D1           2246         FD            and	al,-3[bp]
21225 52D4           84C0                       test	al,al
21226 52D6           74           17            je  	.15E
21227                       000052D8            .15F:
21228                                           ! 2478       {
21229                                           ! 2479        write_byte(0xa000,dest,attr&0x0f);
21230                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21231 52D8           8A46         06            mov	al,6[bp]
21232 52DB           24                     0F  and	al,*$F
21233                                           ! Debug: list unsigned char = al+0 (used reg = )
21234 52DD           30E4                       xor	ah,ah
21235 52DF           50                         push	ax
21236                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21237 52E0           FF76         F6            push	-$A[bp]
21238                                           ! Debug: list unsigned int = const $A000 (used reg = )
21239 52E3           B8                   A000  mov	ax,#$A000
21240 52E6           50                         push	ax
21241                                           ! Debug: func () void = write_byte+0 (used reg = )
21242 52E7           E8         2A7B            call	_write_byte
21243 52EA           83C4                   06  add	sp,*6
21244                                           !BCC_EOS
21245                                           ! 2480       }
21246                                           ! 2481      else
21247                                           ! 2482       {
21248 52ED           EB           10            jmp .160
21249                       000052EF            .15E:
21250                                           ! 2483        write_byte(0xa000,dest,0x00);
21251                                           ! Debug: list int = const 0 (used reg = )
21252 52EF           31C0                       xor	ax,ax
21253 52F1           50                         push	ax
21254                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21255 52F2           FF76         F6            push	-$A[bp]
21256                                           ! Debug: list unsigned int = const $A000 (used reg = )
21257 52F5           B8                   A000  mov	ax,#$A000
21258 52F8           50                         push	ax
21259                                           ! Debug: func () void = write_byte+0 (used reg = )
21260 52F9           E8         2A69            call	_write_byte
21261 52FC           83C4                   06  add	sp,*6
21262                                           !BCC_EOS
21263                                           ! 2484       }
21264                                           ! 2485     }
21265                       000052FF            .160:
21266                                           ! 2486   }
21267                       000052FF            .15B:
21268                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21269 52FF           8A46         FE            mov	al,-2[bp]
21270 5302           40                         inc	ax
21271 5303           8846         FE            mov	-2[bp],al
21272                       00005306            .15C:
21273                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21274 5306           8A46         FE            mov	al,-2[bp]
21275 5309           3C                     08  cmp	al,*8
21276 530B         0F82         FF7E            blo 	.15D
21277                       0000530F            .161:
21278                       0000530F            .15A:
21279                                           ! 2487 #asm
21280                       0000530F            .157:
21281                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21282 530F           8A46         FF            mov	al,-1[bp]
21283 5312           40                         inc	ax
21284 5313           8846         FF            mov	-1[bp],al
21285                       00005316            .158:
21286                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21287 5316           8A46         FF            mov	al,-1[bp]
21288 5319           3A46         0E            cmp	al,$E[bp]
21289 531C         0F82         FF50            blo 	.159
21290                       00005320            .162:
21291                       00005320            .156:
21292                                           !BCC_EOS
21293                                           !BCC_ASM
21294                       0000000A            _write_gfx_char_pl4.j	set	$A
21295                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21296                       00000006            _write_gfx_char_pl4.fdata	set	6
21297                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21298                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21299                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21300                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21301                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21302                       0000000B            _write_gfx_char_pl4.i	set	$B
21303                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21304                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21305                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21306                       00000009            _write_gfx_char_pl4.mask	set	9
21307                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21308                       00000002            _write_gfx_char_pl4.dest	set	2
21309                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21310                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21311                       00000008            .write_gfx_char_pl4.xcurs	set	8
21312                       00000000            _write_gfx_char_pl4.src	set	0
21313                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21314                       00000012            _write_gfx_char_pl4.attr	set	$12
21315                       00000006            .write_gfx_char_pl4.attr	set	6
21316                       00000010            _write_gfx_char_pl4.car	set	$10
21317                       00000004            .write_gfx_char_pl4.car	set	4
21318                       00000004            _write_gfx_char_pl4.addr	set	4
21319                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21320 5320           BA                   03CE    mov dx, # 0x3ce
21321 5323           B8                   FF08    mov ax, #0xff08
21322 5326           EF                           out dx, ax
21323 5327           B8                   0005    mov ax, #0x0005
21324 532A           EF                           out dx, ax
21325 532B           B8                   0003    mov ax, #0x0003
21326 532E           EF                           out dx, ax
21327                                           ! 2495 endasm
21328                                           !BCC_ENDASM
21329                                           !BCC_EOS
21330                                           ! 2496 }
21331 532F           89EC                       mov	sp,bp
21332 5331           5D                         pop	bp
21333 5332           C3                         ret
21334                                           ! 2497 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21335                                           ! Register BX used in function write_gfx_char_pl4
21336                                           ! 2498 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21337                       00005333            _write_gfx_char_cga:
21338                                           !BCC_EOS
21339                                           !BCC_EOS
21340                                           !BCC_EOS
21341                                           !BCC_EOS
21342                                           !BCC_EOS
21343                                           !BCC_EOS
21344                                           ! 2499 {
21345                                           ! 2500  Bit8u i,j,mask,data;
21346                                           !BCC_EOS
21347                                           ! 2501  Bit8u *fdata;
21348                                           !BCC_EOS
21349                                           ! 2502  Bit16u addr,dest,src;
21350                                           !BCC_EOS
21351                                           ! 2503  fdata = &vgafont8;
21352 5333           55                         push	bp
21353 5334           89E5                       mov	bp,sp
21354 5336           83C4                   F4  add	sp,*-$C
21355                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21356 5339           BB                   0F6F  mov	bx,#_vgafont8
21357 533C           895E         FA            mov	-6[bp],bx
21358                                           !BCC_EOS
21359                                           ! 2504  addr=(xcurs*bpp)+ycurs*320;
21360                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21361 533F           8A46         0A            mov	al,$A[bp]
21362 5342           30E4                       xor	ah,ah
21363 5344           B9                   0140  mov	cx,#$140
21364 5347           F7E9                       imul	cx
21365 5349           50                         push	ax
21366                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21367 534A           8A46         0E            mov	al,$E[bp]
21368 534D           30E4                       xor	ah,ah
21369 534F           89C3                       mov	bx,ax
21370 5351           8A46         08            mov	al,8[bp]
21371 5354           30E4                       xor	ah,ah
21372 5356           89D9                       mov	cx,bx
21373 5358           F7E9                       imul	cx
21374                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21375 535A           0346         F2            add	ax,-$E[bp]
21376 535D           44                         inc	sp
21377 535E           44                         inc	sp
21378                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21379 535F           8946         F8            mov	-8[bp],ax
21380                                           !BCC_EOS
21381                                           ! 2505  src = car * 8;
21382                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21383 5362           8A46         04            mov	al,4[bp]
21384 5365           30E4                       xor	ah,ah
21385 5367           B1                     03  mov	cl,*3
21386 5369           D3E0                       shl	ax,cl
21387                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21388 536B           8946         F4            mov	-$C[bp],ax
21389                                           !BCC_EOS
21390                                           ! 2506  for(i=0;i<8;i++)
21391                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21392 536E           30C0                       xor	al,al
21393 5370           8846         FF            mov	-1[bp],al
21394                                           !BCC_EOS
21395                                           !BCC_EOS
21396                                           ! 2507   {
21397 5373           E9         01B3            br 	.165
21398                       00005376            .166:
21399                                           ! 2508    dest=addr+(i>>1)*80;
21400                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21401 5376           8A46         FF            mov	al,-1[bp]
21402 5379           30E4                       xor	ah,ah
21403 537B           D1E8                       shr	ax,*1
21404                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21405 537D           B9                   0050  mov	cx,*$50
21406 5380           F7E9                       imul	cx
21407                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21408                                           ! Debug: expression subtree swapping
21409 5382           0346         F8            add	ax,-8[bp]
21410                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21411 5385           8946         F6            mov	-$A[bp],ax
21412                                           !BCC_EOS
21413                                           ! 2509    if (i & 1) dest += 0x2000;
21414                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21415 5388           8A46         FF            mov	al,-1[bp]
21416 538B           24                     01  and	al,*1
21417 538D           84C0                       test	al,al
21418 538F           74           09            je  	.167
21419                       00005391            .168:
21420                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21421 5391           8B46         F6            mov	ax,-$A[bp]
21422 5394           05                   2000  add	ax,#$2000
21423 5397           8946         F6            mov	-$A[bp],ax
21424                                           !BCC_EOS
21425                                           ! 2510    mask = 0x80;
21426                       0000539A            .167:
21427                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21428 539A           B0                     80  mov	al,#$80
21429 539C           8846         FD            mov	-3[bp],al
21430                                           !BCC_EOS
21431                                           ! 2511    if (bpp == 1)
21432                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21433 539F           8A46         0E            mov	al,$E[bp]
21434 53A2           3C                     01  cmp	al,*1
21435 53A4         0F85         00B3            bne 	.169
21436                       000053A8            .16A:
21437                                           ! 2512     {
21438                                           ! 2513      if (attr & 0x80)
21439                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21440 53A8           8A46         06            mov	al,6[bp]
21441 53AB           24                     80  and	al,#$80
21442 53AD           84C0                       test	al,al
21443 53AF           74           12            je  	.16B
21444                       000053B1            .16C:
21445                                           ! 2514       {
21446                                           ! 2515        data = read_byte(0xb800,dest);
21447                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21448 53B1           FF76         F6            push	-$A[bp]
21449                                           ! Debug: list unsigned int = const $B800 (used reg = )
21450 53B4           B8                   B800  mov	ax,#$B800
21451 53B7           50                         push	ax
21452                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21453 53B8           E8         2984            call	_read_byte
21454 53BB           83C4                   04  add	sp,*4
21455                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21456 53BE           8846         FC            mov	-4[bp],al
21457                                           !BCC_EOS
21458                                           ! 2516       }
21459                                           ! 2517      else
21460                                           ! 2518       {
21461 53C1           EB           05            jmp .16D
21462                       000053C3            .16B:
21463                                           ! 2519        data = 0x00;
21464                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21465 53C3           30C0                       xor	al,al
21466 53C5           8846         FC            mov	-4[bp],al
21467                                           !BCC_EOS
21468                                           ! 2520       }
21469                                           ! 2521      for(j=0;j<8;j++)
21470                       000053C8            .16D:
21471                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21472 53C8           30C0                       xor	al,al
21473 53CA           8846         FE            mov	-2[bp],al
21474                                           !BCC_EOS
21475                                           !BCC_EOS
21476                                           ! 2522       {
21477 53CD           EB           6F            jmp .170
21478                       000053CF            .171:
21479                                           ! 2523        if (fdata[src+i] & mask)
21480                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21481 53CF           8B46         F4            mov	ax,-$C[bp]
21482 53D2           0246         FF            add	al,-1[bp]
21483 53D5           80D4                   00  adc	ah,*0
21484                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21485 53D8           0346         FA            add	ax,-6[bp]
21486 53DB           89C3                       mov	bx,ax
21487                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21488 53DD           8A07                       mov	al,[bx]
21489 53DF           2246         FD            and	al,-3[bp]
21490 53E2           84C0                       test	al,al
21491 53E4           74           47            je  	.172
21492                       000053E6            .173:
21493                                           ! 2524         {
21494                                           ! 2525          if (attr & 0x80)
21495                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21496 53E6           8A46         06            mov	al,6[bp]
21497 53E9           24                     80  and	al,#$80
21498 53EB           84C0                       test	al,al
21499 53ED           74           20            je  	.174
21500                       000053EF            .175:
21501                                           ! 2526           {
21502                                           ! 2527            data ^= (attr & 0x01) << (7-j);
21503                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21504 53EF           B8                   0007  mov	ax,*7
21505 53F2           2A46         FE            sub	al,-2[bp]
21506 53F5           80DC                   00  sbb	ah,*0
21507 53F8           50                         push	ax
21508                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21509 53F9           8A46         06            mov	al,6[bp]
21510 53FC           24                     01  and	al,*1
21511                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21512 53FE           30E4                       xor	ah,ah
21513 5400           8B4E         F2            mov	cx,-$E[bp]
21514 5403           D3E0                       shl	ax,cl
21515 5405           44                         inc	sp
21516 5406           44                         inc	sp
21517                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21518 5407           3246         FC            xor	al,-4[bp]
21519 540A           8846         FC            mov	-4[bp],al
21520                                           !BCC_EOS
21521                                           ! 2528           }
21522                                           ! 2529          else
21523                                           ! 2530           {
21524 540D           EB           1E            jmp .176
21525                       0000540F            .174:
21526                                           ! 2531            data |= (attr & 0x01) << (7-j);
21527                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21528 540F           B8                   0007  mov	ax,*7
21529 5412           2A46         FE            sub	al,-2[bp]
21530 5415           80DC                   00  sbb	ah,*0
21531 5418           50                         push	ax
21532                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21533 5419           8A46         06            mov	al,6[bp]
21534 541C           24                     01  and	al,*1
21535                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21536 541E           30E4                       xor	ah,ah
21537 5420           8B4E         F2            mov	cx,-$E[bp]
21538 5423           D3E0                       shl	ax,cl
21539 5425           44                         inc	sp
21540 5426           44                         inc	sp
21541                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21542 5427           0A46         FC            or	al,-4[bp]
21543 542A           8846         FC            mov	-4[bp],al
21544                                           !BCC_EOS
21545                                           ! 2532           }
21546                                           ! 2533         }
21547                       0000542D            .176:
21548                                           ! 2534        mask >>= 1;
21549                       0000542D            .172:
21550                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21551 542D           8A46         FD            mov	al,-3[bp]
21552 5430           30E4                       xor	ah,ah
21553 5432           D1E8                       shr	ax,*1
21554 5434           8846         FD            mov	-3[bp],al
21555                                           !BCC_EOS
21556                                           ! 2535       }
21557                                           ! 2536      write_byte(0xb800,dest,data);
21558                       00005437            .16F:
21559                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21560 5437           8A46         FE            mov	al,-2[bp]
21561 543A           40                         inc	ax
21562 543B           8846         FE            mov	-2[bp],al
21563                       0000543E            .170:
21564                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21565 543E           8A46         FE            mov	al,-2[bp]
21566 5441           3C                     08  cmp	al,*8
21567 5443           72           8A            jb 	.171
21568                       00005445            .177:
21569                       00005445            .16E:
21570                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21571 5445           8A46         FC            mov	al,-4[bp]
21572 5448           30E4                       xor	ah,ah
21573 544A           50                         push	ax
21574                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21575 544B           FF76         F6            push	-$A[bp]
21576                                           ! Debug: list unsigned int = const $B800 (used reg = )
21577 544E           B8                   B800  mov	ax,#$B800
21578 5451           50                         push	ax
21579                                           ! Debug: func () void = write_byte+0 (used reg = )
21580 5452           E8         2910            call	_write_byte
21581 5455           83C4                   06  add	sp,*6
21582                                           !BCC_EOS
21583                                           ! 2537     }
21584                                           ! 2538    else
21585                                           ! 2539     {
21586 5458           E9         00C7            br 	.178
21587                       0000545B            .169:
21588                                           ! 2540      while (mask > 0)
21589                                           ! 2541       {
21590 545B           E9         00BB            br 	.17A
21591                       0000545E            .17B:
21592                                           ! 2542        if (attr & 0x80)
21593                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21594 545E           8A46         06            mov	al,6[bp]
21595 5461           24                     80  and	al,#$80
21596 5463           84C0                       test	al,al
21597 5465           74           12            je  	.17C
21598                       00005467            .17D:
21599                                           ! 2543         {
21600                                           ! 2544          data = read_byte(0xb800,dest);
21601                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21602 5467           FF76         F6            push	-$A[bp]
21603                                           ! Debug: list unsigned int = const $B800 (used reg = )
21604 546A           B8                   B800  mov	ax,#$B800
21605 546D           50                         push	ax
21606                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21607 546E           E8         28CE            call	_read_byte
21608 5471           83C4                   04  add	sp,*4
21609                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21610 5474           8846         FC            mov	-4[bp],al
21611                                           !BCC_EOS
21612                                           ! 2545         }
21613                                           ! 2546        else
21614                                           ! 2547         {
21615 5477           EB           05            jmp .17E
21616                       00005479            .17C:
21617                                           ! 2548          data = 0x00;
21618                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21619 5479           30C0                       xor	al,al
21620 547B           8846         FC            mov	-4[bp],al
21621                                           !BCC_EOS
21622                                           ! 2549         }
21623                                           ! 2550        for(j=0;j<4;j++)
21624                       0000547E            .17E:
21625                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21626 547E           30C0                       xor	al,al
21627 5480           8846         FE            mov	-2[bp],al
21628                                           !BCC_EOS
21629                                           !BCC_EOS
21630                                           ! 2551         {
21631 5483           EB           73            jmp .181
21632                       00005485            .182:
21633                                           ! 2552          if (fdata[src+i] & mask)
21634                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21635 5485           8B46         F4            mov	ax,-$C[bp]
21636 5488           0246         FF            add	al,-1[bp]
21637 548B           80D4                   00  adc	ah,*0
21638                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21639 548E           0346         FA            add	ax,-6[bp]
21640 5491           89C3                       mov	bx,ax
21641                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21642 5493           8A07                       mov	al,[bx]
21643 5495           2246         FD            and	al,-3[bp]
21644 5498           84C0                       test	al,al
21645 549A           74           4B            je  	.183
21646                       0000549C            .184:
21647                                           ! 2553           {
21648                                           ! 2554            if (attr & 0x80)
21649                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21650 549C           8A46         06            mov	al,6[bp]
21651 549F           24                     80  and	al,#$80
21652 54A1           84C0                       test	al,al
21653 54A3           74           22            je  	.185
21654                       000054A5            .186:
21655                                           ! 2555             {
21656                                           ! 2556              data ^= (attr & 0x03) << ((3-j)*2);
21657                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21658 54A5           B8                   0003  mov	ax,*3
21659 54A8           2A46         FE            sub	al,-2[bp]
21660 54AB           80DC                   00  sbb	ah,*0
21661                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21662 54AE           D1E0                       shl	ax,*1
21663 54B0           50                         push	ax
21664                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21665 54B1           8A46         06            mov	al,6[bp]
21666 54B4           24                     03  and	al,*3
21667                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21668 54B6           30E4                       xor	ah,ah
21669 54B8           8B4E         F2            mov	cx,-$E[bp]
21670 54BB           D3E0                       shl	ax,cl
21671 54BD           44                         inc	sp
21672 54BE           44                         inc	sp
21673                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21674 54BF           3246         FC            xor	al,-4[bp]
21675 54C2           8846         FC            mov	-4[bp],al
21676                                           !BCC_EOS
21677                                           ! 2557             }
21678                                           ! 2558            else
21679                                           ! 2559             {
21680 54C5           EB           20            jmp .187
21681                       000054C7            .185:
21682                                           ! 2560              data |= (attr & 0x03) << ((3-j)*2);
21683                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21684 54C7           B8                   0003  mov	ax,*3
21685 54CA           2A46         FE            sub	al,-2[bp]
21686 54CD           80DC                   00  sbb	ah,*0
21687                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21688 54D0           D1E0                       shl	ax,*1
21689 54D2           50                         push	ax
21690                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21691 54D3           8A46         06            mov	al,6[bp]
21692 54D6           24                     03  and	al,*3
21693                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21694 54D8           30E4                       xor	ah,ah
21695 54DA           8B4E         F2            mov	cx,-$E[bp]
21696 54DD           D3E0                       shl	ax,cl
21697 54DF           44                         inc	sp
21698 54E0           44                         inc	sp
21699                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21700 54E1           0A46         FC            or	al,-4[bp]
21701 54E4           8846         FC            mov	-4[bp],al
21702                                           !BCC_EOS
21703                                           ! 2561             }
21704                                           ! 2562           }
21705                       000054E7            .187:
21706                                           ! 2563          mask >>= 1;
21707                       000054E7            .183:
21708                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21709 54E7           8A46         FD            mov	al,-3[bp]
21710 54EA           30E4                       xor	ah,ah
21711 54EC           D1E8                       shr	ax,*1
21712 54EE           8846         FD            mov	-3[bp],al
21713                                           !BCC_EOS
21714                                           ! 2564         }
21715                                           ! 2565        write_byte(0xb800,d
21716                       000054F1            .180:
21717                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21718 54F1           8A46         FE            mov	al,-2[bp]
21719 54F4           40                         inc	ax
21720 54F5           8846         FE            mov	-2[bp],al
21721                       000054F8            .181:
21722                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21723 54F8           8A46         FE            mov	al,-2[bp]
21724 54FB           3C                     04  cmp	al,*4
21725 54FD           72           86            jb 	.182
21726                       000054FF            .188:
21727                       000054FF            .17F:
21728                                           ! 2565 est,data);
21729                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21730 54FF           8A46         FC            mov	al,-4[bp]
21731 5502           30E4                       xor	ah,ah
21732 5504           50                         push	ax
21733                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21734 5505           FF76         F6            push	-$A[bp]
21735                                           ! Debug: list unsigned int = const $B800 (used reg = )
21736 5508           B8                   B800  mov	ax,#$B800
21737 550B           50                         push	ax
21738                                           ! Debug: func () void = write_byte+0 (used reg = )
21739 550C           E8         2856            call	_write_byte
21740 550F           83C4                   06  add	sp,*6
21741                                           !BCC_EOS
21742                                           ! 2566        dest += 1;
21743                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21744 5512           8B46         F6            mov	ax,-$A[bp]
21745 5515           40                         inc	ax
21746 5516           8946         F6            mov	-$A[bp],ax
21747                                           !BCC_EOS
21748                                           ! 2567       }
21749                                           ! 2568     }
21750                       00005519            .17A:
21751                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21752 5519           8A46         FD            mov	al,-3[bp]
21753 551C           84C0                       test	al,al
21754 551E         0F85         FF3C            bne 	.17B
21755                       00005522            .189:
21756                       00005522            .179:
21757                                           ! 2569   }
21758                       00005522            .178:
21759                                           ! 2570 }
21760                       00005522            .164:
21761                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21762 5522           8A46         FF            mov	al,-1[bp]
21763 5525           40                         inc	ax
21764 5526           8846         FF            mov	-1[bp],al
21765                       00005529            .165:
21766                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21767 5529           8A46         FF            mov	al,-1[bp]
21768 552C           3C                     08  cmp	al,*8
21769 552E         0F82         FE44            blo 	.166
21770                       00005532            .18A:
21771                       00005532            .163:
21772 5532           89EC                       mov	sp,bp
21773 5534           5D                         pop	bp
21774 5535           C3                         ret
21775                                           ! 2571 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21776                                           ! Register BX used in function write_gfx_char_cga
21777                                           ! 2572 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21778                       00005536            _write_gfx_char_lin:
21779                                           !BCC_EOS
21780                                           !BCC_EOS
21781                                           !BCC_EOS
21782                                           !BCC_EOS
21783                                           !BCC_EOS
21784                                           ! 2573 {
21785                                           ! 2574  Bit8u i,j,mask,data;
21786                                           !BCC_EOS
21787                                           ! 2575  Bit8u *fdata;
21788                                           !BCC_EOS
21789                                           ! 2576  Bit16u addr,dest,src;
21790                                           !BCC_EOS
21791                                           ! 2577  fdata = &vgafont8;
21792 5536           55                         push	bp
21793 5537           89E5                       mov	bp,sp
21794 5539           83C4                   F4  add	sp,*-$C
21795                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21796 553C           BB                   0F6F  mov	bx,#_vgafont8
21797 553F           895E         FA            mov	-6[bp],bx
21798                                           !BCC_EOS
21799                                           ! 2578  addr=xcurs*8+ycurs*nbcols*64;
21800                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21801 5542           8A46         0C            mov	al,$C[bp]
21802 5545           30E4                       xor	ah,ah
21803 5547           89C3                       mov	bx,ax
21804 5549           8A46         0A            mov	al,$A[bp]
21805 554C           30E4                       xor	ah,ah
21806 554E           89D9                       mov	cx,bx
21807 5550           F7E9                       imul	cx
21808                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21809 5552           B1                     06  mov	cl,*6
21810 5554           D3E0                       shl	ax,cl
21811 5556           50                         push	ax
21812                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21813 5557           8A46         08            mov	al,8[bp]
21814 555A           30E4                       xor	ah,ah
21815 555C           B1                     03  mov	cl,*3
21816 555E           D3E0                       shl	ax,cl
21817                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21818 5560           0346         F2            add	ax,-$E[bp]
21819 5563           44                         inc	sp
21820 5564           44                         inc	sp
21821                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21822 5565           8946         F8            mov	-8[bp],ax
21823                                           !BCC_EOS
21824                                           ! 2579  src = car * 8;
21825                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21826 5568           8A46         04            mov	al,4[bp]
21827 556B           30E4                       xor	ah,ah
21828 556D           B1                     03  mov	cl,*3
21829 556F           D3E0                       shl	ax,cl
21830                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21831 5571           8946         F4            mov	-$C[bp],ax
21832                                           !BCC_EOS
21833                                           ! 2580  for(i=0;i<8;i++)
21834                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21835 5574           30C0                       xor	al,al
21836 5576           8846         FF            mov	-1[bp],al
21837                                           !BCC_EOS
21838                                           !BCC_EOS
21839                                           ! 2581   {
21840 5579           E9         0081            br 	.18D
21841                       0000557C            .18E:
21842                                           ! 2582    dest=addr+i*nbcols*8;
21843                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21844 557C           8A46         0C            mov	al,$C[bp]
21845 557F           30E4                       xor	ah,ah
21846 5581           89C3                       mov	bx,ax
21847 5583           8A46         FF            mov	al,-1[bp]
21848 5586           30E4                       xor	ah,ah
21849 5588           89D9                       mov	cx,bx
21850 558A           F7E9                       imul	cx
21851                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21852 558C           B1                     03  mov	cl,*3
21853 558E           D3E0                       shl	ax,cl
21854                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21855                                           ! Debug: expression subtree swapping
21856 5590           0346         F8            add	ax,-8[bp]
21857                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21858 5593           8946         F6            mov	-$A[bp],ax
21859                                           !BCC_EOS
21860                                           ! 2583    mask = 0x80;
21861                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21862 5596           B0                     80  mov	al,#$80
21863 5598           8846         FD            mov	-3[bp],al
21864                                           !BCC_EOS
21865                                           ! 2584    for(j=0;j<8;j++)
21866                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21867 559B           30C0                       xor	al,al
21868 559D           8846         FE            mov	-2[bp],al
21869                                           !BCC_EOS
21870                                           !BCC_EOS
21871                                           ! 2585     {
21872 55A0           EB           4D            jmp .191
21873                       000055A2            .192:
21874                                           ! 2586      data = 0x00;
21875                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21876 55A2           30C0                       xor	al,al
21877 55A4           8846         FC            mov	-4[bp],al
21878                                           !BCC_EOS
21879                                           ! 2587      if (fdata[src+i] & mask)
21880                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21881 55A7           8B46         F4            mov	ax,-$C[bp]
21882 55AA           0246         FF            add	al,-1[bp]
21883 55AD           80D4                   00  adc	ah,*0
21884                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21885 55B0           0346         FA            add	ax,-6[bp]
21886 55B3           89C3                       mov	bx,ax
21887                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21888 55B5           8A07                       mov	al,[bx]
21889 55B7           2246         FD            and	al,-3[bp]
21890 55BA           84C0                       test	al,al
21891 55BC           74           06            je  	.193
21892                       000055BE            .194:
21893                                           ! 2588       {
21894                                           ! 2589        data = attr;
21895                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21896 55BE           8A46         06            mov	al,6[bp]
21897 55C1           8846         FC            mov	-4[bp],al
21898                                           !BCC_EOS
21899                                           ! 2590       }
21900                                           ! 2591      write_byte(0xa000,dest+j,data);
21901                       000055C4            .193:
21902                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21903 55C4           8A46         FC            mov	al,-4[bp]
21904 55C7           30E4                       xor	ah,ah
21905 55C9           50                         push	ax
21906                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21907 55CA           8B46         F6            mov	ax,-$A[bp]
21908 55CD           0246         FE            add	al,-2[bp]
21909 55D0           80D4                   00  adc	ah,*0
21910                                           ! Debug: list unsigned int = ax+0 (used reg = )
21911 55D3           50                         push	ax
21912                                           ! Debug: list unsigned int = const $A000 (used reg = )
21913 55D4           B8                   A000  mov	ax,#$A000
21914 55D7           50                         push	ax
21915                                           ! Debug: func () void = write_byte+0 (used reg = )
21916 55D8           E8         278A            call	_write_byte
21917 55DB           83C4                   06  add	sp,*6
21918                                           !BCC_EOS
21919                                           ! 2592      mask >>= 1;
21920                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21921 55DE           8A46         FD            mov	al,-3[bp]
21922 55E1           30E4                       xor	ah,ah
21923 55E3           D1E8                       shr	ax,*1
21924 55E5           8846         FD            mov	-3[bp],al
21925                                           !BCC_EOS
21926                                           ! 2593     }
21927                                           ! 2594   }
21928                       000055E8            .190:
21929                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21930 55E8           8A46         FE            mov	al,-2[bp]
21931 55EB           40                         inc	ax
21932 55EC           8846         FE            mov	-2[bp],al
21933                       000055EF            .191:
21934                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21935 55EF           8A46         FE            mov	al,-2[bp]
21936 55F2           3C                     08  cmp	al,*8
21937 55F4           72           AC            jb 	.192
21938                       000055F6            .195:
21939                       000055F6            .18F:
21940                                           ! 2595 }
21941                       000055F6            .18C:
21942                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21943 55F6           8A46         FF            mov	al,-1[bp]
21944 55F9           40                         inc	ax
21945 55FA           8846         FF            mov	-1[bp],al
21946                       000055FD            .18D:
21947                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21948 55FD           8A46         FF            mov	al,-1[bp]
21949 5600           3C                     08  cmp	al,*8
21950 5602         0F82         FF76            blo 	.18E
21951                       00005606            .196:
21952                       00005606            .18B:
21953 5606           89EC                       mov	sp,bp
21954 5608           5D                         pop	bp
21955 5609           C3                         ret
21956                                           ! 2596 static void biosfn_write_char_attr (car,page,attr,count)
21957                                           ! Register BX used in function write_gfx_char_lin
21958                                           ! 2597 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21959                       0000560A            _biosfn_write_char_attr:
21960                                           !BCC_EOS
21961                                           !BCC_EOS
21962                                           !BCC_EOS
21963                                           !BCC_EOS
21964                                           ! 2598 {
21965                                           ! 2599  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21966                                           !BCC_EOS
21967                                           ! 2600  Bit16u nbcols,nbrows,address;
21968                                           !BCC_EOS
21969                                           ! 2601  Bit16u cursor,dummy;
21970                                           !BCC_EOS
21971                                           ! 2602  mode=read_byte(0x40,0x49);
21972 560A           55                         push	bp
21973 560B           89E5                       mov	bp,sp
21974 560D           83C4                   F0  add	sp,*-$10
21975                                           ! Debug: list int = const $49 (used reg = )
21976 5610           B8                   0049  mov	ax,*$49
21977 5613           50                         push	ax
21978                                           ! Debug: list int = const $40 (used reg = )
21979 5614           B8                   0040  mov	ax,*$40
21980 5617           50                         push	ax
21981                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21982 5618           E8         2724            call	_read_byte
21983 561B           83C4                   04  add	sp,*4
21984                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21985 561E           8846         FC            mov	-4[bp],al
21986                                           !BCC_EOS
21987                                           ! 2603  line=find_vga_entry(mode);
21988                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21989 5621           8A46         FC            mov	al,-4[bp]
21990 5624           30E4                       xor	ah,ah
21991 5626           50                         push	ax
21992                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21993 5627           E8         2629            call	_find_vga_entry
21994 562A           44                         inc	sp
21995 562B           44                         inc	sp
21996                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21997 562C           8846         FB            mov	-5[bp],al
21998                                           !BCC_EOS
21999                                           ! 2604  if(line==0xFF)return;
22000                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22001 562F           8A46         FB            mov	al,-5[bp]
22002 5632           3C                     FF  cmp	al,#$FF
22003 5634           75           04            jne 	.197
22004                       00005636            .198:
22005 5636           89EC                       mov	sp,bp
22006 5638           5D                         pop	bp
22007 5639           C3                         ret
22008                                           !BCC_EOS
22009                                           ! 2605  biosfn_get_cursor_pos(page,&dummy,&cursor);
22010                       0000563A            .197:
22011                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22012 563A           8D5E         F2            lea	bx,-$E[bp]
22013 563D           53                         push	bx
22014                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22015 563E           8D5E         F0            lea	bx,-$10[bp]
22016 5641           53                         push	bx
22017                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22018 5642           8A46         06            mov	al,6[bp]
22019 5645           30E4                       xor	ah,ah
22020 5647           50                         push	ax
22021                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22022 5648           E8         EE3E            call	_biosfn_get_cursor_pos
22023 564B           83C4                   06  add	sp,*6
22024                                           !BCC_EOS
22025                                           ! 2606  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22026                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22027 564E           8A46         F2            mov	al,-$E[bp]
22028                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22029 5651           8846         FE            mov	-2[bp],al
22030                                           !BCC_EOS
22031                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22032 5654           8B46         F2            mov	ax,-$E[bp]
22033 5657           30C0                       xor	al,al
22034                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22035 5659           88E0                       mov	al,ah
22036 565B           30E4                       xor	ah,ah
22037                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22038 565D           8846         FD            mov	-3[bp],al
22039                                           !BCC_EOS
22040                                           ! 2607  nbrows=read_byte(0x40,0x84)+1;
22041                                           ! Debug: list int = const $84 (used reg = )
22042 5660           B8                   0084  mov	ax,#$84
22043 5663           50                         push	ax
22044                                           ! Debug: list int = const $40 (used reg = )
22045 5664           B8                   0040  mov	ax,*$40
22046 5667           50                         push	ax
22047                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22048 5668           E8         26D4            call	_read_byte
22049 566B           83C4                   04  add	sp,*4
22050                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22051 566E           30E4                       xor	ah,ah
22052                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22053 5670           40                         inc	ax
22054 5671           8946         F6            mov	-$A[bp],ax
22055                                           !BCC_EOS
22056                                           ! 2608  nbcols=read_word(0x40,0x4A);
22057                                           ! Debug: list int = const $4A (used reg = )
22058 5674           B8                   004A  mov	ax,*$4A
22059 5677           50                         push	ax
22060                                           ! Debug: list int = const $40 (used reg = )
22061 5678           B8                   0040  mov	ax,*$40
22062 567B           50                         push	ax
22063                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22064 567C           E8         26D3            call	_read_word
22065 567F           83C4                   04  add	sp,*4
22066                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22067 5682           8946         F8            mov	-8[bp],ax
22068                                           !BCC_EOS
22069                                           ! 2609  if(vga_modes[line].class==0x00)
22070                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22071 5685           8A46         FB            mov	al,-5[bp]
22072 5688           30E4                       xor	ah,ah
22073 568A           B1                     03  mov	cl,*3
22074 568C           D3E0                       shl	ax,cl
22075 568E           89C3                       mov	bx,ax
22076 5690           81C3                 020B  add	bx,#_vga_modes
22077                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22078 5694           8A47         01            mov	al,1[bx]
22079 5697           84C0                       test	al,al
22080 5699           75           6A            jne 	.199
22081                       0000569B            .19A:
22082                                           ! 2610   {
22083                                           ! 2611    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22084                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22085 569B           8A46         FD            mov	al,-3[bp]
22086 569E           30E4                       xor	ah,ah
22087 56A0           8B4E         F8            mov	cx,-8[bp]
22088 56A3           F7E9                       imul	cx
22089                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22090                                           ! Debug: expression subtree swapping
22091 56A5           0246         FE            add	al,-2[bp]
22092 56A8           80D4                   00  adc	ah,*0
22093                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22094 56AB           D1E0                       shl	ax,*1
22095 56AD           50                         push	ax
22096                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22097 56AE           8B46         F8            mov	ax,-8[bp]
22098 56B1           8B4E         F6            mov	cx,-$A[bp]
22099 56B4           F7E9                       imul	cx
22100                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22101 56B6           D1E0                       shl	ax,*1
22102                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22103 56B8           0C                     FF  or	al,#$FF
22104                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22105                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22106 56BA           89C3                       mov	bx,ax
22107 56BC           8A46         06            mov	al,6[bp]
22108 56BF           30E4                       xor	ah,ah
22109 56C1           93                         xchg	ax,bx
22110 56C2           40                         inc	ax
22111 56C3           89D9                       mov	cx,bx
22112 56C5           F7E9                       imul	cx
22113                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22114 56C7           0346         EE            add	ax,-$12[bp]
22115 56CA           44                         inc	sp
22116 56CB           44                         inc	sp
22117                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22118 56CC           8946         F4            mov	-$C[bp],ax
22119                                           !BCC_EOS
22120                                           ! 2612    dummy=((Bit16u)attr<<8)+car;
22121                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22122 56CF           8A46         08            mov	al,8[bp]
22123 56D2           30E4                       xor	ah,ah
22124                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22125 56D4           88C4                       mov	ah,al
22126 56D6           30C0                       xor	al,al
22127                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22128 56D8           0246         04            add	al,4[bp]
22129 56DB           80D4                   00  adc	ah,*0
22130                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22131 56DE           8946         F0            mov	-$10[bp],ax
22132                                           !BCC_EOS
22133                                           ! 2613    memsetw(vga_modes[line].sstart,address,dummy,count);
22134                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22135 56E1           FF76         0A            push	$A[bp]
22136                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22137 56E4           FF76         F0            push	-$10[bp]
22138                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22139 56E7           FF76         F4            push	-$C[bp]
22140                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22141 56EA           8A46         FB            mov	al,-5[bp]
22142 56ED           30E4                       xor	ah,ah
22143 56EF           B1                     03  mov	cl,*3
22144 56F1           D3E0                       shl	ax,cl
22145 56F3           89C3                       mov	bx,ax
22146 56F5           81C3                 020B  add	bx,#_vga_modes
22147                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22148 56F9           FF77         04            push	4[bx]
22149                                           ! Debug: func () void = memsetw+0 (used reg = )
22150 56FC           E8         25BB            call	_memsetw
22151 56FF           83C4                   08  add	sp,*8
22152                                           !BCC_EOS
22153                                           ! 2614   }
22154                                           ! 2615  else
22155                                           ! 2616   {
22156 5702           E9         00F8            br 	.19B
22157                       00005705            .199:
22158                                           ! 2617    cheight=video_param_table[line_to_vpti[line]].cheight;
22159                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22160 5705           8A46         FB            mov	al,-5[bp]
22161 5708           30E4                       xor	ah,ah
22162 570A           89C3                       mov	bx,ax
22163                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22164 570C           8A87       028B            mov	al,_line_to_vpti[bx]
22165 5710           30E4                       xor	ah,ah
22166 5712           B1                     06  mov	cl,*6
22167 5714           D3E0                       shl	ax,cl
22168 5716           89C3                       mov	bx,ax
22169 5718           81C3                 029F  add	bx,#_video_param_table
22170                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22171 571C           8A47         02            mov	al,2[bx]
22172 571F           8846         FF            mov	-1[bp],al
22173                                           !BCC_EOS
22174                                           ! 2618    bpp=vga_modes[line].pixbits;
22175                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22176 5722           8A46         FB            mov	al,-5[bp]
22177 5725           30E4                       xor	ah,ah
22178 5727           B1                     03  mov	cl,*3
22179 5729           D3E0                       shl	ax,cl
22180 572B           89C3                       mov	bx,ax
22181 572D           81C3                 020B  add	bx,#_vga_modes
22182                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22183 5731           8A47         03            mov	al,3[bx]
22184 5734           8846         FA            mov	-6[bp],al
22185                                           !BCC_EOS
22186                                           ! 2619    while((count-->0) && (xcurs<nbcols))
22187                                           ! 2620     {
22188 5737           E9         00AB            br 	.19D
22189                       0000573A            .19E:
22190                                           ! 2621      switch(vga_modes[line].memmodel)
22191                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22192 573A           8A46         FB            mov	al,-5[bp]
22193 573D           30E4                       xor	ah,ah
22194 573F           B1                     03  mov	cl,*3
22195 5741           D3E0                       shl	ax,cl
22196 5743           89C3                       mov	bx,ax
22197 5745           81C3                 020B  add	bx,#_vga_modes
22198 5749           8A47         02            mov	al,2[bx]
22199                                           ! 2622       {
22200 574C           EB           7A            jmp .1A1
22201                                           ! 2623        case 0x04:
22202                                           ! 2624        case 0x03:
22203                       0000574E            .1A2:
22204                                           ! 2625          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22205                       0000574E            .1A3:
22206                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22207 574E           8A46         FF            mov	al,-1[bp]
22208 5751           30E4                       xor	ah,ah
22209 5753           50                         push	ax
22210                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22211 5754           FF76         F8            push	-8[bp]
22212                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22213 5757           8A46         FD            mov	al,-3[bp]
22214 575A           30E4                       xor	ah,ah
22215 575C           50                         push	ax
22216                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22217 575D           8A46         FE            mov	al,-2[bp]
22218 5760           30E4                       xor	ah,ah
22219 5762           50                         push	ax
22220                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22221 5763           8A46         08            mov	al,8[bp]
22222 5766           30E4                       xor	ah,ah
22223 5768           50                         push	ax
22224                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22225 5769           8A46         04            mov	al,4[bp]
22226 576C           30E4                       xor	ah,ah
22227 576E           50                         push	ax
22228                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22229 576F           E8         FA4E            call	_write_gfx_char_pl4
22230 5772           83C4                   0C  add	sp,*$C
22231                                           !BCC_EOS
22232                                           ! 2626          break;
22233 5775           EB           67            jmp .19F
22234                                           !BCC_EOS
22235                                           ! 2627        case 0x02:
22236                                           ! 2628          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22237                       00005777            .1A4:
22238                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22239 5777           8A46         FA            mov	al,-6[bp]
22240 577A           30E4                       xor	ah,ah
22241 577C           50                         push	ax
22242                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22243 577D           FF76         F8            push	-8[bp]
22244                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22245 5780           8A46         FD            mov	al,-3[bp]
22246 5783           30E4                       xor	ah,ah
22247 5785           50                         push	ax
22248                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22249 5786           8A46         FE            mov	al,-2[bp]
22250 5789           30E4                       xor	ah,ah
22251 578B           50                         push	ax
22252                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22253 578C           8A46         08            mov	al,8[bp]
22254 578F           30E4                       xor	ah,ah
22255 5791           50                         push	ax
22256                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22257 5792           8A46         04            mov	al,4[bp]
22258 5795           30E4                       xor	ah,ah
22259 5797           50                         push	ax
22260                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22261 5798           E8         FB98            call	_write_gfx_char_cga
22262 579B           83C4                   0C  add	sp,*$C
22263                                           !BCC_EOS
22264                                           ! 2629          break;
22265 579E           EB           3E            jmp .19F
22266                                           !BCC_EOS
22267                                           ! 2630        case 0x05:
22268                                           ! 2631          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22269                       000057A0            .1A5:
22270                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22271 57A0           FF76         F8            push	-8[bp]
22272                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22273 57A3           8A46         FD            mov	al,-3[bp]
22274 57A6           30E4                       xor	ah,ah
22275 57A8           50                         push	ax
22276                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22277 57A9           8A46         FE            mov	al,-2[bp]
22278 57AC           30E4                       xor	ah,ah
22279 57AE           50                         push	ax
22280                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22281 57AF           8A46         08            mov	al,8[bp]
22282 57B2           30E4                       xor	ah,ah
22283 57B4           50                         push	ax
22284                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22285 57B5           8A46         04            mov	al,4[bp]
22286 57B8           30E4                       xor	ah,ah
22287 57BA           50                         push	ax
22288                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22289 57BB           E8         FD78            call	_write_gfx_char_lin
22290 57BE           83C4                   0A  add	sp,*$A
22291                                           !BCC_EOS
22292                                           ! 2632          break;
22293 57C1           EB           1B            jmp .19F
22294                                           !BCC_EOS
22295                                           ! 2633        default:
22296                                           ! 2634          unimplemented();
22297                       000057C3            .1A6:
22298                                           ! Debug: func () void = unimplemented+0 (used reg = )
22299 57C3           E8         2608            call	_unimplemented
22300                                           !BCC_EOS
22301                                           ! 2635       }
22302                                           ! 2636      xcurs++;
22303 57C6           EB           16            jmp .19F
22304                       000057C8            .1A1:
22305 57C8           2C                     02  sub	al,*2
22306 57CA           74           AB            je 	.1A4
22307 57CC           2C                     01  sub	al,*1
22308 57CE         0F84         FF7C            beq 	.1A3
22309 57D2           2C                     01  sub	al,*1
22310 57D4         0F84         FF76            beq 	.1A2
22311 57D8           2C                     01  sub	al,*1
22312 57DA           74           C4            je 	.1A5
22313 57DC           EB           E5            jmp	.1A6
22314                       000057DE            .19F:
22315                       FFFFFFEE            ..FFFA	=	-$12
22316                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22317 57DE           8A46         FE            mov	al,-2[bp]
22318 57E1           40                         inc	ax
22319 57E2           8846         FE            mov	-2[bp],al
22320                                           !BCC_EOS
22321                                           ! 2637     }
22322                                           ! 2638   }
22323                       000057E5            .19D:
22324                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22325 57E5           8B46         0A            mov	ax,$A[bp]
22326 57E8           48                         dec	ax
22327 57E9           8946         0A            mov	$A[bp],ax
22328                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22329 57EC           3D                   FFFF  cmp	ax,*-1
22330 57EF           74           0C            je  	.1A7
22331                       000057F1            .1A8:
22332                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22333 57F1           8A46         FE            mov	al,-2[bp]
22334 57F4           30E4                       xor	ah,ah
22335 57F6           3B46         F8            cmp	ax,-8[bp]
22336 57F9         0F82         FF3D            blo 	.19E
22337                       000057FD            .1A7:
22338                       000057FD            .19C:
22339                                           ! 2639 }
22340                       000057FD            .19B:
22341 57FD           89EC                       mov	sp,bp
22342 57FF           5D                         pop	bp
22343 5800           C3                         ret
22344                                           ! 2640 static void biosfn_write_char_only (car,page,attr,count)
22345                                           ! Register BX used in function biosfn_write_char_attr
22346                                           ! 2641 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22347                       00005801            _biosfn_write_char_only:
22348                                           !BCC_EOS
22349                                           !BCC_EOS
22350                                           !BCC_EOS
22351                                           !BCC_EOS
22352                                           ! 2642 {
22353                                           ! 2643  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22354                                           !BCC_EOS
22355                                           ! 2644  Bit16u nbcols,nbrows,address;
22356                                           !BCC_EOS
22357                                           ! 2645  Bit16u cursor,dummy;
22358                                           !BCC_EOS
22359                                           ! 2646  mode=read_byte(0x40,0x49);
22360 5801           55                         push	bp
22361 5802           89E5                       mov	bp,sp
22362 5804           83C4                   F0  add	sp,*-$10
22363                                           ! Debug: list int = const $49 (used reg = )
22364 5807           B8                   0049  mov	ax,*$49
22365 580A           50                         push	ax
22366                                           ! Debug: list int = const $40 (used reg = )
22367 580B           B8                   0040  mov	ax,*$40
22368 580E           50                         push	ax
22369                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22370 580F           E8         252D            call	_read_byte
22371 5812           83C4                   04  add	sp,*4
22372                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22373 5815           8846         FC            mov	-4[bp],al
22374                                           !BCC_EOS
22375                                           ! 2647  line=find_vga_entry(mode);
22376                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22377 5818           8A46         FC            mov	al,-4[bp]
22378 581B           30E4                       xor	ah,ah
22379 581D           50                         push	ax
22380                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22381 581E           E8         2432            call	_find_vga_entry
22382 5821           44                         inc	sp
22383 5822           44                         inc	sp
22384                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22385 5823           8846         FB            mov	-5[bp],al
22386                                           !BCC_EOS
22387                                           ! 2648  if(line==0xFF)return;
22388                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22389 5826           8A46         FB            mov	al,-5[bp]
22390 5829           3C                     FF  cmp	al,#$FF
22391 582B           75           04            jne 	.1A9
22392                       0000582D            .1AA:
22393 582D           89EC                       mov	sp,bp
22394 582F           5D                         pop	bp
22395 5830           C3                         ret
22396                                           !BCC_EOS
22397                                           ! 2649  biosfn_get_cursor_pos(p
22398                       00005831            .1A9:
22399                                           ! 2649 age,&dummy,&cursor);
22400                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22401 5831           8D5E         F2            lea	bx,-$E[bp]
22402 5834           53                         push	bx
22403                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22404 5835           8D5E         F0            lea	bx,-$10[bp]
22405 5838           53                         push	bx
22406                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22407 5839           8A46         06            mov	al,6[bp]
22408 583C           30E4                       xor	ah,ah
22409 583E           50                         push	ax
22410                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22411 583F           E8         EC47            call	_biosfn_get_cursor_pos
22412 5842           83C4                   06  add	sp,*6
22413                                           !BCC_EOS
22414                                           ! 2650  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22415                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22416 5845           8A46         F2            mov	al,-$E[bp]
22417                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22418 5848           8846         FE            mov	-2[bp],al
22419                                           !BCC_EOS
22420                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22421 584B           8B46         F2            mov	ax,-$E[bp]
22422 584E           30C0                       xor	al,al
22423                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22424 5850           88E0                       mov	al,ah
22425 5852           30E4                       xor	ah,ah
22426                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22427 5854           8846         FD            mov	-3[bp],al
22428                                           !BCC_EOS
22429                                           ! 2651  nbrows=read_byte(0x40,0x84)+1;
22430                                           ! Debug: list int = const $84 (used reg = )
22431 5857           B8                   0084  mov	ax,#$84
22432 585A           50                         push	ax
22433                                           ! Debug: list int = const $40 (used reg = )
22434 585B           B8                   0040  mov	ax,*$40
22435 585E           50                         push	ax
22436                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22437 585F           E8         24DD            call	_read_byte
22438 5862           83C4                   04  add	sp,*4
22439                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22440 5865           30E4                       xor	ah,ah
22441                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22442 5867           40                         inc	ax
22443 5868           8946         F6            mov	-$A[bp],ax
22444                                           !BCC_EOS
22445                                           ! 2652  nbcols=read_word(0x40,0x4A);
22446                                           ! Debug: list int = const $4A (used reg = )
22447 586B           B8                   004A  mov	ax,*$4A
22448 586E           50                         push	ax
22449                                           ! Debug: list int = const $40 (used reg = )
22450 586F           B8                   0040  mov	ax,*$40
22451 5872           50                         push	ax
22452                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22453 5873           E8         24DC            call	_read_word
22454 5876           83C4                   04  add	sp,*4
22455                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22456 5879           8946         F8            mov	-8[bp],ax
22457                                           !BCC_EOS
22458                                           ! 2653  if(vga_modes[line].class==0x00)
22459                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22460 587C           8A46         FB            mov	al,-5[bp]
22461 587F           30E4                       xor	ah,ah
22462 5881           B1                     03  mov	cl,*3
22463 5883           D3E0                       shl	ax,cl
22464 5885           89C3                       mov	bx,ax
22465 5887           81C3                 020B  add	bx,#_vga_modes
22466                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22467 588B           8A47         01            mov	al,1[bx]
22468 588E           84C0                       test	al,al
22469 5890           75           6E            jne 	.1AB
22470                       00005892            .1AC:
22471                                           ! 2654   {
22472                                           ! 2655    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22473                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22474 5892           8A46         FD            mov	al,-3[bp]
22475 5895           30E4                       xor	ah,ah
22476 5897           8B4E         F8            mov	cx,-8[bp]
22477 589A           F7E9                       imul	cx
22478                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22479                                           ! Debug: expression subtree swapping
22480 589C           0246         FE            add	al,-2[bp]
22481 589F           80D4                   00  adc	ah,*0
22482                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22483 58A2           D1E0                       shl	ax,*1
22484 58A4           50                         push	ax
22485                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22486 58A5           8B46         F8            mov	ax,-8[bp]
22487 58A8           8B4E         F6            mov	cx,-$A[bp]
22488 58AB           F7E9                       imul	cx
22489                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22490 58AD           D1E0                       shl	ax,*1
22491                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22492 58AF           0C                     FF  or	al,#$FF
22493                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22494                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22495 58B1           89C3                       mov	bx,ax
22496 58B3           8A46         06            mov	al,6[bp]
22497 58B6           30E4                       xor	ah,ah
22498 58B8           93                         xchg	ax,bx
22499 58B9           40                         inc	ax
22500 58BA           89D9                       mov	cx,bx
22501 58BC           F7E9                       imul	cx
22502                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22503 58BE           0346         EE            add	ax,-$12[bp]
22504 58C1           44                         inc	sp
22505 58C2           44                         inc	sp
22506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22507 58C3           8946         F4            mov	-$C[bp],ax
22508                                           !BCC_EOS
22509                                           ! 2656    while(count-->0)
22510                                           ! 2657     {write_byte(vga_modes[line].sstart,address,car);
22511 58C6           EB           29            jmp .1AE
22512                       000058C8            .1AF:
22513                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22514 58C8           8A46         04            mov	al,4[bp]
22515 58CB           30E4                       xor	ah,ah
22516 58CD           50                         push	ax
22517                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22518 58CE           FF76         F4            push	-$C[bp]
22519                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22520 58D1           8A46         FB            mov	al,-5[bp]
22521 58D4           30E4                       xor	ah,ah
22522 58D6           B1                     03  mov	cl,*3
22523 58D8           D3E0                       shl	ax,cl
22524 58DA           89C3                       mov	bx,ax
22525 58DC           81C3                 020B  add	bx,#_vga_modes
22526                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22527 58E0           FF77         04            push	4[bx]
22528                                           ! Debug: func () void = write_byte+0 (used reg = )
22529 58E3           E8         247F            call	_write_byte
22530 58E6           83C4                   06  add	sp,*6
22531                                           !BCC_EOS
22532                                           ! 2658      address+=2;
22533                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22534 58E9           8B46         F4            mov	ax,-$C[bp]
22535 58EC           40                         inc	ax
22536 58ED           40                         inc	ax
22537 58EE           8946         F4            mov	-$C[bp],ax
22538                                           !BCC_EOS
22539                                           ! 2659     }
22540                                           ! 2660   }
22541                       000058F1            .1AE:
22542                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22543 58F1           8B46         0A            mov	ax,$A[bp]
22544 58F4           48                         dec	ax
22545 58F5           8946         0A            mov	$A[bp],ax
22546                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22547 58F8           3D                   FFFF  cmp	ax,*-1
22548 58FB           75           CB            jne	.1AF
22549                       000058FD            .1B0:
22550                       000058FD            .1AD:
22551                                           ! 2661  else
22552                                           ! 2662   {
22553 58FD           E9         00F8            br 	.1B1
22554                       00005900            .1AB:
22555                                           ! 2663    cheight=video_param_table[line_to_vpti[line]].cheight;
22556                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22557 5900           8A46         FB            mov	al,-5[bp]
22558 5903           30E4                       xor	ah,ah
22559 5905           89C3                       mov	bx,ax
22560                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22561 5907           8A87       028B            mov	al,_line_to_vpti[bx]
22562 590B           30E4                       xor	ah,ah
22563 590D           B1                     06  mov	cl,*6
22564 590F           D3E0                       shl	ax,cl
22565 5911           89C3                       mov	bx,ax
22566 5913           81C3                 029F  add	bx,#_video_param_table
22567                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22568 5917           8A47         02            mov	al,2[bx]
22569 591A           8846         FF            mov	-1[bp],al
22570                                           !BCC_EOS
22571                                           ! 2664    bpp=vga_modes[line].pixbits;
22572                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22573 591D           8A46         FB            mov	al,-5[bp]
22574 5920           30E4                       xor	ah,ah
22575 5922           B1                     03  mov	cl,*3
22576 5924           D3E0                       shl	ax,cl
22577 5926           89C3                       mov	bx,ax
22578 5928           81C3                 020B  add	bx,#_vga_modes
22579                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22580 592C           8A47         03            mov	al,3[bx]
22581 592F           8846         FA            mov	-6[bp],al
22582                                           !BCC_EOS
22583                                           ! 2665    while((count-->0) && (xcurs<nbcols))
22584                                           ! 2666     {
22585 5932           E9         00AB            br 	.1B3
22586                       00005935            .1B4:
22587                                           ! 2667      switch(vga_modes[line].memmodel)
22588                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22589 5935           8A46         FB            mov	al,-5[bp]
22590 5938           30E4                       xor	ah,ah
22591 593A           B1                     03  mov	cl,*3
22592 593C           D3E0                       shl	ax,cl
22593 593E           89C3                       mov	bx,ax
22594 5940           81C3                 020B  add	bx,#_vga_modes
22595 5944           8A47         02            mov	al,2[bx]
22596                                           ! 2668       {
22597 5947           EB           7A            jmp .1B7
22598                                           ! 2669        case 0x04:
22599                                           ! 2670        case 0x03:
22600                       00005949            .1B8:
22601                                           ! 2671          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22602                       00005949            .1B9:
22603                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22604 5949           8A46         FF            mov	al,-1[bp]
22605 594C           30E4                       xor	ah,ah
22606 594E           50                         push	ax
22607                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22608 594F           FF76         F8            push	-8[bp]
22609                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22610 5952           8A46         FD            mov	al,-3[bp]
22611 5955           30E4                       xor	ah,ah
22612 5957           50                         push	ax
22613                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22614 5958           8A46         FE            mov	al,-2[bp]
22615 595B           30E4                       xor	ah,ah
22616 595D           50                         push	ax
22617                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22618 595E           8A46         08            mov	al,8[bp]
22619 5961           30E4                       xor	ah,ah
22620 5963           50                         push	ax
22621                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22622 5964           8A46         04            mov	al,4[bp]
22623 5967           30E4                       xor	ah,ah
22624 5969           50                         push	ax
22625                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22626 596A           E8         F853            call	_write_gfx_char_pl4
22627 596D           83C4                   0C  add	sp,*$C
22628                                           !BCC_EOS
22629                                           ! 2672          break;
22630 5970           EB           67            jmp .1B5
22631                                           !BCC_EOS
22632                                           ! 2673        case 0x02:
22633                                           ! 2674          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22634                       00005972            .1BA:
22635                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22636 5972           8A46         FA            mov	al,-6[bp]
22637 5975           30E4                       xor	ah,ah
22638 5977           50                         push	ax
22639                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22640 5978           FF76         F8            push	-8[bp]
22641                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22642 597B           8A46         FD            mov	al,-3[bp]
22643 597E           30E4                       xor	ah,ah
22644 5980           50                         push	ax
22645                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22646 5981           8A46         FE            mov	al,-2[bp]
22647 5984           30E4                       xor	ah,ah
22648 5986           50                         push	ax
22649                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22650 5987           8A46         08            mov	al,8[bp]
22651 598A           30E4                       xor	ah,ah
22652 598C           50                         push	ax
22653                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22654 598D           8A46         04            mov	al,4[bp]
22655 5990           30E4                       xor	ah,ah
22656 5992           50                         push	ax
22657                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22658 5993           E8         F99D            call	_write_gfx_char_cga
22659 5996           83C4                   0C  add	sp,*$C
22660                                           !BCC_EOS
22661                                           ! 2675          break;
22662 5999           EB           3E            jmp .1B5
22663                                           !BCC_EOS
22664                                           ! 2676        case 0x05:
22665                                           ! 2677          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22666                       0000599B            .1BB:
22667                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22668 599B           FF76         F8            push	-8[bp]
22669                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22670 599E           8A46         FD            mov	al,-3[bp]
22671 59A1           30E4                       xor	ah,ah
22672 59A3           50                         push	ax
22673                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22674 59A4           8A46         FE            mov	al,-2[bp]
22675 59A7           30E4                       xor	ah,ah
22676 59A9           50                         push	ax
22677                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22678 59AA           8A46         08            mov	al,8[bp]
22679 59AD           30E4                       xor	ah,ah
22680 59AF           50                         push	ax
22681                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22682 59B0           8A46         04            mov	al,4[bp]
22683 59B3           30E4                       xor	ah,ah
22684 59B5           50                         push	ax
22685                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22686 59B6           E8         FB7D            call	_write_gfx_char_lin
22687 59B9           83C4                   0A  add	sp,*$A
22688                                           !BCC_EOS
22689                                           ! 2678          break;
22690 59BC           EB           1B            jmp .1B5
22691                                           !BCC_EOS
22692                                           ! 2679        default:
22693                                           ! 2680          unimplemented();
22694                       000059BE            .1BC:
22695                                           ! Debug: func () void = unimplemented+0 (used reg = )
22696 59BE           E8         240D            call	_unimplemented
22697                                           !BCC_EOS
22698                                           ! 2681       }
22699                                           ! 2682      xcurs++;
22700 59C1           EB           16            jmp .1B5
22701                       000059C3            .1B7:
22702 59C3           2C                     02  sub	al,*2
22703 59C5           74           AB            je 	.1BA
22704 59C7           2C                     01  sub	al,*1
22705 59C9         0F84         FF7C            beq 	.1B9
22706 59CD           2C                     01  sub	al,*1
22707 59CF         0F84         FF76            beq 	.1B8
22708 59D3           2C                     01  sub	al,*1
22709 59D5           74           C4            je 	.1BB
22710 59D7           EB           E5            jmp	.1BC
22711                       000059D9            .1B5:
22712                       FFFFFFEE            ..FFF9	=	-$12
22713                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22714 59D9           8A46         FE            mov	al,-2[bp]
22715 59DC           40                         inc	ax
22716 59DD           8846         FE            mov	-2[bp],al
22717                                           !BCC_EOS
22718                                           ! 2683     }
22719                                           ! 2684   }
22720                       000059E0            .1B3:
22721                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22722 59E0           8B46         0A            mov	ax,$A[bp]
22723 59E3           48                         dec	ax
22724 59E4           8946         0A            mov	$A[bp],ax
22725                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22726 59E7           3D                   FFFF  cmp	ax,*-1
22727 59EA           74           0C            je  	.1BD
22728                       000059EC            .1BE:
22729                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22730 59EC           8A46         FE            mov	al,-2[bp]
22731 59EF           30E4                       xor	ah,ah
22732 59F1           3B46         F8            cmp	ax,-8[bp]
22733 59F4         0F82         FF3D            blo 	.1B4
22734                       000059F8            .1BD:
22735                       000059F8            .1B2:
22736                                           ! 2685 }
22737                       000059F8            .1B1:
22738 59F8           89EC                       mov	sp,bp
22739 59FA           5D                         pop	bp
22740 59FB           C3                         ret
22741                                           ! 2686 #asm
22742                                           !BCC_ASM
22743                       00000008            _biosfn_write_char_only.count	set	8
22744                       00000006            _biosfn_write_char_only.attr	set	6
22745                       00000004            _biosfn_write_char_only.page	set	4
22746                       00000002            _biosfn_write_char_only.car	set	2
22747                       000059FC            biosfn_group_0B:
22748 59FC           80FF                   00    cmp bh, #0x00
22749 59FF           74           09              je biosfn_set_border_color
22750 5A01           80FF                   01    cmp bh, #0x01
22751 5A04           74           43              je biosfn_set_palette
22752 5A06           E8         23D3              call _unknown
22753 5A09           C3                           ret
22754                       00005A0A            biosfn_set_border_color:
22755 5A0A           50                           push ax
22756 5A0B           53                           push bx
22757 5A0C           51                           push cx
22758 5A0D           52                           push dx
22759 5A0E           BA                   03DA    mov dx, # 0x3da
22760 5A11           EC                           in al, dx
22761 5A12           BA                   03C0    mov dx, # 0x3c0
22762 5A15           B0                     00    mov al, #0x00
22763 5A17           EE                           out dx, al
22764 5A18           88D8                         mov al, bl
22765 5A1A           24                     0F    and al, #0x0f
22766 5A1C           A8                     08    test al, #0x08
22767 5A1E           74           02              jz set_low_border
22768 5A20           04                     08    add al, #0x08
22769                       00005A22            set_low_border:
22770 5A22           EE                           out dx, al
22771 5A23           B1                     01    mov cl, #0x01
22772 5A25           80E3                   10    and bl, #0x10
22773                       00005A28            set_intensity_loop:
22774 5A28           BA                   03C0    mov dx, # 0x3c0
22775 5A2B           88C8                         mov al, cl
22776 5A2D           EE                           out dx, al
22777 5A2E           BA                   03C1    mov dx, # 0x3c1
22778 5A31           EC                           in al, dx
22779 5A32           24                     EF    and al, #0xef
22780 5A34           08D8                         or al, bl
22781 5A36           BA                   03C0    mov dx, # 0x3c0
22782 5A39           EE                           out dx, al
22783 5A3A           FEC1                         inc cl
22784 5A3C           80F9                   04    cmp cl, #0x04
22785 5A3F           75           E7              jne set_intensity_loop
22786 5A41           B0                     20    mov al, #0x20
22787 5A43           EE                           out dx, al
22788 5A44           5A                           pop dx
22789 5A45           59                           pop cx
22790 5A46           5B                           pop bx
22791 5A47           58                           pop ax
22792 5A48           C3                           ret
22793                       00005A49            biosfn_set_palette:
22794 5A49           50                           push ax
22795 5A4A           53                           push bx
22796 5A4B           51                           push cx
22797 5A4C           52                           push dx
22798 5A4D           BA                   03DA    mov dx, # 0x3da
22799 5A50           EC                           in al, dx
22800 5A51           B1                     01    mov cl, #0x01
22801 5A53           80E3                   01    and bl, #0x01
22802                       00005A56            set_cga_palette_loop:
22803 5A56           BA                   03C0    mov dx, # 0x3c0
22804 5A59           88C8                         mov al, cl
22805 5A5B           EE                           out dx, al
22806 5A5C           BA                   03C1    mov dx, # 0x3c1
22807 5A5F           EC                           in al, dx
22808 5A60           24                     FE    and al, #0xfe
22809 5A62           08D8                         or al, bl
22810 5A64           BA                   03C0    mov dx, # 0x3c0
22811 5A67           EE                           out dx, al
22812 5A68           FEC1                         inc cl
22813 5A6A           80F9                   04    cmp cl, #0x04
22814 5A6D           75           E7              jne set_cga_palette_loop
22815 5A6F           B0                     20    mov al, #0x20
22816 5A71           EE                           out dx, al
22817 5A72           5A                           pop dx
22818 5A73           59                           pop cx
22819 5A74           5B                           pop bx
22820 5A75           58                           pop ax
22821 5A76           C3                           ret
22822                                           ! 2762 endasm
22823                                           !BCC_ENDASM
22824                                           ! 2763 static void biosfn_write_pixel (BH,AL,
22825                                           ! Register BX used in function biosfn_write_char_only
22826                                           ! 2763 CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22827                       00005A77            _biosfn_write_pixel:
22828                                           !BCC_EOS
22829                                           !BCC_EOS
22830                                           !BCC_EOS
22831                                           !BCC_EOS
22832                                           ! 2764 {
22833                                           ! 2765  Bit8u mode,line,mask,attr,data;
22834                                           !BCC_EOS
22835                                           ! 2766  Bit16u addr;
22836                                           !BCC_EOS
22837                                           ! 2767  mode=read_byte(0x40,0x49);
22838 5A77           55                         push	bp
22839 5A78           89E5                       mov	bp,sp
22840 5A7A           83C4                   F8  add	sp,*-8
22841                                           ! Debug: list int = const $49 (used reg = )
22842 5A7D           B8                   0049  mov	ax,*$49
22843 5A80           50                         push	ax
22844                                           ! Debug: list int = const $40 (used reg = )
22845 5A81           B8                   0040  mov	ax,*$40
22846 5A84           50                         push	ax
22847                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22848 5A85           E8         22B7            call	_read_byte
22849 5A88           83C4                   04  add	sp,*4
22850                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22851 5A8B           8846         FF            mov	-1[bp],al
22852                                           !BCC_EOS
22853                                           ! 2768  line=find_vga_entry(mode);
22854                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22855 5A8E           8A46         FF            mov	al,-1[bp]
22856 5A91           30E4                       xor	ah,ah
22857 5A93           50                         push	ax
22858                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22859 5A94           E8         21BC            call	_find_vga_entry
22860 5A97           44                         inc	sp
22861 5A98           44                         inc	sp
22862                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22863 5A99           8846         FE            mov	-2[bp],al
22864                                           !BCC_EOS
22865                                           ! 2769  if(line==0xFF)return;
22866                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22867 5A9C           8A46         FE            mov	al,-2[bp]
22868 5A9F           3C                     FF  cmp	al,#$FF
22869 5AA1           75           04            jne 	.1BF
22870                       00005AA3            .1C0:
22871 5AA3           89EC                       mov	sp,bp
22872 5AA5           5D                         pop	bp
22873 5AA6           C3                         ret
22874                                           !BCC_EOS
22875                                           ! 2770  if(vga_modes[line].class==0x00)return;
22876                       00005AA7            .1BF:
22877                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22878 5AA7           8A46         FE            mov	al,-2[bp]
22879 5AAA           30E4                       xor	ah,ah
22880 5AAC           B1                     03  mov	cl,*3
22881 5AAE           D3E0                       shl	ax,cl
22882 5AB0           89C3                       mov	bx,ax
22883 5AB2           81C3                 020B  add	bx,#_vga_modes
22884                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22885 5AB6           8A47         01            mov	al,1[bx]
22886 5AB9           84C0                       test	al,al
22887 5ABB           75           04            jne 	.1C1
22888                       00005ABD            .1C2:
22889 5ABD           89EC                       mov	sp,bp
22890 5ABF           5D                         pop	bp
22891 5AC0           C3                         ret
22892                                           !BCC_EOS
22893                                           ! 2771  switch(vga_modes[line].memmodel)
22894                       00005AC1            .1C1:
22895                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22896 5AC1           8A46         FE            mov	al,-2[bp]
22897 5AC4           30E4                       xor	ah,ah
22898 5AC6           B1                     03  mov	cl,*3
22899 5AC8           D3E0                       shl	ax,cl
22900 5ACA           89C3                       mov	bx,ax
22901 5ACC           81C3                 020B  add	bx,#_vga_modes
22902 5AD0           8A47         02            mov	al,2[bx]
22903                                           ! 2772   {
22904 5AD3           E9         0226            br 	.1C5
22905                                           ! 2773    case 0x04:
22906                                           ! 2774    case 0x03:
22907                       00005AD6            .1C6:
22908                                           ! 2775      addr = CX/8+DX*read_word(0x40,0x4A);
22909                       00005AD6            .1C7:
22910                                           ! Debug: list int = const $4A (used reg = )
22911 5AD6           B8                   004A  mov	ax,*$4A
22912 5AD9           50                         push	ax
22913                                           ! Debug: list int = const $40 (used reg = )
22914 5ADA           B8                   0040  mov	ax,*$40
22915 5ADD           50                         push	ax
22916                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22917 5ADE           E8         2271            call	_read_word
22918 5AE1           83C4                   04  add	sp,*4
22919                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22920                                           ! Debug: expression subtree swapping
22921 5AE4           8B4E         0A            mov	cx,$A[bp]
22922 5AE7           F7E9                       imul	cx
22923 5AE9           50                         push	ax
22924                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22925 5AEA           8B46         08            mov	ax,8[bp]
22926 5AED           B1                     03  mov	cl,*3
22927 5AEF           D3E8                       shr	ax,cl
22928                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22929 5AF1           0346         F6            add	ax,0+..FFF8[bp]
22930 5AF4           44                         inc	sp
22931 5AF5           44                         inc	sp
22932                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22933 5AF6           8946         F8            mov	-8[bp],ax
22934                                           !BCC_EOS
22935                                           ! 2776      mask = 0x80 >> (CX & 0x07);
22936                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22937 5AF9           8A46         08            mov	al,8[bp]
22938 5AFC           24                     07  and	al,*7
22939                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22940 5AFE           30E4                       xor	ah,ah
22941 5B00           89C3                       mov	bx,ax
22942 5B02           B8                   0080  mov	ax,#$80
22943 5B05           89D9                       mov	cx,bx
22944 5B07           D3F8                       sar	ax,cl
22945                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22946 5B09           8846         FD            mov	-3[bp],al
22947                                           !BCC_EOS
22948                                           ! 2777      outw(0x3ce, (mask << 8) | 0x08);
22949                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22950 5B0C           8A46         FD            mov	al,-3[bp]
22951 5B0F           30E4                       xor	ah,ah
22952 5B11           88C4                       mov	ah,al
22953 5B13           30C0                       xor	al,al
22954                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22955 5B15           0C                     08  or	al,*8
22956                                           ! Debug: list unsigned int = ax+0 (used reg = )
22957 5B17           50                         push	ax
22958                                           ! Debug: list int = const $3CE (used reg = )
22959 5B18           B8                   03CE  mov	ax,#$3CE
22960 5B1B           50                         push	ax
22961                                           ! Debug: func () void = outw+0 (used reg = )
22962 5B1C           E8         229C            call	_outw
22963 5B1F           83C4                   04  add	sp,*4
22964                                           !BCC_EOS
22965                                           ! 2778      outw(0x3ce, 0x0205);
22966                                           ! Debug: list int = const $205 (used reg = )
22967 5B22           B8                   0205  mov	ax,#$205
22968 5B25           50                         push	ax
22969                                           ! Debug: list int = const $3CE (used reg = )
22970 5B26           B8                   03CE  mov	ax,#$3CE
22971 5B29           50                         push	ax
22972                                           ! Debug: func () void = outw+0 (used reg = )
22973 5B2A           E8         228E            call	_outw
22974 5B2D           83C4                   04  add	sp,*4
22975                                           !BCC_EOS
22976                                           ! 2779      data = read_byte(0xa000,addr);
22977                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22978 5B30           FF76         F8            push	-8[bp]
22979                                           ! Debug: list unsigned int = const $A000 (used reg = )
22980 5B33           B8                   A000  mov	ax,#$A000
22981 5B36           50                         push	ax
22982                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22983 5B37           E8         2205            call	_read_byte
22984 5B3A           83C4                   04  add	sp,*4
22985                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22986 5B3D           8846         FB            mov	-5[bp],al
22987                                           !BCC_EOS
22988                                           ! 2780      if (AL & 0x80)
22989                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22990 5B40           8A46         06            mov	al,6[bp]
22991 5B43           24                     80  and	al,#$80
22992 5B45           84C0                       test	al,al
22993 5B47           74           0E            je  	.1C8
22994                       00005B49            .1C9:
22995                                           ! 2781       {
22996                                           ! 2782        outw(0x3ce, 0x1803);
22997                                           ! Debug: list int = const $1803 (used reg = )
22998 5B49           B8                   1803  mov	ax,#$1803
22999 5B4C           50                         push	ax
23000                                           ! Debug: list int = const $3CE (used reg = )
23001 5B4D           B8                   03CE  mov	ax,#$3CE
23002 5B50           50                         push	ax
23003                                           ! Debug: func () void = outw+0 (used reg = )
23004 5B51           E8         2267            call	_outw
23005 5B54           83C4                   04  add	sp,*4
23006                                           !BCC_EOS
23007                                           ! 2783       }
23008                                           ! 2784      write_byte(0xa000,addr,AL);
23009                       00005B57            .1C8:
23010                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23011 5B57           8A46         06            mov	al,6[bp]
23012 5B5A           30E4                       xor	ah,ah
23013 5B5C           50                         push	ax
23014                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23015 5B5D           FF76         F8            push	-8[bp]
23016                                           ! Debug: list unsigned int = const $A000 (used reg = )
23017 5B60           B8                   A000  mov	ax,#$A000
23018 5B63           50                         push	ax
23019                                           ! Debug: func () void = write_byte+0 (used reg = )
23020 5B64           E8         21FE            call	_write_byte
23021 5B67           83C4                   06  add	sp,*6
23022                                           !BCC_EOS
23023                                           ! 2785 #asm
23024                                           !BCC_EOS
23025                                           !BCC_ASM
23026                       0000000C            _biosfn_write_pixel.BH	set	$C
23027                       00000004            .biosfn_write_pixel.BH	set	4
23028                       00000010            _biosfn_write_pixel.CX	set	$10
23029                       00000008            .biosfn_write_pixel.CX	set	8
23030                       00000006            _biosfn_write_pixel.line	set	6
23031                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23032                       0000000E            _biosfn_write_pixel.AL	set	$E
23033                       00000006            .biosfn_write_pixel.AL	set	6
23034                       00000003            _biosfn_write_pixel.data	set	3
23035                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23036                       00000012            _biosfn_write_pixel.DX	set	$12
23037                       0000000A            .biosfn_write_pixel.DX	set	$A
23038                       00000005            _biosfn_write_pixel.mask	set	5
23039                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23040                       00000004            _biosfn_write_pixel.attr	set	4
23041                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23042                       00000007            _biosfn_write_pixel.mode	set	7
23043                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23044                       00000000            _biosfn_write_pixel.addr	set	0
23045                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23046 5B6A           BA                   03CE       mov dx, # 0x3ce
23047 5B6D           B8                   FF08       mov ax, #0xff08
23048 5B70           EF                              out dx, ax
23049 5B71           B8                   0005       mov ax, #0x0005
23050 5B74           EF                              out dx, ax
23051 5B75           B8                   0003       mov ax, #0x0003
23052 5B78           EF                              out dx, ax
23053                                           ! 2793 endasm
23054                                           !BCC_ENDASM
23055                                           !BCC_EOS
23056                                           ! 2794      break;
23057 5B79           E9         0198            br 	.1C3
23058                                           !BCC_EOS
23059                                           ! 2795    case 0x02:
23060                                           ! 2796      if(vga_modes[line].pixbits==2)
23061                       00005B7C            .1CA:
23062                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23063 5B7C           8A46         FE            mov	al,-2[bp]
23064 5B7F           30E4                       xor	ah,ah
23065 5B81           B1                     03  mov	cl,*3
23066 5B83           D3E0                       shl	ax,cl
23067 5B85           89C3                       mov	bx,ax
23068 5B87           81C3                 020B  add	bx,#_vga_modes
23069                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23070 5B8B           8A47         03            mov	al,3[bx]
23071 5B8E           3C                     02  cmp	al,*2
23072 5B90           75           1C            jne 	.1CB
23073                       00005B92            .1CC:
23074                                           ! 2797       {
23075                                           ! 2798        addr=(CX>>2)+(DX>>1)*80;
23076                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23077 5B92           8B46         0A            mov	ax,$A[bp]
23078 5B95           D1E8                       shr	ax,*1
23079                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23080 5B97           B9                   0050  mov	cx,*$50
23081 5B9A           F7E9                       imul	cx
23082 5B9C           50                         push	ax
23083                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23084 5B9D           8B46         08            mov	ax,8[bp]
23085 5BA0           D1E8                       shr	ax,*1
23086 5BA2           D1E8                       shr	ax,*1
23087                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23088 5BA4           0346         F6            add	ax,0+..FFF8[bp]
23089 5BA7           44                         inc	sp
23090 5BA8           44                         inc	sp
23091                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23092 5BA9           8946         F8            mov	-8[bp],ax
23093                                           !BCC_EOS
23094                                           ! 2799       }
23095                                           ! 2800      else
23096                                           ! 2801       {
23097 5BAC           EB           1A            jmp .1CD
23098                       00005BAE            .1CB:
23099                                           ! 2802        addr=(CX>>3)+(DX>>1)*80;
23100                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23101 5BAE           8B46         0A            mov	ax,$A[bp]
23102 5BB1           D1E8                       shr	ax,*1
23103                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23104 5BB3           B9                   0050  mov	cx,*$50
23105 5BB6           F7E9                       imul	cx
23106 5BB8           50                         push	ax
23107                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23108 5BB9           8B46         08            mov	ax,8[bp]
23109 5BBC           B1                     03  mov	cl,*3
23110 5BBE           D3E8                       shr	ax,cl
23111                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23112 5BC0           0346         F6            add	ax,0+..FFF8[bp]
23113 5BC3           44                         inc	sp
23114 5BC4           44                         inc	sp
23115                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23116 5BC5           8946         F8            mov	-8[bp],ax
23117                                           !BCC_EOS
23118                                           ! 2803       }
23119                                           ! 2804      if (DX & 1) addr += 0x2000;
23120                       00005BC8            .1CD:
23121                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23122 5BC8           8A46         0A            mov	al,$A[bp]
23123 5BCB           24                     01  and	al,*1
23124 5BCD           84C0                       test	al,al
23125 5BCF           74           09            je  	.1CE
23126                       00005BD1            .1CF:
23127                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23128 5BD1           8B46         F8            mov	ax,-8[bp]
23129 5BD4           05                   2000  add	ax,#$2000
23130 5BD7           8946         F8            mov	-8[bp],ax
23131                                           !BCC_EOS
23132                                           ! 2805      data = read_byte(0xb800,addr);
23133                       00005BDA            .1CE:
23134                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23135 5BDA           FF76         F8            push	-8[bp]
23136                                           ! Debug: list unsigned int = const $B800 (used reg = )
23137 5BDD           B8                   B800  mov	ax,#$B800
23138 5BE0           50                         push	ax
23139                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23140 5BE1           E8         215B            call	_read_byte
23141 5BE4           83C4                   04  add	sp,*4
23142                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23143 5BE7           8846         FB            mov	-5[bp],al
23144                                           !BCC_EOS
23145                                           ! 2806      if(vga_modes[line].pixbits==2)
23146                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23147 5BEA           8A46         FE            mov	al,-2[bp]
23148 5BED           30E4                       xor	ah,ah
23149 5BEF           B1                     03  mov	cl,*3
23150 5BF1           D3E0                       shl	ax,cl
23151 5BF3           89C3                       mov	bx,ax
23152 5BF5           81C3                 020B  add	bx,#_vga_modes
23153                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23154 5BF9           8A47         03            mov	al,3[bx]
23155 5BFC           3C                     02  cmp	al,*2
23156 5BFE           75           46            jne 	.1D0
23157                       00005C00            .1D1:
23158                                           ! 2807       {
23159                                           ! 2808        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23160                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23161 5C00           8A46         08            mov	al,8[bp]
23162 5C03           24                     03  and	al,*3
23163                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23164 5C05           50                         push	ax
23165 5C06           B8                   0003  mov	ax,*3
23166 5C09           2A46         F6            sub	al,0+..FFF8[bp]
23167 5C0C           80DC                   00  sbb	ah,*0
23168 5C0F           44                         inc	sp
23169 5C10           44                         inc	sp
23170                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23171 5C11           D1E0                       shl	ax,*1
23172 5C13           50                         push	ax
23173                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23174 5C14           8A46         06            mov	al,6[bp]
23175 5C17           24                     03  and	al,*3
23176                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23177 5C19           30E4                       xor	ah,ah
23178 5C1B           8B4E         F6            mov	cx,0+..FFF8[bp]
23179 5C1E           D3E0                       shl	ax,cl
23180 5C20           44                         inc	sp
23181 5C21           44                         inc	sp
23182                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23183 5C22           8846         FC            mov	-4[bp],al
23184                                           !BCC_EOS
23185                                           ! 2809        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23186                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23187 5C25           8A46         08            mov	al,8[bp]
23188 5C28           24                     03  and	al,*3
23189                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23190 5C2A           50                         push	ax
23191 5C2B           B8                   0003  mov	ax,*3
23192 5C2E           2A46         F6            sub	al,0+..FFF8[bp]
23193 5C31           80DC                   00  sbb	ah,*0
23194 5C34           44                         inc	sp
23195 5C35           44                         inc	sp
23196                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23197 5C36           D1E0                       shl	ax,*1
23198                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23199 5C38           89C3                       mov	bx,ax
23200 5C3A           B8                   0003  mov	ax,*3
23201 5C3D           89D9                       mov	cx,bx
23202 5C3F           D3E0                       shl	ax,cl
23203                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23204 5C41           8846         FD            mov	-3[bp],al
23205                                           !BCC_EOS
23206                                           ! 2810       }
23207                                           ! 2811      else
23208                                           ! 2812       {
23209 5C44           EB           40            jmp .1D2
23210                       00005C46            .1D0:
23211                                           ! 2813        attr = (AL & 0x01) << (7 - (CX & 0x07));
23212                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23213 5C46           8A46         08            mov	al,8[bp]
23214 5C49           24                     07  and	al,*7
23215                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23216 5C4B           50                         push	ax
23217 5C4C           B8                   0007  mov	ax,*7
23218 5C4F           2A46         F6            sub	al,0+..FFF8[bp]
23219 5C52           80DC                   00  sbb	ah,*0
23220 5C55           44                         inc	sp
23221 5C56           44                         inc	sp
23222 5C57           50                         push	ax
23223                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23224 5C58           8A46         06            mov	al,6[bp]
23225 5C5B           24                     01  and	al,*1
23226                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23227 5C5D           30E4                       xor	ah,ah
23228 5C5F           8B4E         F6            mov	cx,0+..FFF8[bp]
23229 5C62           D3E0                       shl	ax,cl
23230 5C64           44                         inc	sp
23231 5C65           44                         inc	sp
23232                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23233 5C66           8846         FC            mov	-4[bp],al
23234                                           !BCC_EOS
23235                                           ! 2814        mask = 0x01 << (7 - (CX & 0x07));
23236                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23237 5C69           8A46         08            mov	al,8[bp]
23238 5C6C           24                     07  and	al,*7
23239                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23240 5C6E           50                         push	ax
23241 5C6F           B8                   0007  mov	ax,*7
23242 5C72           2A46         F6            sub	al,0+..FFF8[bp]
23243 5C75           80DC                   00  sbb	ah,*0
23244 5C78           44                         inc	sp
23245 5C79           44                         inc	sp
23246                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23247 5C7A           89C3                       mov	bx,ax
23248 5C7C           B8                   0001  mov	ax,*1
23249 5C7F           89D9                       mov	cx,bx
23250 5C81           D3E0                       shl	ax,cl
23251                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23252 5C83           8846         FD            mov	-3[bp],al
23253                                           !BCC_EOS
23254                                           ! 2815       }
23255                                           ! 2816      if (AL & 0x80)
23256                       00005C86            .1D2:
23257                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23258 5C86           8A46         06            mov	al,6[bp]
23259 5C89           24                     80  and	al,#$80
23260 5C8B           84C0                       test	al,al
23261 5C8D           74           0B            je  	.1D3
23262                       00005C8F            .1D4:
23263                                           ! 2817       {
23264                                           ! 2818        data ^= attr;
23265                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23266 5C8F           8A46         FB            mov	al,-5[bp]
23267 5C92           3246         FC            xor	al,-4[bp]
23268 5C95           8846         FB            mov	-5[bp],al
23269                                           !BCC_EOS
23270                                           ! 2819       }
23271                                           ! 2820      else
23272                                           ! 2821       {
23273 5C98           EB           16            jmp .1D5
23274                       00005C9A            .1D3:
23275                                           ! 2822        data &= ~mask;
23276                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23277 5C9A           8A46         FD            mov	al,-3[bp]
23278 5C9D           30E4                       xor	ah,ah
23279 5C9F           F7D0                       not	ax
23280                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23281 5CA1           2246         FB            and	al,-5[bp]
23282 5CA4           8846         FB            mov	-5[bp],al
23283                                           !BCC_EOS
23284                                           ! 2823        data |= attr;
23285                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23286 5CA7           8A46         FB            mov	al,-5[bp]
23287 5CAA           0A46         FC            or	al,-4[bp]
23288 5CAD           8846         FB            mov	-5[bp],al
23289                                           !BCC_EOS
23290                                           ! 2824       }
23291                                           ! 2825      write_byte(0xb800,addr,data);
23292                       00005CB0            .1D5:
23293                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23294 5CB0           8A46         FB            mov	al,-5[bp]
23295 5CB3           30E4                       xor	ah,ah
23296 5CB5           50                         push	ax
23297                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23298 5CB6           FF76         F8            push	-8[bp]
23299                                           ! Debug: list unsigned int = const $B800 (used reg = )
23300 5CB9           B8                   B800  mov	ax,#$B800
23301 5CBC           50                         push	ax
23302                                           ! Debug: func () void = write_byte+0 (used reg = )
23303 5CBD           E8         20A5            call	_write_byte
23304 5CC0           83C4                   06  add	sp,*6
23305                                           !BCC_EOS
23306                                           ! 2826      break;
23307 5CC3           EB           4F            jmp .1C3
23308                                           !BCC_EOS
23309                                           ! 2827    case 0x05:
23310                                           ! 2828      addr=CX+DX*(read_word(0x40,0x4A)*8);
23311                       00005CC5            .1D6:
23312                                           ! Debug: list int = const $4A (used reg = )
23313 5CC5           B8                   004A  mov	ax,*$4A
23314 5CC8           50                         push	ax
23315                                           ! Debug: list int = const $40 (used reg = )
23316 5CC9           B8                   0040  mov	ax,*$40
23317 5CCC           50                         push	ax
23318                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23319 5CCD           E8         2082            call	_read_word
23320 5CD0           83C4                   04  add	sp,*4
23321                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23322 5CD3           B1                     03  mov	cl,*3
23323 5CD5           D3E0                       shl	ax,cl
23324                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23325                                           ! Debug: expression subtree swapping
23326 5CD7           8B4E         0A            mov	cx,$A[bp]
23327 5CDA           F7E9                       imul	cx
23328                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23329                                           ! Debug: expression subtree swapping
23330 5CDC           0346         08            add	ax,8[bp]
23331                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23332 5CDF           8946         F8            mov	-8[bp],ax
23333                                           !BCC_EOS
23334                                           ! 2829      write_byte(0xa000,addr,AL);
23335                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23336 5CE2           8A46         06            mov	al,6[bp]
23337 5CE5           30E4                       xor	ah,ah
23338 5CE7           50                         push	ax
23339                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23340 5CE8           FF76         F8            push	-8[bp]
23341                                           ! Debug: list unsigned int = const $A000 (used reg = )
23342 5CEB           B8                   A000  mov	ax,#$A000
23343 5CEE           50                         push	ax
23344                                           ! Debug: func () void = write_byte+0 (used reg = )
23345 5CEF           E8         2073            call	_write_byte
23346 5CF2           83C4                   06  add	sp,*6
23347                                           !BCC_EOS
23348                                           ! 2830      break;
23349 5CF5           EB           1D            jmp .1C3
23350                                           !BCC_EOS
23351                                           ! 2831    default:
23352                                           ! 2832      unimplemented();
23353                       00005CF7            .1D7:
23354                                           ! Debug: func () void = unimplemented+0 (used reg = )
23355 5CF7           E8         20D4            call	_unimplemented
23356                                           !BCC_EOS
23357                                           ! 2833   }
23358                                           ! 2834 }
23359 5CFA           EB           18            jmp .1C3
23360                       00005CFC            .1C5:
23361 5CFC           2C                     02  sub	al,*2
23362 5CFE         0F84         FE7A            beq 	.1CA
23363 5D02           2C                     01  sub	al,*1
23364 5D04         0F84         FDCE            beq 	.1C7
23365 5D08           2C                     01  sub	al,*1
23366 5D0A         0F84         FDC8            beq 	.1C6
23367 5D0E           2C                     01  sub	al,*1
23368 5D10           74           B3            je 	.1D6
23369 5D12           EB           E3            jmp	.1D7
23370                       00005D14            .1C3:
23371                       FFFFFFF6            ..FFF8	=	-$A
23372 5D14           89EC                       mov	sp,bp
23373 5D16           5D                         pop	bp
23374 5D17           C3                         ret
23375                                           ! 2835 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23376                                           ! Register BX used in function biosfn_write_pixel
23377                       00005D18            _biosfn_read_pixel:
23378                                           !BCC_EOS
23379                                           !BCC_EOS
23380                                           !BCC_EOS
23381                                           !BCC_EOS
23382                                           ! 2836 {
23383                                           ! 2837  Bit8u mode,line,mask,attr,data,i;
23384                                           !BCC_EOS
23385                                           ! 2838  Bit16u addr;
23386                                           !BCC_EOS
23387                                           ! 2839  Bit16u ss=get_SS();
23388 5D18           55                         push	bp
23389 5D19           89E5                       mov	bp,sp
23390 5D1B           83C4                   F6  add	sp,*-$A
23391                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23392 5D1E           E8         20AA            call	_get_SS
23393                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23394 5D21           8946         F6            mov	-$A[bp],ax
23395                                           !BCC_EOS
23396                                           ! 2840  mode=read_byte(0x40,0x49);
23397                                           ! Debug: list int = const $49 (used reg = )
23398 5D24           B8                   0049  mov	ax,*$49
23399 5D27           50                         push	ax
23400                                           ! Debug: list int = const $40 (used reg = )
23401 5D28           B8                   0040  mov	ax,*$40
23402 5D2B           50                         push	ax
23403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23404 5D2C           E8         2010            call	_read_byte
23405 5D2F           83C4                   04  add	sp,*4
23406                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23407 5D32           8846         FF            mov	-1[bp],al
23408                                           !BCC_EOS
23409                                           ! 2841  line=find_vga_entry(mode);
23410                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23411 5D35           8A46         FF            mov	al,-1[bp]
23412 5D38           30E4                       xor	ah,ah
23413 5D3A           50                         push	ax
23414                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23415 5D3B           E8         1F15            call	_find_vga_entry
23416 5D3E           44                         inc	sp
23417 5D3F           44                         inc	sp
23418                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23419 5D40           8846         FE            mov	-2[bp],al
23420                                           !BCC_EOS
23421                                           ! 2842  if(line==0xFF)return;
23422                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23423 5D43           8A46         FE            mov	al,-2[bp]
23424 5D46           3C                     FF  cmp	al,#$FF
23425 5D48           75           04            jne 	.1D8
23426                       00005D4A            .1D9:
23427 5D4A           89EC                       mov	sp,bp
23428 5D4C           5D                         pop	bp
23429 5D4D           C3                         ret
23430                                           !BCC_EOS
23431                                           ! 2843  if(vga_modes[line].class==0x00)return;
23432                       00005D4E            .1D8:
23433                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23434 5D4E           8A46         FE            mov	al,-2[bp]
23435 5D51           30E4                       xor	ah,ah
23436 5D53           B1                     03  mov	cl,*3
23437 5D55           D3E0                       shl	ax,cl
23438 5D57           89C3                       mov	bx,ax
23439 5D59           81C3                 020B  add	bx,#_vga_modes
23440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23441 5D5D           8A47         01            mov	al,1[bx]
23442 5D60           84C0                       test	al,al
23443 5D62           75           04            jne 	.1DA
23444                       00005D64            .1DB:
23445 5D64           89EC                       mov	sp,bp
23446 5D66           5D                         pop	bp
23447 5D67           C3                         ret
23448                                           !BCC_EOS
23449                                           ! 2844  switch(vga_modes[line].memmodel)
23450                       00005D68            .1DA:
23451                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23452 5D68           8A46         FE            mov	al,-2[bp]
23453 5D6B           30E4                       xor	ah,ah
23454 5D6D           B1                     03  mov	cl,*3
23455 5D6F           D3E0                       shl	ax,cl
23456 5D71           89C3                       mov	bx,ax
23457 5D73           81C3                 020B  add	bx,#_vga_modes
23458 5D77           8A47         02            mov	al,2[bx]
23459                                           ! 2845   {
23460 5D7A           E9         016A            br 	.1DE
23461                                           ! 2846    case 0x04:
23462                                           ! 2847    case 0x03:
23463                       00005D7D            .1DF:
23464                                           ! 2848      addr = CX/8+DX*read_word(0x40,0x4A);
23465                       00005D7D            .1E0:
23466                                           ! Debug: list int = const $4A (used reg = )
23467 5D7D           B8                   004A  mov	ax,*$4A
23468 5D80           50                         push	ax
23469                                           ! Debug: list int = const $40 (used reg = )
23470 5D81           B8                   0040  mov	ax,*$40
23471 5D84           50                         push	ax
23472                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23473 5D85           E8         1FCA            call	_read_word
23474 5D88           83C4                   04  add	sp,*4
23475                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23476                                           ! Debug: expression subtree swapping
23477 5D8B           8B4E         08            mov	cx,8[bp]
23478 5D8E           F7E9                       imul	cx
23479 5D90           50                         push	ax
23480                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23481 5D91           8B46         06            mov	ax,6[bp]
23482 5D94           B1                     03  mov	cl,*3
23483 5D96           D3E8                       shr	ax,cl
23484                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23485 5D98           0346         F4            add	ax,0+..FFF7[bp]
23486 5D9B           44                         inc	sp
23487 5D9C           44                         inc	sp
23488                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23489 5D9D           8946         F8            mov	-8[bp],ax
23490                                           !BCC_EOS
23491                                           ! 2849      mask = 0x80 >> (CX & 0x07);
23492                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23493 5DA0           8A46         06            mov	al,6[bp]
23494 5DA3           24                     07  and	al,*7
23495                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23496 5DA5           30E4                       xor	ah,ah
23497 5DA7           89C3                       mov	bx,ax
23498 5DA9           B8                   0080  mov	ax,#$80
23499 5DAC           89D9                       mov	cx,bx
23500 5DAE           D3F8                       sar	ax,cl
23501                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23502 5DB0           8846         FD            mov	-3[bp],al
23503                                           !BCC_EOS
23504                                           ! 2850      attr = 0x00;
23505                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5DB3           30C0                       xor	al,al
23507 5DB5           8846         FC            mov	-4[bp],al
23508                                           !BCC_EOS
23509                                           ! 2851      for(i=0;i<4;i++)
23510                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23511 5DB8           30C0                       xor	al,al
23512 5DBA           8846         FA            mov	-6[bp],al
23513                                           !BCC_EOS
23514                                           !BCC_EOS
23515                                           ! 2852       {
23516 5DBD           EB           4B            jmp .1E3
23517                       00005DBF            .1E4:
23518                                           ! 2853        outw(0x3ce, (i << 8) | 0x04);
23519                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23520 5DBF           8A46         FA            mov	al,-6[bp]
23521 5DC2           30E4                       xor	ah,ah
23522 5DC4           88C4                       mov	ah,al
23523 5DC6           30C0                       xor	al,al
23524                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23525 5DC8           0C                     04  or	al,*4
23526                                           ! Debug: list unsigned int = ax+0 (used reg = )
23527 5DCA           50                         push	ax
23528                                           ! Debug: list int = const $3CE (used reg = )
23529 5DCB           B8                   03CE  mov	ax,#$3CE
23530 5DCE           50                         push	ax
23531                                           ! Debug: func () void = outw+0 (used reg = )
23532 5DCF           E8         1FE9            call	_outw
23533 5DD2           83C4                   04  add	sp,*4
23534                                           !BCC_EOS
23535                                           ! 2854        data = read_byte(0xa000
23536                                           ! 2854 ,addr) & mask;
23537                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23538 5DD5           FF76         F8            push	-8[bp]
23539                                           ! Debug: list unsigned int = const $A000 (used reg = )
23540 5DD8           B8                   A000  mov	ax,#$A000
23541 5DDB           50                         push	ax
23542                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23543 5DDC           E8         1F60            call	_read_byte
23544 5DDF           83C4                   04  add	sp,*4
23545                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23546 5DE2           2246         FD            and	al,-3[bp]
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23548 5DE5           8846         FB            mov	-5[bp],al
23549                                           !BCC_EOS
23550                                           ! 2855        if (data > 0) attr |= (0x01 << i);
23551                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23552 5DE8           8A46         FB            mov	al,-5[bp]
23553 5DEB           84C0                       test	al,al
23554 5DED           74           14            je  	.1E5
23555                       00005DEF            .1E6:
23556                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23557 5DEF           8A46         FA            mov	al,-6[bp]
23558 5DF2           30E4                       xor	ah,ah
23559 5DF4           89C3                       mov	bx,ax
23560 5DF6           B8                   0001  mov	ax,*1
23561 5DF9           89D9                       mov	cx,bx
23562 5DFB           D3E0                       shl	ax,cl
23563                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23564 5DFD           0A46         FC            or	al,-4[bp]
23565 5E00           8846         FC            mov	-4[bp],al
23566                                           !BCC_EOS
23567                                           ! 2856       }
23568                       00005E03            .1E5:
23569                                           ! 2857      break;
23570                       00005E03            .1E2:
23571                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23572 5E03           8A46         FA            mov	al,-6[bp]
23573 5E06           40                         inc	ax
23574 5E07           8846         FA            mov	-6[bp],al
23575                       00005E0A            .1E3:
23576                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23577 5E0A           8A46         FA            mov	al,-6[bp]
23578 5E0D           3C                     04  cmp	al,*4
23579 5E0F           72           AE            jb 	.1E4
23580                       00005E11            .1E7:
23581                       00005E11            .1E1:
23582 5E11           E9         00EB            br 	.1DC
23583                                           !BCC_EOS
23584                                           ! 2858    case 0x02:
23585                                           ! 2859      addr=(CX>>2)+(DX>>1)*80;
23586                       00005E14            .1E8:
23587                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23588 5E14           8B46         08            mov	ax,8[bp]
23589 5E17           D1E8                       shr	ax,*1
23590                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23591 5E19           B9                   0050  mov	cx,*$50
23592 5E1C           F7E9                       imul	cx
23593 5E1E           50                         push	ax
23594                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23595 5E1F           8B46         06            mov	ax,6[bp]
23596 5E22           D1E8                       shr	ax,*1
23597 5E24           D1E8                       shr	ax,*1
23598                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23599 5E26           0346         F4            add	ax,0+..FFF7[bp]
23600 5E29           44                         inc	sp
23601 5E2A           44                         inc	sp
23602                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23603 5E2B           8946         F8            mov	-8[bp],ax
23604                                           !BCC_EOS
23605                                           ! 2860      if (DX & 1) addr += 0x2000;
23606                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23607 5E2E           8A46         08            mov	al,8[bp]
23608 5E31           24                     01  and	al,*1
23609 5E33           84C0                       test	al,al
23610 5E35           74           09            je  	.1E9
23611                       00005E37            .1EA:
23612                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23613 5E37           8B46         F8            mov	ax,-8[bp]
23614 5E3A           05                   2000  add	ax,#$2000
23615 5E3D           8946         F8            mov	-8[bp],ax
23616                                           !BCC_EOS
23617                                           ! 2861      data = read_byte(0xb800,addr);
23618                       00005E40            .1E9:
23619                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23620 5E40           FF76         F8            push	-8[bp]
23621                                           ! Debug: list unsigned int = const $B800 (used reg = )
23622 5E43           B8                   B800  mov	ax,#$B800
23623 5E46           50                         push	ax
23624                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23625 5E47           E8         1EF5            call	_read_byte
23626 5E4A           83C4                   04  add	sp,*4
23627                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23628 5E4D           8846         FB            mov	-5[bp],al
23629                                           !BCC_EOS
23630                                           ! 2862      if(vga_modes[line].pixbits==2)
23631                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23632 5E50           8A46         FE            mov	al,-2[bp]
23633 5E53           30E4                       xor	ah,ah
23634 5E55           B1                     03  mov	cl,*3
23635 5E57           D3E0                       shl	ax,cl
23636 5E59           89C3                       mov	bx,ax
23637 5E5B           81C3                 020B  add	bx,#_vga_modes
23638                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23639 5E5F           8A47         03            mov	al,3[bx]
23640 5E62           3C                     02  cmp	al,*2
23641 5E64           75           25            jne 	.1EB
23642                       00005E66            .1EC:
23643                                           ! 2863       {
23644                                           ! 2864        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23645                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23646 5E66           8A46         06            mov	al,6[bp]
23647 5E69           24                     03  and	al,*3
23648                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23649 5E6B           50                         push	ax
23650 5E6C           B8                   0003  mov	ax,*3
23651 5E6F           2A46         F4            sub	al,0+..FFF7[bp]
23652 5E72           80DC                   00  sbb	ah,*0
23653 5E75           44                         inc	sp
23654 5E76           44                         inc	sp
23655                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23656 5E77           D1E0                       shl	ax,*1
23657                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23658 5E79           89C3                       mov	bx,ax
23659 5E7B           8A46         FB            mov	al,-5[bp]
23660 5E7E           30E4                       xor	ah,ah
23661 5E80           89D9                       mov	cx,bx
23662 5E82           D3E8                       shr	ax,cl
23663                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23664 5E84           24                     03  and	al,*3
23665                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23666 5E86           8846         FC            mov	-4[bp],al
23667                                           !BCC_EOS
23668                                           ! 2865       }
23669                                           ! 2866      else
23670                                           ! 2867       {
23671 5E89           EB           21            jmp .1ED
23672                       00005E8B            .1EB:
23673                                           ! 2868        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23674                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23675 5E8B           8A46         06            mov	al,6[bp]
23676 5E8E           24                     07  and	al,*7
23677                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23678 5E90           50                         push	ax
23679 5E91           B8                   0007  mov	ax,*7
23680 5E94           2A46         F4            sub	al,0+..FFF7[bp]
23681 5E97           80DC                   00  sbb	ah,*0
23682 5E9A           44                         inc	sp
23683 5E9B           44                         inc	sp
23684                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23685 5E9C           89C3                       mov	bx,ax
23686 5E9E           8A46         FB            mov	al,-5[bp]
23687 5EA1           30E4                       xor	ah,ah
23688 5EA3           89D9                       mov	cx,bx
23689 5EA5           D3E8                       shr	ax,cl
23690                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23691 5EA7           24                     01  and	al,*1
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23693 5EA9           8846         FC            mov	-4[bp],al
23694                                           !BCC_EOS
23695                                           ! 2869       }
23696                                           ! 2870      break;
23697                       00005EAC            .1ED:
23698 5EAC           EB           51            jmp .1DC
23699                                           !BCC_EOS
23700                                           ! 2871    case 0x05:
23701                                           ! 2872      addr=CX+DX*(read_word(0x40,0x4A)*8);
23702                       00005EAE            .1EE:
23703                                           ! Debug: list int = const $4A (used reg = )
23704 5EAE           B8                   004A  mov	ax,*$4A
23705 5EB1           50                         push	ax
23706                                           ! Debug: list int = const $40 (used reg = )
23707 5EB2           B8                   0040  mov	ax,*$40
23708 5EB5           50                         push	ax
23709                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23710 5EB6           E8         1E99            call	_read_word
23711 5EB9           83C4                   04  add	sp,*4
23712                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23713 5EBC           B1                     03  mov	cl,*3
23714 5EBE           D3E0                       shl	ax,cl
23715                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23716                                           ! Debug: expression subtree swapping
23717 5EC0           8B4E         08            mov	cx,8[bp]
23718 5EC3           F7E9                       imul	cx
23719                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23720                                           ! Debug: expression subtree swapping
23721 5EC5           0346         06            add	ax,6[bp]
23722                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23723 5EC8           8946         F8            mov	-8[bp],ax
23724                                           !BCC_EOS
23725                                           ! 2873      attr=read_byte(0xa000,addr);
23726                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23727 5ECB           FF76         F8            push	-8[bp]
23728                                           ! Debug: list unsigned int = const $A000 (used reg = )
23729 5ECE           B8                   A000  mov	ax,#$A000
23730 5ED1           50                         push	ax
23731                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23732 5ED2           E8         1E6A            call	_read_byte
23733 5ED5           83C4                   04  add	sp,*4
23734                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23735 5ED8           8846         FC            mov	-4[bp],al
23736                                           !BCC_EOS
23737                                           ! 2874      break;
23738 5EDB           EB           22            jmp .1DC
23739                                           !BCC_EOS
23740                                           ! 2875    default:
23741                                           ! 2876      unimplemented();
23742                       00005EDD            .1EF:
23743                                           ! Debug: func () void = unimplemented+0 (used reg = )
23744 5EDD           E8         1EEE            call	_unimplemented
23745                                           !BCC_EOS
23746                                           ! 2877      attr = 0;
23747                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23748 5EE0           30C0                       xor	al,al
23749 5EE2           8846         FC            mov	-4[bp],al
23750                                           !BCC_EOS
23751                                           ! 2878   }
23752                                           ! 2879  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23753 5EE5           EB           18            jmp .1DC
23754                       00005EE7            .1DE:
23755 5EE7           2C                     02  sub	al,*2
23756 5EE9         0F84         FF27            beq 	.1E8
23757 5EED           2C                     01  sub	al,*1
23758 5EEF         0F84         FE8A            beq 	.1E0
23759 5EF3           2C                     01  sub	al,*1
23760 5EF5         0F84         FE84            beq 	.1DF
23761 5EF9           2C                     01  sub	al,*1
23762 5EFB           74           B1            je 	.1EE
23763 5EFD           EB           DE            jmp	.1EF
23764                       00005EFF            .1DC:
23765                       FFFFFFF4            ..FFF7	=	-$C
23766                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23767 5EFF           FF76         0A            push	$A[bp]
23768                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23769 5F02           FF76         F6            push	-$A[bp]
23770                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23771 5F05           E8         1E4A            call	_read_word
23772 5F08           83C4                   04  add	sp,*4
23773                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23774 5F0B           30C0                       xor	al,al
23775                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23776 5F0D           0A46         FC            or	al,-4[bp]
23777                                           ! Debug: list unsigned int = ax+0 (used reg = )
23778 5F10           50                         push	ax
23779                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23780 5F11           FF76         0A            push	$A[bp]
23781                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23782 5F14           FF76         F6            push	-$A[bp]
23783                                           ! Debug: func () void = write_word+0 (used reg = )
23784 5F17           E8         1E63            call	_write_word
23785 5F1A           83C4                   06  add	sp,*6
23786                                           !BCC_EOS
23787                                           ! 2880 }
23788 5F1D           89EC                       mov	sp,bp
23789 5F1F           5D                         pop	bp
23790 5F20           C3                         ret
23791                                           ! 2881 static void biosfn_write_teletype (car, page, attr, flag)
23792                                           ! Register BX used in function biosfn_read_pixel
23793                                           ! 2882 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23794                       00005F21            _biosfn_write_teletype:
23795                                           !BCC_EOS
23796                                           !BCC_EOS
23797                                           !BCC_EOS
23798                                           !BCC_EOS
23799                                           ! 2883 {
23800                                           ! 2884  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23801                                           !BCC_EOS
23802                                           ! 2885  Bit16u nbcols,nbrows,address;
23803                                           !BCC_EOS
23804                                           ! 2886  Bit16u cursor,dummy;
23805                                           !BCC_EOS
23806                                           ! 2887  if(page==0xff)
23807 5F21           55                         push	bp
23808 5F22           89E5                       mov	bp,sp
23809 5F24           83C4                   F0  add	sp,*-$10
23810                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23811 5F27           8A46         06            mov	al,6[bp]
23812 5F2A           3C                     FF  cmp	al,#$FF
23813 5F2C           75           11            jne 	.1F0
23814                       00005F2E            .1F1:
23815                                           ! 2888   page=read_byte(0x40,0x62);
23816                                           ! Debug: list int = const $62 (used reg = )
23817 5F2E           B8                   0062  mov	ax,*$62
23818 5F31           50                         push	ax
23819                                           ! Debug: list int = const $40 (used reg = )
23820 5F32           B8                   0040  mov	ax,*$40
23821 5F35           50                         push	ax
23822                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23823 5F36           E8         1E06            call	_read_byte
23824 5F39           83C4                   04  add	sp,*4
23825                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23826 5F3C           8846         06            mov	6[bp],al
23827                                           !BCC_EOS
23828                                           ! 2889  mode=read_byte(0x40,0x49);
23829                       00005F3F            .1F0:
23830                                           ! Debug: list int = const $49 (used reg = )
23831 5F3F           B8                   0049  mov	ax,*$49
23832 5F42           50                         push	ax
23833                                           ! Debug: list int = const $40 (used reg = )
23834 5F43           B8                   0040  mov	ax,*$40
23835 5F46           50                         push	ax
23836                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23837 5F47           E8         1DF5            call	_read_byte
23838 5F4A           83C4                   04  add	sp,*4
23839                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23840 5F4D           8846         FC            mov	-4[bp],al
23841                                           !BCC_EOS
23842                                           ! 2890  line=find_vga_entry(mode);
23843                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23844 5F50           8A46         FC            mov	al,-4[bp]
23845 5F53           30E4                       xor	ah,ah
23846 5F55           50                         push	ax
23847                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23848 5F56           E8         1CFA            call	_find_vga_entry
23849 5F59           44                         inc	sp
23850 5F5A           44                         inc	sp
23851                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23852 5F5B           8846         FB            mov	-5[bp],al
23853                                           !BCC_EOS
23854                                           ! 2891  if(line==0xFF)return;
23855                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23856 5F5E           8A46         FB            mov	al,-5[bp]
23857 5F61           3C                     FF  cmp	al,#$FF
23858 5F63           75           04            jne 	.1F2
23859                       00005F65            .1F3:
23860 5F65           89EC                       mov	sp,bp
23861 5F67           5D                         pop	bp
23862 5F68           C3                         ret
23863                                           !BCC_EOS
23864                                           ! 2892  biosfn_get_cursor_pos(page,&dummy,&cursor);
23865                       00005F69            .1F2:
23866                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23867 5F69           8D5E         F2            lea	bx,-$E[bp]
23868 5F6C           53                         push	bx
23869                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23870 5F6D           8D5E         F0            lea	bx,-$10[bp]
23871 5F70           53                         push	bx
23872                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23873 5F71           8A46         06            mov	al,6[bp]
23874 5F74           30E4                       xor	ah,ah
23875 5F76           50                         push	ax
23876                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23877 5F77           E8         E50F            call	_biosfn_get_cursor_pos
23878 5F7A           83C4                   06  add	sp,*6
23879                                           !BCC_EOS
23880                                           ! 2893  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23881                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23882 5F7D           8A46         F2            mov	al,-$E[bp]
23883                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23884 5F80           8846         FE            mov	-2[bp],al
23885                                           !BCC_EOS
23886                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23887 5F83           8B46         F2            mov	ax,-$E[bp]
23888 5F86           30C0                       xor	al,al
23889                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23890 5F88           88E0                       mov	al,ah
23891 5F8A           30E4                       xor	ah,ah
23892                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23893 5F8C           8846         FD            mov	-3[bp],al
23894                                           !BCC_EOS
23895                                           ! 2894  nbrows=read_byte(0x40,0x84)+1;
23896                                           ! Debug: list int = const $84 (used reg = )
23897 5F8F           B8                   0084  mov	ax,#$84
23898 5F92           50                         push	ax
23899                                           ! Debug: list int = const $40 (used reg = )
23900 5F93           B8                   0040  mov	ax,*$40
23901 5F96           50                         push	ax
23902                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23903 5F97           E8         1DA5            call	_read_byte
23904 5F9A           83C4                   04  add	sp,*4
23905                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23906 5F9D           30E4                       xor	ah,ah
23907                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23908 5F9F           40                         inc	ax
23909 5FA0           8946         F6            mov	-$A[bp],ax
23910                                           !BCC_EOS
23911                                           ! 2895  nbcols=read_word(0x40,0x4A);
23912                                           ! Debug: list int = const $4A (used reg = )
23913 5FA3           B8                   004A  mov	ax,*$4A
23914 5FA6           50                         push	ax
23915                                           ! Debug: list int = const $40 (used reg = )
23916 5FA7           B8                   0040  mov	ax,*$40
23917 5FAA           50                         push	ax
23918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23919 5FAB           E8         1DA4            call	_read_word
23920 5FAE           83C4                   04  add	sp,*4
23921                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23922 5FB1           8946         F8            mov	-8[bp],ax
23923                                           !BCC_EOS
23924                                           ! 2896  switch(car)
23925 5FB4           8A46         04            mov	al,4[bp]
23926                                           ! 2897   {
23927 5FB7           E9         01EF            br 	.1F6
23928                                           ! 2898    case 7:
23929                                           ! 2899     break;
23930                       00005FBA            .1F7:
23931 5FBA           E9         020D            br 	.1F4
23932                                           !BCC_EOS
23933                                           ! 2900    case 8:
23934                                           ! 2901     if(xcurs>0)xcurs--;
23935                       00005FBD            .1F8:
23936                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23937 5FBD           8A46         FE            mov	al,-2[bp]
23938 5FC0           84C0                       test	al,al
23939 5FC2           74           07            je  	.1F9
23940                       00005FC4            .1FA:
23941                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23942 5FC4           8A46         FE            mov	al,-2[bp]
23943 5FC7           48                         dec	ax
23944 5FC8           8846         FE            mov	-2[bp],al
23945                                           !BCC_EOS
23946                                           ! 2902     break;
23947                       00005FCB            .1F9:
23948 5FCB           E9         01FC            br 	.1F4
23949                                           !BCC_EOS
23950                                           ! 2903    case '\r':
23951                                           ! 2904     xcurs=0;
23952                       00005FCE            .1FB:
23953                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23954 5FCE           30C0                       xor	al,al
23955 5FD0           8846         FE            mov	-2[bp],al
23956                                           !BCC_EOS
23957                                           ! 2905     break;
23958 5FD3           E9         01F4            br 	.1F4
23959                                           !BCC_EOS
23960                                           ! 2906    case '\n':
23961                                           ! 2907     ycurs++;
23962                       00005FD6            .1FC:
23963                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23964 5FD6           8A46         FD            mov	al,-3[bp]
23965 5FD9           40                         inc	ax
23966 5FDA           8846         FD            mov	-3[bp],al
23967                                           !BCC_EOS
23968                                           ! 2908     break;
23969 5FDD           E9         01EA            br 	.1F4
23970                                           !BCC_EOS
23971                                           ! 2909    case '\t':
23972                                           ! 2910     do
23973                       00005FE0            .1FD:
23974                                           ! 2911      {
23975                       00005FE0            .200:
23976                                           ! 2912       biosfn_write_teletype(' ',page,attr,flag);
23977                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23978 5FE0           8A46         0A            mov	al,$A[bp]
23979 5FE3           30E4                       xor	ah,ah
23980 5FE5           50                         push	ax
23981                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23982 5FE6           8A46         08            mov	al,8[bp]
23983 5FE9           30E4                       xor	ah,ah
23984 5FEB           50                         push	ax
23985                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23986 5FEC           8A46         06            mov	al,6[bp]
23987 5FEF           30E4                       xor	ah,ah
23988 5FF1           50                         push	ax
23989                                           ! Debug: list int = const $20 (used reg = )
23990 5FF2           B8                   0020  mov	ax,*$20
23991 5FF5           50                         push	ax
23992                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23993 5FF6           E8         FF28            call	_biosfn_write_teletype
23994 5FF9           83C4                   08  add	sp,*8
23995                                           !BCC_EOS
23996                                           ! 2913       biosfn_get_cursor_pos(page,&dummy,&cursor);
23997                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23998 5FFC           8D5E         F2            lea	bx,-$E[bp]
23999 5FFF           53                         push	bx
24000                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
24001 6000           8D5E         F0            lea	bx,-$10[bp]
24002 6003           53                         push	bx
24003                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
24004 6004           8A46         06            mov	al,6[bp]
24005 6007           30E4                       xor	ah,ah
24006 6009           50                         push	ax
24007                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
24008 600A           E8         E47C            call	_biosfn_get_cursor_pos
24009 600D           83C4                   06  add	sp,*6
24010                                           !BCC_EOS
24011                                           ! 2914       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
24012                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
24013 6010           8A46         F2            mov	al,-$E[bp]
24014                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24015 6013           8846         FE            mov	-2[bp],al
24016                                           !BCC_EOS
24017                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
24018 6016           8B46         F2            mov	ax,-$E[bp]
24019 6019           30C0                       xor	al,al
24020                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
24021 601B           88E0                       mov	al,ah
24022 601D           30E4                       xor	ah,ah
24023                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
24024 601F           8846         FD            mov	-3[bp],al
24025                                           !BCC_EOS
24026                                           ! 2915      }while(xcurs%8==0);
24027                       00006022            .1FF:
24028                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24029 6022           8A46         FE            mov	al,-2[bp]
24030 6025           30E4                       xor	ah,ah
24031 6027           24                     07  and	al,*7
24032                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24033 6029           84C0                       test	al,al
24034 602B           74           B3            je 	.200
24035                       0000602D            .201:
24036                                           !BCC_EOS
24037                                           ! 2916     break;
24038                       0000602D            .1FE:
24039 602D           E9         019A            br 	.1F4
24040                                           !BCC_EOS
24041                                           ! 2917    default:
24042                                           ! 2918     if(vga_modes[line].class==0x00)
24043                       00006030            .202:
24044                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24045 6030           8A46         FB            mov	al,-5[bp]
24046 6033           30E4                       xor	ah,ah
24047 6035           B1                     03  mov	cl,*3
24048 6037           D3E0                       shl	ax,cl
24049 6039           89C3                       mov	bx,ax
24050 603B           81C3                 020B  add	bx,#_vga_modes
24051                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24052 603F           8A47         01            mov	al,1[bx]
24053 6042           84C0                       test	al,al
24054 6044         0F85         0082            bne 	.203
24055                       00006048            .204:
24056                                           ! 2919      {
24057                                           ! 2920       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24058                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24059 6048           8A46         FD            mov	al,-3[bp]
24060 604B           30E4                       xor	ah,ah
24061 604D           8B4E         F8            mov	cx,-8[bp]
24062 6050           F7E9                       imul	cx
24063                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24064                                           ! Debug: expression subtree swapping
24065 6052           0246         FE            add	al,-2[bp]
24066 6055           80D4                   00  adc	ah,*0
24067                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24068 6058           D1E0                       shl	ax,*1
24069 605A           50                         push	ax
24070                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24071 605B           8B46         F8            mov	ax,-8[bp]
24072 605E           8B4E         F6            mov	cx,-$A[bp]
24073 6061           F7E9                       imul	cx
24074                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24075 6063           D1E0                       shl	ax,*1
24076                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24077 6065           0C                     FF  or	al,#$FF
24078                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24079                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24080 6067           89C3                       mov	bx,ax
24081 6069           8A46         06            mov	al,6[bp]
24082 606C           30E4                       xor	ah,ah
24083 606E           93                         xchg	ax,bx
24084 606F           40                         inc	ax
24085 6070           89D9                       mov	cx,bx
24086 6072           F7E9                       imul	cx
24087                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24088 6074           0346         EE            add	ax,0+..FFF6[bp]
24089 6077           44                         inc	sp
24090 6078           44                         inc	sp
24091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24092 6079           8946         F4            mov	-$C[bp],ax
24093                                           !BCC_EOS
24094                                           ! 2921       write_byte(vga_modes[line].sstart,address,car);
24095                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24096 607C           8A46         04            mov	al,4[bp]
24097 607F           30E4                       xor	ah,ah
24098 6081           50                         push	ax
24099                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24100 6082           FF76         F4            push	-$C[bp]
24101                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24102 6085           8A46         FB            mov	al,-5[bp]
24103 6088           30E4                       xor	ah,ah
24104 608A           B1                     03  mov	cl,*3
24105 608C           D3E0                       shl	ax,cl
24106 608E           89C3                       mov	bx,ax
24107 6090           81C3                 020B  add	bx,#_vga_modes
24108                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24109 6094           FF77         04            push	4[bx]
24110                                           ! Debug: func () void = write_byte+0 (used reg = )
24111 6097           E8         1CCB            call	_write_byte
24112 609A           83C4                   06  add	sp,*6
24113                                           !BCC_EOS
24114                                           ! 2922       if(flag==3)
24115                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24116 609D           8A46         0A            mov	al,$A[bp]
24117 60A0           3C                     03  cmp	al,*3
24118 60A2           75           23            jne 	.205
24119                       000060A4            .206:
24120                                           ! 2923        write_byte(vga_modes[line].sstart,address+1,attr);
24121                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24122 60A4           8A46         08            mov	al,8[bp]
24123 60A7           30E4                       xor	ah,ah
24124 60A9           50                         push	ax
24125                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24126 60AA           8B46         F4            mov	ax,-$C[bp]
24127                                           ! Debug: list unsigned int = ax+1 (used reg = )
24128 60AD           40                         inc	ax
24129 60AE           50                         push	ax
24130                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24131 60AF           8A46         FB            mov	al,-5[bp]
24132 60B2           30E4                       xor	ah,ah
24133 60B4           B1                     03  mov	cl,*3
24134 60B6           D3E0                       shl	ax,cl
24135 60B8           89C3                       mov	bx,ax
24136 60BA           81C3                 020B  add	bx,#_vga_modes
24137                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24138 60BE           FF77         04            push	4[bx]
24139                                           ! Debug: func () void = write_byte+0 (used reg = )
24140 60C1           E8         1CA1            call	_write_byte
24141 60C4           83C4                   06  add	sp,*6
24142                                           !BCC_EOS
24143                                           ! 2924      }
24144                       000060C7            .205:
24145                                           ! 2925     else
24146                                           ! 2926      {
24147 60C7           E9         00D6            br 	.207
24148                       000060CA            .203:
24149                                           ! 2927       cheight=video_param_table[line_to_vpti[line]].cheight;
24150                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24151 60CA           8A46         FB            mov	al,-5[bp]
24152 60CD           30E4                       xor	ah,ah
24153 60CF           89C3                       mov	bx,ax
24154                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24155 60D1           8A87       028B            mov	al,_line_to_vpti[bx]
24156 60D5           30E4                       xor	ah,ah
24157 60D7           B1                     06  mov	cl,*6
24158 60D9           D3E0                       shl	ax,cl
24159 60DB           89C3                       mov	bx,ax
24160 60DD           81C3                 029F  add	bx,#_video_param_table
24161                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24162 60E1           8A47         02            mov	al,2[bx]
24163 60E4           8846         FF            mov	-1[bp],al
24164                                           !BCC_EOS
24165                                           ! 2928       bpp=vga_modes[line].pixbits;
24166                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24167 60E7           8A46         FB            mov	al,-5[bp]
24168 60EA           30E4                       xor	ah,ah
24169 60EC           B1                     03  mov	cl,*3
24170 60EE           D3E0                       shl	ax,cl
24171 60F0           89C3                       mov	bx,ax
24172 60F2           81C3                 020B  add	bx,#_vga_modes
24173                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24174 60F6           8A47         03            mov	al,3[bx]
24175 60F9           8846         FA            mov	-6[bp],al
24176                                           !BCC_EOS
24177                                           ! 2929       switch(vga_modes[line].memmodel)
24178                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24179 60FC           8A46         FB            mov	al,-5[bp]
24180 60FF           30E4                       xor	ah,ah
24181 6101           B1                     03  mov	cl,*3
24182 6103           D3E0                       shl	ax,cl
24183 6105           89C3                       mov	bx,ax
24184 6107           81C3                 020B  add	bx,#_vga_modes
24185 610B           8A47         02            mov	al,2[bx]
24186                                           ! 2930        {
24187 610E           EB           7A            jmp .20A
24188                                           ! 2931         case 0x04:
24189                                           ! 2932         case 0x03:
24190                       00006110            .20B:
24191                                           ! 2933           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24192                       00006110            .20C:
24193                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24194 6110           8A46         FF            mov	al,-1[bp]
24195 6113           30E4                       xor	ah,ah
24196 6115           50                         push	ax
24197                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24198 6116           FF76         F8            push	-8[bp]
24199                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24200 6119           8A46         FD            mov	al,-3[bp]
24201 611C           30E4                       xor	ah,ah
24202 611E           50                         push	ax
24203                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24204 611F           8A46         FE            mov	al,-2[bp]
24205 6122           30E4                       xor	ah,ah
24206 6124           50                         push	ax
24207                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24208 6125           8A46         08            mov	al,8[bp]
24209 6128           30E4                       xor	ah,ah
24210 612A           50                         push	ax
24211                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24212 612B           8A46         04            mov	al,4[bp]
24213 612E           30E4                       xor	ah,ah
24214 6130           50                         push	ax
24215                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24216 6131           E8         F08C            call	_write_gfx_char_pl4
24217 6134           83C4                   0C  add	sp,*$C
24218                                           !BCC_EOS
24219                                           ! 2934           break;
24220 6137           EB           67            jmp .208
24221                                           !BCC_EOS
24222                                           ! 2935         case 0x02:
24223                                           ! 2936           write_gfx_char_cga
24224                                           ! 2936 (car,attr,xcurs,ycurs,nbcols,bpp);
24225                       00006139            .20D:
24226                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24227 6139           8A46         FA            mov	al,-6[bp]
24228 613C           30E4                       xor	ah,ah
24229 613E           50                         push	ax
24230                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24231 613F           FF76         F8            push	-8[bp]
24232                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24233 6142           8A46         FD            mov	al,-3[bp]
24234 6145           30E4                       xor	ah,ah
24235 6147           50                         push	ax
24236                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24237 6148           8A46         FE            mov	al,-2[bp]
24238 614B           30E4                       xor	ah,ah
24239 614D           50                         push	ax
24240                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24241 614E           8A46         08            mov	al,8[bp]
24242 6151           30E4                       xor	ah,ah
24243 6153           50                         push	ax
24244                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24245 6154           8A46         04            mov	al,4[bp]
24246 6157           30E4                       xor	ah,ah
24247 6159           50                         push	ax
24248                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24249 615A           E8         F1D6            call	_write_gfx_char_cga
24250 615D           83C4                   0C  add	sp,*$C
24251                                           !BCC_EOS
24252                                           ! 2937           break;
24253 6160           EB           3E            jmp .208
24254                                           !BCC_EOS
24255                                           ! 2938         case 0x05:
24256                                           ! 2939           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24257                       00006162            .20E:
24258                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24259 6162           FF76         F8            push	-8[bp]
24260                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24261 6165           8A46         FD            mov	al,-3[bp]
24262 6168           30E4                       xor	ah,ah
24263 616A           50                         push	ax
24264                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24265 616B           8A46         FE            mov	al,-2[bp]
24266 616E           30E4                       xor	ah,ah
24267 6170           50                         push	ax
24268                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24269 6171           8A46         08            mov	al,8[bp]
24270 6174           30E4                       xor	ah,ah
24271 6176           50                         push	ax
24272                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24273 6177           8A46         04            mov	al,4[bp]
24274 617A           30E4                       xor	ah,ah
24275 617C           50                         push	ax
24276                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24277 617D           E8         F3B6            call	_write_gfx_char_lin
24278 6180           83C4                   0A  add	sp,*$A
24279                                           !BCC_EOS
24280                                           ! 2940           break;
24281 6183           EB           1B            jmp .208
24282                                           !BCC_EOS
24283                                           ! 2941         default:
24284                                           ! 2942           unimplemented();
24285                       00006185            .20F:
24286                                           ! Debug: func () void = unimplemented+0 (used reg = )
24287 6185           E8         1C46            call	_unimplemented
24288                                           !BCC_EOS
24289                                           ! 2943        }
24290                                           ! 2944      }
24291 6188           EB           16            jmp .208
24292                       0000618A            .20A:
24293 618A           2C                     02  sub	al,*2
24294 618C           74           AB            je 	.20D
24295 618E           2C                     01  sub	al,*1
24296 6190         0F84         FF7C            beq 	.20C
24297 6194           2C                     01  sub	al,*1
24298 6196         0F84         FF76            beq 	.20B
24299 619A           2C                     01  sub	al,*1
24300 619C           74           C4            je 	.20E
24301 619E           EB           E5            jmp	.20F
24302                       000061A0            .208:
24303                                           ! 2945     xcurs++;
24304                       000061A0            .207:
24305                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24306 61A0           8A46         FE            mov	al,-2[bp]
24307 61A3           40                         inc	ax
24308 61A4           8846         FE            mov	-2[bp],al
24309                                           !BCC_EOS
24310                                           ! 2946   }
24311                                           ! 2947  if(xcurs==nbcols)
24312 61A7           EB           21            jmp .1F4
24313                       000061A9            .1F6:
24314 61A9           2C                     07  sub	al,*7
24315 61AB         0F84         FE0B            beq 	.1F7
24316 61AF           2C                     01  sub	al,*1
24317 61B1         0F84         FE08            beq 	.1F8
24318 61B5           2C                     01  sub	al,*1
24319 61B7         0F84         FE25            beq 	.1FD
24320 61BB           2C                     01  sub	al,*1
24321 61BD         0F84         FE15            beq 	.1FC
24322 61C1           2C                     03  sub	al,*3
24323 61C3         0F84         FE07            beq 	.1FB
24324 61C7           E9         FE66            br 	.202
24325                       000061CA            .1F4:
24326                       FFFFFFEE            ..FFF6	=	-$12
24327                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24328 61CA           8A46         FE            mov	al,-2[bp]
24329 61CD           30E4                       xor	ah,ah
24330 61CF           3B46         F8            cmp	ax,-8[bp]
24331 61D2           75           0C            jne 	.210
24332                       000061D4            .211:
24333                                           ! 2948   {xcurs=0;
24334                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24335 61D4           30C0                       xor	al,al
24336 61D6           8846         FE            mov	-2[bp],al
24337                                           !BCC_EOS
24338                                           ! 2949    ycurs++;
24339                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24340 61D9           8A46         FD            mov	al,-3[bp]
24341 61DC           40                         inc	ax
24342 61DD           8846         FD            mov	-3[bp],al
24343                                           !BCC_EOS
24344                                           ! 2950   }
24345                                           ! 2951  if(ycurs==nbrows)
24346                       000061E0            .210:
24347                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24348 61E0           8A46         FD            mov	al,-3[bp]
24349 61E3           30E4                       xor	ah,ah
24350 61E5           3B46         F6            cmp	ax,-$A[bp]
24351 61E8         0F85         00C9            bne 	.212
24352                       000061EC            .213:
24353                                           ! 2952   {
24354                                           ! 2953    if(vga_modes[line].class==0x00)
24355                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24356 61EC           8A46         FB            mov	al,-5[bp]
24357 61EF           30E4                       xor	ah,ah
24358 61F1           B1                     03  mov	cl,*3
24359 61F3           D3E0                       shl	ax,cl
24360 61F5           89C3                       mov	bx,ax
24361 61F7           81C3                 020B  add	bx,#_vga_modes
24362                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24363 61FB           8A47         01            mov	al,1[bx]
24364 61FE           84C0                       test	al,al
24365 6200         0F85         0081            bne 	.214
24366                       00006204            .215:
24367                                           ! 2954     {
24368                                           ! 2955      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24369                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24370 6204           8A46         FD            mov	al,-3[bp]
24371 6207           30E4                       xor	ah,ah
24372                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24373 6209           48                         dec	ax
24374 620A           8B4E         F8            mov	cx,-8[bp]
24375 620D           F7E9                       imul	cx
24376                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24377                                           ! Debug: expression subtree swapping
24378 620F           0246         FE            add	al,-2[bp]
24379 6212           80D4                   00  adc	ah,*0
24380                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24381 6215           D1E0                       shl	ax,*1
24382 6217           50                         push	ax
24383                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24384 6218           8B46         F8            mov	ax,-8[bp]
24385 621B           8B4E         F6            mov	cx,-$A[bp]
24386 621E           F7E9                       imul	cx
24387                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24388 6220           D1E0                       shl	ax,*1
24389                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24390 6222           0C                     FF  or	al,#$FF
24391                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24392                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24393 6224           89C3                       mov	bx,ax
24394 6226           8A46         06            mov	al,6[bp]
24395 6229           30E4                       xor	ah,ah
24396 622B           93                         xchg	ax,bx
24397 622C           40                         inc	ax
24398 622D           89D9                       mov	cx,bx
24399 622F           F7E9                       imul	cx
24400                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24401 6231           0346         EE            add	ax,-$12[bp]
24402 6234           44                         inc	sp
24403 6235           44                         inc	sp
24404                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24405 6236           8946         F4            mov	-$C[bp],ax
24406                                           !BCC_EOS
24407                                           ! 2956      attr=read_byte(vga_modes[line].sstart,address+1);
24408                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24409 6239           8B46         F4            mov	ax,-$C[bp]
24410                                           ! Debug: list unsigned int = ax+1 (used reg = )
24411 623C           40                         inc	ax
24412 623D           50                         push	ax
24413                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24414 623E           8A46         FB            mov	al,-5[bp]
24415 6241           30E4                       xor	ah,ah
24416 6243           B1                     03  mov	cl,*3
24417 6245           D3E0                       shl	ax,cl
24418 6247           89C3                       mov	bx,ax
24419 6249           81C3                 020B  add	bx,#_vga_modes
24420                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24421 624D           FF77         04            push	4[bx]
24422                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24423 6250           E8         1AEC            call	_read_byte
24424 6253           83C4                   04  add	sp,*4
24425                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24426 6256           8846         08            mov	8[bp],al
24427                                           !BCC_EOS
24428                                           ! 2957      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24429                                           ! Debug: list int = const 1 (used reg = )
24430 6259           B8                   0001  mov	ax,*1
24431 625C           50                         push	ax
24432                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24433 625D           8A46         06            mov	al,6[bp]
24434 6260           30E4                       xor	ah,ah
24435 6262           50                         push	ax
24436                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24437 6263           8B46         F8            mov	ax,-8[bp]
24438                                           ! Debug: list unsigned int = ax-1 (used reg = )
24439 6266           48                         dec	ax
24440 6267           50                         push	ax
24441                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24442 6268           8B46         F6            mov	ax,-$A[bp]
24443                                           ! Debug: list unsigned int = ax-1 (used reg = )
24444 626B           48                         dec	ax
24445 626C           50                         push	ax
24446                                           ! Debug: list int = const 0 (used reg = )
24447 626D           31C0                       xor	ax,ax
24448 626F           50                         push	ax
24449                                           ! Debug: list int = const 0 (used reg = )
24450 6270           31C0                       xor	ax,ax
24451 6272           50                         push	ax
24452                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24453 6273           8A46         08            mov	al,8[bp]
24454 6276           30E4                       xor	ah,ah
24455 6278           50                         push	ax
24456                                           ! Debug: list int = const 1 (used reg = )
24457 6279           B8                   0001  mov	ax,*1
24458 627C           50                         push	ax
24459                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24460 627D           E8         E714            call	_biosfn_scroll
24461 6280           83C4                   10  add	sp,*$10
24462                                           !BCC_EOS
24463                                           ! 2958     }
24464                                           ! 2959    else
24465                                           ! 2960     {
24466 6283           EB           27            jmp .216
24467                       00006285            .214:
24468                                           ! 2961      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24469                                           ! Debug: list int = const 1 (used reg = )
24470 6285           B8                   0001  mov	ax,*1
24471 6288           50                         push	ax
24472                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24473 6289           8A46         06            mov	al,6[bp]
24474 628C           30E4                       xor	ah,ah
24475 628E           50                         push	ax
24476                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24477 628F           8B46         F8            mov	ax,-8[bp]
24478                                           ! Debug: list unsigned int = ax-1 (used reg = )
24479 6292           48                         dec	ax
24480 6293           50                         push	ax
24481                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24482 6294           8B46         F6            mov	ax,-$A[bp]
24483                                           ! Debug: list unsigned int = ax-1 (used reg = )
24484 6297           48                         dec	ax
24485 6298           50                         push	ax
24486                                           ! Debug: list int = const 0 (used reg = )
24487 6299           31C0                       xor	ax,ax
24488 629B           50                         push	ax
24489                                           ! Debug: list int = const 0 (used reg = )
24490 629C           31C0                       xor	ax,ax
24491 629E           50                         push	ax
24492                                           ! Debug: list int = const 0 (used reg = )
24493 629F           31C0                       xor	ax,ax
24494 62A1           50                         push	ax
24495                                           ! Debug: list int = const 1 (used reg = )
24496 62A2           B8                   0001  mov	ax,*1
24497 62A5           50                         push	ax
24498                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24499 62A6           E8         E6EB            call	_biosfn_scroll
24500 62A9           83C4                   10  add	sp,*$10
24501                                           !BCC_EOS
24502                                           ! 2962     }
24503                                           ! 2963    ycurs-=1;
24504                       000062AC            .216:
24505                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24506 62AC           8A46         FD            mov	al,-3[bp]
24507 62AF           30E4                       xor	ah,ah
24508 62B1           48                         dec	ax
24509 62B2           8846         FD            mov	-3[bp],al
24510                                           !BCC_EOS
24511                                           ! 2964   }
24512                                           ! 2965  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24513                       000062B5            .212:
24514                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24515 62B5           8A46         FD            mov	al,-3[bp]
24516 62B8           30E4                       xor	ah,ah
24517 62BA           8946         F2            mov	-$E[bp],ax
24518                                           !BCC_EOS
24519                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24520 62BD           8B46         F2            mov	ax,-$E[bp]
24521 62C0           88C4                       mov	ah,al
24522 62C2           30C0                       xor	al,al
24523 62C4           8946         F2            mov	-$E[bp],ax
24524                                           !BCC_EOS
24525                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24526 62C7           8B46         F2            mov	ax,-$E[bp]
24527 62CA           0246         FE            add	al,-2[bp]
24528 62CD           80D4                   00  adc	ah,*0
24529 62D0           8946         F2            mov	-$E[bp],ax
24530                                           !BCC_EOS
24531                                           ! 2966  biosfn_set_cursor_pos(page,cursor);
24532                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24533 62D3           FF76         F2            push	-$E[bp]
24534                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24535 62D6           8A46         06            mov	al,6[bp]
24536 62D9           30E4                       xor	ah,ah
24537 62DB           50                         push	ax
24538                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24539 62DC           E8         E0AA            call	_biosfn_set_cursor_pos
24540 62DF           83C4                   04  add	sp,*4
24541                                           !BCC_EOS
24542                                           ! 2967 }
24543 62E2           89EC                       mov	sp,bp
24544 62E4           5D                         pop	bp
24545 62E5           C3                         ret
24546                                           ! 2968 #asm
24547                                           !BCC_ASM
24548                       00000008            _biosfn_write_teletype.flag	set	8
24549                       00000006            _biosfn_write_teletype.attr	set	6
24550                       00000004            _biosfn_write_teletype.page	set	4
24551                       00000002            _biosfn_write_teletype.car	set	2
24552                       000062E6            biosfn_get_video_mode:
24553 62E6           1E                           push ds
24554 62E7           B8                   0040    mov ax, # 0x40
24555 62EA           8ED8                         mov ds, ax
24556 62EC           53                           push bx
24557 62ED           BB                   0062    mov bx, # 0x62
24558 62F0           8A07                         mov al, [bx]
24559 62F2           5B                           pop bx
24560 62F3           88C7                         mov bh, al
24561 62F5           53                           push bx
24562 62F6           BB                   0087    mov bx, # 0x87
24563 62F9           8A27                         mov ah, [bx]
24564 62FB           80E4                   80    and ah, #0x80
24565 62FE           BB                   0049    mov bx, # 0x49
24566 6301           8A07                         mov al, [bx]
24567 6303           08E0                         or al, ah
24568 6305           BB                   004A    mov bx, # 0x4A
24569 6308           8A27                         mov ah, [bx]
24570 630A           5B                           pop bx
24571 630B           1F                           pop ds
24572 630C           C3                           ret
24573                                           ! 2990 endasm
24574                                           !BCC_ENDASM
24575                                           ! 2991 #asm
24576                                           !BCC_ASM
24577                       00000008            _biosfn_write_teletype.flag	set	8
24578                       00000006            _biosfn_write_teletype.attr	set	6
24579                       00000004            _biosfn_write_teletype.page	set	4
24580                       00000002            _biosfn_write_teletype.car	set	2
24581                       0000630D            biosfn_group_10:
24582 630D           3C                     00    cmp al, #0x00
24583 630F           75           02              jne int10_test_1001
24584 6311           EB           64              jmp biosfn_set_single_palette_reg
24585                       00006313            int10_test_1001:
24586 6313           3C                     01    cmp al, #0x01
24587 6315           75           02              jne int10_test_1002
24588 6317           EB           78              jmp biosfn_set_overscan_border_color
24589                       00006319            int10_test_1002:
24590 6319           3C                     02    cmp al, #0x02
24591 631B           75           02              jne int10_test_1003
24592 631D           EB           7A              jmp biosfn_set_all_palette_reg
24593                       0000631F            int10_test_1003:
24594 631F           3C                     03    cmp al, #0x03
24595 6321           75           03              jne int10_test_1007
24596 6323           E9         00A0              jmp biosfn_toggle_intensity
24597                       00006326            int10_test_1007:
24598 6326           3C                     07    cmp al, #0x07
24599 6328           75           03              jne int10_test_1008
24600 632A           E9         00BF              jmp biosfn_get_single_palette_reg
24601                       0000632D            int10_test_1008:
24602 632D           3C                     08    cmp al, #0x08
24603 632F           75           03              jne int10_test_1009
24604 6331           E9         00DC              jmp biosfn_read_overscan_border_color
24605                       00006334            int10_test_1009:
24606 6334           3C                     09    cmp al, #0x09
24607 6336           75           03              jne int10_test_1010
24608 6338           E9         00E3              jmp biosfn_get_all_palette_reg
24609                       0000633B            int10_test_1010:
24610 633B           3C                     10    cmp al, #0x10
24611 633D           75           03              jne int10_test_1012
24612 633F           E9         011D              jmp biosfn_set_single_dac_reg
24613                       00006342            int10_test_1012:
24614 6342           3C                     12    cmp al, #0x12
24615 6344           75           03              jne int10_test_1013
24616 6346           E9         012F              jmp biosfn_set_all_dac_reg
24617                       00006349            int10_test_1013:
24618 6349           3C                     13    cmp al, #0x13
24619 634B           75           03              jne int10_test_1015
24620 634D           E9         0150              jmp biosfn_select_video_dac_color_page
24621                       00006350            int10_test_1015:
24622 6350           3C                     15    cmp al, #0x15
24623 6352           75           03              jne int10_test_1017
24624 6354           E9         018C              jmp biosfn_read_single_dac_reg
24625                       00006357            int10_test_1017:
24626 6357           3C                     17    cmp al, #0x17
24627 6359           75           03              jne int10_test_1018
24628 635B           E9         01A0              jmp biosfn_read_all_dac_reg
24629                       0000635E            int10_test_1018:
24630 635E           3C                     18    cmp al, #0x18
24631 6360           75           03              jne int10_test_1019
24632 6362           E9         01C1              jmp biosfn_set_pel_mask
24633                       00006365            int10_test_1019:
24634 6365           3C                     19    cmp al, #0x19
24635 6367           75           03              jne int10_test_101A
24636 6369           E9         01C5              jmp biosfn_read_pel_mask
24637                       0000636C            int10_test_101A:
24638 636C           3C                     1A    cmp al, #0x1a
24639 636E           75           03              jne int10_group_10_unknown
24640 6370           E9         01C9              jmp biosfn_read_video_dac_state
24641                       00006373            int10_group_10_unknown:
24642 6373           E8         1A66              call _unknown
24643 6376           C3                           ret
24644                       00006377            biosfn_set_single_palette_reg:
24645 6377           80FB                   14    cmp bl, #0x14
24646 637A           77           14              ja no_actl_reg1
24647 637C           50                           push ax
24648 637D           52                           push dx
24649 637E           BA                   03DA    mov dx, # 0x3da
24650 6381           EC                           in al, dx
24651 6382           BA                   03C0    mov dx, # 0x3c0
24652 6385           88D8                         mov al, bl
24653 6387           EE                           out dx, al
24654 6388           88F8                         mov al, bh
24655 638A           EE                           out dx, al
24656 638B           B0                     20    mov al, #0x20
24657 638D           EE                           out dx, al
24658 638E           5A                           pop dx
24659 638F           58                           pop ax
24660                       00006390            no_actl_reg1:
24661 6390           C3                           ret
24662                                           ! 3073 endasm
24663                                           !BCC_ENDASM
24664                                           ! 3074 #asm
24665                                           !BCC_ASM
24666                       00000008            _biosfn_write_teletype.flag	set	8
24667                       00000006            _biosfn_write_teletype.attr	set	6
24668                       00000004            _biosfn_write_teletype.page	set	4
24669                       00000002            _biosfn_write_teletype.car	set	2
24670                       00006391            biosfn_set_overscan_border_color:
24671 6391           53                           push bx
24672 6392           B3                     11    mov bl, #0x11
24673 6394           E8         FFE0              call biosfn_set_single_palette_reg
24674 6397           5B                           pop bx
24675 6398           C3                           ret
24676                                           ! 3081 endasm
24677                                           !BCC_ENDASM
24678                                           ! 3082 #asm
24679                                           !BCC_ASM
24680                       00000008            _biosfn_write_teletype.flag	set	8
24681                       00000006            _biosfn_write_teletype.attr	set	6
24682                       00000004            _biosfn_write_teletype.page	set	4
24683                       00000002            _biosfn_write_teletype.car	set	2
24684                       00006399            biosfn_set_all_palette_reg:
24685 6399           50                           push ax
24686 639A           53                           push bx
24687 639B           51                           push cx
24688 639C           52                           push dx
24689 639D           89D3                         mov bx, dx
24690 639F           BA                   03DA    mov dx, # 0x3da
24691 63A2           EC                           in al, dx
24692 63A3           B1                     00    mov cl, #0x00
24693 63A5           BA                   03C0    mov dx, # 0x3c0
24694                       000063A8            set_palette_loop:
24695 63A8           88C8                         mov al, cl
24696 63AA           EE                           out dx, al
24697 63AB           26                           seg es
24698 63AC           8A07                         mov al, [bx]
24699 63AE           EE                           out dx, al
24700 63AF           43                           inc bx
24701 63B0           FEC1                         inc cl
24702 63B2           80F9                   10    cmp cl, #0x10
24703 63B5           75           F1              jne set_palette_loop
24704 63B7           B0                     11    mov al, #0x11
24705 63B9           EE                           out dx, al
24706 63BA           26                           seg es
24707 63BB           8A07                         mov al, [bx]
24708 63BD           EE                           out dx, al
24709 63BE           B0                     20    mov al, #0x20
24710 63C0           EE                           out dx, al
24711 63C1           5A                           pop dx
24712 63C2           59                           pop cx
24713 63C3           5B                           pop bx
24714 63C4           58                           pop ax
24715 63C5           C3                           ret
24716                                           ! 3115 endasm
24717                                           !BCC_ENDASM
24718                                           ! 3116 #asm
24719                                           !BCC_ASM
24720                       00000008            _biosfn_write_teletype.flag	set	8
24721                       00000006            _biosfn_write_teletype.attr	set	6
24722                       00000004            _biosfn_write_teletype.page	set	4
24723                       00000002            _biosfn_write_teletype.car	set	2
24724                       000063C6            biosfn_toggle_intensity:
24725 63C6           50                           push ax
24726 63C7           53                           push bx
24727 63C8           52                           push dx
24728 63C9           BA                   03DA    mov dx, # 0x3da
24729 63CC           EC                           in al, dx
24730 63CD           BA                   03C0    mov dx, # 0x3c0
24731 63D0           B0                     10    mov al, #0x10
24732 63D2           EE                           out dx, al
24733 63D3           BA                   03C1    mov dx, # 0x3c1
24734 63D6           EC                           in al, dx
24735 63D7           24                     F7    and al, #0xf7
24736 63D9           80E3                   01    and bl, #0x01
24737 63DC           C0E3                   03    shl bl, 3
24738 63DF           08D8                         or al, bl
24739 63E1           BA                   03C0    mov dx, # 0x3c0
24740 63E4           EE                           out dx, al
24741 63E5           B0                     20    mov al, #0x20
24742 63E7           EE                           out dx, al
24743 63E8           5A                           pop dx
24744 63E9           5B                           pop bx
24745 63EA           58                           pop ax
24746 63EB           C3                           ret
24747                                           ! 3140 endasm
24748                                           !BCC_ENDASM
24749                                           ! 3141 #asm
24750                                           !BCC_ASM
24751                       00000008            _biosfn_write_teletype.flag	set	8
24752                       00000006            _biosfn_write_teletype.attr	set	6
24753                       00000004            _biosfn_write_teletype.page	set	4
24754                       00000002            _biosfn_write_teletype.car	set	2
24755                       000063EC            biosfn_get_single_palette_reg:
24756 63EC           80FB                   14    cmp bl, #0x14
24757 63EF           77           1E              ja no_actl_reg2
24758 63F1           50                           push ax
24759 63F2           52                           push dx
24760 63F3           BA                   03DA    mov dx, # 0x3da
24761 63F6           EC                           in al, dx
24762 63F7           BA                   03C0    mov dx, # 0x3c0
24763 63FA           88D8                         mov al, bl
24764 63FC           EE                           out dx, al
24765 63FD           BA                   03C1    mov dx, # 0x3c1
24766 6400           EC                           in al, dx
24767 6401           88C7                         mov bh, al
24768 6403           BA                   03DA    mov dx, # 0x3da
24769 6406           EC                           in al, dx
24770 6407           BA                   03C0    mov dx, # 0x3c0
24771 640A           B0                     20    mov al, #0x20
24772 640C           EE                           out dx, al
24773 640D           5A                           pop dx
24774 640E           58                           pop ax
24775                       0000640F            no_actl_reg2:
24776 640F           C3                           ret
24777                                           ! 3164 endasm
24778                                           !BCC_ENDASM
24779                                           ! 3165 #asm
24780                                           !BCC_ASM
24781                       00000008            _biosfn_write_teletype.flag	set	8
24782                       00000006            _biosfn_write_teletype.attr	set	6
24783                       00000004            _biosfn_write_teletype.page	set	4
24784                       00000002            _biosfn_write_teletype.car	set	2
24785                       00006410            biosfn_read_overscan_border_color:
24786 6410           50                           push ax
24787 6411           53                           push bx
24788 6412           B3                     11    mov bl, #0x11
24789 6414           E8         FFD5              call biosfn_get_single_palette_reg
24790 6417           88F8                         mov al, bh
24791 6419           5B                           pop bx
24792 641A           88C7                         mov bh, al
24793 641C           58                           pop ax
24794 641D           C3                           ret
24795                                           ! 3176 endasm
24796                                           !BCC_ENDASM
24797                                           ! 3177 #asm
24798                                           !BCC_ASM
24799                       00000008            _biosfn_write_teletype.flag	set	8
24800                       00000006            _biosfn_write_teletype.attr	set	6
24801                       00000004            _biosfn_write_teletype.page	set	4
24802                       00000002            _biosfn_write_teletype.car	set	2
24803                       0000641E            biosfn_get_all_palette_reg:
24804 641E           50                           push ax
24805 641F           53                           push bx
24806 6420           51                           push cx
24807 6421           52                           push dx
24808 6422           89D3                         mov bx, dx
24809 6424           B1                     00    mov cl, #0x00
24810                       00006426            get_palette_loop:
24811 6426           BA                   03DA    mov dx, # 0x3da
24812 6429           EC                           in al, dx
24813 642A           BA                   03C0    mov dx, # 0x3c0
24814 642D           88C8                         mov al, cl
24815 642F           EE                           out dx, al
24816 6430           BA                   03C1    mov dx, # 0x3c1
24817 6433           EC                           in al, dx
24818 6434           26                           seg es
24819 6435           8807                         mov [bx], al
24820 6437           43                           inc bx
24821 6438           FEC1                         inc cl
24822 643A           80F9                   10    cmp cl, #0x10
24823 643D           75           E7              jne get_palette_loop
24824 643F           BA                   03DA    mov dx, # 0x3da
24825 6442           EC                           in al, dx
24826 6443           BA                   03C0    mov dx, # 0x3c0
24827 6446           B0                     11    mov al, #0x11
24828 6448           EE                           out dx, al
24829 6449           BA                   03C1    mov dx, # 0x3c1
24830 644C           EC                           in al, dx
24831 644D           26                           seg es
24832 644E           8807                         mov [bx], al
24833 6450           BA                   03DA    mov dx, # 0x3da
24834 6453           EC                           in al, dx
24835 6454           BA                   03C0    mov dx, # 0x3c0
24836 6457           B0                     20    mov al, #0x20
24837 6459           EE                           out dx, al
24838 645A           5A                           pop dx
24839 645B           59                           pop cx
24840 645C           5B                           pop bx
24841 645D           58                           pop ax
24842 645E           C3                           ret
24843                                           ! 3218 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3219 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       0000645F            biosfn_set_single_dac_reg:
24852 645F           50                           push ax
24853 6460           52                           push dx
24854 6461           BA                   03C8    mov dx, # 0x3c8
24855 6464           88D8                         mov al, bl
24856 6466           EE                           out dx, al
24857 6467           BA                   03C9    mov dx, # 0x3c9
24858 646A           58                           pop ax
24859 646B           50                           push ax
24860 646C           88E0                         mov al, ah
24861 646E           EE                           out dx, al
24862 646F           88E8                         mov al, ch
24863 6471           EE                           out dx, al
24864 6472           88C8                         mov al, cl
24865 6474           EE                           out dx, al
24866 6475           5A                           pop dx
24867 6476           58                           pop ax
24868 6477           C3                           ret
24869                                           ! 3238 endasm
24870                                           !BCC_ENDASM
24871                                           ! 3239 #asm
24872                                           !BCC_ASM
24873                       00000008            _biosfn_write_teletype.flag	set	8
24874                       00000006            _biosfn_write_teletype.attr	set	6
24875                       00000004            _biosfn_write_teletype.page	set	4
24876                       00000002            _biosfn_write_teletype.car	set	2
24877                       00006478            biosfn_set_all_dac_reg:
24878 6478           50                           push ax
24879 6479           53                           push bx
24880 647A           51                           push cx
24881 647B           52                           push dx
24882 647C           BA                   03C8    mov dx, # 0x3c8
24883 647F           88D8                         mov al, bl
24884 6481           EE                           out dx, al
24885 6482           5A                           pop dx
24886 6483           52                           push dx
24887 6484           89D3                         mov bx, dx
24888 6486           BA                   03C9    mov dx, # 0x3c9
24889                       00006489            set_dac_loop:
24890 6489           26                           seg es
24891 648A           8A07                         mov al, [bx]
24892 648C           EE                           out dx, al
24893 648D           43                           inc bx
24894 648E           26                           seg es
24895 648F           8A07                         mov al, [bx]
24896 6491           EE                           out dx, al
24897 6492           43                           inc bx
24898 6493           26                           seg es
24899 6494           8A07                         mov al, [bx]
24900 6496           EE                           out dx, al
24901 6497           43                           inc bx
24902 6498           49                           dec cx
24903 6499           75           EE              jnz set_dac_loop
24904 649B           5A                           pop dx
24905 649C           59                           pop cx
24906 649D           5B                           pop bx
24907 649E           58                           pop ax
24908 649F           C3                           ret
24909                                           ! 3272 endasm
24910                                           !BCC_ENDASM
24911                                           ! 3273 #asm
24912                                           !BCC_ASM
24913                       00000008            _biosfn_write_teletype.flag	set	8
24914                       00000006            _biosfn_write_teletype.attr	set	6
24915                       00000004            _biosfn_write_teletype.page	set	4
24916                       00000002            _biosfn_write_teletype.car	set	2
24917                       000064A0            biosfn_select_video_dac_color_page:
24918 64A0           50                           push ax
24919 64A1           53                           push bx
24920 64A2           52                           push dx
24921 64A3           BA                   03DA    mov dx, # 0x3da
24922 64A6           EC                           in al, dx
24923 64A7           BA                   03C0    mov dx, # 0x3c0
24924 64AA           B0                     10    mov al, #0x10
24925 64AC           EE                           out dx, al
24926 64AD           BA                   03C1    mov dx, # 0x3c1
24927 64B0           EC                           in al, dx
24928 64B1           80E3                   01    and bl, #0x01
24929 64B4           75           0D              jnz set_dac_page
24930 64B6           24                     7F    and al, #0x7f
24931 64B8           C0E7                   07    shl bh, 7
24932 64BB           08F8                         or al, bh
24933 64BD           BA                   03C0    mov dx, # 0x3c0
24934 64C0           EE                           out dx, al
24935 64C1           EB           19              jmp set_actl_normal
24936                       000064C3            set_dac_page:
24937 64C3           50                           push ax
24938 64C4           BA                   03DA    mov dx, # 0x3da
24939 64C7           EC                           in al, dx
24940 64C8           BA                   03C0    mov dx, # 0x3c0
24941 64CB           B0                     14    mov al, #0x14
24942 64CD           EE                           out dx, al
24943 64CE           58                           pop ax
24944 64CF           24                     80    and al, #0x80
24945 64D1           75           03              jnz set_dac_16_page
24946 64D3           C0E7                   02    shl bh, 2
24947                       000064D6            set_dac_16_page:
24948 64D6           80E7                   0F    and bh, #0x0f
24949 64D9           88F8                         mov al, bh
24950 64DB           EE                           out dx, al
24951                       000064DC            set_actl_normal:
24952 64DC           B0                     20    mov al, #0x20
24953 64DE           EE                           out dx, al
24954 64DF           5A                           pop dx
24955 64E0           5B                           pop bx
24956 64E1           58                           pop ax
24957 64E2           C3                           ret
24958                                           ! 3315 endasm
24959                                           !BCC_ENDASM
24960                                           ! 3316 #asm
24961                                           !BCC_ASM
24962                       00000008            _biosfn_write_teletype.flag	set	8
24963                       00000006            _biosfn_write_teletype.attr	set	6
24964                       00000004            _biosfn_write_teletype.page	set	4
24965                       00000002            _biosfn_write_teletype.car	set	2
24966                       000064E3            biosfn_read_single_dac_reg:
24967 64E3           50                           push ax
24968 64E4           52                           push dx
24969 64E5           BA                   03C7    mov dx, # 0x3c7
24970 64E8           88D8                         mov al, bl
24971 64EA           EE                           out dx, al
24972 64EB           58                           pop ax
24973 64EC           88C4                         mov ah, al
24974 64EE           BA                   03C9    mov dx, # 0x3c9
24975 64F1           EC                           in al, dx
24976 64F2           86E0                         xchg al, ah
24977 64F4           50                           push ax
24978 64F5           EC                           in al, dx
24979 64F6           88C5                         mov ch, al
24980 64F8           EC                           in al, dx
24981 64F9           88C1                         mov cl, al
24982 64FB           5A                           pop dx
24983 64FC           58                           pop ax
24984 64FD           C3                           ret
24985                                           ! 3336 endasm
24986                                           !BCC_ENDASM
24987                                           ! 3337 #asm
24988                                           !BCC_ASM
24989                       00000008            _biosfn_write_teletype.flag	set	8
24990                       00000006            _biosfn_write_teletype.attr	set	6
24991                       00000004            _biosfn_write_teletype.page	set	4
24992                       00000002            _biosfn_write_teletype.car	set	2
24993                       000064FE            biosfn_read_all_dac_reg:
24994 64FE           50                           push ax
24995 64FF           53                           push bx
24996 6500           51                           push cx
24997 6501           52                           push dx
24998 6502           BA                   03C7    mov dx, # 0x3c7
24999 6505           88D8                         mov al, bl
25000 6507           EE                           out dx, al
25001 6508           5A                           pop dx
25002 6509           52                           push dx
25003 650A           89D3                         mov bx, dx
25004 650C           BA                   03C9    mov dx, # 0x3c9
25005                       0000650F            read_dac_loop:
25006 650F           EC                           in al, dx
25007 6510           26                           seg es
25008 6511           8807                         mov [bx], al
25009 6513           43                           inc bx
25010 6514           EC                           in al, dx
25011 6515           26                           seg es
25012 6516           8807                         mov [bx], al
25013 6518           43                           inc bx
25014 6519           EC                           in al, dx
25015 651A           26                           seg es
25016 651B           8807                         mov [bx], al
25017 651D           43                           inc bx
25018 651E           49                           dec cx
25019 651F           75           EE              jnz read_dac_loop
25020 6521           5A                           pop dx
25021 6522           59                           pop cx
25022 6523           5B                           pop bx
25023 6524           58                           pop ax
25024 6525           C3                           ret
25025                                           ! 3370 endasm
25026                                           !BCC_ENDASM
25027                                           ! 3371 #asm
25028                                           !BCC_ASM
25029                       00000008            _biosfn_write_teletype.flag	set	8
25030                       00000006            _biosfn_write_teletype.attr	set	6
25031                       00000004            _biosfn_write_teletype.page	set	4
25032                       00000002            _biosfn_write_teletype.car	set	2
25033                       00006526            biosfn_set_pel_mask:
25034 6526           50                           push ax
25035 6527           52                           push dx
25036 6528           BA                   03C6    mov dx, # 0x3c6
25037 652B           88D8                         mov al, bl
25038 652D           EE                           out dx, al
25039 652E           5A                           pop dx
25040 652F           58                           pop ax
25041 6530           C3                           ret
25042                                           ! 3381 endasm
25043                                           !BCC_ENDASM
25044                                           ! 3382 #asm
25045                                           !BCC_ASM
25046                       00000008            _biosfn_write_teletype.flag	set	8
25047                       00000006            _biosfn_write_teletype.attr	set	6
25048                       00000004            _biosfn_write_teletype.page	set	4
25049                       00000002            _biosfn_write_teletype.car	set	2
25050                       00006531            biosfn_read_pel_mask:
25051 6531           50                           push ax
25052 6532           52                           push dx
25053 6533           BA                   03C6    mov dx, # 0x3c6
25054 6536           EC                           in al, dx
25055 6537           88C3                         mov bl, al
25056 6539           5A                           pop dx
25057 653A           58                           pop ax
25058 653B           C3                           ret
25059                                           ! 3392 endasm
25060                                           !BCC_ENDASM
25061                                           ! 3393 #asm
25062                                           !BCC_ASM
25063                       00000008            _biosfn_write_teletype.flag	set	8
25064                       00000006            _biosfn_write_teletype.attr	set	6
25065                       00000004            _biosfn_write_teletype.page	set	4
25066                       00000002            _biosfn_write_teletype.car	set	2
25067                       0000653C            biosfn_read_video_dac_state:
25068 653C           50                           push ax
25069 653D           52                           push dx
25070 653E           BA                   03DA    mov dx, # 0x3da
25071 6541           EC                           in al, dx
25072 6542           BA                   03C0    mov dx, # 0x3c0
25073 6545           B0                     10    mov al, #0x10
25074 6547           EE                           out dx, al
25075 6548           BA                   03C1    mov dx, # 0x3c1
25076 654B           EC                           in al, dx
25077 654C           88C3                         mov bl, al
25078 654E           C0EB                   07    shr bl, 7
25079 6551           BA                   03DA    mov dx, # 0x3da
25080 6554           EC                           in al, dx
25081 6555           BA                   03C0    mov dx, # 0x3c0
25082 6558           B0                     14    mov al, #0x14
25083 655A           EE                           out dx, al
25084 655B           BA                   03C1    mov dx, # 0x3c1
25085 655E           EC                           in al, dx
25086 655F           88C7                         mov bh, al
25087 6561           80E7                   0F    and bh, #0x0f
25088 6564           F6C3                   01    test bl, #0x01
25089 6567           75           03              jnz get_dac_16_page
25090 6569           C0EF                   02    shr bh, 2
25091                       0000656C            get_dac_16_page:
25092 656C           BA                   03DA    mov dx, # 0x3da
25093 656F           EC                           in al, dx
25094 6570           BA                   03C0    mov dx, # 0x3c0
25095 6573           B0                     20    mov al, #0x20
25096 6575           EE                           out dx, al
25097 6576           5A                           pop dx
25098 6577           58                           pop ax
25099 6578           C3                           ret
25100                                           ! 3427 endasm
25101                                           !BCC_ENDASM
25102                                           ! 3428 static void biosfn_perform_gray_scale_summing (start,count)
25103                                           ! Register BX used in function biosfn_write_teletype
25104                                           ! 3429 Bit16u start;Bit16u count;
25105                       00006579            _biosfn_perform_gray_scale_summing:
25106                                           !BCC_EOS
25107                                           !BCC_EOS
25108                                           ! 3430 {Bit8u r,g,b;
25109                                           !BCC_EOS
25110                                           ! 3431  Bit16u i;
25111                                           !BCC_EOS
25112                                           ! 3432  Bit16u index;
25113                                           !BCC_EOS
25114                                           ! 3433  inb(0x3da);
25115 6579           55                         push	bp
25116 657A           89E5                       mov	bp,sp
25117 657C           83C4                   F8  add	sp,*-8
25118                                           ! Debug: list int = const $3DA (used reg = )
25119 657F           B8                   03DA  mov	ax,#$3DA
25120 6582           50                         push	ax
25121                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25122 6583           E8         180F            call	_inb
25123 6586           44                         inc	sp
25124 6587           44                         inc	sp
25125                                           !BCC_EOS
25126                                           ! 3434  outb(0x3c0,0x00);
25127                                           ! Debug: list int = const 0 (used reg = )
25128 6588           31C0                       xor	ax,ax
25129 658A           50                         push	ax
25130                                           ! Debug: list int = const $3C0 (used reg = )
25131 658B           B8                   03C0  mov	ax,#$3C0
25132 658E           50                         push	ax
25133                                           ! Debug: func () void = outb+0 (used reg = )
25134 658F           E8         1819            call	_outb
25135 6592           83C4                   04  add	sp,*4
25136                                           !BCC_EOS
25137                                           ! 3435  for( index = 0; index < count; index++ )
25138                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25139 6595           31C0                       xor	ax,ax
25140 6597           8946         F8            mov	-8[bp],ax
25141                                           !BCC_EOS
25142                                           !BCC_EOS
25143                                           ! 3436   {
25144 659A           E9         00BE            br 	.219
25145                       0000659D            .21A:
25146                                           ! 3437    outb(0x3c7,start);
25147                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25148 659D           FF76         04            push	4[bp]
25149                                           ! Debug: list int = const $3C7 (used reg = )
25150 65A0           B8                   03C7  mov	ax,#$3C7
25151 65A3           50                         push	ax
25152                                           ! Debug: func () void = outb+0 (used reg = )
25153 65A4           E8         1804            call	_outb
25154 65A7           83C4                   04  add	sp,*4
25155                                           !BCC_EOS
25156                                           ! 3438    r=inb( 0x3c9 );
25157                                           ! Debug: list int = const $3C9 (used reg = )
25158 65AA           B8                   03C9  mov	ax,#$3C9
25159 65AD           50                         push	ax
25160                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25161 65AE           E8         17E4            call	_inb
25162 65B1           44                         inc	sp
25163 65B2           44                         inc	sp
25164                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25165 65B3           8846         FF            mov	-1[bp],al
25166                                           !BCC_EOS
25167                                           ! 3439    g=inb( 0x3c9 );
25168                                           ! Debug: list int = const $3C9 (used reg = )
25169 65B6           B8                   03C9  mov	ax,#$3C9
25170 65B9           50                         push	ax
25171                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25172 65BA           E8         17D8            call	_inb
25173 65BD           44                         inc	sp
25174 65BE           44                         inc	sp
25175                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25176 65BF           8846         FE            mov	-2[bp],al
25177                                           !BCC_EOS
25178                                           ! 3440    b=inb( 0x3c9 );
25179                                           ! Debug: list int = const $3C9 (used reg = )
25180 65C2           B8                   03C9  mov	ax,#$3C9
25181 65C5           50                         push	ax
25182                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25183 65C6           E8         17CC            call	_inb
25184 65C9           44                         inc	sp
25185 65CA           44                         inc	sp
25186                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25187 65CB           8846         FD            mov	-3[bp],al
25188                                           !BCC_EOS
25189                                           ! 3441    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25190                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25191                                           ! Debug: expression subtree swapping
25192 65CE           8A46         FD            mov	al,-3[bp]
25193 65D1           30E4                       xor	ah,ah
25194 65D3           B9                   001C  mov	cx,*$1C
25195 65D6           F7E9                       imul	cx
25196 65D8           50                         push	ax
25197                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25198                                           ! Debug: expression subtree swapping
25199 65D9           8A46         FE            mov	al,-2[bp]
25200 65DC           30E4                       xor	ah,ah
25201 65DE           B9                   0097  mov	cx,#$97
25202 65E1           F7E9                       imul	cx
25203 65E3           50                         push	ax
25204                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25205                                           ! Debug: expression subtree swapping
25206 65E4           8A46         FF            mov	al,-1[bp]
25207 65E7           30E4                       xor	ah,ah
25208 65E9           B9                   004D  mov	cx,*$4D
25209 65EC           F7E9                       imul	cx
25210                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25211 65EE           0346         F4            add	ax,-$C[bp]
25212 65F1           44                         inc	sp
25213 65F2           44                         inc	sp
25214                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25215 65F3           0346         F6            add	ax,-$A[bp]
25216 65F6           44                         inc	sp
25217 65F7           44                         inc	sp
25218                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25219                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25220 65F8           05                   0080  add	ax,#$80
25221 65FB           88E0                       mov	al,ah
25222 65FD           30E4                       xor	ah,ah
25223                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25224 65FF           8946         FA            mov	-6[bp],ax
25225                                           !BCC_EOS
25226                                           ! 3442    if(i>0x3f)i=0x3f;
25227                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25228 6602           8B46         FA            mov	ax,-6[bp]
25229 6605           3D                   003F  cmp	ax,*$3F
25230 6608           76           06            jbe 	.21B
25231                       0000660A            .21C:
25232                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25233 660A           B8                   003F  mov	ax,*$3F
25234 660D           8946         FA            mov	-6[bp],ax
25235                                           !BCC_EOS
25236                                           ! 3443    outb(0x3c8,start);
25237                       00006610            .21B:
25238                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25239 6610           FF76         04            push	4[bp]
25240                                           ! Debug: list int = const $3C8 (used reg = )
25241 6613           B8                   03C8  mov	ax,#$3C8
25242 6616           50                         push	ax
25243                                           ! Debug: func () void = outb+0 (used reg = )
25244 6617           E8         1791            call	_outb
25245 661A           83C4                   04  add	sp,*4
25246                                           !BCC_EOS
25247                                           ! 3444    outb( 0x3c9, i&0xff );
25248                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25249 661D           8A46         FA            mov	al,-6[bp]
25250                                           ! Debug: list unsigned char = al+0 (used reg = )
25251 6620           30E4                       xor	ah,ah
25252 6622           50                         push	ax
25253                                           ! Debug: list int = const $3C9 (used reg = )
25254 6623           B8                   03C9  mov	ax,#$3C9
25255 6626           50                         push	ax
25256                                           ! Debug: func () void = outb+0 (used reg = )
25257 6627           E8         1781            call	_outb
25258 662A           83C4                   04  add	sp,*4
25259                                           !BCC_EOS
25260                                           ! 3445    outb( 0x3c9, i&0xff );
25261                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25262 662D           8A46         FA            mov	al,-6[bp]
25263                                           ! Debug: list unsigned char = al+0 (used reg = )
25264 6630           30E4                       xor	ah,ah
25265 6632           50                         push	ax
25266                                           ! Debug: list int = const $3C9 (used reg = )
25267 6633           B8                   03C9  mov	ax,#$3C9
25268 6636           50                         push	ax
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 6637           E8         1771            call	_outb
25271 663A           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3446    outb( 0x3c9, i&0xff );
25274                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25275 663D           8A46         FA            mov	al,-6[bp]
25276                                           ! Debug: list unsigned char = al+0 (used reg = )
25277 6640           30E4                       xor	ah,ah
25278 6642           50                         push	ax
25279                                           ! Debug: list int = const $3C9 (used reg = )
25280 6643           B8                   03C9  mov	ax,#$3C9
25281 6646           50                         push	ax
25282                                           ! Debug: func () void = outb+0 (used reg = )
25283 6647           E8         1761            call	_outb
25284 664A           83C4                   04  add	sp,*4
25285                                           !BCC_EOS
25286                                           ! 3447    start++;
25287                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25288 664D           8B46         04            mov	ax,4[bp]
25289 6650           40                         inc	ax
25290 6651           8946         04            mov	4[bp],ax
25291                                           !BCC_EOS
25292                                           ! 3448   }
25293                                           ! 3449  inb(0x3da);
25294                       00006654            .218:
25295                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25296 6654           8B46         F8            mov	ax,-8[bp]
25297 6657           40                         inc	ax
25298 6658           8946         F8            mov	-8[bp],ax
25299                       0000665B            .219:
25300                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25301 665B           8B46         F8            mov	ax,-8[bp]
25302 665E           3B46         06            cmp	ax,6[bp]
25303 6661         0F82         FF38            blo 	.21A
25304                       00006665            .21D:
25305                       00006665            .217:
25306                                           ! Debug: list int = const $3DA (used reg = )
25307 6665           B8                   03DA  mov	ax,#$3DA
25308 6668           50                         push	ax
25309                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25310 6669           E8         1729            call	_inb
25311 666C           44                         inc	sp
25312 666D           44                         inc	sp
25313                                           !BCC_EOS
25314                                           ! 3450  outb(0x3c0,0x20);
25315                                           ! Debug: list int = const $20 (used reg = )
25316 666E           B8                   0020  mov	ax,*$20
25317 6671           50                         push	ax
25318                                           ! Debug: list int = const $3C0 (used reg = )
25319 6672           B8                   03C0  mov	ax,#$3C0
25320 6675           50                         push	ax
25321                                           ! Debug: func () void = outb+0 (used reg = )
25322 6676           E8         1732            call	_outb
25323 6679           83C4                   04  add	sp,*4
25324                                           !BCC_EOS
25325                                           ! 3451 }
25326 667C           89EC                       mov	sp,bp
25327 667E           5D                         pop	bp
25328 667F           C3                         ret
25329                                           ! 3452 static void get_font_access()
25330                                           ! 3453 {
25331                       00006680            _get_font_access:
25332                                           ! 3454 #asm
25333                                           !BCC_ASM
25334 6680           BA                   03C4   mov dx, # 0x3c4
25335 6683           B8                   0100   mov ax, #0x0100
25336 6686           EF                          out dx, ax
25337 6687           B8                   0402   mov ax, #0x0402
25338 668A           EF                          out dx, ax
25339 668B           B8                   0704   mov ax, #0x0704
25340 668E           EF                          out dx, ax
25341 668F           B8                   0300   mov ax, #0x0300
25342 6692           EF                          out dx, ax
25343 6693           BA                   03CE   mov dx, # 0x3ce
25344 6696           B8                   0204   mov ax, #0x0204
25345 6699           EF                          out dx, ax
25346 669A           B8                   0005   mov ax, #0x0005
25347 669D           EF                          out dx, ax
25348 669E           B8                   0406   mov ax, #0x0406
25349 66A1           EF                          out dx, ax
25350                                           ! 3471 endasm
25351                                           !BCC_ENDASM
25352                                           ! 3472 }
25353 66A2           C3                         ret
25354                                           ! 3473 static void release_font_access()
25355                                           ! 3474 {
25356                       000066A3            _release_font_access:
25357                                           ! 3475 #asm
25358                                           !BCC_ASM
25359 66A3           BA                   03C4   mov dx, # 0x3c4
25360 66A6           B8                   0100   mov ax, #0x0100
25361 66A9           EF                          out dx, ax
25362 66AA           B8                   0302   mov ax, #0x0302
25363 66AD           EF                          out dx, ax
25364 66AE           B8                   0304   mov ax, #0x0304
25365 66B1           EF                          out dx, ax
25366 66B2           B8                   0300   mov ax, #0x0300
25367 66B5           EF                          out dx, ax
25368 66B6           BA                   03CC   mov dx, # 0x3cc
25369 66B9           EC                          in al, dx
25370 66BA           24                     01   and al, #0x01
25371 66BC           C0E0                   02   shl al, 2
25372 66BF           0C                     0A   or al, #0x0a
25373 66C1           88C4                        mov ah, al
25374 66C3           B0                     06   mov al, #0x06
25375 66C5           BA                   03CE   mov dx, # 0x3ce
25376 66C8           EF                          out dx, ax
25377 66C9           B8                   0004   mov ax, #0x0004
25378 66CC           EF                          out dx, ax
25379 66CD           B8                   1005   mov ax, #0x1005
25380 66D0           EF                          out dx, ax
25381                                           ! 3498 endasm
25382                                           !BCC_ENDASM
25383                                           ! 3499 }
25384 66D1           C3                         ret
25385                                           ! 3500 #asm
25386                                           !BCC_ASM
25387                       000066D2            idiv_u:
25388 66D2           31D2                         xor dx,dx
25389 66D4           F7F3                         div bx
25390 66D6           C3                           ret
25391                                           ! 3505 endasm
25392                                           !BCC_ENDASM
25393                                           ! 3506 static void set_scan_lines(lines) Bit8u lines;
25394                       000066D7            _set_scan_lines:
25395                                           !BCC_EOS
25396                                           ! 3507 {
25397                                           ! 3508  Bit16u crtc_addr,cols,page,vde;
25398                                           !BCC_EOS
25399                                           ! 3509  Bit8u crtc_r9,ovl,rows;
25400                                           !BCC_EOS
25401                                           ! 3510  crtc_addr = read_word(0x40,0x63);
25402 66D7           55                         push	bp
25403 66D8           89E5                       mov	bp,sp
25404 66DA           83C4                   F4  add	sp,*-$C
25405                                           ! Debug: list int = const $63 (used reg = )
25406 66DD           B8                   0063  mov	ax,*$63
25407 66E0           50                         push	ax
25408                                           ! Debug: list int = const $40 (used reg = )
25409 66E1           B8                   0040  mov	ax,*$40
25410 66E4           50                         push	ax
25411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25412 66E5           E8         166A            call	_read_word
25413 66E8           83C4                   04  add	sp,*4
25414                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25415 66EB           8946         FE            mov	-2[bp],ax
25416                                           !BCC_EOS
25417                                           ! 3511  outb(crtc_addr, 0x09);
25418                                           ! Debug: list int = const 9 (used reg = )
25419 66EE           B8                   0009  mov	ax,*9
25420 66F1           50                         push	ax
25421                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25422 66F2           FF76         FE            push	-2[bp]
25423                                           ! Debug: func () void = outb+0 (used reg = )
25424 66F5           E8         16B3            call	_outb
25425 66F8           83C4                   04  add	sp,*4
25426                                           !BCC_EOS
25427                                           ! 3512  crtc_r9 = inb(crtc_addr+1);
25428                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25429 66FB           8B46         FE            mov	ax,-2[bp]
25430                                           ! Debug: list unsigned int = ax+1 (used reg = )
25431 66FE           40                         inc	ax
25432 66FF           50                         push	ax
25433                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25434 6700           E8         1692            call	_inb
25435 6703           44                         inc	sp
25436 6704           44                         inc	sp
25437                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25438 6705           8846         F7            mov	-9[bp],al
25439                                           !BCC_EOS
25440                                           ! 3513  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25441                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25442 6708           8A46         04            mov	al,4[bp]
25443 670B           30E4                       xor	ah,ah
25444 670D           48                         dec	ax
25445 670E           50                         push	ax
25446                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25447 670F           8A46         F7            mov	al,-9[bp]
25448 6712           24                     E0  and	al,#$E0
25449                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25450 6714           30E4                       xor	ah,ah
25451 6716           0B46         F2            or	ax,-$E[bp]
25452 6719           44                         inc	sp
25453 671A           44                         inc	sp
25454                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25455 671B           8846         F7            mov	-9[bp],al
25456                                           !BCC_EOS
25457                                           ! 3514  outb(crtc_addr+1, crtc_r9);
25458                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25459 671E           8A46         F7            mov	al,-9[bp]
25460 6721           30E4                       xor	ah,ah
25461 6723           50                         push	ax
25462                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25463 6724           8B46         FE            mov	ax,-2[bp]
25464                                           ! Debug: list unsigned int = ax+1 (used reg = )
25465 6727           40                         inc	ax
25466 6728           50                         push	ax
25467                                           ! Debug: func () void = outb+0 (used reg = )
25468 6729           E8         167F            call	_outb
25469 672C           83C4                   04  add	sp,*4
25470                                           !BCC_EOS
25471                                           ! 3515  if(lines==8)
25472                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25473 672F           8A46         04            mov	al,4[bp]
25474 6732           3C                     08  cmp	al,*8
25475 6734           75           10            jne 	.21E
25476                       00006736            .21F:
25477                                           ! 3516   {
25478                                           ! 3517    biosfn_set_cursor_shape(0x06,0x07);
25479                                           ! Debug: list int = const 7 (used reg = )
25480 6736           B8                   0007  mov	ax,*7
25481 6739           50                         push	ax
25482                                           ! Debug: list int = const 6 (used reg = )
25483 673A           B8                   0006  mov	ax,*6
25484 673D           50                         push	ax
25485                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25486 673E           E8         DB2D            call	_biosfn_set_cursor_shape
25487 6741           83C4                   04  add	sp,*4
25488                                           !BCC_EOS
25489                                           ! 3518   }
25490                                           ! 3519  else
25491                                           ! 3520   {
25492 6744           EB           18            jmp .220
25493                       00006746            .21E:
25494                                           ! 3521    biosfn_set_cursor_shape(lines-4,lines-3);
25495                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25496 6746           8A46         04            mov	al,4[bp]
25497 6749           30E4                       xor	ah,ah
25498                                           ! Debug: list unsigned int = ax-3 (used reg = )
25499 674B           05                   FFFD  add	ax,*-3
25500 674E           50                         push	ax
25501                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25502 674F           8A46         04            mov	al,4[bp]
25503 6752           30E4                       xor	ah,ah
25504                                           ! Debug: list unsigned int = ax-4 (used reg = )
25505 6754           05                   FFFC  add	ax,*-4
25506 6757           50                         push	ax
25507                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25508 6758           E8         DB13            call	_biosfn_set_cursor_shape
25509 675B           83C4                   04  add	sp,*4
25510                                           !BCC_EOS
25511                                           ! 3522   }
25512                                           ! 3523  write_word(0x40,0x85, lines);
25513                       0000675E            .220:
25514                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25515 675E           8A46         04            mov	al,4[bp]
25516 6761           30E4                       xor	ah,ah
25517 6763           50                         push	ax
25518                                           ! Debug: list int = const $85 (used reg = )
25519 6764           B8                   0085  mov	ax,#$85
25520 6767           50                         push	ax
25521                                           ! Debug: list int = const $40 (used reg = )
25522 6768           B8                   0040  mov	ax,*$40
25523 676B           50                         push	ax
25524                                           ! Debug: func () void = write_word+0 (used reg = )
25525 676C           E8         160E            call	_write_word
25526 676F           83C4                   06  add	sp,*6
25527                                           !BCC_EOS
25528                                           ! 3524  outb(crtc_addr, 0x12);
25529                                           ! Debug: list int = const $12 (used reg = )
25530 6772           B8                   0012  mov	ax,*$12
25531 6775           50                         push	ax
25532                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25533 6776           FF76         FE            push	-2[bp]
25534                                           ! Debug: func () void = outb+0 (used reg = )
25535 6779           E8         162F            call	_outb
25536 677C           83C4                   04  add	sp,*4
25537                                           !BCC_EOS
25538                                           ! 3525  vde = inb(crtc_addr+1);
25539                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25540 677F           8B46         FE            mov	ax,-2[bp]
25541                                           ! Debug: list unsigned int = ax+1 (used reg = )
25542 6782           40                         inc	ax
25543 6783           50                         push	ax
25544                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25545 6784           E8         160E            call	_inb
25546 6787           44                         inc	sp
25547 6788           44                         inc	sp
25548                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25549 6789           30E4                       xor	ah,ah
25550 678B           8946         F8            mov	-8[bp],ax
25551                                           !BCC_EOS
25552                                           ! 3526  outb(crtc_addr, 0x07);
25553                                           ! Debug: list int = const 7 (used reg = )
25554 678E           B8                   0007  mov	ax,*7
25555 6791           50                         push	ax
25556                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25557 6792           FF76         FE            push	-2[bp]
25558                                           ! Debug: func () void = outb+0 (used reg = )
25559 6795           E8         1613            call	_outb
25560 6798           83C4                   04  add	sp,*4
25561                                           !BCC_EOS
25562                                           ! 3527  ovl = inb(crtc_addr+1);
25563                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25564 679B           8B46         FE            mov	ax,-2[bp]
25565                                           ! Debug: list unsigned int = ax+1 (used reg = )
25566 679E           40                         inc	ax
25567 679F           50                         push	ax
25568                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25569 67A0           E8         15F2            call	_inb
25570 67A3           44                         inc	sp
25571 67A4           44                         inc	sp
25572                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25573 67A5           8846         F6            mov	-$A[bp],al
25574                                           !BCC_EOS
25575                                           ! 3528  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25576                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25577 67A8           8A46         F6            mov	al,-$A[bp]
25578 67AB           24                     40  and	al,*$40
25579                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25580 67AD           30E4                       xor	ah,ah
25581 67AF           B1                     03  mov	cl,*3
25582 67B1           D3E0                       shl	ax,cl
25583 67B3           50                         push	ax
25584                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25585 67B4           8A46         F6            mov	al,-$A[bp]
25586 67B7           24                     02  and	al,*2
25587                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25588 67B9           30E4                       xor	ah,ah
25589 67BB           B1                     07  mov	cl,*7
25590 67BD           D3E0                       shl	ax,cl
25591                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25592 67BF           0346         F2            add	ax,-$E[bp]
25593 67C2           44                         inc	sp
25594 67C3           44                         inc	sp
25595                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25596                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25597 67C4           40                         inc	ax
25598 67C5           0346         F8            add	ax,-8[bp]
25599 67C8           8946         F8            mov	-8[bp],ax
25600                                           !BCC_EOS
25601                                           ! 3529  rows = vde / lines;
25602                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25603 67CB           8A46         04            mov	al,4[bp]
25604 67CE           30E4                       xor	ah,ah
25605 67D0           89C3                       mov	bx,ax
25606 67D2           8B46         F8            mov	ax,-8[bp]
25607 67D5           E8         FEFA            call	idiv_u
25608                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25609 67D8           8846         F5            mov	-$B[bp],al
25610                                           !BCC_EOS
25611                                           ! 3530  write_byte(0x40,0x84, rows-1);
25612                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25613 67DB           8A46         F5            mov	al,-$B[bp]
25614 67DE           30E4                       xor	ah,ah
25615                                           ! Debug: list unsigned int = ax-1 (used reg = )
25616 67E0           48                         dec	ax
25617 67E1           50                         push	ax
25618                                           ! Debug: list int = const $84 (used reg = )
25619 67E2           B8                   0084  mov	ax,#$84
25620 67E5           50                         push	ax
25621                                           ! Debug: list int = const $40 (used reg = )
25622 67E6           B8                   0040  mov	ax,*$40
25623 67E9           50                         push	ax
25624                                           ! Debug: func () void = write_byte+0 (used reg = )
25625 67EA           E8         1578            call	_write_byte
25626 67ED           83C4                   06  add	sp,*6
25627                                           !BCC_EOS
25628                                           ! 3531  cols = read_word(0x40,0x4A);
25629                                           ! Debug: list int = const $4A (used reg = )
25630 67F0           B8                   004A  mov	ax,*$4A
25631 67F3           50                         push	ax
25632                                           ! Debug: list int = const $40 (used reg = )
25633 67F4           B8                   0040  mov	ax,*$40
25634 67F7           50                         push	ax
25635                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25636 67F8           E8         1557            call	_read_word
25637 67FB           83C4                   04  add	sp,*4
25638                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25639 67FE           8946         FC            mov	-4[bp],ax
25640                                           !BCC_EOS
25641                                           ! 3532  write_word(0x40,0x4C, rows * cols * 2);
25642                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25643 6801           8A46         F5            mov	al,-$B[bp]
25644 6804           30E4                       xor	ah,ah
25645 6806           8B4E         FC            mov	cx,-4[bp]
25646 6809           F7E9                       imul	cx
25647                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25648 680B           D1E0                       shl	ax,*1
25649                                           ! Debug: list unsigned int = ax+0 (used reg = )
25650 680D           50                         push	ax
25651                                           ! Debug: list int = const $4C (used reg = )
25652 680E           B8                   004C  mov	ax,*$4C
25653 6811           50                         push	ax
25654                                           ! Debug: list int = const $40 (used reg = )
25655 6812           B8                   0040  mov	ax,*$40
25656 6815           50                         push	ax
25657                                           ! Debug: func () void = write_word+0 (used reg = )
25658 6816           E8         1564            call	_write_word
25659 6819           83C4                   06  add	sp,*6
25660                                           !BCC_EOS
25661                                           ! 3533 }
25662 681C           89EC                       mov	sp,bp
25663 681E           5D                         pop	bp
25664 681F           C3                         ret
25665                                           ! 3534 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25666                                           ! Register BX used in function set_scan_lines
25667                       00006820            _biosfn_load_text_user_pat:
25668                                           !BCC_EOS
25669                                           !BCC_EOS
25670                                           !BCC_EOS
25671                                           !BCC_EOS
25672                                           !BCC_EOS
25673                                           !BCC_EOS
25674                                           !BCC_EOS
25675                                           ! 3535 {
25676                                           ! 3536  Bit16u blockaddr,dest,i,src;
25677                                           !BCC_EOS
25678                                           ! 3537  get_font_access();
25679 6820           55                         push	bp
25680 6821           89E5                       mov	bp,sp
25681 6823           83C4                   F8  add	sp,*-8
25682                                           ! Debug: func () void = get_font_access+0 (used reg = )
25683 6826           E8         FE57            call	_get_font_access
25684                                           !BCC_EOS
25685                                           ! 3538  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25686                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25687 6829           8A46         0E            mov	al,$E[bp]
25688 682C           24                     04  and	al,*4
25689                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25690 682E           30E4                       xor	ah,ah
25691 6830           88C4                       mov	ah,al
25692 6832           30C0                       xor	al,al
25693 6834           B1                     03  mov	cl,*3
25694 6836           D3E0                       shl	ax,cl
25695 6838           50                         push	ax
25696                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25697 6839           8A46         0E            mov	al,$E[bp]
25698 683C           24                     03  and	al,*3
25699                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25700 683E           30E4                       xor	ah,ah
25701 6840           88C4                       mov	ah,al
25702 6842           30C0                       xor	al,al
25703 6844           B1                     06  mov	cl,*6
25704 6846           D3E0                       shl	ax,cl
25705                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25706 6848           0346         F6            add	ax,-$A[bp]
25707 684B           44                         inc	sp
25708 684C           44                         inc	sp
25709                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25710 684D           8946         FE            mov	-2[bp],ax
25711                                           !BCC_EOS
25712                                           ! 3539  for(i=0;i<CX;i++)
25713                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25714 6850           31C0                       xor	ax,ax
25715 6852           8946         FA            mov	-6[bp],ax
25716                                           !BCC_EOS
25717                                           !BCC_EOS
25718                                           ! 3540   {
25719 6855           EB           44            jmp .223
25720                       00006857            .224:
25721                                           ! 3541    src = BP + i * BH;
25722                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25723 6857           8A46         10            mov	al,$10[bp]
25724 685A           30E4                       xor	ah,ah
25725 685C           89C3                       mov	bx,ax
25726 685E           8B46         FA            mov	ax,-6[bp]
25727 6861           89D9                       mov	cx,bx
25728 6863           F7E9                       imul	cx
25729                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25730                                           ! Debug: expression subtree swapping
25731 6865           0346         08            add	ax,8[bp]
25732                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25733 6868           8946         F8            mov	-8[bp],ax
25734                                           !BCC_EOS
25735                                           ! 3542    dest = blockaddr + (DX + i) * 32;
25736                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25737 686B           8B46         0C            mov	ax,$C[bp]
25738 686E           0346         FA            add	ax,-6[bp]
25739                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25740 6871           B1                     05  mov	cl,*5
25741 6873           D3E0                       shl	ax,cl
25742                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25743                                           ! Debug: expression subtree swapping
25744 6875           0346         FE            add	ax,-2[bp]
25745                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25746 6878           8946         FC            mov	-4[bp],ax
25747                                           !BCC_EOS
25748                                           ! 3543    memcpyb(0xA000, dest, ES, src, BH);
25749                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25750 687B           8A46         10            mov	al,$10[bp]
25751 687E           30E4                       xor	ah,ah
25752 6880           50                         push	ax
25753                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25754 6881           FF76         F8            push	-8[bp]
25755                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25756 6884           FF76         06            push	6[bp]
25757                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25758 6887           FF76         FC            push	-4[bp]
25759                                           ! Debug: list unsigned int = const $A000 (used reg = )
25760 688A           B8                   A000  mov	ax,#$A000
25761 688D           50                         push	ax
25762                                           ! Debug: func () void = memcpyb+0 (used reg = )
25763 688E           E8         144E            call	_memcpyb
25764 6891           83C4                   0A  add	sp,*$A
25765                                           !BCC_EOS
25766                                           ! 3544   }
25767                                           ! 3545  release_font_access();
25768                       00006894            .222:
25769                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25770 6894           8B46         FA            mov	ax,-6[bp]
25771 6897           40                         inc	ax
25772 6898           8946         FA            mov	-6[bp],ax
25773                       0000689B            .223:
25774                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25775 689B           8B46         FA            mov	ax,-6[bp]
25776 689E           3B46         0A            cmp	ax,$A[bp]
25777 68A1           72           B4            jb 	.224
25778                       000068A3            .225:
25779                       000068A3            .221:
25780                                           ! Debug: func () void = release_font_access+0 (used reg = )
25781 68A3           E8         FDFD            call	_release_font_access
25782                                           !BCC_EOS
25783                                           ! 3546  if(AL>=0x10)
25784                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25785 68A6           8A46         04            mov	al,4[bp]
25786 68A9           3C                     10  cmp	al,*$10
25787 68AB           72           0B            jb  	.226
25788                       000068AD            .227:
25789                                           ! 3547   {
25790                                           ! 3548    set_scan_lines(BH);
25791                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25792 68AD           8A46         10            mov	al,$10[bp]
25793 68B0           30E4                       xor	ah,ah
25794 68B2           50                         push	ax
25795                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25796 68B3           E8         FE21            call	_set_scan_lines
25797 68B6           44                         inc	sp
25798 68B7           44                         inc	sp
25799                                           !BCC_EOS
25800                                           ! 3549   }
25801                                           ! 3550 }
25802                       000068B8            .226:
25803 68B8           89EC                       mov	sp,bp
25804 68BA           5D                         pop	bp
25805 68BB           C3                         ret
25806                                           ! 3551 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25807                                           ! Register BX used in function biosfn_load_text_user_pat
25808                       000068BC            _biosfn_load_text_8_14_pat:
25809                                           !BCC_EOS
25810                                           !BCC_EOS
25811                                           ! 3552 {
25812                                           ! 3553  Bit16u blockaddr,dest,i,src;
25813                                           !BCC_EOS
25814                                           ! 3554  get_font_access();
25815 68BC           55                         push	bp
25816 68BD           89E5                       mov	bp,sp
25817 68BF           83C4                   F8  add	sp,*-8
25818                                           ! Debug: func () void = get_font_access+0 (used reg = )
25819 68C2           E8         FDBB            call	_get_font_access
25820                                           !BCC_EOS
25821                                           ! 3555  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25822                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25823 68C5           8A46         06            mov	al,6[bp]
25824 68C8           24                     04  and	al,*4
25825                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25826 68CA           30E4                       xor	ah,ah
25827 68CC           88C4                       mov	ah,al
25828 68CE           30C0                       xor	al,al
25829 68D0           B1                     03  mov	cl,*3
25830 68D2           D3E0                       shl	ax,cl
25831 68D4           50                         push	ax
25832                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25833 68D5           8A46         06            mov	al,6[bp]
25834 68D8           24                     03  and	al,*3
25835                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25836 68DA           30E4                       xor	ah,ah
25837 68DC           88C4                       mov	ah,al
25838 68DE           30C0                       xor	al,al
25839 68E0           B1                     06  mov	cl,*6
25840 68E2           D3E0                       shl	ax,cl
25841                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25842 68E4           0346         F6            add	ax,-$A[bp]
25843 68E7           44                         inc	sp
25844 68E8           44                         inc	sp
25845                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25846 68E9           8946         FE            mov	-2[bp],ax
25847                                           !BCC_EOS
25848                                           ! 3556  for(i=0;i<0x100;i++)
25849                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25850 68EC           31C0                       xor	ax,ax
25851 68EE           8946         FA            mov	-6[bp],ax
25852                                           !BCC_EOS
25853                                           !BCC_EOS
25854                                           ! 3557   {
25855 68F1           EB           41            jmp .22A
25856                       000068F3            .22B:
25857                                           ! 3558    src = i * 14;
25858                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25859 68F3           8B46         FA            mov	ax,-6[bp]
25860 68F6           89C2                       mov	dx,ax
25861 68F8           B1                     03  mov	cl,*3
25862 68FA           D3E0                       shl	ax,cl
25863 68FC           29D0                       sub	ax,dx
25864 68FE           D1E0                       shl	ax,*1
25865                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25866 6900           8946         F8            mov	-8[bp],ax
25867                                           !BCC_EOS
25868                                           ! 3559    dest = blockaddr + i * 32;
25869                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25870 6903           8B46         FA            mov	ax,-6[bp]
25871 6906           B1                     05  mov	cl,*5
25872 6908           D3E0                       shl	ax,cl
25873                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25874                                           ! Debug: expression subtree swapping
25875 690A           0346         FE            add	ax,-2[bp]
25876                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25877 690D           8946         FC            mov	-4[bp],ax
25878                                           !BCC_EOS
25879                                           ! 3560    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25880                                           ! Debug: list int = const $E (used reg = )
25881 6910           B8                   000E  mov	ax,*$E
25882 6913           50                         push	ax
25883                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25884 6914           8B5E         F8            mov	bx,-8[bp]
25885                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25886                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25887 6917           81C3                 176F  add	bx,#_vgafont14
25888 691B           53                         push	bx
25889                                           ! Debug: list unsigned int = const $C000 (used reg = )
25890 691C           B8                   C000  mov	ax,#$C000
25891 691F           50                         push	ax
25892                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25893 6920           FF76         FC            push	-4[bp]
25894                                           ! Debug: list unsigned int = const $A000 (used reg = )
25895 6923           B8                   A000  mov	ax,#$A000
25896 6926           50                         push	ax
25897                                           ! Debug: func () void = memcpyb+0 (used reg = )
25898 6927           E8         13B5            call	_memcpyb
25899 692A           83C4                   0A  add	sp,*$A
25900                                           !BCC_EOS
25901                                           ! 3561   }
25902                                           ! 3562  release_font_access();
25903                       0000692D            .229:
25904                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25905 692D           8B46         FA            mov	ax,-6[bp]
25906 6930           40                         inc	ax
25907 6931           8946         FA            mov	-6[bp],ax
25908                       00006934            .22A:
25909                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25910 6934           8B46         FA            mov	ax,-6[bp]
25911 6937           3D                   0100  cmp	ax,#$100
25912 693A           72           B7            jb 	.22B
25913                       0000693C            .22C:
25914                       0000693C            .228:
25915                                           ! Debug: func () void = release_font_access+0 (used reg = )
25916 693C           E8         FD64            call	_release_font_access
25917                                           !BCC_EOS
25918                                           ! 3563  if(AL>=0x10)
25919                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25920 693F           8A46         04            mov	al,4[bp]
25921 6942           3C                     10  cmp	al,*$10
25922 6944           72           09            jb  	.22D
25923                       00006946            .22E:
25924                                           ! 3564   {
25925                                           ! 3565    set_scan_lines(14);
25926                                           ! Debug: list int = const $E (used reg = )
25927 6946           B8                   000E  mov	ax,*$E
25928 6949           50                         push	ax
25929                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25930 694A           E8         FD8A            call	_set_scan_lines
25931 694D           44                         inc	sp
25932 694E           44                         inc	sp
25933                                           !BCC_EOS
25934                                           ! 3566   }
25935                                           ! 3567 }
25936                       0000694F            .22D:
25937 694F           89EC                       mov	sp,bp
25938 6951           5D                         pop	bp
25939 6952           C3                         ret
25940                                           ! 3568 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25941                                           ! Register BX used in function biosfn_load_text_8_14_pat
25942                       00006953            _biosfn_load_text_8_8_pat:
25943                                           !BCC_EOS
25944                                           !BCC_EOS
25945                                           ! 3569 {
25946                                           ! 3570  Bit16u blockaddr,dest,i,src;
25947                                           !BCC_EOS
25948                                           ! 3571  get_font_access();
25949 6953           55                         push	bp
25950 6954           89E5                       mov	bp,sp
25951 6956           83C4                   F8  add	sp,*-8
25952                                           ! Debug: func () void = get_font_access+0 (used reg = )
25953 6959           E8         FD24            call	_get_font_access
25954                                           !BCC_EOS
25955                                           ! 3572  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25956                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25957 695C           8A46         06            mov	al,6[bp]
25958 695F           24                     04  and	al,*4
25959                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25960 6961           30E4                       xor	ah,ah
25961 6963           88C4                       mov	ah,al
25962 6965           30C0                       xor	al,al
25963 6967           B1                     03  mov	cl,*3
25964 6969           D3E0                       shl	ax,cl
25965 696B           50                         push	ax
25966                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25967 696C           8A46         06            mov	al,6[bp]
25968 696F           24                     03  and	al,*3
25969                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25970 6971           30E4                       xor	ah,ah
25971 6973           88C4                       mov	ah,al
25972 6975           30C0                       xor	al,al
25973 6977           B1                     06  mov	cl,*6
25974 6979           D3E0                       shl	ax,cl
25975                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25976 697B           0346         F6            add	ax,-$A[bp]
25977 697E           44                         inc	sp
25978 697F           44                         inc	sp
25979                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25980 6980           8946         FE            mov	-2[bp],ax
25981                                           !BCC_EOS
25982                                           ! 3573  for(i=0;i<0x100;i++)
25983                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25984 6983           31C0                       xor	ax,ax
25985 6985           8946         FA            mov	-6[bp],ax
25986                                           !BCC_EOS
25987                                           !BCC_EOS
25988                                           ! 3574   {
25989 6988           EB           3B            jmp .231
25990                       0000698A            .232:
25991                                           ! 3575    src = i * 8;
25992                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25993 698A           8B46         FA            mov	ax,-6[bp]
25994 698D           B1                     03  mov	cl,*3
25995 698F           D3E0                       shl	ax,cl
25996                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25997 6991           8946         F8            mov	-8[bp],ax
25998                                           !BCC_EOS
25999                                           ! 3576    dest = blockaddr + i * 32;
26000                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26001 6994           8B46         FA            mov	ax,-6[bp]
26002 6997           B1                     05  mov	cl,*5
26003 6999           D3E0                       shl	ax,cl
26004                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26005                                           ! Debug: expression subtree swapping
26006 699B           0346         FE            add	ax,-2[bp]
26007                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26008 699E           8946         FC            mov	-4[bp],ax
26009                                           !BCC_EOS
26010                                           ! 3577    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
26011                                           ! Debug: list int = const 8 (used reg = )
26012 69A1           B8                   0008  mov	ax,*8
26013 69A4           50                         push	ax
26014                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
26015 69A5           8B5E         F8            mov	bx,-8[bp]
26016                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
26017                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
26018 69A8           81C3                 0F6F  add	bx,#_vgafont8
26019 69AC           53                         push	bx
26020                                           ! Debug: list unsigned int = const $C000 (used reg = )
26021 69AD           B8                   C000  mov	ax,#$C000
26022 69B0           50                         push	ax
26023                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26024 69B1           FF76         FC            push	-4[bp]
26025                                           ! Debug: list unsigned int = const $A000 (used reg = )
26026 69B4           B8                   A000  mov	ax,#$A000
26027 69B7           50                         push	ax
26028                                           ! Debug: func () void = memcpyb+0 (used reg = )
26029 69B8           E8         1324            call	_memcpyb
26030 69BB           83C4                   0A  add	sp,*$A
26031                                           !BCC_EOS
26032                                           ! 3578 
26033                                           ! 3578   }
26034                                           ! 3579  release_font_access();
26035                       000069BE            .230:
26036                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26037 69BE           8B46         FA            mov	ax,-6[bp]
26038 69C1           40                         inc	ax
26039 69C2           8946         FA            mov	-6[bp],ax
26040                       000069C5            .231:
26041                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26042 69C5           8B46         FA            mov	ax,-6[bp]
26043 69C8           3D                   0100  cmp	ax,#$100
26044 69CB           72           BD            jb 	.232
26045                       000069CD            .233:
26046                       000069CD            .22F:
26047                                           ! Debug: func () void = release_font_access+0 (used reg = )
26048 69CD           E8         FCD3            call	_release_font_access
26049                                           !BCC_EOS
26050                                           ! 3580  if(AL>=0x10)
26051                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26052 69D0           8A46         04            mov	al,4[bp]
26053 69D3           3C                     10  cmp	al,*$10
26054 69D5           72           09            jb  	.234
26055                       000069D7            .235:
26056                                           ! 3581   {
26057                                           ! 3582    set_scan_lines(8);
26058                                           ! Debug: list int = const 8 (used reg = )
26059 69D7           B8                   0008  mov	ax,*8
26060 69DA           50                         push	ax
26061                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26062 69DB           E8         FCF9            call	_set_scan_lines
26063 69DE           44                         inc	sp
26064 69DF           44                         inc	sp
26065                                           !BCC_EOS
26066                                           ! 3583   }
26067                                           ! 3584 }
26068                       000069E0            .234:
26069 69E0           89EC                       mov	sp,bp
26070 69E2           5D                         pop	bp
26071 69E3           C3                         ret
26072                                           ! 3585 #asm
26073                                           !BCC_ASM
26074                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26075                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26076                       000069E4            biosfn_set_text_block_specifier:
26077 69E4           50                           push ax
26078 69E5           52                           push dx
26079 69E6           BA                   03C4    mov dx, # 0x3c4
26080 69E9           88DC                         mov ah, bl
26081 69EB           B0                     03    mov al, #0x03
26082 69ED           EF                           out dx, ax
26083 69EE           5A                           pop dx
26084 69EF           58                           pop ax
26085 69F0           C3                           ret
26086                                           ! 3596 endasm
26087                                           !BCC_ENDASM
26088                                           ! 3597 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26089                                           ! Register BX used in function biosfn_load_text_8_8_pat
26090                       000069F1            _biosfn_load_text_8_16_pat:
26091                                           !BCC_EOS
26092                                           !BCC_EOS
26093                                           ! 3598 {
26094                                           ! 3599  Bit16u blockaddr,dest,i,src;
26095                                           !BCC_EOS
26096                                           ! 3600  get_font_access();
26097 69F1           55                         push	bp
26098 69F2           89E5                       mov	bp,sp
26099 69F4           83C4                   F8  add	sp,*-8
26100                                           ! Debug: func () void = get_font_access+0 (used reg = )
26101 69F7           E8         FC86            call	_get_font_access
26102                                           !BCC_EOS
26103                                           ! 3601  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26104                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26105 69FA           8A46         06            mov	al,6[bp]
26106 69FD           24                     04  and	al,*4
26107                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26108 69FF           30E4                       xor	ah,ah
26109 6A01           88C4                       mov	ah,al
26110 6A03           30C0                       xor	al,al
26111 6A05           B1                     03  mov	cl,*3
26112 6A07           D3E0                       shl	ax,cl
26113 6A09           50                         push	ax
26114                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26115 6A0A           8A46         06            mov	al,6[bp]
26116 6A0D           24                     03  and	al,*3
26117                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26118 6A0F           30E4                       xor	ah,ah
26119 6A11           88C4                       mov	ah,al
26120 6A13           30C0                       xor	al,al
26121 6A15           B1                     06  mov	cl,*6
26122 6A17           D3E0                       shl	ax,cl
26123                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26124 6A19           0346         F6            add	ax,-$A[bp]
26125 6A1C           44                         inc	sp
26126 6A1D           44                         inc	sp
26127                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26128 6A1E           8946         FE            mov	-2[bp],ax
26129                                           !BCC_EOS
26130                                           ! 3602  for(i=0;i<0x100;i++)
26131                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26132 6A21           31C0                       xor	ax,ax
26133 6A23           8946         FA            mov	-6[bp],ax
26134                                           !BCC_EOS
26135                                           !BCC_EOS
26136                                           ! 3603   {
26137 6A26           EB           3B            jmp .238
26138                       00006A28            .239:
26139                                           ! 3604    src = i * 16;
26140                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26141 6A28           8B46         FA            mov	ax,-6[bp]
26142 6A2B           B1                     04  mov	cl,*4
26143 6A2D           D3E0                       shl	ax,cl
26144                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26145 6A2F           8946         F8            mov	-8[bp],ax
26146                                           !BCC_EOS
26147                                           ! 3605    dest = blockaddr + i * 32;
26148                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26149 6A32           8B46         FA            mov	ax,-6[bp]
26150 6A35           B1                     05  mov	cl,*5
26151 6A37           D3E0                       shl	ax,cl
26152                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26153                                           ! Debug: expression subtree swapping
26154 6A39           0346         FE            add	ax,-2[bp]
26155                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26156 6A3C           8946         FC            mov	-4[bp],ax
26157                                           !BCC_EOS
26158                                           ! 3606    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26159                                           ! Debug: list int = const $10 (used reg = )
26160 6A3F           B8                   0010  mov	ax,*$10
26161 6A42           50                         push	ax
26162                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26163 6A43           8B5E         F8            mov	bx,-8[bp]
26164                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26165                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26166 6A46           81C3                 256F  add	bx,#_vgafont16
26167 6A4A           53                         push	bx
26168                                           ! Debug: list unsigned int = const $C000 (used reg = )
26169 6A4B           B8                   C000  mov	ax,#$C000
26170 6A4E           50                         push	ax
26171                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26172 6A4F           FF76         FC            push	-4[bp]
26173                                           ! Debug: list unsigned int = const $A000 (used reg = )
26174 6A52           B8                   A000  mov	ax,#$A000
26175 6A55           50                         push	ax
26176                                           ! Debug: func () void = memcpyb+0 (used reg = )
26177 6A56           E8         1286            call	_memcpyb
26178 6A59           83C4                   0A  add	sp,*$A
26179                                           !BCC_EOS
26180                                           ! 3607   }
26181                                           ! 3608  release_font_access();
26182                       00006A5C            .237:
26183                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26184 6A5C           8B46         FA            mov	ax,-6[bp]
26185 6A5F           40                         inc	ax
26186 6A60           8946         FA            mov	-6[bp],ax
26187                       00006A63            .238:
26188                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26189 6A63           8B46         FA            mov	ax,-6[bp]
26190 6A66           3D                   0100  cmp	ax,#$100
26191 6A69           72           BD            jb 	.239
26192                       00006A6B            .23A:
26193                       00006A6B            .236:
26194                                           ! Debug: func () void = release_font_access+0 (used reg = )
26195 6A6B           E8         FC35            call	_release_font_access
26196                                           !BCC_EOS
26197                                           ! 3609  if(AL>=0x10)
26198                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26199 6A6E           8A46         04            mov	al,4[bp]
26200 6A71           3C                     10  cmp	al,*$10
26201 6A73           72           09            jb  	.23B
26202                       00006A75            .23C:
26203                                           ! 3610   {
26204                                           ! 3611    set_scan_lines(16);
26205                                           ! Debug: list int = const $10 (used reg = )
26206 6A75           B8                   0010  mov	ax,*$10
26207 6A78           50                         push	ax
26208                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26209 6A79           E8         FC5B            call	_set_scan_lines
26210 6A7C           44                         inc	sp
26211 6A7D           44                         inc	sp
26212                                           !BCC_EOS
26213                                           ! 3612   }
26214                                           ! 3613 }
26215                       00006A7E            .23B:
26216 6A7E           89EC                       mov	sp,bp
26217 6A80           5D                         pop	bp
26218 6A81           C3                         ret
26219                                           ! 3614 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26220                                           ! Register BX used in function biosfn_load_text_8_16_pat
26221                       00006A82            _biosfn_load_gfx_8_8_chars:
26222                                           !BCC_EOS
26223                                           !BCC_EOS
26224                                           ! 3615 {
26225                                           ! 3616  unimplemented();
26226 6A82           55                         push	bp
26227 6A83           89E5                       mov	bp,sp
26228                                           ! Debug: func () void = unimplemented+0 (used reg = )
26229 6A85           E8         1346            call	_unimplemented
26230                                           !BCC_EOS
26231                                           ! 3617 }
26232 6A88           5D                         pop	bp
26233 6A89           C3                         ret
26234                                           ! 3618 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26235                       00006A8A            _biosfn_load_gfx_user_chars:
26236                                           !BCC_EOS
26237                                           !BCC_EOS
26238                                           !BCC_EOS
26239                                           !BCC_EOS
26240                                           !BCC_EOS
26241                                           ! 3619 {
26242                                           ! 3620  unimplemented();
26243 6A8A           55                         push	bp
26244 6A8B           89E5                       mov	bp,sp
26245                                           ! Debug: func () void = unimplemented+0 (used reg = )
26246 6A8D           E8         133E            call	_unimplemented
26247                                           !BCC_EOS
26248                                           ! 3621 }
26249 6A90           5D                         pop	bp
26250 6A91           C3                         ret
26251                                           ! 3622 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26252                       00006A92            _biosfn_load_gfx_8_14_chars:
26253                                           !BCC_EOS
26254                                           ! 3623 {
26255                                           ! 3624  unimplemented();
26256 6A92           55                         push	bp
26257 6A93           89E5                       mov	bp,sp
26258                                           ! Debug: func () void = unimplemented+0 (used reg = )
26259 6A95           E8         1336            call	_unimplemented
26260                                           !BCC_EOS
26261                                           ! 3625 }
26262 6A98           5D                         pop	bp
26263 6A99           C3                         ret
26264                                           ! 3626 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26265                       00006A9A            _biosfn_load_gfx_8_8_dd_chars:
26266                                           !BCC_EOS
26267                                           ! 3627 {
26268                                           ! 3628  unimplemented();
26269 6A9A           55                         push	bp
26270 6A9B           89E5                       mov	bp,sp
26271                                           ! Debug: func () void = unimplemented+0 (used reg = )
26272 6A9D           E8         132E            call	_unimplemented
26273                                           !BCC_EOS
26274                                           ! 3629 }
26275 6AA0           5D                         pop	bp
26276 6AA1           C3                         ret
26277                                           ! 3630 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26278                       00006AA2            _biosfn_load_gfx_8_16_chars:
26279                                           !BCC_EOS
26280                                           ! 3631 {
26281                                           ! 3632  unimplemented();
26282 6AA2           55                         push	bp
26283 6AA3           89E5                       mov	bp,sp
26284                                           ! Debug: func () void = unimplemented+0 (used reg = )
26285 6AA5           E8         1326            call	_unimplemented
26286                                           !BCC_EOS
26287                                           ! 3633 }
26288 6AA8           5D                         pop	bp
26289 6AA9           C3                         ret
26290                                           ! 3634 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26291                                           ! 3635 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26292                       00006AAA            _biosfn_get_font_info:
26293                                           !BCC_EOS
26294                                           !BCC_EOS
26295                                           !BCC_EOS
26296                                           !BCC_EOS
26297                                           !BCC_EOS
26298                                           ! 3636 {Bit16u ss=get_SS();
26299 6AAA           55                         push	bp
26300 6AAB           89E5                       mov	bp,sp
26301 6AAD           4C                         dec	sp
26302 6AAE           4C                         dec	sp
26303                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26304 6AAF           E8         1319            call	_get_SS
26305                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26306 6AB2           8946         FE            mov	-2[bp],ax
26307                                           !BCC_EOS
26308                                           ! 3637  switch(BH)
26309 6AB5           8A46         04            mov	al,4[bp]
26310                                           ! 3638   {case 0x00:
26311 6AB8           E9         0154            br 	.23F
26312                                           ! 3639     write_word(ss,ES,read_word(0x00,0x1f*4));
26313                       00006ABB            .240:
26314                                           ! Debug: list int = const $7C (used reg = )
26315 6ABB           B8                   007C  mov	ax,*$7C
26316 6ABE           50                         push	ax
26317                                           ! Debug: list int = const 0 (used reg = )
26318 6ABF           31C0                       xor	ax,ax
26319 6AC1           50                         push	ax
26320                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26321 6AC2           E8         128D            call	_read_word
26322 6AC5           83C4                   04  add	sp,*4
26323                                           ! Debug: list unsigned short = ax+0 (used reg = )
26324 6AC8           50                         push	ax
26325                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26326 6AC9           FF76         06            push	6[bp]
26327                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26328 6ACC           FF76         FE            push	-2[bp]
26329                                           ! Debug: func () void = write_word+0 (used reg = )
26330 6ACF           E8         12AB            call	_write_word
26331 6AD2           83C4                   06  add	sp,*6
26332                                           !BCC_EOS
26333                                           ! 3640     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26334                                           ! Debug: list int = const $7E (used reg = )
26335 6AD5           B8                   007E  mov	ax,*$7E
26336 6AD8           50                         push	ax
26337                                           ! Debug: list int = const 0 (used reg = )
26338 6AD9           31C0                       xor	ax,ax
26339 6ADB           50                         push	ax
26340                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26341 6ADC           E8         1273            call	_read_word
26342 6ADF           83C4                   04  add	sp,*4
26343                                           ! Debug: list unsigned short = ax+0 (used reg = )
26344 6AE2           50                         push	ax
26345                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26346 6AE3           FF76         08            push	8[bp]
26347                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26348 6AE6           FF76         FE            push	-2[bp]
26349                                           ! Debug: func () void = write_word+0 (used reg = )
26350 6AE9           E8         1291            call	_write_word
26351 6AEC           83C4                   06  add	sp,*6
26352                                           !BCC_EOS
26353                                           ! 3641     break;
26354 6AEF           E9         0142            br 	.23D
26355                                           !BCC_EOS
26356                                           ! 3642    case 0x01:
26357                                           ! 3643     write_word(ss,ES,read_word(0x00,0x43*4));
26358                       00006AF2            .241:
26359                                           ! Debug: list int = const $10C (used reg = )
26360 6AF2           B8                   010C  mov	ax,#$10C
26361 6AF5           50                         push	ax
26362                                           ! Debug: list int = const 0 (used reg = )
26363 6AF6           31C0                       xor	ax,ax
26364 6AF8           50                         push	ax
26365                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26366 6AF9           E8         1256            call	_read_word
26367 6AFC           83C4                   04  add	sp,*4
26368                                           ! Debug: list unsigned short = ax+0 (used reg = )
26369 6AFF           50                         push	ax
26370                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26371 6B00           FF76         06            push	6[bp]
26372                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26373 6B03           FF76         FE            push	-2[bp]
26374                                           ! Debug: func () void = write_word+0 (used reg = )
26375 6B06           E8         1274            call	_write_word
26376 6B09           83C4                   06  add	sp,*6
26377                                           !BCC_EOS
26378                                           ! 3644     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26379                                           ! Debug: list int = const $10E (used reg = )
26380 6B0C           B8                   010E  mov	ax,#$10E
26381 6B0F           50                         push	ax
26382                                           ! Debug: list int = const 0 (used reg = )
26383 6B10           31C0                       xor	ax,ax
26384 6B12           50                         push	ax
26385                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26386 6B13           E8         123C            call	_read_word
26387 6B16           83C4                   04  add	sp,*4
26388                                           ! Debug: list unsigned short = ax+0 (used reg = )
26389 6B19           50                         push	ax
26390                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26391 6B1A           FF76         08            push	8[bp]
26392                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26393 6B1D           FF76         FE            push	-2[bp]
26394                                           ! Debug: func () void = write_word+0 (used reg = )
26395 6B20           E8         125A            call	_write_word
26396 6B23           83C4                   06  add	sp,*6
26397                                           !BCC_EOS
26398                                           ! 3645     break;
26399 6B26           E9         010B            br 	.23D
26400                                           !BCC_EOS
26401                                           ! 3646    case 0x02:
26402                                           ! 3647     write_word(ss,ES,0xC000);
26403                       00006B29            .242:
26404                                           ! Debug: list unsigned int = const $C000 (used reg = )
26405 6B29           B8                   C000  mov	ax,#$C000
26406 6B2C           50                         push	ax
26407                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26408 6B2D           FF76         06            push	6[bp]
26409                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26410 6B30           FF76         FE            push	-2[bp]
26411                                           ! Debug: func () void = write_word+0 (used reg = )
26412 6B33           E8         1247            call	_write_word
26413 6B36           83C4                   06  add	sp,*6
26414                                           !BCC_EOS
26415                                           ! 3648     write_word(ss,BP,vgafont14);
26416                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26417 6B39           BB                   176F  mov	bx,#_vgafont14
26418 6B3C           53                         push	bx
26419                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26420 6B3D           FF76         08            push	8[bp]
26421                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26422 6B40           FF76         FE            push	-2[bp]
26423                                           ! Debug: func () void = write_word+0 (used reg = )
26424 6B43           E8         1237            call	_write_word
26425 6B46           83C4                   06  add	sp,*6
26426                                           !BCC_EOS
26427                                           ! 3649     break;
26428 6B49           E9         00E8            br 	.23D
26429                                           !BCC_EOS
26430                                           ! 3650    case 0x03:
26431                                           ! 3651     write_word(ss,ES,0xC000);
26432                       00006B4C            .243:
26433                                           ! Debug: list unsigned int = const $C000 (used reg = )
26434 6B4C           B8                   C000  mov	ax,#$C000
26435 6B4F           50                         push	ax
26436                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26437 6B50           FF76         06            push	6[bp]
26438                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26439 6B53           FF76         FE            push	-2[bp]
26440                                           ! Debug: func () void = write_word+0 (used reg = )
26441 6B56           E8         1224            call	_write_word
26442 6B59           83C4                   06  add	sp,*6
26443                                           !BCC_EOS
26444                                           ! 3652     write_word(ss,BP,vgafont8);
26445                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26446 6B5C           BB                   0F6F  mov	bx,#_vgafont8
26447 6B5F           53                         push	bx
26448                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26449 6B60           FF76         08            push	8[bp]
26450                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26451 6B63           FF76         FE            push	-2[bp]
26452                                           ! Debug: func () void = write_word+0 (used reg = )
26453 6B66           E8         1214            call	_write_word
26454 6B69           83C4                   06  add	sp,*6
26455                                           !BCC_EOS
26456                                           ! 3653     break;
26457 6B6C           E9         00C5            br 	.23D
26458                                           !BCC_EOS
26459                                           ! 3654    case 0x04:
26460                                           ! 3655     write_word(ss,ES,0xC000);
26461                       00006B6F            .244:
26462                                           ! Debug: list unsigned int = const $C000 (used reg = )
26463 6B6F           B8                   C000  mov	ax,#$C000
26464 6B72           50                         push	ax
26465                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26466 6B73           FF76         06            push	6[bp]
26467                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26468 6B76           FF76         FE            push	-2[bp]
26469                                           ! Debug: func () void = write_word+0 (used reg = )
26470 6B79           E8         1201            call	_write_word
26471 6B7C           83C4                   06  add	sp,*6
26472                                           !BCC_EOS
26473                                           ! 3656     write_word(ss,BP,vgafont8+128*8);
26474                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26475 6B7F           BB                   136F  mov	bx,#_vgafont8+$400
26476 6B82           53                         push	bx
26477                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26478 6B83           FF76         08            push	8[bp]
26479                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26480 6B86           FF76         FE            push	-2[bp]
26481                                           ! Debug: func () void = write_word+0 (used reg = )
26482 6B89           E8         11F1            call	_write_word
26483 6B8C           83C4                   06  add	sp,*6
26484                                           !BCC_EOS
26485                                           ! 3657     break;
26486 6B8F           E9         00A2            br 	.23D
26487                                           !BCC_EOS
26488                                           ! 3658    case 0x05:
26489                                           ! 3659     write_word(ss,ES,0xC000);
26490                       00006B92            .245:
26491                                           ! Debug: list unsigned int = const $C000 (used reg = )
26492 6B92           B8                   C000  mov	ax,#$C000
26493 6B95           50                         push	ax
26494                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26495 6B96           FF76         06            push	6[bp]
26496                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26497 6B99           FF76         FE            push	-2[bp]
26498                                           ! Debug: func () void = write_word+0 (used reg = )
26499 6B9C           E8         11DE            call	_write_word
26500 6B9F           83C4                   06  add	sp,*6
26501                                           !BCC_EOS
26502                                           ! 3660     write_word(ss,BP,vgafont14alt);
26503                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26504 6BA2           BB                   356F  mov	bx,#_vgafont14alt
26505 6BA5           53                         push	bx
26506                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26507 6BA6           FF76         08            push	8[bp]
26508                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26509 6BA9           FF76         FE            push	-2[bp]
26510                                           ! Debug: func () void = write_word+0 (used reg = )
26511 6BAC           E8         11CE            call	_write_word
26512 6BAF           83C4                   06  add	sp,*6
26513                                           !BCC_EOS
26514                                           ! 3661     break;
26515 6BB2           E9         007F            jmp .23D
26516                                           !BCC_EOS
26517                                           ! 3662    case 0x06:
26518                                           ! 3663     write_word(ss,ES,0xC000);
26519                       00006BB5            .246:
26520                                           ! Debug: list unsigned int = const $C000 (used reg = )
26521 6BB5           B8                   C000  mov	ax,#$C000
26522 6BB8           50                         push	ax
26523                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26524 6BB9           FF76         06            push	6[bp]
26525                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26526 6BBC           FF76         FE            push	-2[bp]
26527                                           ! Debug: func () void = write_word+0 (used reg = )
26528 6BBF           E8         11BB            call	_write_word
26529 6BC2           83C4                   06  add	sp,*6
26530                                           !BCC_EOS
26531                                           ! 3664     write_word(ss,BP,vgafont16);
26532                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26533 6BC5           BB                   256F  mov	bx,#_vgafont16
26534 6BC8           53                         push	bx
26535                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26536 6BC9           FF76         08            push	8[bp]
26537                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26538 6BCC           FF76         FE            push	-2[bp]
26539                                           ! Debug: func () void = write_word+0 (used reg = )
26540 6BCF           E8         11AB            call	_write_word
26541 6BD2           83C4                   06  add	sp,*6
26542                                           !BCC_EOS
26543                                           ! 3665     break;
26544 6BD5           EB           5D            jmp .23D
26545                                           !BCC_EOS
26546                                           ! 3666    case 0x07:
26547                                           ! 3667     write_word(ss,ES,0xC000);
26548                       00006BD7            .247:
26549                                           ! Debug: list unsigned int = const $C000 (used reg = )
26550 6BD7           B8                   C000  mov	ax,#$C000
26551 6BDA           50                         push	ax
26552                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26553 6BDB           FF76         06            push	6[bp]
26554                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26555 6BDE           FF76         FE            push	-2[bp]
26556                                           ! Debug: func () void = write_word+0 (used reg = )
26557 6BE1           E8         1199            call	_write_word
26558 6BE4           83C4                   06  add	sp,*6
26559                                           !BCC_EOS
26560                                           ! 3668     write_word(ss,BP,vgafont16alt);
26561                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26562 6BE7           BB                   3570  mov	bx,#_vgafont16alt
26563 6BEA           53                         push	bx
26564                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26565 6BEB           FF76         08            push	8[bp]
26566                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26567 6BEE           FF76         FE            push	-2[bp]
26568                                           ! Debug: func () void = write_word+0 (used reg = )
26569 6BF1           E8         1189            call	_write_word
26570 6BF4           83C4                   06  add	sp,*6
26571                                           !BCC_EOS
26572                                           ! 3669     break;
26573 6BF7           EB           3B            jmp .23D
26574                                           !BCC_EOS
26575                                           ! 3670    default:
26576                                           ! 3671      printf("Get font info BH(%02x) was discarded\n",BH);
26577                       00006BF9            .248:
26578                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26579 6BF9           8A46         04            mov	al,4[bp]
26580 6BFC           30E4                       xor	ah,ah
26581 6BFE           50                         push	ax
26582                                           ! Debug: list * char = .249+0 (used reg = )
26583 6BFF           BB                   A555  mov	bx,#.249
26584 6C02           53                         push	bx
26585                                           ! Debug: func () void = printf+0 (used reg = )
26586 6C03           E8         11E4            call	_printf
26587 6C06           83C4                   04  add	sp,*4
26588                                           !BCC_EOS
26589                                           ! 3672     return;
26590 6C09           89EC                       mov	sp,bp
26591 6C0B           5D                         pop	bp
26592 6C0C           C3                         ret
26593                                           !BCC_EOS
26594                                           ! 3673   }
26595                                           ! 3674  
26596                                           ! 3674 write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26597 6C0D           EB           25            jmp .23D
26598                       00006C0F            .23F:
26599 6C0F           2C                     00  sub	al,*0
26600 6C11           72           E6            jb 	.248
26601 6C13           3C                     07  cmp	al,*7
26602 6C15           77           1B            ja  	.24A
26603 6C17           30E4                       xor	ah,ah
26604 6C19           D1E0                       shl	ax,*1
26605 6C1B           89C3                       mov	bx,ax
26606 6C1D           2E                         seg	cs
26607 6C1E           FFA7       6C22            br	.24B[bx]
26608                       00006C22            .24B:
26609 6C22                      6ABB            .word	.240
26610 6C24                      6AF2            .word	.241
26611 6C26                      6B29            .word	.242
26612 6C28                      6B4C            .word	.243
26613 6C2A                      6B6F            .word	.244
26614 6C2C                      6B92            .word	.245
26615 6C2E                      6BB5            .word	.246
26616 6C30                      6BD7            .word	.247
26617                       00006C32            .24A:
26618 6C32           EB           C5            jmp	.248
26619                       00006C34            .23D:
26620                       FFFFFFFC            ..FFF5	=	-4
26621                                           ! Debug: list int = const $85 (used reg = )
26622 6C34           B8                   0085  mov	ax,#$85
26623 6C37           50                         push	ax
26624                                           ! Debug: list int = const $40 (used reg = )
26625 6C38           B8                   0040  mov	ax,*$40
26626 6C3B           50                         push	ax
26627                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26628 6C3C           E8         1100            call	_read_byte
26629 6C3F           83C4                   04  add	sp,*4
26630                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26631 6C42           30E4                       xor	ah,ah
26632                                           ! Debug: list unsigned short = ax+0 (used reg = )
26633 6C44           50                         push	ax
26634                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26635 6C45           FF76         0A            push	$A[bp]
26636                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26637 6C48           FF76         FE            push	-2[bp]
26638                                           ! Debug: func () void = write_word+0 (used reg = )
26639 6C4B           E8         112F            call	_write_word
26640 6C4E           83C4                   06  add	sp,*6
26641                                           !BCC_EOS
26642                                           ! 3675  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26643                                           ! Debug: list int = const $84 (used reg = )
26644 6C51           B8                   0084  mov	ax,#$84
26645 6C54           50                         push	ax
26646                                           ! Debug: list int = const $40 (used reg = )
26647 6C55           B8                   0040  mov	ax,*$40
26648 6C58           50                         push	ax
26649                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26650 6C59           E8         10E3            call	_read_byte
26651 6C5C           83C4                   04  add	sp,*4
26652                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26653 6C5F           30E4                       xor	ah,ah
26654                                           ! Debug: list unsigned short = ax+0 (used reg = )
26655 6C61           50                         push	ax
26656                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26657 6C62           FF76         0C            push	$C[bp]
26658                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26659 6C65           FF76         FE            push	-2[bp]
26660                                           ! Debug: func () void = write_word+0 (used reg = )
26661 6C68           E8         1112            call	_write_word
26662 6C6B           83C4                   06  add	sp,*6
26663                                           !BCC_EOS
26664                                           ! 3676 }
26665 6C6E           89EC                       mov	sp,bp
26666 6C70           5D                         pop	bp
26667 6C71           C3                         ret
26668                                           ! 3677 #asm
26669                                           !BCC_ASM
26670                       00000006            _biosfn_get_font_info.BP	set	6
26671                       00000002            _biosfn_get_font_info.BH	set	2
26672                       00000008            _biosfn_get_font_info.CX	set	8
26673                       0000000A            _biosfn_get_font_info.DX	set	$A
26674                       00000004            _biosfn_get_font_info.ES	set	4
26675                       00006C72            biosfn_get_ega_info:
26676 6C72           1E                           push ds
26677 6C73           50                           push ax
26678 6C74           B8                   0040    mov ax, # 0x40
26679 6C77           8ED8                         mov ds, ax
26680 6C79           30ED                         xor ch, ch
26681 6C7B           BB                   0088    mov bx, # 0x88
26682 6C7E           8A0F                         mov cl, [bx]
26683 6C80           80E1                   0F    and cl, #0x0f
26684 6C83           BB                   0063    mov bx, # 0x63
26685 6C86           8B07                         mov ax, [bx]
26686 6C88           BB                   0003    mov bx, #0x0003
26687 6C8B           3D                   03B4    cmp ax, # 0x3b4
26688 6C8E           75           02              jne mode_ega_color
26689 6C90           B7                     01    mov bh, #0x01
26690                       00006C92            mode_ega_color:
26691 6C92           58                           pop ax
26692 6C93           1F                           pop ds
26693 6C94           C3                           ret
26694                                           ! 3697 endasm
26695                                           !BCC_ENDASM
26696                                           ! 3698 static void biosfn_alternate_prtsc()
26697                                           ! Register BX used in function biosfn_get_font_info
26698                                           ! 3699 {
26699                       00006C95            _biosfn_alternate_prtsc:
26700                                           ! 3700  unimplemented();
26701 6C95           55                         push	bp
26702 6C96           89E5                       mov	bp,sp
26703                                           ! Debug: func () void = unimplemented+0 (used reg = )
26704 6C98           E8         1133            call	_unimplemented
26705                                           !BCC_EOS
26706                                           ! 3701 }
26707 6C9B           5D                         pop	bp
26708 6C9C           C3                         ret
26709                                           ! 3702 #asm
26710                                           !BCC_ASM
26711                       00006C9D            biosfn_select_vert_res:
26712                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26713 6C9D           1E                           push ds
26714 6C9E           53                           push bx
26715 6C9F           52                           push dx
26716 6CA0           88C2                         mov dl, al
26717 6CA2           B8                   0040    mov ax, # 0x40
26718 6CA5           8ED8                         mov ds, ax
26719 6CA7           BB                   0089    mov bx, # 0x89
26720 6CAA           8A07                         mov al, [bx]
26721 6CAC           BB                   0088    mov bx, # 0x88
26722 6CAF           8A27                         mov ah, [bx]
26723 6CB1           80FA                   01    cmp dl, #0x01
26724 6CB4           74           24              je vert_res_350
26725 6CB6           72           2C              jb vert_res_200
26726 6CB8           80FA                   02    cmp dl, #0x02
26727 6CBB           74           11              je vert_res_400
26728 6CBD           88D0                         mov al, dl
26729 6CBF           30E4                         xor ah, ah
26730 6CC1           50                           push ax
26731 6CC2           BB                   6CFF    mov bx, #msg_vert_res
26732 6CC5           53                           push bx
26733 6CC6           E8         1121              call _printf
26734 6CC9           83C4                   04    add sp, #4
26735 6CCC           EB           2A              jmp set_retcode
26736                       00006CCE            vert_res_400:
26737                                             ; reset modeset ctl bit 7 and set bit 4
26738                                             ; set switches bit 3-0 to 0x09
26739 6CCE           24                     7F    and al, #0x7f
26740 6CD0           0C                     10    or al, #0x10
26741 6CD2           80E4                   F0    and ah, #0xf0
26742 6CD5           80CC                   09    or ah, #0x09
26743 6CD8           75           14              jnz set_vert_res
26744                       00006CDA            vert_res_350:
26745                                             ; reset modeset ctl bit 7 and bit 4
26746                                             ; set switches bit 3-0 to 0x09
26747 6CDA           24                     6F    and al, #0x6f
26748 6CDC           80E4                   F0    and ah, #0xf0
26749 6CDF           80CC                   09    or ah, #0x09
26750 6CE2           75           0A              jnz set_vert_res
26751                       00006CE4            vert_res_200:
26752                                             ; set modeset ctl bit 7 and reset bit 4
26753                                             ; set switches bit 3-0 to 0x08
26754 6CE4           24                     EF    and al, #0xef
26755 6CE6           0C                     80    or al, #0x80
26756 6CE8           80E4                   F0    and ah, #0xf0
26757 6CEB           80CC                   08    or ah, #0x08
26758                       00006CEE            set_vert_res:
26759 6CEE           BB                   0089    mov bx, # 0x89
26760 6CF1           8807                         mov [bx], al
26761 6CF3           BB                   0088    mov bx, # 0x88
26762 6CF6           8827                         mov [bx], ah
26763                       00006CF8            set_retcode:
26764 6CF8           B8                   1212    mov ax, #0x1212
26765 6CFB           5A                           pop dx
26766 6CFC           5B                           pop bx
26767 6CFD           1F                           pop ds
26768 6CFE           C3                           ret
26769                       00006CFF            msg_vert_res:
26770 6CFF                        53            .ascii "Select vert res (%02x) was discarded"
26771 6D23                        0D            .byte 0x0d,0x0a,0x00
26772                       00006D26            biosfn_enable_default_palette_loading:
26773 6D26           1E                           push ds
26774 6D27           53                           push bx
26775 6D28           52                           push dx
26776 6D29           88C2                         mov dl, al
26777 6D2B           80E2                   01    and dl, #0x01
26778 6D2E           C0E2                   03    shl dl, 3
26779 6D31           B8                   0040    mov ax, # 0x40
26780 6D34           8ED8                         mov ds, ax
26781 6D36           BB                   0089    mov bx, # 0x89
26782 6D39           8A07                         mov al, [bx]
26783 6D3B           24                     F7    and al, #0xf7
26784 6D3D           08D0                         or al, dl
26785 6D3F           8807                         mov [bx], al
26786 6D41           B8                   1212    mov ax, #0x1212
26787 6D44           5A                           pop dx
26788 6D45           5B                           pop bx
26789 6D46           1F                           pop ds
26790 6D47           C3                           ret
26791                       00006D48            biosfn_enable_video_addressing:
26792 6D48           53                           push bx
26793 6D49           52                           push dx
26794 6D4A           88C3                         mov bl, al
26795 6D4C           80E3                   01    and bl, #0x01
26796 6D4F           80F3                   01    xor bl, #0x01
26797 6D52           D0E3                         shl bl, 1
26798 6D54           BA                   03CC    mov dx, # 0x3cc
26799 6D57           EC                           in al, dx
26800 6D58           24                     FD    and al, #0xfd
26801 6D5A           08D8                         or al, bl
26802 6D5C           BA                   03C2    mov dx, # 0x3c2
26803 6D5F           EE                           out dx, al
26804 6D60           B8                   1212    mov ax, #0x1212
26805 6D63           5A                           pop dx
26806 6D64           5B                           pop bx
26807 6D65           C3                           ret
26808                       00006D66            biosfn_enable_grayscale_summing:
26809 6D66           1E                           push ds
26810 6D67           53                           push bx
26811 6D68           52                           push dx
26812 6D69           88C2                         mov dl, al
26813 6D6B           80E2                   01    and dl, #0x01
26814 6D6E           80F2                   01    xor dl, #0x01
26815 6D71           D0E2                         shl dl, 1
26816 6D73           B8                   0040    mov ax, # 0x40
26817 6D76           8ED8                         mov ds, ax
26818 6D78           BB                   0089    mov bx, # 0x89
26819 6D7B           8A07                         mov al, [bx]
26820 6D7D           24                     FD    and al, #0xfd
26821 6D7F           08D0                         or al, dl
26822 6D81           8807                         mov [bx], al
26823 6D83           B8                   1212    mov ax, #0x1212
26824 6D86           5A                           pop dx
26825 6D87           5B                           pop bx
26826 6D88           1F                           pop ds
26827 6D89           C3                           ret
26828                       00006D8A            biosfn_enable_cursor_emulation:
26829 6D8A           1E                           push ds
26830 6D8B           53                           push bx
26831 6D8C           52                           push dx
26832 6D8D           88C2                         mov dl, al
26833 6D8F           80E2                   01    and dl, #0x01
26834 6D92           80F2                   01    xor dl, #0x01
26835 6D95           B8                   0040    mov ax, # 0x40
26836 6D98           8ED8                         mov ds, ax
26837 6D9A           BB                   0089    mov bx, # 0x89
26838 6D9D           8A07                         mov al, [bx]
26839 6D9F           24                     FE    and al, #0xfe
26840 6DA1           08D0                         or al, dl
26841 6DA3           8807                         mov [bx], al
26842 6DA5           B8                   1212    mov ax, #0x1212
26843 6DA8           5A                           pop dx
26844 6DA9           5B                           pop bx
26845 6DAA           1F                           pop ds
26846 6DAB           C3                           ret
26847                                           ! 3839 endasm
26848                                           !BCC_ENDASM
26849                                           ! 3840 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26850                       00006DAC            _biosfn_switch_video_interface:
26851                                           !BCC_EOS
26852                                           !BCC_EOS
26853                                           !BCC_EOS
26854                                           ! 3841 {
26855                                           ! 3842  unimplemented();
26856 6DAC           55                         push	bp
26857 6DAD           89E5                       mov	bp,sp
26858                                           ! Debug: func () void = unimplemented+0 (used reg = )
26859 6DAF           E8         101C            call	_unimplemented
26860                                           !BCC_EOS
26861                                           ! 3843 }
26862 6DB2           5D                         pop	bp
26863 6DB3           C3                         ret
26864                                           ! 3844 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26865                       00006DB4            _biosfn_enable_video_refresh_control:
26866                                           !BCC_EOS
26867                                           ! 3845 {
26868                                           ! 3846  unimplemented();
26869 6DB4           55                         push	bp
26870 6DB5           89E5                       mov	bp,sp
26871                                           ! Debug: func () void = unimplemented+0 (used reg = )
26872 6DB7           E8         1014            call	_unimplemented
26873                                           !BCC_EOS
26874                                           ! 3847 }
26875 6DBA           5D                         pop	bp
26876 6DBB           C3                         ret
26877                                           ! 3848 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26878                                           ! 3849 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26879                       00006DBC            _biosfn_write_string:
26880                                           !BCC_EOS
26881                                           !BCC_EOS
26882                                           !BCC_EOS
26883                                           !BCC_EOS
26884                                           !BCC_EOS
26885                                           !BCC_EOS
26886                                           !BCC_EOS
26887                                           !BCC_EOS
26888                                           ! 3850 {
26889                                           ! 3851  Bit16u newcurs,oldcurs,dummy;
26890                                           !BCC_EOS
26891                                           ! 3852  Bit8u car,carattr;
26892                                           !BCC_EOS
26893                                           ! 3853  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26894 6DBC           55                         push	bp
26895 6DBD           89E5                       mov	bp,sp
26896 6DBF           83C4                   F8  add	sp,*-8
26897                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26898 6DC2           8D5E         FC            lea	bx,-4[bp]
26899 6DC5           53                         push	bx
26900                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26901 6DC6           8D5E         FA            lea	bx,-6[bp]
26902 6DC9           53                         push	bx
26903                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26904 6DCA           8A46         06            mov	al,6[bp]
26905 6DCD           30E4                       xor	ah,ah
26906 6DCF           50                         push	ax
26907                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26908 6DD0           E8         D6B6            call	_biosfn_get_cursor_pos
26909 6DD3           83C4                   06  add	sp,*6
26910                                           !BCC_EOS
26911                                           ! 3854  if(row==0xff)
26912                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26913 6DD6           8A46         0C            mov	al,$C[bp]
26914 6DD9           3C                     FF  cmp	al,#$FF
26915 6DDB           75           12            jne 	.24C
26916                       00006DDD            .24D:
26917                                           ! 3855   {col=oldcurs&0x00ff;
26918                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26919 6DDD           8A46         FC            mov	al,-4[bp]
26920                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26921 6DE0           8846         0E            mov	$E[bp],al
26922                                           !BCC_EOS
26923                                           ! 3856    row=(oldcurs&0xff00)>>8;
26924                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26925 6DE3           8B46         FC            mov	ax,-4[bp]
26926 6DE6           30C0                       xor	al,al
26927                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26928 6DE8           88E0                       mov	al,ah
26929 6DEA           30E4                       xor	ah,ah
26930                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26931 6DEC           8846         0C            mov	$C[bp],al
26932                                           !BCC_EOS
26933                                           ! 3857   }
26934                                           ! 3858  newcurs=row; newcurs<<=8; newcurs+=col;
26935                       00006DEF            .24C:
26936                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26937 6DEF           8A46         0C            mov	al,$C[bp]
26938 6DF2           30E4                       xor	ah,ah
26939 6DF4           8946         FE            mov	-2[bp],ax
26940                                           !BCC_EOS
26941                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26942 6DF7           8B46         FE            mov	ax,-2[bp]
26943 6DFA           88C4                       mov	ah,al
26944 6DFC           30C0                       xor	al,al
26945 6DFE           8946         FE            mov	-2[bp],ax
26946                                           !BCC_EOS
26947                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26948 6E01           8B46         FE            mov	ax,-2[bp]
26949 6E04           0246         0E            add	al,$E[bp]
26950 6E07           80D4                   00  adc	ah,*0
26951 6E0A           8946         FE            mov	-2[bp],ax
26952                                           !BCC_EOS
26953                                           ! 3859  biosfn_set_cursor_pos(page,newcurs);
26954                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26955 6E0D           FF76         FE            push	-2[bp]
26956                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26957 6E10           8A46         06            mov	al,6[bp]
26958 6E13           30E4                       xor	ah,ah
26959 6E15           50                         push	ax
26960                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26961 6E16           E8         D570            call	_biosfn_set_cursor_pos
26962 6E19           83C4                   04  add	sp,*4
26963                                           !BCC_EOS
26964                                           ! 3860  while(count--!=0)
26965                                           ! 3861   {
26966 6E1C           EB           4F            jmp .24F
26967                       00006E1E            .250:
26968                                           ! 3862    car=read_byte(seg,offset++);
26969                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26970 6E1E           8B46         12            mov	ax,$12[bp]
26971 6E21           40                         inc	ax
26972 6E22           8946         12            mov	$12[bp],ax
26973                                           ! Debug: list unsigned short = ax-1 (used reg = )
26974 6E25           48                         dec	ax
26975 6E26           50                         push	ax
26976                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26977 6E27           FF76         10            push	$10[bp]
26978                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26979 6E2A           E8         0F12            call	_read_byte
26980 6E2D           83C4                   04  add	sp,*4
26981                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26982 6E30           8846         F9            mov	-7[bp],al
26983                                           !BCC_EOS
26984                                           ! 3863    if((flag&0x02)!=0)
26985                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26986 6E33           8A46         04            mov	al,4[bp]
26987 6E36           24                     02  and	al,*2
26988                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26989 6E38           84C0                       test	al,al
26990 6E3A           74           15            je  	.251
26991                       00006E3C            .252:
26992                                           ! 3864     attr=read_byte(seg,offset++);
26993                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26994 6E3C           8B46         12            mov	ax,$12[bp]
26995 6E3F           40                         inc	ax
26996 6E40           8946         12            mov	$12[bp],ax
26997                                           ! Debug: list unsigned short = ax-1 (used reg = )
26998 6E43           48                         dec	ax
26999 6E44           50                         push	ax
27000                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27001 6E45           FF76         10            push	$10[bp]
27002                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27003 6E48           E8         0EF4            call	_read_byte
27004 6E4B           83C4                   04  add	sp,*4
27005                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
27006 6E4E           8846         08            mov	8[bp],al
27007                                           !BCC_EOS
27008                                           ! 3865    biosfn_write_teletype(car,page,attr,3);
27009                       00006E51            .251:
27010                                           ! Debug: list int = const 3 (used reg = )
27011 6E51           B8                   0003  mov	ax,*3
27012 6E54           50                         push	ax
27013                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
27014 6E55           8A46         08            mov	al,8[bp]
27015 6E58           30E4                       xor	ah,ah
27016 6E5A           50                         push	ax
27017                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27018 6E5B           8A46         06            mov	al,6[bp]
27019 6E5E           30E4                       xor	ah,ah
27020 6E60           50                         push	ax
27021                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
27022 6E61           8A46         F9            mov	al,-7[bp]
27023 6E64           30E4                       xor	ah,ah
27024 6E66           50                         push	ax
27025                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27026 6E67           E8         F0B7            call	_biosfn_write_teletype
27027 6E6A           83C4                   08  add	sp,*8
27028                                           !BCC_EOS
27029                                           ! 3866   }
27030                                           ! 3867  if((flag&0x01)==0)
27031                       00006E6D            .24F:
27032                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27033 6E6D           8B46         0A            mov	ax,$A[bp]
27034 6E70           48                         dec	ax
27035 6E71           8946         0A            mov	$A[bp],ax
27036                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27037 6E74           3D                   FFFF  cmp	ax,*-1
27038 6E77           75           A5            jne	.250
27039                       00006E79            .253:
27040                       00006E79            .24E:
27041                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27042 6E79           8A46         04            mov	al,4[bp]
27043 6E7C           24                     01  and	al,*1
27044                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27045 6E7E           84C0                       test	al,al
27046 6E80           75           0F            jne 	.254
27047                       00006E82            .255:
27048                                           ! 3868   biosfn_set_cursor_pos(page,oldcurs);
27049                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27050 6E82           FF76         FC            push	-4[bp]
27051                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27052 6E85           8A46         06            mov	al,6[bp]
27053 6E88           30E4                       xor	ah,ah
27054 6E8A           50                         push	ax
27055                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27056 6E8B           E8         D4FB            call	_biosfn_set_cursor_pos
27057 6E8E           83C4                   04  add	sp,*4
27058                                           !BCC_EOS
27059                                           ! 3869 }
27060                       00006E91            .254:
27061 6E91           89EC                       mov	sp,bp
27062 6E93           5D                         pop	bp
27063 6E94           C3                         ret
27064                                           ! 3870 #asm
27065                                           !BCC_ASM
27066                       00000008            _biosfn_write_string.count	set	8
27067                       0000000E            _biosfn_write_string.seg	set	$E
27068                       0000000C            _biosfn_write_string.col	set	$C
27069                       00000002            _biosfn_write_string.flag	set	2
27070                       00000006            _biosfn_write_string.attr	set	6
27071                       00000004            _biosfn_write_string.page	set	4
27072                       0000000A            _biosfn_write_string.row	set	$A
27073                       00000010            _biosfn_write_string.offset	set	$10
27074                       00006E95            biosfn_group_1A:
27075 6E95           3C                     00    cmp al, #0x00
27076 6E97           74           08              je biosfn_read_display_code
27077 6E99           3C                     01    cmp al, #0x01
27078 6E9B           74           19              je biosfn_set_display_code
27079 6E9D           E8         0F3C              call _unknown
27080 6EA0           C3                           ret
27081                       00006EA1            biosfn_read_display_code:
27082 6EA1           1E                           push ds
27083 6EA2           50                           push ax
27084 6EA3           B8                   0040    mov ax, # 0x40
27085 6EA6           8ED8                         mov ds, ax
27086 6EA8           BB                   008A    mov bx, # 0x8A
27087 6EAB           8A07                         mov al, [bx]
27088 6EAD           88C3                         mov bl, al
27089 6EAF           30FF                         xor bh, bh
27090 6EB1           58                           pop ax
27091 6EB2           88E0                         mov al, ah
27092 6EB4           1F                           pop ds
27093 6EB5           C3                           ret
27094                       00006EB6            biosfn_set_display_code:
27095 6EB6           1E                           push ds
27096 6EB7           50                           push ax
27097 6EB8           53                           push bx
27098 6EB9           B8                   0040    mov ax, # 0x40
27099 6EBC           8ED8                         mov ds, ax
27100 6EBE           89D8                         mov ax, bx
27101 6EC0           BB                   008A    mov bx, # 0x8A
27102 6EC3           8807                         mov [bx], al
27103 6EC5           88E0                         mov al, ah
27104 6EC7           30E4                         xor ah, ah
27105 6EC9           50                           push ax
27106 6ECA           BB                   6EDA    mov bx, #msg_alt_dcc
27107 6ECD           53                           push bx
27108 6ECE           E8         0F19              call _printf
27109 6ED1           83C4                   04    add sp, #4
27110 6ED4           5B                           pop bx
27111 6ED5           58                           pop ax
27112 6ED6           88E0                         mov al, ah
27113 6ED8           1F                           pop ds
27114 6ED9           C3                           ret
27115                       00006EDA            msg_alt_dcc:
27116 6EDA                        41            .ascii "Alternate Display code (%02x) was discarded"
27117 6F05                        0D            .byte 0x0d,0x0a,0x00
27118                                           ! 3915 endasm
27119                                           !BCC_ENDASM
27120                                           ! 3916 static void biosfn_read_state_info (BX,ES,DI)
27121                                           ! Register BX used in function biosfn_write_string
27122                                           ! 3917 Bit16u BX;Bit16u ES;Bit16u DI;
27123                       00006F08            _biosfn_read_state_info:
27124                                           !BCC_EOS
27125                                           !BCC_EOS
27126                                           !BCC_EOS
27127                                           ! 3918 {
27128                                           ! 3919  write_word(ES,DI+0x00,&static_functionality);
27129 6F08           55                         push	bp
27130 6F09           89E5                       mov	bp,sp
27131                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27132 6F0B           BB                   0F5F  mov	bx,#_static_functionality
27133 6F0E           53                         push	bx
27134                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27135 6F0F           8B46         08            mov	ax,8[bp]
27136                                           ! Debug: list unsigned int = ax+0 (used reg = )
27137 6F12           50                         push	ax
27138                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27139 6F13           FF76         06            push	6[bp]
27140                                           ! Debug: func () void = write_word+0 (used reg = )
27141 6F16           E8         0E64            call	_write_word
27142 6F19           89EC                       mov	sp,bp
27143                                           !BCC_EOS
27144                                           ! 3920  write_word(ES,DI+0x02,0xC000);
27145                                           ! Debug: list unsigned int = const $C000 (used reg = )
27146 6F1B           B8                   C000  mov	ax,#$C000
27147 6F1E           50                         push	ax
27148                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27149 6F1F           8B46         08            mov	ax,8[bp]
27150                                           ! Debug: list unsigned int = ax+2 (used reg = )
27151 6F22           40                         inc	ax
27152 6F23           40                         inc	ax
27153 6F24           50                         push	ax
27154                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27155 6F25           FF76         06            push	6[bp]
27156                                           ! Debug: func () void = write_word+0 (used reg = )
27157 6F28           E8         0E52            call	_write_word
27158 6F2B           89EC                       mov	sp,bp
27159                                           !BCC_EOS
27160                                           ! 3921  memcpyb(ES,DI+0x04,0x40,0x49,30);
27161                                           ! Debug: list int = const $1E (used reg = )
27162 6F2D           B8                   001E  mov	ax,*$1E
27163 6F30           50                         push	ax
27164                                           ! Debug: list int = const $49 (used reg = )
27165 6F31           B8                   0049  mov	ax,*$49
27166 6F34           50                         push	ax
27167                                           ! Debug: list int = const $40 (used reg = )
27168 6F35           B8                   0040  mov	ax,*$40
27169 6F38           50                         push	ax
27170                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27171 6F39           8B46         08            mov	ax,8[bp]
27172                                           ! Debug: list unsigned int = ax+4 (used reg = )
27173 6F3C           05                   0004  add	ax,*4
27174 6F3F           50                         push	ax
27175                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27176 6F40           FF76         06            push	6[bp]
27177                                           ! Debug: func () void = memcpyb+0 (used reg = )
27178 6F43           E8         0D99            call	_memcpyb
27179 6F46           89EC                       mov	sp,bp
27180                                           !BCC_EOS
27181                                           ! 3922  memcpyb(ES,DI+0x22,0x40,0x84,3);
27182                                           ! Debug: list int = const 3 (used reg = )
27183 6F48           B8                   0003  mov	ax,*3
27184 6F4B           50                         push	ax
27185                                           ! Debug: list int = const $84 (used reg = )
27186 6F4C           B8                   0084  mov	ax,#$84
27187 6F4F           50                         push	ax
27188                                           ! Debug: list int = const $40 (used reg = )
27189 6F50           B8                   0040  mov	ax,*$40
27190 6F53           50                         push	ax
27191                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27192 6F54           8B46         08            mov	ax,8[bp]
27193                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27194 6F57           05                   0022  add	ax,*$22
27195 6F5A           50                         push	ax
27196                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27197 6F5B           FF76         06            push	6[bp]
27198                                           ! Debug: func () void = memcpyb+0 (used reg = )
27199 6F5E           E8         0D7E            call	_memcpyb
27200 6F61           89EC                       mov	sp,bp
27201                                           !BCC_EOS
27202                                           ! 3923  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27203                                           ! Debug: list int = const $8A (used reg = )
27204 6F63           B8                   008A  mov	ax,#$8A
27205 6F66           50                         push	ax
27206                                           ! Debug: list int = const $40 (used reg = )
27207 6F67           B8                   0040  mov	ax,*$40
27208 6F6A           50                         push	ax
27209                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27210 6F6B           E8         0DD1            call	_read_byte
27211 6F6E           89EC                       mov	sp,bp
27212                                           ! Debug: list unsigned char = al+0 (used reg = )
27213 6F70           30E4                       xor	ah,ah
27214 6F72           50                         push	ax
27215                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27216 6F73           8B46         08            mov	ax,8[bp]
27217                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27218 6F76           05                   0025  add	ax,*$25
27219 6F79           50                         push	ax
27220                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27221 6F7A           FF76         06            push	6[bp]
27222                                           ! Debug: func () void = write_byte+0 (used reg = )
27223 6F7D           E8         0DE5            call	_write_byte
27224 6F80           89EC                       mov	sp,bp
27225                                           !BCC_EOS
27226                                           ! 3924  write_byte(ES,DI+0x26,0);
27227                                           ! Debug: list int = const 0 (used reg = )
27228 6F82           31C0                       xor	ax,ax
27229 6F84           50                         push	ax
27230                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27231 6F85           8B46         08            mov	ax,8[bp]
27232                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27233 6F88           05                   0026  add	ax,*$26
27234 6F8B           50                         push	ax
27235                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27236 6F8C           FF76         06            push	6[bp]
27237                                           ! Debug: func () void = write_byte+0 (used reg = )
27238 6F8F           E8         0DD3            call	_write_byte
27239 6F92           89EC                       mov	sp,bp
27240                                           !BCC_EOS
27241                                           ! 3925  write_byte(ES,DI+0x27,16);
27242                                           ! Debug: list int = const $10 (used reg = )
27243 6F94           B8                   0010  mov	ax,*$10
27244 6F97           50                         push	ax
27245                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27246 6F98           8B46         08            mov	ax,8[bp]
27247                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27248 6F9B           05                   0027  add	ax,*$27
27249 6F9E           50                         push	ax
27250                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27251 6F9F           FF76         06            push	6[bp]
27252                                           ! Debug: func () void = write_byte+0 (used reg = )
27253 6FA2           E8         0DC0            call	_write_byte
27254 6FA5           89EC                       mov	sp,bp
27255                                           !BCC_EOS
27256                                           ! 3926  write_byte(ES,DI+0x28,0);
27257                                           ! Debug: list int = const 0 (used reg = )
27258 6FA7           31C0                       xor	ax,ax
27259 6FA9           50                         push	ax
27260                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27261 6FAA           8B46         08            mov	ax,8[bp]
27262                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27263 6FAD           05                   0028  add	ax,*$28
27264 6FB0           50                         push	ax
27265                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27266 6FB1           FF76         06            push	6[bp]
27267                                           ! Debug: func () void = write_byte+0 (used reg = )
27268 6FB4           E8         0DAE            call	_write_byte
27269 6FB7           89EC                       mov	sp,bp
27270                                           !BCC_EOS
27271                                           ! 3927  write_byte(ES,DI+0x29,8);
27272                                           ! Debug: list int = const 8 (used reg = )
27273 6FB9           B8                   0008  mov	ax,*8
27274 6FBC           50                         push	ax
27275                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27276 6FBD           8B46         08            mov	ax,8[bp]
27277                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27278 6FC0           05                   0029  add	ax,*$29
27279 6FC3           50                         push	ax
27280                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27281 6FC4           FF76         06            push	6[bp]
27282                                           ! Debug: func () void = write_byte+0 (used reg = )
27283 6FC7           E8         0D9B            call	_write_byte
27284 6FCA           89EC                       mov	sp,bp
27285                                           !BCC_EOS
27286                                           ! 3928  write_byte(ES,DI+0x2a,2);
27287                                           ! Debug: list int = const 2 (used reg = )
27288 6FCC           B8                   0002  mov	ax,*2
27289 6FCF           50                         push	ax
27290                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27291 6FD0           8B46         08            mov	ax,8[bp]
27292                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27293 6FD3           05                   002A  add	ax,*$2A
27294 6FD6           50                         push	ax
27295                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27296 6FD7           FF76         06            push	6[bp]
27297                                           ! Debug: func () void = write_byte+0 (used reg = )
27298 6FDA           E8         0D88            call	_write_byte
27299 6FDD           89EC                       mov	sp,bp
27300                                           !BCC_EOS
27301                                           ! 3929  write_byte(ES,DI+0x2b,0);
27302                                           ! Debug: list int = const 0 (used reg = )
27303 6FDF           31C0                       xor	ax,ax
27304 6FE1           50                         push	ax
27305                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27306 6FE2           8B46         08            mov	ax,8[bp]
27307                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27308 6FE5           05                   002B  add	ax,*$2B
27309 6FE8           50                         push	ax
27310                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27311 6FE9           FF76         06            push	6[bp]
27312                                           ! Debug: func () void = write_byte+0 (used reg = )
27313 6FEC           E8         0D76            call	_write_byte
27314 6FEF           89EC                       mov	sp,bp
27315                                           !BCC_EOS
27316                                           ! 3930  write_byte(ES,DI+0x2c,0);
27317                                           ! Debug: list int = const 0 (used reg = )
27318 6FF1           31C0                       xor	ax,ax
27319 6FF3           50                         push	ax
27320                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27321 6FF4           8B46         08            mov	ax,8[bp]
27322                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27323 6FF7           05                   002C  add	ax,*$2C
27324 6FFA           50                         push	ax
27325                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27326 6FFB           FF76         06            push	6[bp]
27327                                           ! Debug: func () void = write_byte+0 (used reg = )
27328 6FFE           E8         0D64            call	_write_byte
27329 7001           89EC                       mov	sp,bp
27330                                           !BCC_EOS
27331                                           ! 3931  write_byte(ES,DI+0x31,3);
27332                                           ! Debug: list int = const 3 (used reg = )
27333 7003           B8                   0003  mov	ax,*3
27334 7006           50                         push	ax
27335                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27336 7007           8B46         08            mov	ax,8[bp]
27337                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27338 700A           05                   0031  add	ax,*$31
27339 700D           50                         push	ax
27340                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27341 700E           FF76         06            push	6[bp]
27342                                           ! Debug: func () void = write_byte+0 (used reg = )
27343 7011           E8         0D51            call	_write_byte
27344 7014           89EC                       mov	sp,bp
27345                                           !BCC_EOS
27346                                           ! 3932  write_byte(ES,DI+0x32,0);
27347                                           ! Debug: list int = const 0 (used reg = )
27348 7016           31C0                       xor	ax,ax
27349 7018           50                         push	ax
27350                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27351 7019           8B46         08            mov	ax,8[bp]
27352                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27353 701C           05                   0032  add	ax,*$32
27354 701F           50                         push	ax
27355                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27356 7020           FF76         06            push	6[bp]
27357                                           ! Debug: func () void = write_byte+0 (used reg = )
27358 7023           E8         0D3F            call	_write_byte
27359 7026           89EC                       mov	sp,bp
27360                                           !BCC_EOS
27361                                           ! 3933  memsetb(ES,DI+0x33,0,13);
27362                                           ! Debug: list int = const $D (used reg = )
27363 7028           B8                   000D  mov	ax,*$D
27364 702B           50                         push	ax
27365                                           ! Debug: list int = const 0 (used reg = )
27366 702C           31C0                       xor	ax,ax
27367 702E           50                         push	ax
27368                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27369 702F           8B46         08            mov	ax,8[bp]
27370                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27371 7032           05                   0033  add	ax,*$33
27372 7035           50                         push	ax
27373                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27374 7036           FF76         06            push	6[bp]
27375                                           ! Debug: func () void = memsetb+0 (used reg = )
27376 7039           E8         0C59            call	_memsetb
27377 703C           89EC                       mov	sp,bp
27378                                           !BCC_EOS
27379                                           ! 3934 }
27380 703E           5D                         pop	bp
27381 703F           C3                         ret
27382                                           ! 3935 static Bit16u biosfn_read_video_state_size2 (CX)
27383                                           ! Register BX used in function biosfn_read_state_info
27384                                           ! 3936      Bit16u CX;
27385                       00007040            _biosfn_read_video_state_size2:
27386                                           !BCC_EOS
27387                                           ! 3937 {
27388                                           ! 3938     Bit16u size;
27389                                           !BCC_EOS
27390                                           ! 3939     size = 0;
27391 7040           55                         push	bp
27392 7041           89E5                       mov	bp,sp
27393 7043           4C                         dec	sp
27394 7044           4C                         dec	sp
27395                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27396 7045           31C0                       xor	ax,ax
27397 7047           8946         FE            mov	-2[bp],ax
27398                                           !BCC_EOS
27399                                           ! 3940     if (CX & 1) {
27400                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27401 704A           8A46         04            mov	al,4[bp]
27402 704D           24                     01  and	al,*1
27403 704F           84C0                       test	al,al
27404 7051           74           09            je  	.256
27405                       00007053            .257:
27406                                           ! 3941         size += 0x46;
27407                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27408 7053           8B46         FE            mov	ax,-2[bp]
27409 7056           05                   0046  add	ax,*$46
27410 7059           8946         FE            mov	-2[bp],ax
27411                                           !BCC_EOS
27412                                           ! 3942     }
27413                                           ! 3943     if (CX & 2) {
27414                       0000705C            .256:
27415                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27416 705C           8A46         04            mov	al,4[bp]
27417 705F           24                     02  and	al,*2
27418 7061           84C0                       test	al,al
27419 7063           74           09            je  	.258
27420                       00007065            .259:
27421                                           ! 3944         size += (5 + 8 + 5) * 2 + 6;
27422                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27423 7065           8B46         FE            mov	ax,-2[bp]
27424 7068           05                   002A  add	ax,*$2A
27425 706B           8946         FE            mov	-2[bp],ax
27426                                           !BCC_EOS
27427                                           ! 3945     }
27428                                           ! 3946     if (CX & 4) {
27429                       0000706E            .258:
27430                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27431 706E           8A46         04            mov	al,4[bp]
27432 7071           24                     04  and	al,*4
27433 7073           84C0                       test	al,al
27434 7075           74           09            je  	.25A
27435                       00007077            .25B:
27436                                           ! 3947         size += 3 + 256 * 3 + 1;
27437                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27438 7077           8B46         FE            mov	ax,-2[bp]
27439 707A           05                   0304  add	ax,#$304
27440 707D           8946         FE            mov	-2[bp],ax
27441                                           !BCC_EOS
27442                                           ! 3948 }
27443                                           ! 3949     return size;
27444                       00007080            .25A:
27445 7080           8B46         FE            mov	ax,-2[bp]
27446 7083           89EC                       mov	sp,bp
27447 7085           5D                         pop	bp
27448 7086           C3                         ret
27449                                           !BCC_EOS
27450                                           ! 3950 }
27451                                           ! 3951 static void biosfn_read_video_state_size (CX, BX)
27452                                           ! 3952      Bit16u CX; Bit16u *BX;
27453                       00007087            _biosfn_read_video_state_size:
27454                                           !BCC_EOS
27455                                           !BCC_EOS
27456                                           ! 3953 {
27457                                           ! 3954     Bit16u ss=get_SS();
27458 7087           55                         push	bp
27459 7088           89E5                       mov	bp,sp
27460 708A           4C                         dec	sp
27461 708B           4C                         dec	sp
27462                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27463 708C           E8         0D3C            call	_get_SS
27464                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27465 708F           8946         FE            mov	-2[bp],ax
27466                                           !BCC_EOS
27467                                           ! 3955     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27468                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27469 7092           FF76         04            push	4[bp]
27470                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27471 7095           E8         FFA8            call	_biosfn_read_video_state_size2
27472 7098           44                         inc	sp
27473 7099           44                         inc	sp
27474                                           ! Debug: list unsigned short = ax+0 (used reg = )
27475 709A           50                         push	ax
27476                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27477 709B           FF76         06            push	6[bp]
27478                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27479 709E           FF76         FE            push	-2[bp]
27480                                           ! Debug: func () void = write_word+0 (used reg = )
27481 70A1           E8         0CD9            call	_write_word
27482 70A4           83C4                   06  add	sp,*6
27483                                           !BCC_EOS
27484                                           ! 3956 }
27485 70A7           89EC                       mov	sp,bp
27486 70A9           5D                         pop	bp
27487 70AA           C3                         ret
27488                                           ! 3957 static Bit16u biosfn_save_video_state (CX,ES,BX)
27489                                           ! 3958      Bit16u CX;Bit16u ES;Bit16u BX;
27490                       000070AB            _biosfn_save_video_state:
27491                                           !BCC_EOS
27492                                           !BCC_EOS
27493                                           !BCC_EOS
27494                                           ! 3959 {
27495                                           ! 3960     Bit16u i, v, crtc_addr, ar_index;
27496                                           !BCC_EOS
27497                                           ! 3961     crtc_addr = read_word(0x40, 0x63);
27498 70AB           55                         push	bp
27499 70AC           89E5                       mov	bp,sp
27500 70AE           83C4                   F8  add	sp,*-8
27501                                           ! Debug: list int = const $63 (used reg = )
27502 70B1           B8                   0063  mov	ax,*$63
27503 70B4           50                         push	ax
27504                                           ! Debug: list int = const $40 (used reg = )
27505 70B5           B8                   0040  mov	ax,*$40
27506 70B8           50                         push	ax
27507                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27508 70B9           E8         0C96            call	_read_word
27509 70BC           83C4                   04  add	sp,*4
27510                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27511 70BF           8946         FA            mov	-6[bp],ax
27512                                           !BCC_EOS
27513                                           ! 3962     if (CX & 1) {
27514                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27515 70C2           8A46         04            mov	al,4[bp]
27516 70C5           24                     01  and	al,*1
27517 70C7           84C0                       test	al,al
27518 70C9         0F84         0266            beq 	.25C
27519                       000070CD            .25D:
27520                                           ! 3963         write_byte(ES, BX, inb(0x3c4)); BX++;
27521                                           ! Debug: list int = const $3C4 (used reg = )
27522 70CD           B8                   03C4  mov	ax,#$3C4
27523 70D0           50                         push	ax
27524                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27525 70D1           E8         0CC1            call	_inb
27526 70D4           44                         inc	sp
27527 70D5           44                         inc	sp
27528                                           ! Debug: list unsigned char = al+0 (used reg = )
27529 70D6           30E4                       xor	ah,ah
27530 70D8           50                         push	ax
27531                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27532 70D9           FF76         08            push	8[bp]
27533                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27534 70DC           FF76         06            push	6[bp]
27535                                           ! Debug: func () void = write_byte+0 (used reg = )
27536 70DF           E8         0C83            call	_write_byte
27537 70E2           83C4                   06  add	sp,*6
27538                                           !BCC_EOS
27539                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27540 70E5           8B46         08            mov	ax,8[bp]
27541 70E8           40                         inc	ax
27542 70E9           8946         08            mov	8[bp],ax
27543                                           !BCC_EOS
27544                                           ! 3964         write_byte(ES, BX, inb(crtc_addr)); BX++;
27545                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27546 70EC           FF76         FA            push	-6[bp]
27547                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27548 70EF           E8         0CA3            call	_inb
27549 70F2           44                         inc	sp
27550 70F3           44                         inc	sp
27551                                           ! Debug: list unsigned char = al+0 (used reg = )
27552 70F4           30E4                       xor	ah,ah
27553 70F6           50                         push	ax
27554                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27555 70F7           FF76         08            push	8[bp]
27556                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27557 70FA           FF76         06            push	6[bp]
27558                                           ! Debug: func () void = write_byte+0 (used reg = )
27559 70FD           E8         0C65            call	_write_byte
27560 7100           83C4                   06  add	sp,*6
27561                                           !BCC_EOS
27562                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27563 7103           8B46         08            mov	ax,8[bp]
27564 7106           40                         inc	ax
27565 7107           8946         08            mov	8[bp],ax
27566                                           !BCC_EOS
27567                                           ! 3965         write_byte(ES, BX, inb(0x3ce)); BX++;
27568                                           ! Debug: list int = const $3CE (used reg = )
27569 710A           B8                   03CE  mov	ax,#$3CE
27570 710D           50                         push	ax
27571                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27572 710E           E8         0C84            call	_inb
27573 7111           44                         inc	sp
27574 7112           44                         inc	sp
27575                                           ! Debug: list unsigned char = al+0 (used reg = )
27576 7113           30E4                       xor	ah,ah
27577 7115           50                         push	ax
27578                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27579 7116           FF76         08            push	8[bp]
27580                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27581 7119           FF76         06            push	6[bp]
27582                                           ! Debug: func () void = write_byte+0 (used reg = )
27583 711C           E8         0C46            call	_write_byte
27584 711F           83C4                   06  add	sp,*6
27585                                           !BCC_EOS
27586                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27587 7122           8B46         08            mov	ax,8[bp]
27588 7125           40                         inc	ax
27589 7126           8946         08            mov	8[bp],ax
27590                                           !BCC_EOS
27591                                           ! 3966         inb(0x3da);
27592                                           ! Debug: list int = const $3DA (used reg = )
27593 7129           B8                   03DA  mov	ax,#$3DA
27594 712C           50                         push	ax
27595                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27596 712D           E8         0C65            call	_inb
27597 7130           44                         inc	sp
27598 7131           44                         inc	sp
27599                                           !BCC_EOS
27600                                           ! 3967         ar_index = inb(0x3c0);
27601                                           ! Debug: list int = const $3C0 (used reg = )
27602 7132           B8                   03C0  mov	ax,#$3C0
27603 7135           50                         push	ax
27604                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27605 7136           E8         0C5C            call	_inb
27606 7139           44                         inc	sp
27607 713A           44                         inc	sp
27608                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27609 713B           30E4                       xor	ah,ah
27610 713D           8946         F8            mov	-8[bp],ax
27611                                           !BCC_EOS
27612                                           ! 3968         write_byte(ES, BX, ar_index); BX++;
27613                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27614 7140           FF76         F8            push	-8[bp]
27615                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27616 7143           FF76         08            push	8[bp]
27617                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27618 7146           FF76         06            push	6[bp]
27619                                           ! Debug: func () void = write_byte+0 (used reg = )
27620 7149           E8         0C19            call	_write_byte
27621 714C           83C4                   06  add	sp,*6
27622                                           !BCC_EOS
27623                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27624 714F           8B46         08            mov	ax,8[bp]
27625 7152           40                         inc	ax
27626 7153           8946         08            mov	8[bp],ax
27627                                           !BCC_EOS
27628                                           ! 3969         write_byte(ES, BX, inb(0x3ca)); BX++;
27629                                           ! Debug: list int = const $3CA (used reg = )
27630 7156           B8                   03CA  mov	ax,#$3CA
27631 7159           50                         push	ax
27632                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27633 715A           E8         0C38            call	_inb
27634 715D           44                         inc	sp
27635 715E           44                         inc	sp
27636                                           ! Debug: list unsigned char = al+0 (used reg = )
27637 715F           30E4                       xor	ah,ah
27638 7161           50                         push	ax
27639                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27640 7162           FF76         08            push	8[bp]
27641                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27642 7165           FF76         06            push	6[bp]
27643                                           ! Debug: func () void = write_byte+0 (used reg = )
27644 7168           E8         0BFA            call	_write_byte
27645 716B           83C4                   06  add	sp,*6
27646                                           !BCC_EOS
27647                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27648 716E           8B46         08            mov	ax,8[bp]
27649 7171           40                         inc	ax
27650 7172           8946         08            mov	8[bp],ax
27651                                           !BCC_EOS
27652                                           ! 3970         for(i=1;i<=4;i++){
27653                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27654 7175           B8                   0001  mov	ax,*1
27655 7178           8946         FE            mov	-2[bp],ax
27656                                           !BCC_EOS
27657                                           !BCC_EOS
27658 717B           EB           33            jmp .260
27659                       0000717D            .261:
27660                                           ! 3971             outb(0x3c4, i);
27661                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27662 717D           FF76         FE            push	-2[bp]
27663                                           ! Debug: list int = const $3C4 (used reg = )
27664 7180           B8                   03C4  mov	ax,#$3C4
27665 7183           50                         push	ax
27666                                           ! Debug: func () void = outb+0 (used reg = )
27667 7184           E8         0C24            call	_outb
27668 7187           83C4                   04  add	sp,*4
27669                                           !BCC_EOS
27670                                           ! 3972             write_byte(ES, BX, inb(0x3c5)); BX++;
27671                                           ! Debug: list int = const $3C5 (used reg = )
27672 718A           B8                   03C5  mov	ax,#$3C5
27673 718D           50                         push	ax
27674                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27675 718E           E8         0C04            call	_inb
27676 7191           44                         inc	sp
27677 7192           44                         inc	sp
27678                                           ! Debug: list unsigned char = al+0 (used reg = )
27679 7193           30E4                       xor	ah,ah
27680 7195           50                         push	ax
27681                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27682 7196           FF76         08            push	8[bp]
27683                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27684 7199           FF76         06            push	6[bp]
27685                                           ! Debug: func () void = write_byte+0 (used reg = )
27686 719C           E8         0BC6            call	_write_byte
27687 719F           83C4                   06  add	sp,*6
27688                                           !BCC_EOS
27689                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27690 71A2           8B46         08            mov	ax,8[bp]
27691 71A5           40                         inc	ax
27692 71A6           8946         08            mov	8[bp],ax
27693                                           !BCC_EOS
27694                                           ! 3973         }
27695                                           ! 3974         outb(0x3c4, 0);
27696                       000071A9            .25F:
27697                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27698 71A9           8B46         FE            mov	ax,-2[bp]
27699 71AC           40                         inc	ax
27700 71AD           8946         FE            mov	-2[bp],ax
27701                       000071B0            .260:
27702                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27703 71B0           8B46         FE            mov	ax,-2[bp]
27704 71B3           3D                   0004  cmp	ax,*4
27705 71B6           76           C5            jbe	.261
27706                       000071B8            .262:
27707                       000071B8            .25E:
27708                                           ! Debug: list int = const 0 (used reg = )
27709 71B8           31C0                       xor	ax,ax
27710 71BA           50                         push	ax
27711                                           ! Debug: list int = const $3C4 (used reg = )
27712 71BB           B8                   03C4  mov	ax,#$3C4
27713 71BE           50                         push	ax
27714                                           ! Debug: func () void = outb+0 (used reg = )
27715 71BF           E8         0BE9            call	_outb
27716 71C2           83C4                   04  add	sp,*4
27717                                           !BCC_EOS
27718                                           ! 3975         write_byte(ES, BX, inb(0x3c5)); BX++;
27719                                           ! Debug: list int = const $3C5 (used reg = )
27720 71C5           B8                   03C5  mov	ax,#$3C5
27721 71C8           50                         push	ax
27722                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27723 71C9           E8         0BC9            call	_inb
27724 71CC           44                         inc	sp
27725 71CD           44                         inc	sp
27726                                           ! Debug: list unsigned char = al+0 (used reg = )
27727 71CE           30E4                       xor	ah,ah
27728 71D0           50                         push	ax
27729                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27730 71D1           FF76         08            push	8[bp]
27731                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27732 71D4           FF76         06            push	6[bp]
27733                                           ! Debug: func () void = write_byte+0 (used reg = )
27734 71D7           E8         0B8B            call	_write_byte
27735 71DA           83C4                   06  add	sp,*6
27736                                           !BCC_EOS
27737                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27738 71DD           8B46         08            mov	ax,8[bp]
27739 71E0           40                         inc	ax
27740 71E1           8946         08            mov	8[bp],ax
27741                                           !BCC_EOS
27742                                           ! 3976         for(i=0;i<=0x18;i++) {
27743                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27744 71E4           31C0                       xor	ax,ax
27745 71E6           8946         FE            mov	-2[bp],ax
27746                                           !BCC_EOS
27747                                           !BCC_EOS
27748 71E9           EB           33            jmp .265
27749                       000071EB            .266:
27750                                           ! 3977             outb(crtc_addr,i);
27751                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27752 71EB           FF76         FE            push	-2[bp]
27753                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27754 71EE           FF76         FA            push	-6[bp]
27755                                           ! Debug: func () void = outb+0 (used reg = )
27756 71F1           E8         0BB7            call	_outb
27757 71F4           83C4                   04  add	sp,*4
27758                                           !BCC_EOS
27759                                           ! 3978             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27760                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27761 71F7           8B46         FA            mov	ax,-6[bp]
27762                                           ! Debug: list unsigned int = ax+1 (used reg = )
27763 71FA           40                         inc	ax
27764 71FB           50                         push	ax
27765                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27766 71FC           E8         0B96            call	_inb
27767 71FF           44                         inc	sp
27768 7200           44                         inc	sp
27769                                           ! Debug: list unsigned char = al+0 (used reg = )
27770 7201           30E4                       xor	ah,ah
27771 7203           50                         push	ax
27772                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27773 7204           FF76         08            push	8[bp]
27774                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27775 7207           FF76         06            push	6[bp]
27776                                           ! Debug: func () void = write_byte+0 (used reg = )
27777 720A           E8         0B58            call	_write_byte
27778 720D           83C4                   06  add	sp,*6
27779                                           !BCC_EOS
27780                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27781 7210           8B46         08            mov	ax,8[bp]
27782 7213           40                         inc	ax
27783 7214           8946         08            mov	8[bp],ax
27784                                           !BCC_EOS
27785                                           ! 3979         }
27786                                           ! 3980         for(i=0;i<=0x13;i++) {
27787                       00007217            .264:
27788                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27789 7217           8B46         FE            mov	ax,-2[bp]
27790 721A           40                         inc	ax
27791 721B           8946         FE            mov	-2[bp],ax
27792                       0000721E            .265:
27793                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27794 721E           8B46         FE            mov	ax,-2[bp]
27795 7221           3D                   0018  cmp	ax,*$18
27796 7224           76           C5            jbe	.266
27797                       00007226            .267:
27798                       00007226            .263:
27799                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27800 7226           31C0                       xor	ax,ax
27801 7228           8946         FE            mov	-2[bp],ax
27802                                           !BCC_EOS
27803                                           !BCC_EOS
27804 722B           EB           44            jmp .26A
27805                       0000722D            .26B:
27806                                           ! 3981             inb(0x3da);
27807                                           ! Debug: list int = const $3DA (used reg = )
27808 722D           B8                   03DA  mov	ax,#$3DA
27809 7230           50                         push	ax
27810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27811 7231           E8         0B61            call	_inb
27812 7234           44                         inc	sp
27813 7235           44                         inc	sp
27814                                           !BCC_EOS
27815                                           ! 3982             outb(0x3c0, i | (ar_index & 0x20));
27816                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27817 7236           8A46         F8            mov	al,-8[bp]
27818 7239           24                     20  and	al,*$20
27819                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27820                                           ! Debug: expression subtree swapping
27821 723B           30E4                       xor	ah,ah
27822 723D           0B46         FE            or	ax,-2[bp]
27823                                           ! Debug: list unsigned int = ax+0 (used reg = )
27824 7240           50                         push	ax
27825                                           ! Debug: list int = const $3C0 (used reg = )
27826 7241           B8                   03C0  mov	ax,#$3C0
27827 7244           50                         push	ax
27828                                           ! Debug: func () void = outb+0 (used reg = )
27829 7245           E8         0B63            call	_outb
27830 7248           83C4                   04  add	sp,*4
27831                                           !BCC_EOS
27832                                           ! 3983             write_byte(ES, BX, inb(0x3c1)); BX++;
27833                                           ! Debug: list int = const $3C1 (used reg = )
27834 724B           B8                   03C1  mov	ax,#$3C1
27835 724E           50                         push	ax
27836                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27837 724F           E8         0B43            call	_inb
27838 7252           44                         inc	sp
27839 7253           44                         inc	sp
27840                                           ! Debug: list unsigned char = al+0 (used reg = )
27841 7254           30E4                       xor	ah,ah
27842 7256           50                         push	ax
27843                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27844 7257           FF76         08            push	8[bp]
27845                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27846 725A           FF76         06            push	6[bp]
27847                                           ! Debug: func () void = write_byte+0 (used reg = )
27848 725D           E8         0B05            call	_write_byte
27849 7260           83C4                   06  add	sp,*6
27850                                           !BCC_EOS
27851                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27852 7263           8B46         08            mov	ax,8[bp]
27853 7266           40                         inc	ax
27854 7267           8946         08            mov	8[bp],ax
27855                                           !BCC_EOS
27856                                           ! 3984         }
27857                                           ! 3985         inb(0x3da);
27858                       0000726A            .269:
27859                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27860 726A           8B46         FE            mov	ax,-2[bp]
27861 726D           40                         inc	ax
27862 726E           8946         FE            mov	-2[bp],ax
27863                       00007271            .26A:
27864                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27865 7271           8B46         FE            mov	ax,-2[bp]
27866 7274           3D                   0013  cmp	ax,*$13
27867 7277           76           B4            jbe	.26B
27868                       00007279            .26C:
27869                       00007279            .268:
27870                                           ! Debug: list int = const $3DA (used reg = )
27871 7279           B8                   03DA  mov	ax,#$3DA
27872 727C           50                         push	ax
27873                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27874 727D           E8         0B15            call	_inb
27875 7280           44                         inc	sp
27876 7281           44                         inc	sp
27877                                           !BCC_EOS
27878                                           ! 3986         for(i=0;i<=8;i++) {
27879                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27880 7282           31C0                       xor	ax,ax
27881 7284           8946         FE            mov	-2[bp],ax
27882                                           !BCC_EOS
27883                                           !BCC_EOS
27884 7287           EB           33            jmp .26F
27885                       00007289            .270:
27886                                           ! 3987             outb(0x3ce,i);
27887                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27888 7289           FF76         FE            push	-2[bp]
27889                                           ! Debug: list int = const $3CE (used reg = )
27890 728C           B8                   03CE  mov	ax,#$3CE
27891 728F           50                         push	ax
27892                                           ! Debug: func () void = outb+0 (used reg = )
27893 7290           E8         0B18            call	_outb
27894 7293           83C4                   04  add	sp,*4
27895                                           !BCC_EOS
27896                                           ! 3988             write_byte(ES, BX,
27897                                           ! 3988  inb(0x3cf)); BX++;
27898                                           ! Debug: list int = const $3CF (used reg = )
27899 7296           B8                   03CF  mov	ax,#$3CF
27900 7299           50                         push	ax
27901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27902 729A           E8         0AF8            call	_inb
27903 729D           44                         inc	sp
27904 729E           44                         inc	sp
27905                                           ! Debug: list unsigned char = al+0 (used reg = )
27906 729F           30E4                       xor	ah,ah
27907 72A1           50                         push	ax
27908                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27909 72A2           FF76         08            push	8[bp]
27910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27911 72A5           FF76         06            push	6[bp]
27912                                           ! Debug: func () void = write_byte+0 (used reg = )
27913 72A8           E8         0ABA            call	_write_byte
27914 72AB           83C4                   06  add	sp,*6
27915                                           !BCC_EOS
27916                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27917 72AE           8B46         08            mov	ax,8[bp]
27918 72B1           40                         inc	ax
27919 72B2           8946         08            mov	8[bp],ax
27920                                           !BCC_EOS
27921                                           ! 3989         }
27922                                           ! 3990         write_word(ES, BX, crtc_addr); BX+= 2;
27923                       000072B5            .26E:
27924                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27925 72B5           8B46         FE            mov	ax,-2[bp]
27926 72B8           40                         inc	ax
27927 72B9           8946         FE            mov	-2[bp],ax
27928                       000072BC            .26F:
27929                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27930 72BC           8B46         FE            mov	ax,-2[bp]
27931 72BF           3D                   0008  cmp	ax,*8
27932 72C2           76           C5            jbe	.270
27933                       000072C4            .271:
27934                       000072C4            .26D:
27935                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27936 72C4           FF76         FA            push	-6[bp]
27937                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27938 72C7           FF76         08            push	8[bp]
27939                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27940 72CA           FF76         06            push	6[bp]
27941                                           ! Debug: func () void = write_word+0 (used reg = )
27942 72CD           E8         0AAD            call	_write_word
27943 72D0           83C4                   06  add	sp,*6
27944                                           !BCC_EOS
27945                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27946 72D3           8B46         08            mov	ax,8[bp]
27947 72D6           40                         inc	ax
27948 72D7           40                         inc	ax
27949 72D8           8946         08            mov	8[bp],ax
27950                                           !BCC_EOS
27951                                           ! 3991         write_byte(ES, BX, 0); BX++;
27952                                           ! Debug: list int = const 0 (used reg = )
27953 72DB           31C0                       xor	ax,ax
27954 72DD           50                         push	ax
27955                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27956 72DE           FF76         08            push	8[bp]
27957                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27958 72E1           FF76         06            push	6[bp]
27959                                           ! Debug: func () void = write_byte+0 (used reg = )
27960 72E4           E8         0A7E            call	_write_byte
27961 72E7           83C4                   06  add	sp,*6
27962                                           !BCC_EOS
27963                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27964 72EA           8B46         08            mov	ax,8[bp]
27965 72ED           40                         inc	ax
27966 72EE           8946         08            mov	8[bp],ax
27967                                           !BCC_EOS
27968                                           ! 3992         write_byte(ES, BX, 0); BX++;
27969                                           ! Debug: list int = const 0 (used reg = )
27970 72F1           31C0                       xor	ax,ax
27971 72F3           50                         push	ax
27972                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27973 72F4           FF76         08            push	8[bp]
27974                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27975 72F7           FF76         06            push	6[bp]
27976                                           ! Debug: func () void = write_byte+0 (used reg = )
27977 72FA           E8         0A68            call	_write_byte
27978 72FD           83C4                   06  add	sp,*6
27979                                           !BCC_EOS
27980                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27981 7300           8B46         08            mov	ax,8[bp]
27982 7303           40                         inc	ax
27983 7304           8946         08            mov	8[bp],ax
27984                                           !BCC_EOS
27985                                           ! 3993         write_byte(ES, BX, 0); BX++;
27986                                           ! Debug: list int = const 0 (used reg = )
27987 7307           31C0                       xor	ax,ax
27988 7309           50                         push	ax
27989                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27990 730A           FF76         08            push	8[bp]
27991                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27992 730D           FF76         06            push	6[bp]
27993                                           ! Debug: func () void = write_byte+0 (used reg = )
27994 7310           E8         0A52            call	_write_byte
27995 7313           83C4                   06  add	sp,*6
27996                                           !BCC_EOS
27997                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27998 7316           8B46         08            mov	ax,8[bp]
27999 7319           40                         inc	ax
28000 731A           8946         08            mov	8[bp],ax
28001                                           !BCC_EOS
28002                                           ! 3994         write_byte(ES, BX, 0); BX++;
28003                                           ! Debug: list int = const 0 (used reg = )
28004 731D           31C0                       xor	ax,ax
28005 731F           50                         push	ax
28006                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28007 7320           FF76         08            push	8[bp]
28008                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28009 7323           FF76         06            push	6[bp]
28010                                           ! Debug: func () void = write_byte+0 (used reg = )
28011 7326           E8         0A3C            call	_write_byte
28012 7329           83C4                   06  add	sp,*6
28013                                           !BCC_EOS
28014                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28015 732C           8B46         08            mov	ax,8[bp]
28016 732F           40                         inc	ax
28017 7330           8946         08            mov	8[bp],ax
28018                                           !BCC_EOS
28019                                           ! 3995     }
28020                                           ! 3996     if (CX & 2) {
28021                       00007333            .25C:
28022                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
28023 7333           8A46         04            mov	al,4[bp]
28024 7336           24                     02  and	al,*2
28025 7338           84C0                       test	al,al
28026 733A         0F84         0270            beq 	.272
28027                       0000733E            .273:
28028                                           ! 3997         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28029                                           ! Debug: list int = const $49 (used reg = )
28030 733E           B8                   0049  mov	ax,*$49
28031 7341           50                         push	ax
28032                                           ! Debug: list int = const $40 (used reg = )
28033 7342           B8                   0040  mov	ax,*$40
28034 7345           50                         push	ax
28035                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28036 7346           E8         09F6            call	_read_byte
28037 7349           83C4                   04  add	sp,*4
28038                                           ! Debug: list unsigned char = al+0 (used reg = )
28039 734C           30E4                       xor	ah,ah
28040 734E           50                         push	ax
28041                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28042 734F           FF76         08            push	8[bp]
28043                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28044 7352           FF76         06            push	6[bp]
28045                                           ! Debug: func () void = write_byte+0 (used reg = )
28046 7355           E8         0A0D            call	_write_byte
28047 7358           83C4                   06  add	sp,*6
28048                                           !BCC_EOS
28049                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28050 735B           8B46         08            mov	ax,8[bp]
28051 735E           40                         inc	ax
28052 735F           8946         08            mov	8[bp],ax
28053                                           !BCC_EOS
28054                                           ! 3998         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28055                                           ! Debug: list int = const $4A (used reg = )
28056 7362           B8                   004A  mov	ax,*$4A
28057 7365           50                         push	ax
28058                                           ! Debug: list int = const $40 (used reg = )
28059 7366           B8                   0040  mov	ax,*$40
28060 7369           50                         push	ax
28061                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28062 736A           E8         09E5            call	_read_word
28063 736D           83C4                   04  add	sp,*4
28064                                           ! Debug: list unsigned short = ax+0 (used reg = )
28065 7370           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 7371           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 7374           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_word+0 (used reg = )
28071 7377           E8         0A03            call	_write_word
28072 737A           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28075 737D           8B46         08            mov	ax,8[bp]
28076 7380           40                         inc	ax
28077 7381           40                         inc	ax
28078 7382           8946         08            mov	8[bp],ax
28079                                           !BCC_EOS
28080                                           ! 3999         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28081                                           ! Debug: list int = const $4C (used reg = )
28082 7385           B8                   004C  mov	ax,*$4C
28083 7388           50                         push	ax
28084                                           ! Debug: list int = const $40 (used reg = )
28085 7389           B8                   0040  mov	ax,*$40
28086 738C           50                         push	ax
28087                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28088 738D           E8         09C2            call	_read_word
28089 7390           83C4                   04  add	sp,*4
28090                                           ! Debug: list unsigned short = ax+0 (used reg = )
28091 7393           50                         push	ax
28092                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28093 7394           FF76         08            push	8[bp]
28094                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28095 7397           FF76         06            push	6[bp]
28096                                           ! Debug: func () void = write_word+0 (used reg = )
28097 739A           E8         09E0            call	_write_word
28098 739D           83C4                   06  add	sp,*6
28099                                           !BCC_EOS
28100                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28101 73A0           8B46         08            mov	ax,8[bp]
28102 73A3           40                         inc	ax
28103 73A4           40                         inc	ax
28104 73A5           8946         08            mov	8[bp],ax
28105                                           !BCC_EOS
28106                                           ! 4000         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28107                                           ! Debug: list int = const $63 (used reg = )
28108 73A8           B8                   0063  mov	ax,*$63
28109 73AB           50                         push	ax
28110                                           ! Debug: list int = const $40 (used reg = )
28111 73AC           B8                   0040  mov	ax,*$40
28112 73AF           50                         push	ax
28113                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28114 73B0           E8         099F            call	_read_word
28115 73B3           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned short = ax+0 (used reg = )
28117 73B6           50                         push	ax
28118                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28119 73B7           FF76         08            push	8[bp]
28120                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28121 73BA           FF76         06            push	6[bp]
28122                                           ! Debug: func () void = write_word+0 (used reg = )
28123 73BD           E8         09BD            call	_write_word
28124 73C0           83C4                   06  add	sp,*6
28125                                           !BCC_EOS
28126                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28127 73C3           8B46         08            mov	ax,8[bp]
28128 73C6           40                         inc	ax
28129 73C7           40                         inc	ax
28130 73C8           8946         08            mov	8[bp],ax
28131                                           !BCC_EOS
28132                                           ! 4001         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28133                                           ! Debug: list int = const $84 (used reg = )
28134 73CB           B8                   0084  mov	ax,#$84
28135 73CE           50                         push	ax
28136                                           ! Debug: list int = const $40 (used reg = )
28137 73CF           B8                   0040  mov	ax,*$40
28138 73D2           50                         push	ax
28139                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28140 73D3           E8         0969            call	_read_byte
28141 73D6           83C4                   04  add	sp,*4
28142                                           ! Debug: list unsigned char = al+0 (used reg = )
28143 73D9           30E4                       xor	ah,ah
28144 73DB           50                         push	ax
28145                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28146 73DC           FF76         08            push	8[bp]
28147                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28148 73DF           FF76         06            push	6[bp]
28149                                           ! Debug: func () void = write_byte+0 (used reg = )
28150 73E2           E8         0980            call	_write_byte
28151 73E5           83C4                   06  add	sp,*6
28152                                           !BCC_EOS
28153                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28154 73E8           8B46         08            mov	ax,8[bp]
28155 73EB           40                         inc	ax
28156 73EC           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 4002         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28159                                           ! Debug: list int = const $85 (used reg = )
28160 73EF           B8                   0085  mov	ax,#$85
28161 73F2           50                         push	ax
28162                                           ! Debug: list int = const $40 (used reg = )
28163 73F3           B8                   0040  mov	ax,*$40
28164 73F6           50                         push	ax
28165                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28166 73F7           E8         0958            call	_read_word
28167 73FA           83C4                   04  add	sp,*4
28168                                           ! Debug: list unsigned short = ax+0 (used reg = )
28169 73FD           50                         push	ax
28170                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28171 73FE           FF76         08            push	8[bp]
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 7401           FF76         06            push	6[bp]
28174                                           ! Debug: func () void = write_word+0 (used reg = )
28175 7404           E8         0976            call	_write_word
28176 7407           83C4                   06  add	sp,*6
28177                                           !BCC_EOS
28178                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28179 740A           8B46         08            mov	ax,8[bp]
28180 740D           40                         inc	ax
28181 740E           40                         inc	ax
28182 740F           8946         08            mov	8[bp],ax
28183                                           !BCC_EOS
28184                                           ! 4003         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28185                                           ! Debug: list int = const $87 (used reg = )
28186 7412           B8                   0087  mov	ax,#$87
28187 7415           50                         push	ax
28188                                           ! Debug: list int = const $40 (used reg = )
28189 7416           B8                   0040  mov	ax,*$40
28190 7419           50                         push	ax
28191                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28192 741A           E8         0922            call	_read_byte
28193 741D           83C4                   04  add	sp,*4
28194                                           ! Debug: list unsigned char = al+0 (used reg = )
28195 7420           30E4                       xor	ah,ah
28196 7422           50                         push	ax
28197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28198 7423           FF76         08            push	8[bp]
28199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28200 7426           FF76         06            push	6[bp]
28201                                           ! Debug: func () void = write_byte+0 (used reg = )
28202 7429           E8         0939            call	_write_byte
28203 742C           83C4                   06  add	sp,*6
28204                                           !BCC_EOS
28205                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28206 742F           8B46         08            mov	ax,8[bp]
28207 7432           40                         inc	ax
28208 7433           8946         08            mov	8[bp],ax
28209                                           !BCC_EOS
28210                                           ! 4004         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28211                                           ! Debug: list int = const $88 (used reg = )
28212 7436           B8                   0088  mov	ax,#$88
28213 7439           50                         push	ax
28214                                           ! Debug: list int = const $40 (used reg = )
28215 743A           B8                   0040  mov	ax,*$40
28216 743D           50                         push	ax
28217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28218 743E           E8         08FE            call	_read_byte
28219 7441           83C4                   04  add	sp,*4
28220                                           ! Debug: list unsigned char = al+0 (used reg = )
28221 7444           30E4                       xor	ah,ah
28222 7446           50                         push	ax
28223                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28224 7447           FF76         08            push	8[bp]
28225                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28226 744A           FF76         06            push	6[bp]
28227                                           ! Debug: func () void = write_byte+0 (used reg = )
28228 744D           E8         0915            call	_write_byte
28229 7450           83C4                   06  add	sp,*6
28230                                           !BCC_EOS
28231                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28232 7453           8B46         08            mov	ax,8[bp]
28233 7456           40                         inc	ax
28234 7457           8946         08            mov	8[bp],ax
28235                                           !BCC_EOS
28236                                           ! 4005         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28237                                           ! Debug: list int = const $89 (used reg = )
28238 745A           B8                   0089  mov	ax,#$89
28239 745D           50                         push	ax
28240                                           ! Debug: list int = const $40 (used reg = )
28241 745E           B8                   0040  mov	ax,*$40
28242 7461           50                         push	ax
28243                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28244 7462           E8         08DA            call	_read_byte
28245 7465           83C4                   04  add	sp,*4
28246                                           ! Debug: list unsigned char = al+0 (used reg = )
28247 7468           30E4                       xor	ah,ah
28248 746A           50                         push	ax
28249                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28250 746B           FF76         08            push	8[bp]
28251                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28252 746E           FF76         06            push	6[bp]
28253                                           ! Debug: func () void = write_byte+0 (used reg = )
28254 7471           E8         08F1            call	_write_byte
28255 7474           83C4                   06  add	sp,*6
28256                                           !BCC_EOS
28257                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28258 7477           8B46         08            mov	ax,8[bp]
28259 747A           40                         inc	ax
28260 747B           8946         08            mov	8[bp],ax
28261                                           !BCC_EOS
28262                                           ! 4006         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28263                                           ! Debug: list int = const $60 (used reg = )
28264 747E           B8                   0060  mov	ax,*$60
28265 7481           50                         push	ax
28266                                           ! Debug: list int = const $40 (used reg = )
28267 7482           B8                   0040  mov	ax,*$40
28268 7485           50                         push	ax
28269                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28270 7486           E8         08C9            call	_read_word
28271 7489           83C4                   04  add	sp,*4
28272                                           ! Debug: list unsigned short = ax+0 (used reg = )
28273 748C           50                         push	ax
28274                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28275 748D           FF76         08            push	8[bp]
28276                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28277 7490           FF76         06            push	6[bp]
28278                                           ! Debug: func () void = write_word+0 (used reg = )
28279 7493           E8         08E7            call	_write_word
28280 7496           83C4                   06  add	sp,*6
28281                                           !BCC_EOS
28282                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28283 7499           8B46         08            mov	ax,8[bp]
28284 749C           40                         inc	ax
28285 749D           40                         inc	ax
28286 749E           8946         08            mov	8[bp],ax
28287                                           !BCC_EOS
28288                                           ! 4007         for(i=0;i<8;i++) {
28289                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28290 74A1           31C0                       xor	ax,ax
28291 74A3           8946         FE            mov	-2[bp],ax
28292                                           !BCC_EOS
28293                                           !BCC_EOS
28294 74A6           EB           2F            jmp .276
28295                       000074A8            .277:
28296                                           ! 4008             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28297                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28298                                           ! Debug: expression subtree swapping
28299 74A8           8B46         FE            mov	ax,-2[bp]
28300 74AB           D1E0                       shl	ax,*1
28301                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28302                                           ! Debug: expression subtree swapping
28303                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28304 74AD           05                   0050  add	ax,*$50
28305 74B0           50                         push	ax
28306                                           ! Debug: list int = const $40 (used reg = )
28307 74B1           B8                   0040  mov	ax,*$40
28308 74B4           50                         push	ax
28309                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28310 74B5           E8         089A            call	_read_word
28311 74B8           83C4                   04  add	sp,*4
28312                                           ! Debug: list unsigned short = ax+0 (used reg = )
28313 74BB           50                         push	ax
28314                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28315 74BC           FF76         08            push	8[bp]
28316                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28317 74BF           FF76         06            push	6[bp]
28318                                           ! Debug: func () void = write_word+0 (used reg = )
28319 74C2           E8         08B8            call	_write_word
28320 74C5           83C4                   06  add	sp,*6
28321                                           !BCC_EOS
28322                                           ! 4009             BX += 2;
28323                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28324 74C8           8B46         08            mov	ax,8[bp]
28325 74CB           40                         inc	ax
28326 74CC           40                         inc	ax
28327 74CD           8946         08            mov	8[bp],ax
28328                                           !BCC_EOS
28329                                           ! 4010         }
28330                                           ! 4011         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28331                       000074D0            .275:
28332                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28333 74D0           8B46         FE            mov	ax,-2[bp]
28334 74D3           40                         inc	ax
28335 74D4           8946         FE            mov	-2[bp],ax
28336                       000074D7            .276:
28337                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28338 74D7           8B46         FE            mov	ax,-2[bp]
28339 74DA           3D                   0008  cmp	ax,*8
28340 74DD           72           C9            jb 	.277
28341                       000074DF            .278:
28342                       000074DF            .274:
28343                                           ! Debug: list int = const $4E (used reg = )
28344 74DF           B8                   004E  mov	ax,*$4E
28345 74E2           50                         push	ax
28346                                           ! Debug: list int = const $40 (used reg = )
28347 74E3           B8                   0040  mov	ax,*$40
28348 74E6           50                         push	ax
28349                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28350 74E7           E8         0868            call	_read_word
28351 74EA           83C4                   04  add	sp,*4
28352                                           ! Debug: list unsigned short = ax+0 (used reg = )
28353 74ED           50                         push	ax
28354                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28355 74EE           FF76         08            push	8[bp]
28356                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28357 74F1           FF76         06            push	6[bp]
28358                                           ! Debug: func () void = write_word+0 (used reg = )
28359 74F4           E8         0886            call	_write_word
28360 74F7           83C4                   06  add	sp,*6
28361                                           !BCC_EOS
28362                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28363 74FA           8B46         08            mov	ax,8[bp]
28364 74FD           40                         inc	ax
28365 74FE           40                         inc	ax
28366 74FF           8946         08            mov	8[bp],ax
28367                                           !BCC_EOS
28368                                           ! 4012         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28369                                           ! Debug: list int = const $62 (used reg = )
28370 7502           B8                   0062  mov	ax,*$62
28371 7505           50                         push	ax
28372                                           ! Debug: list int = const $40 (used reg = )
28373 7506           B8                   0040  mov	ax,*$40
28374 7509           50                         push	ax
28375                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28376 750A           E8         0832            call	_read_byte
28377 750D           83C4                   04  add	sp,*4
28378                                           ! Debug: list unsigned char = al+0 (used reg = )
28379 7510           30E4                       xor	ah,ah
28380 7512           50                         push	ax
28381                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28382 7513           FF76         08            push	8[bp]
28383                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28384 7516           FF76         06            push	6[bp]
28385                                           ! Debug: func () void = write_byte+0 (used reg = )
28386 7519           E8         0849            call	_write_byte
28387 751C           83C4                   06  add	sp,*6
28388                                           !BCC_EOS
28389                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28390 751F           8B46         08            mov	ax,8[bp]
28391 7522           40                         inc	ax
28392 7523           8946         08            mov	8[bp],ax
28393                                           !BCC_EOS
28394                                           ! 4013         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28395                                           ! Debug: list int = const $7C (used reg = )
28396 7526           B8                   007C  mov	ax,*$7C
28397 7529           50                         push	ax
28398                                           ! Debug: list int = const 0 (used reg = )
28399 752A           31C0                       xor	ax,ax
28400 752C           50                         push	ax
28401                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28402 752D           E8         0822            call	_read_word
28403 7530           83C4                   04  add	sp,*4
28404                                           ! Debug: list unsigned short = ax+0 (used reg = )
28405 7533           50                         push	ax
28406                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28407 7534           FF76         08            push	8[bp]
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 7537           FF76         06            push	6[bp]
28410                                           ! Debug: func () void = write_word+0 (used reg = )
28411 753A           E8         0840            call	_write_word
28412 753D           83C4                   06  add	sp,*6
28413                                           !BCC_EOS
28414                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28415 7540           8B46         08            mov	ax,8[bp]
28416 7543           40                         inc	ax
28417 7544           40                         inc	ax
28418 7545           8946         08            mov	8[bp],ax
28419                                           !BCC_EOS
28420                                           ! 4014         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28421                                           ! Debug: list int = const $7E (used reg = )
28422 7548           B8                   007E  mov	ax,*$7E
28423 754B           50                         push	ax
28424                                           ! Debug: list int = const 0 (used reg = )
28425 754C           31C0                       xor	ax,ax
28426 754E           50                         push	ax
28427                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28428 754F           E8         0800            call	_read_word
28429 7552           83C4                   04  add	sp,*4
28430                                           ! Debug: list unsigned short = ax+0 (used reg = )
28431 7555           50                         push	ax
28432                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28433 7556           FF76         08            push	8[bp]
28434                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28435 7559           FF76         06            push	6[bp]
28436                                           ! Debug: func () void = write_word+0 (used reg = )
28437 755C           E8         081E            call	_write_word
28438 755F           83C4                   06  add	sp,*6
28439                                           !BCC_EOS
28440                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28441 7562           8B46         08            mov	ax,8[bp]
28442 7565           40                         inc	ax
28443 7566           40                         inc	ax
28444 7567           8946         08            mov	8[bp],ax
28445                                           !BCC_EOS
28446                                           ! 4015         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28447                                           ! Debug: list int = const $10C (used reg = )
28448 756A           B8                   010C  mov	ax,#$10C
28449 756D           50                         push	ax
28450                                           ! Debug: list int = const 0 (used reg = )
28451 756E           31C0                       xor	ax,ax
28452 7570           50                         push	ax
28453                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28454 7571           E8         07DE            call	_read_word
28455 7574           83C4                   04  add	sp,*4
28456                                           ! Debug: list unsigned short = ax+0 (used reg = )
28457 7577           50                         push	ax
28458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28459 7578           FF76         08            push	8[bp]
28460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28461 757B           FF76         06            push	6[bp]
28462                                           ! Debug: func () void = write_word+0 (used reg = )
28463 757E           E8         07FC            call	_write_word
28464 7581           83C4                   06  add	sp,*6
28465                                           !BCC_EOS
28466                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28467 7584           8B46         08            mov	ax,8[bp]
28468 7587           40                         inc	ax
28469 7588           40                         inc	ax
28470 7589           8946         08            mov	8[bp],ax
28471                                           !BCC_EOS
28472                                           ! 4016         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28473                                           ! Debug: list int = const $10E (used reg = )
28474 758C           B8                   010E  mov	ax,#$10E
28475 758F           50                         push	ax
28476                                           ! Debug: list int = const 0 (used reg = )
28477 7590           31C0                       xor	ax,ax
28478 7592           50                         push	ax
28479                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28480 7593           E8         07BC            call	_read_word
28481 7596           83C4                   04  add	sp,*4
28482                                           ! Debug: list unsigned short = ax+0 (used reg = )
28483 7599           50                         push	ax
28484                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28485 759A           FF76         08            push	8[bp]
28486                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28487 759D           FF76         06            push	6[bp]
28488                                           ! Debug: func () void = write_word+0 (used reg = )
28489 75A0           E8         07DA            call	_write_word
28490 75A3           83C4                   06  add	sp,*6
28491                                           !BCC_EOS
28492                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28493 75A6           8B46         08            mov	ax,8[bp]
28494 75A9           40                         inc	ax
28495 75AA           40                         inc	ax
28496 75AB           8946         08            mov	8[bp],ax
28497                                           !BCC_EOS
28498                                           ! 4017     }
28499                                           ! 4018     if (CX & 4) {
28500                       000075AE            .272:
28501                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28502 75AE           8A46         04            mov	al,4[bp]
28503 75B1           24                     04  and	al,*4
28504 75B3           84C0                       test	al,al
28505 75B5         0F84         00B5            beq 	.279
28506                       000075B9            .27A:
28507                                           ! 4019         write_byte(ES, BX, inb(0x3c7)); BX++;
28508                                           ! Debug: list int = const $3C7 (used reg = )
28509 75B9           B8                   03C7  mov	ax,#$3C7
28510 75BC           50                         push	ax
28511                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28512 75BD           E8         07D5            call	_inb
28513 75C0           44                         inc	sp
28514 75C1           44                         inc	sp
28515                                           ! Debug: list unsigned char = al+0 (used reg = )
28516 75C2           30E4                       xor	ah,ah
28517 75C4           50                         push	ax
28518                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28519 75C5           FF76         08            push	8[bp]
28520                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28521 75C8           FF76         06            push	6[bp]
28522                                           ! Debug: func () void = write_byte+0 (used reg = )
28523 75CB           E8         0797            call	_write_byte
28524 75CE           83C4                   06  add	sp,*6
28525                                           !BCC_EOS
28526                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28527 75D1           8B46         08            mov	ax,8[bp]
28528 75D4           40                         inc	ax
28529 75D5           8946         08            mov	8[bp],ax
28530                                           !BCC_EOS
28531                                           ! 4020         write_byte(ES, BX, inb(0x3c8)); BX++;
28532                                           ! Debug: list int = const $3C8 (used reg = )
28533 75D8           B8                   03C8  mov	ax,#$3C8
28534 75DB           50                         push	ax
28535                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28536 75DC           E8         07B6            call	_inb
28537 75DF           44                         inc	sp
28538 75E0           44                         inc	sp
28539                                           ! Debug: list unsigned char = al+0 (used reg = )
28540 75E1           30E4                       xor	ah,ah
28541 75E3           50                         push	ax
28542                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28543 75E4           FF76         08            push	8[bp]
28544                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28545 75E7           FF76         06            push	6[bp]
28546                                           ! Debug: func () void = write_byte+0 (used reg = )
28547 75EA           E8         0778            call	_write_byte
28548 75ED           83C4                   06  add	sp,*6
28549                                           !BCC_EOS
28550                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28551 75F0           8B46         08            mov	ax,8[bp]
28552 75F3           40                         inc	ax
28553 75F4           8946         08            mov	8[bp],ax
28554                                           !BCC_EOS
28555                                           ! 4021         write_byte(ES, BX, inb(0x3c6)); BX++;
28556                                           ! Debug: list int = const $3C6 (used reg = )
28557 75F7           B8                   03C6  mov	ax,#$3C6
28558 75FA           50                         push	ax
28559                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28560 75FB           E8         0797            call	_inb
28561 75FE           44                         inc	sp
28562 75FF           44                         inc	sp
28563                                           ! Debug: list unsigned char = al+0 (used reg = )
28564 7600           30E4                       xor	ah,ah
28565 7602           50                         push	ax
28566                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28567 7603           FF76         08            push	8[bp]
28568                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28569 7606           FF76         06            push	6[bp]
28570                                           ! Debug: func () void = write_byte+0 (used reg = )
28571 7609           E8         0759            call	_write_byte
28572 760C           83C4                   06  add	sp,*6
28573                                           !BCC_EOS
28574                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28575 760F           8B46         08            mov	ax,8[bp]
28576 7612           40                         inc	ax
28577 7613           8946         08            mov	8[bp],ax
28578                                           !BCC_EOS
28579                                           ! 4022         outb(0x3c8,0x00);
28580                                           ! Debug: list int = const 0 (used reg = )
28581 7616           31C0                       xor	ax,ax
28582 7618           50                         push	ax
28583                                           ! Debug: list int = const $3C8 (used reg = )
28584 7619           B8                   03C8  mov	ax,#$3C8
28585 761C           50                         push	ax
28586                                           ! Debug: func () void = outb+0 (used reg = )
28587 761D           E8         078B            call	_outb
28588 7620           83C4                   04  add	sp,*4
28589                                           !BCC_EOS
28590                                           ! 4023         for(i=0;i<256*3;i++) {
28591                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28592 7623           31C0                       xor	ax,ax
28593 7625           8946         FE            mov	-2[bp],ax
28594                                           !BCC_EOS
28595                                           !BCC_EOS
28596 7628           EB           26            jmp .27D
28597                       0000762A            .27E:
28598                                           ! 4024             write_byte(ES, BX, inb(0x3c9)); BX++;
28599                                           ! Debug: list int = const $3C9 (used reg = )
28600 762A           B8                   03C9  mov	ax,#$3C9
28601 762D           50                         push	ax
28602                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28603 762E           E8         0764            call	_inb
28604 7631           44                         inc	sp
28605 7632           44                         inc	sp
28606                                           ! Debug: list unsigned char = al+0 (used reg = )
28607 7633           30E4                       xor	ah,ah
28608 7635           50                         push	ax
28609                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28610 7636           FF76         08            push	8[bp]
28611                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28612 7639           FF76         06            push	6[bp]
28613                                           ! Debug: func () void = write_byte+0 (used reg = )
28614 763C           E8         0726            call	_write_byte
28615 763F           83C4                   06  add	sp,*6
28616                                           !BCC_EOS
28617                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28618 7642           8B46         08            mov	ax,8[bp]
28619 7645           40                         inc	ax
28620 7646           8946         08            mov	8[bp],ax
28621                                           !BCC_EOS
28622                                           ! 4025         }
28623                                           ! 4026         write_byte(ES, BX, 0); BX++;
28624                       00007649            .27C:
28625                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28626 7649           8B46         FE            mov	ax,-2[bp]
28627 764C           40                         inc	ax
28628 764D           8946         FE            mov	-2[bp],ax
28629                       00007650            .27D:
28630                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28631 7650           8B46         FE            mov	ax,-2[bp]
28632 7653           3D                   0300  cmp	ax,#$300
28633 7656           72           D2            jb 	.27E
28634                       00007658            .27F:
28635                       00007658            .27B:
28636                                           ! Debug: list int = const 0 (used reg = )
28637 7658           31C0                       xor	ax,ax
28638 765A           50                         push	ax
28639                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28640 765B           FF76         08            push	8[bp]
28641                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28642 765E           FF76         06            push	6[bp]
28643                                           ! Debug: func () void = write_byte+0 (used reg = )
28644 7661           E8         0701            call	_write_byte
28645 7664           83C4                   06  add	sp,*6
28646                                           !BCC_EOS
28647                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28648 7667           8B46         08            mov	ax,8[bp]
28649 766A           40                         inc	ax
28650 766B           8946         08            mov	8[bp],ax
28651                                           !BCC_EOS
28652                                           ! 4027     }
28653                                           ! 4028     return BX;
28654                       0000766E            .279:
28655 766E           8B46         08            mov	ax,8[bp]
28656 7671           89EC                       mov	sp,bp
28657 7673           5D                         pop	bp
28658 7674           C3                         ret
28659                                           !BCC_EOS
28660                                           ! 4029 }
28661                                           ! 4030 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28662                                           ! 4031      Bit16u CX;Bit16u ES;Bit16u BX;
28663                       00007675            _biosfn_restore_video_state:
28664                                           !BCC_EOS
28665                                           !BCC_EOS
28666                                           !BCC_EOS
28667                                           ! 4032 {
28668                                           ! 4033     Bit16u i, crtc_addr, v, addr1, ar_index;
28669                                           !BCC_EOS
28670                                           ! 4034     if (CX & 1) {
28671 7675           55                         push	bp
28672 7676           89E5                       mov	bp,sp
28673 7678           83C4                   F6  add	sp,*-$A
28674                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28675 767B           8A46         04            mov	al,4[bp]
28676 767E           24                     01  and	al,*1
28677 7680           84C0                       test	al,al
28678 7682         0F84         02AA            beq 	.280
28679                       00007686            .281:
28680                                           ! 4035         inb(0x3da);
28681                                           ! Debug: list int = const $3DA (used reg = )
28682 7686           B8                   03DA  mov	ax,#$3DA
28683 7689           50                         push	ax
28684                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28685 768A           E8         0708            call	_inb
28686 768D           44                         inc	sp
28687 768E           44                         inc	sp
28688                                           !BCC_EOS
28689                                           ! 4036         crtc_addr = read_word(ES, BX + 0x40);
28690                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28691 768F           8B46         08            mov	ax,8[bp]
28692                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28693 7692           05                   0040  add	ax,*$40
28694 7695           50                         push	ax
28695                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28696 7696           FF76         06            push	6[bp]
28697                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28698 7699           E8         06B6            call	_read_word
28699 769C           83C4                   04  add	sp,*4
28700                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28701 769F           8946         FC            mov	-4[bp],ax
28702                                           !BCC_EOS
28703                                           ! 4037         addr1 = BX;
28704                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28705 76A2           8B46         08            mov	ax,8[bp]
28706 76A5           8946         F8            mov	-8[bp],ax
28707                                           !BCC_EOS
28708                                           ! 4038         BX += 5;
28709                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28710 76A8           8B46         08            mov	ax,8[bp]
28711 76AB           05                   0005  add	ax,*5
28712 76AE           8946         08            mov	8[bp],ax
28713                                           !BCC_EOS
28714                                           ! 4039         for(i=1;i<=4;i++){
28715                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28716 76B1           B8                   0001  mov	ax,*1
28717 76B4           8946         FE            mov	-2[bp],ax
28718                                           !BCC_EOS
28719                                           !BCC_EOS
28720 76B7           EB           34            jmp .284
28721                       000076B9            .285:
28722                                           ! 4040             outb(0x3c4, i);
28723                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28724 76B9           FF76         FE            push	-2[bp]
28725                                           ! Debug: list int = const $3C4 (used reg = )
28726 76BC           B8                   03C4  mov	ax,#$3C4
28727 76BF           50                         push	ax
28728                                           ! Debug: func () void = outb+0 (used reg = )
28729 76C0           E8         06E8            call	_outb
28730 76C3           83C4                   04  add	sp,*4
28731                                           !BCC_EOS
28732                                           ! 4041             outb(0x3c5, read_byte(ES, BX)); BX++;
28733                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28734 76C6           FF76         08            push	8[bp]
28735                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28736 76C9           FF76         06            push	6[bp]
28737                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28738 76CC           E8         0670            call	_read_byte
28739 76CF           83C4                   04  add	sp,*4
28740                                           ! Debug: list unsigned char = al+0 (used reg = )
28741 76D2           30E4                       xor	ah,ah
28742 76D4           50                         push	ax
28743                                           ! Debug: list int = const $3C5 (used reg = )
28744 76D5           B8                   03C5  mov	ax,#$3C5
28745 76D8           50                         push	ax
28746                                           ! Debug: func () void = outb+0 (used reg = )
28747 76D9           E8         06CF            call	_outb
28748 76DC           83C4                   04  add	sp,*4
28749                                           !BCC_EOS
28750                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28751 76DF           8B46         08            mov	ax,8[bp]
28752 76E2           40                         inc	ax
28753 76E3           8946         08            mov	8[bp],ax
28754                                           !BCC_EOS
28755                                           ! 4042         }
28756                                           ! 4043         outb(0x3c4, 0);
28757                       000076E6            .283:
28758                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28759 76E6           8B46         FE            mov	ax,-2[bp]
28760 76E9           40                         inc	ax
28761 76EA           8946         FE            mov	-2[bp],ax
28762                       000076ED            .284:
28763                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28764 76ED           8B46         FE            mov	ax,-2[bp]
28765 76F0           3D                   0004  cmp	ax,*4
28766 76F3           76           C4            jbe	.285
28767                       000076F5            .286:
28768                       000076F5            .282:
28769                                           ! Debug: list int = const 0 (used reg = )
28770 76F5           31C0                       xor	ax,ax
28771 76F7           50                         push	ax
28772                                           ! Debug: list int = const $3C4 (used reg = )
28773 76F8           B8                   03C4  mov	ax,#$3C4
28774 76FB           50                         push	ax
28775                                           ! Debug: func () void = outb+0 (used reg = )
28776 76FC           E8         06AC            call	_outb
28777 76FF           83C4                   04  add	sp,*4
28778                                           !BCC_EOS
28779                                           ! 4044      
28780                                           ! 4044    outb(0x3c5, read_byte(ES, BX)); BX++;
28781                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28782 7702           FF76         08            push	8[bp]
28783                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28784 7705           FF76         06            push	6[bp]
28785                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28786 7708           E8         0634            call	_read_byte
28787 770B           83C4                   04  add	sp,*4
28788                                           ! Debug: list unsigned char = al+0 (used reg = )
28789 770E           30E4                       xor	ah,ah
28790 7710           50                         push	ax
28791                                           ! Debug: list int = const $3C5 (used reg = )
28792 7711           B8                   03C5  mov	ax,#$3C5
28793 7714           50                         push	ax
28794                                           ! Debug: func () void = outb+0 (used reg = )
28795 7715           E8         0693            call	_outb
28796 7718           83C4                   04  add	sp,*4
28797                                           !BCC_EOS
28798                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28799 771B           8B46         08            mov	ax,8[bp]
28800 771E           40                         inc	ax
28801 771F           8946         08            mov	8[bp],ax
28802                                           !BCC_EOS
28803                                           ! 4045         outw(crtc_addr,0x0011);
28804                                           ! Debug: list int = const $11 (used reg = )
28805 7722           B8                   0011  mov	ax,*$11
28806 7725           50                         push	ax
28807                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28808 7726           FF76         FC            push	-4[bp]
28809                                           ! Debug: func () void = outw+0 (used reg = )
28810 7729           E8         068F            call	_outw
28811 772C           83C4                   04  add	sp,*4
28812                                           !BCC_EOS
28813                                           ! 4046         for(i=0;i<=0x18;i++) {
28814                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28815 772F           31C0                       xor	ax,ax
28816 7731           8946         FE            mov	-2[bp],ax
28817                                           !BCC_EOS
28818                                           !BCC_EOS
28819 7734           EB           3C            jmp .289
28820                       00007736            .28A:
28821                                           ! 4047             if (i != 0x11) {
28822                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28823 7736           8B46         FE            mov	ax,-2[bp]
28824 7739           3D                   0011  cmp	ax,*$11
28825 773C           74           26            je  	.28B
28826                       0000773E            .28C:
28827                                           ! 4048                 outb(crtc_addr,i);
28828                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28829 773E           FF76         FE            push	-2[bp]
28830                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28831 7741           FF76         FC            push	-4[bp]
28832                                           ! Debug: func () void = outb+0 (used reg = )
28833 7744           E8         0664            call	_outb
28834 7747           83C4                   04  add	sp,*4
28835                                           !BCC_EOS
28836                                           ! 4049                 outb(crtc_addr+1, read_byte(ES, BX));
28837                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28838 774A           FF76         08            push	8[bp]
28839                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28840 774D           FF76         06            push	6[bp]
28841                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28842 7750           E8         05EC            call	_read_byte
28843 7753           83C4                   04  add	sp,*4
28844                                           ! Debug: list unsigned char = al+0 (used reg = )
28845 7756           30E4                       xor	ah,ah
28846 7758           50                         push	ax
28847                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28848 7759           8B46         FC            mov	ax,-4[bp]
28849                                           ! Debug: list unsigned int = ax+1 (used reg = )
28850 775C           40                         inc	ax
28851 775D           50                         push	ax
28852                                           ! Debug: func () void = outb+0 (used reg = )
28853 775E           E8         064A            call	_outb
28854 7761           83C4                   04  add	sp,*4
28855                                           !BCC_EOS
28856                                           ! 4050             }
28857                                           ! 4051             BX++;
28858                       00007764            .28B:
28859                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28860 7764           8B46         08            mov	ax,8[bp]
28861 7767           40                         inc	ax
28862 7768           8946         08            mov	8[bp],ax
28863                                           !BCC_EOS
28864                                           ! 4052         }
28865                                           ! 4053         v = inb(0x3cc) & ~0x01;
28866                       0000776B            .288:
28867                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28868 776B           8B46         FE            mov	ax,-2[bp]
28869 776E           40                         inc	ax
28870 776F           8946         FE            mov	-2[bp],ax
28871                       00007772            .289:
28872                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28873 7772           8B46         FE            mov	ax,-2[bp]
28874 7775           3D                   0018  cmp	ax,*$18
28875 7778           76           BC            jbe	.28A
28876                       0000777A            .28D:
28877                       0000777A            .287:
28878                                           ! Debug: list int = const $3CC (used reg = )
28879 777A           B8                   03CC  mov	ax,#$3CC
28880 777D           50                         push	ax
28881                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28882 777E           E8         0614            call	_inb
28883 7781           44                         inc	sp
28884 7782           44                         inc	sp
28885                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28886 7783           24                     FE  and	al,#$FE
28887                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28888 7785           30E4                       xor	ah,ah
28889 7787           8946         FA            mov	-6[bp],ax
28890                                           !BCC_EOS
28891                                           ! 4054         if (crtc_addr = 0x3d4)
28892                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28893 778A           B8                   03D4  mov	ax,#$3D4
28894 778D           8946         FC            mov	-4[bp],ax
28895 7790           85C0                       test	ax,ax
28896 7792           74           08            je  	.28E
28897                       00007794            .28F:
28898                                           ! 4055             v |= 0x01;
28899                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28900 7794           8B46         FA            mov	ax,-6[bp]
28901 7797           0C                     01  or	al,*1
28902 7799           8946         FA            mov	-6[bp],ax
28903                                           !BCC_EOS
28904                                           ! 4056         outb(0x3c2, v);
28905                       0000779C            .28E:
28906                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28907 779C           FF76         FA            push	-6[bp]
28908                                           ! Debug: list int = const $3C2 (used reg = )
28909 779F           B8                   03C2  mov	ax,#$3C2
28910 77A2           50                         push	ax
28911                                           ! Debug: func () void = outb+0 (used reg = )
28912 77A3           E8         0605            call	_outb
28913 77A6           83C4                   04  add	sp,*4
28914                                           !BCC_EOS
28915                                           ! 4057         outb(crtc_addr, 0x11);
28916                                           ! Debug: list int = const $11 (used reg = )
28917 77A9           B8                   0011  mov	ax,*$11
28918 77AC           50                         push	ax
28919                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28920 77AD           FF76         FC            push	-4[bp]
28921                                           ! Debug: func () void = outb+0 (used reg = )
28922 77B0           E8         05F8            call	_outb
28923 77B3           83C4                   04  add	sp,*4
28924                                           !BCC_EOS
28925                                           ! 4058         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28926                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28927 77B6           8B46         08            mov	ax,8[bp]
28928                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28929                                           ! Debug: list unsigned int = ax-7 (used reg = )
28930 77B9           05                   FFF9  add	ax,*-7
28931 77BC           50                         push	ax
28932                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28933 77BD           FF76         06            push	6[bp]
28934                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28935 77C0           E8         057C            call	_read_byte
28936 77C3           83C4                   04  add	sp,*4
28937                                           ! Debug: list unsigned char = al+0 (used reg = )
28938 77C6           30E4                       xor	ah,ah
28939 77C8           50                         push	ax
28940                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28941 77C9           8B46         FC            mov	ax,-4[bp]
28942                                           ! Debug: list unsigned int = ax+1 (used reg = )
28943 77CC           40                         inc	ax
28944 77CD           50                         push	ax
28945                                           ! Debug: func () void = outb+0 (used reg = )
28946 77CE           E8         05DA            call	_outb
28947 77D1           83C4                   04  add	sp,*4
28948                                           !BCC_EOS
28949                                           ! 4059         ar_index = read_byte(ES, addr1 + 0x03);
28950                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28951 77D4           8B46         F8            mov	ax,-8[bp]
28952                                           ! Debug: list unsigned int = ax+3 (used reg = )
28953 77D7           05                   0003  add	ax,*3
28954 77DA           50                         push	ax
28955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28956 77DB           FF76         06            push	6[bp]
28957                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28958 77DE           E8         055E            call	_read_byte
28959 77E1           83C4                   04  add	sp,*4
28960                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28961 77E4           30E4                       xor	ah,ah
28962 77E6           8946         F6            mov	-$A[bp],ax
28963                                           !BCC_EOS
28964                                           ! 4060         inb(0x3da);
28965                                           ! Debug: list int = const $3DA (used reg = )
28966 77E9           B8                   03DA  mov	ax,#$3DA
28967 77EC           50                         push	ax
28968                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28969 77ED           E8         05A5            call	_inb
28970 77F0           44                         inc	sp
28971 77F1           44                         inc	sp
28972                                           !BCC_EOS
28973                                           ! 4061         for(i=0;i<=0x13;i++) {
28974                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28975 77F2           31C0                       xor	ax,ax
28976 77F4           8946         FE            mov	-2[bp],ax
28977                                           !BCC_EOS
28978                                           !BCC_EOS
28979 77F7           EB           3C            jmp .292
28980                       000077F9            .293:
28981                                           ! 4062             outb(0x3c0, i | (ar_index & 0x20));
28982                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28983 77F9           8A46         F6            mov	al,-$A[bp]
28984 77FC           24                     20  and	al,*$20
28985                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28986                                           ! Debug: expression subtree swapping
28987 77FE           30E4                       xor	ah,ah
28988 7800           0B46         FE            or	ax,-2[bp]
28989                                           ! Debug: list unsigned int = ax+0 (used reg = )
28990 7803           50                         push	ax
28991                                           ! Debug: list int = const $3C0 (used reg = )
28992 7804           B8                   03C0  mov	ax,#$3C0
28993 7807           50                         push	ax
28994                                           ! Debug: func () void = outb+0 (used reg = )
28995 7808           E8         05A0            call	_outb
28996 780B           83C4                   04  add	sp,*4
28997                                           !BCC_EOS
28998                                           ! 4063             outb(0x3c0, read_byte(ES, BX)); BX++;
28999                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29000 780E           FF76         08            push	8[bp]
29001                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29002 7811           FF76         06            push	6[bp]
29003                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29004 7814           E8         0528            call	_read_byte
29005 7817           83C4                   04  add	sp,*4
29006                                           ! Debug: list unsigned char = al+0 (used reg = )
29007 781A           30E4                       xor	ah,ah
29008 781C           50                         push	ax
29009                                           ! Debug: list int = const $3C0 (used reg = )
29010 781D           B8                   03C0  mov	ax,#$3C0
29011 7820           50                         push	ax
29012                                           ! Debug: func () void = outb+0 (used reg = )
29013 7821           E8         0587            call	_outb
29014 7824           83C4                   04  add	sp,*4
29015                                           !BCC_EOS
29016                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29017 7827           8B46         08            mov	ax,8[bp]
29018 782A           40                         inc	ax
29019 782B           8946         08            mov	8[bp],ax
29020                                           !BCC_EOS
29021                                           ! 4064         }
29022                                           ! 4065         outb(0x3c0, ar_index);
29023                       0000782E            .291:
29024                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29025 782E           8B46         FE            mov	ax,-2[bp]
29026 7831           40                         inc	ax
29027 7832           8946         FE            mov	-2[bp],ax
29028                       00007835            .292:
29029                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29030 7835           8B46         FE            mov	ax,-2[bp]
29031 7838           3D                   0013  cmp	ax,*$13
29032 783B           76           BC            jbe	.293
29033                       0000783D            .294:
29034                       0000783D            .290:
29035                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29036 783D           FF76         F6            push	-$A[bp]
29037                                           ! Debug: list int = const $3C0 (used reg = )
29038 7840           B8                   03C0  mov	ax,#$3C0
29039 7843           50                         push	ax
29040                                           ! Debug: func () void = outb+0 (used reg = )
29041 7844           E8         0564            call	_outb
29042 7847           83C4                   04  add	sp,*4
29043                                           !BCC_EOS
29044                                           ! 4066         inb(0x3da);
29045                                           ! Debug: list int = const $3DA (used reg = )
29046 784A           B8                   03DA  mov	ax,#$3DA
29047 784D           50                         push	ax
29048                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29049 784E           E8         0544            call	_inb
29050 7851           44                         inc	sp
29051 7852           44                         inc	sp
29052                                           !BCC_EOS
29053                                           ! 4067         for(i=0;i<=8;i++) {
29054                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29055 7853           31C0                       xor	ax,ax
29056 7855           8946         FE            mov	-2[bp],ax
29057                                           !BCC_EOS
29058                                           !BCC_EOS
29059 7858           EB           34            jmp .297
29060                       0000785A            .298:
29061                                           ! 4068             outb(0x3ce,i);
29062                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29063 785A           FF76         FE            push	-2[bp]
29064                                           ! Debug: list int = const $3CE (used reg = )
29065 785D           B8                   03CE  mov	ax,#$3CE
29066 7860           50                         push	ax
29067                                           ! Debug: func () void = outb+0 (used reg = )
29068 7861           E8         0547            call	_outb
29069 7864           83C4                   04  add	sp,*4
29070                                           !BCC_EOS
29071                                           ! 4069             outb(0x3cf, read_byte(ES, BX)); BX++;
29072                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29073 7867           FF76         08            push	8[bp]
29074                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29075 786A           FF76         06            push	6[bp]
29076                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29077 786D           E8         04CF            call	_read_byte
29078 7870           83C4                   04  add	sp,*4
29079                                           ! Debug: list unsigned char = al+0 (used reg = )
29080 7873           30E4                       xor	ah,ah
29081 7875           50                         push	ax
29082                                           ! Debug: list int = const $3CF (used reg = )
29083 7876           B8                   03CF  mov	ax,#$3CF
29084 7879           50                         push	ax
29085                                           ! Debug: func () void = outb+0 (used reg = )
29086 787A           E8         052E            call	_outb
29087 787D           83C4                   04  add	sp,*4
29088                                           !BCC_EOS
29089                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29090 7880           8B46         08            mov	ax,8[bp]
29091 7883           40                         inc	ax
29092 7884           8946         08            mov	8[bp],ax
29093                                           !BCC_EOS
29094                                           ! 4070         }
29095                                           ! 4071         BX += 2;
29096                       00007887            .296:
29097                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29098 7887           8B46         FE            mov	ax,-2[bp]
29099 788A           40                         inc	ax
29100 788B           8946         FE            mov	-2[bp],ax
29101                       0000788E            .297:
29102                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29103 788E           8B46         FE            mov	ax,-2[bp]
29104 7891           3D                   0008  cmp	ax,*8
29105 7894           76           C4            jbe	.298
29106                       00007896            .299:
29107                       00007896            .295:
29108                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29109 7896           8B46         08            mov	ax,8[bp]
29110 7899           40                         inc	ax
29111 789A           40                         inc	ax
29112 789B           8946         08            mov	8[bp],ax
29113                                           !BCC_EOS
29114                                           ! 4072         BX += 4;
29115                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29116 789E           8B46         08            mov	ax,8[bp]
29117 78A1           05                   0004  add	ax,*4
29118 78A4           8946         08            mov	8[bp],ax
29119                                           !BCC_EOS
29120                                           ! 4073         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29121                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29122 78A7           FF76         F8            push	-8[bp]
29123                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29124 78AA           FF76         06            push	6[bp]
29125                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29126 78AD           E8         048F            call	_read_byte
29127 78B0           83C4                   04  add	sp,*4
29128                                           ! Debug: list unsigned char = al+0 (used reg = )
29129 78B3           30E4                       xor	ah,ah
29130 78B5           50                         push	ax
29131                                           ! Debug: list int = const $3C4 (used reg = )
29132 78B6           B8                   03C4  mov	ax,#$3C4
29133 78B9           50                         push	ax
29134                                           ! Debug: func () void = outb+0 (used reg = )
29135 78BA           E8         04EE            call	_outb
29136 78BD           83C4                   04  add	sp,*4
29137                                           !BCC_EOS
29138                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29139 78C0           8B46         F8            mov	ax,-8[bp]
29140 78C3           40                         inc	ax
29141 78C4           8946         F8            mov	-8[bp],ax
29142                                           !BCC_EOS
29143                                           ! 4074         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29144                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29145 78C7           FF76         F8            push	-8[bp]
29146                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29147 78CA           FF76         06            push	6[bp]
29148                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29149 78CD           E8         046F            call	_read_byte
29150 78D0           83C4                   04  add	sp,*4
29151                                           ! Debug: list unsigned char = al+0 (used reg = )
29152 78D3           30E4                       xor	ah,ah
29153 78D5           50                         push	ax
29154                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29155 78D6           FF76         FC            push	-4[bp]
29156                                           ! Debug: func () void = outb+0 (used reg = )
29157 78D9           E8         04CF            call	_outb
29158 78DC           83C4                   04  add	sp,*4
29159                                           !BCC_EOS
29160                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29161 78DF           8B46         F8            mov	ax,-8[bp]
29162 78E2           40                         inc	ax
29163 78E3           8946         F8            mov	-8[bp],ax
29164                                           !BCC_EOS
29165                                           ! 4075         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29166                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29167 78E6           FF76         F8            push	-8[bp]
29168                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29169 78E9           FF76         06            push	6[bp]
29170                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29171 78EC           E8         0450            call	_read_byte
29172 78EF           83C4                   04  add	sp,*4
29173                                           ! Debug: list unsigned char = al+0 (used reg = )
29174 78F2           30E4                       xor	ah,ah
29175 78F4           50                         push	ax
29176                                           ! Debug: list int = const $3CE (used reg = )
29177 78F5           B8                   03CE  mov	ax,#$3CE
29178 78F8           50                         push	ax
29179                                           ! Debug: func () void = outb+0 (used reg = )
29180 78F9           E8         04AF            call	_outb
29181 78FC           83C4                   04  add	sp,*4
29182                                           !BCC_EOS
29183                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29184 78FF           8B46         F8            mov	ax,-8[bp]
29185 7902           40                         inc	ax
29186 7903           8946         F8            mov	-8[bp],ax
29187                                           !BCC_EOS
29188                                           ! 4076         addr1++;
29189                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29190 7906           8B46         F8            mov	ax,-8[bp]
29191 7909           40                         inc	ax
29192 790A           8946         F8            mov	-8[bp],ax
29193                                           !BCC_EOS
29194                                           ! 4077         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29195                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29196 790D           FF76         F8            push	-8[bp]
29197                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29198 7910           FF76         06            push	6[bp]
29199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29200 7913           E8         0429            call	_read_byte
29201 7916           83C4                   04  add	sp,*4
29202                                           ! Debug: list unsigned char = al+0 (used reg = )
29203 7919           30E4                       xor	ah,ah
29204 791B           50                         push	ax
29205                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29206 791C           8B46         FC            mov	ax,-4[bp]
29207                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29208                                           ! Debug: list unsigned int = ax+6 (used reg = )
29209 791F           05                   0006  add	ax,*6
29210 7922           50                         push	ax
29211                                           ! Debug: func () void = outb+0 (used reg = )
29212 7923           E8         0485            call	_outb
29213 7926           83C4                   04  add	sp,*4
29214                                           !BCC_EOS
29215                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29216 7929           8B46         F8            mov	ax,-8[bp]
29217 792C           40                         inc	ax
29218 792D           8946         F8            mov	-8[bp],ax
29219                                           !BCC_EOS
29220                                           ! 4078     }
29221                                           ! 4079     if (CX & 2) {
29222                       00007930            .280:
29223                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29224 7930           8A46         04            mov	al,4[bp]
29225 7933           24                     02  and	al,*2
29226 7935           84C0                       test	al,al
29227 7937         0F84         0270            beq 	.29A
29228                       0000793B            .29B:
29229                                           ! 4080         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29231 793B           FF76         08            push	8[bp]
29232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29233 793E           FF76         06            push	6[bp]
29234                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29235 7941           E8         03FB            call	_read_byte
29236 7944           83C4                   04  add	sp,*4
29237                                           ! Debug: list unsigned char = al+0 (used reg = )
29238 7947           30E4                       xor	ah,ah
29239 7949           50                         push	ax
29240                                           ! Debug: list int = const $49 (used reg = )
29241 794A           B8                   0049  mov	ax,*$49
29242 794D           50                         push	ax
29243                                           ! Debug: list int = const $40 (used reg = )
29244 794E           B8                   0040  mov	ax,*$40
29245 7951           50                         push	ax
29246                                           ! Debug: func () void = write_byte+0 (used reg = )
29247 7952           E8         0410            call	_write_byte
29248 7955           83C4                   06  add	sp,*6
29249                                           !BCC_EOS
29250                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29251 7958           8B46         08            mov	ax,8[bp]
29252 795B           40                         inc	ax
29253 795C           8946         08            mov	8[bp],ax
29254                                           !BCC_EOS
29255                                           ! 4081         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29256                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29257 795F           FF76         08            push	8[bp]
29258                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29259 7962           FF76         06            push	6[bp]
29260                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29261 7965           E8         03EA            call	_read_word
29262 7968           83C4                   04  add	sp,*4
29263                                           ! Debug: list unsigned short = ax+0 (used reg = )
29264 796B           50                         push	ax
29265                                           ! Debug: list int = const $4A (used reg = )
29266 796C           B8                   004A  mov	ax,*$4A
29267 796F           50                         push	ax
29268                                           ! Debug: list int = const $40 (used reg = )
29269 7970           B8                   0040  mov	ax,*$40
29270 7973           50                         push	ax
29271                                           ! Debug: func () void = write_word+0 (used reg = )
29272 7974           E8         0406            call	_write_word
29273 7977           83C4                   06  add	sp,*6
29274                                           !BCC_EOS
29275                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29276 797A           8B46         08            mov	ax,8[bp]
29277 797D           40                         inc	ax
29278 797E           40                         inc	ax
29279 797F           8946         08            mov	8[bp],ax
29280                                           !BCC_EOS
29281                                           ! 4082         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29282                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29283 7982           FF76         08            push	8[bp]
29284                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29285 7985           FF76         06            push	6[bp]
29286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29287 7988           E8         03C7            call	_read_word
29288 798B           83C4                   04  add	sp,*4
29289                                           ! Debug: list unsigned short = ax+0 (used reg = )
29290 798E           50                         push	ax
29291                                           ! Debug: list int = const $4C (used reg = )
29292 798F           B8                   004C  mov	ax,*$4C
29293 7992           50                         push	ax
29294                                           ! Debug: list int = const $40 (used reg = )
29295 7993           B8                   0040  mov	ax,*$40
29296 7996           50                         push	ax
29297                                           ! Debug: func () void = write_word+0 (used reg = )
29298 7997           E8         03E3            call	_write_word
29299 799A           83C4                   06  add	sp,*6
29300                                           !BCC_EOS
29301                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29302 799D           8B46         08            mov	ax,8[bp]
29303 79A0           40                         inc	ax
29304 79A1           40                         inc	ax
29305 79A2           8946         08            mov	8[bp],ax
29306                                           !BCC_EOS
29307                                           ! 4083         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29308                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29309 79A5           FF76         08            push	8[bp]
29310                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29311 79A8           FF76         06            push	6[bp]
29312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29313 79AB           E8         03A4            call	_read_word
29314 79AE           83C4                   04  add	sp,*4
29315                                           ! Debug: list unsigned short = ax+0 (used reg = )
29316 79B1           50                         push	ax
29317                                           ! Debug: list int = const $63 (used reg = )
29318 79B2           B8                   0063  mov	ax,*$63
29319 79B5           50                         push	ax
29320                                           ! Debug: list int = const $40 (used reg = )
29321 79B6           B8                   0040  mov	ax,*$40
29322 79B9           50                         push	ax
29323                                           ! Debug: func () void = write_word+0 (used reg = )
29324 79BA           E8         03C0            call	_write_word
29325 79BD           83C4                   06  add	sp,*6
29326                                           !BCC_EOS
29327                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29328 79C0           8B46         08            mov	ax,8[bp]
29329 79C3           40                         inc	ax
29330 79C4           40                         inc	ax
29331 79C5           8946         08            mov	8[bp],ax
29332                                           !BCC_EOS
29333                                           ! 4084         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29334                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29335 79C8           FF76         08            push	8[bp]
29336                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29337 79CB           FF76         06            push	6[bp]
29338                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29339 79CE           E8         036E            call	_read_byte
29340 79D1           83C4                   04  add	sp,*4
29341                                           ! Debug: list unsigned char = al+0 (used reg = )
29342 79D4           30E4                       xor	ah,ah
29343 79D6           50                         push	ax
29344                                           ! Debug: list int = const $84 (used reg = )
29345 79D7           B8                   0084  mov	ax,#$84
29346 79DA           50                         push	ax
29347                                           ! Debug: list int = const $40 (used reg = )
29348 79DB           B8                   0040  mov	ax,*$40
29349 79DE           50                         push	ax
29350                                           ! Debug: func () void = write_byte+0 (used reg = )
29351 79DF           E8         0383            call	_write_byte
29352 79E2           83C4                   06  add	sp,*6
29353                                           !BCC_EOS
29354                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29355 79E5           8B46         08            mov	ax,8[bp]
29356 79E8           40                         inc	ax
29357 79E9           8946         08            mov	8[bp],ax
29358                                           !BCC_EOS
29359                                           ! 4085         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29360                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29361 79EC           FF76         08            push	8[bp]
29362                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29363 79EF           FF76         06            push	6[bp]
29364                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29365 79F2           E8         035D            call	_read_word
29366 79F5           83C4                   04  add	sp,*4
29367                                           ! Debug: list unsigned short = ax+0 (used reg = )
29368 79F8           50                         push	ax
29369                                           ! Debug: list int = const $85 (used reg = )
29370 79F9           B8                   0085  mov	ax,#$85
29371 79FC           50                         push	ax
29372                                           ! Debug: list int = const $40 (used reg = )
29373 79FD           B8                   0040  mov	ax,*$40
29374 7A00           50                         push	ax
29375                                           ! Debug: func () void = write_word+0 (used reg = )
29376 7A01           E8         0379            call	_write_word
29377 7A04           83C4                   06  add	sp,*6
29378                                           !BCC_EOS
29379                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29380 7A07           8B46         08            mov	ax,8[bp]
29381 7A0A           40                         inc	ax
29382 7A0B           40                         inc	ax
29383 7A0C           8946         08            mov	8[bp],ax
29384                                           !BCC_EOS
29385                                           ! 4086         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29386                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29387 7A0F           FF76         08            push	8[bp]
29388                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29389 7A12           FF76         06            push	6[bp]
29390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29391 7A15           E8         0327            call	_read_byte
29392 7A18           83C4                   04  add	sp,*4
29393                                           ! Debug: list unsigned char = al+0 (used reg = )
29394 7A1B           30E4                       xor	ah,ah
29395 7A1D           50                         push	ax
29396                                           ! Debug: list int = const $87 (used reg = )
29397 7A1E           B8                   0087  mov	ax,#$87
29398 7A21           50                         push	ax
29399                                           ! Debug: list int = const $40 (used reg = )
29400 7A22           B8                   0040  mov	ax,*$40
29401 7A25           50                         push	ax
29402                                           ! Debug: func () void = write_byte+0 (used reg = )
29403 7A26           E8         033C            call	_write_byte
29404 7A29           83C4                   06  add	sp,*6
29405                                           !BCC_EOS
29406                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29407 7A2C           8B46         08            mov	ax,8[bp]
29408 7A2F           40                         inc	ax
29409 7A30           8946         08            mov	8[bp],ax
29410                                           !BCC_EOS
29411                                           ! 4087         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29412                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29413 7A33           FF76         08            push	8[bp]
29414                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29415 7A36           FF76         06            push	6[bp]
29416                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29417 7A39           E8         0303            call	_read_byte
29418 7A3C           83C4                   04  add	sp,*4
29419                                           ! Debug: list unsigned char = al+0 (used reg = )
29420 7A3F           30E4                       xor	ah,ah
29421 7A41           50                         push	ax
29422                                           ! Debug: list int = const $88 (used reg = )
29423 7A42           B8                   0088  mov	ax,#$88
29424 7A45           50                         push	ax
29425                                           ! Debug: list int = const $40 (used reg = )
29426 7A46           B8                   0040  mov	ax,*$40
29427 7A49           50                         push	ax
29428                                           ! Debug: func () void = write_byte+0 (used reg = )
29429 7A4A           E8         0318            call	_write_byte
29430 7A4D           83C4                   06  add	sp,*6
29431                                           !BCC_EOS
29432                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29433 7A50           8B46         08            mov	ax,8[bp]
29434 7A53           40                         inc	ax
29435 7A54           8946         08            mov	8[bp],ax
29436                                           !BCC_EOS
29437                                           ! 4088         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29438                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29439 7A57           FF76         08            push	8[bp]
29440                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29441 7A5A           FF76         06            push	6[bp]
29442                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29443 7A5D           E8         02DF            call	_read_byte
29444 7A60           83C4                   04  add	sp,*4
29445                                           ! Debug: list unsigned char = al+0 (used reg = )
29446 7A63           30E4                       xor	ah,ah
29447 7A65           50                         push	ax
29448                                           ! Debug: list int = const $89 (used reg = )
29449 7A66           B8                   0089  mov	ax,#$89
29450 7A69           50                         push	ax
29451                                           ! Debug: list int = const $40 (used reg = )
29452 7A6A           B8                   0040  mov	ax,*$40
29453 7A6D           50                         push	ax
29454                                           ! Debug: func () void = write_byte+0 (used reg = )
29455 7A6E           E8         02F4            call	_write_byte
29456 7A71           83C4                   06  add	sp,*6
29457                                           !BCC_EOS
29458                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29459 7A74           8B46         08            mov	ax,8[bp]
29460 7A77           40                         inc	ax
29461 7A78           8946         08            mov	8[bp],ax
29462                                           !BCC_EOS
29463                                           ! 4089         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29464                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29465 7A7B           FF76         08            push	8[bp]
29466                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29467 7A7E           FF76         06            push	6[bp]
29468                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29469 7A81           E8         02CE            call	_read_word
29470 7A84           83C4                   04  add	sp,*4
29471                                           ! Debug: list unsigned short = ax+0 (used reg = )
29472 7A87           50                         push	ax
29473                                           ! Debug: list int = const $60 (used reg = )
29474 7A88           B8                   0060  mov	ax,*$60
29475 7A8B           50                         push	ax
29476                                           ! Debug: list int = const $40 (used reg = )
29477 7A8C           B8                   0040  mov	ax,*$40
29478 7A8F           50                         push	ax
29479                                           ! Debug: func () void = write_word+0 (used reg = )
29480 7A90           E8         02EA            call	_write_word
29481 7A93           83C4                   06  add	sp,*6
29482                                           !BCC_EOS
29483                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29484 7A96           8B46         08            mov	ax,8[bp]
29485 7A99           40                         inc	ax
29486 7A9A           40                         inc	ax
29487 7A9B           8946         08            mov	8[bp],ax
29488                                           !BCC_EOS
29489                                           ! 4090         for(i=0;i<8;i++) {
29490                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29491 7A9E           31C0                       xor	ax,ax
29492 7AA0           8946         FE            mov	-2[bp],ax
29493                                           !BCC_EOS
29494                                           !BCC_EOS
29495 7AA3           EB           2F            jmp .29E
29496                       00007AA5            .29F:
29497                                           ! 4091             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29498                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29499 7AA5           FF76         08            push	8[bp]
29500                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29501 7AA8           FF76         06            push	6[bp]
29502                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29503 7AAB           E8         02A4            call	_read_word
29504 7AAE           83C4                   04  add	sp,*4
29505                                           ! Debug: list unsigned short = ax+0 (used reg = )
29506 7AB1           50                         push	ax
29507                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29508                                           ! Debug: expression subtree swapping
29509 7AB2           8B46         FE            mov	ax,-2[bp]
29510 7AB5           D1E0                       shl	ax,*1
29511                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29512                                           ! Debug: expression subtree swapping
29513                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29514 7AB7           05                   0050  add	ax,*$50
29515 7ABA           50                         push	ax
29516                                           ! Debug: list int = const $40 (used reg = )
29517 7ABB           B8                   0040  mov	ax,*$40
29518 7ABE           50                         push	ax
29519                                           ! Debug: func () void = write_word+0 (used reg = )
29520 7ABF           E8         02BB            call	_write_word
29521 7AC2           83C4                   06  add	sp,*6
29522                                           !BCC_EOS
29523                                           ! 4092             BX += 2;
29524                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29525 7AC5           8B46         08            mov	ax,8[bp]
29526 7AC8           40                         inc	ax
29527 7AC9           40                         inc	ax
29528 7ACA           8946         08            mov	8[bp],ax
29529                                           !BCC_EOS
29530                                           ! 4093         }
29531                                           ! 4094         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29532                       00007ACD            .29D:
29533                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29534 7ACD           8B46         FE            mov	ax,-2[bp]
29535 7AD0           40                         inc	ax
29536 7AD1           8946         FE            mov	-2[bp],ax
29537                       00007AD4            .29E:
29538                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29539 7AD4           8B46         FE            mov	ax,-2[bp]
29540 7AD7           3D                   0008  cmp	ax,*8
29541 7ADA           72           C9            jb 	.29F
29542                       00007ADC            .2A0:
29543                       00007ADC            .29C:
29544                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29545 7ADC           FF76         08            push	8[bp]
29546                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29547 7ADF           FF76         06            push	6[bp]
29548                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29549 7AE2           E8         026D            call	_read_word
29550 7AE5           83C4                   04  add	sp,*4
29551                                           ! Debug: list unsigned short = ax+0 (used reg = )
29552 7AE8           50                         push	ax
29553                                           ! Debug: list int = const $4E (used reg = )
29554 7AE9           B8                   004E  mov	ax,*$4E
29555 7AEC           50                         push	ax
29556                                           ! Debug: list int = const $40 (used reg = )
29557 7AED           B8                   0040  mov	ax,*$40
29558 7AF0           50                         push	ax
29559                                           ! Debug: func () void = write_word+0 (used reg = )
29560 7AF1           E8         0289            call	_write_word
29561 7AF4           83C4                   06  add	sp,*6
29562                                           !BCC_EOS
29563                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29564 7AF7           8B46         08            mov	ax,8[bp]
29565 7AFA           40                         inc	ax
29566 7AFB           40                         inc	ax
29567 7AFC           8946         08            mov	8[bp],ax
29568                                           !BCC_EOS
29569                                           ! 4095         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29570                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29571 7AFF           FF76         08            push	8[bp]
29572                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29573 7B02           FF76         06            push	6[bp]
29574                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29575 7B05           E8         0237            call	_read_byte
29576 7B08           83C4                   04  add	sp,*4
29577                                           ! Debug: list unsigned char = al+0 (used reg = )
29578 7B0B           30E4                       xor	ah,ah
29579 7B0D           50                         push	ax
29580                                           ! Debug: list int = const $62 (used reg = )
29581 7B0E           B8                   0062  mov	ax,*$62
29582 7B11           50                         push	ax
29583                                           ! Debug: list int = const $40 (used reg = )
29584 7B12           B8                   0040  mov	ax,*$40
29585 7B15           50                         push	ax
29586                                           ! Debug: func () void = write_byte+0 (used reg = )
29587 7B16           E8         024C            call	_write_byte
29588 7B19           83C4                   06  add	sp,*6
29589                                           !BCC_EOS
29590                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29591 7B1C           8B46         08            mov	ax,8[bp]
29592 7B1F           40                         inc	ax
29593 7B20           8946         08            mov	8[bp],ax
29594                                           !BCC_EOS
29595                                           ! 4096         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29596                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29597 7B23           FF76         08            push	8[bp]
29598                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29599 7B26           FF76         06            push	6[bp]
29600                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29601 7B29           E8         0226            call	_read_word
29602 7B2C           83C4                   04  add	sp,*4
29603                                           ! Debug: list unsigned short = ax+0 (used reg = )
29604 7B2F           50                         push	ax
29605                                           ! Debug: list int = const $7C (used reg = )
29606 7B30           B8                   007C  mov	ax,*$7C
29607 7B33           50                         push	ax
29608                                           ! Debug: list int = const 0 (used reg = )
29609 7B34           31C0                       xor	ax,ax
29610 7B36           50                         push	ax
29611                                           ! Debug: func () void = write_word+0 (used reg = )
29612 7B37           E8         0243            call	_write_word
29613 7B3A           83C4                   06  add	sp,*6
29614                                           !BCC_EOS
29615                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29616 7B3D           8B46         08            mov	ax,8[bp]
29617 7B40           40                         inc	ax
29618 7B41           40                         inc	ax
29619 7B42           8946         08            mov	8[bp],ax
29620                                           !BCC_EOS
29621                                           ! 4097         write_word(0, 0x1f * 4 + 2, re
29622                                           ! 4097 ad_word(ES, BX)); BX += 2;
29623                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29624 7B45           FF76         08            push	8[bp]
29625                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29626 7B48           FF76         06            push	6[bp]
29627                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29628 7B4B           E8         0204            call	_read_word
29629 7B4E           83C4                   04  add	sp,*4
29630                                           ! Debug: list unsigned short = ax+0 (used reg = )
29631 7B51           50                         push	ax
29632                                           ! Debug: list int = const $7E (used reg = )
29633 7B52           B8                   007E  mov	ax,*$7E
29634 7B55           50                         push	ax
29635                                           ! Debug: list int = const 0 (used reg = )
29636 7B56           31C0                       xor	ax,ax
29637 7B58           50                         push	ax
29638                                           ! Debug: func () void = write_word+0 (used reg = )
29639 7B59           E8         0221            call	_write_word
29640 7B5C           83C4                   06  add	sp,*6
29641                                           !BCC_EOS
29642                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29643 7B5F           8B46         08            mov	ax,8[bp]
29644 7B62           40                         inc	ax
29645 7B63           40                         inc	ax
29646 7B64           8946         08            mov	8[bp],ax
29647                                           !BCC_EOS
29648                                           ! 4098         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29650 7B67           FF76         08            push	8[bp]
29651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29652 7B6A           FF76         06            push	6[bp]
29653                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29654 7B6D           E8         01E2            call	_read_word
29655 7B70           83C4                   04  add	sp,*4
29656                                           ! Debug: list unsigned short = ax+0 (used reg = )
29657 7B73           50                         push	ax
29658                                           ! Debug: list int = const $10C (used reg = )
29659 7B74           B8                   010C  mov	ax,#$10C
29660 7B77           50                         push	ax
29661                                           ! Debug: list int = const 0 (used reg = )
29662 7B78           31C0                       xor	ax,ax
29663 7B7A           50                         push	ax
29664                                           ! Debug: func () void = write_word+0 (used reg = )
29665 7B7B           E8         01FF            call	_write_word
29666 7B7E           83C4                   06  add	sp,*6
29667                                           !BCC_EOS
29668                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29669 7B81           8B46         08            mov	ax,8[bp]
29670 7B84           40                         inc	ax
29671 7B85           40                         inc	ax
29672 7B86           8946         08            mov	8[bp],ax
29673                                           !BCC_EOS
29674                                           ! 4099         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29675                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29676 7B89           FF76         08            push	8[bp]
29677                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29678 7B8C           FF76         06            push	6[bp]
29679                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29680 7B8F           E8         01C0            call	_read_word
29681 7B92           83C4                   04  add	sp,*4
29682                                           ! Debug: list unsigned short = ax+0 (used reg = )
29683 7B95           50                         push	ax
29684                                           ! Debug: list int = const $10E (used reg = )
29685 7B96           B8                   010E  mov	ax,#$10E
29686 7B99           50                         push	ax
29687                                           ! Debug: list int = const 0 (used reg = )
29688 7B9A           31C0                       xor	ax,ax
29689 7B9C           50                         push	ax
29690                                           ! Debug: func () void = write_word+0 (used reg = )
29691 7B9D           E8         01DD            call	_write_word
29692 7BA0           83C4                   06  add	sp,*6
29693                                           !BCC_EOS
29694                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29695 7BA3           8B46         08            mov	ax,8[bp]
29696 7BA6           40                         inc	ax
29697 7BA7           40                         inc	ax
29698 7BA8           8946         08            mov	8[bp],ax
29699                                           !BCC_EOS
29700                                           ! 4100     }
29701                                           ! 4101     if (CX & 4) {
29702                       00007BAB            .29A:
29703                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29704 7BAB           8A46         04            mov	al,4[bp]
29705 7BAE           24                     04  and	al,*4
29706 7BB0           84C0                       test	al,al
29707 7BB2         0F84         0096            beq 	.2A1
29708                       00007BB6            .2A2:
29709                                           ! 4102         BX++;
29710                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29711 7BB6           8B46         08            mov	ax,8[bp]
29712 7BB9           40                         inc	ax
29713 7BBA           8946         08            mov	8[bp],ax
29714                                           !BCC_EOS
29715                                           ! 4103         v = read_byte(ES, BX); BX++;
29716                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29717 7BBD           FF76         08            push	8[bp]
29718                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29719 7BC0           FF76         06            push	6[bp]
29720                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29721 7BC3           E8         0179            call	_read_byte
29722 7BC6           83C4                   04  add	sp,*4
29723                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29724 7BC9           30E4                       xor	ah,ah
29725 7BCB           8946         FA            mov	-6[bp],ax
29726                                           !BCC_EOS
29727                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29728 7BCE           8B46         08            mov	ax,8[bp]
29729 7BD1           40                         inc	ax
29730 7BD2           8946         08            mov	8[bp],ax
29731                                           !BCC_EOS
29732                                           ! 4104         outb(0x3c6, read_byte(ES, BX)); BX++;
29733                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29734 7BD5           FF76         08            push	8[bp]
29735                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29736 7BD8           FF76         06            push	6[bp]
29737                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29738 7BDB           E8         0161            call	_read_byte
29739 7BDE           83C4                   04  add	sp,*4
29740                                           ! Debug: list unsigned char = al+0 (used reg = )
29741 7BE1           30E4                       xor	ah,ah
29742 7BE3           50                         push	ax
29743                                           ! Debug: list int = const $3C6 (used reg = )
29744 7BE4           B8                   03C6  mov	ax,#$3C6
29745 7BE7           50                         push	ax
29746                                           ! Debug: func () void = outb+0 (used reg = )
29747 7BE8           E8         01C0            call	_outb
29748 7BEB           83C4                   04  add	sp,*4
29749                                           !BCC_EOS
29750                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29751 7BEE           8B46         08            mov	ax,8[bp]
29752 7BF1           40                         inc	ax
29753 7BF2           8946         08            mov	8[bp],ax
29754                                           !BCC_EOS
29755                                           ! 4105         outb(0x3c8,0x00);
29756                                           ! Debug: list int = const 0 (used reg = )
29757 7BF5           31C0                       xor	ax,ax
29758 7BF7           50                         push	ax
29759                                           ! Debug: list int = const $3C8 (used reg = )
29760 7BF8           B8                   03C8  mov	ax,#$3C8
29761 7BFB           50                         push	ax
29762                                           ! Debug: func () void = outb+0 (used reg = )
29763 7BFC           E8         01AC            call	_outb
29764 7BFF           83C4                   04  add	sp,*4
29765                                           !BCC_EOS
29766                                           ! 4106         for(i=0;i<256*3;i++) {
29767                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29768 7C02           31C0                       xor	ax,ax
29769 7C04           8946         FE            mov	-2[bp],ax
29770                                           !BCC_EOS
29771                                           !BCC_EOS
29772 7C07           EB           27            jmp .2A5
29773                       00007C09            .2A6:
29774                                           ! 4107             outb(0x3c9, read_byte(ES, BX)); BX++;
29775                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29776 7C09           FF76         08            push	8[bp]
29777                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29778 7C0C           FF76         06            push	6[bp]
29779                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29780 7C0F           E8         012D            call	_read_byte
29781 7C12           83C4                   04  add	sp,*4
29782                                           ! Debug: list unsigned char = al+0 (used reg = )
29783 7C15           30E4                       xor	ah,ah
29784 7C17           50                         push	ax
29785                                           ! Debug: list int = const $3C9 (used reg = )
29786 7C18           B8                   03C9  mov	ax,#$3C9
29787 7C1B           50                         push	ax
29788                                           ! Debug: func () void = outb+0 (used reg = )
29789 7C1C           E8         018C            call	_outb
29790 7C1F           83C4                   04  add	sp,*4
29791                                           !BCC_EOS
29792                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29793 7C22           8B46         08            mov	ax,8[bp]
29794 7C25           40                         inc	ax
29795 7C26           8946         08            mov	8[bp],ax
29796                                           !BCC_EOS
29797                                           ! 4108         }
29798                                           ! 4109         BX++;
29799                       00007C29            .2A4:
29800                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29801 7C29           8B46         FE            mov	ax,-2[bp]
29802 7C2C           40                         inc	ax
29803 7C2D           8946         FE            mov	-2[bp],ax
29804                       00007C30            .2A5:
29805                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29806 7C30           8B46         FE            mov	ax,-2[bp]
29807 7C33           3D                   0300  cmp	ax,#$300
29808 7C36           72           D1            jb 	.2A6
29809                       00007C38            .2A7:
29810                       00007C38            .2A3:
29811                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29812 7C38           8B46         08            mov	ax,8[bp]
29813 7C3B           40                         inc	ax
29814 7C3C           8946         08            mov	8[bp],ax
29815                                           !BCC_EOS
29816                                           ! 4110         outb(0x3c8, v);
29817                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29818 7C3F           FF76         FA            push	-6[bp]
29819                                           ! Debug: list int = const $3C8 (used reg = )
29820 7C42           B8                   03C8  mov	ax,#$3C8
29821 7C45           50                         push	ax
29822                                           ! Debug: func () void = outb+0 (used reg = )
29823 7C46           E8         0162            call	_outb
29824 7C49           83C4                   04  add	sp,*4
29825                                           !BCC_EOS
29826                                           ! 4111     }
29827                                           ! 4112     return BX;
29828                       00007C4C            .2A1:
29829 7C4C           8B46         08            mov	ax,8[bp]
29830 7C4F           89EC                       mov	sp,bp
29831 7C51           5D                         pop	bp
29832 7C52           C3                         ret
29833                                           !BCC_EOS
29834                                           ! 4113 }
29835                                           ! 4114 static Bit8u find_vga_entry(mode)
29836                                           ! 4115 Bit8u mode;
29837                       00007C53            _find_vga_entry:
29838                                           !BCC_EOS
29839                                           ! 4116 {
29840                                           ! 4117  Bit8u i,line=0xFF;
29841 7C53           55                         push	bp
29842 7C54           89E5                       mov	bp,sp
29843 7C56           4C                         dec	sp
29844 7C57           4C                         dec	sp
29845                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29846 7C58           B0                     FF  mov	al,#$FF
29847 7C5A           8846         FE            mov	-2[bp],al
29848                                           !BCC_EOS
29849                                           ! 4118  for(i=0;i<=15;i++)
29850                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29851 7C5D           30C0                       xor	al,al
29852 7C5F           8846         FF            mov	-1[bp],al
29853                                           !BCC_EOS
29854                                           !BCC_EOS
29855                                           ! 4119   if(vga_modes[i].svgamode==mode)
29856 7C62           EB           23            jmp .2AA
29857                       00007C64            .2AB:
29858                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29859 7C64           8A46         FF            mov	al,-1[bp]
29860 7C67           30E4                       xor	ah,ah
29861 7C69           B1                     03  mov	cl,*3
29862 7C6B           D3E0                       shl	ax,cl
29863 7C6D           89C3                       mov	bx,ax
29864                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29865 7C6F           8A87       020B            mov	al,_vga_modes[bx]
29866 7C73           3A46         04            cmp	al,4[bp]
29867 7C76           75           08            jne 	.2AC
29868                       00007C78            .2AD:
29869                                           ! 4120    {line=i;
29870                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29871 7C78           8A46         FF            mov	al,-1[bp]
29872 7C7B           8846         FE            mov	-2[bp],al
29873                                           !BCC_EOS
29874                                           ! 4121     break;
29875 7C7E           EB           0E            jmp .2A8
29876                                           !BCC_EOS
29877                                           ! 4122    }
29878                                           ! 4123  return line;
29879                       00007C80            .2AC:
29880                       00007C80            .2A9:
29881                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29882 7C80           8A46         FF            mov	al,-1[bp]
29883 7C83           40                         inc	ax
29884 7C84           8846         FF            mov	-1[bp],al
29885                       00007C87            .2AA:
29886                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29887 7C87           8A46         FF            mov	al,-1[bp]
29888 7C8A           3C                     0F  cmp	al,*$F
29889 7C8C           76           D6            jbe	.2AB
29890                       00007C8E            .2AE:
29891                       00007C8E            .2A8:
29892 7C8E           8A46         FE            mov	al,-2[bp]
29893 7C91           89EC                       mov	sp,bp
29894 7C93           5D                         pop	bp
29895 7C94           C3                         ret
29896                                           !BCC_EOS
29897                                           ! 4124 }
29898                                           ! 4125 static void memsetb(seg,offset,value,count)
29899                                           ! Register BX used in function find_vga_entry
29900                                           ! 4126   Bit16u seg;
29901                       00007C95            _memsetb:
29902                                           !BCC_EOS
29903                                           ! 4127   Bit16u offset;
29904                                           !BCC_EOS
29905                                           ! 4128   Bit16u value;
29906                                           !BCC_EOS
29907                                           ! 4129   Bit16u count;
29908                                           !BCC_EOS
29909                                           ! 4130 {
29910                                           ! 4131 #asm
29911                                           !BCC_ASM
29912                       00000008            _memsetb.count	set	8
29913                       00000002            _memsetb.seg	set	2
29914                       00000006            _memsetb.value	set	6
29915                       00000004            _memsetb.offset	set	4
29916 7C95           55                           push bp
29917 7C96           89E5                         mov bp, sp
29918 7C98           50                             push ax
29919 7C99           51                             push cx
29920 7C9A           06                             push es
29921 7C9B           57                             push di
29922 7C9C           8B4E         0A                mov cx, 10[bp] ; count
29923 7C9F           83F9                   00      cmp cx, #0x00
29924 7CA2           74           10                je memsetb_end
29925 7CA4           8B46         04                mov ax, 4[bp] ; segment
29926 7CA7           8EC0                           mov es, ax
29927 7CA9           8B46         06                mov ax, 6[bp] ; offset
29928 7CAC           89C7                           mov di, ax
29929 7CAE           8A46         08                mov al, 8[bp] ; value
29930 7CB1           FC                             cld
29931 7CB2           F3                             rep
29932 7CB3           AA                              stosb
29933                       00007CB4            memsetb_end:
29934 7CB4           5F                             pop di
29935 7CB5           07                             pop es
29936 7CB6           59                             pop cx
29937 7CB7           58                             pop ax
29938 7CB8           5D                           pop bp
29939                                           ! 4155 endasm
29940                                           !BCC_ENDASM
29941                                           ! 4156 }
29942 7CB9           C3                         ret
29943                                           ! 4157 static void memsetw(seg,offset,value,count)
29944                                           ! 4158   Bit16u seg;
29945                       00007CBA            _memsetw:
29946                                           !BCC_EOS
29947                                           ! 4159   Bit16u offset;
29948                                           !BCC_EOS
29949                                           ! 4160   Bit16u value;
29950                                           !BCC_EOS
29951                                           ! 4161   Bit16u count;
29952                                           !BCC_EOS
29953                                           ! 4162 {
29954                                           ! 4163 #asm
29955                                           !BCC_ASM
29956                       00000008            _memsetw.count	set	8
29957                       00000002            _memsetw.seg	set	2
29958                       00000006            _memsetw.value	set	6
29959                       00000004            _memsetw.offset	set	4
29960 7CBA           55                           push bp
29961 7CBB           89E5                         mov bp, sp
29962 7CBD           50                             push ax
29963 7CBE           51                             push cx
29964 7CBF           06                             push es
29965 7CC0           57                             push di
29966 7CC1           8B4E         0A                mov cx, 10[bp] ; count
29967 7CC4           83F9                   00      cmp cx, #0x00
29968 7CC7           74           10                je memsetw_end
29969 7CC9           8B46         04                mov ax, 4[bp] ; segment
29970 7CCC           8EC0                           mov es, ax
29971 7CCE           8B46         06                mov ax, 6[bp] ; offset
29972 7CD1           89C7                           mov di, ax
29973 7CD3           8B46         08                mov ax, 8[bp] ; value
29974 7CD6           FC                             cld
29975 7CD7           F3                             rep
29976 7CD8           AB                              stosw
29977                       00007CD9            memsetw_end:
29978 7CD9           5F                             pop di
29979 7CDA           07                             pop es
29980 7CDB           59                             pop cx
29981 7CDC           58                             pop ax
29982 7CDD           5D                           pop bp
29983                                           ! 4187 endasm
29984                                           !BCC_ENDASM
29985                                           ! 4188 }
29986 7CDE           C3                         ret
29987                                           ! 4189 static void memcpyb(dseg,doffset,sseg,soffset,count)
29988                                           ! 4190   Bit16u dseg;
29989                       00007CDF            _memcpyb:
29990                                           !BCC_EOS
29991                                           ! 4191   Bit16u doffset;
29992                                           !BCC_EOS
29993                                           ! 4192   Bit16u sseg;
29994                                           !BCC_EOS
29995                                           ! 4193   Bit16u soffset;
29996                                           !BCC_EOS
29997                                           ! 4194   Bit16u count;
29998                                           !BCC_EOS
29999                                           ! 4195 {
30000                                           ! 4196 #asm
30001                                           !BCC_ASM
30002                       0000000A            _memcpyb.count	set	$A
30003                       00000006            _memcpyb.sseg	set	6
30004                       00000008            _memcpyb.soffset	set	8
30005                       00000002            _memcpyb.dseg	set	2
30006                       00000004            _memcpyb.doffset	set	4
30007 7CDF           55                           push bp
30008 7CE0           89E5                         mov bp, sp
30009 7CE2           50                             push ax
30010 7CE3           51                             push cx
30011 7CE4           06                             push es
30012 7CE5           57                             push di
30013 7CE6           1E                             push ds
30014 7CE7           56                             push si
30015 7CE8           8B4E         0C                mov cx, 12[bp] ; count
30016 7CEB           83F9                   00      cmp cx, #0x0000
30017 7CEE           74           17                je memcpyb_end
30018 7CF0           8B46         04                mov ax, 4[bp] ; dsegment
30019 7CF3           8EC0                           mov es, ax
30020 7CF5           8B46         06                mov ax, 6[bp] ; doffset
30021 7CF8           89C7                           mov di, ax
30022 7CFA           8B46         08                mov ax, 8[bp] ; ssegment
30023 7CFD           8ED8                           mov ds, ax
30024 7CFF           8B46         0A                mov ax, 10[bp] ; soffset
30025 7D02           89C6                           mov si, ax
30026 7D04           FC                             cld
30027 7D05           F3                             rep
30028 7D06           A4                              movsb
30029                       00007D07            memcpyb_end:
30030 7D07           5E                             pop si
30031 7D08           1F                             pop ds
30032 7D09           5F                             pop di
30033 7D0A           07                             pop es
30034 7D0B           59                             pop cx
30035 7D0C           58                             pop ax
30036 7D0D           5D                           pop bp
30037                                           ! 4227 endasm
30038                                           !BCC_ENDASM
30039                                           ! 4228 }
30040 7D0E           C3                         ret
30041                                           ! 4229 static void memcpyw(dseg,doffset,sseg,soffset,count)
30042                                           ! 4230   Bit16u dseg;
30043                       00007D0F            _memcpyw:
30044                                           !BCC_EOS
30045                                           ! 4231   Bit16u doffset;
30046                                           !BCC_EOS
30047                                           ! 4232   Bit16u sseg;
30048                                           !BCC_EOS
30049                                           ! 4233   Bit16u soffset;
30050                                           !BCC_EOS
30051                                           ! 4234   Bit16u count;
30052                                           !BCC_EOS
30053                                           ! 4235 {
30054                                           ! 4236 #asm
30055                                           !BCC_ASM
30056                       0000000A            _memcpyw.count	set	$A
30057                       00000006            _memcpyw.sseg	set	6
30058                       00000008            _memcpyw.soffset	set	8
30059                       00000002            _memcpyw.dseg	set	2
30060                       00000004            _memcpyw.doffset	set	4
30061 7D0F           55                           push bp
30062 7D10           89E5                         mov bp, sp
30063 7D12           50                             push ax
30064 7D13           51                             push cx
30065 7D14           06                             push es
30066 7D15           57                             push di
30067 7D16           1E                             push ds
30068 7D17           56                             push si
30069 7D18           8B4E         0C                mov cx, 12[bp] ; count
30070 7D1B           83F9                   00      cmp cx, #0x0000
30071 7D1E           74           17                je memcpyw_end
30072 7D20           8B46         04                mov ax, 4[bp] ; dsegment
30073 7D23           8EC0                           mov es, ax
30074 7D25           8B46         06                mov ax, 6[bp] ; doffset
30075 7D28           89C7                           mov di, ax
30076 7D2A           8B46         08                mov ax, 8[bp] ; ssegment
30077 7D2D           8ED8                           mov ds, ax
30078 7D2F           8B46         0A                mov ax, 10[bp] ; soffset
30079 7D32           89C6                           mov si, ax
30080 7D34           FC                             cld
30081 7D35           F3                             rep
30082 7D36           A5                              movsw
30083                       00007D37            memcpyw_end:
30084 7D37           5E                             pop si
30085 7D38           1F                             pop ds
30086 7D39           5F                             pop di
30087 7D3A           07                             pop es
30088 7D3B           59                             pop cx
30089 7D3C           58                             pop ax
30090 7D3D           5D                           pop bp
30091                                           ! 4267 endasm
30092                                           !BCC_ENDASM
30093                                           ! 4268 }
30094 7D3E           C3                         ret
30095                                           ! 4269 static Bit8u
30096                                           ! 4270 read_byte(seg, offset)
30097                                           ! 4271   Bit16u seg;
30098                       00007D3F            _read_byte:
30099                                           !BCC_EOS
30100                                           ! 4272   Bit16u offset;
30101                                           !BCC_EOS
30102                                           ! 4273 {
30103                                           ! 4274 #asm
30104                                           !BCC_ASM
30105                       00000002            _read_byte.seg	set	2
30106                       00000004            _read_byte.offset	set	4
30107 7D3F           55                           push bp
30108 7D40           89E5                         mov bp, sp
30109 7D42           53                             push bx
30110 7D43           1E                             push ds
30111 7D44           8B46         04                mov ax, 4[bp] ; segment
30112 7D47           8ED8                           mov ds, ax
30113 7D49           8B5E         06                mov bx, 6[bp] ; offset
30114 7D4C           8A07                           mov al, [bx]
30115                                               ;; al = return value (byte)
30116 7D4E           1F                             pop ds
30117 7D4F           5B                             pop bx
30118 7D50           5D                           pop bp
30119                                           ! 4287 endasm
30120                                           !BCC_ENDASM
30121                                           ! 4288 }
30122 7D51           C3                         ret
30123                                           ! 4289 static Bit16u
30124                                           ! 4290 read_word(seg, offset)
30125                                           ! 4291   Bit16u seg;
30126                       00007D52            _read_word:
30127                                           !BCC_EOS
30128                                           ! 4292   Bit16u offset;
30129                                           !BCC_EOS
30130                                           ! 4293 {
30131                                           ! 4294 #asm
30132                                           !BCC_ASM
30133                       00000002            _read_word.seg	set	2
30134                       00000004            _read_word.offset	set	4
30135 7D52           55                           push bp
30136 7D53           89E5                         mov bp, sp
30137 7D55           53                             push bx
30138 7D56           1E                             push ds
30139 7D57           8B46         04                mov ax, 4[bp] ; segment
30140 7D5A           8ED8                           mov ds, ax
30141 7D5C           8B5E         06                mov bx, 6[bp] ; offset
30142 7D5F           8B07                           mov ax, [bx]
30143                                               ;; ax = return value (word)
30144 7D61           1F                             pop ds
30145 7D62           5B                             pop bx
30146 7D63           5D                           pop bp
30147                                           ! 4307 endasm
30148                                           !BCC_ENDASM
30149                                           ! 4308 }
30150 7D64           C3                         ret
30151                                           ! 4309 static void
30152                                           ! 4310 write_byte(seg, offset, data)
30153                                           ! 4311   Bit16u seg;
30154                       00007D65            _write_byte:
30155                                           !BCC_EOS
30156                                           ! 4312   Bit16u offset;
30157                                           !BCC_EOS
30158                                           ! 4313   Bit8u data;
30159                                           !BCC_EOS
30160                                           ! 4314 {
30161                                           ! 4315 #asm
30162                                           !BCC_ASM
30163                       00000002            _write_byte.seg	set	2
30164                       00000006            _write_byte.data	set	6
30165                       00000004            _write_byte.offset	set	4
30166 7D65           55                           push bp
30167 7D66           89E5                         mov bp, sp
30168 7D68           50                             push ax
30169 7D69           53                             push bx
30170 7D6A           1E                             push ds
30171 7D6B           8B46         04                mov ax, 4[bp] ; segment
30172 7D6E           8ED8                           mov ds, ax
30173 7D70           8B5E         06                mov bx, 6[bp] ; offset
30174 7D73           8A46         08                mov al, 8[bp] ; data byte
30175 7D76           8807                           mov [bx], al ; write data byte
30176 7D78           1F                             pop ds
30177 7D79           5B                             pop bx
30178 7D7A           58                             pop ax
30179 7D7B           5D                           pop bp
30180                                           ! 4330 endasm
30181                                           !BCC_ENDASM
30182                                           ! 4331 }
30183 7D7C           C3                         ret
30184                                           ! 4332 static void
30185                                           ! 4333 write_word(seg, offset, data)
30186                                           ! 4334   Bit16u seg;
30187                       00007D7D            _write_word:
30188                                           !BCC_EOS
30189                                           ! 4335   Bit16u offset;
30190                                           !BCC_EOS
30191                                           ! 4336   Bit16u data;
30192                                           !BCC_EOS
30193                                           ! 4337 {
30194                                           ! 4338 #asm
30195                                           !BCC_ASM
30196                       00000002            _write_word.seg	set	2
30197                       00000006            _write_word.data	set	6
30198                       00000004            _write_word.offset	set	4
30199 7D7D           55                           push bp
30200 7D7E           89E5                         mov bp, sp
30201 7D80           50                             push ax
30202 7D81           53                             push bx
30203 7D82           1E                             push ds
30204 7D83           8B46         04                mov ax, 4[bp] ; segment
30205 7D86           8ED8                           mov ds, ax
30206 7D88           8B5E         06                mov bx, 6[bp] ; offset
30207 7D8B           8B46         08                mov ax, 8[bp] ; data word
30208 7D8E           8907                           mov [bx], ax ; write data word
30209 7D90           1F                             pop ds
30210 7D91           5B                             pop bx
30211 7D92           58                             pop ax
30212 7D93           5D                           pop bp
30213                                           ! 4353 endasm
30214                                           !BCC_ENDASM
30215                                           ! 4354 }
30216 7D94           C3                         ret
30217                                           ! 4355  Bit8u
30218                                           ! 4356 inb(port)
30219                                           ! 4357   Bit16u port;
30220                                           export	_inb
30221                       00007D95            _inb:
30222                                           !BCC_EOS
30223                                           ! 4358 {
30224                                           ! 4359 #asm
30225                                           !BCC_ASM
30226                       00000002            _inb.port	set	2
30227 7D95           55                           push bp
30228 7D96           89E5                         mov bp, sp
30229 7D98           52                             push dx
30230 7D99           8B56         04                mov dx, 4[bp]
30231 7D9C           EC                             in al, dx
30232 7D9D           5A                             pop dx
30233 7D9E           5D                           pop bp
30234                                           ! 4367 endasm
30235                                           !BCC_ENDASM
30236                                           ! 4368 }
30237 7D9F           C3                         ret
30238                                           ! 4369   Bit16u
30239                                           ! 4370 inw(port)
30240                                           ! 4371   Bit16u port;
30241                                           export	_inw
30242                       00007DA0            _inw:
30243                                           !BCC_EOS
30244                                           ! 4372 {
30245                                           ! 4373 #asm
30246                                           !BCC_ASM
30247                       00000002            _inw.port	set	2
30248 7DA0           55                           push bp
30249 7DA1           89E5                         mov bp, sp
30250 7DA3           52                             push dx
30251 7DA4           8B56         04                mov dx, 4[bp]
30252 7DA7           ED                             in ax, dx
30253 7DA8           5A                             pop dx
30254 7DA9           5D                           pop bp
30255                                           ! 4381 endasm
30256                                           !BCC_ENDASM
30257                                           ! 4382 }
30258 7DAA           C3                         ret
30259                                           ! 4383   void
30260                                           ! 4384 outb(port, val)
30261                                           ! 4385   Bit16u port;
30262                                           export	_outb
30263                       00007DAB            _outb:
30264                                           !BCC_EOS
30265                                           ! 4386   Bit8u val;
30266                                           !BCC_EOS
30267                                           ! 4387 {
30268                                           ! 4388 #asm
30269                                           !BCC_ASM
30270                       00000004            _outb.val	set	4
30271                       00000002            _outb.port	set	2
30272 7DAB           55                           push bp
30273 7DAC           89E5                         mov bp, sp
30274 7DAE           50                             push ax
30275 7DAF           52                             push dx
30276 7DB0           8B56         04                mov dx, 4[bp]
30277 7DB3           8A46         06                mov al, 6[bp]
30278 7DB6           EE                             out dx, al
30279 7DB7           5A                             pop dx
30280 7DB8           58                             pop ax
30281 7DB9           5D                           pop bp
30282                                           ! 4399 endasm
30283                                           !BCC_ENDASM
30284                                           ! 4400 }
30285 7DBA           C3                         ret
30286                                           ! 4401   void
30287                                           ! 4402 outw(port, val)
30288                                           ! 4403   Bit16u port;
30289                                           export	_outw
30290                       00007DBB            _outw:
30291                                           !BCC_EOS
30292                                           ! 4404   Bit16u val;
30293                                           !BCC_EOS
30294                                           ! 4405 {
30295                                           ! 4406 #asm
30296                                           !BCC_ASM
30297                       00000004            _outw.val	set	4
30298                       00000002            _outw.port	set	2
30299 7DBB           55                           push bp
30300 7DBC           89E5                         mov bp, sp
30301 7DBE           50                             push ax
30302 7DBF           52                             push dx
30303 7DC0           8B56         04                mov dx, 4[bp]
30304 7DC3           8B46         06                mov ax, 6[bp]
30305 7DC6           EF                             out dx, ax
30306 7DC7           5A                             pop dx
30307 7DC8           58                             pop ax
30308 7DC9           5D                           pop bp
30309                                           ! 4417 endasm
30310                                           !BCC_ENDASM
30311                                           ! 4418 }
30312 7DCA           C3                         ret
30313                                           ! 4419 Bit16u get_SS()
30314                                           ! 4420 {
30315                                           export	_get_SS
30316                       00007DCB            _get_SS:
30317                                           ! 4421 #asm
30318                                           !BCC_ASM
30319 7DCB           8CD0                         mov ax, ss
30320                                           ! 4423 endasm
30321                                           !BCC_ENDASM
30322                                           ! 4424 }
30323 7DCD           C3                         ret
30324                                           ! 4425 void unimplemented()
30325                                           ! 4426 {
30326                                           export	_unimplemented
30327                       00007DCE            _unimplemented:
30328                                           ! 4427  printf("--> Unimplemented\n");
30329 7DCE           55                         push	bp
30330 7DCF           89E5                       mov	bp,sp
30331                                           ! Debug: list * char = .2AF+0 (used reg = )
30332 7DD1           BB                   A542  mov	bx,#.2AF
30333 7DD4           53                         push	bx
30334                                           ! Debug: func () void = printf+0 (used reg = )
30335 7DD5           E8         0012            call	_printf
30336 7DD8           89EC                       mov	sp,bp
30337                                           !BCC_EOS
30338                                           ! 4428 }
30339 7DDA           5D                         pop	bp
30340 7DDB           C3                         ret
30341                                           ! 4429 void unknown()
30342                                           ! Register BX used in function unimplemented
30343                                           ! 4430 {
30344                                           export	_unknown
30345                       00007DDC            _unknown:
30346                                           ! 4431  printf("--> Unknown int10\n");
30347 7DDC           55                         push	bp
30348 7DDD           89E5                       mov	bp,sp
30349                                           ! Debug: list * char = .2B0+0 (used reg = )
30350 7DDF           BB                   A52F  mov	bx,#.2B0
30351 7DE2           53                         push	bx
30352                                           ! Debug: func () void = printf+0 (used reg = )
30353 7DE3           E8         0004            call	_printf
30354 7DE6           89EC                       mov	sp,bp
30355                                           !BCC_EOS
30356                                           ! 4432 }
30357 7DE8           5D                         pop	bp
30358 7DE9           C3                         ret
30359                                           ! 4433 void printf(s)
30360                                           ! Register BX used in function unknown
30361                                           ! 4434   Bit8u *s;
30362                                           export	_printf
30363                       00007DEA            _printf:
30364                                           !BCC_EOS
30365                                           ! 4435 {
30366                                           ! 4436   Bit8u c, format_char;
30367                                           !BCC_EOS
30368                                           ! 4437   Boolean in_format;
30369                                           !BCC_EOS
30370                                           ! 4438   unsigned format_width, i;
30371                                           !BCC_EOS
30372                                           ! 4439   Bit16u *arg_ptr;
30373                                           !BCC_EOS
30374                                           ! 4440   Bit16u arg_seg, arg, digit, nibble, shift_count;
30375                                           !BCC_EOS
30376                                           ! 4441   arg_ptr = &s;
30377 7DEA           55                         push	bp
30378 7DEB           89E5                       mov	bp,sp
30379 7DED           83C4                   EC  add	sp,*-$14
30380                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30381 7DF0           8D5E         04            lea	bx,4[bp]
30382 7DF3           895E         F6            mov	-$A[bp],bx
30383                                           !BCC_EOS
30384                                           ! 4442   arg_seg = get_SS();
30385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30386 7DF6           E8         FFD2            call	_get_SS
30387                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30388 7DF9           8946         F4            mov	-$C[bp],ax
30389                                           !BCC_EOS
30390                                           ! 4443   in_format = 0;
30391                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30392 7DFC           31C0                       xor	ax,ax
30393 7DFE           8946         FC            mov	-4[bp],ax
30394                                           !BCC_EOS
30395                                           ! 4444   format_width = 0;
30396                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30397 7E01           31C0                       xor	ax,ax
30398 7E03           8946         FA            mov	-6[bp],ax
30399                                           !BCC_EOS
30400                                           ! 4445   while (c = read_byte(0xc000, s)) {
30401 7E06           E9         0104            br 	.2B2
30402                       00007E09            .2B3:
30403                                           ! 4446     if ( c == '%' ) {
30404                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30405 7E09           8A46         FF            mov	al,-1[bp]
30406 7E0C           3C                     25  cmp	al,*$25
30407 7E0E           75           0E            jne 	.2B4
30408                       00007E10            .2B5:
30409                                           ! 4447       in_format = 1;
30410                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30411 7E10           B8                   0001  mov	ax,*1
30412 7E13           8946         FC            mov	-4[bp],ax
30413                                           !BCC_EOS
30414                                           ! 4448       format_width = 0;
30415                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30416 7E16           31C0                       xor	ax,ax
30417 7E18           8946         FA            mov	-6[bp],ax
30418                                           !BCC_EOS
30419                                           ! 4449       }
30420                                           ! 4450     else if (in_format) {
30421 7E1B           E9         00E8            br 	.2B6
30422                       00007E1E            .2B4:
30423 7E1E           8B46         FC            mov	ax,-4[bp]
30424 7E21           85C0                       test	ax,ax
30425 7E23         0F84         00CF            beq 	.2B7
30426                       00007E27            .2B8:
30427                                           ! 4451       if ( (c>='0') && (c<='9') ) {
30428                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30429 7E27           8A46         FF            mov	al,-1[bp]
30430 7E2A           3C                     30  cmp	al,*$30
30431 7E2C           72           28            jb  	.2B9
30432                       00007E2E            .2BB:
30433                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30434 7E2E           8A46         FF            mov	al,-1[bp]
30435 7E31           3C                     39  cmp	al,*$39
30436 7E33           77           21            ja  	.2B9
30437                       00007E35            .2BA:
30438                                           ! 4452         format_width = (format_width * 10) + (c - '0');
30439                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30440 7E35           8A46         FF            mov	al,-1[bp]
30441 7E38           30E4                       xor	ah,ah
30442 7E3A           05                   FFD0  add	ax,*-$30
30443 7E3D           50                         push	ax
30444                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30445 7E3E           8B46         FA            mov	ax,-6[bp]
30446 7E41           89C2                       mov	dx,ax
30447 7E43           D1E0                       shl	ax,*1
30448 7E45           D1E0                       shl	ax,*1
30449 7E47           01D0                       add	ax,dx
30450 7E49           D1E0                       shl	ax,*1
30451                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30452 7E4B           0346         EA            add	ax,-$16[bp]
30453 7E4E           44                         inc	sp
30454 7E4F           44                         inc	sp
30455                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30456 7E50           8946         FA            mov	-6[bp],ax
30457                                           !BCC_EOS
30458                                           ! 4453         }
30459                                           ! 4454       else if (c == 'x') {
30460 7E53           E9         009E            br 	.2BC
30461                       00007E56            .2B9:
30462                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30463 7E56           8A46         FF            mov	al,-1[bp]
30464 7E59           3C                     78  cmp	al,*$78
30465 7E5B         0F85         0095            bne 	.2BD
30466                       00007E5F            .2BE:
30467                                           ! 4455         arg_ptr++;
30468                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30469 7E5F           8B5E         F6            mov	bx,-$A[bp]
30470 7E62           43                         inc	bx
30471 7E63           43                         inc	bx
30472 7E64           895E         F6            mov	-$A[bp],bx
30473                                           !BCC_EOS
30474                                           ! 4456         arg = read_word(arg_seg, arg_ptr);
30475                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30476 7E67           FF76         F6            push	-$A[bp]
30477                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30478 7E6A           FF76         F4            push	-$C[bp]
30479                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30480 7E6D           E8         FEE2            call	_read_word
30481 7E70           83C4                   04  add	sp,*4
30482                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30483 7E73           8946         F2            mov	-$E[bp],ax
30484                                           !BCC_EOS
30485                                           ! 4457         if (format_width == 0)
30486                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30487 7E76           8B46         FA            mov	ax,-6[bp]
30488 7E79           85C0                       test	ax,ax
30489 7E7B           75           06            jne 	.2BF
30490                       00007E7D            .2C0:
30491                                           ! 4458           format_width = 4;
30492                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30493 7E7D           B8                   0004  mov	ax,*4
30494 7E80           8946         FA            mov	-6[bp],ax
30495                                           !BCC_EOS
30496                                           ! 4459         i = 0;
30497                       00007E83            .2BF:
30498                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30499 7E83           31C0                       xor	ax,ax
30500 7E85           8946         F8            mov	-8[bp],ax
30501                                           !BCC_EOS
30502                                           ! 4460         digit = format_width - 1;
30503                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30504 7E88           8B46         FA            mov	ax,-6[bp]
30505                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30506 7E8B           48                         dec	ax
30507 7E8C           8946         F0            mov	-$10[bp],ax
30508                                           !BCC_EOS
30509                                           ! 4461         for (i=0; i<format_width; i++) {
30510                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30511 7E8F           31C0                       xor	ax,ax
30512 7E91           8946         F8            mov	-8[bp],ax
30513                                           !BCC_EOS
30514                                           !BCC_EOS
30515 7E94           EB           51            jmp .2C3
30516                       00007E96            .2C4:
30517                                           ! 4462           nibble = (arg >> (4 * digit)) & 0x000f;
30518                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30519                                           ! Debug: expression subtree swapping
30520 7E96           8B46         F0            mov	ax,-$10[bp]
30521 7E99           D1E0                       shl	ax,*1
30522 7E9B           D1E0                       shl	ax,*1
30523                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30524 7E9D           89C3                       mov	bx,ax
30525 7E9F           8B46         F2            mov	ax,-$E[bp]
30526 7EA2           89D9                       mov	cx,bx
30527 7EA4           D3E8                       shr	ax,cl
30528                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30529 7EA6           24                     0F  and	al,*$F
30530                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30531 7EA8           30E4                       xor	ah,ah
30532 7EAA           8946         EE            mov	-$12[bp],ax
30533                                           !BCC_EOS
30534                                           ! 4463           if (nibble <= 9)
30535                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30536 7EAD           8B46         EE            mov	ax,-$12[bp]
30537 7EB0           3D                   0009  cmp	ax,*9
30538 7EB3           77           13            ja  	.2C5
30539                       00007EB5            .2C6:
30540                                           ! 4464             outb(0x0500, nibble + '0');
30541                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30542 7EB5           8B46         EE            mov	ax,-$12[bp]
30543                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30544 7EB8           05                   0030  add	ax,*$30
30545 7EBB           50                         push	ax
30546                                           ! Debug: list int = const $500 (used reg = )
30547 7EBC           B8                   0500  mov	ax,#$500
30548 7EBF           50                         push	ax
30549                                           ! Debug: func () void = outb+0 (used reg = )
30550 7EC0           E8         FEE8            call	_outb
30551 7EC3           83C4                   04  add	sp,*4
30552                                           !BCC_EOS
30553                                           ! 4465           else
30554                                           ! 4466             outb(0x0500, (nibble - 10) + 'A');
30555 7EC6           EB           11            jmp .2C7
30556                       00007EC8            .2C5:
30557                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30558 7EC8           8B46         EE            mov	ax,-$12[bp]
30559                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30560                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30561 7ECB           05                   0037  add	ax,*$37
30562 7ECE           50                         push	ax
30563                                           ! Debug: list int = const $500 (used reg = )
30564 7ECF           B8                   0500  mov	ax,#$500
30565 7ED2           50                         push	ax
30566                                           ! Debug: func () void = outb+0 (used reg = )
30567 7ED3           E8         FED5            call	_outb
30568 7ED6           83C4                   04  add	sp,*4
30569                                           !BCC_EOS
30570                                           ! 4467           digit--;
30571                       00007ED9            .2C7:
30572                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30573 7ED9           8B46         F0            mov	ax,-$10[bp]
30574 7EDC           48                         dec	ax
30575 7EDD           8946         F0            mov	-$10[bp],ax
30576                                           !BCC_EOS
30577                                           ! 4468           }
30578                                           ! 4469         in_format = 0;
30579                       00007EE0            .2C2:
30580                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30581 7EE0           8B46         F8            mov	ax,-8[bp]
30582 7EE3           40                         inc	ax
30583 7EE4           8946         F8            mov	-8[bp],ax
30584                       00007EE7            .2C3:
30585                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30586 7EE7           8B46         F8            mov	ax,-8[bp]
30587 7EEA           3B46         FA            cmp	ax,-6[bp]
30588 7EED           72           A7            jb 	.2C4
30589                       00007EEF            .2C8:
30590                       00007EEF            .2C1:
30591                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30592 7EEF           31C0                       xor	ax,ax
30593 7EF1           8946         FC            mov	-4[bp],ax
30594                                           !BCC_EOS
30595                                           ! 4470         }
30596                                           ! 4471       }
30597                       00007EF4            .2BD:
30598                       00007EF4            .2BC:
30599                                           ! 4472     else {
30600 7EF4           EB           10            jmp .2C9
30601                       00007EF6            .2B7:
30602                                           ! 4473       outb(0x0500, c);
30603                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30604 7EF6           8A46         FF            mov	al,-1[bp]
30605 7EF9           30E4                       xor	ah,ah
30606 7EFB           50                         push	ax
30607                                           ! Debug: list int = const $500 (used reg = )
30608 7EFC           B8                   0500  mov	ax,#$500
30609 7EFF           50                         push	ax
30610                                           ! Debug: func () void = outb+0 (used reg = )
30611 7F00           E8         FEA8            call	_outb
30612 7F03           83C4                   04  add	sp,*4
30613                                           !BCC_EOS
30614                                           ! 4474       }
30615                                           ! 4475     s ++;
30616                       00007F06            .2C9:
30617                       00007F06            .2B6:
30618                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30619 7F06           8B5E         04            mov	bx,4[bp]
30620 7F09           43                         inc	bx
30621 7F0A           895E         04            mov	4[bp],bx
30622                                           !BCC_EOS
30623                                           ! 4476     }
30624                                           ! 4477 }
30625                       00007F0D            .2B2:
30626                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30627 7F0D           FF76         04            push	4[bp]
30628                                           ! Debug: list unsigned int = const $C000 (used reg = )
30629 7F10           B8                   C000  mov	ax,#$C000
30630 7F13           50                         push	ax
30631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30632 7F14           E8         FE28            call	_read_byte
30633 7F17           83C4                   04  add	sp,*4
30634                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30635 7F1A           8846         FF            mov	-1[bp],al
30636 7F1D           84C0                       test	al,al
30637 7F1F         0F85         FEE6            bne 	.2B3
30638                       00007F23            .2CA:
30639                       00007F23            .2B1:
30640 7F23           89EC                       mov	sp,bp
30641 7F25           5D                         pop	bp
30642 7F26           C3                         ret
30643                                           ! 4478 #asm
30644                                           !BCC_ASM
30645                       00000002            _printf.s	set	2
30646                                             ; get LFB address from PCI
30647                                             ; in - ax: PCI device vendor
30648                                             ; out - ax: LFB address (high 16 bit)
30649                                             ;; NOTE - may be called in protected mode
30650                       00007F27            _pci_get_lfb_addr:
30651 7F27           53                           push bx
30652 7F28           51                           push cx
30653 7F29           52                           push dx
30654 7F2A     66    50                           push eax
30655 7F2C           89C3                           mov bx, ax
30656 7F2E           31C9                           xor cx, cx
30657 7F30           B2                     00      mov dl, #0x00
30658 7F32           E8         003D                call pci_read_reg
30659 7F35           3D                   FFFF      cmp ax, #0xffff
30660 7F38           74           12                jz pci_get_lfb_addr_fail
30661                       00007F3A             pci_get_lfb_addr_next_dev:
30662 7F3A           B2                     00      mov dl, #0x00
30663 7F3C           E8         0033                call pci_read_reg
30664 7F3F           39D8                           cmp ax, bx ;; check vendor
30665 7F41           74           0D                jz pci_get_lfb_addr_found
30666 7F43           83C1                   08      add cx, #0x8
30667 7F46           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30668 7F4A           72           EE                jb pci_get_lfb_addr_next_dev
30669                       00007F4C             pci_get_lfb_addr_fail:
30670 7F4C           31D2                           xor dx, dx ;; no LFB
30671 7F4E           EB           1A                jmp pci_get_lfb_addr_return
30672                       00007F50             pci_get_lfb_addr_found:
30673 7F50           B2                     10      mov dl, #0x10 ;; I/O space #0
30674 7F52           E8         001D                call pci_read_reg
30675 7F55           A9                   FFF1      test ax, #0xfff1
30676 7F58           74           0A                jz pci_get_lfb_addr_success
30677 7F5A           B2                     14      mov dl, #0x14 ;; I/O space #1
30678 7F5C           E8         0013                call pci_read_reg
30679 7F5F           A9                   FFF1      test ax, #0xfff1
30680 7F62           75           E8                jnz pci_get_lfb_addr_fail
30681                       00007F64             pci_get_lfb_addr_success:
30682 7F64     66    C1E8                   10      shr eax, #16
30683 7F68           89C2                           mov dx, ax ;; LFB address
30684                       00007F6A             pci_get_lfb_addr_return:
30685 7F6A     66    58                           pop eax
30686 7F6C           89D0                         mov ax, dx
30687 7F6E           5A                           pop dx
30688 7F6F           59                           pop cx
30689 7F70           5B                           pop bx
30690 7F71           C3                           ret
30691                                             ; read PCI register
30692                                             ; in - cx: device/function
30693                                             ; in - dl: register
30694                                             ; out - eax: value
30695                       00007F72            pci_read_reg:
30696 7F72     66    B8               00800000    mov eax, #0x00800000
30697 7F78           89C8                         mov ax, cx
30698 7F7A     66    C1E0                   08    shl eax, #8
30699 7F7E           88D0                         mov al, dl
30700 7F80           BA                   0CF8    mov dx, #0xcf8
30701 7F83     66    EF                           out dx, eax
30702 7F85           80C2                   04    add dl, #4
30703 7F88     66    ED                           in eax, dx
30704 7F8A           C3                           ret
30705                                           ! 4538 endasm
30706                                           !BCC_ENDASM
30707                                           ! 4539 static ModeInfoListItem mode_info_list[]=
30708                                           ! Register BX used in function printf
30709                                           ! 4540 {
30710                                           
30711                       00007F8B            _mode_info_list:
30712                                           ! 4541 { 0x0100,
30713 7F8B                      0100            .word	$100
30714                                           ! 4542 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30715 7F8D                      009B            .word	$9B
30716                                           ! 4543                           0x01 | 0x02 | 0x04,
30717 7F8F                        07            .byte	7
30718                                           ! 4544                           0,
30719 7F90                        00            .byte	0
30720                                           ! 4545                           64,
30721 7F91                      0040            .word	$40
30722                                           ! 4546                    64,
30723 7F93                      0040            .word	$40
30724                                           ! 4547                        0xA000,
30725 7F95                      A000            .word	$A000
30726                                           ! 4548                        0x0000,
30727 7F97                      0000            .word	0
30728                                           ! 4549                       0,
30729 7F99                      0000            .word	0
30730 7F9B                      0000            .word	0
30731                                           ! 4550                             640,
30732 7F9D                      0280            .word	$280
30733                                           ! 4551                        640,
30734 7F9F                      0280            .word	$280
30735                                           ! 4552                        400,
30736 7FA1                      0190            .word	$190
30737                                           ! 4553                      8,
30738 7FA3                        08            .byte	8
30739                                           ! 4554                      16,
30740 7FA4                        10            .byte	$10
30741                                           ! 4555                           1,
30742 7FA5                        01            .byte	1
30743                                           ! 4556                         8,
30744 7FA6                        08            .byte	8
30745                                           ! 4557                          4,
30746 7FA7                        04            .byte	4
30747                                           ! 4558                        0x04,
30748 7FA8                        04            .byte	4
30749                                           ! 4559                     0,
30750 7FA9                        00            .byte	0
30751                                           ! 4560                               64,
30752 7FAA                        40            .byte	$40
30753                                           ! 4561                          0,
30754 7FAB                        00            .byte	0
30755                                           ! 4562                        0,
30756 7FAC                        00            .byte	0
30757                                           ! 4563                             0,
30758 7FAD                        00            .byte	0
30759                                           ! 4564                          0,
30760 7FAE                        00            .byte	0
30761                                           ! 4565                               0,
30762 7FAF                        00            .byte	0
30763                                           ! 4566                         0,
30764 7FB0                        00            .byte	0
30765                                           ! 4567                              0,
30766 7FB1                        00            .byte	0
30767                                           ! 4568                         0,
30768 7FB2                        00            .byte	0
30769                                           ! 4569                              0,
30770 7FB3                        00            .byte	0
30771                                           ! 4570                                0,
30772 7FB4                        00            .byte	0
30773                                           ! 4571                        0xE0000000,
30774 7FB5                      0000            .word	0
30775 7FB7                      E000            .word	$E000
30776                                           ! 4572                               0,
30777 7FB9                      0000            .word	0
30778 7FBB                      0000            .word	0
30779                                           ! 4573                             0,
30780 7FBD                      0000            .word	0
30781                                           ! 4574                                640,
30782 7FBF                      0280            .word	$280
30783                                           ! 4575              
30784                                           ! 4575                0,
30785 7FC1                        00            .byte	0
30786                                           ! 4576                             0,
30787 7FC2                        00            .byte	0
30788                                           ! 4577                           0,
30789 7FC3                        00            .byte	0
30790                                           ! 4578                                0,
30791 7FC4                        00            .byte	0
30792                                           ! 4579                             0,
30793 7FC5                        00            .byte	0
30794                                           ! 4580                                  0,
30795 7FC6                        00            .byte	0
30796                                           ! 4581                            0,
30797 7FC7                        00            .byte	0
30798                                           ! 4582                                 0,
30799 7FC8                        00            .byte	0
30800                                           ! 4583                            0,
30801 7FC9                        00            .byte	0
30802                                           ! 4584                                 0,
30803 7FCA                        00            .byte	0
30804                                           ! 4585                          0,
30805 7FCB                      0000            .word	0
30806 7FCD                      0000            .word	0
30807                                           ! 4586 } },
30808                                           ! 4587 { 0x0101,
30809 7FCF                      0101            .word	$101
30810                                           ! 4588 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30811 7FD1                      009B            .word	$9B
30812                                           ! 4589                           0x01 | 0x02 | 0x04,
30813 7FD3                        07            .byte	7
30814                                           ! 4590                           0,
30815 7FD4                        00            .byte	0
30816                                           ! 4591                           64,
30817 7FD5                      0040            .word	$40
30818                                           ! 4592                    64,
30819 7FD7                      0040            .word	$40
30820                                           ! 4593                        0xA000,
30821 7FD9                      A000            .word	$A000
30822                                           ! 4594                        0x0000,
30823 7FDB                      0000            .word	0
30824                                           ! 4595                       0,
30825 7FDD                      0000            .word	0
30826 7FDF                      0000            .word	0
30827                                           ! 4596                             640,
30828 7FE1                      0280            .word	$280
30829                                           ! 4597                        640,
30830 7FE3                      0280            .word	$280
30831                                           ! 4598                        480,
30832 7FE5                      01E0            .word	$1E0
30833                                           ! 4599                      8,
30834 7FE7                        08            .byte	8
30835                                           ! 4600                      16,
30836 7FE8                        10            .byte	$10
30837                                           ! 4601                           1,
30838 7FE9                        01            .byte	1
30839                                           ! 4602                         8,
30840 7FEA                        08            .byte	8
30841                                           ! 4603                          5,
30842 7FEB                        05            .byte	5
30843                                           ! 4604                        0x04,
30844 7FEC                        04            .byte	4
30845                                           ! 4605                     0,
30846 7FED                        00            .byte	0
30847                                           ! 4606                               53,
30848 7FEE                        35            .byte	$35
30849                                           ! 4607                          0,
30850 7FEF                        00            .byte	0
30851                                           ! 4608                        0,
30852 7FF0                        00            .byte	0
30853                                           ! 4609                             0,
30854 7FF1                        00            .byte	0
30855                                           ! 4610                          0,
30856 7FF2                        00            .byte	0
30857                                           ! 4611                               0,
30858 7FF3                        00            .byte	0
30859                                           ! 4612                         0,
30860 7FF4                        00            .byte	0
30861                                           ! 4613                              0,
30862 7FF5                        00            .byte	0
30863                                           ! 4614                         0,
30864 7FF6                        00            .byte	0
30865                                           ! 4615                              0,
30866 7FF7                        00            .byte	0
30867                                           ! 4616                                0,
30868 7FF8                        00            .byte	0
30869                                           ! 4617                        0xE0000000,
30870 7FF9                      0000            .word	0
30871 7FFB                      E000            .word	$E000
30872                                           ! 4618                               0,
30873 7FFD                      0000            .word	0
30874 7FFF                      0000            .word	0
30875                                           ! 4619                             0,
30876 8001                      0000            .word	0
30877                                           ! 4620                                640,
30878 8003                      0280            .word	$280
30879                                           ! 4621                             0,
30880 8005                        00            .byte	0
30881                                           ! 4622                             0,
30882 8006                        00            .byte	0
30883                                           ! 4623                           0,
30884 8007                        00            .byte	0
30885                                           ! 4624                                0,
30886 8008                        00            .byte	0
30887                                           ! 4625                             0,
30888 8009                        00            .byte	0
30889                                           ! 4626                                  0,
30890 800A                        00            .byte	0
30891                                           ! 4627                            0,
30892 800B                        00            .byte	0
30893                                           ! 4628                                 0,
30894 800C                        00            .byte	0
30895                                           ! 4629                            0,
30896 800D                        00            .byte	0
30897                                           ! 4630                                 0,
30898 800E                        00            .byte	0
30899                                           ! 4631                          0,
30900 800F                      0000            .word	0
30901 8011                      0000            .word	0
30902                                           ! 4632 } },
30903                                           ! 4633 { 0x0102,
30904 8013                      0102            .word	$102
30905                                           ! 4634 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30906 8015                      001F            .word	$1F
30907                                           ! 4635                           0x01 | 0x02 | 0x04,
30908 8017                        07            .byte	7
30909                                           ! 4636                           0,
30910 8018                        00            .byte	0
30911                                           ! 4637                           64,
30912 8019                      0040            .word	$40
30913                                           ! 4638                    64,
30914 801B                      0040            .word	$40
30915                                           ! 4639                        0xA000,
30916 801D                      A000            .word	$A000
30917                                           ! 4640                        0x0000,
30918 801F                      0000            .word	0
30919                                           ! 4641                       0,
30920 8021                      0000            .word	0
30921 8023                      0000            .word	0
30922                                           ! 4642                             100,
30923 8025                      0064            .word	$64
30924                                           ! 4643                        800,
30925 8027                      0320            .word	$320
30926                                           ! 4644        
30927                                           ! 4644                 600,
30928 8029                      0258            .word	$258
30929                                           ! 4645                      8,
30930 802B                        08            .byte	8
30931                                           ! 4646                      16,
30932 802C                        10            .byte	$10
30933                                           ! 4647                           4,
30934 802D                        04            .byte	4
30935                                           ! 4648                         4,
30936 802E                        04            .byte	4
30937                                           ! 4649                          1,
30938 802F                        01            .byte	1
30939                                           ! 4650                        0x03,
30940 8030                        03            .byte	3
30941                                           ! 4651                     0,
30942 8031                        00            .byte	0
30943                                           ! 4652                               68,
30944 8032                        44            .byte	$44
30945                                           ! 4653                          0,
30946 8033                        00            .byte	0
30947                                           ! 4654                        0,
30948 8034                        00            .byte	0
30949                                           ! 4655                             0,
30950 8035                        00            .byte	0
30951                                           ! 4656                          0,
30952 8036                        00            .byte	0
30953                                           ! 4657                               0,
30954 8037                        00            .byte	0
30955                                           ! 4658                         0,
30956 8038                        00            .byte	0
30957                                           ! 4659                              0,
30958 8039                        00            .byte	0
30959                                           ! 4660                         0,
30960 803A                        00            .byte	0
30961                                           ! 4661                              0,
30962 803B                        00            .byte	0
30963                                           ! 4662                                0,
30964 803C                        00            .byte	0
30965                                           ! 4663                        0,
30966 803D                      0000            .word	0
30967 803F                      0000            .word	0
30968                                           ! 4664                               0,
30969 8041                      0000            .word	0
30970 8043                      0000            .word	0
30971                                           ! 4665                             0,
30972 8045                      0000            .word	0
30973                                           ! 4666                                100,
30974 8047                      0064            .word	$64
30975                                           ! 4667                             0,
30976 8049                        00            .byte	0
30977                                           ! 4668                             0,
30978 804A                        00            .byte	0
30979                                           ! 4669                           0,
30980 804B                        00            .byte	0
30981                                           ! 4670                                0,
30982 804C                        00            .byte	0
30983                                           ! 4671                             0,
30984 804D                        00            .byte	0
30985                                           ! 4672                                  0,
30986 804E                        00            .byte	0
30987                                           ! 4673                            0,
30988 804F                        00            .byte	0
30989                                           ! 4674                                 0,
30990 8050                        00            .byte	0
30991                                           ! 4675                            0,
30992 8051                        00            .byte	0
30993                                           ! 4676                                 0,
30994 8052                        00            .byte	0
30995                                           ! 4677                          0,
30996 8053                      0000            .word	0
30997 8055                      0000            .word	0
30998                                           ! 4678 } },
30999                                           ! 4679 { 0x0103,
31000 8057                      0103            .word	$103
31001                                           ! 4680 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31002 8059                      009B            .word	$9B
31003                                           ! 4681                           0x01 | 0x02 | 0x04,
31004 805B                        07            .byte	7
31005                                           ! 4682                           0,
31006 805C                        00            .byte	0
31007                                           ! 4683                           64,
31008 805D                      0040            .word	$40
31009                                           ! 4684                    64,
31010 805F                      0040            .word	$40
31011                                           ! 4685                        0xA000,
31012 8061                      A000            .word	$A000
31013                                           ! 4686                        0x0000,
31014 8063                      0000            .word	0
31015                                           ! 4687                       0,
31016 8065                      0000            .word	0
31017 8067                      0000            .word	0
31018                                           ! 4688                             800,
31019 8069                      0320            .word	$320
31020                                           ! 4689                        800,
31021 806B                      0320            .word	$320
31022                                           ! 4690                        600,
31023 806D                      0258            .word	$258
31024                                           ! 4691                      8,
31025 806F                        08            .byte	8
31026                                           ! 4692                      16,
31027 8070                        10            .byte	$10
31028                                           ! 4693                           1,
31029 8071                        01            .byte	1
31030                                           ! 4694                         8,
31031 8072                        08            .byte	8
31032                                           ! 4695                          8,
31033 8073                        08            .byte	8
31034                                           ! 4696                        0x04,
31035 8074                        04            .byte	4
31036                                           ! 4697                     0,
31037 8075                        00            .byte	0
31038                                           ! 4698                               33,
31039 8076                        21            .byte	$21
31040                                           ! 4699                          0,
31041 8077                        00            .byte	0
31042                                           ! 4700                        0,
31043 8078                        00            .byte	0
31044                                           ! 4701                             0,
31045 8079                        00            .byte	0
31046                                           ! 4702                          0,
31047 807A                        00            .byte	0
31048                                           ! 4703                               0,
31049 807B                        00            .byte	0
31050                                           ! 4704                         0,
31051 807C                        00            .byte	0
31052                                           ! 4705                              0,
31053 807D                        00            .byte	0
31054                                           ! 4706                         0,
31055 807E                        00            .byte	0
31056                                           ! 4707                              0,
31057 807F                        00            .byte	0
31058                                           ! 4708                                0,
31059 8080                        00            .byte	0
31060                                           ! 4709                        0xE0000000,
31061 8081                      0000            .word	0
31062 8083                      E000            .word	$E000
31063                                           ! 4710                               0,
31064 8085                      0000            .word	0
31065 8087                      0000            .word	0
31066                                           ! 4711                             0,
31067 8089                      0000            .word	0
31068                                           ! 4712                                800,
31069 808B                      0320            .word	$320
31070                                           ! 4713                  
31071                                           ! 4713            0,
31072 808D                        00            .byte	0
31073                                           ! 4714                             0,
31074 808E                        00            .byte	0
31075                                           ! 4715                           0,
31076 808F                        00            .byte	0
31077                                           ! 4716                                0,
31078 8090                        00            .byte	0
31079                                           ! 4717                             0,
31080 8091                        00            .byte	0
31081                                           ! 4718                                  0,
31082 8092                        00            .byte	0
31083                                           ! 4719                            0,
31084 8093                        00            .byte	0
31085                                           ! 4720                                 0,
31086 8094                        00            .byte	0
31087                                           ! 4721                            0,
31088 8095                        00            .byte	0
31089                                           ! 4722                                 0,
31090 8096                        00            .byte	0
31091                                           ! 4723                          0,
31092 8097                      0000            .word	0
31093 8099                      0000            .word	0
31094                                           ! 4724 } },
31095                                           ! 4725 { 0x0104,
31096 809B                      0104            .word	$104
31097                                           ! 4726 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31098 809D                      001F            .word	$1F
31099                                           ! 4727                           0x01 | 0x02 | 0x04,
31100 809F                        07            .byte	7
31101                                           ! 4728                           0,
31102 80A0                        00            .byte	0
31103                                           ! 4729                           64,
31104 80A1                      0040            .word	$40
31105                                           ! 4730                    64,
31106 80A3                      0040            .word	$40
31107                                           ! 4731                        0xA000,
31108 80A5                      A000            .word	$A000
31109                                           ! 4732                        0x0000,
31110 80A7                      0000            .word	0
31111                                           ! 4733                       0,
31112 80A9                      0000            .word	0
31113 80AB                      0000            .word	0
31114                                           ! 4734                             128,
31115 80AD                      0080            .word	$80
31116                                           ! 4735                        1024,
31117 80AF                      0400            .word	$400
31118                                           ! 4736                        768,
31119 80B1                      0300            .word	$300
31120                                           ! 4737                      8,
31121 80B3                        08            .byte	8
31122                                           ! 4738                      16,
31123 80B4                        10            .byte	$10
31124                                           ! 4739                           4,
31125 80B5                        04            .byte	4
31126                                           ! 4740                         4,
31127 80B6                        04            .byte	4
31128                                           ! 4741                          2,
31129 80B7                        02            .byte	2
31130                                           ! 4742                        0x03,
31131 80B8                        03            .byte	3
31132                                           ! 4743                     0,
31133 80B9                        00            .byte	0
31134                                           ! 4744                               41,
31135 80BA                        29            .byte	$29
31136                                           ! 4745                          0,
31137 80BB                        00            .byte	0
31138                                           ! 4746                        0,
31139 80BC                        00            .byte	0
31140                                           ! 4747                             0,
31141 80BD                        00            .byte	0
31142                                           ! 4748                          0,
31143 80BE                        00            .byte	0
31144                                           ! 4749                               0,
31145 80BF                        00            .byte	0
31146                                           ! 4750                         0,
31147 80C0                        00            .byte	0
31148                                           ! 4751                              0,
31149 80C1                        00            .byte	0
31150                                           ! 4752                         0,
31151 80C2                        00            .byte	0
31152                                           ! 4753                              0,
31153 80C3                        00            .byte	0
31154                                           ! 4754                                0,
31155 80C4                        00            .byte	0
31156                                           ! 4755                        0,
31157 80C5                      0000            .word	0
31158 80C7                      0000            .word	0
31159                                           ! 4756                               0,
31160 80C9                      0000            .word	0
31161 80CB                      0000            .word	0
31162                                           ! 4757                             0,
31163 80CD                      0000            .word	0
31164                                           ! 4758                                128,
31165 80CF                      0080            .word	$80
31166                                           ! 4759                             0,
31167 80D1                        00            .byte	0
31168                                           ! 4760                             0,
31169 80D2                        00            .byte	0
31170                                           ! 4761                           0,
31171 80D3                        00            .byte	0
31172                                           ! 4762                                0,
31173 80D4                        00            .byte	0
31174                                           ! 4763                             0,
31175 80D5                        00            .byte	0
31176                                           ! 4764                                  0,
31177 80D6                        00            .byte	0
31178                                           ! 4765                            0,
31179 80D7                        00            .byte	0
31180                                           ! 4766                                 0,
31181 80D8                        00            .byte	0
31182                                           ! 4767                            0,
31183 80D9                        00            .byte	0
31184                                           ! 4768                                 0,
31185 80DA                        00            .byte	0
31186                                           ! 4769                          0,
31187 80DB                      0000            .word	0
31188 80DD                      0000            .word	0
31189                                           ! 4770 } },
31190                                           ! 4771 { 0x0105,
31191 80DF                      0105            .word	$105
31192                                           ! 4772 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31193 80E1                      009B            .word	$9B
31194                                           ! 4773                           0x01 | 0x02 | 0x04,
31195 80E3                        07            .byte	7
31196                                           ! 4774                           0,
31197 80E4                        00            .byte	0
31198                                           ! 4775                           64,
31199 80E5                      0040            .word	$40
31200                                           ! 4776                    64,
31201 80E7                      0040            .word	$40
31202                                           ! 4777                        0xA000,
31203 80E9                      A000            .word	$A000
31204                                           ! 4778                        0x0000,
31205 80EB                      0000            .word	0
31206                                           ! 4779                       0,
31207 80ED                      0000            .word	0
31208 80EF                      0000            .word	0
31209                                           ! 4780                             1024,
31210 80F1                      0400            .word	$400
31211                                           ! 4781                        1024,
31212 80F3                      0400            .word	$400
31213                                           ! 4782                  
31214                                           ! 4782       768,
31215 80F5                      0300            .word	$300
31216                                           ! 4783                      8,
31217 80F7                        08            .byte	8
31218                                           ! 4784                      16,
31219 80F8                        10            .byte	$10
31220                                           ! 4785                           1,
31221 80F9                        01            .byte	1
31222                                           ! 4786                         8,
31223 80FA                        08            .byte	8
31224                                           ! 4787                          12,
31225 80FB                        0C            .byte	$C
31226                                           ! 4788                        0x04,
31227 80FC                        04            .byte	4
31228                                           ! 4789                     0,
31229 80FD                        00            .byte	0
31230                                           ! 4790                               20,
31231 80FE                        14            .byte	$14
31232                                           ! 4791                          0,
31233 80FF                        00            .byte	0
31234                                           ! 4792                        0,
31235 8100                        00            .byte	0
31236                                           ! 4793                             0,
31237 8101                        00            .byte	0
31238                                           ! 4794                          0,
31239 8102                        00            .byte	0
31240                                           ! 4795                               0,
31241 8103                        00            .byte	0
31242                                           ! 4796                         0,
31243 8104                        00            .byte	0
31244                                           ! 4797                              0,
31245 8105                        00            .byte	0
31246                                           ! 4798                         0,
31247 8106                        00            .byte	0
31248                                           ! 4799                              0,
31249 8107                        00            .byte	0
31250                                           ! 4800                                0,
31251 8108                        00            .byte	0
31252                                           ! 4801                        0xE0000000,
31253 8109                      0000            .word	0
31254 810B                      E000            .word	$E000
31255                                           ! 4802                               0,
31256 810D                      0000            .word	0
31257 810F                      0000            .word	0
31258                                           ! 4803                             0,
31259 8111                      0000            .word	0
31260                                           ! 4804                                1024,
31261 8113                      0400            .word	$400
31262                                           ! 4805                             0,
31263 8115                        00            .byte	0
31264                                           ! 4806                             0,
31265 8116                        00            .byte	0
31266                                           ! 4807                           0,
31267 8117                        00            .byte	0
31268                                           ! 4808                                0,
31269 8118                        00            .byte	0
31270                                           ! 4809                             0,
31271 8119                        00            .byte	0
31272                                           ! 4810                                  0,
31273 811A                        00            .byte	0
31274                                           ! 4811                            0,
31275 811B                        00            .byte	0
31276                                           ! 4812                                 0,
31277 811C                        00            .byte	0
31278                                           ! 4813                            0,
31279 811D                        00            .byte	0
31280                                           ! 4814                                 0,
31281 811E                        00            .byte	0
31282                                           ! 4815                          0,
31283 811F                      0000            .word	0
31284 8121                      0000            .word	0
31285                                           ! 4816 } },
31286                                           ! 4817 { 0x0106,
31287 8123                      0106            .word	$106
31288                                           ! 4818 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31289 8125                      001F            .word	$1F
31290                                           ! 4819                           0x01 | 0x02 | 0x04,
31291 8127                        07            .byte	7
31292                                           ! 4820                           0,
31293 8128                        00            .byte	0
31294                                           ! 4821                           64,
31295 8129                      0040            .word	$40
31296                                           ! 4822                    64,
31297 812B                      0040            .word	$40
31298                                           ! 4823                        0xA000,
31299 812D                      A000            .word	$A000
31300                                           ! 4824                        0x0000,
31301 812F                      0000            .word	0
31302                                           ! 4825                       0,
31303 8131                      0000            .word	0
31304 8133                      0000            .word	0
31305                                           ! 4826                             160,
31306 8135                      00A0            .word	$A0
31307                                           ! 4827                        1280,
31308 8137                      0500            .word	$500
31309                                           ! 4828                        1024,
31310 8139                      0400            .word	$400
31311                                           ! 4829                      8,
31312 813B                        08            .byte	8
31313                                           ! 4830                      16,
31314 813C                        10            .byte	$10
31315                                           ! 4831                           4,
31316 813D                        04            .byte	4
31317                                           ! 4832                         4,
31318 813E                        04            .byte	4
31319                                           ! 4833                          3,
31320 813F                        03            .byte	3
31321                                           ! 4834                        0x03,
31322 8140                        03            .byte	3
31323                                           ! 4835                     0,
31324 8141                        00            .byte	0
31325                                           ! 4836                               24,
31326 8142                        18            .byte	$18
31327                                           ! 4837                          0,
31328 8143                        00            .byte	0
31329                                           ! 4838                        0,
31330 8144                        00            .byte	0
31331                                           ! 4839                             0,
31332 8145                        00            .byte	0
31333                                           ! 4840                          0,
31334 8146                        00            .byte	0
31335                                           ! 4841                               0,
31336 8147                        00            .byte	0
31337                                           ! 4842                         0,
31338 8148                        00            .byte	0
31339                                           ! 4843                              0,
31340 8149                        00            .byte	0
31341                                           ! 4844                         0,
31342 814A                        00            .byte	0
31343                                           ! 4845                              0,
31344 814B                        00            .byte	0
31345                                           ! 4846                                0,
31346 814C                        00            .byte	0
31347                                           ! 4847                        0,
31348 814D                      0000            .word	0
31349 814F                      0000            .word	0
31350                                           ! 4848                               0,
31351 8151                      0000            .word	0
31352 8153                      0000            .word	0
31353                                           ! 4849                             0,
31354 8155                      0000            .word	0
31355                                           ! 4850                                160,
31356 8157                      00A0            .word	$A0
31357                                           ! 4851                        
31358                                           ! 4851      0,
31359 8159                        00            .byte	0
31360                                           ! 4852                             0,
31361 815A                        00            .byte	0
31362                                           ! 4853                           0,
31363 815B                        00            .byte	0
31364                                           ! 4854                                0,
31365 815C                        00            .byte	0
31366                                           ! 4855                             0,
31367 815D                        00            .byte	0
31368                                           ! 4856                                  0,
31369 815E                        00            .byte	0
31370                                           ! 4857                            0,
31371 815F                        00            .byte	0
31372                                           ! 4858                                 0,
31373 8160                        00            .byte	0
31374                                           ! 4859                            0,
31375 8161                        00            .byte	0
31376                                           ! 4860                                 0,
31377 8162                        00            .byte	0
31378                                           ! 4861                          0,
31379 8163                      0000            .word	0
31380 8165                      0000            .word	0
31381                                           ! 4862 } },
31382                                           ! 4863 { 0x0107,
31383 8167                      0107            .word	$107
31384                                           ! 4864 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31385 8169                      009B            .word	$9B
31386                                           ! 4865                           0x01 | 0x02 | 0x04,
31387 816B                        07            .byte	7
31388                                           ! 4866                           0,
31389 816C                        00            .byte	0
31390                                           ! 4867                           64,
31391 816D                      0040            .word	$40
31392                                           ! 4868                    64,
31393 816F                      0040            .word	$40
31394                                           ! 4869                        0xA000,
31395 8171                      A000            .word	$A000
31396                                           ! 4870                        0x0000,
31397 8173                      0000            .word	0
31398                                           ! 4871                       0,
31399 8175                      0000            .word	0
31400 8177                      0000            .word	0
31401                                           ! 4872                             1280,
31402 8179                      0500            .word	$500
31403                                           ! 4873                        1280,
31404 817B                      0500            .word	$500
31405                                           ! 4874                        1024,
31406 817D                      0400            .word	$400
31407                                           ! 4875                      8,
31408 817F                        08            .byte	8
31409                                           ! 4876                      16,
31410 8180                        10            .byte	$10
31411                                           ! 4877                           1,
31412 8181                        01            .byte	1
31413                                           ! 4878                         8,
31414 8182                        08            .byte	8
31415                                           ! 4879                          20,
31416 8183                        14            .byte	$14
31417                                           ! 4880                        0x04,
31418 8184                        04            .byte	4
31419                                           ! 4881                     0,
31420 8185                        00            .byte	0
31421                                           ! 4882                               11,
31422 8186                        0B            .byte	$B
31423                                           ! 4883                          0,
31424 8187                        00            .byte	0
31425                                           ! 4884                        0,
31426 8188                        00            .byte	0
31427                                           ! 4885                             0,
31428 8189                        00            .byte	0
31429                                           ! 4886                          0,
31430 818A                        00            .byte	0
31431                                           ! 4887                               0,
31432 818B                        00            .byte	0
31433                                           ! 4888                         0,
31434 818C                        00            .byte	0
31435                                           ! 4889                              0,
31436 818D                        00            .byte	0
31437                                           ! 4890                         0,
31438 818E                        00            .byte	0
31439                                           ! 4891                              0,
31440 818F                        00            .byte	0
31441                                           ! 4892                                0,
31442 8190                        00            .byte	0
31443                                           ! 4893                        0xE0000000,
31444 8191                      0000            .word	0
31445 8193                      E000            .word	$E000
31446                                           ! 4894                               0,
31447 8195                      0000            .word	0
31448 8197                      0000            .word	0
31449                                           ! 4895                             0,
31450 8199                      0000            .word	0
31451                                           ! 4896                                1280,
31452 819B                      0500            .word	$500
31453                                           ! 4897                             0,
31454 819D                        00            .byte	0
31455                                           ! 4898                             0,
31456 819E                        00            .byte	0
31457                                           ! 4899                           0,
31458 819F                        00            .byte	0
31459                                           ! 4900                                0,
31460 81A0                        00            .byte	0
31461                                           ! 4901                             0,
31462 81A1                        00            .byte	0
31463                                           ! 4902                                  0,
31464 81A2                        00            .byte	0
31465                                           ! 4903                            0,
31466 81A3                        00            .byte	0
31467                                           ! 4904                                 0,
31468 81A4                        00            .byte	0
31469                                           ! 4905                            0,
31470 81A5                        00            .byte	0
31471                                           ! 4906                                 0,
31472 81A6                        00            .byte	0
31473                                           ! 4907                          0,
31474 81A7                      0000            .word	0
31475 81A9                      0000            .word	0
31476                                           ! 4908 } },
31477                                           ! 4909 { 0x010d,
31478 81AB                      010D            .word	$10D
31479                                           ! 4910 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31480 81AD                      009B            .word	$9B
31481                                           ! 4911                           0x01 | 0x02 | 0x04,
31482 81AF                        07            .byte	7
31483                                           ! 4912                           0,
31484 81B0                        00            .byte	0
31485                                           ! 4913                           64,
31486 81B1                      0040            .word	$40
31487                                           ! 4914                    64,
31488 81B3                      0040            .word	$40
31489                                           ! 4915                        0xA000,
31490 81B5                      A000            .word	$A000
31491                                           ! 4916                        0x0000,
31492 81B7                      0000            .word	0
31493                                           ! 4917                       0,
31494 81B9                      0000            .word	0
31495 81BB                      0000            .word	0
31496                                           ! 4918                             640,
31497 81BD                      0280            .word	$280
31498                                           ! 4919                        320,
31499 81BF                      0140            .word	$140
31500                                           ! 4920             
31501                                           ! 4920            200,
31502 81C1                      00C8            .word	$C8
31503                                           ! 4921                      8,
31504 81C3                        08            .byte	8
31505                                           ! 4922                      16,
31506 81C4                        10            .byte	$10
31507                                           ! 4923                           1,
31508 81C5                        01            .byte	1
31509                                           ! 4924                         15,
31510 81C6                        0F            .byte	$F
31511                                           ! 4925                          2,
31512 81C7                        02            .byte	2
31513                                           ! 4926                        0x06,
31514 81C8                        06            .byte	6
31515                                           ! 4927                     0,
31516 81C9                        00            .byte	0
31517                                           ! 4928                               130,
31518 81CA                        82            .byte	$82
31519                                           ! 4929                          0,
31520 81CB                        00            .byte	0
31521                                           ! 4930                        5,
31522 81CC                        05            .byte	5
31523                                           ! 4931                             10,
31524 81CD                        0A            .byte	$A
31525                                           ! 4932                          5,
31526 81CE                        05            .byte	5
31527                                           ! 4933                               5,
31528 81CF                        05            .byte	5
31529                                           ! 4934                         5,
31530 81D0                        05            .byte	5
31531                                           ! 4935                              0,
31532 81D1                        00            .byte	0
31533                                           ! 4936                         1,
31534 81D2                        01            .byte	1
31535                                           ! 4937                              15,
31536 81D3                        0F            .byte	$F
31537                                           ! 4938                                0,
31538 81D4                        00            .byte	0
31539                                           ! 4939                        0xE0000000,
31540 81D5                      0000            .word	0
31541 81D7                      E000            .word	$E000
31542                                           ! 4940                               0,
31543 81D9                      0000            .word	0
31544 81DB                      0000            .word	0
31545                                           ! 4941                             0,
31546 81DD                      0000            .word	0
31547                                           ! 4942                                640,
31548 81DF                      0280            .word	$280
31549                                           ! 4943                             0,
31550 81E1                        00            .byte	0
31551                                           ! 4944                             0,
31552 81E2                        00            .byte	0
31553                                           ! 4945                           5,
31554 81E3                        05            .byte	5
31555                                           ! 4946                                10,
31556 81E4                        0A            .byte	$A
31557                                           ! 4947                             5,
31558 81E5                        05            .byte	5
31559                                           ! 4948                                  5,
31560 81E6                        05            .byte	5
31561                                           ! 4949                            5,
31562 81E7                        05            .byte	5
31563                                           ! 4950                                 0,
31564 81E8                        00            .byte	0
31565                                           ! 4951                            1,
31566 81E9                        01            .byte	1
31567                                           ! 4952                                 15,
31568 81EA                        0F            .byte	$F
31569                                           ! 4953                          0,
31570 81EB                      0000            .word	0
31571 81ED                      0000            .word	0
31572                                           ! 4954 } },
31573                                           ! 4955 { 0x010e,
31574 81EF                      010E            .word	$10E
31575                                           ! 4956 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31576 81F1                      009B            .word	$9B
31577                                           ! 4957                           0x01 | 0x02 | 0x04,
31578 81F3                        07            .byte	7
31579                                           ! 4958                           0,
31580 81F4                        00            .byte	0
31581                                           ! 4959                           64,
31582 81F5                      0040            .word	$40
31583                                           ! 4960                    64,
31584 81F7                      0040            .word	$40
31585                                           ! 4961                        0xA000,
31586 81F9                      A000            .word	$A000
31587                                           ! 4962                        0x0000,
31588 81FB                      0000            .word	0
31589                                           ! 4963                       0,
31590 81FD                      0000            .word	0
31591 81FF                      0000            .word	0
31592                                           ! 4964                             640,
31593 8201                      0280            .word	$280
31594                                           ! 4965                        320,
31595 8203                      0140            .word	$140
31596                                           ! 4966                        200,
31597 8205                      00C8            .word	$C8
31598                                           ! 4967                      8,
31599 8207                        08            .byte	8
31600                                           ! 4968                      16,
31601 8208                        10            .byte	$10
31602                                           ! 4969                           1,
31603 8209                        01            .byte	1
31604                                           ! 4970                         16,
31605 820A                        10            .byte	$10
31606                                           ! 4971                          2,
31607 820B                        02            .byte	2
31608                                           ! 4972                        0x06,
31609 820C                        06            .byte	6
31610                                           ! 4973                     0,
31611 820D                        00            .byte	0
31612                                           ! 4974                               130,
31613 820E                        82            .byte	$82
31614                                           ! 4975                          0,
31615 820F                        00            .byte	0
31616                                           ! 4976                        5,
31617 8210                        05            .byte	5
31618                                           ! 4977                             11,
31619 8211                        0B            .byte	$B
31620                                           ! 4978                          6,
31621 8212                        06            .byte	6
31622                                           ! 4979                               5,
31623 8213                        05            .byte	5
31624                                           ! 4980                         5,
31625 8214                        05            .byte	5
31626                                           ! 4981                              0,
31627 8215                        00            .byte	0
31628                                           ! 4982                         0,
31629 8216                        00            .byte	0
31630                                           ! 4983                              0,
31631 8217                        00            .byte	0
31632                                           ! 4984                                0,
31633 8218                        00            .byte	0
31634                                           ! 4985                        0xE0000000,
31635 8219                      0000            .word	0
31636 821B                      E000            .word	$E000
31637                                           ! 4986                               0,
31638 821D                      0000            .word	0
31639 821F                      0000            .word	0
31640                                           ! 4987                             0,
31641 8221                      0000            .word	0
31642                                           ! 4988                                640,
31643 8223                      0280            .word	$280
31644                                           ! 4989     
31645                                           ! 4989                         0,
31646 8225                        00            .byte	0
31647                                           ! 4990                             0,
31648 8226                        00            .byte	0
31649                                           ! 4991                           5,
31650 8227                        05            .byte	5
31651                                           ! 4992                                11,
31652 8228                        0B            .byte	$B
31653                                           ! 4993                             6,
31654 8229                        06            .byte	6
31655                                           ! 4994                                  5,
31656 822A                        05            .byte	5
31657                                           ! 4995                            5,
31658 822B                        05            .byte	5
31659                                           ! 4996                                 0,
31660 822C                        00            .byte	0
31661                                           ! 4997                            0,
31662 822D                        00            .byte	0
31663                                           ! 4998                                 0,
31664 822E                        00            .byte	0
31665                                           ! 4999                          0,
31666 822F                      0000            .word	0
31667 8231                      0000            .word	0
31668                                           ! 5000 } },
31669                                           ! 5001 { 0x010f,
31670 8233                      010F            .word	$10F
31671                                           ! 5002 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31672 8235                      009B            .word	$9B
31673                                           ! 5003                           0x01 | 0x02 | 0x04,
31674 8237                        07            .byte	7
31675                                           ! 5004                           0,
31676 8238                        00            .byte	0
31677                                           ! 5005                           64,
31678 8239                      0040            .word	$40
31679                                           ! 5006                    64,
31680 823B                      0040            .word	$40
31681                                           ! 5007                        0xA000,
31682 823D                      A000            .word	$A000
31683                                           ! 5008                        0x0000,
31684 823F                      0000            .word	0
31685                                           ! 5009                       0,
31686 8241                      0000            .word	0
31687 8243                      0000            .word	0
31688                                           ! 5010                             960,
31689 8245                      03C0            .word	$3C0
31690                                           ! 5011                        320,
31691 8247                      0140            .word	$140
31692                                           ! 5012                        200,
31693 8249                      00C8            .word	$C8
31694                                           ! 5013                      8,
31695 824B                        08            .byte	8
31696                                           ! 5014                      16,
31697 824C                        10            .byte	$10
31698                                           ! 5015                           1,
31699 824D                        01            .byte	1
31700                                           ! 5016                         24,
31701 824E                        18            .byte	$18
31702                                           ! 5017                          3,
31703 824F                        03            .byte	3
31704                                           ! 5018                        0x06,
31705 8250                        06            .byte	6
31706                                           ! 5019                     0,
31707 8251                        00            .byte	0
31708                                           ! 5020                               86,
31709 8252                        56            .byte	$56
31710                                           ! 5021                          0,
31711 8253                        00            .byte	0
31712                                           ! 5022                        8,
31713 8254                        08            .byte	8
31714                                           ! 5023                             16,
31715 8255                        10            .byte	$10
31716                                           ! 5024                          8,
31717 8256                        08            .byte	8
31718                                           ! 5025                               8,
31719 8257                        08            .byte	8
31720                                           ! 5026                         8,
31721 8258                        08            .byte	8
31722                                           ! 5027                              0,
31723 8259                        00            .byte	0
31724                                           ! 5028                         0,
31725 825A                        00            .byte	0
31726                                           ! 5029                              0,
31727 825B                        00            .byte	0
31728                                           ! 5030                                0,
31729 825C                        00            .byte	0
31730                                           ! 5031                        0xE0000000,
31731 825D                      0000            .word	0
31732 825F                      E000            .word	$E000
31733                                           ! 5032                               0,
31734 8261                      0000            .word	0
31735 8263                      0000            .word	0
31736                                           ! 5033                             0,
31737 8265                      0000            .word	0
31738                                           ! 5034                                960,
31739 8267                      03C0            .word	$3C0
31740                                           ! 5035                             0,
31741 8269                        00            .byte	0
31742                                           ! 5036                             0,
31743 826A                        00            .byte	0
31744                                           ! 5037                           8,
31745 826B                        08            .byte	8
31746                                           ! 5038                                16,
31747 826C                        10            .byte	$10
31748                                           ! 5039                             8,
31749 826D                        08            .byte	8
31750                                           ! 5040                                  8,
31751 826E                        08            .byte	8
31752                                           ! 5041                            8,
31753 826F                        08            .byte	8
31754                                           ! 5042                                 0,
31755 8270                        00            .byte	0
31756                                           ! 5043                            0,
31757 8271                        00            .byte	0
31758                                           ! 5044                                 0,
31759 8272                        00            .byte	0
31760                                           ! 5045                          0,
31761 8273                      0000            .word	0
31762 8275                      0000            .word	0
31763                                           ! 5046 } },
31764                                           ! 5047 { 0x0110,
31765 8277                      0110            .word	$110
31766                                           ! 5048 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31767 8279                      009B            .word	$9B
31768                                           ! 5049                           0x01 | 0x02 | 0x04,
31769 827B                        07            .byte	7
31770                                           ! 5050                           0,
31771 827C                        00            .byte	0
31772                                           ! 5051                           64,
31773 827D                      0040            .word	$40
31774                                           ! 5052                    64,
31775 827F                      0040            .word	$40
31776                                           ! 5053                        0xA000,
31777 8281                      A000            .word	$A000
31778                                           ! 5054                        0x0000,
31779 8283                      0000            .word	0
31780                                           ! 5055                       0,
31781 8285                      0000            .word	0
31782 8287                      0000            .word	0
31783                                           ! 5056                             1280,
31784 8289                      0500            .word	$500
31785                                           ! 5057                      
31786                                           ! 5057   640,
31787 828B                      0280            .word	$280
31788                                           ! 5058                        480,
31789 828D                      01E0            .word	$1E0
31790                                           ! 5059                      8,
31791 828F                        08            .byte	8
31792                                           ! 5060                      16,
31793 8290                        10            .byte	$10
31794                                           ! 5061                           1,
31795 8291                        01            .byte	1
31796                                           ! 5062                         15,
31797 8292                        0F            .byte	$F
31798                                           ! 5063                          10,
31799 8293                        0A            .byte	$A
31800                                           ! 5064                        0x06,
31801 8294                        06            .byte	6
31802                                           ! 5065                     0,
31803 8295                        00            .byte	0
31804                                           ! 5066                               26,
31805 8296                        1A            .byte	$1A
31806                                           ! 5067                          0,
31807 8297                        00            .byte	0
31808                                           ! 5068                        5,
31809 8298                        05            .byte	5
31810                                           ! 5069                             10,
31811 8299                        0A            .byte	$A
31812                                           ! 5070                          5,
31813 829A                        05            .byte	5
31814                                           ! 5071                               5,
31815 829B                        05            .byte	5
31816                                           ! 5072                         5,
31817 829C                        05            .byte	5
31818                                           ! 5073                              0,
31819 829D                        00            .byte	0
31820                                           ! 5074                         1,
31821 829E                        01            .byte	1
31822                                           ! 5075                              15,
31823 829F                        0F            .byte	$F
31824                                           ! 5076                                0,
31825 82A0                        00            .byte	0
31826                                           ! 5077                        0xE0000000,
31827 82A1                      0000            .word	0
31828 82A3                      E000            .word	$E000
31829                                           ! 5078                               0,
31830 82A5                      0000            .word	0
31831 82A7                      0000            .word	0
31832                                           ! 5079                             0,
31833 82A9                      0000            .word	0
31834                                           ! 5080                                1280,
31835 82AB                      0500            .word	$500
31836                                           ! 5081                             0,
31837 82AD                        00            .byte	0
31838                                           ! 5082                             0,
31839 82AE                        00            .byte	0
31840                                           ! 5083                           5,
31841 82AF                        05            .byte	5
31842                                           ! 5084                                10,
31843 82B0                        0A            .byte	$A
31844                                           ! 5085                             5,
31845 82B1                        05            .byte	5
31846                                           ! 5086                                  5,
31847 82B2                        05            .byte	5
31848                                           ! 5087                            5,
31849 82B3                        05            .byte	5
31850                                           ! 5088                                 0,
31851 82B4                        00            .byte	0
31852                                           ! 5089                            1,
31853 82B5                        01            .byte	1
31854                                           ! 5090                                 15,
31855 82B6                        0F            .byte	$F
31856                                           ! 5091                          0,
31857 82B7                      0000            .word	0
31858 82B9                      0000            .word	0
31859                                           ! 5092 } },
31860                                           ! 5093 { 0x0111,
31861 82BB                      0111            .word	$111
31862                                           ! 5094 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31863 82BD                      009B            .word	$9B
31864                                           ! 5095                           0x01 | 0x02 | 0x04,
31865 82BF                        07            .byte	7
31866                                           ! 5096                           0,
31867 82C0                        00            .byte	0
31868                                           ! 5097                           64,
31869 82C1                      0040            .word	$40
31870                                           ! 5098                    64,
31871 82C3                      0040            .word	$40
31872                                           ! 5099                        0xA000,
31873 82C5                      A000            .word	$A000
31874                                           ! 5100                        0x0000,
31875 82C7                      0000            .word	0
31876                                           ! 5101                       0,
31877 82C9                      0000            .word	0
31878 82CB                      0000            .word	0
31879                                           ! 5102                             1280,
31880 82CD                      0500            .word	$500
31881                                           ! 5103                        640,
31882 82CF                      0280            .word	$280
31883                                           ! 5104                        480,
31884 82D1                      01E0            .word	$1E0
31885                                           ! 5105                      8,
31886 82D3                        08            .byte	8
31887                                           ! 5106                      16,
31888 82D4                        10            .byte	$10
31889                                           ! 5107                           1,
31890 82D5                        01            .byte	1
31891                                           ! 5108                         16,
31892 82D6                        10            .byte	$10
31893                                           ! 5109                          10,
31894 82D7                        0A            .byte	$A
31895                                           ! 5110                        0x06,
31896 82D8                        06            .byte	6
31897                                           ! 5111                     0,
31898 82D9                        00            .byte	0
31899                                           ! 5112                               26,
31900 82DA                        1A            .byte	$1A
31901                                           ! 5113                          0,
31902 82DB                        00            .byte	0
31903                                           ! 5114                        5,
31904 82DC                        05            .byte	5
31905                                           ! 5115                             11,
31906 82DD                        0B            .byte	$B
31907                                           ! 5116                          6,
31908 82DE                        06            .byte	6
31909                                           ! 5117                               5,
31910 82DF                        05            .byte	5
31911                                           ! 5118                         5,
31912 82E0                        05            .byte	5
31913                                           ! 5119                              0,
31914 82E1                        00            .byte	0
31915                                           ! 5120                         0,
31916 82E2                        00            .byte	0
31917                                           ! 5121                              0,
31918 82E3                        00            .byte	0
31919                                           ! 5122                                0,
31920 82E4                        00            .byte	0
31921                                           ! 5123                        0xE0000000,
31922 82E5                      0000            .word	0
31923 82E7                      E000            .word	$E000
31924                                           ! 5124                               0,
31925 82E9                      0000            .word	0
31926 82EB                      0000            .word	0
31927                                           ! 5125                             0,
31928 82ED                      0000            .word	0
31929                                           ! 5126                    
31930                                           ! 5126             1280,
31931 82EF                      0500            .word	$500
31932                                           ! 5127                             0,
31933 82F1                        00            .byte	0
31934                                           ! 5128                             0,
31935 82F2                        00            .byte	0
31936                                           ! 5129                           5,
31937 82F3                        05            .byte	5
31938                                           ! 5130                                11,
31939 82F4                        0B            .byte	$B
31940                                           ! 5131                             6,
31941 82F5                        06            .byte	6
31942                                           ! 5132                                  5,
31943 82F6                        05            .byte	5
31944                                           ! 5133                            5,
31945 82F7                        05            .byte	5
31946                                           ! 5134                                 0,
31947 82F8                        00            .byte	0
31948                                           ! 5135                            0,
31949 82F9                        00            .byte	0
31950                                           ! 5136                                 0,
31951 82FA                        00            .byte	0
31952                                           ! 5137                          0,
31953 82FB                      0000            .word	0
31954 82FD                      0000            .word	0
31955                                           ! 5138 } },
31956                                           ! 5139 { 0x0112,
31957 82FF                      0112            .word	$112
31958                                           ! 5140 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31959 8301                      009B            .word	$9B
31960                                           ! 5141                           0x01 | 0x02 | 0x04,
31961 8303                        07            .byte	7
31962                                           ! 5142                           0,
31963 8304                        00            .byte	0
31964                                           ! 5143                           64,
31965 8305                      0040            .word	$40
31966                                           ! 5144                    64,
31967 8307                      0040            .word	$40
31968                                           ! 5145                        0xA000,
31969 8309                      A000            .word	$A000
31970                                           ! 5146                        0x0000,
31971 830B                      0000            .word	0
31972                                           ! 5147                       0,
31973 830D                      0000            .word	0
31974 830F                      0000            .word	0
31975                                           ! 5148                             1920,
31976 8311                      0780            .word	$780
31977                                           ! 5149                        640,
31978 8313                      0280            .word	$280
31979                                           ! 5150                        480,
31980 8315                      01E0            .word	$1E0
31981                                           ! 5151                      8,
31982 8317                        08            .byte	8
31983                                           ! 5152                      16,
31984 8318                        10            .byte	$10
31985                                           ! 5153                           1,
31986 8319                        01            .byte	1
31987                                           ! 5154                         24,
31988 831A                        18            .byte	$18
31989                                           ! 5155                          15,
31990 831B                        0F            .byte	$F
31991                                           ! 5156                        0x06,
31992 831C                        06            .byte	6
31993                                           ! 5157                     0,
31994 831D                        00            .byte	0
31995                                           ! 5158                               17,
31996 831E                        11            .byte	$11
31997                                           ! 5159                          0,
31998 831F                        00            .byte	0
31999                                           ! 5160                        8,
32000 8320                        08            .byte	8
32001                                           ! 5161                             16,
32002 8321                        10            .byte	$10
32003                                           ! 5162                          8,
32004 8322                        08            .byte	8
32005                                           ! 5163                               8,
32006 8323                        08            .byte	8
32007                                           ! 5164                         8,
32008 8324                        08            .byte	8
32009                                           ! 5165                              0,
32010 8325                        00            .byte	0
32011                                           ! 5166                         0,
32012 8326                        00            .byte	0
32013                                           ! 5167                              0,
32014 8327                        00            .byte	0
32015                                           ! 5168                                0,
32016 8328                        00            .byte	0
32017                                           ! 5169                        0xE0000000,
32018 8329                      0000            .word	0
32019 832B                      E000            .word	$E000
32020                                           ! 5170                               0,
32021 832D                      0000            .word	0
32022 832F                      0000            .word	0
32023                                           ! 5171                             0,
32024 8331                      0000            .word	0
32025                                           ! 5172                                1920,
32026 8333                      0780            .word	$780
32027                                           ! 5173                             0,
32028 8335                        00            .byte	0
32029                                           ! 5174                             0,
32030 8336                        00            .byte	0
32031                                           ! 5175                           8,
32032 8337                        08            .byte	8
32033                                           ! 5176                                16,
32034 8338                        10            .byte	$10
32035                                           ! 5177                             8,
32036 8339                        08            .byte	8
32037                                           ! 5178                                  8,
32038 833A                        08            .byte	8
32039                                           ! 5179                            8,
32040 833B                        08            .byte	8
32041                                           ! 5180                                 0,
32042 833C                        00            .byte	0
32043                                           ! 5181                            0,
32044 833D                        00            .byte	0
32045                                           ! 5182                                 0,
32046 833E                        00            .byte	0
32047                                           ! 5183                          0,
32048 833F                      0000            .word	0
32049 8341                      0000            .word	0
32050                                           ! 5184 } },
32051                                           ! 5185 { 0x0113,
32052 8343                      0113            .word	$113
32053                                           ! 5186 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32054 8345                      009B            .word	$9B
32055                                           ! 5187                           0x01 | 0x02 | 0x04,
32056 8347                        07            .byte	7
32057                                           ! 5188                           0,
32058 8348                        00            .byte	0
32059                                           ! 5189                           64,
32060 8349                      0040            .word	$40
32061                                           ! 5190                    64,
32062 834B                      0040            .word	$40
32063                                           ! 5191                        0xA000,
32064 834D                      A000            .word	$A000
32065                                           ! 5192                        0x0000,
32066 834F                      0000            .word	0
32067                                           ! 5193                       0,
32068 8351                      0000            .word	0
32069 8353                      0000            .word	0
32070                                           ! 5194                             16
32071                                           ! 5194 00,
32072 8355                      0640            .word	$640
32073                                           ! 5195                        800,
32074 8357                      0320            .word	$320
32075                                           ! 5196                        600,
32076 8359                      0258            .word	$258
32077                                           ! 5197                      8,
32078 835B                        08            .byte	8
32079                                           ! 5198                      16,
32080 835C                        10            .byte	$10
32081                                           ! 5199                           1,
32082 835D                        01            .byte	1
32083                                           ! 5200                         15,
32084 835E                        0F            .byte	$F
32085                                           ! 5201                          15,
32086 835F                        0F            .byte	$F
32087                                           ! 5202                        0x06,
32088 8360                        06            .byte	6
32089                                           ! 5203                     0,
32090 8361                        00            .byte	0
32091                                           ! 5204                               16,
32092 8362                        10            .byte	$10
32093                                           ! 5205                          0,
32094 8363                        00            .byte	0
32095                                           ! 5206                        5,
32096 8364                        05            .byte	5
32097                                           ! 5207                             10,
32098 8365                        0A            .byte	$A
32099                                           ! 5208                          5,
32100 8366                        05            .byte	5
32101                                           ! 5209                               5,
32102 8367                        05            .byte	5
32103                                           ! 5210                         5,
32104 8368                        05            .byte	5
32105                                           ! 5211                              0,
32106 8369                        00            .byte	0
32107                                           ! 5212                         1,
32108 836A                        01            .byte	1
32109                                           ! 5213                              15,
32110 836B                        0F            .byte	$F
32111                                           ! 5214                                0,
32112 836C                        00            .byte	0
32113                                           ! 5215                        0xE0000000,
32114 836D                      0000            .word	0
32115 836F                      E000            .word	$E000
32116                                           ! 5216                               0,
32117 8371                      0000            .word	0
32118 8373                      0000            .word	0
32119                                           ! 5217                             0,
32120 8375                      0000            .word	0
32121                                           ! 5218                                1600,
32122 8377                      0640            .word	$640
32123                                           ! 5219                             0,
32124 8379                        00            .byte	0
32125                                           ! 5220                             0,
32126 837A                        00            .byte	0
32127                                           ! 5221                           5,
32128 837B                        05            .byte	5
32129                                           ! 5222                                10,
32130 837C                        0A            .byte	$A
32131                                           ! 5223                             5,
32132 837D                        05            .byte	5
32133                                           ! 5224                                  5,
32134 837E                        05            .byte	5
32135                                           ! 5225                            5,
32136 837F                        05            .byte	5
32137                                           ! 5226                                 0,
32138 8380                        00            .byte	0
32139                                           ! 5227                            1,
32140 8381                        01            .byte	1
32141                                           ! 5228                                 15,
32142 8382                        0F            .byte	$F
32143                                           ! 5229                          0,
32144 8383                      0000            .word	0
32145 8385                      0000            .word	0
32146                                           ! 5230 } },
32147                                           ! 5231 { 0x0114,
32148 8387                      0114            .word	$114
32149                                           ! 5232 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32150 8389                      009B            .word	$9B
32151                                           ! 5233                           0x01 | 0x02 | 0x04,
32152 838B                        07            .byte	7
32153                                           ! 5234                           0,
32154 838C                        00            .byte	0
32155                                           ! 5235                           64,
32156 838D                      0040            .word	$40
32157                                           ! 5236                    64,
32158 838F                      0040            .word	$40
32159                                           ! 5237                        0xA000,
32160 8391                      A000            .word	$A000
32161                                           ! 5238                        0x0000,
32162 8393                      0000            .word	0
32163                                           ! 5239                       0,
32164 8395                      0000            .word	0
32165 8397                      0000            .word	0
32166                                           ! 5240                             1600,
32167 8399                      0640            .word	$640
32168                                           ! 5241                        800,
32169 839B                      0320            .word	$320
32170                                           ! 5242                        600,
32171 839D                      0258            .word	$258
32172                                           ! 5243                      8,
32173 839F                        08            .byte	8
32174                                           ! 5244                      16,
32175 83A0                        10            .byte	$10
32176                                           ! 5245                           1,
32177 83A1                        01            .byte	1
32178                                           ! 5246                         16,
32179 83A2                        10            .byte	$10
32180                                           ! 5247                          15,
32181 83A3                        0F            .byte	$F
32182                                           ! 5248                        0x06,
32183 83A4                        06            .byte	6
32184                                           ! 5249                     0,
32185 83A5                        00            .byte	0
32186                                           ! 5250                               16,
32187 83A6                        10            .byte	$10
32188                                           ! 5251                          0,
32189 83A7                        00            .byte	0
32190                                           ! 5252                        5,
32191 83A8                        05            .byte	5
32192                                           ! 5253                             11,
32193 83A9                        0B            .byte	$B
32194                                           ! 5254                          6,
32195 83AA                        06            .byte	6
32196                                           ! 5255                               5,
32197 83AB                        05            .byte	5
32198                                           ! 5256                         5,
32199 83AC                        05            .byte	5
32200                                           ! 5257                              0,
32201 83AD                        00            .byte	0
32202                                           ! 5258                         0,
32203 83AE                        00            .byte	0
32204                                           ! 5259                              0,
32205 83AF                        00            .byte	0
32206                                           ! 5260                                0,
32207 83B0                        00            .byte	0
32208                                           ! 5261                        0xE0000000,
32209 83B1                      0000            .word	0
32210 83B3                      E000            .word	$E000
32211                                           ! 5262                               0,
32212 83B5                      0000            .word	0
32213 83B7                      0000            .word	0
32214                                           ! 5263                          
32215                                           ! 5263    0,
32216 83B9                      0000            .word	0
32217                                           ! 5264                                1600,
32218 83BB                      0640            .word	$640
32219                                           ! 5265                             0,
32220 83BD                        00            .byte	0
32221                                           ! 5266                             0,
32222 83BE                        00            .byte	0
32223                                           ! 5267                           5,
32224 83BF                        05            .byte	5
32225                                           ! 5268                                11,
32226 83C0                        0B            .byte	$B
32227                                           ! 5269                             6,
32228 83C1                        06            .byte	6
32229                                           ! 5270                                  5,
32230 83C2                        05            .byte	5
32231                                           ! 5271                            5,
32232 83C3                        05            .byte	5
32233                                           ! 5272                                 0,
32234 83C4                        00            .byte	0
32235                                           ! 5273                            0,
32236 83C5                        00            .byte	0
32237                                           ! 5274                                 0,
32238 83C6                        00            .byte	0
32239                                           ! 5275                          0,
32240 83C7                      0000            .word	0
32241 83C9                      0000            .word	0
32242                                           ! 5276 } },
32243                                           ! 5277 { 0x0115,
32244 83CB                      0115            .word	$115
32245                                           ! 5278 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32246 83CD                      009B            .word	$9B
32247                                           ! 5279                           0x01 | 0x02 | 0x04,
32248 83CF                        07            .byte	7
32249                                           ! 5280                           0,
32250 83D0                        00            .byte	0
32251                                           ! 5281                           64,
32252 83D1                      0040            .word	$40
32253                                           ! 5282                    64,
32254 83D3                      0040            .word	$40
32255                                           ! 5283                        0xA000,
32256 83D5                      A000            .word	$A000
32257                                           ! 5284                        0x0000,
32258 83D7                      0000            .word	0
32259                                           ! 5285                       0,
32260 83D9                      0000            .word	0
32261 83DB                      0000            .word	0
32262                                           ! 5286                             2400,
32263 83DD                      0960            .word	$960
32264                                           ! 5287                        800,
32265 83DF                      0320            .word	$320
32266                                           ! 5288                        600,
32267 83E1                      0258            .word	$258
32268                                           ! 5289                      8,
32269 83E3                        08            .byte	8
32270                                           ! 5290                      16,
32271 83E4                        10            .byte	$10
32272                                           ! 5291                           1,
32273 83E5                        01            .byte	1
32274                                           ! 5292                         24,
32275 83E6                        18            .byte	$18
32276                                           ! 5293                          22,
32277 83E7                        16            .byte	$16
32278                                           ! 5294                        0x06,
32279 83E8                        06            .byte	6
32280                                           ! 5295                     0,
32281 83E9                        00            .byte	0
32282                                           ! 5296                               10,
32283 83EA                        0A            .byte	$A
32284                                           ! 5297                          0,
32285 83EB                        00            .byte	0
32286                                           ! 5298                        8,
32287 83EC                        08            .byte	8
32288                                           ! 5299                             16,
32289 83ED                        10            .byte	$10
32290                                           ! 5300                          8,
32291 83EE                        08            .byte	8
32292                                           ! 5301                               8,
32293 83EF                        08            .byte	8
32294                                           ! 5302                         8,
32295 83F0                        08            .byte	8
32296                                           ! 5303                              0,
32297 83F1                        00            .byte	0
32298                                           ! 5304                         0,
32299 83F2                        00            .byte	0
32300                                           ! 5305                              0,
32301 83F3                        00            .byte	0
32302                                           ! 5306                                0,
32303 83F4                        00            .byte	0
32304                                           ! 5307                        0xE0000000,
32305 83F5                      0000            .word	0
32306 83F7                      E000            .word	$E000
32307                                           ! 5308                               0,
32308 83F9                      0000            .word	0
32309 83FB                      0000            .word	0
32310                                           ! 5309                             0,
32311 83FD                      0000            .word	0
32312                                           ! 5310                                2400,
32313 83FF                      0960            .word	$960
32314                                           ! 5311                             0,
32315 8401                        00            .byte	0
32316                                           ! 5312                             0,
32317 8402                        00            .byte	0
32318                                           ! 5313                           8,
32319 8403                        08            .byte	8
32320                                           ! 5314                                16,
32321 8404                        10            .byte	$10
32322                                           ! 5315                             8,
32323 8405                        08            .byte	8
32324                                           ! 5316                                  8,
32325 8406                        08            .byte	8
32326                                           ! 5317                            8,
32327 8407                        08            .byte	8
32328                                           ! 5318                                 0,
32329 8408                        00            .byte	0
32330                                           ! 5319                            0,
32331 8409                        00            .byte	0
32332                                           ! 5320                                 0,
32333 840A                        00            .byte	0
32334                                           ! 5321                          0,
32335 840B                      0000            .word	0
32336 840D                      0000            .word	0
32337                                           ! 5322 } },
32338                                           ! 5323 { 0x0116,
32339 840F                      0116            .word	$116
32340                                           ! 5324 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32341 8411                      009B            .word	$9B
32342                                           ! 5325                           0x01 | 0x02 | 0x04,
32343 8413                        07            .byte	7
32344                                           ! 5326                           0,
32345 8414                        00            .byte	0
32346                                           ! 5327                           64,
32347 8415                      0040            .word	$40
32348                                           ! 5328                    64,
32349 8417                      0040            .word	$40
32350                                           ! 5329                        0xA000,
32351 8419                      A000            .word	$A000
32352                                           ! 5330                        0x0000,
32353 841B                      0000            .word	0
32354                                           ! 5331                       0,
32355 841D                      0000            .word	0
32356 841F                      0000            .word	0
32357                                           ! 5332      
32358                                           ! 5332                        2048,
32359 8421                      0800            .word	$800
32360                                           ! 5333                        1024,
32361 8423                      0400            .word	$400
32362                                           ! 5334                        768,
32363 8425                      0300            .word	$300
32364                                           ! 5335                      8,
32365 8427                        08            .byte	8
32366                                           ! 5336                      16,
32367 8428                        10            .byte	$10
32368                                           ! 5337                           1,
32369 8429                        01            .byte	1
32370                                           ! 5338                         15,
32371 842A                        0F            .byte	$F
32372                                           ! 5339                          24,
32373 842B                        18            .byte	$18
32374                                           ! 5340                        0x06,
32375 842C                        06            .byte	6
32376                                           ! 5341                     0,
32377 842D                        00            .byte	0
32378                                           ! 5342                               9,
32379 842E                        09            .byte	9
32380                                           ! 5343                          0,
32381 842F                        00            .byte	0
32382                                           ! 5344                        5,
32383 8430                        05            .byte	5
32384                                           ! 5345                             10,
32385 8431                        0A            .byte	$A
32386                                           ! 5346                          5,
32387 8432                        05            .byte	5
32388                                           ! 5347                               5,
32389 8433                        05            .byte	5
32390                                           ! 5348                         5,
32391 8434                        05            .byte	5
32392                                           ! 5349                              0,
32393 8435                        00            .byte	0
32394                                           ! 5350                         1,
32395 8436                        01            .byte	1
32396                                           ! 5351                              15,
32397 8437                        0F            .byte	$F
32398                                           ! 5352                                0,
32399 8438                        00            .byte	0
32400                                           ! 5353                        0xE0000000,
32401 8439                      0000            .word	0
32402 843B                      E000            .word	$E000
32403                                           ! 5354                               0,
32404 843D                      0000            .word	0
32405 843F                      0000            .word	0
32406                                           ! 5355                             0,
32407 8441                      0000            .word	0
32408                                           ! 5356                                2048,
32409 8443                      0800            .word	$800
32410                                           ! 5357                             0,
32411 8445                        00            .byte	0
32412                                           ! 5358                             0,
32413 8446                        00            .byte	0
32414                                           ! 5359                           5,
32415 8447                        05            .byte	5
32416                                           ! 5360                                10,
32417 8448                        0A            .byte	$A
32418                                           ! 5361                             5,
32419 8449                        05            .byte	5
32420                                           ! 5362                                  5,
32421 844A                        05            .byte	5
32422                                           ! 5363                            5,
32423 844B                        05            .byte	5
32424                                           ! 5364                                 0,
32425 844C                        00            .byte	0
32426                                           ! 5365                            1,
32427 844D                        01            .byte	1
32428                                           ! 5366                                 15,
32429 844E                        0F            .byte	$F
32430                                           ! 5367                          0,
32431 844F                      0000            .word	0
32432 8451                      0000            .word	0
32433                                           ! 5368 } },
32434                                           ! 5369 { 0x0117,
32435 8453                      0117            .word	$117
32436                                           ! 5370 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32437 8455                      009B            .word	$9B
32438                                           ! 5371                           0x01 | 0x02 | 0x04,
32439 8457                        07            .byte	7
32440                                           ! 5372                           0,
32441 8458                        00            .byte	0
32442                                           ! 5373                           64,
32443 8459                      0040            .word	$40
32444                                           ! 5374                    64,
32445 845B                      0040            .word	$40
32446                                           ! 5375                        0xA000,
32447 845D                      A000            .word	$A000
32448                                           ! 5376                        0x0000,
32449 845F                      0000            .word	0
32450                                           ! 5377                       0,
32451 8461                      0000            .word	0
32452 8463                      0000            .word	0
32453                                           ! 5378                             2048,
32454 8465                      0800            .word	$800
32455                                           ! 5379                        1024,
32456 8467                      0400            .word	$400
32457                                           ! 5380                        768,
32458 8469                      0300            .word	$300
32459                                           ! 5381                      8,
32460 846B                        08            .byte	8
32461                                           ! 5382                      16,
32462 846C                        10            .byte	$10
32463                                           ! 5383                           1,
32464 846D                        01            .byte	1
32465                                           ! 5384                         16,
32466 846E                        10            .byte	$10
32467                                           ! 5385                          24,
32468 846F                        18            .byte	$18
32469                                           ! 5386                        0x06,
32470 8470                        06            .byte	6
32471                                           ! 5387                     0,
32472 8471                        00            .byte	0
32473                                           ! 5388                               9,
32474 8472                        09            .byte	9
32475                                           ! 5389                          0,
32476 8473                        00            .byte	0
32477                                           ! 5390                        5,
32478 8474                        05            .byte	5
32479                                           ! 5391                             11,
32480 8475                        0B            .byte	$B
32481                                           ! 5392                          6,
32482 8476                        06            .byte	6
32483                                           ! 5393                               5,
32484 8477                        05            .byte	5
32485                                           ! 5394                         5,
32486 8478                        05            .byte	5
32487                                           ! 5395                              0,
32488 8479                        00            .byte	0
32489                                           ! 5396                         0,
32490 847A                        00            .byte	0
32491                                           ! 5397                              0,
32492 847B                        00            .byte	0
32493                                           ! 5398                                0,
32494 847C                        00            .byte	0
32495                                           ! 5399                        0xE0000000,
32496 847D                      0000            .word	0
32497 847F                      E000            .word	$E000
32498                                           ! 5400                               0,
32499 8481                      0000            .word	0
32500 8483                      0000            .word	0
32501                                           ! 5401 
32502                                           ! 5401                             0,
32503 8485                      0000            .word	0
32504                                           ! 5402                                2048,
32505 8487                      0800            .word	$800
32506                                           ! 5403                             0,
32507 8489                        00            .byte	0
32508                                           ! 5404                             0,
32509 848A                        00            .byte	0
32510                                           ! 5405                           5,
32511 848B                        05            .byte	5
32512                                           ! 5406                                11,
32513 848C                        0B            .byte	$B
32514                                           ! 5407                             6,
32515 848D                        06            .byte	6
32516                                           ! 5408                                  5,
32517 848E                        05            .byte	5
32518                                           ! 5409                            5,
32519 848F                        05            .byte	5
32520                                           ! 5410                                 0,
32521 8490                        00            .byte	0
32522                                           ! 5411                            0,
32523 8491                        00            .byte	0
32524                                           ! 5412                                 0,
32525 8492                        00            .byte	0
32526                                           ! 5413                          0,
32527 8493                      0000            .word	0
32528 8495                      0000            .word	0
32529                                           ! 5414 } },
32530                                           ! 5415 { 0x0118,
32531 8497                      0118            .word	$118
32532                                           ! 5416 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32533 8499                      009B            .word	$9B
32534                                           ! 5417                           0x01 | 0x02 | 0x04,
32535 849B                        07            .byte	7
32536                                           ! 5418                           0,
32537 849C                        00            .byte	0
32538                                           ! 5419                           64,
32539 849D                      0040            .word	$40
32540                                           ! 5420                    64,
32541 849F                      0040            .word	$40
32542                                           ! 5421                        0xA000,
32543 84A1                      A000            .word	$A000
32544                                           ! 5422                        0x0000,
32545 84A3                      0000            .word	0
32546                                           ! 5423                       0,
32547 84A5                      0000            .word	0
32548 84A7                      0000            .word	0
32549                                           ! 5424                             3072,
32550 84A9                      0C00            .word	$C00
32551                                           ! 5425                        1024,
32552 84AB                      0400            .word	$400
32553                                           ! 5426                        768,
32554 84AD                      0300            .word	$300
32555                                           ! 5427                      8,
32556 84AF                        08            .byte	8
32557                                           ! 5428                      16,
32558 84B0                        10            .byte	$10
32559                                           ! 5429                           1,
32560 84B1                        01            .byte	1
32561                                           ! 5430                         24,
32562 84B2                        18            .byte	$18
32563                                           ! 5431                          36,
32564 84B3                        24            .byte	$24
32565                                           ! 5432                        0x06,
32566 84B4                        06            .byte	6
32567                                           ! 5433                     0,
32568 84B5                        00            .byte	0
32569                                           ! 5434                               6,
32570 84B6                        06            .byte	6
32571                                           ! 5435                          0,
32572 84B7                        00            .byte	0
32573                                           ! 5436                        8,
32574 84B8                        08            .byte	8
32575                                           ! 5437                             16,
32576 84B9                        10            .byte	$10
32577                                           ! 5438                          8,
32578 84BA                        08            .byte	8
32579                                           ! 5439                               8,
32580 84BB                        08            .byte	8
32581                                           ! 5440                         8,
32582 84BC                        08            .byte	8
32583                                           ! 5441                              0,
32584 84BD                        00            .byte	0
32585                                           ! 5442                         0,
32586 84BE                        00            .byte	0
32587                                           ! 5443                              0,
32588 84BF                        00            .byte	0
32589                                           ! 5444                                0,
32590 84C0                        00            .byte	0
32591                                           ! 5445                        0xE0000000,
32592 84C1                      0000            .word	0
32593 84C3                      E000            .word	$E000
32594                                           ! 5446                               0,
32595 84C5                      0000            .word	0
32596 84C7                      0000            .word	0
32597                                           ! 5447                             0,
32598 84C9                      0000            .word	0
32599                                           ! 5448                                3072,
32600 84CB                      0C00            .word	$C00
32601                                           ! 5449                             0,
32602 84CD                        00            .byte	0
32603                                           ! 5450                             0,
32604 84CE                        00            .byte	0
32605                                           ! 5451                           8,
32606 84CF                        08            .byte	8
32607                                           ! 5452                                16,
32608 84D0                        10            .byte	$10
32609                                           ! 5453                             8,
32610 84D1                        08            .byte	8
32611                                           ! 5454                                  8,
32612 84D2                        08            .byte	8
32613                                           ! 5455                            8,
32614 84D3                        08            .byte	8
32615                                           ! 5456                                 0,
32616 84D4                        00            .byte	0
32617                                           ! 5457                            0,
32618 84D5                        00            .byte	0
32619                                           ! 5458                                 0,
32620 84D6                        00            .byte	0
32621                                           ! 5459                          0,
32622 84D7                      0000            .word	0
32623 84D9                      0000            .word	0
32624                                           ! 5460 } },
32625                                           ! 5461 { 0x0119,
32626 84DB                      0119            .word	$119
32627                                           ! 5462 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32628 84DD                      009B            .word	$9B
32629                                           ! 5463                           0x01 | 0x02 | 0x04,
32630 84DF                        07            .byte	7
32631                                           ! 5464                           0,
32632 84E0                        00            .byte	0
32633                                           ! 5465                           64,
32634 84E1                      0040            .word	$40
32635                                           ! 5466                    64,
32636 84E3                      0040            .word	$40
32637                                           ! 5467                        0xA000,
32638 84E5                      A000            .word	$A000
32639                                           ! 5468                        0x0000,
32640 84E7                      0000            .word	0
32641                                           ! 5469      
32642                                           ! 5469                  0,
32643 84E9                      0000            .word	0
32644 84EB                      0000            .word	0
32645                                           ! 5470                             2560,
32646 84ED                      0A00            .word	$A00
32647                                           ! 5471                        1280,
32648 84EF                      0500            .word	$500
32649                                           ! 5472                        1024,
32650 84F1                      0400            .word	$400
32651                                           ! 5473                      8,
32652 84F3                        08            .byte	8
32653                                           ! 5474                      16,
32654 84F4                        10            .byte	$10
32655                                           ! 5475                           1,
32656 84F5                        01            .byte	1
32657                                           ! 5476                         15,
32658 84F6                        0F            .byte	$F
32659                                           ! 5477                          40,
32660 84F7                        28            .byte	$28
32661                                           ! 5478                        0x06,
32662 84F8                        06            .byte	6
32663                                           ! 5479                     0,
32664 84F9                        00            .byte	0
32665                                           ! 5480                               5,
32666 84FA                        05            .byte	5
32667                                           ! 5481                          0,
32668 84FB                        00            .byte	0
32669                                           ! 5482                        5,
32670 84FC                        05            .byte	5
32671                                           ! 5483                             10,
32672 84FD                        0A            .byte	$A
32673                                           ! 5484                          5,
32674 84FE                        05            .byte	5
32675                                           ! 5485                               5,
32676 84FF                        05            .byte	5
32677                                           ! 5486                         5,
32678 8500                        05            .byte	5
32679                                           ! 5487                              0,
32680 8501                        00            .byte	0
32681                                           ! 5488                         1,
32682 8502                        01            .byte	1
32683                                           ! 5489                              15,
32684 8503                        0F            .byte	$F
32685                                           ! 5490                                0,
32686 8504                        00            .byte	0
32687                                           ! 5491                        0xE0000000,
32688 8505                      0000            .word	0
32689 8507                      E000            .word	$E000
32690                                           ! 5492                               0,
32691 8509                      0000            .word	0
32692 850B                      0000            .word	0
32693                                           ! 5493                             0,
32694 850D                      0000            .word	0
32695                                           ! 5494                                2560,
32696 850F                      0A00            .word	$A00
32697                                           ! 5495                             0,
32698 8511                        00            .byte	0
32699                                           ! 5496                             0,
32700 8512                        00            .byte	0
32701                                           ! 5497                           5,
32702 8513                        05            .byte	5
32703                                           ! 5498                                10,
32704 8514                        0A            .byte	$A
32705                                           ! 5499                             5,
32706 8515                        05            .byte	5
32707                                           ! 5500                                  5,
32708 8516                        05            .byte	5
32709                                           ! 5501                            5,
32710 8517                        05            .byte	5
32711                                           ! 5502                                 0,
32712 8518                        00            .byte	0
32713                                           ! 5503                            1,
32714 8519                        01            .byte	1
32715                                           ! 5504                                 15,
32716 851A                        0F            .byte	$F
32717                                           ! 5505                          0,
32718 851B                      0000            .word	0
32719 851D                      0000            .word	0
32720                                           ! 5506 } },
32721                                           ! 5507 { 0x011a,
32722 851F                      011A            .word	$11A
32723                                           ! 5508 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32724 8521                      009B            .word	$9B
32725                                           ! 5509                           0x01 | 0x02 | 0x04,
32726 8523                        07            .byte	7
32727                                           ! 5510                           0,
32728 8524                        00            .byte	0
32729                                           ! 5511                           64,
32730 8525                      0040            .word	$40
32731                                           ! 5512                    64,
32732 8527                      0040            .word	$40
32733                                           ! 5513                        0xA000,
32734 8529                      A000            .word	$A000
32735                                           ! 5514                        0x0000,
32736 852B                      0000            .word	0
32737                                           ! 5515                       0,
32738 852D                      0000            .word	0
32739 852F                      0000            .word	0
32740                                           ! 5516                             2560,
32741 8531                      0A00            .word	$A00
32742                                           ! 5517                        1280,
32743 8533                      0500            .word	$500
32744                                           ! 5518                        1024,
32745 8535                      0400            .word	$400
32746                                           ! 5519                      8,
32747 8537                        08            .byte	8
32748                                           ! 5520                      16,
32749 8538                        10            .byte	$10
32750                                           ! 5521                           1,
32751 8539                        01            .byte	1
32752                                           ! 5522                         16,
32753 853A                        10            .byte	$10
32754                                           ! 5523                          40,
32755 853B                        28            .byte	$28
32756                                           ! 5524                        0x06,
32757 853C                        06            .byte	6
32758                                           ! 5525                     0,
32759 853D                        00            .byte	0
32760                                           ! 5526                               5,
32761 853E                        05            .byte	5
32762                                           ! 5527                          0,
32763 853F                        00            .byte	0
32764                                           ! 5528                        5,
32765 8540                        05            .byte	5
32766                                           ! 5529                             11,
32767 8541                        0B            .byte	$B
32768                                           ! 5530                          6,
32769 8542                        06            .byte	6
32770                                           ! 5531                               5,
32771 8543                        05            .byte	5
32772                                           ! 5532                         5,
32773 8544                        05            .byte	5
32774                                           ! 5533                              0,
32775 8545                        00            .byte	0
32776                                           ! 5534                         0,
32777 8546                        00            .byte	0
32778                                           ! 5535                              0,
32779 8547                        00            .byte	0
32780                                           ! 5536                                0,
32781 8548                        00            .byte	0
32782                                           ! 5537                        0xE0000000,
32783 8549                      0000            .word	0
32784 854B                      E000            .word	$E000
32785                                           ! 5538       
32786                                           ! 5538                         0,
32787 854D                      0000            .word	0
32788 854F                      0000            .word	0
32789                                           ! 5539                             0,
32790 8551                      0000            .word	0
32791                                           ! 5540                                2560,
32792 8553                      0A00            .word	$A00
32793                                           ! 5541                             0,
32794 8555                        00            .byte	0
32795                                           ! 5542                             0,
32796 8556                        00            .byte	0
32797                                           ! 5543                           5,
32798 8557                        05            .byte	5
32799                                           ! 5544                                11,
32800 8558                        0B            .byte	$B
32801                                           ! 5545                             6,
32802 8559                        06            .byte	6
32803                                           ! 5546                                  5,
32804 855A                        05            .byte	5
32805                                           ! 5547                            5,
32806 855B                        05            .byte	5
32807                                           ! 5548                                 0,
32808 855C                        00            .byte	0
32809                                           ! 5549                            0,
32810 855D                        00            .byte	0
32811                                           ! 5550                                 0,
32812 855E                        00            .byte	0
32813                                           ! 5551                          0,
32814 855F                      0000            .word	0
32815 8561                      0000            .word	0
32816                                           ! 5552 } },
32817                                           ! 5553 { 0x011b,
32818 8563                      011B            .word	$11B
32819                                           ! 5554 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32820 8565                      009B            .word	$9B
32821                                           ! 5555                           0x01 | 0x02 | 0x04,
32822 8567                        07            .byte	7
32823                                           ! 5556                           0,
32824 8568                        00            .byte	0
32825                                           ! 5557                           64,
32826 8569                      0040            .word	$40
32827                                           ! 5558                    64,
32828 856B                      0040            .word	$40
32829                                           ! 5559                        0xA000,
32830 856D                      A000            .word	$A000
32831                                           ! 5560                        0x0000,
32832 856F                      0000            .word	0
32833                                           ! 5561                       0,
32834 8571                      0000            .word	0
32835 8573                      0000            .word	0
32836                                           ! 5562                             3840,
32837 8575                      0F00            .word	$F00
32838                                           ! 5563                        1280,
32839 8577                      0500            .word	$500
32840                                           ! 5564                        1024,
32841 8579                      0400            .word	$400
32842                                           ! 5565                      8,
32843 857B                        08            .byte	8
32844                                           ! 5566                      16,
32845 857C                        10            .byte	$10
32846                                           ! 5567                           1,
32847 857D                        01            .byte	1
32848                                           ! 5568                         24,
32849 857E                        18            .byte	$18
32850                                           ! 5569                          60,
32851 857F                        3C            .byte	$3C
32852                                           ! 5570                        0x06,
32853 8580                        06            .byte	6
32854                                           ! 5571                     0,
32855 8581                        00            .byte	0
32856                                           ! 5572                               3,
32857 8582                        03            .byte	3
32858                                           ! 5573                          0,
32859 8583                        00            .byte	0
32860                                           ! 5574                        8,
32861 8584                        08            .byte	8
32862                                           ! 5575                             16,
32863 8585                        10            .byte	$10
32864                                           ! 5576                          8,
32865 8586                        08            .byte	8
32866                                           ! 5577                               8,
32867 8587                        08            .byte	8
32868                                           ! 5578                         8,
32869 8588                        08            .byte	8
32870                                           ! 5579                              0,
32871 8589                        00            .byte	0
32872                                           ! 5580                         0,
32873 858A                        00            .byte	0
32874                                           ! 5581                              0,
32875 858B                        00            .byte	0
32876                                           ! 5582                                0,
32877 858C                        00            .byte	0
32878                                           ! 5583                        0xE0000000,
32879 858D                      0000            .word	0
32880 858F                      E000            .word	$E000
32881                                           ! 5584                               0,
32882 8591                      0000            .word	0
32883 8593                      0000            .word	0
32884                                           ! 5585                             0,
32885 8595                      0000            .word	0
32886                                           ! 5586                                3840,
32887 8597                      0F00            .word	$F00
32888                                           ! 5587                             0,
32889 8599                        00            .byte	0
32890                                           ! 5588                             0,
32891 859A                        00            .byte	0
32892                                           ! 5589                           8,
32893 859B                        08            .byte	8
32894                                           ! 5590                                16,
32895 859C                        10            .byte	$10
32896                                           ! 5591                             8,
32897 859D                        08            .byte	8
32898                                           ! 5592                                  8,
32899 859E                        08            .byte	8
32900                                           ! 5593                            8,
32901 859F                        08            .byte	8
32902                                           ! 5594                                 0,
32903 85A0                        00            .byte	0
32904                                           ! 5595                            0,
32905 85A1                        00            .byte	0
32906                                           ! 5596                                 0,
32907 85A2                        00            .byte	0
32908                                           ! 5597                          0,
32909 85A3                      0000            .word	0
32910 85A5                      0000            .word	0
32911                                           ! 5598 } },
32912                                           ! 5599 { 0x011c,
32913 85A7                      011C            .word	$11C
32914                                           ! 5600 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32915 85A9                      009B            .word	$9B
32916                                           ! 5601                           0x01 | 0x02 | 0x04,
32917 85AB                        07            .byte	7
32918                                           ! 5602                           0,
32919 85AC                        00            .byte	0
32920                                           ! 5603                           64,
32921 85AD                      0040            .word	$40
32922                                           ! 5604                    64,
32923 85AF                      0040            .word	$40
32924                                           ! 5605                        0xA000,
32925 85B1                      A000            .word	$A000
32926                                           ! 5606         
32927                                           ! 5606                0x0000,
32928 85B3                      0000            .word	0
32929                                           ! 5607                       0,
32930 85B5                      0000            .word	0
32931 85B7                      0000            .word	0
32932                                           ! 5608                             1600,
32933 85B9                      0640            .word	$640
32934                                           ! 5609                        1600,
32935 85BB                      0640            .word	$640
32936                                           ! 5610                        1200,
32937 85BD                      04B0            .word	$4B0
32938                                           ! 5611                      8,
32939 85BF                        08            .byte	8
32940                                           ! 5612                      16,
32941 85C0                        10            .byte	$10
32942                                           ! 5613                           1,
32943 85C1                        01            .byte	1
32944                                           ! 5614                         8,
32945 85C2                        08            .byte	8
32946                                           ! 5615                          30,
32947 85C3                        1E            .byte	$1E
32948                                           ! 5616                        0x04,
32949 85C4                        04            .byte	4
32950                                           ! 5617                     0,
32951 85C5                        00            .byte	0
32952                                           ! 5618                               7,
32953 85C6                        07            .byte	7
32954                                           ! 5619                          0,
32955 85C7                        00            .byte	0
32956                                           ! 5620                        0,
32957 85C8                        00            .byte	0
32958                                           ! 5621                             0,
32959 85C9                        00            .byte	0
32960                                           ! 5622                          0,
32961 85CA                        00            .byte	0
32962                                           ! 5623                               0,
32963 85CB                        00            .byte	0
32964                                           ! 5624                         0,
32965 85CC                        00            .byte	0
32966                                           ! 5625                              0,
32967 85CD                        00            .byte	0
32968                                           ! 5626                         0,
32969 85CE                        00            .byte	0
32970                                           ! 5627                              0,
32971 85CF                        00            .byte	0
32972                                           ! 5628                                0,
32973 85D0                        00            .byte	0
32974                                           ! 5629                        0xE0000000,
32975 85D1                      0000            .word	0
32976 85D3                      E000            .word	$E000
32977                                           ! 5630                               0,
32978 85D5                      0000            .word	0
32979 85D7                      0000            .word	0
32980                                           ! 5631                             0,
32981 85D9                      0000            .word	0
32982                                           ! 5632                                1600,
32983 85DB                      0640            .word	$640
32984                                           ! 5633                             0,
32985 85DD                        00            .byte	0
32986                                           ! 5634                             0,
32987 85DE                        00            .byte	0
32988                                           ! 5635                           0,
32989 85DF                        00            .byte	0
32990                                           ! 5636                                0,
32991 85E0                        00            .byte	0
32992                                           ! 5637                             0,
32993 85E1                        00            .byte	0
32994                                           ! 5638                                  0,
32995 85E2                        00            .byte	0
32996                                           ! 5639                            0,
32997 85E3                        00            .byte	0
32998                                           ! 5640                                 0,
32999 85E4                        00            .byte	0
33000                                           ! 5641                            0,
33001 85E5                        00            .byte	0
33002                                           ! 5642                                 0,
33003 85E6                        00            .byte	0
33004                                           ! 5643                          0,
33005 85E7                      0000            .word	0
33006 85E9                      0000            .word	0
33007                                           ! 5644 } },
33008                                           ! 5645 { 0x011d,
33009 85EB                      011D            .word	$11D
33010                                           ! 5646 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33011 85ED                      009B            .word	$9B
33012                                           ! 5647                           0x01 | 0x02 | 0x04,
33013 85EF                        07            .byte	7
33014                                           ! 5648                           0,
33015 85F0                        00            .byte	0
33016                                           ! 5649                           64,
33017 85F1                      0040            .word	$40
33018                                           ! 5650                    64,
33019 85F3                      0040            .word	$40
33020                                           ! 5651                        0xA000,
33021 85F5                      A000            .word	$A000
33022                                           ! 5652                        0x0000,
33023 85F7                      0000            .word	0
33024                                           ! 5653                       0,
33025 85F9                      0000            .word	0
33026 85FB                      0000            .word	0
33027                                           ! 5654                             3200,
33028 85FD                      0C80            .word	$C80
33029                                           ! 5655                        1600,
33030 85FF                      0640            .word	$640
33031                                           ! 5656                        1200,
33032 8601                      04B0            .word	$4B0
33033                                           ! 5657                      8,
33034 8603                        08            .byte	8
33035                                           ! 5658                      16,
33036 8604                        10            .byte	$10
33037                                           ! 5659                           1,
33038 8605                        01            .byte	1
33039                                           ! 5660                         15,
33040 8606                        0F            .byte	$F
33041                                           ! 5661                          59,
33042 8607                        3B            .byte	$3B
33043                                           ! 5662                        0x06,
33044 8608                        06            .byte	6
33045                                           ! 5663                     0,
33046 8609                        00            .byte	0
33047                                           ! 5664                               3,
33048 860A                        03            .byte	3
33049                                           ! 5665                          0,
33050 860B                        00            .byte	0
33051                                           ! 5666                        5,
33052 860C                        05            .byte	5
33053                                           ! 5667                             10,
33054 860D                        0A            .byte	$A
33055                                           ! 5668                          5,
33056 860E                        05            .byte	5
33057                                           ! 5669                               5,
33058 860F                        05            .byte	5
33059                                           ! 5670                         5,
33060 8610                        05            .byte	5
33061                                           ! 5671                              0,
33062 8611                        00            .byte	0
33063                                           ! 5672                         1,
33064 8612                        01            .byte	1
33065                                           ! 5673                              15,
33066 8613                        0F            .byte	$F
33067                                           ! 5674                                0,
33068 8614                        00            .byte	0
33069                                           ! 5675                  
33070                                           ! 5675       0xE0000000,
33071 8615                      0000            .word	0
33072 8617                      E000            .word	$E000
33073                                           ! 5676                               0,
33074 8619                      0000            .word	0
33075 861B                      0000            .word	0
33076                                           ! 5677                             0,
33077 861D                      0000            .word	0
33078                                           ! 5678                                3200,
33079 861F                      0C80            .word	$C80
33080                                           ! 5679                             0,
33081 8621                        00            .byte	0
33082                                           ! 5680                             0,
33083 8622                        00            .byte	0
33084                                           ! 5681                           5,
33085 8623                        05            .byte	5
33086                                           ! 5682                                10,
33087 8624                        0A            .byte	$A
33088                                           ! 5683                             5,
33089 8625                        05            .byte	5
33090                                           ! 5684                                  5,
33091 8626                        05            .byte	5
33092                                           ! 5685                            5,
33093 8627                        05            .byte	5
33094                                           ! 5686                                 0,
33095 8628                        00            .byte	0
33096                                           ! 5687                            1,
33097 8629                        01            .byte	1
33098                                           ! 5688                                 15,
33099 862A                        0F            .byte	$F
33100                                           ! 5689                          0,
33101 862B                      0000            .word	0
33102 862D                      0000            .word	0
33103                                           ! 5690 } },
33104                                           ! 5691 { 0x011e,
33105 862F                      011E            .word	$11E
33106                                           ! 5692 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33107 8631                      009B            .word	$9B
33108                                           ! 5693                           0x01 | 0x02 | 0x04,
33109 8633                        07            .byte	7
33110                                           ! 5694                           0,
33111 8634                        00            .byte	0
33112                                           ! 5695                           64,
33113 8635                      0040            .word	$40
33114                                           ! 5696                    64,
33115 8637                      0040            .word	$40
33116                                           ! 5697                        0xA000,
33117 8639                      A000            .word	$A000
33118                                           ! 5698                        0x0000,
33119 863B                      0000            .word	0
33120                                           ! 5699                       0,
33121 863D                      0000            .word	0
33122 863F                      0000            .word	0
33123                                           ! 5700                             3200,
33124 8641                      0C80            .word	$C80
33125                                           ! 5701                        1600,
33126 8643                      0640            .word	$640
33127                                           ! 5702                        1200,
33128 8645                      04B0            .word	$4B0
33129                                           ! 5703                      8,
33130 8647                        08            .byte	8
33131                                           ! 5704                      16,
33132 8648                        10            .byte	$10
33133                                           ! 5705                           1,
33134 8649                        01            .byte	1
33135                                           ! 5706                         16,
33136 864A                        10            .byte	$10
33137                                           ! 5707                          59,
33138 864B                        3B            .byte	$3B
33139                                           ! 5708                        0x06,
33140 864C                        06            .byte	6
33141                                           ! 5709                     0,
33142 864D                        00            .byte	0
33143                                           ! 5710                               3,
33144 864E                        03            .byte	3
33145                                           ! 5711                          0,
33146 864F                        00            .byte	0
33147                                           ! 5712                        5,
33148 8650                        05            .byte	5
33149                                           ! 5713                             11,
33150 8651                        0B            .byte	$B
33151                                           ! 5714                          6,
33152 8652                        06            .byte	6
33153                                           ! 5715                               5,
33154 8653                        05            .byte	5
33155                                           ! 5716                         5,
33156 8654                        05            .byte	5
33157                                           ! 5717                              0,
33158 8655                        00            .byte	0
33159                                           ! 5718                         0,
33160 8656                        00            .byte	0
33161                                           ! 5719                              0,
33162 8657                        00            .byte	0
33163                                           ! 5720                                0,
33164 8658                        00            .byte	0
33165                                           ! 5721                        0xE0000000,
33166 8659                      0000            .word	0
33167 865B                      E000            .word	$E000
33168                                           ! 5722                               0,
33169 865D                      0000            .word	0
33170 865F                      0000            .word	0
33171                                           ! 5723                             0,
33172 8661                      0000            .word	0
33173                                           ! 5724                                3200,
33174 8663                      0C80            .word	$C80
33175                                           ! 5725                             0,
33176 8665                        00            .byte	0
33177                                           ! 5726                             0,
33178 8666                        00            .byte	0
33179                                           ! 5727                           5,
33180 8667                        05            .byte	5
33181                                           ! 5728                                11,
33182 8668                        0B            .byte	$B
33183                                           ! 5729                             6,
33184 8669                        06            .byte	6
33185                                           ! 5730                                  5,
33186 866A                        05            .byte	5
33187                                           ! 5731                            5,
33188 866B                        05            .byte	5
33189                                           ! 5732                                 0,
33190 866C                        00            .byte	0
33191                                           ! 5733                            0,
33192 866D                        00            .byte	0
33193                                           ! 5734                                 0,
33194 866E                        00            .byte	0
33195                                           ! 5735                          0,
33196 866F                      0000            .word	0
33197 8671                      0000            .word	0
33198                                           ! 5736 } },
33199                                           ! 5737 { 0x011f,
33200 8673                      011F            .word	$11F
33201                                           ! 5738 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33202 8675                      009B            .word	$9B
33203                                           ! 5739                           0x01 | 0x02 | 0x04,
33204 8677                        07            .byte	7
33205                                           ! 5740                           0,
33206 8678                        00            .byte	0
33207                                           ! 5741                           64,
33208 8679                      0040            .word	$40
33209                                           ! 5742                    64,
33210 867B                      0040            .word	$40
33211                                           ! 5743               
33212                                           ! 5743          0xA000,
33213 867D                      A000            .word	$A000
33214                                           ! 5744                        0x0000,
33215 867F                      0000            .word	0
33216                                           ! 5745                       0,
33217 8681                      0000            .word	0
33218 8683                      0000            .word	0
33219                                           ! 5746                             4800,
33220 8685                      12C0            .word	$12C0
33221                                           ! 5747                        1600,
33222 8687                      0640            .word	$640
33223                                           ! 5748                        1200,
33224 8689                      04B0            .word	$4B0
33225                                           ! 5749                      8,
33226 868B                        08            .byte	8
33227                                           ! 5750                      16,
33228 868C                        10            .byte	$10
33229                                           ! 5751                           1,
33230 868D                        01            .byte	1
33231                                           ! 5752                         24,
33232 868E                        18            .byte	$18
33233                                           ! 5753                          88,
33234 868F                        58            .byte	$58
33235                                           ! 5754                        0x06,
33236 8690                        06            .byte	6
33237                                           ! 5755                     0,
33238 8691                        00            .byte	0
33239                                           ! 5756                               1,
33240 8692                        01            .byte	1
33241                                           ! 5757                          0,
33242 8693                        00            .byte	0
33243                                           ! 5758                        8,
33244 8694                        08            .byte	8
33245                                           ! 5759                             16,
33246 8695                        10            .byte	$10
33247                                           ! 5760                          8,
33248 8696                        08            .byte	8
33249                                           ! 5761                               8,
33250 8697                        08            .byte	8
33251                                           ! 5762                         8,
33252 8698                        08            .byte	8
33253                                           ! 5763                              0,
33254 8699                        00            .byte	0
33255                                           ! 5764                         0,
33256 869A                        00            .byte	0
33257                                           ! 5765                              0,
33258 869B                        00            .byte	0
33259                                           ! 5766                                0,
33260 869C                        00            .byte	0
33261                                           ! 5767                        0xE0000000,
33262 869D                      0000            .word	0
33263 869F                      E000            .word	$E000
33264                                           ! 5768                               0,
33265 86A1                      0000            .word	0
33266 86A3                      0000            .word	0
33267                                           ! 5769                             0,
33268 86A5                      0000            .word	0
33269                                           ! 5770                                4800,
33270 86A7                      12C0            .word	$12C0
33271                                           ! 5771                             0,
33272 86A9                        00            .byte	0
33273                                           ! 5772                             0,
33274 86AA                        00            .byte	0
33275                                           ! 5773                           8,
33276 86AB                        08            .byte	8
33277                                           ! 5774                                16,
33278 86AC                        10            .byte	$10
33279                                           ! 5775                             8,
33280 86AD                        08            .byte	8
33281                                           ! 5776                                  8,
33282 86AE                        08            .byte	8
33283                                           ! 5777                            8,
33284 86AF                        08            .byte	8
33285                                           ! 5778                                 0,
33286 86B0                        00            .byte	0
33287                                           ! 5779                            0,
33288 86B1                        00            .byte	0
33289                                           ! 5780                                 0,
33290 86B2                        00            .byte	0
33291                                           ! 5781                          0,
33292 86B3                      0000            .word	0
33293 86B5                      0000            .word	0
33294                                           ! 5782 } },
33295                                           ! 5783 { 0x0140,
33296 86B7                      0140            .word	$140
33297                                           ! 5784 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33298 86B9                      009B            .word	$9B
33299                                           ! 5785                           0x01 | 0x02 | 0x04,
33300 86BB                        07            .byte	7
33301                                           ! 5786                           0,
33302 86BC                        00            .byte	0
33303                                           ! 5787                           64,
33304 86BD                      0040            .word	$40
33305                                           ! 5788                    64,
33306 86BF                      0040            .word	$40
33307                                           ! 5789                        0xA000,
33308 86C1                      A000            .word	$A000
33309                                           ! 5790                        0x0000,
33310 86C3                      0000            .word	0
33311                                           ! 5791                       0,
33312 86C5                      0000            .word	0
33313 86C7                      0000            .word	0
33314                                           ! 5792                             1280,
33315 86C9                      0500            .word	$500
33316                                           ! 5793                        320,
33317 86CB                      0140            .word	$140
33318                                           ! 5794                        200,
33319 86CD                      00C8            .word	$C8
33320                                           ! 5795                      8,
33321 86CF                        08            .byte	8
33322                                           ! 5796                      16,
33323 86D0                        10            .byte	$10
33324                                           ! 5797                           1,
33325 86D1                        01            .byte	1
33326                                           ! 5798                         32,
33327 86D2                        20            .byte	$20
33328                                           ! 5799                          4,
33329 86D3                        04            .byte	4
33330                                           ! 5800                        0x06,
33331 86D4                        06            .byte	6
33332                                           ! 5801                     0,
33333 86D5                        00            .byte	0
33334                                           ! 5802                               64,
33335 86D6                        40            .byte	$40
33336                                           ! 5803                          0,
33337 86D7                        00            .byte	0
33338                                           ! 5804                        8,
33339 86D8                        08            .byte	8
33340                                           ! 5805                             16,
33341 86D9                        10            .byte	$10
33342                                           ! 5806                          8,
33343 86DA                        08            .byte	8
33344                                           ! 5807                               8,
33345 86DB                        08            .byte	8
33346                                           ! 5808                         8,
33347 86DC                        08            .byte	8
33348                                           ! 5809                              0,
33349 86DD                        00            .byte	0
33350                                           ! 5810                         8,
33351 86DE                        08            .byte	8
33352                                           ! 5811                              24,
33353 86DF                        18            .byte	$18
33354                                           ! 5812                          
33355                                           ! 5812       0x02,
33356 86E0                        02            .byte	2
33357                                           ! 5813                        0xE0000000,
33358 86E1                      0000            .word	0
33359 86E3                      E000            .word	$E000
33360                                           ! 5814                               0,
33361 86E5                      0000            .word	0
33362 86E7                      0000            .word	0
33363                                           ! 5815                             0,
33364 86E9                      0000            .word	0
33365                                           ! 5816                                1280,
33366 86EB                      0500            .word	$500
33367                                           ! 5817                             0,
33368 86ED                        00            .byte	0
33369                                           ! 5818                             0,
33370 86EE                        00            .byte	0
33371                                           ! 5819                           8,
33372 86EF                        08            .byte	8
33373                                           ! 5820                                16,
33374 86F0                        10            .byte	$10
33375                                           ! 5821                             8,
33376 86F1                        08            .byte	8
33377                                           ! 5822                                  8,
33378 86F2                        08            .byte	8
33379                                           ! 5823                            8,
33380 86F3                        08            .byte	8
33381                                           ! 5824                                 0,
33382 86F4                        00            .byte	0
33383                                           ! 5825                            8,
33384 86F5                        08            .byte	8
33385                                           ! 5826                                 24,
33386 86F6                        18            .byte	$18
33387                                           ! 5827                          0,
33388 86F7                      0000            .word	0
33389 86F9                      0000            .word	0
33390                                           ! 5828 } },
33391                                           ! 5829 { 0x0141,
33392 86FB                      0141            .word	$141
33393                                           ! 5830 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33394 86FD                      009B            .word	$9B
33395                                           ! 5831                           0x01 | 0x02 | 0x04,
33396 86FF                        07            .byte	7
33397                                           ! 5832                           0,
33398 8700                        00            .byte	0
33399                                           ! 5833                           64,
33400 8701                      0040            .word	$40
33401                                           ! 5834                    64,
33402 8703                      0040            .word	$40
33403                                           ! 5835                        0xA000,
33404 8705                      A000            .word	$A000
33405                                           ! 5836                        0x0000,
33406 8707                      0000            .word	0
33407                                           ! 5837                       0,
33408 8709                      0000            .word	0
33409 870B                      0000            .word	0
33410                                           ! 5838                             2560,
33411 870D                      0A00            .word	$A00
33412                                           ! 5839                        640,
33413 870F                      0280            .word	$280
33414                                           ! 5840                        400,
33415 8711                      0190            .word	$190
33416                                           ! 5841                      8,
33417 8713                        08            .byte	8
33418                                           ! 5842                      16,
33419 8714                        10            .byte	$10
33420                                           ! 5843                           1,
33421 8715                        01            .byte	1
33422                                           ! 5844                         32,
33423 8716                        20            .byte	$20
33424                                           ! 5845                          16,
33425 8717                        10            .byte	$10
33426                                           ! 5846                        0x06,
33427 8718                        06            .byte	6
33428                                           ! 5847                     0,
33429 8719                        00            .byte	0
33430                                           ! 5848                               15,
33431 871A                        0F            .byte	$F
33432                                           ! 5849                          0,
33433 871B                        00            .byte	0
33434                                           ! 5850                        8,
33435 871C                        08            .byte	8
33436                                           ! 5851                             16,
33437 871D                        10            .byte	$10
33438                                           ! 5852                          8,
33439 871E                        08            .byte	8
33440                                           ! 5853                               8,
33441 871F                        08            .byte	8
33442                                           ! 5854                         8,
33443 8720                        08            .byte	8
33444                                           ! 5855                              0,
33445 8721                        00            .byte	0
33446                                           ! 5856                         8,
33447 8722                        08            .byte	8
33448                                           ! 5857                              24,
33449 8723                        18            .byte	$18
33450                                           ! 5858                                0x02,
33451 8724                        02            .byte	2
33452                                           ! 5859                        0xE0000000,
33453 8725                      0000            .word	0
33454 8727                      E000            .word	$E000
33455                                           ! 5860                               0,
33456 8729                      0000            .word	0
33457 872B                      0000            .word	0
33458                                           ! 5861                             0,
33459 872D                      0000            .word	0
33460                                           ! 5862                                2560,
33461 872F                      0A00            .word	$A00
33462                                           ! 5863                             0,
33463 8731                        00            .byte	0
33464                                           ! 5864                             0,
33465 8732                        00            .byte	0
33466                                           ! 5865                           8,
33467 8733                        08            .byte	8
33468                                           ! 5866                                16,
33469 8734                        10            .byte	$10
33470                                           ! 5867                             8,
33471 8735                        08            .byte	8
33472                                           ! 5868                                  8,
33473 8736                        08            .byte	8
33474                                           ! 5869                            8,
33475 8737                        08            .byte	8
33476                                           ! 5870                                 0,
33477 8738                        00            .byte	0
33478                                           ! 5871                            8,
33479 8739                        08            .byte	8
33480                                           ! 5872                                 24,
33481 873A                        18            .byte	$18
33482                                           ! 5873                          0,
33483 873B                      0000            .word	0
33484 873D                      0000            .word	0
33485                                           ! 5874 } },
33486                                           ! 5875 { 0x0142,
33487 873F                      0142            .word	$142
33488                                           ! 5876 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33489 8741                      009B            .word	$9B
33490                                           ! 5877                           0x01 | 0x02 | 0x04,
33491 8743                        07            .byte	7
33492                                           ! 5878                           0,
33493 8744                        00            .byte	0
33494                                           ! 5879                           64,
33495 8745                      0040            .word	$40
33496                                           ! 5880     
33497                                           ! 5880                64,
33498 8747                      0040            .word	$40
33499                                           ! 5881                        0xA000,
33500 8749                      A000            .word	$A000
33501                                           ! 5882                        0x0000,
33502 874B                      0000            .word	0
33503                                           ! 5883                       0,
33504 874D                      0000            .word	0
33505 874F                      0000            .word	0
33506                                           ! 5884                             2560,
33507 8751                      0A00            .word	$A00
33508                                           ! 5885                        640,
33509 8753                      0280            .word	$280
33510                                           ! 5886                        480,
33511 8755                      01E0            .word	$1E0
33512                                           ! 5887                      8,
33513 8757                        08            .byte	8
33514                                           ! 5888                      16,
33515 8758                        10            .byte	$10
33516                                           ! 5889                           1,
33517 8759                        01            .byte	1
33518                                           ! 5890                         32,
33519 875A                        20            .byte	$20
33520                                           ! 5891                          19,
33521 875B                        13            .byte	$13
33522                                           ! 5892                        0x06,
33523 875C                        06            .byte	6
33524                                           ! 5893                     0,
33525 875D                        00            .byte	0
33526                                           ! 5894                               12,
33527 875E                        0C            .byte	$C
33528                                           ! 5895                          0,
33529 875F                        00            .byte	0
33530                                           ! 5896                        8,
33531 8760                        08            .byte	8
33532                                           ! 5897                             16,
33533 8761                        10            .byte	$10
33534                                           ! 5898                          8,
33535 8762                        08            .byte	8
33536                                           ! 5899                               8,
33537 8763                        08            .byte	8
33538                                           ! 5900                         8,
33539 8764                        08            .byte	8
33540                                           ! 5901                              0,
33541 8765                        00            .byte	0
33542                                           ! 5902                         8,
33543 8766                        08            .byte	8
33544                                           ! 5903                              24,
33545 8767                        18            .byte	$18
33546                                           ! 5904                                0x02,
33547 8768                        02            .byte	2
33548                                           ! 5905                        0xE0000000,
33549 8769                      0000            .word	0
33550 876B                      E000            .word	$E000
33551                                           ! 5906                               0,
33552 876D                      0000            .word	0
33553 876F                      0000            .word	0
33554                                           ! 5907                             0,
33555 8771                      0000            .word	0
33556                                           ! 5908                                2560,
33557 8773                      0A00            .word	$A00
33558                                           ! 5909                             0,
33559 8775                        00            .byte	0
33560                                           ! 5910                             0,
33561 8776                        00            .byte	0
33562                                           ! 5911                           8,
33563 8777                        08            .byte	8
33564                                           ! 5912                                16,
33565 8778                        10            .byte	$10
33566                                           ! 5913                             8,
33567 8779                        08            .byte	8
33568                                           ! 5914                                  8,
33569 877A                        08            .byte	8
33570                                           ! 5915                            8,
33571 877B                        08            .byte	8
33572                                           ! 5916                                 0,
33573 877C                        00            .byte	0
33574                                           ! 5917                            8,
33575 877D                        08            .byte	8
33576                                           ! 5918                                 24,
33577 877E                        18            .byte	$18
33578                                           ! 5919                          0,
33579 877F                      0000            .word	0
33580 8781                      0000            .word	0
33581                                           ! 5920 } },
33582                                           ! 5921 { 0x0143,
33583 8783                      0143            .word	$143
33584                                           ! 5922 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33585 8785                      009B            .word	$9B
33586                                           ! 5923                           0x01 | 0x02 | 0x04,
33587 8787                        07            .byte	7
33588                                           ! 5924                           0,
33589 8788                        00            .byte	0
33590                                           ! 5925                           64,
33591 8789                      0040            .word	$40
33592                                           ! 5926                    64,
33593 878B                      0040            .word	$40
33594                                           ! 5927                        0xA000,
33595 878D                      A000            .word	$A000
33596                                           ! 5928                        0x0000,
33597 878F                      0000            .word	0
33598                                           ! 5929                       0,
33599 8791                      0000            .word	0
33600 8793                      0000            .word	0
33601                                           ! 5930                             3200,
33602 8795                      0C80            .word	$C80
33603                                           ! 5931                        800,
33604 8797                      0320            .word	$320
33605                                           ! 5932                        600,
33606 8799                      0258            .word	$258
33607                                           ! 5933                      8,
33608 879B                        08            .byte	8
33609                                           ! 5934                      16,
33610 879C                        10            .byte	$10
33611                                           ! 5935                           1,
33612 879D                        01            .byte	1
33613                                           ! 5936                         32,
33614 879E                        20            .byte	$20
33615                                           ! 5937                          30,
33616 879F                        1E            .byte	$1E
33617                                           ! 5938                        0x06,
33618 87A0                        06            .byte	6
33619                                           ! 5939                     0,
33620 87A1                        00            .byte	0
33621                                           ! 5940                               7,
33622 87A2                        07            .byte	7
33623                                           ! 5941                          0,
33624 87A3                        00            .byte	0
33625                                           ! 5942                        8,
33626 87A4                        08            .byte	8
33627                                           ! 5943                             16,
33628 87A5                        10            .byte	$10
33629                                           ! 5944                          8,
33630 87A6                        08            .byte	8
33631                                           ! 5945                               8,
33632 87A7                        08            .byte	8
33633                                           ! 5946                         8,
33634 87A8                        08            .byte	8
33635                                           ! 5947                              0,
33636 87A9                        00            .byte	0
33637                                           ! 5948                         8,
33638 87AA                        08            .byte	8
33639                                           ! 5949                      
33640                                           ! 5949         24,
33641 87AB                        18            .byte	$18
33642                                           ! 5950                                0x02,
33643 87AC                        02            .byte	2
33644                                           ! 5951                        0xE0000000,
33645 87AD                      0000            .word	0
33646 87AF                      E000            .word	$E000
33647                                           ! 5952                               0,
33648 87B1                      0000            .word	0
33649 87B3                      0000            .word	0
33650                                           ! 5953                             0,
33651 87B5                      0000            .word	0
33652                                           ! 5954                                3200,
33653 87B7                      0C80            .word	$C80
33654                                           ! 5955                             0,
33655 87B9                        00            .byte	0
33656                                           ! 5956                             0,
33657 87BA                        00            .byte	0
33658                                           ! 5957                           8,
33659 87BB                        08            .byte	8
33660                                           ! 5958                                16,
33661 87BC                        10            .byte	$10
33662                                           ! 5959                             8,
33663 87BD                        08            .byte	8
33664                                           ! 5960                                  8,
33665 87BE                        08            .byte	8
33666                                           ! 5961                            8,
33667 87BF                        08            .byte	8
33668                                           ! 5962                                 0,
33669 87C0                        00            .byte	0
33670                                           ! 5963                            8,
33671 87C1                        08            .byte	8
33672                                           ! 5964                                 24,
33673 87C2                        18            .byte	$18
33674                                           ! 5965                          0,
33675 87C3                      0000            .word	0
33676 87C5                      0000            .word	0
33677                                           ! 5966 } },
33678                                           ! 5967 { 0x0144,
33679 87C7                      0144            .word	$144
33680                                           ! 5968 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33681 87C9                      009B            .word	$9B
33682                                           ! 5969                           0x01 | 0x02 | 0x04,
33683 87CB                        07            .byte	7
33684                                           ! 5970                           0,
33685 87CC                        00            .byte	0
33686                                           ! 5971                           64,
33687 87CD                      0040            .word	$40
33688                                           ! 5972                    64,
33689 87CF                      0040            .word	$40
33690                                           ! 5973                        0xA000,
33691 87D1                      A000            .word	$A000
33692                                           ! 5974                        0x0000,
33693 87D3                      0000            .word	0
33694                                           ! 5975                       0,
33695 87D5                      0000            .word	0
33696 87D7                      0000            .word	0
33697                                           ! 5976                             4096,
33698 87D9                      1000            .word	$1000
33699                                           ! 5977                        1024,
33700 87DB                      0400            .word	$400
33701                                           ! 5978                        768,
33702 87DD                      0300            .word	$300
33703                                           ! 5979                      8,
33704 87DF                        08            .byte	8
33705                                           ! 5980                      16,
33706 87E0                        10            .byte	$10
33707                                           ! 5981                           1,
33708 87E1                        01            .byte	1
33709                                           ! 5982                         32,
33710 87E2                        20            .byte	$20
33711                                           ! 5983                          48,
33712 87E3                        30            .byte	$30
33713                                           ! 5984                        0x06,
33714 87E4                        06            .byte	6
33715                                           ! 5985                     0,
33716 87E5                        00            .byte	0
33717                                           ! 5986                               4,
33718 87E6                        04            .byte	4
33719                                           ! 5987                          0,
33720 87E7                        00            .byte	0
33721                                           ! 5988                        8,
33722 87E8                        08            .byte	8
33723                                           ! 5989                             16,
33724 87E9                        10            .byte	$10
33725                                           ! 5990                          8,
33726 87EA                        08            .byte	8
33727                                           ! 5991                               8,
33728 87EB                        08            .byte	8
33729                                           ! 5992                         8,
33730 87EC                        08            .byte	8
33731                                           ! 5993                              0,
33732 87ED                        00            .byte	0
33733                                           ! 5994                         8,
33734 87EE                        08            .byte	8
33735                                           ! 5995                              24,
33736 87EF                        18            .byte	$18
33737                                           ! 5996                                0x02,
33738 87F0                        02            .byte	2
33739                                           ! 5997                        0xE0000000,
33740 87F1                      0000            .word	0
33741 87F3                      E000            .word	$E000
33742                                           ! 5998                               0,
33743 87F5                      0000            .word	0
33744 87F7                      0000            .word	0
33745                                           ! 5999                             0,
33746 87F9                      0000            .word	0
33747                                           ! 6000                                4096,
33748 87FB                      1000            .word	$1000
33749                                           ! 6001                             0,
33750 87FD                        00            .byte	0
33751                                           ! 6002                             0,
33752 87FE                        00            .byte	0
33753                                           ! 6003                           8,
33754 87FF                        08            .byte	8
33755                                           ! 6004                                16,
33756 8800                        10            .byte	$10
33757                                           ! 6005                             8,
33758 8801                        08            .byte	8
33759                                           ! 6006                                  8,
33760 8802                        08            .byte	8
33761                                           ! 6007                            8,
33762 8803                        08            .byte	8
33763                                           ! 6008                                 0,
33764 8804                        00            .byte	0
33765                                           ! 6009                            8,
33766 8805                        08            .byte	8
33767                                           ! 6010                                 24,
33768 8806                        18            .byte	$18
33769                                           ! 6011                          0,
33770 8807                      0000            .word	0
33771 8809                      0000            .word	0
33772                                           ! 6012 } },
33773                                           ! 6013 { 0x0145,
33774 880B                      0145            .word	$145
33775                                           ! 6014 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33776 880D                      009B            .word	$9B
33777                                           ! 6015                           0x01 | 0x02 | 0x04,
33778 880F                        07            .byte	7
33779                                           ! 6016                           
33780                                           ! 6016 0,
33781 8810                        00            .byte	0
33782                                           ! 6017                           64,
33783 8811                      0040            .word	$40
33784                                           ! 6018                    64,
33785 8813                      0040            .word	$40
33786                                           ! 6019                        0xA000,
33787 8815                      A000            .word	$A000
33788                                           ! 6020                        0x0000,
33789 8817                      0000            .word	0
33790                                           ! 6021                       0,
33791 8819                      0000            .word	0
33792 881B                      0000            .word	0
33793                                           ! 6022                             5120,
33794 881D                      1400            .word	$1400
33795                                           ! 6023                        1280,
33796 881F                      0500            .word	$500
33797                                           ! 6024                        1024,
33798 8821                      0400            .word	$400
33799                                           ! 6025                      8,
33800 8823                        08            .byte	8
33801                                           ! 6026                      16,
33802 8824                        10            .byte	$10
33803                                           ! 6027                           1,
33804 8825                        01            .byte	1
33805                                           ! 6028                         32,
33806 8826                        20            .byte	$20
33807                                           ! 6029                          80,
33808 8827                        50            .byte	$50
33809                                           ! 6030                        0x06,
33810 8828                        06            .byte	6
33811                                           ! 6031                     0,
33812 8829                        00            .byte	0
33813                                           ! 6032                               2,
33814 882A                        02            .byte	2
33815                                           ! 6033                          0,
33816 882B                        00            .byte	0
33817                                           ! 6034                        8,
33818 882C                        08            .byte	8
33819                                           ! 6035                             16,
33820 882D                        10            .byte	$10
33821                                           ! 6036                          8,
33822 882E                        08            .byte	8
33823                                           ! 6037                               8,
33824 882F                        08            .byte	8
33825                                           ! 6038                         8,
33826 8830                        08            .byte	8
33827                                           ! 6039                              0,
33828 8831                        00            .byte	0
33829                                           ! 6040                         8,
33830 8832                        08            .byte	8
33831                                           ! 6041                              24,
33832 8833                        18            .byte	$18
33833                                           ! 6042                                0x02,
33834 8834                        02            .byte	2
33835                                           ! 6043                        0xE0000000,
33836 8835                      0000            .word	0
33837 8837                      E000            .word	$E000
33838                                           ! 6044                               0,
33839 8839                      0000            .word	0
33840 883B                      0000            .word	0
33841                                           ! 6045                             0,
33842 883D                      0000            .word	0
33843                                           ! 6046                                5120,
33844 883F                      1400            .word	$1400
33845                                           ! 6047                             0,
33846 8841                        00            .byte	0
33847                                           ! 6048                             0,
33848 8842                        00            .byte	0
33849                                           ! 6049                           8,
33850 8843                        08            .byte	8
33851                                           ! 6050                                16,
33852 8844                        10            .byte	$10
33853                                           ! 6051                             8,
33854 8845                        08            .byte	8
33855                                           ! 6052                                  8,
33856 8846                        08            .byte	8
33857                                           ! 6053                            8,
33858 8847                        08            .byte	8
33859                                           ! 6054                                 0,
33860 8848                        00            .byte	0
33861                                           ! 6055                            8,
33862 8849                        08            .byte	8
33863                                           ! 6056                                 24,
33864 884A                        18            .byte	$18
33865                                           ! 6057                          0,
33866 884B                      0000            .word	0
33867 884D                      0000            .word	0
33868                                           ! 6058 } },
33869                                           ! 6059 { 0x0146,
33870 884F                      0146            .word	$146
33871                                           ! 6060 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33872 8851                      009B            .word	$9B
33873                                           ! 6061                           0x01 | 0x02 | 0x04,
33874 8853                        07            .byte	7
33875                                           ! 6062                           0,
33876 8854                        00            .byte	0
33877                                           ! 6063                           64,
33878 8855                      0040            .word	$40
33879                                           ! 6064                    64,
33880 8857                      0040            .word	$40
33881                                           ! 6065                        0xA000,
33882 8859                      A000            .word	$A000
33883                                           ! 6066                        0x0000,
33884 885B                      0000            .word	0
33885                                           ! 6067                       0,
33886 885D                      0000            .word	0
33887 885F                      0000            .word	0
33888                                           ! 6068                             320,
33889 8861                      0140            .word	$140
33890                                           ! 6069                        320,
33891 8863                      0140            .word	$140
33892                                           ! 6070                        200,
33893 8865                      00C8            .word	$C8
33894                                           ! 6071                      8,
33895 8867                        08            .byte	8
33896                                           ! 6072                      16,
33897 8868                        10            .byte	$10
33898                                           ! 6073                           1,
33899 8869                        01            .byte	1
33900                                           ! 6074                         8,
33901 886A                        08            .byte	8
33902                                           ! 6075                          1,
33903 886B                        01            .byte	1
33904                                           ! 6076                        0x04,
33905 886C                        04            .byte	4
33906                                           ! 6077                     0,
33907 886D                        00            .byte	0
33908                                           ! 6078                               261,
33909 886E                        05            .byte	5
33910                                           ! 6079                          0,
33911 886F                        00            .byte	0
33912                                           ! 6080                        0,
33913 8870                        00            .byte	0
33914                                           ! 6081                             0,
33915 8871                        00            .byte	0
33916                                           ! 6082                          0,
33917 8872                        00            .byte	0
33918                                           ! 6083                               0,
33919 8873                        00            .byte	0
33920                                           ! 6084                         0,
33921 8874                        00            .byte	0
33922                                           ! 6085                              0,
33923 8875                        00            .byte	0
33924                                           ! 6086             
33925                                           ! 6086             0,
33926 8876                        00            .byte	0
33927                                           ! 6087                              0,
33928 8877                        00            .byte	0
33929                                           ! 6088                                0,
33930 8878                        00            .byte	0
33931                                           ! 6089                        0xE0000000,
33932 8879                      0000            .word	0
33933 887B                      E000            .word	$E000
33934                                           ! 6090                               0,
33935 887D                      0000            .word	0
33936 887F                      0000            .word	0
33937                                           ! 6091                             0,
33938 8881                      0000            .word	0
33939                                           ! 6092                                320,
33940 8883                      0140            .word	$140
33941                                           ! 6093                             0,
33942 8885                        00            .byte	0
33943                                           ! 6094                             0,
33944 8886                        00            .byte	0
33945                                           ! 6095                           0,
33946 8887                        00            .byte	0
33947                                           ! 6096                                0,
33948 8888                        00            .byte	0
33949                                           ! 6097                             0,
33950 8889                        00            .byte	0
33951                                           ! 6098                                  0,
33952 888A                        00            .byte	0
33953                                           ! 6099                            0,
33954 888B                        00            .byte	0
33955                                           ! 6100                                 0,
33956 888C                        00            .byte	0
33957                                           ! 6101                            0,
33958 888D                        00            .byte	0
33959                                           ! 6102                                 0,
33960 888E                        00            .byte	0
33961                                           ! 6103                          0,
33962 888F                      0000            .word	0
33963 8891                      0000            .word	0
33964                                           ! 6104 } },
33965                                           ! 6105 { 0x0147,
33966 8893                      0147            .word	$147
33967                                           ! 6106 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33968 8895                      009B            .word	$9B
33969                                           ! 6107                           0x01 | 0x02 | 0x04,
33970 8897                        07            .byte	7
33971                                           ! 6108                           0,
33972 8898                        00            .byte	0
33973                                           ! 6109                           64,
33974 8899                      0040            .word	$40
33975                                           ! 6110                    64,
33976 889B                      0040            .word	$40
33977                                           ! 6111                        0xA000,
33978 889D                      A000            .word	$A000
33979                                           ! 6112                        0x0000,
33980 889F                      0000            .word	0
33981                                           ! 6113                       0,
33982 88A1                      0000            .word	0
33983 88A3                      0000            .word	0
33984                                           ! 6114                             6400,
33985 88A5                      1900            .word	$1900
33986                                           ! 6115                        1600,
33987 88A7                      0640            .word	$640
33988                                           ! 6116                        1200,
33989 88A9                      04B0            .word	$4B0
33990                                           ! 6117                      8,
33991 88AB                        08            .byte	8
33992                                           ! 6118                      16,
33993 88AC                        10            .byte	$10
33994                                           ! 6119                           1,
33995 88AD                        01            .byte	1
33996                                           ! 6120                         32,
33997 88AE                        20            .byte	$20
33998                                           ! 6121                          118,
33999 88AF                        76            .byte	$76
34000                                           ! 6122                        0x06,
34001 88B0                        06            .byte	6
34002                                           ! 6123                     0,
34003 88B1                        00            .byte	0
34004                                           ! 6124                               1,
34005 88B2                        01            .byte	1
34006                                           ! 6125                          0,
34007 88B3                        00            .byte	0
34008                                           ! 6126                        8,
34009 88B4                        08            .byte	8
34010                                           ! 6127                             16,
34011 88B5                        10            .byte	$10
34012                                           ! 6128                          8,
34013 88B6                        08            .byte	8
34014                                           ! 6129                               8,
34015 88B7                        08            .byte	8
34016                                           ! 6130                         8,
34017 88B8                        08            .byte	8
34018                                           ! 6131                              0,
34019 88B9                        00            .byte	0
34020                                           ! 6132                         8,
34021 88BA                        08            .byte	8
34022                                           ! 6133                              24,
34023 88BB                        18            .byte	$18
34024                                           ! 6134                                0x02,
34025 88BC                        02            .byte	2
34026                                           ! 6135                        0xE0000000,
34027 88BD                      0000            .word	0
34028 88BF                      E000            .word	$E000
34029                                           ! 6136                               0,
34030 88C1                      0000            .word	0
34031 88C3                      0000            .word	0
34032                                           ! 6137                             0,
34033 88C5                      0000            .word	0
34034                                           ! 6138                                6400,
34035 88C7                      1900            .word	$1900
34036                                           ! 6139                             0,
34037 88C9                        00            .byte	0
34038                                           ! 6140                             0,
34039 88CA                        00            .byte	0
34040                                           ! 6141                           8,
34041 88CB                        08            .byte	8
34042                                           ! 6142                                16,
34043 88CC                        10            .byte	$10
34044                                           ! 6143                             8,
34045 88CD                        08            .byte	8
34046                                           ! 6144                                  8,
34047 88CE                        08            .byte	8
34048                                           ! 6145                            8,
34049 88CF                        08            .byte	8
34050                                           ! 6146                                 0,
34051 88D0                        00            .byte	0
34052                                           ! 6147                            8,
34053 88D1                        08            .byte	8
34054                                           ! 6148                                 24,
34055 88D2                        18            .byte	$18
34056                                           ! 6149                          0,
34057 88D3                      0000            .word	0
34058 88D5                      0000            .word	0
34059                                           ! 6150 } },
34060                                           ! 6151 { 0x0148,
34061 88D7                      0148            .word	$148
34062                                           ! 6152 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34063 88D9                      009B            .word	$9B
34064                                           ! 6153                           0x01 | 0x02 | 0
34065                                           ! 6153 x04,
34066 88DB                        07            .byte	7
34067                                           ! 6154                           0,
34068 88DC                        00            .byte	0
34069                                           ! 6155                           64,
34070 88DD                      0040            .word	$40
34071                                           ! 6156                    64,
34072 88DF                      0040            .word	$40
34073                                           ! 6157                        0xA000,
34074 88E1                      A000            .word	$A000
34075                                           ! 6158                        0x0000,
34076 88E3                      0000            .word	0
34077                                           ! 6159                       0,
34078 88E5                      0000            .word	0
34079 88E7                      0000            .word	0
34080                                           ! 6160                             1152,
34081 88E9                      0480            .word	$480
34082                                           ! 6161                        1152,
34083 88EB                      0480            .word	$480
34084                                           ! 6162                        864,
34085 88ED                      0360            .word	$360
34086                                           ! 6163                      8,
34087 88EF                        08            .byte	8
34088                                           ! 6164                      16,
34089 88F0                        10            .byte	$10
34090                                           ! 6165                           1,
34091 88F1                        01            .byte	1
34092                                           ! 6166                         8,
34093 88F2                        08            .byte	8
34094                                           ! 6167                          16,
34095 88F3                        10            .byte	$10
34096                                           ! 6168                        0x04,
34097 88F4                        04            .byte	4
34098                                           ! 6169                     0,
34099 88F5                        00            .byte	0
34100                                           ! 6170                               15,
34101 88F6                        0F            .byte	$F
34102                                           ! 6171                          0,
34103 88F7                        00            .byte	0
34104                                           ! 6172                        0,
34105 88F8                        00            .byte	0
34106                                           ! 6173                             0,
34107 88F9                        00            .byte	0
34108                                           ! 6174                          0,
34109 88FA                        00            .byte	0
34110                                           ! 6175                               0,
34111 88FB                        00            .byte	0
34112                                           ! 6176                         0,
34113 88FC                        00            .byte	0
34114                                           ! 6177                              0,
34115 88FD                        00            .byte	0
34116                                           ! 6178                         0,
34117 88FE                        00            .byte	0
34118                                           ! 6179                              0,
34119 88FF                        00            .byte	0
34120                                           ! 6180                                0,
34121 8900                        00            .byte	0
34122                                           ! 6181                        0xE0000000,
34123 8901                      0000            .word	0
34124 8903                      E000            .word	$E000
34125                                           ! 6182                               0,
34126 8905                      0000            .word	0
34127 8907                      0000            .word	0
34128                                           ! 6183                             0,
34129 8909                      0000            .word	0
34130                                           ! 6184                                1152,
34131 890B                      0480            .word	$480
34132                                           ! 6185                             0,
34133 890D                        00            .byte	0
34134                                           ! 6186                             0,
34135 890E                        00            .byte	0
34136                                           ! 6187                           0,
34137 890F                        00            .byte	0
34138                                           ! 6188                                0,
34139 8910                        00            .byte	0
34140                                           ! 6189                             0,
34141 8911                        00            .byte	0
34142                                           ! 6190                                  0,
34143 8912                        00            .byte	0
34144                                           ! 6191                            0,
34145 8913                        00            .byte	0
34146                                           ! 6192                                 0,
34147 8914                        00            .byte	0
34148                                           ! 6193                            0,
34149 8915                        00            .byte	0
34150                                           ! 6194                                 0,
34151 8916                        00            .byte	0
34152                                           ! 6195                          0,
34153 8917                      0000            .word	0
34154 8919                      0000            .word	0
34155                                           ! 6196 } },
34156                                           ! 6197 { 0x0149,
34157 891B                      0149            .word	$149
34158                                           ! 6198 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34159 891D                      009B            .word	$9B
34160                                           ! 6199                           0x01 | 0x02 | 0x04,
34161 891F                        07            .byte	7
34162                                           ! 6200                           0,
34163 8920                        00            .byte	0
34164                                           ! 6201                           64,
34165 8921                      0040            .word	$40
34166                                           ! 6202                    64,
34167 8923                      0040            .word	$40
34168                                           ! 6203                        0xA000,
34169 8925                      A000            .word	$A000
34170                                           ! 6204                        0x0000,
34171 8927                      0000            .word	0
34172                                           ! 6205                       0,
34173 8929                      0000            .word	0
34174 892B                      0000            .word	0
34175                                           ! 6206                             2304,
34176 892D                      0900            .word	$900
34177                                           ! 6207                        1152,
34178 892F                      0480            .word	$480
34179                                           ! 6208                        864,
34180 8931                      0360            .word	$360
34181                                           ! 6209                      8,
34182 8933                        08            .byte	8
34183                                           ! 6210                      16,
34184 8934                        10            .byte	$10
34185                                           ! 6211                           1,
34186 8935                        01            .byte	1
34187                                           ! 6212                         15,
34188 8936                        0F            .byte	$F
34189                                           ! 6213                          31,
34190 8937                        1F            .byte	$1F
34191                                           ! 6214                        0x06,
34192 8938                        06            .byte	6
34193                                           ! 6215                     0,
34194 8939                        00            .byte	0
34195                                           ! 6216                               7,
34196 893A                        07            .byte	7
34197                                           ! 6217                          0,
34198 893B                        00            .byte	0
34199                                           ! 6218                        5,
34200 893C                        05            .byte	5
34201                                           ! 6219                             10,
34202 893D                        0A            .byte	$A
34203                                           ! 6220                          5,
34204 893E                        05            .byte	5
34205                                           ! 6221                               5,
34206 893F                        05            .byte	5
34207                                           ! 6222                         5,
34208 8940                        05            .byte	5
34209                                           ! 6223                   
34210                                           ! 6223            0,
34211 8941                        00            .byte	0
34212                                           ! 6224                         1,
34213 8942                        01            .byte	1
34214                                           ! 6225                              15,
34215 8943                        0F            .byte	$F
34216                                           ! 6226                                0,
34217 8944                        00            .byte	0
34218                                           ! 6227                        0xE0000000,
34219 8945                      0000            .word	0
34220 8947                      E000            .word	$E000
34221                                           ! 6228                               0,
34222 8949                      0000            .word	0
34223 894B                      0000            .word	0
34224                                           ! 6229                             0,
34225 894D                      0000            .word	0
34226                                           ! 6230                                2304,
34227 894F                      0900            .word	$900
34228                                           ! 6231                             0,
34229 8951                        00            .byte	0
34230                                           ! 6232                             0,
34231 8952                        00            .byte	0
34232                                           ! 6233                           5,
34233 8953                        05            .byte	5
34234                                           ! 6234                                10,
34235 8954                        0A            .byte	$A
34236                                           ! 6235                             5,
34237 8955                        05            .byte	5
34238                                           ! 6236                                  5,
34239 8956                        05            .byte	5
34240                                           ! 6237                            5,
34241 8957                        05            .byte	5
34242                                           ! 6238                                 0,
34243 8958                        00            .byte	0
34244                                           ! 6239                            1,
34245 8959                        01            .byte	1
34246                                           ! 6240                                 15,
34247 895A                        0F            .byte	$F
34248                                           ! 6241                          0,
34249 895B                      0000            .word	0
34250 895D                      0000            .word	0
34251                                           ! 6242 } },
34252                                           ! 6243 { 0x014a,
34253 895F                      014A            .word	$14A
34254                                           ! 6244 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34255 8961                      009B            .word	$9B
34256                                           ! 6245                           0x01 | 0x02 | 0x04,
34257 8963                        07            .byte	7
34258                                           ! 6246                           0,
34259 8964                        00            .byte	0
34260                                           ! 6247                           64,
34261 8965                      0040            .word	$40
34262                                           ! 6248                    64,
34263 8967                      0040            .word	$40
34264                                           ! 6249                        0xA000,
34265 8969                      A000            .word	$A000
34266                                           ! 6250                        0x0000,
34267 896B                      0000            .word	0
34268                                           ! 6251                       0,
34269 896D                      0000            .word	0
34270 896F                      0000            .word	0
34271                                           ! 6252                             2304,
34272 8971                      0900            .word	$900
34273                                           ! 6253                        1152,
34274 8973                      0480            .word	$480
34275                                           ! 6254                        864,
34276 8975                      0360            .word	$360
34277                                           ! 6255                      8,
34278 8977                        08            .byte	8
34279                                           ! 6256                      16,
34280 8978                        10            .byte	$10
34281                                           ! 6257                           1,
34282 8979                        01            .byte	1
34283                                           ! 6258                         16,
34284 897A                        10            .byte	$10
34285                                           ! 6259                          31,
34286 897B                        1F            .byte	$1F
34287                                           ! 6260                        0x06,
34288 897C                        06            .byte	6
34289                                           ! 6261                     0,
34290 897D                        00            .byte	0
34291                                           ! 6262                               7,
34292 897E                        07            .byte	7
34293                                           ! 6263                          0,
34294 897F                        00            .byte	0
34295                                           ! 6264                        5,
34296 8980                        05            .byte	5
34297                                           ! 6265                             11,
34298 8981                        0B            .byte	$B
34299                                           ! 6266                          6,
34300 8982                        06            .byte	6
34301                                           ! 6267                               5,
34302 8983                        05            .byte	5
34303                                           ! 6268                         5,
34304 8984                        05            .byte	5
34305                                           ! 6269                              0,
34306 8985                        00            .byte	0
34307                                           ! 6270                         0,
34308 8986                        00            .byte	0
34309                                           ! 6271                              0,
34310 8987                        00            .byte	0
34311                                           ! 6272                                0,
34312 8988                        00            .byte	0
34313                                           ! 6273                        0xE0000000,
34314 8989                      0000            .word	0
34315 898B                      E000            .word	$E000
34316                                           ! 6274                               0,
34317 898D                      0000            .word	0
34318 898F                      0000            .word	0
34319                                           ! 6275                             0,
34320 8991                      0000            .word	0
34321                                           ! 6276                                2304,
34322 8993                      0900            .word	$900
34323                                           ! 6277                             0,
34324 8995                        00            .byte	0
34325                                           ! 6278                             0,
34326 8996                        00            .byte	0
34327                                           ! 6279                           5,
34328 8997                        05            .byte	5
34329                                           ! 6280                                11,
34330 8998                        0B            .byte	$B
34331                                           ! 6281                             6,
34332 8999                        06            .byte	6
34333                                           ! 6282                                  5,
34334 899A                        05            .byte	5
34335                                           ! 6283                            5,
34336 899B                        05            .byte	5
34337                                           ! 6284                                 0,
34338 899C                        00            .byte	0
34339                                           ! 6285                            0,
34340 899D                        00            .byte	0
34341                                           ! 6286                                 0,
34342 899E                        00            .byte	0
34343                                           ! 6287                          0,
34344 899F                      0000            .word	0
34345 89A1                      0000            .word	0
34346                                           ! 6288 } },
34347                                           ! 6289 { 0x014b,
34348 89A3                      014B            .word	$14B
34349                                           ! 6290 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34350 89A5                      009B            .word	$9B
34351                                           ! 6291                   
34352                                           ! 6291         0x01 | 0x02 | 0x04,
34353 89A7                        07            .byte	7
34354                                           ! 6292                           0,
34355 89A8                        00            .byte	0
34356                                           ! 6293                           64,
34357 89A9                      0040            .word	$40
34358                                           ! 6294                    64,
34359 89AB                      0040            .word	$40
34360                                           ! 6295                        0xA000,
34361 89AD                      A000            .word	$A000
34362                                           ! 6296                        0x0000,
34363 89AF                      0000            .word	0
34364                                           ! 6297                       0,
34365 89B1                      0000            .word	0
34366 89B3                      0000            .word	0
34367                                           ! 6298                             3456,
34368 89B5                      0D80            .word	$D80
34369                                           ! 6299                        1152,
34370 89B7                      0480            .word	$480
34371                                           ! 6300                        864,
34372 89B9                      0360            .word	$360
34373                                           ! 6301                      8,
34374 89BB                        08            .byte	8
34375                                           ! 6302                      16,
34376 89BC                        10            .byte	$10
34377                                           ! 6303                           1,
34378 89BD                        01            .byte	1
34379                                           ! 6304                         24,
34380 89BE                        18            .byte	$18
34381                                           ! 6305                          46,
34382 89BF                        2E            .byte	$2E
34383                                           ! 6306                        0x06,
34384 89C0                        06            .byte	6
34385                                           ! 6307                     0,
34386 89C1                        00            .byte	0
34387                                           ! 6308                               4,
34388 89C2                        04            .byte	4
34389                                           ! 6309                          0,
34390 89C3                        00            .byte	0
34391                                           ! 6310                        8,
34392 89C4                        08            .byte	8
34393                                           ! 6311                             16,
34394 89C5                        10            .byte	$10
34395                                           ! 6312                          8,
34396 89C6                        08            .byte	8
34397                                           ! 6313                               8,
34398 89C7                        08            .byte	8
34399                                           ! 6314                         8,
34400 89C8                        08            .byte	8
34401                                           ! 6315                              0,
34402 89C9                        00            .byte	0
34403                                           ! 6316                         0,
34404 89CA                        00            .byte	0
34405                                           ! 6317                              0,
34406 89CB                        00            .byte	0
34407                                           ! 6318                                0,
34408 89CC                        00            .byte	0
34409                                           ! 6319                        0xE0000000,
34410 89CD                      0000            .word	0
34411 89CF                      E000            .word	$E000
34412                                           ! 6320                               0,
34413 89D1                      0000            .word	0
34414 89D3                      0000            .word	0
34415                                           ! 6321                             0,
34416 89D5                      0000            .word	0
34417                                           ! 6322                                3456,
34418 89D7                      0D80            .word	$D80
34419                                           ! 6323                             0,
34420 89D9                        00            .byte	0
34421                                           ! 6324                             0,
34422 89DA                        00            .byte	0
34423                                           ! 6325                           8,
34424 89DB                        08            .byte	8
34425                                           ! 6326                                16,
34426 89DC                        10            .byte	$10
34427                                           ! 6327                             8,
34428 89DD                        08            .byte	8
34429                                           ! 6328                                  8,
34430 89DE                        08            .byte	8
34431                                           ! 6329                            8,
34432 89DF                        08            .byte	8
34433                                           ! 6330                                 0,
34434 89E0                        00            .byte	0
34435                                           ! 6331                            0,
34436 89E1                        00            .byte	0
34437                                           ! 6332                                 0,
34438 89E2                        00            .byte	0
34439                                           ! 6333                          0,
34440 89E3                      0000            .word	0
34441 89E5                      0000            .word	0
34442                                           ! 6334 } },
34443                                           ! 6335 { 0x014c,
34444 89E7                      014C            .word	$14C
34445                                           ! 6336 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34446 89E9                      009B            .word	$9B
34447                                           ! 6337                           0x01 | 0x02 | 0x04,
34448 89EB                        07            .byte	7
34449                                           ! 6338                           0,
34450 89EC                        00            .byte	0
34451                                           ! 6339                           64,
34452 89ED                      0040            .word	$40
34453                                           ! 6340                    64,
34454 89EF                      0040            .word	$40
34455                                           ! 6341                        0xA000,
34456 89F1                      A000            .word	$A000
34457                                           ! 6342                        0x0000,
34458 89F3                      0000            .word	0
34459                                           ! 6343                       0,
34460 89F5                      0000            .word	0
34461 89F7                      0000            .word	0
34462                                           ! 6344                             4608,
34463 89F9                      1200            .word	$1200
34464                                           ! 6345                        1152,
34465 89FB                      0480            .word	$480
34466                                           ! 6346                        864,
34467 89FD                      0360            .word	$360
34468                                           ! 6347                      8,
34469 89FF                        08            .byte	8
34470                                           ! 6348                      16,
34471 8A00                        10            .byte	$10
34472                                           ! 6349                           1,
34473 8A01                        01            .byte	1
34474                                           ! 6350                         32,
34475 8A02                        20            .byte	$20
34476                                           ! 6351                          61,
34477 8A03                        3D            .byte	$3D
34478                                           ! 6352                        0x06,
34479 8A04                        06            .byte	6
34480                                           ! 6353                     0,
34481 8A05                        00            .byte	0
34482                                           ! 6354                               3,
34483 8A06                        03            .byte	3
34484                                           ! 6355                          0,
34485 8A07                        00            .byte	0
34486                                           ! 6356                        8,
34487 8A08                        08            .byte	8
34488                                           ! 6357                             16,
34489 8A09                        10            .byte	$10
34490                                           ! 6358                          8,
34491 8A0A                        08            .byte	8
34492                                           ! 6359                               8,
34493 8A0B                        08            .byte	8
34494                                           ! 6360                     
34495                                           ! 6360     8,
34496 8A0C                        08            .byte	8
34497                                           ! 6361                              0,
34498 8A0D                        00            .byte	0
34499                                           ! 6362                         8,
34500 8A0E                        08            .byte	8
34501                                           ! 6363                              24,
34502 8A0F                        18            .byte	$18
34503                                           ! 6364                                0x02,
34504 8A10                        02            .byte	2
34505                                           ! 6365                        0xE0000000,
34506 8A11                      0000            .word	0
34507 8A13                      E000            .word	$E000
34508                                           ! 6366                               0,
34509 8A15                      0000            .word	0
34510 8A17                      0000            .word	0
34511                                           ! 6367                             0,
34512 8A19                      0000            .word	0
34513                                           ! 6368                                4608,
34514 8A1B                      1200            .word	$1200
34515                                           ! 6369                             0,
34516 8A1D                        00            .byte	0
34517                                           ! 6370                             0,
34518 8A1E                        00            .byte	0
34519                                           ! 6371                           8,
34520 8A1F                        08            .byte	8
34521                                           ! 6372                                16,
34522 8A20                        10            .byte	$10
34523                                           ! 6373                             8,
34524 8A21                        08            .byte	8
34525                                           ! 6374                                  8,
34526 8A22                        08            .byte	8
34527                                           ! 6375                            8,
34528 8A23                        08            .byte	8
34529                                           ! 6376                                 0,
34530 8A24                        00            .byte	0
34531                                           ! 6377                            8,
34532 8A25                        08            .byte	8
34533                                           ! 6378                                 24,
34534 8A26                        18            .byte	$18
34535                                           ! 6379                          0,
34536 8A27                      0000            .word	0
34537 8A29                      0000            .word	0
34538                                           ! 6380 } },
34539                                           ! 6381 { 0x0178,
34540 8A2B                      0178            .word	$178
34541                                           ! 6382 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34542 8A2D                      009B            .word	$9B
34543                                           ! 6383                           0x01 | 0x02 | 0x04,
34544 8A2F                        07            .byte	7
34545                                           ! 6384                           0,
34546 8A30                        00            .byte	0
34547                                           ! 6385                           64,
34548 8A31                      0040            .word	$40
34549                                           ! 6386                    64,
34550 8A33                      0040            .word	$40
34551                                           ! 6387                        0xA000,
34552 8A35                      A000            .word	$A000
34553                                           ! 6388                        0x0000,
34554 8A37                      0000            .word	0
34555                                           ! 6389                       0,
34556 8A39                      0000            .word	0
34557 8A3B                      0000            .word	0
34558                                           ! 6390                             2560,
34559 8A3D                      0A00            .word	$A00
34560                                           ! 6391                        1280,
34561 8A3F                      0500            .word	$500
34562                                           ! 6392                        800,
34563 8A41                      0320            .word	$320
34564                                           ! 6393                      8,
34565 8A43                        08            .byte	8
34566                                           ! 6394                      16,
34567 8A44                        10            .byte	$10
34568                                           ! 6395                           1,
34569 8A45                        01            .byte	1
34570                                           ! 6396                         16,
34571 8A46                        10            .byte	$10
34572                                           ! 6397                          32,
34573 8A47                        20            .byte	$20
34574                                           ! 6398                        0x06,
34575 8A48                        06            .byte	6
34576                                           ! 6399                     0,
34577 8A49                        00            .byte	0
34578                                           ! 6400                               7,
34579 8A4A                        07            .byte	7
34580                                           ! 6401                          0,
34581 8A4B                        00            .byte	0
34582                                           ! 6402                        5,
34583 8A4C                        05            .byte	5
34584                                           ! 6403                             11,
34585 8A4D                        0B            .byte	$B
34586                                           ! 6404                          6,
34587 8A4E                        06            .byte	6
34588                                           ! 6405                               5,
34589 8A4F                        05            .byte	5
34590                                           ! 6406                         5,
34591 8A50                        05            .byte	5
34592                                           ! 6407                              0,
34593 8A51                        00            .byte	0
34594                                           ! 6408                         0,
34595 8A52                        00            .byte	0
34596                                           ! 6409                              0,
34597 8A53                        00            .byte	0
34598                                           ! 6410                                0,
34599 8A54                        00            .byte	0
34600                                           ! 6411                        0xE0000000,
34601 8A55                      0000            .word	0
34602 8A57                      E000            .word	$E000
34603                                           ! 6412                               0,
34604 8A59                      0000            .word	0
34605 8A5B                      0000            .word	0
34606                                           ! 6413                             0,
34607 8A5D                      0000            .word	0
34608                                           ! 6414                                2560,
34609 8A5F                      0A00            .word	$A00
34610                                           ! 6415                             0,
34611 8A61                        00            .byte	0
34612                                           ! 6416                             0,
34613 8A62                        00            .byte	0
34614                                           ! 6417                           5,
34615 8A63                        05            .byte	5
34616                                           ! 6418                                11,
34617 8A64                        0B            .byte	$B
34618                                           ! 6419                             6,
34619 8A65                        06            .byte	6
34620                                           ! 6420                                  5,
34621 8A66                        05            .byte	5
34622                                           ! 6421                            5,
34623 8A67                        05            .byte	5
34624                                           ! 6422                                 0,
34625 8A68                        00            .byte	0
34626                                           ! 6423                            0,
34627 8A69                        00            .byte	0
34628                                           ! 6424                                 0,
34629 8A6A                        00            .byte	0
34630                                           ! 6425                          0,
34631 8A6B                      0000            .word	0
34632 8A6D                      0000            .word	0
34633                                           ! 6426 } },
34634                                           ! 6427 { 0x0179,
34635 8A6F                      0179            .word	$179
34636                                           ! 6428 { 0x0001 | 0x0002 | 0x0008 | 0x0080 
34637                                           ! 6428 | 0x0010,
34638 8A71                      009B            .word	$9B
34639                                           ! 6429                           0x01 | 0x02 | 0x04,
34640 8A73                        07            .byte	7
34641                                           ! 6430                           0,
34642 8A74                        00            .byte	0
34643                                           ! 6431                           64,
34644 8A75                      0040            .word	$40
34645                                           ! 6432                    64,
34646 8A77                      0040            .word	$40
34647                                           ! 6433                        0xA000,
34648 8A79                      A000            .word	$A000
34649                                           ! 6434                        0x0000,
34650 8A7B                      0000            .word	0
34651                                           ! 6435                       0,
34652 8A7D                      0000            .word	0
34653 8A7F                      0000            .word	0
34654                                           ! 6436                             3840,
34655 8A81                      0F00            .word	$F00
34656                                           ! 6437                        1280,
34657 8A83                      0500            .word	$500
34658                                           ! 6438                        800,
34659 8A85                      0320            .word	$320
34660                                           ! 6439                      8,
34661 8A87                        08            .byte	8
34662                                           ! 6440                      16,
34663 8A88                        10            .byte	$10
34664                                           ! 6441                           1,
34665 8A89                        01            .byte	1
34666                                           ! 6442                         24,
34667 8A8A                        18            .byte	$18
34668                                           ! 6443                          47,
34669 8A8B                        2F            .byte	$2F
34670                                           ! 6444                        0x06,
34671 8A8C                        06            .byte	6
34672                                           ! 6445                     0,
34673 8A8D                        00            .byte	0
34674                                           ! 6446                               4,
34675 8A8E                        04            .byte	4
34676                                           ! 6447                          0,
34677 8A8F                        00            .byte	0
34678                                           ! 6448                        8,
34679 8A90                        08            .byte	8
34680                                           ! 6449                             16,
34681 8A91                        10            .byte	$10
34682                                           ! 6450                          8,
34683 8A92                        08            .byte	8
34684                                           ! 6451                               8,
34685 8A93                        08            .byte	8
34686                                           ! 6452                         8,
34687 8A94                        08            .byte	8
34688                                           ! 6453                              0,
34689 8A95                        00            .byte	0
34690                                           ! 6454                         0,
34691 8A96                        00            .byte	0
34692                                           ! 6455                              0,
34693 8A97                        00            .byte	0
34694                                           ! 6456                                0,
34695 8A98                        00            .byte	0
34696                                           ! 6457                        0xE0000000,
34697 8A99                      0000            .word	0
34698 8A9B                      E000            .word	$E000
34699                                           ! 6458                               0,
34700 8A9D                      0000            .word	0
34701 8A9F                      0000            .word	0
34702                                           ! 6459                             0,
34703 8AA1                      0000            .word	0
34704                                           ! 6460                                3840,
34705 8AA3                      0F00            .word	$F00
34706                                           ! 6461                             0,
34707 8AA5                        00            .byte	0
34708                                           ! 6462                             0,
34709 8AA6                        00            .byte	0
34710                                           ! 6463                           8,
34711 8AA7                        08            .byte	8
34712                                           ! 6464                                16,
34713 8AA8                        10            .byte	$10
34714                                           ! 6465                             8,
34715 8AA9                        08            .byte	8
34716                                           ! 6466                                  8,
34717 8AAA                        08            .byte	8
34718                                           ! 6467                            8,
34719 8AAB                        08            .byte	8
34720                                           ! 6468                                 0,
34721 8AAC                        00            .byte	0
34722                                           ! 6469                            0,
34723 8AAD                        00            .byte	0
34724                                           ! 6470                                 0,
34725 8AAE                        00            .byte	0
34726                                           ! 6471                          0,
34727 8AAF                      0000            .word	0
34728 8AB1                      0000            .word	0
34729                                           ! 6472 } },
34730                                           ! 6473 { 0x017a,
34731 8AB3                      017A            .word	$17A
34732                                           ! 6474 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34733 8AB5                      009B            .word	$9B
34734                                           ! 6475                           0x01 | 0x02 | 0x04,
34735 8AB7                        07            .byte	7
34736                                           ! 6476                           0,
34737 8AB8                        00            .byte	0
34738                                           ! 6477                           64,
34739 8AB9                      0040            .word	$40
34740                                           ! 6478                    64,
34741 8ABB                      0040            .word	$40
34742                                           ! 6479                        0xA000,
34743 8ABD                      A000            .word	$A000
34744                                           ! 6480                        0x0000,
34745 8ABF                      0000            .word	0
34746                                           ! 6481                       0,
34747 8AC1                      0000            .word	0
34748 8AC3                      0000            .word	0
34749                                           ! 6482                             5120,
34750 8AC5                      1400            .word	$1400
34751                                           ! 6483                        1280,
34752 8AC7                      0500            .word	$500
34753                                           ! 6484                        800,
34754 8AC9                      0320            .word	$320
34755                                           ! 6485                      8,
34756 8ACB                        08            .byte	8
34757                                           ! 6486                      16,
34758 8ACC                        10            .byte	$10
34759                                           ! 6487                           1,
34760 8ACD                        01            .byte	1
34761                                           ! 6488                         32,
34762 8ACE                        20            .byte	$20
34763                                           ! 6489                          63,
34764 8ACF                        3F            .byte	$3F
34765                                           ! 6490                        0x06,
34766 8AD0                        06            .byte	6
34767                                           ! 6491                     0,
34768 8AD1                        00            .byte	0
34769                                           ! 6492                               3,
34770 8AD2                        03            .byte	3
34771                                           ! 6493                          0,
34772 8AD3                        00            .byte	0
34773                                           ! 6494                        8,
34774 8AD4                        08            .byte	8
34775                                           ! 6495                             16,
34776 8AD5                        10            .byte	$10
34777                                           ! 6496                          8,
34778 8AD6                        08            .byte	8
34779                                           ! 6497                          
34780                                           ! 6497      8,
34781 8AD7                        08            .byte	8
34782                                           ! 6498                         8,
34783 8AD8                        08            .byte	8
34784                                           ! 6499                              0,
34785 8AD9                        00            .byte	0
34786                                           ! 6500                         8,
34787 8ADA                        08            .byte	8
34788                                           ! 6501                              24,
34789 8ADB                        18            .byte	$18
34790                                           ! 6502                                0x02,
34791 8ADC                        02            .byte	2
34792                                           ! 6503                        0xE0000000,
34793 8ADD                      0000            .word	0
34794 8ADF                      E000            .word	$E000
34795                                           ! 6504                               0,
34796 8AE1                      0000            .word	0
34797 8AE3                      0000            .word	0
34798                                           ! 6505                             0,
34799 8AE5                      0000            .word	0
34800                                           ! 6506                                5120,
34801 8AE7                      1400            .word	$1400
34802                                           ! 6507                             0,
34803 8AE9                        00            .byte	0
34804                                           ! 6508                             0,
34805 8AEA                        00            .byte	0
34806                                           ! 6509                           8,
34807 8AEB                        08            .byte	8
34808                                           ! 6510                                16,
34809 8AEC                        10            .byte	$10
34810                                           ! 6511                             8,
34811 8AED                        08            .byte	8
34812                                           ! 6512                                  8,
34813 8AEE                        08            .byte	8
34814                                           ! 6513                            8,
34815 8AEF                        08            .byte	8
34816                                           ! 6514                                 0,
34817 8AF0                        00            .byte	0
34818                                           ! 6515                            8,
34819 8AF1                        08            .byte	8
34820                                           ! 6516                                 24,
34821 8AF2                        18            .byte	$18
34822                                           ! 6517                          0,
34823 8AF3                      0000            .word	0
34824 8AF5                      0000            .word	0
34825                                           ! 6518 } },
34826                                           ! 6519 { 0x017b,
34827 8AF7                      017B            .word	$17B
34828                                           ! 6520 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34829 8AF9                      009B            .word	$9B
34830                                           ! 6521                           0x01 | 0x02 | 0x04,
34831 8AFB                        07            .byte	7
34832                                           ! 6522                           0,
34833 8AFC                        00            .byte	0
34834                                           ! 6523                           64,
34835 8AFD                      0040            .word	$40
34836                                           ! 6524                    64,
34837 8AFF                      0040            .word	$40
34838                                           ! 6525                        0xA000,
34839 8B01                      A000            .word	$A000
34840                                           ! 6526                        0x0000,
34841 8B03                      0000            .word	0
34842                                           ! 6527                       0,
34843 8B05                      0000            .word	0
34844 8B07                      0000            .word	0
34845                                           ! 6528                             2560,
34846 8B09                      0A00            .word	$A00
34847                                           ! 6529                        1280,
34848 8B0B                      0500            .word	$500
34849                                           ! 6530                        960,
34850 8B0D                      03C0            .word	$3C0
34851                                           ! 6531                      8,
34852 8B0F                        08            .byte	8
34853                                           ! 6532                      16,
34854 8B10                        10            .byte	$10
34855                                           ! 6533                           1,
34856 8B11                        01            .byte	1
34857                                           ! 6534                         16,
34858 8B12                        10            .byte	$10
34859                                           ! 6535                          38,
34860 8B13                        26            .byte	$26
34861                                           ! 6536                        0x06,
34862 8B14                        06            .byte	6
34863                                           ! 6537                     0,
34864 8B15                        00            .byte	0
34865                                           ! 6538                               5,
34866 8B16                        05            .byte	5
34867                                           ! 6539                          0,
34868 8B17                        00            .byte	0
34869                                           ! 6540                        5,
34870 8B18                        05            .byte	5
34871                                           ! 6541                             11,
34872 8B19                        0B            .byte	$B
34873                                           ! 6542                          6,
34874 8B1A                        06            .byte	6
34875                                           ! 6543                               5,
34876 8B1B                        05            .byte	5
34877                                           ! 6544                         5,
34878 8B1C                        05            .byte	5
34879                                           ! 6545                              0,
34880 8B1D                        00            .byte	0
34881                                           ! 6546                         0,
34882 8B1E                        00            .byte	0
34883                                           ! 6547                              0,
34884 8B1F                        00            .byte	0
34885                                           ! 6548                                0,
34886 8B20                        00            .byte	0
34887                                           ! 6549                        0xE0000000,
34888 8B21                      0000            .word	0
34889 8B23                      E000            .word	$E000
34890                                           ! 6550                               0,
34891 8B25                      0000            .word	0
34892 8B27                      0000            .word	0
34893                                           ! 6551                             0,
34894 8B29                      0000            .word	0
34895                                           ! 6552                                2560,
34896 8B2B                      0A00            .word	$A00
34897                                           ! 6553                             0,
34898 8B2D                        00            .byte	0
34899                                           ! 6554                             0,
34900 8B2E                        00            .byte	0
34901                                           ! 6555                           5,
34902 8B2F                        05            .byte	5
34903                                           ! 6556                                11,
34904 8B30                        0B            .byte	$B
34905                                           ! 6557                             6,
34906 8B31                        06            .byte	6
34907                                           ! 6558                                  5,
34908 8B32                        05            .byte	5
34909                                           ! 6559                            5,
34910 8B33                        05            .byte	5
34911                                           ! 6560                                 0,
34912 8B34                        00            .byte	0
34913                                           ! 6561                            0,
34914 8B35                        00            .byte	0
34915                                           ! 6562                                 0,
34916 8B36                        00            .byte	0
34917                                           ! 6563                          0,
34918 8B37                      0000            .word	0
34919 8B39                      0000            .word	0
34920                                           ! 6564 } },
34921                                           ! 6565 { 0x017c,
34922 8B3B                      017C            .word	$17C
34923                                           ! 6566 { 0x0001
34924                                           ! 6566  | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34925 8B3D                      009B            .word	$9B
34926                                           ! 6567                           0x01 | 0x02 | 0x04,
34927 8B3F                        07            .byte	7
34928                                           ! 6568                           0,
34929 8B40                        00            .byte	0
34930                                           ! 6569                           64,
34931 8B41                      0040            .word	$40
34932                                           ! 6570                    64,
34933 8B43                      0040            .word	$40
34934                                           ! 6571                        0xA000,
34935 8B45                      A000            .word	$A000
34936                                           ! 6572                        0x0000,
34937 8B47                      0000            .word	0
34938                                           ! 6573                       0,
34939 8B49                      0000            .word	0
34940 8B4B                      0000            .word	0
34941                                           ! 6574                             3840,
34942 8B4D                      0F00            .word	$F00
34943                                           ! 6575                        1280,
34944 8B4F                      0500            .word	$500
34945                                           ! 6576                        960,
34946 8B51                      03C0            .word	$3C0
34947                                           ! 6577                      8,
34948 8B53                        08            .byte	8
34949                                           ! 6578                      16,
34950 8B54                        10            .byte	$10
34951                                           ! 6579                           1,
34952 8B55                        01            .byte	1
34953                                           ! 6580                         24,
34954 8B56                        18            .byte	$18
34955                                           ! 6581                          57,
34956 8B57                        39            .byte	$39
34957                                           ! 6582                        0x06,
34958 8B58                        06            .byte	6
34959                                           ! 6583                     0,
34960 8B59                        00            .byte	0
34961                                           ! 6584                               3,
34962 8B5A                        03            .byte	3
34963                                           ! 6585                          0,
34964 8B5B                        00            .byte	0
34965                                           ! 6586                        8,
34966 8B5C                        08            .byte	8
34967                                           ! 6587                             16,
34968 8B5D                        10            .byte	$10
34969                                           ! 6588                          8,
34970 8B5E                        08            .byte	8
34971                                           ! 6589                               8,
34972 8B5F                        08            .byte	8
34973                                           ! 6590                         8,
34974 8B60                        08            .byte	8
34975                                           ! 6591                              0,
34976 8B61                        00            .byte	0
34977                                           ! 6592                         0,
34978 8B62                        00            .byte	0
34979                                           ! 6593                              0,
34980 8B63                        00            .byte	0
34981                                           ! 6594                                0,
34982 8B64                        00            .byte	0
34983                                           ! 6595                        0xE0000000,
34984 8B65                      0000            .word	0
34985 8B67                      E000            .word	$E000
34986                                           ! 6596                               0,
34987 8B69                      0000            .word	0
34988 8B6B                      0000            .word	0
34989                                           ! 6597                             0,
34990 8B6D                      0000            .word	0
34991                                           ! 6598                                3840,
34992 8B6F                      0F00            .word	$F00
34993                                           ! 6599                             0,
34994 8B71                        00            .byte	0
34995                                           ! 6600                             0,
34996 8B72                        00            .byte	0
34997                                           ! 6601                           8,
34998 8B73                        08            .byte	8
34999                                           ! 6602                                16,
35000 8B74                        10            .byte	$10
35001                                           ! 6603                             8,
35002 8B75                        08            .byte	8
35003                                           ! 6604                                  8,
35004 8B76                        08            .byte	8
35005                                           ! 6605                            8,
35006 8B77                        08            .byte	8
35007                                           ! 6606                                 0,
35008 8B78                        00            .byte	0
35009                                           ! 6607                            0,
35010 8B79                        00            .byte	0
35011                                           ! 6608                                 0,
35012 8B7A                        00            .byte	0
35013                                           ! 6609                          0,
35014 8B7B                      0000            .word	0
35015 8B7D                      0000            .word	0
35016                                           ! 6610 } },
35017                                           ! 6611 { 0x017d,
35018 8B7F                      017D            .word	$17D
35019                                           ! 6612 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35020 8B81                      009B            .word	$9B
35021                                           ! 6613                           0x01 | 0x02 | 0x04,
35022 8B83                        07            .byte	7
35023                                           ! 6614                           0,
35024 8B84                        00            .byte	0
35025                                           ! 6615                           64,
35026 8B85                      0040            .word	$40
35027                                           ! 6616                    64,
35028 8B87                      0040            .word	$40
35029                                           ! 6617                        0xA000,
35030 8B89                      A000            .word	$A000
35031                                           ! 6618                        0x0000,
35032 8B8B                      0000            .word	0
35033                                           ! 6619                       0,
35034 8B8D                      0000            .word	0
35035 8B8F                      0000            .word	0
35036                                           ! 6620                             5120,
35037 8B91                      1400            .word	$1400
35038                                           ! 6621                        1280,
35039 8B93                      0500            .word	$500
35040                                           ! 6622                        960,
35041 8B95                      03C0            .word	$3C0
35042                                           ! 6623                      8,
35043 8B97                        08            .byte	8
35044                                           ! 6624                      16,
35045 8B98                        10            .byte	$10
35046                                           ! 6625                           1,
35047 8B99                        01            .byte	1
35048                                           ! 6626                         32,
35049 8B9A                        20            .byte	$20
35050                                           ! 6627                          75,
35051 8B9B                        4B            .byte	$4B
35052                                           ! 6628                        0x06,
35053 8B9C                        06            .byte	6
35054                                           ! 6629                     0,
35055 8B9D                        00            .byte	0
35056                                           ! 6630                               2,
35057 8B9E                        02            .byte	2
35058                                           ! 6631                          0,
35059 8B9F                        00            .byte	0
35060                                           ! 6632                        8,
35061 8BA0                        08            .byte	8
35062                                           ! 6633                             16,
35063 8BA1                        10            .byte	$10
35064                                           ! 6634                          
35065                                           ! 6634 8,
35066 8BA2                        08            .byte	8
35067                                           ! 6635                               8,
35068 8BA3                        08            .byte	8
35069                                           ! 6636                         8,
35070 8BA4                        08            .byte	8
35071                                           ! 6637                              0,
35072 8BA5                        00            .byte	0
35073                                           ! 6638                         8,
35074 8BA6                        08            .byte	8
35075                                           ! 6639                              24,
35076 8BA7                        18            .byte	$18
35077                                           ! 6640                                0x02,
35078 8BA8                        02            .byte	2
35079                                           ! 6641                        0xE0000000,
35080 8BA9                      0000            .word	0
35081 8BAB                      E000            .word	$E000
35082                                           ! 6642                               0,
35083 8BAD                      0000            .word	0
35084 8BAF                      0000            .word	0
35085                                           ! 6643                             0,
35086 8BB1                      0000            .word	0
35087                                           ! 6644                                5120,
35088 8BB3                      1400            .word	$1400
35089                                           ! 6645                             0,
35090 8BB5                        00            .byte	0
35091                                           ! 6646                             0,
35092 8BB6                        00            .byte	0
35093                                           ! 6647                           8,
35094 8BB7                        08            .byte	8
35095                                           ! 6648                                16,
35096 8BB8                        10            .byte	$10
35097                                           ! 6649                             8,
35098 8BB9                        08            .byte	8
35099                                           ! 6650                                  8,
35100 8BBA                        08            .byte	8
35101                                           ! 6651                            8,
35102 8BBB                        08            .byte	8
35103                                           ! 6652                                 0,
35104 8BBC                        00            .byte	0
35105                                           ! 6653                            8,
35106 8BBD                        08            .byte	8
35107                                           ! 6654                                 24,
35108 8BBE                        18            .byte	$18
35109                                           ! 6655                          0,
35110 8BBF                      0000            .word	0
35111 8BC1                      0000            .word	0
35112                                           ! 6656 } },
35113                                           ! 6657 { 0x017e,
35114 8BC3                      017E            .word	$17E
35115                                           ! 6658 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35116 8BC5                      009B            .word	$9B
35117                                           ! 6659                           0x01 | 0x02 | 0x04,
35118 8BC7                        07            .byte	7
35119                                           ! 6660                           0,
35120 8BC8                        00            .byte	0
35121                                           ! 6661                           64,
35122 8BC9                      0040            .word	$40
35123                                           ! 6662                    64,
35124 8BCB                      0040            .word	$40
35125                                           ! 6663                        0xA000,
35126 8BCD                      A000            .word	$A000
35127                                           ! 6664                        0x0000,
35128 8BCF                      0000            .word	0
35129                                           ! 6665                       0,
35130 8BD1                      0000            .word	0
35131 8BD3                      0000            .word	0
35132                                           ! 6666                             2880,
35133 8BD5                      0B40            .word	$B40
35134                                           ! 6667                        1440,
35135 8BD7                      05A0            .word	$5A0
35136                                           ! 6668                        900,
35137 8BD9                      0384            .word	$384
35138                                           ! 6669                      8,
35139 8BDB                        08            .byte	8
35140                                           ! 6670                      16,
35141 8BDC                        10            .byte	$10
35142                                           ! 6671                           1,
35143 8BDD                        01            .byte	1
35144                                           ! 6672                         16,
35145 8BDE                        10            .byte	$10
35146                                           ! 6673                          40,
35147 8BDF                        28            .byte	$28
35148                                           ! 6674                        0x06,
35149 8BE0                        06            .byte	6
35150                                           ! 6675                     0,
35151 8BE1                        00            .byte	0
35152                                           ! 6676                               5,
35153 8BE2                        05            .byte	5
35154                                           ! 6677                          0,
35155 8BE3                        00            .byte	0
35156                                           ! 6678                        5,
35157 8BE4                        05            .byte	5
35158                                           ! 6679                             11,
35159 8BE5                        0B            .byte	$B
35160                                           ! 6680                          6,
35161 8BE6                        06            .byte	6
35162                                           ! 6681                               5,
35163 8BE7                        05            .byte	5
35164                                           ! 6682                         5,
35165 8BE8                        05            .byte	5
35166                                           ! 6683                              0,
35167 8BE9                        00            .byte	0
35168                                           ! 6684                         0,
35169 8BEA                        00            .byte	0
35170                                           ! 6685                              0,
35171 8BEB                        00            .byte	0
35172                                           ! 6686                                0,
35173 8BEC                        00            .byte	0
35174                                           ! 6687                        0xE0000000,
35175 8BED                      0000            .word	0
35176 8BEF                      E000            .word	$E000
35177                                           ! 6688                               0,
35178 8BF1                      0000            .word	0
35179 8BF3                      0000            .word	0
35180                                           ! 6689                             0,
35181 8BF5                      0000            .word	0
35182                                           ! 6690                                2880,
35183 8BF7                      0B40            .word	$B40
35184                                           ! 6691                             0,
35185 8BF9                        00            .byte	0
35186                                           ! 6692                             0,
35187 8BFA                        00            .byte	0
35188                                           ! 6693                           5,
35189 8BFB                        05            .byte	5
35190                                           ! 6694                                11,
35191 8BFC                        0B            .byte	$B
35192                                           ! 6695                             6,
35193 8BFD                        06            .byte	6
35194                                           ! 6696                                  5,
35195 8BFE                        05            .byte	5
35196                                           ! 6697                            5,
35197 8BFF                        05            .byte	5
35198                                           ! 6698                                 0,
35199 8C00                        00            .byte	0
35200                                           ! 6699                            0,
35201 8C01                        00            .byte	0
35202                                           ! 6700                                 0,
35203 8C02                        00            .byte	0
35204                                           ! 6701                        
35205                                           ! 6701   0,
35206 8C03                      0000            .word	0
35207 8C05                      0000            .word	0
35208                                           ! 6702 } },
35209                                           ! 6703 { 0x017f,
35210 8C07                      017F            .word	$17F
35211                                           ! 6704 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35212 8C09                      009B            .word	$9B
35213                                           ! 6705                           0x01 | 0x02 | 0x04,
35214 8C0B                        07            .byte	7
35215                                           ! 6706                           0,
35216 8C0C                        00            .byte	0
35217                                           ! 6707                           64,
35218 8C0D                      0040            .word	$40
35219                                           ! 6708                    64,
35220 8C0F                      0040            .word	$40
35221                                           ! 6709                        0xA000,
35222 8C11                      A000            .word	$A000
35223                                           ! 6710                        0x0000,
35224 8C13                      0000            .word	0
35225                                           ! 6711                       0,
35226 8C15                      0000            .word	0
35227 8C17                      0000            .word	0
35228                                           ! 6712                             4320,
35229 8C19                      10E0            .word	$10E0
35230                                           ! 6713                        1440,
35231 8C1B                      05A0            .word	$5A0
35232                                           ! 6714                        900,
35233 8C1D                      0384            .word	$384
35234                                           ! 6715                      8,
35235 8C1F                        08            .byte	8
35236                                           ! 6716                      16,
35237 8C20                        10            .byte	$10
35238                                           ! 6717                           1,
35239 8C21                        01            .byte	1
35240                                           ! 6718                         24,
35241 8C22                        18            .byte	$18
35242                                           ! 6719                          60,
35243 8C23                        3C            .byte	$3C
35244                                           ! 6720                        0x06,
35245 8C24                        06            .byte	6
35246                                           ! 6721                     0,
35247 8C25                        00            .byte	0
35248                                           ! 6722                               3,
35249 8C26                        03            .byte	3
35250                                           ! 6723                          0,
35251 8C27                        00            .byte	0
35252                                           ! 6724                        8,
35253 8C28                        08            .byte	8
35254                                           ! 6725                             16,
35255 8C29                        10            .byte	$10
35256                                           ! 6726                          8,
35257 8C2A                        08            .byte	8
35258                                           ! 6727                               8,
35259 8C2B                        08            .byte	8
35260                                           ! 6728                         8,
35261 8C2C                        08            .byte	8
35262                                           ! 6729                              0,
35263 8C2D                        00            .byte	0
35264                                           ! 6730                         0,
35265 8C2E                        00            .byte	0
35266                                           ! 6731                              0,
35267 8C2F                        00            .byte	0
35268                                           ! 6732                                0,
35269 8C30                        00            .byte	0
35270                                           ! 6733                        0xE0000000,
35271 8C31                      0000            .word	0
35272 8C33                      E000            .word	$E000
35273                                           ! 6734                               0,
35274 8C35                      0000            .word	0
35275 8C37                      0000            .word	0
35276                                           ! 6735                             0,
35277 8C39                      0000            .word	0
35278                                           ! 6736                                4320,
35279 8C3B                      10E0            .word	$10E0
35280                                           ! 6737                             0,
35281 8C3D                        00            .byte	0
35282                                           ! 6738                             0,
35283 8C3E                        00            .byte	0
35284                                           ! 6739                           8,
35285 8C3F                        08            .byte	8
35286                                           ! 6740                                16,
35287 8C40                        10            .byte	$10
35288                                           ! 6741                             8,
35289 8C41                        08            .byte	8
35290                                           ! 6742                                  8,
35291 8C42                        08            .byte	8
35292                                           ! 6743                            8,
35293 8C43                        08            .byte	8
35294                                           ! 6744                                 0,
35295 8C44                        00            .byte	0
35296                                           ! 6745                            0,
35297 8C45                        00            .byte	0
35298                                           ! 6746                                 0,
35299 8C46                        00            .byte	0
35300                                           ! 6747                          0,
35301 8C47                      0000            .word	0
35302 8C49                      0000            .word	0
35303                                           ! 6748 } },
35304                                           ! 6749 { 0x0180,
35305 8C4B                      0180            .word	$180
35306                                           ! 6750 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35307 8C4D                      009B            .word	$9B
35308                                           ! 6751                           0x01 | 0x02 | 0x04,
35309 8C4F                        07            .byte	7
35310                                           ! 6752                           0,
35311 8C50                        00            .byte	0
35312                                           ! 6753                           64,
35313 8C51                      0040            .word	$40
35314                                           ! 6754                    64,
35315 8C53                      0040            .word	$40
35316                                           ! 6755                        0xA000,
35317 8C55                      A000            .word	$A000
35318                                           ! 6756                        0x0000,
35319 8C57                      0000            .word	0
35320                                           ! 6757                       0,
35321 8C59                      0000            .word	0
35322 8C5B                      0000            .word	0
35323                                           ! 6758                             5760,
35324 8C5D                      1680            .word	$1680
35325                                           ! 6759                        1440,
35326 8C5F                      05A0            .word	$5A0
35327                                           ! 6760                        900,
35328 8C61                      0384            .word	$384
35329                                           ! 6761                      8,
35330 8C63                        08            .byte	8
35331                                           ! 6762                      16,
35332 8C64                        10            .byte	$10
35333                                           ! 6763                           1,
35334 8C65                        01            .byte	1
35335                                           ! 6764                         32,
35336 8C66                        20            .byte	$20
35337                                           ! 6765                          80,
35338 8C67                        50            .byte	$50
35339                                           ! 6766                        0x06,
35340 8C68                        06            .byte	6
35341                                           ! 6767                     0,
35342 8C69                        00            .byte	0
35343                                           ! 6768                               2,
35344 8C6A                        02            .byte	2
35345                                           ! 6769                          0,
35346 8C6B                        00            .byte	0
35347                                           ! 6770                        8,
35348 8C6C                        08            .byte	8
35349                                           ! 6771                             1
35350                                           ! 6771 6,
35351 8C6D                        10            .byte	$10
35352                                           ! 6772                          8,
35353 8C6E                        08            .byte	8
35354                                           ! 6773                               8,
35355 8C6F                        08            .byte	8
35356                                           ! 6774                         8,
35357 8C70                        08            .byte	8
35358                                           ! 6775                              0,
35359 8C71                        00            .byte	0
35360                                           ! 6776                         8,
35361 8C72                        08            .byte	8
35362                                           ! 6777                              24,
35363 8C73                        18            .byte	$18
35364                                           ! 6778                                0x02,
35365 8C74                        02            .byte	2
35366                                           ! 6779                        0xE0000000,
35367 8C75                      0000            .word	0
35368 8C77                      E000            .word	$E000
35369                                           ! 6780                               0,
35370 8C79                      0000            .word	0
35371 8C7B                      0000            .word	0
35372                                           ! 6781                             0,
35373 8C7D                      0000            .word	0
35374                                           ! 6782                                5760,
35375 8C7F                      1680            .word	$1680
35376                                           ! 6783                             0,
35377 8C81                        00            .byte	0
35378                                           ! 6784                             0,
35379 8C82                        00            .byte	0
35380                                           ! 6785                           8,
35381 8C83                        08            .byte	8
35382                                           ! 6786                                16,
35383 8C84                        10            .byte	$10
35384                                           ! 6787                             8,
35385 8C85                        08            .byte	8
35386                                           ! 6788                                  8,
35387 8C86                        08            .byte	8
35388                                           ! 6789                            8,
35389 8C87                        08            .byte	8
35390                                           ! 6790                                 0,
35391 8C88                        00            .byte	0
35392                                           ! 6791                            8,
35393 8C89                        08            .byte	8
35394                                           ! 6792                                 24,
35395 8C8A                        18            .byte	$18
35396                                           ! 6793                          0,
35397 8C8B                      0000            .word	0
35398 8C8D                      0000            .word	0
35399                                           ! 6794 } },
35400                                           ! 6795 { 0x0181,
35401 8C8F                      0181            .word	$181
35402                                           ! 6796 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35403 8C91                      009B            .word	$9B
35404                                           ! 6797                           0x01 | 0x02 | 0x04,
35405 8C93                        07            .byte	7
35406                                           ! 6798                           0,
35407 8C94                        00            .byte	0
35408                                           ! 6799                           64,
35409 8C95                      0040            .word	$40
35410                                           ! 6800                    64,
35411 8C97                      0040            .word	$40
35412                                           ! 6801                        0xA000,
35413 8C99                      A000            .word	$A000
35414                                           ! 6802                        0x0000,
35415 8C9B                      0000            .word	0
35416                                           ! 6803                       0,
35417 8C9D                      0000            .word	0
35418 8C9F                      0000            .word	0
35419                                           ! 6804                             2800,
35420 8CA1                      0AF0            .word	$AF0
35421                                           ! 6805                        1400,
35422 8CA3                      0578            .word	$578
35423                                           ! 6806                        1050,
35424 8CA5                      041A            .word	$41A
35425                                           ! 6807                      8,
35426 8CA7                        08            .byte	8
35427                                           ! 6808                      16,
35428 8CA8                        10            .byte	$10
35429                                           ! 6809                           1,
35430 8CA9                        01            .byte	1
35431                                           ! 6810                         16,
35432 8CAA                        10            .byte	$10
35433                                           ! 6811                          45,
35434 8CAB                        2D            .byte	$2D
35435                                           ! 6812                        0x06,
35436 8CAC                        06            .byte	6
35437                                           ! 6813                     0,
35438 8CAD                        00            .byte	0
35439                                           ! 6814                               4,
35440 8CAE                        04            .byte	4
35441                                           ! 6815                          0,
35442 8CAF                        00            .byte	0
35443                                           ! 6816                        5,
35444 8CB0                        05            .byte	5
35445                                           ! 6817                             11,
35446 8CB1                        0B            .byte	$B
35447                                           ! 6818                          6,
35448 8CB2                        06            .byte	6
35449                                           ! 6819                               5,
35450 8CB3                        05            .byte	5
35451                                           ! 6820                         5,
35452 8CB4                        05            .byte	5
35453                                           ! 6821                              0,
35454 8CB5                        00            .byte	0
35455                                           ! 6822                         0,
35456 8CB6                        00            .byte	0
35457                                           ! 6823                              0,
35458 8CB7                        00            .byte	0
35459                                           ! 6824                                0,
35460 8CB8                        00            .byte	0
35461                                           ! 6825                        0xE0000000,
35462 8CB9                      0000            .word	0
35463 8CBB                      E000            .word	$E000
35464                                           ! 6826                               0,
35465 8CBD                      0000            .word	0
35466 8CBF                      0000            .word	0
35467                                           ! 6827                             0,
35468 8CC1                      0000            .word	0
35469                                           ! 6828                                2800,
35470 8CC3                      0AF0            .word	$AF0
35471                                           ! 6829                             0,
35472 8CC5                        00            .byte	0
35473                                           ! 6830                             0,
35474 8CC6                        00            .byte	0
35475                                           ! 6831                           5,
35476 8CC7                        05            .byte	5
35477                                           ! 6832                                11,
35478 8CC8                        0B            .byte	$B
35479                                           ! 6833                             6,
35480 8CC9                        06            .byte	6
35481                                           ! 6834                                  5,
35482 8CCA                        05            .byte	5
35483                                           ! 6835                            5,
35484 8CCB                        05            .byte	5
35485                                           ! 6836                                 0,
35486 8CCC                        00            .byte	0
35487                                           ! 6837                            0,
35488 8CCD                        00            .byte	0
35489                                           ! 6838                              
35490                                           ! 6838    0,
35491 8CCE                        00            .byte	0
35492                                           ! 6839                          0,
35493 8CCF                      0000            .word	0
35494 8CD1                      0000            .word	0
35495                                           ! 6840 } },
35496                                           ! 6841 { 0x0182,
35497 8CD3                      0182            .word	$182
35498                                           ! 6842 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35499 8CD5                      009B            .word	$9B
35500                                           ! 6843                           0x01 | 0x02 | 0x04,
35501 8CD7                        07            .byte	7
35502                                           ! 6844                           0,
35503 8CD8                        00            .byte	0
35504                                           ! 6845                           64,
35505 8CD9                      0040            .word	$40
35506                                           ! 6846                    64,
35507 8CDB                      0040            .word	$40
35508                                           ! 6847                        0xA000,
35509 8CDD                      A000            .word	$A000
35510                                           ! 6848                        0x0000,
35511 8CDF                      0000            .word	0
35512                                           ! 6849                       0,
35513 8CE1                      0000            .word	0
35514 8CE3                      0000            .word	0
35515                                           ! 6850                             4200,
35516 8CE5                      1068            .word	$1068
35517                                           ! 6851                        1400,
35518 8CE7                      0578            .word	$578
35519                                           ! 6852                        1050,
35520 8CE9                      041A            .word	$41A
35521                                           ! 6853                      8,
35522 8CEB                        08            .byte	8
35523                                           ! 6854                      16,
35524 8CEC                        10            .byte	$10
35525                                           ! 6855                           1,
35526 8CED                        01            .byte	1
35527                                           ! 6856                         24,
35528 8CEE                        18            .byte	$18
35529                                           ! 6857                          68,
35530 8CEF                        44            .byte	$44
35531                                           ! 6858                        0x06,
35532 8CF0                        06            .byte	6
35533                                           ! 6859                     0,
35534 8CF1                        00            .byte	0
35535                                           ! 6860                               2,
35536 8CF2                        02            .byte	2
35537                                           ! 6861                          0,
35538 8CF3                        00            .byte	0
35539                                           ! 6862                        8,
35540 8CF4                        08            .byte	8
35541                                           ! 6863                             16,
35542 8CF5                        10            .byte	$10
35543                                           ! 6864                          8,
35544 8CF6                        08            .byte	8
35545                                           ! 6865                               8,
35546 8CF7                        08            .byte	8
35547                                           ! 6866                         8,
35548 8CF8                        08            .byte	8
35549                                           ! 6867                              0,
35550 8CF9                        00            .byte	0
35551                                           ! 6868                         0,
35552 8CFA                        00            .byte	0
35553                                           ! 6869                              0,
35554 8CFB                        00            .byte	0
35555                                           ! 6870                                0,
35556 8CFC                        00            .byte	0
35557                                           ! 6871                        0xE0000000,
35558 8CFD                      0000            .word	0
35559 8CFF                      E000            .word	$E000
35560                                           ! 6872                               0,
35561 8D01                      0000            .word	0
35562 8D03                      0000            .word	0
35563                                           ! 6873                             0,
35564 8D05                      0000            .word	0
35565                                           ! 6874                                4200,
35566 8D07                      1068            .word	$1068
35567                                           ! 6875                             0,
35568 8D09                        00            .byte	0
35569                                           ! 6876                             0,
35570 8D0A                        00            .byte	0
35571                                           ! 6877                           8,
35572 8D0B                        08            .byte	8
35573                                           ! 6878                                16,
35574 8D0C                        10            .byte	$10
35575                                           ! 6879                             8,
35576 8D0D                        08            .byte	8
35577                                           ! 6880                                  8,
35578 8D0E                        08            .byte	8
35579                                           ! 6881                            8,
35580 8D0F                        08            .byte	8
35581                                           ! 6882                                 0,
35582 8D10                        00            .byte	0
35583                                           ! 6883                            0,
35584 8D11                        00            .byte	0
35585                                           ! 6884                                 0,
35586 8D12                        00            .byte	0
35587                                           ! 6885                          0,
35588 8D13                      0000            .word	0
35589 8D15                      0000            .word	0
35590                                           ! 6886 } },
35591                                           ! 6887 { 0x0183,
35592 8D17                      0183            .word	$183
35593                                           ! 6888 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35594 8D19                      009B            .word	$9B
35595                                           ! 6889                           0x01 | 0x02 | 0x04,
35596 8D1B                        07            .byte	7
35597                                           ! 6890                           0,
35598 8D1C                        00            .byte	0
35599                                           ! 6891                           64,
35600 8D1D                      0040            .word	$40
35601                                           ! 6892                    64,
35602 8D1F                      0040            .word	$40
35603                                           ! 6893                        0xA000,
35604 8D21                      A000            .word	$A000
35605                                           ! 6894                        0x0000,
35606 8D23                      0000            .word	0
35607                                           ! 6895                       0,
35608 8D25                      0000            .word	0
35609 8D27                      0000            .word	0
35610                                           ! 6896                             5600,
35611 8D29                      15E0            .word	$15E0
35612                                           ! 6897                        1400,
35613 8D2B                      0578            .word	$578
35614                                           ! 6898                        1050,
35615 8D2D                      041A            .word	$41A
35616                                           ! 6899                      8,
35617 8D2F                        08            .byte	8
35618                                           ! 6900                      16,
35619 8D30                        10            .byte	$10
35620                                           ! 6901                           1,
35621 8D31                        01            .byte	1
35622                                           ! 6902                         32,
35623 8D32                        20            .byte	$20
35624                                           ! 6903                          90,
35625 8D33                        5A            .byte	$5A
35626                                           ! 6904                        0x06,
35627 8D34                        06            .byte	6
35628                                           ! 6905                     0,
35629 8D35                        00            .byte	0
35630                                           ! 6906                               1,
35631 8D36                        01            .byte	1
35632                                           ! 6907                          0,
35633 8D37                        00            .byte	0
35634                                           ! 6908                        8
35635                                           ! 6908 ,
35636 8D38                        08            .byte	8
35637                                           ! 6909                             16,
35638 8D39                        10            .byte	$10
35639                                           ! 6910                          8,
35640 8D3A                        08            .byte	8
35641                                           ! 6911                               8,
35642 8D3B                        08            .byte	8
35643                                           ! 6912                         8,
35644 8D3C                        08            .byte	8
35645                                           ! 6913                              0,
35646 8D3D                        00            .byte	0
35647                                           ! 6914                         8,
35648 8D3E                        08            .byte	8
35649                                           ! 6915                              24,
35650 8D3F                        18            .byte	$18
35651                                           ! 6916                                0x02,
35652 8D40                        02            .byte	2
35653                                           ! 6917                        0xE0000000,
35654 8D41                      0000            .word	0
35655 8D43                      E000            .word	$E000
35656                                           ! 6918                               0,
35657 8D45                      0000            .word	0
35658 8D47                      0000            .word	0
35659                                           ! 6919                             0,
35660 8D49                      0000            .word	0
35661                                           ! 6920                                5600,
35662 8D4B                      15E0            .word	$15E0
35663                                           ! 6921                             0,
35664 8D4D                        00            .byte	0
35665                                           ! 6922                             0,
35666 8D4E                        00            .byte	0
35667                                           ! 6923                           8,
35668 8D4F                        08            .byte	8
35669                                           ! 6924                                16,
35670 8D50                        10            .byte	$10
35671                                           ! 6925                             8,
35672 8D51                        08            .byte	8
35673                                           ! 6926                                  8,
35674 8D52                        08            .byte	8
35675                                           ! 6927                            8,
35676 8D53                        08            .byte	8
35677                                           ! 6928                                 0,
35678 8D54                        00            .byte	0
35679                                           ! 6929                            8,
35680 8D55                        08            .byte	8
35681                                           ! 6930                                 24,
35682 8D56                        18            .byte	$18
35683                                           ! 6931                          0,
35684 8D57                      0000            .word	0
35685 8D59                      0000            .word	0
35686                                           ! 6932 } },
35687                                           ! 6933 { 0x0184,
35688 8D5B                      0184            .word	$184
35689                                           ! 6934 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35690 8D5D                      009B            .word	$9B
35691                                           ! 6935                           0x01 | 0x02 | 0x04,
35692 8D5F                        07            .byte	7
35693                                           ! 6936                           0,
35694 8D60                        00            .byte	0
35695                                           ! 6937                           64,
35696 8D61                      0040            .word	$40
35697                                           ! 6938                    64,
35698 8D63                      0040            .word	$40
35699                                           ! 6939                        0xA000,
35700 8D65                      A000            .word	$A000
35701                                           ! 6940                        0x0000,
35702 8D67                      0000            .word	0
35703                                           ! 6941                       0,
35704 8D69                      0000            .word	0
35705 8D6B                      0000            .word	0
35706                                           ! 6942                             3360,
35707 8D6D                      0D20            .word	$D20
35708                                           ! 6943                        1680,
35709 8D6F                      0690            .word	$690
35710                                           ! 6944                        1050,
35711 8D71                      041A            .word	$41A
35712                                           ! 6945                      8,
35713 8D73                        08            .byte	8
35714                                           ! 6946                      16,
35715 8D74                        10            .byte	$10
35716                                           ! 6947                           1,
35717 8D75                        01            .byte	1
35718                                           ! 6948                         16,
35719 8D76                        10            .byte	$10
35720                                           ! 6949                          54,
35721 8D77                        36            .byte	$36
35722                                           ! 6950                        0x06,
35723 8D78                        06            .byte	6
35724                                           ! 6951                     0,
35725 8D79                        00            .byte	0
35726                                           ! 6952                               3,
35727 8D7A                        03            .byte	3
35728                                           ! 6953                          0,
35729 8D7B                        00            .byte	0
35730                                           ! 6954                        5,
35731 8D7C                        05            .byte	5
35732                                           ! 6955                             11,
35733 8D7D                        0B            .byte	$B
35734                                           ! 6956                          6,
35735 8D7E                        06            .byte	6
35736                                           ! 6957                               5,
35737 8D7F                        05            .byte	5
35738                                           ! 6958                         5,
35739 8D80                        05            .byte	5
35740                                           ! 6959                              0,
35741 8D81                        00            .byte	0
35742                                           ! 6960                         0,
35743 8D82                        00            .byte	0
35744                                           ! 6961                              0,
35745 8D83                        00            .byte	0
35746                                           ! 6962                                0,
35747 8D84                        00            .byte	0
35748                                           ! 6963                        0xE0000000,
35749 8D85                      0000            .word	0
35750 8D87                      E000            .word	$E000
35751                                           ! 6964                               0,
35752 8D89                      0000            .word	0
35753 8D8B                      0000            .word	0
35754                                           ! 6965                             0,
35755 8D8D                      0000            .word	0
35756                                           ! 6966                                3360,
35757 8D8F                      0D20            .word	$D20
35758                                           ! 6967                             0,
35759 8D91                        00            .byte	0
35760                                           ! 6968                             0,
35761 8D92                        00            .byte	0
35762                                           ! 6969                           5,
35763 8D93                        05            .byte	5
35764                                           ! 6970                                11,
35765 8D94                        0B            .byte	$B
35766                                           ! 6971                             6,
35767 8D95                        06            .byte	6
35768                                           ! 6972                                  5,
35769 8D96                        05            .byte	5
35770                                           ! 6973                            5,
35771 8D97                        05            .byte	5
35772                                           ! 6974                                 0,
35773 8D98                        00            .byte	0
35774                                           ! 6975                            0
35775                                           ! 6975 ,
35776 8D99                        00            .byte	0
35777                                           ! 6976                                 0,
35778 8D9A                        00            .byte	0
35779                                           ! 6977                          0,
35780 8D9B                      0000            .word	0
35781 8D9D                      0000            .word	0
35782                                           ! 6978 } },
35783                                           ! 6979 { 0x0185,
35784 8D9F                      0185            .word	$185
35785                                           ! 6980 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35786 8DA1                      009B            .word	$9B
35787                                           ! 6981                           0x01 | 0x02 | 0x04,
35788 8DA3                        07            .byte	7
35789                                           ! 6982                           0,
35790 8DA4                        00            .byte	0
35791                                           ! 6983                           64,
35792 8DA5                      0040            .word	$40
35793                                           ! 6984                    64,
35794 8DA7                      0040            .word	$40
35795                                           ! 6985                        0xA000,
35796 8DA9                      A000            .word	$A000
35797                                           ! 6986                        0x0000,
35798 8DAB                      0000            .word	0
35799                                           ! 6987                       0,
35800 8DAD                      0000            .word	0
35801 8DAF                      0000            .word	0
35802                                           ! 6988                             5040,
35803 8DB1                      13B0            .word	$13B0
35804                                           ! 6989                        1680,
35805 8DB3                      0690            .word	$690
35806                                           ! 6990                        1050,
35807 8DB5                      041A            .word	$41A
35808                                           ! 6991                      8,
35809 8DB7                        08            .byte	8
35810                                           ! 6992                      16,
35811 8DB8                        10            .byte	$10
35812                                           ! 6993                           1,
35813 8DB9                        01            .byte	1
35814                                           ! 6994                         24,
35815 8DBA                        18            .byte	$18
35816                                           ! 6995                          81,
35817 8DBB                        51            .byte	$51
35818                                           ! 6996                        0x06,
35819 8DBC                        06            .byte	6
35820                                           ! 6997                     0,
35821 8DBD                        00            .byte	0
35822                                           ! 6998                               2,
35823 8DBE                        02            .byte	2
35824                                           ! 6999                          0,
35825 8DBF                        00            .byte	0
35826                                           ! 7000                        8,
35827 8DC0                        08            .byte	8
35828                                           ! 7001                             16,
35829 8DC1                        10            .byte	$10
35830                                           ! 7002                          8,
35831 8DC2                        08            .byte	8
35832                                           ! 7003                               8,
35833 8DC3                        08            .byte	8
35834                                           ! 7004                         8,
35835 8DC4                        08            .byte	8
35836                                           ! 7005                              0,
35837 8DC5                        00            .byte	0
35838                                           ! 7006                         0,
35839 8DC6                        00            .byte	0
35840                                           ! 7007                              0,
35841 8DC7                        00            .byte	0
35842                                           ! 7008                                0,
35843 8DC8                        00            .byte	0
35844                                           ! 7009                        0xE0000000,
35845 8DC9                      0000            .word	0
35846 8DCB                      E000            .word	$E000
35847                                           ! 7010                               0,
35848 8DCD                      0000            .word	0
35849 8DCF                      0000            .word	0
35850                                           ! 7011                             0,
35851 8DD1                      0000            .word	0
35852                                           ! 7012                                5040,
35853 8DD3                      13B0            .word	$13B0
35854                                           ! 7013                             0,
35855 8DD5                        00            .byte	0
35856                                           ! 7014                             0,
35857 8DD6                        00            .byte	0
35858                                           ! 7015                           8,
35859 8DD7                        08            .byte	8
35860                                           ! 7016                                16,
35861 8DD8                        10            .byte	$10
35862                                           ! 7017                             8,
35863 8DD9                        08            .byte	8
35864                                           ! 7018                                  8,
35865 8DDA                        08            .byte	8
35866                                           ! 7019                            8,
35867 8DDB                        08            .byte	8
35868                                           ! 7020                                 0,
35869 8DDC                        00            .byte	0
35870                                           ! 7021                            0,
35871 8DDD                        00            .byte	0
35872                                           ! 7022                                 0,
35873 8DDE                        00            .byte	0
35874                                           ! 7023                          0,
35875 8DDF                      0000            .word	0
35876 8DE1                      0000            .word	0
35877                                           ! 7024 } },
35878                                           ! 7025 { 0x0186,
35879 8DE3                      0186            .word	$186
35880                                           ! 7026 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35881 8DE5                      009B            .word	$9B
35882                                           ! 7027                           0x01 | 0x02 | 0x04,
35883 8DE7                        07            .byte	7
35884                                           ! 7028                           0,
35885 8DE8                        00            .byte	0
35886                                           ! 7029                           64,
35887 8DE9                      0040            .word	$40
35888                                           ! 7030                    64,
35889 8DEB                      0040            .word	$40
35890                                           ! 7031                        0xA000,
35891 8DED                      A000            .word	$A000
35892                                           ! 7032                        0x0000,
35893 8DEF                      0000            .word	0
35894                                           ! 7033                       0,
35895 8DF1                      0000            .word	0
35896 8DF3                      0000            .word	0
35897                                           ! 7034                             6720,
35898 8DF5                      1A40            .word	$1A40
35899                                           ! 7035                        1680,
35900 8DF7                      0690            .word	$690
35901                                           ! 7036                        1050,
35902 8DF9                      041A            .word	$41A
35903                                           ! 7037                      8,
35904 8DFB                        08            .byte	8
35905                                           ! 7038                      16,
35906 8DFC                        10            .byte	$10
35907                                           ! 7039                           1,
35908 8DFD                        01            .byte	1
35909                                           ! 7040                         32,
35910 8DFE                        20            .byte	$20
35911                                           ! 7041                          108,
35912 8DFF                        6C            .byte	$6C
35913                                           ! 7042                        0x06,
35914 8E00                        06            .byte	6
35915                                           ! 7043                     0,
35916 8E01                        00            .byte	0
35917                                           ! 7044                               1,
35918 8E02                        01            .byte	1
35919                                           ! 7045                     
35920                                           ! 7045      0,
35921 8E03                        00            .byte	0
35922                                           ! 7046                        8,
35923 8E04                        08            .byte	8
35924                                           ! 7047                             16,
35925 8E05                        10            .byte	$10
35926                                           ! 7048                          8,
35927 8E06                        08            .byte	8
35928                                           ! 7049                               8,
35929 8E07                        08            .byte	8
35930                                           ! 7050                         8,
35931 8E08                        08            .byte	8
35932                                           ! 7051                              0,
35933 8E09                        00            .byte	0
35934                                           ! 7052                         8,
35935 8E0A                        08            .byte	8
35936                                           ! 7053                              24,
35937 8E0B                        18            .byte	$18
35938                                           ! 7054                                0x02,
35939 8E0C                        02            .byte	2
35940                                           ! 7055                        0xE0000000,
35941 8E0D                      0000            .word	0
35942 8E0F                      E000            .word	$E000
35943                                           ! 7056                               0,
35944 8E11                      0000            .word	0
35945 8E13                      0000            .word	0
35946                                           ! 7057                             0,
35947 8E15                      0000            .word	0
35948                                           ! 7058                                6720,
35949 8E17                      1A40            .word	$1A40
35950                                           ! 7059                             0,
35951 8E19                        00            .byte	0
35952                                           ! 7060                             0,
35953 8E1A                        00            .byte	0
35954                                           ! 7061                           8,
35955 8E1B                        08            .byte	8
35956                                           ! 7062                                16,
35957 8E1C                        10            .byte	$10
35958                                           ! 7063                             8,
35959 8E1D                        08            .byte	8
35960                                           ! 7064                                  8,
35961 8E1E                        08            .byte	8
35962                                           ! 7065                            8,
35963 8E1F                        08            .byte	8
35964                                           ! 7066                                 0,
35965 8E20                        00            .byte	0
35966                                           ! 7067                            8,
35967 8E21                        08            .byte	8
35968                                           ! 7068                                 24,
35969 8E22                        18            .byte	$18
35970                                           ! 7069                          0,
35971 8E23                      0000            .word	0
35972 8E25                      0000            .word	0
35973                                           ! 7070 } },
35974                                           ! 7071 { 0x0187,
35975 8E27                      0187            .word	$187
35976                                           ! 7072 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35977 8E29                      009B            .word	$9B
35978                                           ! 7073                           0x01 | 0x02 | 0x04,
35979 8E2B                        07            .byte	7
35980                                           ! 7074                           0,
35981 8E2C                        00            .byte	0
35982                                           ! 7075                           64,
35983 8E2D                      0040            .word	$40
35984                                           ! 7076                    64,
35985 8E2F                      0040            .word	$40
35986                                           ! 7077                        0xA000,
35987 8E31                      A000            .word	$A000
35988                                           ! 7078                        0x0000,
35989 8E33                      0000            .word	0
35990                                           ! 7079                       0,
35991 8E35                      0000            .word	0
35992 8E37                      0000            .word	0
35993                                           ! 7080                             3840,
35994 8E39                      0F00            .word	$F00
35995                                           ! 7081                        1920,
35996 8E3B                      0780            .word	$780
35997                                           ! 7082                        1200,
35998 8E3D                      04B0            .word	$4B0
35999                                           ! 7083                      8,
36000 8E3F                        08            .byte	8
36001                                           ! 7084                      16,
36002 8E40                        10            .byte	$10
36003                                           ! 7085                           1,
36004 8E41                        01            .byte	1
36005                                           ! 7086                         16,
36006 8E42                        10            .byte	$10
36007                                           ! 7087                          71,
36008 8E43                        47            .byte	$47
36009                                           ! 7088                        0x06,
36010 8E44                        06            .byte	6
36011                                           ! 7089                     0,
36012 8E45                        00            .byte	0
36013                                           ! 7090                               2,
36014 8E46                        02            .byte	2
36015                                           ! 7091                          0,
36016 8E47                        00            .byte	0
36017                                           ! 7092                        5,
36018 8E48                        05            .byte	5
36019                                           ! 7093                             11,
36020 8E49                        0B            .byte	$B
36021                                           ! 7094                          6,
36022 8E4A                        06            .byte	6
36023                                           ! 7095                               5,
36024 8E4B                        05            .byte	5
36025                                           ! 7096                         5,
36026 8E4C                        05            .byte	5
36027                                           ! 7097                              0,
36028 8E4D                        00            .byte	0
36029                                           ! 7098                         0,
36030 8E4E                        00            .byte	0
36031                                           ! 7099                              0,
36032 8E4F                        00            .byte	0
36033                                           ! 7100                                0,
36034 8E50                        00            .byte	0
36035                                           ! 7101                        0xE0000000,
36036 8E51                      0000            .word	0
36037 8E53                      E000            .word	$E000
36038                                           ! 7102                               0,
36039 8E55                      0000            .word	0
36040 8E57                      0000            .word	0
36041                                           ! 7103                             0,
36042 8E59                      0000            .word	0
36043                                           ! 7104                                3840,
36044 8E5B                      0F00            .word	$F00
36045                                           ! 7105                             0,
36046 8E5D                        00            .byte	0
36047                                           ! 7106                             0,
36048 8E5E                        00            .byte	0
36049                                           ! 7107                           5,
36050 8E5F                        05            .byte	5
36051                                           ! 7108                                11,
36052 8E60                        0B            .byte	$B
36053                                           ! 7109                             6,
36054 8E61                        06            .byte	6
36055                                           ! 7110                                  5,
36056 8E62                        05            .byte	5
36057                                           ! 7111                            5,
36058 8E63                        05            .byte	5
36059                                           ! 7112                                
36060                                           ! 7112  0,
36061 8E64                        00            .byte	0
36062                                           ! 7113                            0,
36063 8E65                        00            .byte	0
36064                                           ! 7114                                 0,
36065 8E66                        00            .byte	0
36066                                           ! 7115                          0,
36067 8E67                      0000            .word	0
36068 8E69                      0000            .word	0
36069                                           ! 7116 } },
36070                                           ! 7117 { 0x0188,
36071 8E6B                      0188            .word	$188
36072                                           ! 7118 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36073 8E6D                      009B            .word	$9B
36074                                           ! 7119                           0x01 | 0x02 | 0x04,
36075 8E6F                        07            .byte	7
36076                                           ! 7120                           0,
36077 8E70                        00            .byte	0
36078                                           ! 7121                           64,
36079 8E71                      0040            .word	$40
36080                                           ! 7122                    64,
36081 8E73                      0040            .word	$40
36082                                           ! 7123                        0xA000,
36083 8E75                      A000            .word	$A000
36084                                           ! 7124                        0x0000,
36085 8E77                      0000            .word	0
36086                                           ! 7125                       0,
36087 8E79                      0000            .word	0
36088 8E7B                      0000            .word	0
36089                                           ! 7126                             5760,
36090 8E7D                      1680            .word	$1680
36091                                           ! 7127                        1920,
36092 8E7F                      0780            .word	$780
36093                                           ! 7128                        1200,
36094 8E81                      04B0            .word	$4B0
36095                                           ! 7129                      8,
36096 8E83                        08            .byte	8
36097                                           ! 7130                      16,
36098 8E84                        10            .byte	$10
36099                                           ! 7131                           1,
36100 8E85                        01            .byte	1
36101                                           ! 7132                         24,
36102 8E86                        18            .byte	$18
36103                                           ! 7133                          106,
36104 8E87                        6A            .byte	$6A
36105                                           ! 7134                        0x06,
36106 8E88                        06            .byte	6
36107                                           ! 7135                     0,
36108 8E89                        00            .byte	0
36109                                           ! 7136                               1,
36110 8E8A                        01            .byte	1
36111                                           ! 7137                          0,
36112 8E8B                        00            .byte	0
36113                                           ! 7138                        8,
36114 8E8C                        08            .byte	8
36115                                           ! 7139                             16,
36116 8E8D                        10            .byte	$10
36117                                           ! 7140                          8,
36118 8E8E                        08            .byte	8
36119                                           ! 7141                               8,
36120 8E8F                        08            .byte	8
36121                                           ! 7142                         8,
36122 8E90                        08            .byte	8
36123                                           ! 7143                              0,
36124 8E91                        00            .byte	0
36125                                           ! 7144                         0,
36126 8E92                        00            .byte	0
36127                                           ! 7145                              0,
36128 8E93                        00            .byte	0
36129                                           ! 7146                                0,
36130 8E94                        00            .byte	0
36131                                           ! 7147                        0xE0000000,
36132 8E95                      0000            .word	0
36133 8E97                      E000            .word	$E000
36134                                           ! 7148                               0,
36135 8E99                      0000            .word	0
36136 8E9B                      0000            .word	0
36137                                           ! 7149                             0,
36138 8E9D                      0000            .word	0
36139                                           ! 7150                                5760,
36140 8E9F                      1680            .word	$1680
36141                                           ! 7151                             0,
36142 8EA1                        00            .byte	0
36143                                           ! 7152                             0,
36144 8EA2                        00            .byte	0
36145                                           ! 7153                           8,
36146 8EA3                        08            .byte	8
36147                                           ! 7154                                16,
36148 8EA4                        10            .byte	$10
36149                                           ! 7155                             8,
36150 8EA5                        08            .byte	8
36151                                           ! 7156                                  8,
36152 8EA6                        08            .byte	8
36153                                           ! 7157                            8,
36154 8EA7                        08            .byte	8
36155                                           ! 7158                                 0,
36156 8EA8                        00            .byte	0
36157                                           ! 7159                            0,
36158 8EA9                        00            .byte	0
36159                                           ! 7160                                 0,
36160 8EAA                        00            .byte	0
36161                                           ! 7161                          0,
36162 8EAB                      0000            .word	0
36163 8EAD                      0000            .word	0
36164                                           ! 7162 } },
36165                                           ! 7163 { 0x0189,
36166 8EAF                      0189            .word	$189
36167                                           ! 7164 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36168 8EB1                      009B            .word	$9B
36169                                           ! 7165                           0x01 | 0x02 | 0x04,
36170 8EB3                        07            .byte	7
36171                                           ! 7166                           0,
36172 8EB4                        00            .byte	0
36173                                           ! 7167                           64,
36174 8EB5                      0040            .word	$40
36175                                           ! 7168                    64,
36176 8EB7                      0040            .word	$40
36177                                           ! 7169                        0xA000,
36178 8EB9                      A000            .word	$A000
36179                                           ! 7170                        0x0000,
36180 8EBB                      0000            .word	0
36181                                           ! 7171                       0,
36182 8EBD                      0000            .word	0
36183 8EBF                      0000            .word	0
36184                                           ! 7172                             7680,
36185 8EC1                      1E00            .word	$1E00
36186                                           ! 7173                        1920,
36187 8EC3                      0780            .word	$780
36188                                           ! 7174                        1200,
36189 8EC5                      04B0            .word	$4B0
36190                                           ! 7175                      8,
36191 8EC7                        08            .byte	8
36192                                           ! 7176                      16,
36193 8EC8                        10            .byte	$10
36194                                           ! 7177                           1,
36195 8EC9                        01            .byte	1
36196                                           ! 7178                         32,
36197 8ECA                        20            .byte	$20
36198                                           ! 7179                          141,
36199 8ECB                        8D            .byte	$8D
36200                                           ! 7180                        0x06,
36201 8ECC                        06            .byte	6
36202                                           ! 7181                     0,
36203 8ECD                        00            .byte	0
36204                                           ! 7182                     
36205                                           ! 7182           0,
36206 8ECE                        00            .byte	0
36207                                           ! 7183                          0,
36208 8ECF                        00            .byte	0
36209                                           ! 7184                        8,
36210 8ED0                        08            .byte	8
36211                                           ! 7185                             16,
36212 8ED1                        10            .byte	$10
36213                                           ! 7186                          8,
36214 8ED2                        08            .byte	8
36215                                           ! 7187                               8,
36216 8ED3                        08            .byte	8
36217                                           ! 7188                         8,
36218 8ED4                        08            .byte	8
36219                                           ! 7189                              0,
36220 8ED5                        00            .byte	0
36221                                           ! 7190                         8,
36222 8ED6                        08            .byte	8
36223                                           ! 7191                              24,
36224 8ED7                        18            .byte	$18
36225                                           ! 7192                                0x02,
36226 8ED8                        02            .byte	2
36227                                           ! 7193                        0xE0000000,
36228 8ED9                      0000            .word	0
36229 8EDB                      E000            .word	$E000
36230                                           ! 7194                               0,
36231 8EDD                      0000            .word	0
36232 8EDF                      0000            .word	0
36233                                           ! 7195                             0,
36234 8EE1                      0000            .word	0
36235                                           ! 7196                                7680,
36236 8EE3                      1E00            .word	$1E00
36237                                           ! 7197                             0,
36238 8EE5                        00            .byte	0
36239                                           ! 7198                             0,
36240 8EE6                        00            .byte	0
36241                                           ! 7199                           8,
36242 8EE7                        08            .byte	8
36243                                           ! 7200                                16,
36244 8EE8                        10            .byte	$10
36245                                           ! 7201                             8,
36246 8EE9                        08            .byte	8
36247                                           ! 7202                                  8,
36248 8EEA                        08            .byte	8
36249                                           ! 7203                            8,
36250 8EEB                        08            .byte	8
36251                                           ! 7204                                 0,
36252 8EEC                        00            .byte	0
36253                                           ! 7205                            8,
36254 8EED                        08            .byte	8
36255                                           ! 7206                                 24,
36256 8EEE                        18            .byte	$18
36257                                           ! 7207                          0,
36258 8EEF                      0000            .word	0
36259 8EF1                      0000            .word	0
36260                                           ! 7208 } },
36261                                           ! 7209 { 0x018a,
36262 8EF3                      018A            .word	$18A
36263                                           ! 7210 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36264 8EF5                      009B            .word	$9B
36265                                           ! 7211                           0x01 | 0x02 | 0x04,
36266 8EF7                        07            .byte	7
36267                                           ! 7212                           0,
36268 8EF8                        00            .byte	0
36269                                           ! 7213                           64,
36270 8EF9                      0040            .word	$40
36271                                           ! 7214                    64,
36272 8EFB                      0040            .word	$40
36273                                           ! 7215                        0xA000,
36274 8EFD                      A000            .word	$A000
36275                                           ! 7216                        0x0000,
36276 8EFF                      0000            .word	0
36277                                           ! 7217                       0,
36278 8F01                      0000            .word	0
36279 8F03                      0000            .word	0
36280                                           ! 7218                             5120,
36281 8F05                      1400            .word	$1400
36282                                           ! 7219                        2560,
36283 8F07                      0A00            .word	$A00
36284                                           ! 7220                        1600,
36285 8F09                      0640            .word	$640
36286                                           ! 7221                      8,
36287 8F0B                        08            .byte	8
36288                                           ! 7222                      16,
36289 8F0C                        10            .byte	$10
36290                                           ! 7223                           1,
36291 8F0D                        01            .byte	1
36292                                           ! 7224                         16,
36293 8F0E                        10            .byte	$10
36294                                           ! 7225                          125,
36295 8F0F                        7D            .byte	$7D
36296                                           ! 7226                        0x06,
36297 8F10                        06            .byte	6
36298                                           ! 7227                     0,
36299 8F11                        00            .byte	0
36300                                           ! 7228                               1,
36301 8F12                        01            .byte	1
36302                                           ! 7229                          0,
36303 8F13                        00            .byte	0
36304                                           ! 7230                        5,
36305 8F14                        05            .byte	5
36306                                           ! 7231                             11,
36307 8F15                        0B            .byte	$B
36308                                           ! 7232                          6,
36309 8F16                        06            .byte	6
36310                                           ! 7233                               5,
36311 8F17                        05            .byte	5
36312                                           ! 7234                         5,
36313 8F18                        05            .byte	5
36314                                           ! 7235                              0,
36315 8F19                        00            .byte	0
36316                                           ! 7236                         0,
36317 8F1A                        00            .byte	0
36318                                           ! 7237                              0,
36319 8F1B                        00            .byte	0
36320                                           ! 7238                                0,
36321 8F1C                        00            .byte	0
36322                                           ! 7239                        0xE0000000,
36323 8F1D                      0000            .word	0
36324 8F1F                      E000            .word	$E000
36325                                           ! 7240                               0,
36326 8F21                      0000            .word	0
36327 8F23                      0000            .word	0
36328                                           ! 7241                             0,
36329 8F25                      0000            .word	0
36330                                           ! 7242                                5120,
36331 8F27                      1400            .word	$1400
36332                                           ! 7243                             0,
36333 8F29                        00            .byte	0
36334                                           ! 7244                             0,
36335 8F2A                        00            .byte	0
36336                                           ! 7245                           5,
36337 8F2B                        05            .byte	5
36338                                           ! 7246                                11,
36339 8F2C                        0B            .byte	$B
36340                                           ! 7247                             6,
36341 8F2D                        06            .byte	6
36342                                           ! 7248                                  5,
36343 8F2E                        05            .byte	5
36344                                           ! 7249                            
36345                                           ! 7249 5,
36346 8F2F                        05            .byte	5
36347                                           ! 7250                                 0,
36348 8F30                        00            .byte	0
36349                                           ! 7251                            0,
36350 8F31                        00            .byte	0
36351                                           ! 7252                                 0,
36352 8F32                        00            .byte	0
36353                                           ! 7253                          0,
36354 8F33                      0000            .word	0
36355 8F35                      0000            .word	0
36356                                           ! 7254 } },
36357                                           ! 7255 { 0x018b,
36358 8F37                      018B            .word	$18B
36359                                           ! 7256 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36360 8F39                      009B            .word	$9B
36361                                           ! 7257                           0x01 | 0x02 | 0x04,
36362 8F3B                        07            .byte	7
36363                                           ! 7258                           0,
36364 8F3C                        00            .byte	0
36365                                           ! 7259                           64,
36366 8F3D                      0040            .word	$40
36367                                           ! 7260                    64,
36368 8F3F                      0040            .word	$40
36369                                           ! 7261                        0xA000,
36370 8F41                      A000            .word	$A000
36371                                           ! 7262                        0x0000,
36372 8F43                      0000            .word	0
36373                                           ! 7263                       0,
36374 8F45                      0000            .word	0
36375 8F47                      0000            .word	0
36376                                           ! 7264                             7680,
36377 8F49                      1E00            .word	$1E00
36378                                           ! 7265                        2560,
36379 8F4B                      0A00            .word	$A00
36380                                           ! 7266                        1600,
36381 8F4D                      0640            .word	$640
36382                                           ! 7267                      8,
36383 8F4F                        08            .byte	8
36384                                           ! 7268                      16,
36385 8F50                        10            .byte	$10
36386                                           ! 7269                           1,
36387 8F51                        01            .byte	1
36388                                           ! 7270                         24,
36389 8F52                        18            .byte	$18
36390                                           ! 7271                          188,
36391 8F53                        BC            .byte	$BC
36392                                           ! 7272                        0x06,
36393 8F54                        06            .byte	6
36394                                           ! 7273                     0,
36395 8F55                        00            .byte	0
36396                                           ! 7274                               0,
36397 8F56                        00            .byte	0
36398                                           ! 7275                          0,
36399 8F57                        00            .byte	0
36400                                           ! 7276                        8,
36401 8F58                        08            .byte	8
36402                                           ! 7277                             16,
36403 8F59                        10            .byte	$10
36404                                           ! 7278                          8,
36405 8F5A                        08            .byte	8
36406                                           ! 7279                               8,
36407 8F5B                        08            .byte	8
36408                                           ! 7280                         8,
36409 8F5C                        08            .byte	8
36410                                           ! 7281                              0,
36411 8F5D                        00            .byte	0
36412                                           ! 7282                         0,
36413 8F5E                        00            .byte	0
36414                                           ! 7283                              0,
36415 8F5F                        00            .byte	0
36416                                           ! 7284                                0,
36417 8F60                        00            .byte	0
36418                                           ! 7285                        0xE0000000,
36419 8F61                      0000            .word	0
36420 8F63                      E000            .word	$E000
36421                                           ! 7286                               0,
36422 8F65                      0000            .word	0
36423 8F67                      0000            .word	0
36424                                           ! 7287                             0,
36425 8F69                      0000            .word	0
36426                                           ! 7288                                7680,
36427 8F6B                      1E00            .word	$1E00
36428                                           ! 7289                             0,
36429 8F6D                        00            .byte	0
36430                                           ! 7290                             0,
36431 8F6E                        00            .byte	0
36432                                           ! 7291                           8,
36433 8F6F                        08            .byte	8
36434                                           ! 7292                                16,
36435 8F70                        10            .byte	$10
36436                                           ! 7293                             8,
36437 8F71                        08            .byte	8
36438                                           ! 7294                                  8,
36439 8F72                        08            .byte	8
36440                                           ! 7295                            8,
36441 8F73                        08            .byte	8
36442                                           ! 7296                                 0,
36443 8F74                        00            .byte	0
36444                                           ! 7297                            0,
36445 8F75                        00            .byte	0
36446                                           ! 7298                                 0,
36447 8F76                        00            .byte	0
36448                                           ! 7299                          0,
36449 8F77                      0000            .word	0
36450 8F79                      0000            .word	0
36451                                           ! 7300 } },
36452                                           ! 7301 { 0x018c,
36453 8F7B                      018C            .word	$18C
36454                                           ! 7302 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36455 8F7D                      009B            .word	$9B
36456                                           ! 7303                           0x01 | 0x02 | 0x04,
36457 8F7F                        07            .byte	7
36458                                           ! 7304                           0,
36459 8F80                        00            .byte	0
36460                                           ! 7305                           64,
36461 8F81                      0040            .word	$40
36462                                           ! 7306                    64,
36463 8F83                      0040            .word	$40
36464                                           ! 7307                        0xA000,
36465 8F85                      A000            .word	$A000
36466                                           ! 7308                        0x0000,
36467 8F87                      0000            .word	0
36468                                           ! 7309                       0,
36469 8F89                      0000            .word	0
36470 8F8B                      0000            .word	0
36471                                           ! 7310                             10240,
36472 8F8D                      2800            .word	$2800
36473                                           ! 7311                        2560,
36474 8F8F                      0A00            .word	$A00
36475                                           ! 7312                        1600,
36476 8F91                      0640            .word	$640
36477                                           ! 7313                      8,
36478 8F93                        08            .byte	8
36479                                           ! 7314                      16,
36480 8F94                        10            .byte	$10
36481                                           ! 7315                           1,
36482 8F95                        01            .byte	1
36483                                           ! 7316                         32,
36484 8F96                        20            .byte	$20
36485                                           ! 7317                          250,
36486 8F97                        FA            .byte	$FA
36487                                           ! 7318                        0x06,
36488 8F98                        06            .byte	6
36489                                           ! 7319         
36490                                           ! 7319             0,
36491 8F99                        00            .byte	0
36492                                           ! 7320                               0,
36493 8F9A                        00            .byte	0
36494                                           ! 7321                          0,
36495 8F9B                        00            .byte	0
36496                                           ! 7322                        8,
36497 8F9C                        08            .byte	8
36498                                           ! 7323                             16,
36499 8F9D                        10            .byte	$10
36500                                           ! 7324                          8,
36501 8F9E                        08            .byte	8
36502                                           ! 7325                               8,
36503 8F9F                        08            .byte	8
36504                                           ! 7326                         8,
36505 8FA0                        08            .byte	8
36506                                           ! 7327                              0,
36507 8FA1                        00            .byte	0
36508                                           ! 7328                         8,
36509 8FA2                        08            .byte	8
36510                                           ! 7329                              24,
36511 8FA3                        18            .byte	$18
36512                                           ! 7330                                0x02,
36513 8FA4                        02            .byte	2
36514                                           ! 7331                        0xE0000000,
36515 8FA5                      0000            .word	0
36516 8FA7                      E000            .word	$E000
36517                                           ! 7332                               0,
36518 8FA9                      0000            .word	0
36519 8FAB                      0000            .word	0
36520                                           ! 7333                             0,
36521 8FAD                      0000            .word	0
36522                                           ! 7334                                10240,
36523 8FAF                      2800            .word	$2800
36524                                           ! 7335                             0,
36525 8FB1                        00            .byte	0
36526                                           ! 7336                             0,
36527 8FB2                        00            .byte	0
36528                                           ! 7337                           8,
36529 8FB3                        08            .byte	8
36530                                           ! 7338                                16,
36531 8FB4                        10            .byte	$10
36532                                           ! 7339                             8,
36533 8FB5                        08            .byte	8
36534                                           ! 7340                                  8,
36535 8FB6                        08            .byte	8
36536                                           ! 7341                            8,
36537 8FB7                        08            .byte	8
36538                                           ! 7342                                 0,
36539 8FB8                        00            .byte	0
36540                                           ! 7343                            8,
36541 8FB9                        08            .byte	8
36542                                           ! 7344                                 24,
36543 8FBA                        18            .byte	$18
36544                                           ! 7345                          0,
36545 8FBB                      0000            .word	0
36546 8FBD                      0000            .word	0
36547                                           ! 7346 } },
36548                                           ! 7347 { 0x018d,
36549 8FBF                      018D            .word	$18D
36550                                           ! 7348 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36551 8FC1                      009B            .word	$9B
36552                                           ! 7349                           0x01 | 0x02 | 0x04,
36553 8FC3                        07            .byte	7
36554                                           ! 7350                           0,
36555 8FC4                        00            .byte	0
36556                                           ! 7351                           64,
36557 8FC5                      0040            .word	$40
36558                                           ! 7352                    64,
36559 8FC7                      0040            .word	$40
36560                                           ! 7353                        0xA000,
36561 8FC9                      A000            .word	$A000
36562                                           ! 7354                        0x0000,
36563 8FCB                      0000            .word	0
36564                                           ! 7355                       0,
36565 8FCD                      0000            .word	0
36566 8FCF                      0000            .word	0
36567                                           ! 7356                             640,
36568 8FD1                      0280            .word	$280
36569                                           ! 7357                        320,
36570 8FD3                      0140            .word	$140
36571                                           ! 7358                        480,
36572 8FD5                      01E0            .word	$1E0
36573                                           ! 7359                      8,
36574 8FD7                        08            .byte	8
36575                                           ! 7360                      16,
36576 8FD8                        10            .byte	$10
36577                                           ! 7361                           1,
36578 8FD9                        01            .byte	1
36579                                           ! 7362                         16,
36580 8FDA                        10            .byte	$10
36581                                           ! 7363                          5,
36582 8FDB                        05            .byte	5
36583                                           ! 7364                        0x06,
36584 8FDC                        06            .byte	6
36585                                           ! 7365                     0,
36586 8FDD                        00            .byte	0
36587                                           ! 7366                               53,
36588 8FDE                        35            .byte	$35
36589                                           ! 7367                          0,
36590 8FDF                        00            .byte	0
36591                                           ! 7368                        5,
36592 8FE0                        05            .byte	5
36593                                           ! 7369                             11,
36594 8FE1                        0B            .byte	$B
36595                                           ! 7370                          6,
36596 8FE2                        06            .byte	6
36597                                           ! 7371                               5,
36598 8FE3                        05            .byte	5
36599                                           ! 7372                         5,
36600 8FE4                        05            .byte	5
36601                                           ! 7373                              0,
36602 8FE5                        00            .byte	0
36603                                           ! 7374                         0,
36604 8FE6                        00            .byte	0
36605                                           ! 7375                              0,
36606 8FE7                        00            .byte	0
36607                                           ! 7376                                0,
36608 8FE8                        00            .byte	0
36609                                           ! 7377                        0xE0000000,
36610 8FE9                      0000            .word	0
36611 8FEB                      E000            .word	$E000
36612                                           ! 7378                               0,
36613 8FED                      0000            .word	0
36614 8FEF                      0000            .word	0
36615                                           ! 7379                             0,
36616 8FF1                      0000            .word	0
36617                                           ! 7380                                640,
36618 8FF3                      0280            .word	$280
36619                                           ! 7381                             0,
36620 8FF5                        00            .byte	0
36621                                           ! 7382                             0,
36622 8FF6                        00            .byte	0
36623                                           ! 7383                           5,
36624 8FF7                        05            .byte	5
36625                                           ! 7384                                11,
36626 8FF8                        0B            .byte	$B
36627                                           ! 7385                             6,
36628 8FF9                        06            .byte	6
36629                                           ! 7386                                 
36630                                           ! 7386  5,
36631 8FFA                        05            .byte	5
36632                                           ! 7387                            5,
36633 8FFB                        05            .byte	5
36634                                           ! 7388                                 0,
36635 8FFC                        00            .byte	0
36636                                           ! 7389                            0,
36637 8FFD                        00            .byte	0
36638                                           ! 7390                                 0,
36639 8FFE                        00            .byte	0
36640                                           ! 7391                          0,
36641 8FFF                      0000            .word	0
36642 9001                      0000            .word	0
36643                                           ! 7392 } },
36644                                           ! 7393 { 0x018e,
36645 9003                      018E            .word	$18E
36646                                           ! 7394 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36647 9005                      009B            .word	$9B
36648                                           ! 7395                           0x01 | 0x02 | 0x04,
36649 9007                        07            .byte	7
36650                                           ! 7396                           0,
36651 9008                        00            .byte	0
36652                                           ! 7397                           64,
36653 9009                      0040            .word	$40
36654                                           ! 7398                    64,
36655 900B                      0040            .word	$40
36656                                           ! 7399                        0xA000,
36657 900D                      A000            .word	$A000
36658                                           ! 7400                        0x0000,
36659 900F                      0000            .word	0
36660                                           ! 7401                       0,
36661 9011                      0000            .word	0
36662 9013                      0000            .word	0
36663                                           ! 7402                             960,
36664 9015                      03C0            .word	$3C0
36665                                           ! 7403                        320,
36666 9017                      0140            .word	$140
36667                                           ! 7404                        480,
36668 9019                      01E0            .word	$1E0
36669                                           ! 7405                      8,
36670 901B                        08            .byte	8
36671                                           ! 7406                      16,
36672 901C                        10            .byte	$10
36673                                           ! 7407                           1,
36674 901D                        01            .byte	1
36675                                           ! 7408                         24,
36676 901E                        18            .byte	$18
36677                                           ! 7409                          8,
36678 901F                        08            .byte	8
36679                                           ! 7410                        0x06,
36680 9020                        06            .byte	6
36681                                           ! 7411                     0,
36682 9021                        00            .byte	0
36683                                           ! 7412                               35,
36684 9022                        23            .byte	$23
36685                                           ! 7413                          0,
36686 9023                        00            .byte	0
36687                                           ! 7414                        8,
36688 9024                        08            .byte	8
36689                                           ! 7415                             16,
36690 9025                        10            .byte	$10
36691                                           ! 7416                          8,
36692 9026                        08            .byte	8
36693                                           ! 7417                               8,
36694 9027                        08            .byte	8
36695                                           ! 7418                         8,
36696 9028                        08            .byte	8
36697                                           ! 7419                              0,
36698 9029                        00            .byte	0
36699                                           ! 7420                         0,
36700 902A                        00            .byte	0
36701                                           ! 7421                              0,
36702 902B                        00            .byte	0
36703                                           ! 7422                                0,
36704 902C                        00            .byte	0
36705                                           ! 7423                        0xE0000000,
36706 902D                      0000            .word	0
36707 902F                      E000            .word	$E000
36708                                           ! 7424                               0,
36709 9031                      0000            .word	0
36710 9033                      0000            .word	0
36711                                           ! 7425                             0,
36712 9035                      0000            .word	0
36713                                           ! 7426                                960,
36714 9037                      03C0            .word	$3C0
36715                                           ! 7427                             0,
36716 9039                        00            .byte	0
36717                                           ! 7428                             0,
36718 903A                        00            .byte	0
36719                                           ! 7429                           8,
36720 903B                        08            .byte	8
36721                                           ! 7430                                16,
36722 903C                        10            .byte	$10
36723                                           ! 7431                             8,
36724 903D                        08            .byte	8
36725                                           ! 7432                                  8,
36726 903E                        08            .byte	8
36727                                           ! 7433                            8,
36728 903F                        08            .byte	8
36729                                           ! 7434                                 0,
36730 9040                        00            .byte	0
36731                                           ! 7435                            0,
36732 9041                        00            .byte	0
36733                                           ! 7436                                 0,
36734 9042                        00            .byte	0
36735                                           ! 7437                          0,
36736 9043                      0000            .word	0
36737 9045                      0000            .word	0
36738                                           ! 7438 } },
36739                                           ! 7439 { 0x018f,
36740 9047                      018F            .word	$18F
36741                                           ! 7440 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36742 9049                      009B            .word	$9B
36743                                           ! 7441                           0x01 | 0x02 | 0x04,
36744 904B                        07            .byte	7
36745                                           ! 7442                           0,
36746 904C                        00            .byte	0
36747                                           ! 7443                           64,
36748 904D                      0040            .word	$40
36749                                           ! 7444                    64,
36750 904F                      0040            .word	$40
36751                                           ! 7445                        0xA000,
36752 9051                      A000            .word	$A000
36753                                           ! 7446                        0x0000,
36754 9053                      0000            .word	0
36755                                           ! 7447                       0,
36756 9055                      0000            .word	0
36757 9057                      0000            .word	0
36758                                           ! 7448                             1280,
36759 9059                      0500            .word	$500
36760                                           ! 7449                        320,
36761 905B                      0140            .word	$140
36762                                           ! 7450                        480,
36763 905D                      01E0            .word	$1E0
36764                                           ! 7451                      8,
36765 905F                        08            .byte	8
36766                                           ! 7452                      16,
36767 9060                        10            .byte	$10
36768                                           ! 7453                           1,
36769 9061                        01            .byte	1
36770                                           ! 7454                         32,
36771 9062                        20            .byte	$20
36772                                           ! 7455                          10,
36773 9063                        0A            .byte	$A
36774                                           ! 7456                
36775                                           ! 7456         0x06,
36776 9064                        06            .byte	6
36777                                           ! 7457                     0,
36778 9065                        00            .byte	0
36779                                           ! 7458                               26,
36780 9066                        1A            .byte	$1A
36781                                           ! 7459                          0,
36782 9067                        00            .byte	0
36783                                           ! 7460                        8,
36784 9068                        08            .byte	8
36785                                           ! 7461                             16,
36786 9069                        10            .byte	$10
36787                                           ! 7462                          8,
36788 906A                        08            .byte	8
36789                                           ! 7463                               8,
36790 906B                        08            .byte	8
36791                                           ! 7464                         8,
36792 906C                        08            .byte	8
36793                                           ! 7465                              0,
36794 906D                        00            .byte	0
36795                                           ! 7466                         8,
36796 906E                        08            .byte	8
36797                                           ! 7467                              24,
36798 906F                        18            .byte	$18
36799                                           ! 7468                                0x02,
36800 9070                        02            .byte	2
36801                                           ! 7469                        0xE0000000,
36802 9071                      0000            .word	0
36803 9073                      E000            .word	$E000
36804                                           ! 7470                               0,
36805 9075                      0000            .word	0
36806 9077                      0000            .word	0
36807                                           ! 7471                             0,
36808 9079                      0000            .word	0
36809                                           ! 7472                                1280,
36810 907B                      0500            .word	$500
36811                                           ! 7473                             0,
36812 907D                        00            .byte	0
36813                                           ! 7474                             0,
36814 907E                        00            .byte	0
36815                                           ! 7475                           8,
36816 907F                        08            .byte	8
36817                                           ! 7476                                16,
36818 9080                        10            .byte	$10
36819                                           ! 7477                             8,
36820 9081                        08            .byte	8
36821                                           ! 7478                                  8,
36822 9082                        08            .byte	8
36823                                           ! 7479                            8,
36824 9083                        08            .byte	8
36825                                           ! 7480                                 0,
36826 9084                        00            .byte	0
36827                                           ! 7481                            8,
36828 9085                        08            .byte	8
36829                                           ! 7482                                 24,
36830 9086                        18            .byte	$18
36831                                           ! 7483                          0,
36832 9087                      0000            .word	0
36833 9089                      0000            .word	0
36834                                           ! 7484 } },
36835                                           ! 7485 { 0x0190,
36836 908B                      0190            .word	$190
36837                                           ! 7486 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36838 908D                      009B            .word	$9B
36839                                           ! 7487                           0x01 | 0x02 | 0x04,
36840 908F                        07            .byte	7
36841                                           ! 7488                           0,
36842 9090                        00            .byte	0
36843                                           ! 7489                           64,
36844 9091                      0040            .word	$40
36845                                           ! 7490                    64,
36846 9093                      0040            .word	$40
36847                                           ! 7491                        0xA000,
36848 9095                      A000            .word	$A000
36849                                           ! 7492                        0x0000,
36850 9097                      0000            .word	0
36851                                           ! 7493                       0,
36852 9099                      0000            .word	0
36853 909B                      0000            .word	0
36854                                           ! 7494                             960,
36855 909D                      03C0            .word	$3C0
36856                                           ! 7495                        480,
36857 909F                      01E0            .word	$1E0
36858                                           ! 7496                        800,
36859 90A1                      0320            .word	$320
36860                                           ! 7497                      8,
36861 90A3                        08            .byte	8
36862                                           ! 7498                      16,
36863 90A4                        10            .byte	$10
36864                                           ! 7499                           1,
36865 90A5                        01            .byte	1
36866                                           ! 7500                         16,
36867 90A6                        10            .byte	$10
36868                                           ! 7501                          12,
36869 90A7                        0C            .byte	$C
36870                                           ! 7502                        0x06,
36871 90A8                        06            .byte	6
36872                                           ! 7503                     0,
36873 90A9                        00            .byte	0
36874                                           ! 7504                               20,
36875 90AA                        14            .byte	$14
36876                                           ! 7505                          0,
36877 90AB                        00            .byte	0
36878                                           ! 7506                        5,
36879 90AC                        05            .byte	5
36880                                           ! 7507                             11,
36881 90AD                        0B            .byte	$B
36882                                           ! 7508                          6,
36883 90AE                        06            .byte	6
36884                                           ! 7509                               5,
36885 90AF                        05            .byte	5
36886                                           ! 7510                         5,
36887 90B0                        05            .byte	5
36888                                           ! 7511                              0,
36889 90B1                        00            .byte	0
36890                                           ! 7512                         0,
36891 90B2                        00            .byte	0
36892                                           ! 7513                              0,
36893 90B3                        00            .byte	0
36894                                           ! 7514                                0,
36895 90B4                        00            .byte	0
36896                                           ! 7515                        0xE0000000,
36897 90B5                      0000            .word	0
36898 90B7                      E000            .word	$E000
36899                                           ! 7516                               0,
36900 90B9                      0000            .word	0
36901 90BB                      0000            .word	0
36902                                           ! 7517                             0,
36903 90BD                      0000            .word	0
36904                                           ! 7518                                960,
36905 90BF                      03C0            .word	$3C0
36906                                           ! 7519                             0,
36907 90C1                        00            .byte	0
36908                                           ! 7520                             0,
36909 90C2                        00            .byte	0
36910                                           ! 7521                           5,
36911 90C3                        05            .byte	5
36912                                           ! 7522                                11,
36913 90C4                        0B            .byte	$B
36914                                           ! 7523                             6,
36915 90C5                        06            .byte	6
36916                                           ! 7524          
36917                                           ! 7524                         5,
36918 90C6                        05            .byte	5
36919                                           ! 7525                            5,
36920 90C7                        05            .byte	5
36921                                           ! 7526                                 0,
36922 90C8                        00            .byte	0
36923                                           ! 7527                            0,
36924 90C9                        00            .byte	0
36925                                           ! 7528                                 0,
36926 90CA                        00            .byte	0
36927                                           ! 7529                          0,
36928 90CB                      0000            .word	0
36929 90CD                      0000            .word	0
36930                                           ! 7530 } },
36931                                           ! 7531 { 0x0191,
36932 90CF                      0191            .word	$191
36933                                           ! 7532 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36934 90D1                      009B            .word	$9B
36935                                           ! 7533                           0x01 | 0x02 | 0x04,
36936 90D3                        07            .byte	7
36937                                           ! 7534                           0,
36938 90D4                        00            .byte	0
36939                                           ! 7535                           64,
36940 90D5                      0040            .word	$40
36941                                           ! 7536                    64,
36942 90D7                      0040            .word	$40
36943                                           ! 7537                        0xA000,
36944 90D9                      A000            .word	$A000
36945                                           ! 7538                        0x0000,
36946 90DB                      0000            .word	0
36947                                           ! 7539                       0,
36948 90DD                      0000            .word	0
36949 90DF                      0000            .word	0
36950                                           ! 7540                             1440,
36951 90E1                      05A0            .word	$5A0
36952                                           ! 7541                        480,
36953 90E3                      01E0            .word	$1E0
36954                                           ! 7542                        800,
36955 90E5                      0320            .word	$320
36956                                           ! 7543                      8,
36957 90E7                        08            .byte	8
36958                                           ! 7544                      16,
36959 90E8                        10            .byte	$10
36960                                           ! 7545                           1,
36961 90E9                        01            .byte	1
36962                                           ! 7546                         24,
36963 90EA                        18            .byte	$18
36964                                           ! 7547                          18,
36965 90EB                        12            .byte	$12
36966                                           ! 7548                        0x06,
36967 90EC                        06            .byte	6
36968                                           ! 7549                     0,
36969 90ED                        00            .byte	0
36970                                           ! 7550                               13,
36971 90EE                        0D            .byte	$D
36972                                           ! 7551                          0,
36973 90EF                        00            .byte	0
36974                                           ! 7552                        8,
36975 90F0                        08            .byte	8
36976                                           ! 7553                             16,
36977 90F1                        10            .byte	$10
36978                                           ! 7554                          8,
36979 90F2                        08            .byte	8
36980                                           ! 7555                               8,
36981 90F3                        08            .byte	8
36982                                           ! 7556                         8,
36983 90F4                        08            .byte	8
36984                                           ! 7557                              0,
36985 90F5                        00            .byte	0
36986                                           ! 7558                         0,
36987 90F6                        00            .byte	0
36988                                           ! 7559                              0,
36989 90F7                        00            .byte	0
36990                                           ! 7560                                0,
36991 90F8                        00            .byte	0
36992                                           ! 7561                        0xE0000000,
36993 90F9                      0000            .word	0
36994 90FB                      E000            .word	$E000
36995                                           ! 7562                               0,
36996 90FD                      0000            .word	0
36997 90FF                      0000            .word	0
36998                                           ! 7563                             0,
36999 9101                      0000            .word	0
37000                                           ! 7564                                1440,
37001 9103                      05A0            .word	$5A0
37002                                           ! 7565                             0,
37003 9105                        00            .byte	0
37004                                           ! 7566                             0,
37005 9106                        00            .byte	0
37006                                           ! 7567                           8,
37007 9107                        08            .byte	8
37008                                           ! 7568                                16,
37009 9108                        10            .byte	$10
37010                                           ! 7569                             8,
37011 9109                        08            .byte	8
37012                                           ! 7570                                  8,
37013 910A                        08            .byte	8
37014                                           ! 7571                            8,
37015 910B                        08            .byte	8
37016                                           ! 7572                                 0,
37017 910C                        00            .byte	0
37018                                           ! 7573                            0,
37019 910D                        00            .byte	0
37020                                           ! 7574                                 0,
37021 910E                        00            .byte	0
37022                                           ! 7575                          0,
37023 910F                      0000            .word	0
37024 9111                      0000            .word	0
37025                                           ! 7576 } },
37026                                           ! 7577 { 0x0192,
37027 9113                      0192            .word	$192
37028                                           ! 7578 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37029 9115                      009B            .word	$9B
37030                                           ! 7579                           0x01 | 0x02 | 0x04,
37031 9117                        07            .byte	7
37032                                           ! 7580                           0,
37033 9118                        00            .byte	0
37034                                           ! 7581                           64,
37035 9119                      0040            .word	$40
37036                                           ! 7582                    64,
37037 911B                      0040            .word	$40
37038                                           ! 7583                        0xA000,
37039 911D                      A000            .word	$A000
37040                                           ! 7584                        0x0000,
37041 911F                      0000            .word	0
37042                                           ! 7585                       0,
37043 9121                      0000            .word	0
37044 9123                      0000            .word	0
37045                                           ! 7586                             1920,
37046 9125                      0780            .word	$780
37047                                           ! 7587                        480,
37048 9127                      01E0            .word	$1E0
37049                                           ! 7588                        800,
37050 9129                      0320            .word	$320
37051                                           ! 7589                      8,
37052 912B                        08            .byte	8
37053                                           ! 7590                      16,
37054 912C                        10            .byte	$10
37055                                           ! 7591                           1,
37056 912D                        01            .byte	1
37057                                           ! 7592                         32,
37058 912E                        20            .byte	$20
37059                                           ! 7593                   
37060                                           ! 7593        24,
37061 912F                        18            .byte	$18
37062                                           ! 7594                        0x06,
37063 9130                        06            .byte	6
37064                                           ! 7595                     0,
37065 9131                        00            .byte	0
37066                                           ! 7596                               9,
37067 9132                        09            .byte	9
37068                                           ! 7597                          0,
37069 9133                        00            .byte	0
37070                                           ! 7598                        8,
37071 9134                        08            .byte	8
37072                                           ! 7599                             16,
37073 9135                        10            .byte	$10
37074                                           ! 7600                          8,
37075 9136                        08            .byte	8
37076                                           ! 7601                               8,
37077 9137                        08            .byte	8
37078                                           ! 7602                         8,
37079 9138                        08            .byte	8
37080                                           ! 7603                              0,
37081 9139                        00            .byte	0
37082                                           ! 7604                         8,
37083 913A                        08            .byte	8
37084                                           ! 7605                              24,
37085 913B                        18            .byte	$18
37086                                           ! 7606                                0x02,
37087 913C                        02            .byte	2
37088                                           ! 7607                        0xE0000000,
37089 913D                      0000            .word	0
37090 913F                      E000            .word	$E000
37091                                           ! 7608                               0,
37092 9141                      0000            .word	0
37093 9143                      0000            .word	0
37094                                           ! 7609                             0,
37095 9145                      0000            .word	0
37096                                           ! 7610                                1920,
37097 9147                      0780            .word	$780
37098                                           ! 7611                             0,
37099 9149                        00            .byte	0
37100                                           ! 7612                             0,
37101 914A                        00            .byte	0
37102                                           ! 7613                           8,
37103 914B                        08            .byte	8
37104                                           ! 7614                                16,
37105 914C                        10            .byte	$10
37106                                           ! 7615                             8,
37107 914D                        08            .byte	8
37108                                           ! 7616                                  8,
37109 914E                        08            .byte	8
37110                                           ! 7617                            8,
37111 914F                        08            .byte	8
37112                                           ! 7618                                 0,
37113 9150                        00            .byte	0
37114                                           ! 7619                            8,
37115 9151                        08            .byte	8
37116                                           ! 7620                                 24,
37117 9152                        18            .byte	$18
37118                                           ! 7621                          0,
37119 9153                      0000            .word	0
37120 9155                      0000            .word	0
37121                                           ! 7622 } },
37122                                           ! 7623 { 0x0193,
37123 9157                      0193            .word	$193
37124                                           ! 7624 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37125 9159                      009B            .word	$9B
37126                                           ! 7625                           0x01 | 0x02 | 0x04,
37127 915B                        07            .byte	7
37128                                           ! 7626                           0,
37129 915C                        00            .byte	0
37130                                           ! 7627                           64,
37131 915D                      0040            .word	$40
37132                                           ! 7628                    64,
37133 915F                      0040            .word	$40
37134                                           ! 7629                        0xA000,
37135 9161                      A000            .word	$A000
37136                                           ! 7630                        0x0000,
37137 9163                      0000            .word	0
37138                                           ! 7631                       0,
37139 9165                      0000            .word	0
37140 9167                      0000            .word	0
37141                                           ! 7632                             960,
37142 9169                      03C0            .word	$3C0
37143                                           ! 7633                        480,
37144 916B                      01E0            .word	$1E0
37145                                           ! 7634                        854,
37146 916D                      0356            .word	$356
37147                                           ! 7635                      8,
37148 916F                        08            .byte	8
37149                                           ! 7636                      16,
37150 9170                        10            .byte	$10
37151                                           ! 7637                           1,
37152 9171                        01            .byte	1
37153                                           ! 7638                         16,
37154 9172                        10            .byte	$10
37155                                           ! 7639                          13,
37156 9173                        0D            .byte	$D
37157                                           ! 7640                        0x06,
37158 9174                        06            .byte	6
37159                                           ! 7641                     0,
37160 9175                        00            .byte	0
37161                                           ! 7642                               19,
37162 9176                        13            .byte	$13
37163                                           ! 7643                          0,
37164 9177                        00            .byte	0
37165                                           ! 7644                        5,
37166 9178                        05            .byte	5
37167                                           ! 7645                             11,
37168 9179                        0B            .byte	$B
37169                                           ! 7646                          6,
37170 917A                        06            .byte	6
37171                                           ! 7647                               5,
37172 917B                        05            .byte	5
37173                                           ! 7648                         5,
37174 917C                        05            .byte	5
37175                                           ! 7649                              0,
37176 917D                        00            .byte	0
37177                                           ! 7650                         0,
37178 917E                        00            .byte	0
37179                                           ! 7651                              0,
37180 917F                        00            .byte	0
37181                                           ! 7652                                0,
37182 9180                        00            .byte	0
37183                                           ! 7653                        0xE0000000,
37184 9181                      0000            .word	0
37185 9183                      E000            .word	$E000
37186                                           ! 7654                               0,
37187 9185                      0000            .word	0
37188 9187                      0000            .word	0
37189                                           ! 7655                             0,
37190 9189                      0000            .word	0
37191                                           ! 7656                                960,
37192 918B                      03C0            .word	$3C0
37193                                           ! 7657                             0,
37194 918D                        00            .byte	0
37195                                           ! 7658                             0,
37196 918E                        00            .byte	0
37197                                           ! 7659                           5,
37198 918F                        05            .byte	5
37199                                           ! 7660                                11,
37200 9190                        0B            .byte	$B
37201                                           ! 7661                
37202                                           ! 7661              6,
37203 9191                        06            .byte	6
37204                                           ! 7662                                  5,
37205 9192                        05            .byte	5
37206                                           ! 7663                            5,
37207 9193                        05            .byte	5
37208                                           ! 7664                                 0,
37209 9194                        00            .byte	0
37210                                           ! 7665                            0,
37211 9195                        00            .byte	0
37212                                           ! 7666                                 0,
37213 9196                        00            .byte	0
37214                                           ! 7667                          0,
37215 9197                      0000            .word	0
37216 9199                      0000            .word	0
37217                                           ! 7668 } },
37218                                           ! 7669 { 0x0194,
37219 919B                      0194            .word	$194
37220                                           ! 7670 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37221 919D                      009B            .word	$9B
37222                                           ! 7671                           0x01 | 0x02 | 0x04,
37223 919F                        07            .byte	7
37224                                           ! 7672                           0,
37225 91A0                        00            .byte	0
37226                                           ! 7673                           64,
37227 91A1                      0040            .word	$40
37228                                           ! 7674                    64,
37229 91A3                      0040            .word	$40
37230                                           ! 7675                        0xA000,
37231 91A5                      A000            .word	$A000
37232                                           ! 7676                        0x0000,
37233 91A7                      0000            .word	0
37234                                           ! 7677                       0,
37235 91A9                      0000            .word	0
37236 91AB                      0000            .word	0
37237                                           ! 7678                             1440,
37238 91AD                      05A0            .word	$5A0
37239                                           ! 7679                        480,
37240 91AF                      01E0            .word	$1E0
37241                                           ! 7680                        854,
37242 91B1                      0356            .word	$356
37243                                           ! 7681                      8,
37244 91B3                        08            .byte	8
37245                                           ! 7682                      16,
37246 91B4                        10            .byte	$10
37247                                           ! 7683                           1,
37248 91B5                        01            .byte	1
37249                                           ! 7684                         24,
37250 91B6                        18            .byte	$18
37251                                           ! 7685                          19,
37252 91B7                        13            .byte	$13
37253                                           ! 7686                        0x06,
37254 91B8                        06            .byte	6
37255                                           ! 7687                     0,
37256 91B9                        00            .byte	0
37257                                           ! 7688                               12,
37258 91BA                        0C            .byte	$C
37259                                           ! 7689                          0,
37260 91BB                        00            .byte	0
37261                                           ! 7690                        8,
37262 91BC                        08            .byte	8
37263                                           ! 7691                             16,
37264 91BD                        10            .byte	$10
37265                                           ! 7692                          8,
37266 91BE                        08            .byte	8
37267                                           ! 7693                               8,
37268 91BF                        08            .byte	8
37269                                           ! 7694                         8,
37270 91C0                        08            .byte	8
37271                                           ! 7695                              0,
37272 91C1                        00            .byte	0
37273                                           ! 7696                         0,
37274 91C2                        00            .byte	0
37275                                           ! 7697                              0,
37276 91C3                        00            .byte	0
37277                                           ! 7698                                0,
37278 91C4                        00            .byte	0
37279                                           ! 7699                        0xE0000000,
37280 91C5                      0000            .word	0
37281 91C7                      E000            .word	$E000
37282                                           ! 7700                               0,
37283 91C9                      0000            .word	0
37284 91CB                      0000            .word	0
37285                                           ! 7701                             0,
37286 91CD                      0000            .word	0
37287                                           ! 7702                                1440,
37288 91CF                      05A0            .word	$5A0
37289                                           ! 7703                             0,
37290 91D1                        00            .byte	0
37291                                           ! 7704                             0,
37292 91D2                        00            .byte	0
37293                                           ! 7705                           8,
37294 91D3                        08            .byte	8
37295                                           ! 7706                                16,
37296 91D4                        10            .byte	$10
37297                                           ! 7707                             8,
37298 91D5                        08            .byte	8
37299                                           ! 7708                                  8,
37300 91D6                        08            .byte	8
37301                                           ! 7709                            8,
37302 91D7                        08            .byte	8
37303                                           ! 7710                                 0,
37304 91D8                        00            .byte	0
37305                                           ! 7711                            0,
37306 91D9                        00            .byte	0
37307                                           ! 7712                                 0,
37308 91DA                        00            .byte	0
37309                                           ! 7713                          0,
37310 91DB                      0000            .word	0
37311 91DD                      0000            .word	0
37312                                           ! 7714 } },
37313                                           ! 7715 { 0x0195,
37314 91DF                      0195            .word	$195
37315                                           ! 7716 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37316 91E1                      009B            .word	$9B
37317                                           ! 7717                           0x01 | 0x02 | 0x04,
37318 91E3                        07            .byte	7
37319                                           ! 7718                           0,
37320 91E4                        00            .byte	0
37321                                           ! 7719                           64,
37322 91E5                      0040            .word	$40
37323                                           ! 7720                    64,
37324 91E7                      0040            .word	$40
37325                                           ! 7721                        0xA000,
37326 91E9                      A000            .word	$A000
37327                                           ! 7722                        0x0000,
37328 91EB                      0000            .word	0
37329                                           ! 7723                       0,
37330 91ED                      0000            .word	0
37331 91EF                      0000            .word	0
37332                                           ! 7724                             1920,
37333 91F1                      0780            .word	$780
37334                                           ! 7725                        480,
37335 91F3                      01E0            .word	$1E0
37336                                           ! 7726                        854,
37337 91F5                      0356            .word	$356
37338                                           ! 7727                      8,
37339 91F7                        08            .byte	8
37340                                           ! 7728                      16,
37341 91F8                        10            .byte	$10
37342                                           ! 7729                           1,
37343 91F9                        01            .byte	1
37344                                           ! 7730                      
37345                                           ! 7730    32,
37346 91FA                        20            .byte	$20
37347                                           ! 7731                          26,
37348 91FB                        1A            .byte	$1A
37349                                           ! 7732                        0x06,
37350 91FC                        06            .byte	6
37351                                           ! 7733                     0,
37352 91FD                        00            .byte	0
37353                                           ! 7734                               9,
37354 91FE                        09            .byte	9
37355                                           ! 7735                          0,
37356 91FF                        00            .byte	0
37357                                           ! 7736                        8,
37358 9200                        08            .byte	8
37359                                           ! 7737                             16,
37360 9201                        10            .byte	$10
37361                                           ! 7738                          8,
37362 9202                        08            .byte	8
37363                                           ! 7739                               8,
37364 9203                        08            .byte	8
37365                                           ! 7740                         8,
37366 9204                        08            .byte	8
37367                                           ! 7741                              0,
37368 9205                        00            .byte	0
37369                                           ! 7742                         8,
37370 9206                        08            .byte	8
37371                                           ! 7743                              24,
37372 9207                        18            .byte	$18
37373                                           ! 7744                                0x02,
37374 9208                        02            .byte	2
37375                                           ! 7745                        0xE0000000,
37376 9209                      0000            .word	0
37377 920B                      E000            .word	$E000
37378                                           ! 7746                               0,
37379 920D                      0000            .word	0
37380 920F                      0000            .word	0
37381                                           ! 7747                             0,
37382 9211                      0000            .word	0
37383                                           ! 7748                                1920,
37384 9213                      0780            .word	$780
37385                                           ! 7749                             0,
37386 9215                        00            .byte	0
37387                                           ! 7750                             0,
37388 9216                        00            .byte	0
37389                                           ! 7751                           8,
37390 9217                        08            .byte	8
37391                                           ! 7752                                16,
37392 9218                        10            .byte	$10
37393                                           ! 7753                             8,
37394 9219                        08            .byte	8
37395                                           ! 7754                                  8,
37396 921A                        08            .byte	8
37397                                           ! 7755                            8,
37398 921B                        08            .byte	8
37399                                           ! 7756                                 0,
37400 921C                        00            .byte	0
37401                                           ! 7757                            8,
37402 921D                        08            .byte	8
37403                                           ! 7758                                 24,
37404 921E                        18            .byte	$18
37405                                           ! 7759                          0,
37406 921F                      0000            .word	0
37407 9221                      0000            .word	0
37408                                           ! 7760 } },
37409                                           ! 7761 { 0x0196,
37410 9223                      0196            .word	$196
37411                                           ! 7762 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37412 9225                      009B            .word	$9B
37413                                           ! 7763                           0x01 | 0x02 | 0x04,
37414 9227                        07            .byte	7
37415                                           ! 7764                           0,
37416 9228                        00            .byte	0
37417                                           ! 7765                           64,
37418 9229                      0040            .word	$40
37419                                           ! 7766                    64,
37420 922B                      0040            .word	$40
37421                                           ! 7767                        0xA000,
37422 922D                      A000            .word	$A000
37423                                           ! 7768                        0x0000,
37424 922F                      0000            .word	0
37425                                           ! 7769                       0,
37426 9231                      0000            .word	0
37427 9233                      0000            .word	0
37428                                           ! 7770                             1080,
37429 9235                      0438            .word	$438
37430                                           ! 7771                        540,
37431 9237                      021C            .word	$21C
37432                                           ! 7772                        960,
37433 9239                      03C0            .word	$3C0
37434                                           ! 7773                      8,
37435 923B                        08            .byte	8
37436                                           ! 7774                      16,
37437 923C                        10            .byte	$10
37438                                           ! 7775                           1,
37439 923D                        01            .byte	1
37440                                           ! 7776                         16,
37441 923E                        10            .byte	$10
37442                                           ! 7777                          16,
37443 923F                        10            .byte	$10
37444                                           ! 7778                        0x06,
37445 9240                        06            .byte	6
37446                                           ! 7779                     0,
37447 9241                        00            .byte	0
37448                                           ! 7780                               15,
37449 9242                        0F            .byte	$F
37450                                           ! 7781                          0,
37451 9243                        00            .byte	0
37452                                           ! 7782                        5,
37453 9244                        05            .byte	5
37454                                           ! 7783                             11,
37455 9245                        0B            .byte	$B
37456                                           ! 7784                          6,
37457 9246                        06            .byte	6
37458                                           ! 7785                               5,
37459 9247                        05            .byte	5
37460                                           ! 7786                         5,
37461 9248                        05            .byte	5
37462                                           ! 7787                              0,
37463 9249                        00            .byte	0
37464                                           ! 7788                         0,
37465 924A                        00            .byte	0
37466                                           ! 7789                              0,
37467 924B                        00            .byte	0
37468                                           ! 7790                                0,
37469 924C                        00            .byte	0
37470                                           ! 7791                        0xE0000000,
37471 924D                      0000            .word	0
37472 924F                      E000            .word	$E000
37473                                           ! 7792                               0,
37474 9251                      0000            .word	0
37475 9253                      0000            .word	0
37476                                           ! 7793                             0,
37477 9255                      0000            .word	0
37478                                           ! 7794                                1080,
37479 9257                      0438            .word	$438
37480                                           ! 7795                             0,
37481 9259                        00            .byte	0
37482                                           ! 7796                             0,
37483 925A                        00            .byte	0
37484                                           ! 7797                           5,
37485 925B                        05            .byte	5
37486                                           ! 7798                        
37487                                           ! 7798         11,
37488 925C                        0B            .byte	$B
37489                                           ! 7799                             6,
37490 925D                        06            .byte	6
37491                                           ! 7800                                  5,
37492 925E                        05            .byte	5
37493                                           ! 7801                            5,
37494 925F                        05            .byte	5
37495                                           ! 7802                                 0,
37496 9260                        00            .byte	0
37497                                           ! 7803                            0,
37498 9261                        00            .byte	0
37499                                           ! 7804                                 0,
37500 9262                        00            .byte	0
37501                                           ! 7805                          0,
37502 9263                      0000            .word	0
37503 9265                      0000            .word	0
37504                                           ! 7806 } },
37505                                           ! 7807 { 0x0197,
37506 9267                      0197            .word	$197
37507                                           ! 7808 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37508 9269                      009B            .word	$9B
37509                                           ! 7809                           0x01 | 0x02 | 0x04,
37510 926B                        07            .byte	7
37511                                           ! 7810                           0,
37512 926C                        00            .byte	0
37513                                           ! 7811                           64,
37514 926D                      0040            .word	$40
37515                                           ! 7812                    64,
37516 926F                      0040            .word	$40
37517                                           ! 7813                        0xA000,
37518 9271                      A000            .word	$A000
37519                                           ! 7814                        0x0000,
37520 9273                      0000            .word	0
37521                                           ! 7815                       0,
37522 9275                      0000            .word	0
37523 9277                      0000            .word	0
37524                                           ! 7816                             1620,
37525 9279                      0654            .word	$654
37526                                           ! 7817                        540,
37527 927B                      021C            .word	$21C
37528                                           ! 7818                        960,
37529 927D                      03C0            .word	$3C0
37530                                           ! 7819                      8,
37531 927F                        08            .byte	8
37532                                           ! 7820                      16,
37533 9280                        10            .byte	$10
37534                                           ! 7821                           1,
37535 9281                        01            .byte	1
37536                                           ! 7822                         24,
37537 9282                        18            .byte	$18
37538                                           ! 7823                          24,
37539 9283                        18            .byte	$18
37540                                           ! 7824                        0x06,
37541 9284                        06            .byte	6
37542                                           ! 7825                     0,
37543 9285                        00            .byte	0
37544                                           ! 7826                               9,
37545 9286                        09            .byte	9
37546                                           ! 7827                          0,
37547 9287                        00            .byte	0
37548                                           ! 7828                        8,
37549 9288                        08            .byte	8
37550                                           ! 7829                             16,
37551 9289                        10            .byte	$10
37552                                           ! 7830                          8,
37553 928A                        08            .byte	8
37554                                           ! 7831                               8,
37555 928B                        08            .byte	8
37556                                           ! 7832                         8,
37557 928C                        08            .byte	8
37558                                           ! 7833                              0,
37559 928D                        00            .byte	0
37560                                           ! 7834                         0,
37561 928E                        00            .byte	0
37562                                           ! 7835                              0,
37563 928F                        00            .byte	0
37564                                           ! 7836                                0,
37565 9290                        00            .byte	0
37566                                           ! 7837                        0xE0000000,
37567 9291                      0000            .word	0
37568 9293                      E000            .word	$E000
37569                                           ! 7838                               0,
37570 9295                      0000            .word	0
37571 9297                      0000            .word	0
37572                                           ! 7839                             0,
37573 9299                      0000            .word	0
37574                                           ! 7840                                1620,
37575 929B                      0654            .word	$654
37576                                           ! 7841                             0,
37577 929D                        00            .byte	0
37578                                           ! 7842                             0,
37579 929E                        00            .byte	0
37580                                           ! 7843                           8,
37581 929F                        08            .byte	8
37582                                           ! 7844                                16,
37583 92A0                        10            .byte	$10
37584                                           ! 7845                             8,
37585 92A1                        08            .byte	8
37586                                           ! 7846                                  8,
37587 92A2                        08            .byte	8
37588                                           ! 7847                            8,
37589 92A3                        08            .byte	8
37590                                           ! 7848                                 0,
37591 92A4                        00            .byte	0
37592                                           ! 7849                            0,
37593 92A5                        00            .byte	0
37594                                           ! 7850                                 0,
37595 92A6                        00            .byte	0
37596                                           ! 7851                          0,
37597 92A7                      0000            .word	0
37598 92A9                      0000            .word	0
37599                                           ! 7852 } },
37600                                           ! 7853 { 0x0198,
37601 92AB                      0198            .word	$198
37602                                           ! 7854 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37603 92AD                      009B            .word	$9B
37604                                           ! 7855                           0x01 | 0x02 | 0x04,
37605 92AF                        07            .byte	7
37606                                           ! 7856                           0,
37607 92B0                        00            .byte	0
37608                                           ! 7857                           64,
37609 92B1                      0040            .word	$40
37610                                           ! 7858                    64,
37611 92B3                      0040            .word	$40
37612                                           ! 7859                        0xA000,
37613 92B5                      A000            .word	$A000
37614                                           ! 7860                        0x0000,
37615 92B7                      0000            .word	0
37616                                           ! 7861                       0,
37617 92B9                      0000            .word	0
37618 92BB                      0000            .word	0
37619                                           ! 7862                             2160,
37620 92BD                      0870            .word	$870
37621                                           ! 7863                        540,
37622 92BF                      021C            .word	$21C
37623                                           ! 7864                        960,
37624 92C1                      03C0            .word	$3C0
37625                                           ! 7865                      8,
37626 92C3                        08            .byte	8
37627                                           ! 7866                      16,
37628 92C4                        10            .byte	$10
37629                                           ! 7867                         
37630                                           ! 7867   1,
37631 92C5                        01            .byte	1
37632                                           ! 7868                         32,
37633 92C6                        20            .byte	$20
37634                                           ! 7869                          32,
37635 92C7                        20            .byte	$20
37636                                           ! 7870                        0x06,
37637 92C8                        06            .byte	6
37638                                           ! 7871                     0,
37639 92C9                        00            .byte	0
37640                                           ! 7872                               7,
37641 92CA                        07            .byte	7
37642                                           ! 7873                          0,
37643 92CB                        00            .byte	0
37644                                           ! 7874                        8,
37645 92CC                        08            .byte	8
37646                                           ! 7875                             16,
37647 92CD                        10            .byte	$10
37648                                           ! 7876                          8,
37649 92CE                        08            .byte	8
37650                                           ! 7877                               8,
37651 92CF                        08            .byte	8
37652                                           ! 7878                         8,
37653 92D0                        08            .byte	8
37654                                           ! 7879                              0,
37655 92D1                        00            .byte	0
37656                                           ! 7880                         8,
37657 92D2                        08            .byte	8
37658                                           ! 7881                              24,
37659 92D3                        18            .byte	$18
37660                                           ! 7882                                0x02,
37661 92D4                        02            .byte	2
37662                                           ! 7883                        0xE0000000,
37663 92D5                      0000            .word	0
37664 92D7                      E000            .word	$E000
37665                                           ! 7884                               0,
37666 92D9                      0000            .word	0
37667 92DB                      0000            .word	0
37668                                           ! 7885                             0,
37669 92DD                      0000            .word	0
37670                                           ! 7886                                2160,
37671 92DF                      0870            .word	$870
37672                                           ! 7887                             0,
37673 92E1                        00            .byte	0
37674                                           ! 7888                             0,
37675 92E2                        00            .byte	0
37676                                           ! 7889                           8,
37677 92E3                        08            .byte	8
37678                                           ! 7890                                16,
37679 92E4                        10            .byte	$10
37680                                           ! 7891                             8,
37681 92E5                        08            .byte	8
37682                                           ! 7892                                  8,
37683 92E6                        08            .byte	8
37684                                           ! 7893                            8,
37685 92E7                        08            .byte	8
37686                                           ! 7894                                 0,
37687 92E8                        00            .byte	0
37688                                           ! 7895                            8,
37689 92E9                        08            .byte	8
37690                                           ! 7896                                 24,
37691 92EA                        18            .byte	$18
37692                                           ! 7897                          0,
37693 92EB                      0000            .word	0
37694 92ED                      0000            .word	0
37695                                           ! 7898 } },
37696                                           ! 7899 { 0x0199,
37697 92EF                      0199            .word	$199
37698                                           ! 7900 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37699 92F1                      009B            .word	$9B
37700                                           ! 7901                           0x01 | 0x02 | 0x04,
37701 92F3                        07            .byte	7
37702                                           ! 7902                           0,
37703 92F4                        00            .byte	0
37704                                           ! 7903                           64,
37705 92F5                      0040            .word	$40
37706                                           ! 7904                    64,
37707 92F7                      0040            .word	$40
37708                                           ! 7905                        0xA000,
37709 92F9                      A000            .word	$A000
37710                                           ! 7906                        0x0000,
37711 92FB                      0000            .word	0
37712                                           ! 7907                       0,
37713 92FD                      0000            .word	0
37714 92FF                      0000            .word	0
37715                                           ! 7908                             1440,
37716 9301                      05A0            .word	$5A0
37717                                           ! 7909                        720,
37718 9303                      02D0            .word	$2D0
37719                                           ! 7910                        1280,
37720 9305                      0500            .word	$500
37721                                           ! 7911                      8,
37722 9307                        08            .byte	8
37723                                           ! 7912                      16,
37724 9308                        10            .byte	$10
37725                                           ! 7913                           1,
37726 9309                        01            .byte	1
37727                                           ! 7914                         16,
37728 930A                        10            .byte	$10
37729                                           ! 7915                          29,
37730 930B                        1D            .byte	$1D
37731                                           ! 7916                        0x06,
37732 930C                        06            .byte	6
37733                                           ! 7917                     0,
37734 930D                        00            .byte	0
37735                                           ! 7918                               8,
37736 930E                        08            .byte	8
37737                                           ! 7919                          0,
37738 930F                        00            .byte	0
37739                                           ! 7920                        5,
37740 9310                        05            .byte	5
37741                                           ! 7921                             11,
37742 9311                        0B            .byte	$B
37743                                           ! 7922                          6,
37744 9312                        06            .byte	6
37745                                           ! 7923                               5,
37746 9313                        05            .byte	5
37747                                           ! 7924                         5,
37748 9314                        05            .byte	5
37749                                           ! 7925                              0,
37750 9315                        00            .byte	0
37751                                           ! 7926                         0,
37752 9316                        00            .byte	0
37753                                           ! 7927                              0,
37754 9317                        00            .byte	0
37755                                           ! 7928                                0,
37756 9318                        00            .byte	0
37757                                           ! 7929                        0xE0000000,
37758 9319                      0000            .word	0
37759 931B                      E000            .word	$E000
37760                                           ! 7930                               0,
37761 931D                      0000            .word	0
37762 931F                      0000            .word	0
37763                                           ! 7931                             0,
37764 9321                      0000            .word	0
37765                                           ! 7932                                1440,
37766 9323                      05A0            .word	$5A0
37767                                           ! 7933                             0,
37768 9325                        00            .byte	0
37769                                           ! 7934                             0,
37770 9326                        00            .byte	0
37771                                           ! 7935                           
37772                                           ! 7935 5,
37773 9327                        05            .byte	5
37774                                           ! 7936                                11,
37775 9328                        0B            .byte	$B
37776                                           ! 7937                             6,
37777 9329                        06            .byte	6
37778                                           ! 7938                                  5,
37779 932A                        05            .byte	5
37780                                           ! 7939                            5,
37781 932B                        05            .byte	5
37782                                           ! 7940                                 0,
37783 932C                        00            .byte	0
37784                                           ! 7941                            0,
37785 932D                        00            .byte	0
37786                                           ! 7942                                 0,
37787 932E                        00            .byte	0
37788                                           ! 7943                          0,
37789 932F                      0000            .word	0
37790 9331                      0000            .word	0
37791                                           ! 7944 } },
37792                                           ! 7945 { 0x019a,
37793 9333                      019A            .word	$19A
37794                                           ! 7946 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37795 9335                      009B            .word	$9B
37796                                           ! 7947                           0x01 | 0x02 | 0x04,
37797 9337                        07            .byte	7
37798                                           ! 7948                           0,
37799 9338                        00            .byte	0
37800                                           ! 7949                           64,
37801 9339                      0040            .word	$40
37802                                           ! 7950                    64,
37803 933B                      0040            .word	$40
37804                                           ! 7951                        0xA000,
37805 933D                      A000            .word	$A000
37806                                           ! 7952                        0x0000,
37807 933F                      0000            .word	0
37808                                           ! 7953                       0,
37809 9341                      0000            .word	0
37810 9343                      0000            .word	0
37811                                           ! 7954                             2160,
37812 9345                      0870            .word	$870
37813                                           ! 7955                        720,
37814 9347                      02D0            .word	$2D0
37815                                           ! 7956                        1280,
37816 9349                      0500            .word	$500
37817                                           ! 7957                      8,
37818 934B                        08            .byte	8
37819                                           ! 7958                      16,
37820 934C                        10            .byte	$10
37821                                           ! 7959                           1,
37822 934D                        01            .byte	1
37823                                           ! 7960                         24,
37824 934E                        18            .byte	$18
37825                                           ! 7961                          43,
37826 934F                        2B            .byte	$2B
37827                                           ! 7962                        0x06,
37828 9350                        06            .byte	6
37829                                           ! 7963                     0,
37830 9351                        00            .byte	0
37831                                           ! 7964                               5,
37832 9352                        05            .byte	5
37833                                           ! 7965                          0,
37834 9353                        00            .byte	0
37835                                           ! 7966                        8,
37836 9354                        08            .byte	8
37837                                           ! 7967                             16,
37838 9355                        10            .byte	$10
37839                                           ! 7968                          8,
37840 9356                        08            .byte	8
37841                                           ! 7969                               8,
37842 9357                        08            .byte	8
37843                                           ! 7970                         8,
37844 9358                        08            .byte	8
37845                                           ! 7971                              0,
37846 9359                        00            .byte	0
37847                                           ! 7972                         0,
37848 935A                        00            .byte	0
37849                                           ! 7973                              0,
37850 935B                        00            .byte	0
37851                                           ! 7974                                0,
37852 935C                        00            .byte	0
37853                                           ! 7975                        0xE0000000,
37854 935D                      0000            .word	0
37855 935F                      E000            .word	$E000
37856                                           ! 7976                               0,
37857 9361                      0000            .word	0
37858 9363                      0000            .word	0
37859                                           ! 7977                             0,
37860 9365                      0000            .word	0
37861                                           ! 7978                                2160,
37862 9367                      0870            .word	$870
37863                                           ! 7979                             0,
37864 9369                        00            .byte	0
37865                                           ! 7980                             0,
37866 936A                        00            .byte	0
37867                                           ! 7981                           8,
37868 936B                        08            .byte	8
37869                                           ! 7982                                16,
37870 936C                        10            .byte	$10
37871                                           ! 7983                             8,
37872 936D                        08            .byte	8
37873                                           ! 7984                                  8,
37874 936E                        08            .byte	8
37875                                           ! 7985                            8,
37876 936F                        08            .byte	8
37877                                           ! 7986                                 0,
37878 9370                        00            .byte	0
37879                                           ! 7987                            0,
37880 9371                        00            .byte	0
37881                                           ! 7988                                 0,
37882 9372                        00            .byte	0
37883                                           ! 7989                          0,
37884 9373                      0000            .word	0
37885 9375                      0000            .word	0
37886                                           ! 7990 } },
37887                                           ! 7991 { 0x019b,
37888 9377                      019B            .word	$19B
37889                                           ! 7992 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37890 9379                      009B            .word	$9B
37891                                           ! 7993                           0x01 | 0x02 | 0x04,
37892 937B                        07            .byte	7
37893                                           ! 7994                           0,
37894 937C                        00            .byte	0
37895                                           ! 7995                           64,
37896 937D                      0040            .word	$40
37897                                           ! 7996                    64,
37898 937F                      0040            .word	$40
37899                                           ! 7997                        0xA000,
37900 9381                      A000            .word	$A000
37901                                           ! 7998                        0x0000,
37902 9383                      0000            .word	0
37903                                           ! 7999                       0,
37904 9385                      0000            .word	0
37905 9387                      0000            .word	0
37906                                           ! 8000                             2880,
37907 9389                      0B40            .word	$B40
37908                                           ! 8001                        720,
37909 938B                      02D0            .word	$2D0
37910                                           ! 8002                        1280,
37911 938D                      0500            .word	$500
37912                                           ! 8003                      8,
37913 938F                        08            .byte	8
37914                                           ! 8004                      
37915                                           ! 8004 16,
37916 9390                        10            .byte	$10
37917                                           ! 8005                           1,
37918 9391                        01            .byte	1
37919                                           ! 8006                         32,
37920 9392                        20            .byte	$20
37921                                           ! 8007                          57,
37922 9393                        39            .byte	$39
37923                                           ! 8008                        0x06,
37924 9394                        06            .byte	6
37925                                           ! 8009                     0,
37926 9395                        00            .byte	0
37927                                           ! 8010                               3,
37928 9396                        03            .byte	3
37929                                           ! 8011                          0,
37930 9397                        00            .byte	0
37931                                           ! 8012                        8,
37932 9398                        08            .byte	8
37933                                           ! 8013                             16,
37934 9399                        10            .byte	$10
37935                                           ! 8014                          8,
37936 939A                        08            .byte	8
37937                                           ! 8015                               8,
37938 939B                        08            .byte	8
37939                                           ! 8016                         8,
37940 939C                        08            .byte	8
37941                                           ! 8017                              0,
37942 939D                        00            .byte	0
37943                                           ! 8018                         8,
37944 939E                        08            .byte	8
37945                                           ! 8019                              24,
37946 939F                        18            .byte	$18
37947                                           ! 8020                                0x02,
37948 93A0                        02            .byte	2
37949                                           ! 8021                        0xE0000000,
37950 93A1                      0000            .word	0
37951 93A3                      E000            .word	$E000
37952                                           ! 8022                               0,
37953 93A5                      0000            .word	0
37954 93A7                      0000            .word	0
37955                                           ! 8023                             0,
37956 93A9                      0000            .word	0
37957                                           ! 8024                                2880,
37958 93AB                      0B40            .word	$B40
37959                                           ! 8025                             0,
37960 93AD                        00            .byte	0
37961                                           ! 8026                             0,
37962 93AE                        00            .byte	0
37963                                           ! 8027                           8,
37964 93AF                        08            .byte	8
37965                                           ! 8028                                16,
37966 93B0                        10            .byte	$10
37967                                           ! 8029                             8,
37968 93B1                        08            .byte	8
37969                                           ! 8030                                  8,
37970 93B2                        08            .byte	8
37971                                           ! 8031                            8,
37972 93B3                        08            .byte	8
37973                                           ! 8032                                 0,
37974 93B4                        00            .byte	0
37975                                           ! 8033                            8,
37976 93B5                        08            .byte	8
37977                                           ! 8034                                 24,
37978 93B6                        18            .byte	$18
37979                                           ! 8035                          0,
37980 93B7                      0000            .word	0
37981 93B9                      0000            .word	0
37982                                           ! 8036 } },
37983                                           ! 8037 { 0x019c,
37984 93BB                      019C            .word	$19C
37985                                           ! 8038 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37986 93BD                      009B            .word	$9B
37987                                           ! 8039                           0x01 | 0x02 | 0x04,
37988 93BF                        07            .byte	7
37989                                           ! 8040                           0,
37990 93C0                        00            .byte	0
37991                                           ! 8041                           64,
37992 93C1                      0040            .word	$40
37993                                           ! 8042                    64,
37994 93C3                      0040            .word	$40
37995                                           ! 8043                        0xA000,
37996 93C5                      A000            .word	$A000
37997                                           ! 8044                        0x0000,
37998 93C7                      0000            .word	0
37999                                           ! 8045                       0,
38000 93C9                      0000            .word	0
38001 93CB                      0000            .word	0
38002                                           ! 8046                             1600,
38003 93CD                      0640            .word	$640
38004                                           ! 8047                        800,
38005 93CF                      0320            .word	$320
38006                                           ! 8048                        1280,
38007 93D1                      0500            .word	$500
38008                                           ! 8049                      8,
38009 93D3                        08            .byte	8
38010                                           ! 8050                      16,
38011 93D4                        10            .byte	$10
38012                                           ! 8051                           1,
38013 93D5                        01            .byte	1
38014                                           ! 8052                         16,
38015 93D6                        10            .byte	$10
38016                                           ! 8053                          32,
38017 93D7                        20            .byte	$20
38018                                           ! 8054                        0x06,
38019 93D8                        06            .byte	6
38020                                           ! 8055                     0,
38021 93D9                        00            .byte	0
38022                                           ! 8056                               7,
38023 93DA                        07            .byte	7
38024                                           ! 8057                          0,
38025 93DB                        00            .byte	0
38026                                           ! 8058                        5,
38027 93DC                        05            .byte	5
38028                                           ! 8059                             11,
38029 93DD                        0B            .byte	$B
38030                                           ! 8060                          6,
38031 93DE                        06            .byte	6
38032                                           ! 8061                               5,
38033 93DF                        05            .byte	5
38034                                           ! 8062                         5,
38035 93E0                        05            .byte	5
38036                                           ! 8063                              0,
38037 93E1                        00            .byte	0
38038                                           ! 8064                         0,
38039 93E2                        00            .byte	0
38040                                           ! 8065                              0,
38041 93E3                        00            .byte	0
38042                                           ! 8066                                0,
38043 93E4                        00            .byte	0
38044                                           ! 8067                        0xE0000000,
38045 93E5                      0000            .word	0
38046 93E7                      E000            .word	$E000
38047                                           ! 8068                               0,
38048 93E9                      0000            .word	0
38049 93EB                      0000            .word	0
38050                                           ! 8069                             0,
38051 93ED                      0000            .word	0
38052                                           ! 8070                                1600,
38053 93EF                      0640            .word	$640
38054                                           ! 8071                             0,
38055 93F1                        00            .byte	0
38056                                           ! 8072                             0
38057                                           ! 8072 ,
38058 93F2                        00            .byte	0
38059                                           ! 8073                           5,
38060 93F3                        05            .byte	5
38061                                           ! 8074                                11,
38062 93F4                        0B            .byte	$B
38063                                           ! 8075                             6,
38064 93F5                        06            .byte	6
38065                                           ! 8076                                  5,
38066 93F6                        05            .byte	5
38067                                           ! 8077                            5,
38068 93F7                        05            .byte	5
38069                                           ! 8078                                 0,
38070 93F8                        00            .byte	0
38071                                           ! 8079                            0,
38072 93F9                        00            .byte	0
38073                                           ! 8080                                 0,
38074 93FA                        00            .byte	0
38075                                           ! 8081                          0,
38076 93FB                      0000            .word	0
38077 93FD                      0000            .word	0
38078                                           ! 8082 } },
38079                                           ! 8083 { 0x019d,
38080 93FF                      019D            .word	$19D
38081                                           ! 8084 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38082 9401                      009B            .word	$9B
38083                                           ! 8085                           0x01 | 0x02 | 0x04,
38084 9403                        07            .byte	7
38085                                           ! 8086                           0,
38086 9404                        00            .byte	0
38087                                           ! 8087                           64,
38088 9405                      0040            .word	$40
38089                                           ! 8088                    64,
38090 9407                      0040            .word	$40
38091                                           ! 8089                        0xA000,
38092 9409                      A000            .word	$A000
38093                                           ! 8090                        0x0000,
38094 940B                      0000            .word	0
38095                                           ! 8091                       0,
38096 940D                      0000            .word	0
38097 940F                      0000            .word	0
38098                                           ! 8092                             2400,
38099 9411                      0960            .word	$960
38100                                           ! 8093                        800,
38101 9413                      0320            .word	$320
38102                                           ! 8094                        1280,
38103 9415                      0500            .word	$500
38104                                           ! 8095                      8,
38105 9417                        08            .byte	8
38106                                           ! 8096                      16,
38107 9418                        10            .byte	$10
38108                                           ! 8097                           1,
38109 9419                        01            .byte	1
38110                                           ! 8098                         24,
38111 941A                        18            .byte	$18
38112                                           ! 8099                          47,
38113 941B                        2F            .byte	$2F
38114                                           ! 8100                        0x06,
38115 941C                        06            .byte	6
38116                                           ! 8101                     0,
38117 941D                        00            .byte	0
38118                                           ! 8102                               4,
38119 941E                        04            .byte	4
38120                                           ! 8103                          0,
38121 941F                        00            .byte	0
38122                                           ! 8104                        8,
38123 9420                        08            .byte	8
38124                                           ! 8105                             16,
38125 9421                        10            .byte	$10
38126                                           ! 8106                          8,
38127 9422                        08            .byte	8
38128                                           ! 8107                               8,
38129 9423                        08            .byte	8
38130                                           ! 8108                         8,
38131 9424                        08            .byte	8
38132                                           ! 8109                              0,
38133 9425                        00            .byte	0
38134                                           ! 8110                         0,
38135 9426                        00            .byte	0
38136                                           ! 8111                              0,
38137 9427                        00            .byte	0
38138                                           ! 8112                                0,
38139 9428                        00            .byte	0
38140                                           ! 8113                        0xE0000000,
38141 9429                      0000            .word	0
38142 942B                      E000            .word	$E000
38143                                           ! 8114                               0,
38144 942D                      0000            .word	0
38145 942F                      0000            .word	0
38146                                           ! 8115                             0,
38147 9431                      0000            .word	0
38148                                           ! 8116                                2400,
38149 9433                      0960            .word	$960
38150                                           ! 8117                             0,
38151 9435                        00            .byte	0
38152                                           ! 8118                             0,
38153 9436                        00            .byte	0
38154                                           ! 8119                           8,
38155 9437                        08            .byte	8
38156                                           ! 8120                                16,
38157 9438                        10            .byte	$10
38158                                           ! 8121                             8,
38159 9439                        08            .byte	8
38160                                           ! 8122                                  8,
38161 943A                        08            .byte	8
38162                                           ! 8123                            8,
38163 943B                        08            .byte	8
38164                                           ! 8124                                 0,
38165 943C                        00            .byte	0
38166                                           ! 8125                            0,
38167 943D                        00            .byte	0
38168                                           ! 8126                                 0,
38169 943E                        00            .byte	0
38170                                           ! 8127                          0,
38171 943F                      0000            .word	0
38172 9441                      0000            .word	0
38173                                           ! 8128 } },
38174                                           ! 8129 { 0x019e,
38175 9443                      019E            .word	$19E
38176                                           ! 8130 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38177 9445                      009B            .word	$9B
38178                                           ! 8131                           0x01 | 0x02 | 0x04,
38179 9447                        07            .byte	7
38180                                           ! 8132                           0,
38181 9448                        00            .byte	0
38182                                           ! 8133                           64,
38183 9449                      0040            .word	$40
38184                                           ! 8134                    64,
38185 944B                      0040            .word	$40
38186                                           ! 8135                        0xA000,
38187 944D                      A000            .word	$A000
38188                                           ! 8136                        0x0000,
38189 944F                      0000            .word	0
38190                                           ! 8137                       0,
38191 9451                      0000            .word	0
38192 9453                      0000            .word	0
38193                                           ! 8138                             3200,
38194 9455                      0C80            .word	$C80
38195                                           ! 8139                        800,
38196 9457                      0320            .word	$320
38197                                           ! 8140                        1280,
38198 9459                      0500            .word	$500
38199                                           ! 8141                  
38200                                           ! 8141     8,
38201 945B                        08            .byte	8
38202                                           ! 8142                      16,
38203 945C                        10            .byte	$10
38204                                           ! 8143                           1,
38205 945D                        01            .byte	1
38206                                           ! 8144                         32,
38207 945E                        20            .byte	$20
38208                                           ! 8145                          63,
38209 945F                        3F            .byte	$3F
38210                                           ! 8146                        0x06,
38211 9460                        06            .byte	6
38212                                           ! 8147                     0,
38213 9461                        00            .byte	0
38214                                           ! 8148                               3,
38215 9462                        03            .byte	3
38216                                           ! 8149                          0,
38217 9463                        00            .byte	0
38218                                           ! 8150                        8,
38219 9464                        08            .byte	8
38220                                           ! 8151                             16,
38221 9465                        10            .byte	$10
38222                                           ! 8152                          8,
38223 9466                        08            .byte	8
38224                                           ! 8153                               8,
38225 9467                        08            .byte	8
38226                                           ! 8154                         8,
38227 9468                        08            .byte	8
38228                                           ! 8155                              0,
38229 9469                        00            .byte	0
38230                                           ! 8156                         8,
38231 946A                        08            .byte	8
38232                                           ! 8157                              24,
38233 946B                        18            .byte	$18
38234                                           ! 8158                                0x02,
38235 946C                        02            .byte	2
38236                                           ! 8159                        0xE0000000,
38237 946D                      0000            .word	0
38238 946F                      E000            .word	$E000
38239                                           ! 8160                               0,
38240 9471                      0000            .word	0
38241 9473                      0000            .word	0
38242                                           ! 8161                             0,
38243 9475                      0000            .word	0
38244                                           ! 8162                                3200,
38245 9477                      0C80            .word	$C80
38246                                           ! 8163                             0,
38247 9479                        00            .byte	0
38248                                           ! 8164                             0,
38249 947A                        00            .byte	0
38250                                           ! 8165                           8,
38251 947B                        08            .byte	8
38252                                           ! 8166                                16,
38253 947C                        10            .byte	$10
38254                                           ! 8167                             8,
38255 947D                        08            .byte	8
38256                                           ! 8168                                  8,
38257 947E                        08            .byte	8
38258                                           ! 8169                            8,
38259 947F                        08            .byte	8
38260                                           ! 8170                                 0,
38261 9480                        00            .byte	0
38262                                           ! 8171                            8,
38263 9481                        08            .byte	8
38264                                           ! 8172                                 24,
38265 9482                        18            .byte	$18
38266                                           ! 8173                          0,
38267 9483                      0000            .word	0
38268 9485                      0000            .word	0
38269                                           ! 8174 } },
38270                                           ! 8175 { 0xFFFF,
38271 9487                      FFFF            .word	$FFFF
38272                                           ! 8176 { 0,
38273 9489                      0000            .word	0
38274                                           ! 8177 } },
38275 948B                  00000040            .blkb	$40
38276                                           ! 8178 };
38277                                           !BCC_EOS
38278                                           ! 8179 extern char vbebios_copyright;
38279                                           !BCC_EOS
38280                                           ! 8180 extern char vbebios_vendor_name;
38281                                           !BCC_EOS
38282                                           ! 8181 extern char vbebios_product_name;
38283                                           !BCC_EOS
38284                                           ! 8182 extern char vbebios_product_revision;
38285                                           !BCC_EOS
38286                                           ! 8183 #asm
38287                                           !BCC_ASM
38288                       000094CB            _vbebios_copyright:
38289 94CB                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
38290 9510                        00            .byte 0x00
38291                       00009511            _vbebios_vendor_name:
38292 9511                        42            .ascii "Bochs/Plex86 Developers"
38293 9528                        00            .byte 0x00
38294                       00009529            _vbebios_product_name:
38295 9529                        42            .ascii "Bochs/Plex86 VBE Adapter"
38296 9541                        00            .byte 0x00
38297                       00009542            _vbebios_product_revision:
38298 9542                        24            .ascii "$Id$"
38299 9546                        00            .byte 0x00
38300                       00009547            _vbebios_info_string:
38301 9547                        42            .ascii "Bochs VBE Display Adapter enabled"
38302 9568                        0A            .byte 0x0a,0x0d
38303 956A                        0A            .byte 0x0a,0x0d
38304 956C                        00            .byte 0x00
38305                       0000956D            _no_vbebios_info_string:
38306 956D                        4E            .ascii "NO Bochs VBE Support available!"
38307 958C                        0A            .byte 0x0a,0x0d
38308 958E                        0A            .byte 0x0a,0x0d
38309 9590                        00            .byte 0x00
38310                       00009591            msg_vbe_init:
38311 9591                        56            .ascii "VBE Bios $Id$"
38312 959E                        0A            .byte 0x0a,0x0d, 0x00
38313 95A1                  00000002              .align 2
38314                       000095A2            vesa_pm_start:
38315 95A2                      0014              dw vesa_pm_set_window - vesa_pm_start
38316 95A4                      004B              dw vesa_pm_set_display_start - vesa_pm_start
38317 95A6                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
38318 95A8                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
38319                       000095AA            vesa_pm_io_ports_table:
38320 95AA                      01CE              dw 0x01CE
38321 95AC                      01CF              dw 0x01CE + 1
38322 95AE                      01CF              dw 0x01CF
38323 95B0                      01D0              dw 0x01CF + 1
38324 95B2                      FFFF              dw 0xffff
38325 95B4                      FFFF              dw 0xffff
38326                                             USE32
38327                       000095B6            vesa_pm_set_window:
38328 95B6     66    83FB                   00    cmp bx, #0x00
38329 95BA           74           05              je vesa_pm_set_display_window1
38330 95BC     66    B8                   0100    mov ax, #0x0100
38331 95C0           C3                           ret
38332                       000095C1            vesa_pm_set_display_window1:
38333 95C1     66    89D0                         mov ax, dx
38334 95C4     66    52                           push dx
38335 95C6     66    50                           push ax
38336 95C8     66    BA                   01CE    mov dx, # 0x01CE
38337 95CC     66    B8                   0005    mov ax, # 0x5
38338 95D0     66    EF                           out dx, ax
38339 95D2     66    58                           pop ax
38340 95D4     66    BA                   01CF    mov dx, # 0x01CF
38341 95D8     66    EF                           out dx, ax
38342 95DA     66    ED                           in ax, dx
38343 95DC     66    5A                           pop dx
38344 95DE     66    39C2                         cmp dx, ax
38345 95E1           75           05              jne illegal_window
38346 95E3     66    B8                   004F    mov ax, #0x004f
38347 95E7           C3                           ret
38348                       000095E8            illegal_window:
38349 95E8     66    B8                   014F    mov ax, #0x014f
38350 95EC           C3                           ret
38351                       000095ED            vesa_pm_set_display_start:
38352 95ED           80FB                   80    cmp bl, #0x80
38353 95F0           74           0A              je vesa_pm_set_display_start1
38354 95F2           80FB                   00    cmp bl, #0x00
38355 95F5           74           05              je vesa_pm_set_display_start1
38356 95F7     66    B8                   0100    mov ax, #0x0100
38357 95FB           C3                           ret
38358                       000095FC            vesa_pm_set_display_start1:
38359                                           ; convert offset to (X, Y) coordinate
38360                                           ; (would be simpler to change Bochs 1 API...)
38361 95FC           50                           push eax
38362 95FD           51                           push ecx
38363 95FE           52                           push edx
38364 95FF           56                           push esi
38365 9600           57                           push edi
38366 9601           C1E2                   10    shl edx, #16
38367 9604           81E1             0000FFFF    and ecx, #0xffff
38368 960A           09D1                         or ecx, edx
38369 960C           C1E1                   02    shl ecx, #2
38370 960F           89C8                         mov eax, ecx
38371 9611           50                           push eax
38372 9612     66    BA                   01CE    mov dx, # 0x01CE
38373 9616     66    B8                   0006    mov ax, # 0x6
38374 961A     66    EF                           out dx, ax
38375 961C     66    BA                   01CF    mov dx, # 0x01CF
38376 9620     66    ED                           in ax, dx
38377 9622         0FB7C8                         movzx ecx, ax
38378 9625     66    BA                   01CE    mov dx, # 0x01CE
38379 9629     66    B8                   0003    mov ax, # 0x3
38380 962D     66    EF                           out dx, ax
38381 962F     66    BA                   01CF    mov dx, # 0x01CF
38382 9633     66    ED                           in ax, dx
38383 9635         0FB7F0                         movzx esi, ax
38384 9638           58                           pop eax
38385 9639           83FE                   04    cmp esi, #4
38386 963C           74           17              jz bpp4_mode
38387 963E           83C6                   07    add esi, #7
38388 9641           C1EE                   03    shr esi, #3
38389 9644         0FAFCE                         imul ecx, esi
38390 9647           31D2                         xor edx, edx
38391 9649           F7F1                         div ecx
38392 964B           89C7                         mov edi, eax
38393 964D           89D0                         mov eax, edx
38394 964F           31D2                         xor edx, edx
38395 9651           F7F6                         div esi
38396 9653           EB           0C              jmp set_xy_regs
38397                       00009655            bpp4_mode:
38398 9655           D1E9                         shr ecx, #1
38399 9657           31D2                         xor edx, edx
38400 9659           F7F1                         div ecx
38401 965B           89C7                         mov edi, eax
38402 965D           89D0                         mov eax, edx
38403 965F           D1E0                         shl eax, #1
38404                       00009661            set_xy_regs:
38405 9661     66    52                           push dx
38406 9663     66    50                           push ax
38407 9665     66    BA                   01CE    mov dx, # 0x01CE
38408 9669     66    B8                   0008    mov ax, # 0x8
38409 966D     66    EF                           out dx, ax
38410 966F     66    58                           pop ax
38411 9671     66    BA                   01CF    mov dx, # 0x01CF
38412 9675     66    EF                           out dx, ax
38413 9677     66    5A                           pop dx
38414 9679     66    89F8                         mov ax, di
38415 967C     66    52                           push dx
38416 967E     66    50                           push ax
38417 9680     66    BA                   01CE    mov dx, # 0x01CE
38418 9684     66    B8                   0009    mov ax, # 0x9
38419 9688     66    EF                           out dx, ax
38420 968A     66    58                           pop ax
38421 968C     66    BA                   01CF    mov dx, # 0x01CF
38422 9690     66    EF                           out dx, ax
38423 9692     66    5A                           pop dx
38424 9694           5F                           pop edi
38425 9695           5E                           pop esi
38426 9696           5A                           pop edx
38427 9697           59                           pop ecx
38428 9698           58                           pop eax
38429 9699     66    B8                   004F    mov ax, #0x004f
38430 969D           C3                           ret
38431                       0000969E            vesa_pm_unimplemented:
38432 969E     66    B8                   014F    mov ax, #0x014f
38433 96A2           C3                           ret
38434                                             USE16
38435                       000096A3            vesa_pm_end:
38436                                           ; DISPI ioport functions
38437                       000096A3            dispi_get_id:
38438 96A3           52                           push dx
38439 96A4           BA                   01CE    mov dx, # 0x01CE
38440 96A7           B8                   0000    mov ax, # 0x0
38441 96AA           EF                           out dx, ax
38442 96AB           BA                   01CF    mov dx, # 0x01CF
38443 96AE           ED                           in ax, dx
38444 96AF           5A                           pop dx
38445 96B0           C3                           ret
38446                       000096B1            dispi_set_id:
38447 96B1           52                           push dx
38448 96B2           50                           push ax
38449 96B3           BA                   01CE    mov dx, # 0x01CE
38450 96B6           B8                   0000    mov ax, # 0x0
38451 96B9           EF                           out dx, ax
38452 96BA           58                           pop ax
38453 96BB           BA                   01CF    mov dx, # 0x01CF
38454 96BE           EF                           out dx, ax
38455 96BF           5A                           pop dx
38456 96C0           C3                           ret
38457                                           ! 8353 endasm
38458                                           !BCC_ENDASM
38459                                           ! 8354 static void dispi_set_xres(xres)
38460                                           ! 8355   Bit16u xres;
38461                                           
38462                       000096C1            _dispi_set_xres:
38463                                           !BCC_EOS
38464                                           ! 8356 {
38465                                           ! 8357 #asm
38466                                           !BCC_ASM
38467                       00000002            _dispi_set_xres.xres	set	2
38468 96C1           55                           push bp
38469 96C2           89E5                         mov bp, sp
38470 96C4           50                           push ax
38471 96C5           52                           push dx
38472 96C6           BA                   01CE    mov dx, # 0x01CE
38473 96C9           B8                   0001    mov ax, # 0x1
38474 96CC           EF                           out dx, ax
38475 96CD           BA                   01CF    mov dx, # 0x01CF
38476 96D0           8B46         04              mov ax, 4[bp] ; xres
38477 96D3           EF                           out dx, ax
38478 96D4           5A                           pop dx
38479 96D5           58                           pop ax
38480 96D6           5D                           pop bp
38481                                           ! 8371 endasm
38482                                           !BCC_ENDASM
38483                                           ! 8372 }
38484 96D7           C3                         ret
38485                                           ! 8373 static void dispi_set_yres(yres)
38486                                           ! 8374   Bit16u yres;
38487                       000096D8            _dispi_set_yres:
38488                                           !BCC_EOS
38489                                           ! 8375 {
38490                                           ! 8376   outw(0x01CE,0x2);
38491 96D8           55                         push	bp
38492 96D9           89E5                       mov	bp,sp
38493                                           ! Debug: list int = const 2 (used reg = )
38494 96DB           B8                   0002  mov	ax,*2
38495 96DE           50                         push	ax
38496                                           ! Debug: list int = const $1CE (used reg = )
38497 96DF           B8                   01CE  mov	ax,#$1CE
38498 96E2           50                         push	ax
38499                                           ! Debug: func () void = outw+0 (used reg = )
38500 96E3           E8         E6D5            call	_outw
38501 96E6           89EC                       mov	sp,bp
38502                                           !BCC_EOS
38503                                           ! 8377   outw(0x01CF,yres);
38504                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38505 96E8           FF76         04            push	4[bp]
38506                                           ! Debug: list int = const $1CF (used reg = )
38507 96EB           B8                   01CF  mov	ax,#$1CF
38508 96EE           50                         push	ax
38509                                           ! Debug: func () void = outw+0 (used reg = )
38510 96EF           E8         E6C9            call	_outw
38511 96F2           89EC                       mov	sp,bp
38512                                           !BCC_EOS
38513                                           ! 8378 }
38514 96F4           5D                         pop	bp
38515 96F5           C3                         ret
38516                                           ! 8379 static void dispi_set_bpp(bpp)
38517                                           ! 8380   Bit16u bpp;
38518                       000096F6            _dispi_set_bpp:
38519                                           !BCC_EOS
38520                                           ! 8381 {
38521                                           ! 8382   outw(0x01CE,0x3);
38522 96F6           55                         push	bp
38523 96F7           89E5                       mov	bp,sp
38524                                           ! Debug: list int = const 3 (used reg = )
38525 96F9           B8                   0003  mov	ax,*3
38526 96FC           50                         push	ax
38527                                           ! Debug: list int = const $1CE (used reg = )
38528 96FD           B8                   01CE  mov	ax,#$1CE
38529 9700           50                         push	ax
38530                                           ! Debug: func () void = outw+0 (used reg = )
38531 9701           E8         E6B7            call	_outw
38532 9704           89EC                       mov	sp,bp
38533                                           !BCC_EOS
38534                                           ! 8383   outw(0x01CF,bpp);
38535                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38536 9706           FF76         04            push	4[bp]
38537                                           ! Debug: list int = const $1CF (used reg = )
38538 9709           B8                   01CF  mov	ax,#$1CF
38539 970C           50                         push	ax
38540                                           ! Debug: func () void = outw+0 (used reg = )
38541 970D           E8         E6AB            call	_outw
38542 9710           89EC                       mov	sp,bp
38543                                           !BCC_EOS
38544                                           ! 8384 }
38545 9712           5D                         pop	bp
38546 9713           C3                         ret
38547                                           ! 8385 #asm
38548                                           !BCC_ASM
38549                       00000002            _dispi_set_bpp.bpp	set	2
38550                                           ; AL = bits per pixel / AH = bytes per pixel
38551                       00009714            dispi_get_bpp:
38552 9714           52                           push dx
38553 9715           BA                   01CE    mov dx, # 0x01CE
38554 9718           B8                   0003    mov ax, # 0x3
38555 971B           EF                           out dx, ax
38556 971C           BA                   01CF    mov dx, # 0x01CF
38557 971F           ED                           in ax, dx
38558 9720           88C4                         mov ah, al
38559 9722           C0EC                   03    shr ah, 3
38560 9725           A8                     07    test al, #0x07
38561 9727           74           02              jz get_bpp_noinc
38562 9729           FEC4                         inc ah
38563                       0000972B            get_bpp_noinc:
38564 972B           5A                           pop dx
38565 972C           C3                           ret
38566                                           ; get display capabilities
38567                       0000972D            _dispi_get_max_xres:
38568 972D           52                           push dx
38569 972E           53                           push bx
38570 972F           E8         004F              call dispi_get_enable
38571 9732           89C3                         mov bx, ax
38572 9734           0D                   0002    or ax, # 0x02
38573 9737           E8         0037              call _dispi_set_enable
38574 973A           BA                   01CE    mov dx, # 0x01CE
38575 973D           B8                   0001    mov ax, # 0x1
38576 9740           EF                           out dx, ax
38577 9741           BA                   01CF    mov dx, # 0x01CF
38578 9744           ED                           in ax, dx
38579 9745           50                           push ax
38580 9746           89D8                         mov ax, bx
38581 9748           E8         0026              call _dispi_set_enable
38582 974B           58                           pop ax
38583 974C           5B                           pop bx
38584 974D           5A                           pop dx
38585 974E           C3                           ret
38586                       0000974F            _dispi_get_max_bpp:
38587 974F           52                           push dx
38588 9750           53                           push bx
38589 9751           E8         002D              call dispi_get_enable
38590 9754           89C3                         mov bx, ax
38591 9756           0D                   0002    or ax, # 0x02
38592 9759           E8         0015              call _dispi_set_enable
38593 975C           BA                   01CE    mov dx, # 0x01CE
38594 975F           B8                   0003    mov ax, # 0x3
38595 9762           EF                           out dx, ax
38596 9763           BA                   01CF    mov dx, # 0x01CF
38597 9766           ED                           in ax, dx
38598 9767           50                           push ax
38599 9768           89D8                         mov ax, bx
38600 976A           E8         0004              call _dispi_set_enable
38601 976D           58                           pop ax
38602 976E           5B                           pop bx
38603 976F           5A                           pop dx
38604 9770           C3                           ret
38605                       00009771            _dispi_set_enable:
38606 9771           52                           push dx
38607 9772           50                           push ax
38608 9773           BA                   01CE    mov dx, # 0x01CE
38609 9776           B8                   0004    mov ax, # 0x4
38610 9779           EF                           out dx, ax
38611 977A           58                           pop ax
38612 977B           BA                   01CF    mov dx, # 0x01CF
38613 977E           EF                           out dx, ax
38614 977F           5A                           pop dx
38615 9780           C3                           ret
38616                       00009781            dispi_get_enable:
38617 9781           52                           push dx
38618 9782           BA                   01CE    mov dx, # 0x01CE
38619 9785           B8                   0004    mov ax, # 0x4
38620 9788           EF                           out dx, ax
38621 9789           BA                   01CF    mov dx, # 0x01CF
38622 978C           ED                           in ax, dx
38623 978D           5A                           pop dx
38624 978E           C3                           ret
38625                       0000978F            _dispi_set_bank:
38626 978F           52                           push dx
38627 9790           50                           push ax
38628 9791           BA                   01CE    mov dx, # 0x01CE
38629 9794           B8                   0005    mov ax, # 0x5
38630 9797           EF                           out dx, ax
38631 9798           58                           pop ax
38632 9799           BA                   01CF    mov dx, # 0x01CF
38633 979C           EF                           out dx, ax
38634 979D           5A                           pop dx
38635 979E           C3                           ret
38636                       0000979F            dispi_get_bank:
38637 979F           52                           push dx
38638 97A0           BA                   01CE    mov dx, # 0x01CE
38639 97A3           B8                   0005    mov ax, # 0x5
38640 97A6           EF                           out dx, ax
38641 97A7           BA                   01CF    mov dx, # 0x01CF
38642 97AA           ED                           in ax, dx
38643 97AB           5A                           pop dx
38644 97AC           C3                           ret
38645                                           ! 8481 endasm
38646                                           !BCC_ENDASM
38647                                           ! 8482 static void dispi_set_bank_farcall()
38648                                           ! 8483 {
38649                       000097AD            _dispi_set_bank_farcall:
38650                                           ! 8484 #asm
38651                                           !BCC_ASM
38652 97AD           81FB                 0100    cmp bx,#0x0100
38653 97B1           74           1E              je dispi_set_bank_farcall_get
38654 97B3           09DB                         or bx,bx
38655 97B5           75           28              jnz dispi_set_bank_farcall_error
38656 97B7           89D0                         mov ax,dx
38657 97B9           52                           push dx
38658 97BA           50                           push ax
38659 97BB           B8                   0005    mov ax,# 0x5
38660 97BE           BA                   01CE    mov dx,# 0x01CE
38661 97C1           EF                           out dx,ax
38662 97C2           58                           pop ax
38663 97C3           BA                   01CF    mov dx,# 0x01CF
38664 97C6           EF                           out dx,ax
38665 97C7           ED                           in ax,dx
38666 97C8           5A                           pop dx
38667 97C9           39C2                         cmp dx,ax
38668 97CB           75           12              jne dispi_set_bank_farcall_error
38669 97CD           B8                   004F    mov ax, #0x004f
38670 97D0           CB                           retf
38671                       000097D1            dispi_set_bank_farcall_get:
38672 97D1           B8                   0005    mov ax,# 0x5
38673 97D4           BA                   01CE    mov dx,# 0x01CE
38674 97D7           EF                           out dx,ax
38675 97D8           BA                   01CF    mov dx,# 0x01CF
38676 97DB           ED                           in ax,dx
38677 97DC           89C2                         mov dx,ax
38678 97DE           CB                           retf
38679                       000097DF            dispi_set_bank_farcall_error:
38680 97DF           B8                   014F    mov ax,#0x014F
38681 97E2           CB                           retf
38682                                           ! 8515 endasm
38683                                           !BCC_ENDASM
38684                                           ! 8516 }
38685 97E3           C3                         ret
38686                                           ! 8517 #asm
38687                                           !BCC_ASM
38688                       000097E4            dispi_set_x_offset:
38689 97E4           52                           push dx
38690 97E5           50                           push ax
38691 97E6           BA                   01CE    mov dx, # 0x01CE
38692 97E9           B8                   0008    mov ax, # 0x8
38693 97EC           EF                           out dx, ax
38694 97ED           58                           pop ax
38695 97EE           BA                   01CF    mov dx, # 0x01CF
38696 97F1           EF                           out dx, ax
38697 97F2           5A                           pop dx
38698 97F3           C3                           ret
38699                       000097F4            dispi_get_x_offset:
38700 97F4           52                           push dx
38701 97F5           BA                   01CE    mov dx, # 0x01CE
38702 97F8           B8                   0008    mov ax, # 0x8
38703 97FB           EF                           out dx, ax
38704 97FC           BA                   01CF    mov dx, # 0x01CF
38705 97FF           ED                           in ax, dx
38706 9800           5A                           pop dx
38707 9801           C3                           ret
38708                       00009802            dispi_set_y_offset:
38709 9802           52                           push dx
38710 9803           50                           push ax
38711 9804           BA                   01CE    mov dx, # 0x01CE
38712 9807           B8                   0009    mov ax, # 0x9
38713 980A           EF                           out dx, ax
38714 980B           58                           pop ax
38715 980C           BA                   01CF    mov dx, # 0x01CF
38716 980F           EF                           out dx, ax
38717 9810           5A                           pop dx
38718 9811           C3                           ret
38719                       00009812            dispi_get_y_offset:
38720 9812           52                           push dx
38721 9813           BA                   01CE    mov dx, # 0x01CE
38722 9816           B8                   0009    mov ax, # 0x9
38723 9819           EF                           out dx, ax
38724 981A           BA                   01CF    mov dx, # 0x01CF
38725 981D           ED                           in ax, dx
38726 981E           5A                           pop dx
38727 981F           C3                           ret
38728                       00009820            vga_set_virt_width:
38729 9820           50                           push ax
38730 9821           53                           push bx
38731 9822           52                           push dx
38732 9823           89C3                         mov bx, ax
38733 9825           E8         FEEC              call dispi_get_bpp
38734 9828           3C                     04    cmp al, #0x04
38735 982A           77           02              ja set_width_svga
38736 982C           D1EB                         shr bx, #1
38737                       0000982E            set_width_svga:
38738 982E           C1EB                   03    shr bx, #3
38739 9831           BA                   03D4    mov dx, # 0x3d4
38740 9834           88DC                         mov ah, bl
38741 9836           B0                     13    mov al, #0x13
38742 9838           EF                           out dx, ax
38743 9839           5A                           pop dx
38744 983A           5B                           pop bx
38745 983B           58                           pop ax
38746 983C           C3                           ret
38747                       0000983D            dispi_set_virt_width:
38748 983D           E8         FFE0              call vga_set_virt_width
38749 9840           52                           push dx
38750 9841           50                           push ax
38751 9842           BA                   01CE    mov dx, # 0x01CE
38752 9845           B8                   0006    mov ax, # 0x6
38753 9848           EF                           out dx, ax
38754 9849           58                           pop ax
38755 984A           BA                   01CF    mov dx, # 0x01CF
38756 984D           EF                           out dx, ax
38757 984E           5A                           pop dx
38758 984F           C3                           ret
38759                       00009850            dispi_get_virt_width:
38760 9850           52                           push dx
38761 9851           BA                   01CE    mov dx, # 0x01CE
38762 9854           B8                   0006    mov ax, # 0x6
38763 9857           EF                           out dx, ax
38764 9858           BA                   01CF    mov dx, # 0x01CF
38765 985B           ED                           in ax, dx
38766 985C           5A                           pop dx
38767 985D           C3                           ret
38768                       0000985E            dispi_get_virt_height:
38769 985E           52                           push dx
38770 985F           BA                   01CE    mov dx, # 0x01CE
38771 9862           B8                   0007    mov ax, # 0x7
38772 9865           EF                           out dx, ax
38773 9866           BA                   01CF    mov dx, # 0x01CF
38774 9869           ED                           in ax, dx
38775 986A           5A                           pop dx
38776 986B           C3                           ret
38777                       0000986C            _vga_compat_setup:
38778 986C           50                           push ax
38779 986D           52                           push dx
38780                                             ; set CRT X resolution
38781 986E           BA                   01CE    mov dx, # 0x01CE
38782 9871           B8                   0001    mov ax, # 0x1
38783 9874           EF                           out dx, ax
38784 9875           BA                   01CF    mov dx, # 0x01CF
38785 9878           ED                           in ax, dx
38786 9879           50                           push ax
38787 987A           BA                   03D4    mov dx, # 0x3d4
38788 987D           B8                   0011    mov ax, #0x0011
38789 9880           EF                           out dx, ax
38790 9881           58                           pop ax
38791 9882           50                           push ax
38792 9883           C1E8                   03    shr ax, #3
38793 9886           48                           dec ax
38794 9887           88C4                         mov ah, al
38795 9889           B0                     01    mov al, #0x01
38796 988B           EF                           out dx, ax
38797 988C           58                           pop ax
38798 988D           E8         FF90              call vga_set_virt_width
38799                                             ; set CRT Y resolution
38800 9890           BA                   01CE    mov dx, # 0x01CE
38801 9893           B8                   0002    mov ax, # 0x2
38802 9896           EF                           out dx, ax
38803 9897           BA                   01CF    mov dx, # 0x01CF
38804 989A           ED                           in ax, dx
38805 989B           48                           dec ax
38806 989C           50                           push ax
38807 989D           BA                   03D4    mov dx, # 0x3d4
38808 98A0           88C4                         mov ah, al
38809 98A2           B0                     12    mov al, #0x12
38810 98A4           EF                           out dx, ax
38811 98A5           58                           pop ax
38812 98A6           B0                     07    mov al, #0x07
38813 98A8           EE                           out dx, al
38814 98A9           42                           inc dx
38815 98AA           EC                           in al, dx
38816 98AB           24                     BD    and al, #0xbd
38817 98AD           F6C4                   01    test ah, #0x01
38818 98B0           74           02              jz bit8_clear
38819 98B2           0C                     02    or al, #0x02
38820                       000098B4            bit8_clear:
38821 98B4           F6C4                   02    test ah, #0x02
38822 98B7           74           02              jz bit9_clear
38823 98B9           0C                     40    or al, #0x40
38824                       000098BB            bit9_clear:
38825 98BB           EE                           out dx, al
38826                                             ; other settings
38827 98BC           BA                   03D4    mov dx, # 0x3d4
38828 98BF           B8                   0009    mov ax, #0x0009
38829 98C2           EF                           out dx, ax
38830 98C3           B0                     17    mov al, #0x17
38831 98C5           EE                           out dx, al
38832 98C6           BA                   03D5    mov dx, # 0x3d5
38833 98C9           EC                           in al, dx
38834 98CA           0C                     03    or al, #0x03
38835 98CC           EE                           out dx, al
38836 98CD           BA                   03DA    mov dx, # 0x3da
38837 98D0           EC                           in al, dx
38838 98D1           BA                   03C0    mov dx, # 0x3c0
38839 98D4           B0                     10    mov al, #0x10
38840 98D6           EE                           out dx, al
38841 98D7           BA                   03C1    mov dx, # 0x3c1
38842 98DA           EC                           in al, dx
38843 98DB           0C                     01    or al, #0x01
38844 98DD           BA                   03C0    mov dx, # 0x3c0
38845 98E0           EE                           out dx, al
38846 98E1           B0                     20    mov al, #0x20
38847 98E3           EE                           out dx, al
38848 98E4           BA                   03CE    mov dx, # 0x3ce
38849 98E7           B8                   0506    mov ax, #0x0506
38850 98EA           EF                           out dx, ax
38851 98EB           BA                   03C4    mov dx, # 0x3c4
38852 98EE           B8                   0F02    mov ax, #0x0f02
38853 98F1           EF                           out dx, ax
38854                                             ; settings for >= 8bpp
38855 98F2           BA                   01CE    mov dx, # 0x01CE
38856 98F5           B8                   0003    mov ax, # 0x3
38857 98F8           EF                           out dx, ax
38858 98F9           BA                   01CF    mov dx, # 0x01CF
38859 98FC           ED                           in ax, dx
38860 98FD           3C                     08    cmp al, #0x08
38861 98FF           72           40              jb vga_compat_end
38862 9901           BA                   03D4    mov dx, # 0x3d4
38863 9904           B0                     14    mov al, #0x14
38864 9906           EE                           out dx, al
38865 9907           BA                   03D5    mov dx, # 0x3d5
38866 990A           EC                           in al, dx
38867 990B           0C                     40    or al, #0x40
38868 990D           EE                           out dx, al
38869 990E           BA                   03DA    mov dx, # 0x3da
38870 9911           EC                           in al, dx
38871 9912           BA                   03C0    mov dx, # 0x3c0
38872 9915           B0                     10    mov al, #0x10
38873 9917           EE                           out dx, al
38874 9918           BA                   03C1    mov dx, # 0x3c1
38875 991B           EC                           in al, dx
38876 991C           0C                     40    or al, #0x40
38877 991E           BA                   03C0    mov dx, # 0x3c0
38878 9921           EE                           out dx, al
38879 9922           B0                     20    mov al, #0x20
38880 9924           EE                           out dx, al
38881 9925           BA                   03C4    mov dx, # 0x3c4
38882 9928           B0                     04    mov al, #0x04
38883 992A           EE                           out dx, al
38884 992B           BA                   03C5    mov dx, # 0x3c5
38885 992E           EC                           in al, dx
38886 992F           0C                     08    or al, #0x08
38887 9931           EE                           out dx, al
38888 9932           BA                   03CE    mov dx, # 0x3ce
38889 9935           B0                     05    mov al, #0x05
38890 9937           EE                           out dx, al
38891 9938           BA                   03CF    mov dx, # 0x3cf
38892 993B           EC                           in al, dx
38893 993C           24                     9F    and al, #0x9f
38894 993E           0C                     40    or al, #0x40
38895 9940           EE                           out dx, al
38896                       00009941            vga_compat_end:
38897 9941           5A                           pop dx
38898 9942           58                           pop ax
38899                                           ! 8729 endasm
38900                                           !BCC_ENDASM
38901                                           ! 8730 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38902                                           ! 8731   Bit16u mode; Boolean using_lfb;
38903                       00009943            _mode_info_find_mode:
38904                                           !BCC_EOS
38905                                           !BCC_EOS
38906                                           ! 8732 {
38907                                           ! 8733   ModeInfoListItem *cur_info=&mode_info_list;
38908 9943           55                         push	bp
38909 9944           89E5                       mov	bp,sp
38910 9946           4C                         dec	sp
38911 9947           4C                         dec	sp
38912                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38913 9948           BB                   7F8B  mov	bx,#_mode_info_list
38914 994B           895E         FE            mov	-2[bp],bx
38915                                           !BCC_EOS
38916                                           ! 8734   while (cur_info->mode != 0xFFFF)
38917                                           ! 8735   {
38918 994E           EB           43            jmp .2CC
38919                       00009950            .2CD:
38920                                           ! 8736     if (cur_info->mode == mode)
38921 9950           8B5E         FE            mov	bx,-2[bp]
38922                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38923 9953           8B1F                       mov	bx,[bx]
38924 9955           3B5E         04            cmp	bx,4[bp]
38925 9958           75           30            jne 	.2CE
38926                       0000995A            .2CF:
38927                                           ! 8737     {
38928                                           ! 8738       if (!using_lfb)
38929 995A           8B46         06            mov	ax,6[bp]
38930 995D           85C0                       test	ax,ax
38931 995F           75           09            jne 	.2D0
38932                       00009961            .2D1:
38933                                           ! 8739       {
38934                                           ! 8740         return cur_info;
38935 9961           8B46         FE            mov	ax,-2[bp]
38936 9964           89EC                       mov	sp,bp
38937 9966           5D                         pop	bp
38938 9967           C3                         ret
38939                                           !BCC_EOS
38940                                           ! 8741       }
38941                                           ! 8742       else if (cur_info->info.ModeAttributes & 0x0080)
38942 9968           EB           1E            jmp .2D2
38943                       0000996A            .2D0:
38944 996A           8B5E         FE            mov	bx,-2[bp]
38945                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38946 996D           8A47         02            mov	al,2[bx]
38947 9970           24                     80  and	al,#$80
38948 9972           84C0                       test	al,al
38949 9974           74           09            je  	.2D3
38950                       00009976            .2D4:
38951                                           ! 8743       {
38952                                           ! 8744         return cur_info;
38953 9976           8B46         FE            mov	ax,-2[bp]
38954 9979           89EC                       mov	sp,bp
38955 997B           5D                         pop	bp
38956 997C           C3                         ret
38957                                           !BCC_EOS
38958                                           ! 8745       }
38959                                           ! 8746       else
38960                                           ! 8747       {
38961 997D           EB           09            jmp .2D5
38962                       0000997F            .2D3:
38963                                           ! 8748         cur_info++;
38964                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38965 997F           8B5E         FE            mov	bx,-2[bp]
38966 9982           83C3                   44  add	bx,*$44
38967 9985           895E         FE            mov	-2[bp],bx
38968                                           !BCC_EOS
38969                                           ! 8749       }
38970                                           ! 8750     }
38971                       00009988            .2D5:
38972                       00009988            .2D2:
38973                                           ! 8751     else
38974                                           ! 8752     {
38975 9988           EB           09            jmp .2D6
38976                       0000998A            .2CE:
38977                                           ! 8753       cur_info++;
38978                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38979 998A           8B5E         FE            mov	bx,-2[bp]
38980 998D           83C3                   44  add	bx,*$44
38981 9990           895E         FE            mov	-2[bp],bx
38982                                           !BCC_EOS
38983                                           ! 8754     }
38984                                           ! 8755   }
38985                       00009993            .2D6:
38986                                           ! 8756   return 0;
38987                       00009993            .2CC:
38988 9993           8B5E         FE            mov	bx,-2[bp]
38989                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38990 9996           8B1F                       mov	bx,[bx]
38991 9998           81FB                 FFFF  cmp	bx,#$FFFF
38992 999C           75           B2            jne	.2CD
38993                       0000999E            .2D7:
38994                       0000999E            .2CB:
38995 999E           31C0                       xor	ax,ax
38996 99A0           89EC                       mov	sp,bp
38997 99A2           5D                         pop	bp
38998 99A3           C3                         ret
38999                                           !BCC_EOS
39000                                           ! 8757 }
39001                                           ! 8758 #asm
39002                                           !BCC_ASM
39003                       00000004            _mode_info_find_mode.using_lfb	set	4
39004                       00000002            _mode_info_find_mode.mode	set	2
39005                                           ; Has 1 display - Returns true if 1 display detected
39006                       000099A4            _vbe_has_vbe_display:
39007 99A4           1E                           push ds
39008 99A5           53                           push bx
39009 99A6           B8                   0040    mov ax, # 0x40
39010 99A9           8ED8                         mov ds, ax
39011 99AB           BB                   00B9    mov bx, # 0xB9
39012 99AE           8A07                         mov al, [bx]
39013 99B0           24                     01    and al, #0x01
39014 99B2           30E4                         xor ah, ah
39015 99B4           5B                           pop bx
39016 99B5           1F                           pop ds
39017 99B6           C3                           ret
39018                                           ; 1 Init - Initialise the Vesa Bios Extension Code
39019                                           ; This function does a sanity check on the host side display code interface.
39020                       000099B7            vbe_init:
39021 99B7           B8                   B0C0    mov ax, # 0xB0C0
39022 99BA           E8         FCF4              call dispi_set_id
39023 99BD           E8         FCE3              call dispi_get_id
39024 99C0           3D                   B0C0    cmp ax, # 0xB0C0
39025 99C3           75           16              jne no_vbe_interface
39026 99C5           1E                           push ds
39027 99C6           53                           push bx
39028 99C7           B8                   0040    mov ax, # 0x40
39029 99CA           8ED8                         mov ds, ax
39030 99CC           BB                   00B9    mov bx, # 0xB9
39031 99CF           B0                     01    mov al, #0x01
39032 99D1           8807                         mov [bx], al
39033 99D3           5B                           pop bx
39034 99D4           1F                           pop ds
39035 99D5           B8                   B0C5    mov ax, # 0xB0C5
39036 99D8           E8         FCD6              call dispi_set_id
39037                       000099DB            no_vbe_interface:
39038 99DB           BB                   9591    mov bx, #msg_vbe_init
39039 99DE           53                           push bx
39040 99DF           E8         E408              call _printf
39041 99E2           44                           inc sp
39042 99E3           44                           inc sp
39043 99E4           C3                           ret
39044                                           ; 1 Display Info - Display information on screen about the 1
39045                       000099E5            vbe_display_info:
39046 99E5           E8         FFBC              call _vbe_has_vbe_display
39047 99E8           85C0                         test ax, ax
39048 99EA           74           0B              jz no_vbe_flag
39049 99EC           B8                   C000    mov ax, #0xc000
39050 99EF           8ED8                         mov ds, ax
39051 99F1           BE                   9547    mov si, #_vbebios_info_string
39052 99F4           E9         9C18              jmp _display_string
39053                       000099F7            no_vbe_flag:
39054 99F7           B8                   C000    mov ax, #0xc000
39055 99FA           8ED8                         mov ds, ax
39056 99FC           BE                   956D    mov si, #_no_vbebios_info_string
39057 99FF           E9         9C0D              jmp _display_string
39058                                           ; helper function for memory size calculation
39059                       00009A02            lmulul:
39060 9A02     66    25               0000FFFF    and eax, #0x0000FFFF
39061 9A08     66    C1E3                   10    shl ebx, #16
39062 9A0C     66    09D8                         or eax, ebx
39063 9A0F           36                           SEG SS
39064 9A10     66    F725                         mul eax, dword ptr [di]
39065 9A13     66    89C3                         mov ebx, eax
39066 9A16     66    C1EB                   10    shr ebx, #16
39067 9A1A           C3                           ret
39068                                           ! 8822 endasm
39069                                           !BCC_ENDASM
39070                                           ! 8823 void vbe_biosfn_return_controller_information(AX, ES, DI)
39071                                           ! Register BX used in function mode_info_find_mode
39072                                           ! 8824 Bit16u *AX;Bit16u ES;Bit16u DI;
39073                                           export	_vbe_biosfn_return_controller_information
39074                       00009A1B            _vbe_biosfn_return_controller_information:
39075                                           !BCC_EOS
39076                                           !BCC_EOS
39077                                           !BCC_EOS
39078                                           ! 8825 {
39079                                           ! 8826         Bit16u ss=get_SS();
39080 9A1B           55                         push	bp
39081 9A1C           89E5                       mov	bp,sp
39082 9A1E           4C                         dec	sp
39083 9A1F           4C                         dec	sp
39084                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39085 9A20           E8         E3A8            call	_get_SS
39086                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39087 9A23           8946         FE            mov	-2[bp],ax
39088                                           !BCC_EOS
39089                                           ! 8827         VbeInfoBlock vbe_info_block;
39090                                           !BCC_EOS
39091                                           ! 8828         Bit16u status;
39092                                           !BCC_EOS
39093                                           ! 8829         Bit16u result;
39094                                           !BCC_EOS
39095                                           ! 8830         Bit16u vbe2_info;
39096                                           !BCC_EOS
39097                                           ! 8831         Bit16u cur_mode=0;
39098 9A26           81C4                 FDF8  add	sp,#-$208
39099                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
39100 9A2A           31C0                       xor	ax,ax
39101 9A2C           8986       FDF6            mov	-$20A[bp],ax
39102                                           !BCC_EOS
39103                                           ! 8832         Bit16u cur_ptr=34;
39104 9A30           4C                         dec	sp
39105 9A31           4C                         dec	sp
39106                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
39107 9A32           B8                   0022  mov	ax,*$22
39108 9A35           8986       FDF4            mov	-$20C[bp],ax
39109                                           !BCC_EOS
39110                                           ! 8833         Bit16u size_64k;
39111                                           !BCC_EOS
39112                                           ! 8834         ModeInfoListItem *cur_info=&mode_info_list;
39113 9A39           83C4                   FC  add	sp,*-4
39114                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39115 9A3C           BB                   7F8B  mov	bx,#_mode_info_list
39116 9A3F           899E       FDF0            mov	-$210[bp],bx
39117                                           !BCC_EOS
39118                                           ! 8835         status = read_word(ss, AX);
39119                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
39120 9A43           FF76         04            push	4[bp]
39121                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
39122 9A46           FF76         FE            push	-2[bp]
39123                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39124 9A49           E8         E306            call	_read_word
39125 9A4C           83C4                   04  add	sp,*4
39126                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
39127 9A4F           8986       FDFC            mov	-$204[bp],ax
39128                                           !BCC_EOS
39129                                           ! 8836         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
39130                                           ! Debug: list unsigned short status = [S+$212-$206] (used reg = )
39131 9A53           FFB6       FDFC            push	-$204[bp]
39132                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39133 9A57           FF76         08            push	8[bp]
39134                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39135 9A5A           FF76         06            push	6[bp]
39136                                           ! Debug: list * char = .2D8+0 (used reg = )
39137 9A5D           BB                   A500  mov	bx,#.2D8
39138 9A60           53                         push	bx
39139                                           ! Debug: func () void = printf+0 (used reg = )
39140 9A61           E8         E386            call	_printf
39141 9A64           83C4                   08  add	sp,*8
39142                                           !BCC_EOS
39143                                           ! 8837         vbe2_info = 0;
39144                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39145 9A67           31C0                       xor	ax,ax
39146 9A69           8986       FDF8            mov	-$208[bp],ax
39147                                           !BCC_EOS
39148                                           ! 8838         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
39149                                           ! Debug: list int = const $200 (used reg = )
39150 9A6D           B8                   0200  mov	ax,#$200
39151 9A70           50                         push	ax
39152                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39153 9A71           FF76         08            push	8[bp]
39154                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39155 9A74           FF76         06            push	6[bp]
39156                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
39157 9A77           8D9E       FDFE            lea	bx,-$202[bp]
39158 9A7B           53                         push	bx
39159                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
39160 9A7C           FF76         FE            push	-2[bp]
39161                                           ! Debug: func () void = memcpyb+0 (used reg = )
39162 9A7F           E8         E25D            call	_memcpyb
39163 9A82           83C4                   0A  add	sp,*$A
39164                                           !BCC_EOS
39165                                           ! 8839         if (((vbe_info_block.VbeSignature[0] == 'V') &&
39166                                           ! 8840              (vbe_info_block.VbeSignature[1] == 'B') &&
39167                                           ! 8841              (vbe_info_block.VbeSignature[2] == 'E') &&
39168                                           ! 8842              (vbe_info_block.VbeSignature[3] == '2')) ||
39169                                           ! 8843             ((vbe_info_block.VbeSignature[0] == 'V') &&
39170                                           ! 8844              (vbe_info_block.VbeSignature[1] == 'E') &&
39171                                           ! 8845              (vbe_info_block.VbeSignature[2] == 'S') &&
39172                                           ! 8846              (vbe_info_block.VbeSignature[3] == 'A')) )
39173                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39174 9A85           8A86       FDFE            mov	al,-$202[bp]
39175 9A89           3C                     56  cmp	al,*$56
39176 9A8B           75           18            jne 	.2DB
39177                       00009A8D            .2DE:
39178                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39179 9A8D           8A86       FDFF            mov	al,-$201[bp]
39180 9A91           3C                     42  cmp	al,*$42
39181 9A93           75           10            jne 	.2DB
39182                       00009A95            .2DD:
39183                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39184 9A95           8A86       FE00            mov	al,-$200[bp]
39185 9A99           3C                     45  cmp	al,*$45
39186 9A9B           75           08            jne 	.2DB
39187                       00009A9D            .2DC:
39188                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39189 9A9D           8A86       FE01            mov	al,-$1FF[bp]
39190 9AA1           3C                     32  cmp	al,*$32
39191 9AA3           74           20            je  	.2DA
39192                       00009AA5            .2DB:
39193                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39194 9AA5           8A86       FDFE            mov	al,-$202[bp]
39195 9AA9           3C                     56  cmp	al,*$56
39196 9AAB           75           28            jne 	.2D9
39197                       00009AAD            .2E1:
39198                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39199 9AAD           8A86       FDFF            mov	al,-$201[bp]
39200 9AB1           3C                     45  cmp	al,*$45
39201 9AB3           75           20            jne 	.2D9
39202                       00009AB5            .2E0:
39203                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39204 9AB5           8A86       FE00            mov	al,-$200[bp]
39205 9AB9           3C                     53  cmp	al,*$53
39206 9ABB           75           18            jne 	.2D9
39207                       00009ABD            .2DF:
39208                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39209 9ABD           8A86       FE01            mov	al,-$1FF[bp]
39210 9AC1           3C                     41  cmp	al,*$41
39211 9AC3           75           10            jne 	.2D9
39212                       00009AC5            .2DA:
39213                                           ! 8847         {
39214                                           ! 8848                 vbe2_info = 1;
39215                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39216 9AC5           B8                   0001  mov	ax,*1
39217 9AC8           8986       FDF8            mov	-$208[bp],ax
39218                                           !BCC_EOS
39219                                           ! 8849                 printf("VBE correct VESA/VBE2 signature found\n");
39220                                           ! Debug: list * char = .2E2+0 (used reg = )
39221 9ACC           BB                   A4D9  mov	bx,#.2E2
39222 9ACF           53                         push	bx
39223                                           ! Debug: func () void = printf+0 (used reg = )
39224 9AD0           E8         E317            call	_printf
39225 9AD3           44                         inc	sp
39226 9AD4           44                         inc	sp
39227                                           !BCC_EOS
39228                                           ! 8850         }
39229                                           ! 8851         vbe_info_block.VbeSignature[0] = 'V';
39230                       00009AD5            .2D9:
39231                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39232 9AD5           B0                     56  mov	al,*$56
39233 9AD7           8886       FDFE            mov	-$202[bp],al
39234                                           !BCC_EOS
39235                                           ! 8852         vbe_info_block.VbeSignature[1] = 'E';
39236                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39237 9ADB           B0                     45  mov	al,*$45
39238 9ADD           8886       FDFF            mov	-$201[bp],al
39239                                           !BCC_EOS
39240                                           ! 8853      
39241                                           ! 8853    vbe_info_block.VbeSignature[2] = 'S';
39242                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39243 9AE1           B0                     53  mov	al,*$53
39244 9AE3           8886       FE00            mov	-$200[bp],al
39245                                           !BCC_EOS
39246                                           ! 8854         vbe_info_block.VbeSignature[3] = 'A';
39247                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39248 9AE7           B0                     41  mov	al,*$41
39249 9AE9           8886       FE01            mov	-$1FF[bp],al
39250                                           !BCC_EOS
39251                                           ! 8855         vbe_info_block.VbeVersion = 0x0200;
39252                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
39253 9AED           B8                   0200  mov	ax,#$200
39254 9AF0           8986       FE02            mov	-$1FE[bp],ax
39255                                           !BCC_EOS
39256                                           ! 8856         vbe_info_block.OemStringPtr_Seg = 0xc000;
39257                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
39258 9AF4           B8                   C000  mov	ax,#$C000
39259 9AF7           8986       FE06            mov	-$1FA[bp],ax
39260                                           !BCC_EOS
39261                                           ! 8857         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
39262                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
39263 9AFB           BB                   94CB  mov	bx,#_vbebios_copyright
39264 9AFE           899E       FE04            mov	-$1FC[bp],bx
39265                                           !BCC_EOS
39266                                           ! 8858         vbe_info_block.Capabilities[0] = 0x0001;
39267                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
39268 9B02           B0                     01  mov	al,*1
39269 9B04           8886       FE08            mov	-$1F8[bp],al
39270                                           !BCC_EOS
39271                                           ! 8859         vbe_info_block.Capabilities[1] = 0;
39272                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
39273 9B08           30C0                       xor	al,al
39274 9B0A           8886       FE09            mov	-$1F7[bp],al
39275                                           !BCC_EOS
39276                                           ! 8860         vbe_info_block.Capabilities[2] = 0;
39277                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
39278 9B0E           30C0                       xor	al,al
39279 9B10           8886       FE0A            mov	-$1F6[bp],al
39280                                           !BCC_EOS
39281                                           ! 8861         vbe_info_block.Capabilities[3] = 0;
39282                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
39283 9B14           30C0                       xor	al,al
39284 9B16           8886       FE0B            mov	-$1F5[bp],al
39285                                           !BCC_EOS
39286                                           ! 8862         vbe_info_block.VideoModePtr_Seg= ES ;
39287                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
39288 9B1A           8B46         06            mov	ax,6[bp]
39289 9B1D           8986       FE0E            mov	-$1F2[bp],ax
39290                                           !BCC_EOS
39291                                           ! 8863         vbe_info_block.VideoModePtr_Off= DI + 34;
39292                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
39293 9B21           8B46         08            mov	ax,8[bp]
39294                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
39295 9B24           05                   0022  add	ax,*$22
39296 9B27           8986       FE0C            mov	-$1F4[bp],ax
39297                                           !BCC_EOS
39298                                           ! 8864         outw(0x01CE, 0xa);
39299                                           ! Debug: list int = const $A (used reg = )
39300 9B2B           B8                   000A  mov	ax,*$A
39301 9B2E           50                         push	ax
39302                                           ! Debug: list int = const $1CE (used reg = )
39303 9B2F           B8                   01CE  mov	ax,#$1CE
39304 9B32           50                         push	ax
39305                                           ! Debug: func () void = outw+0 (used reg = )
39306 9B33           E8         E285            call	_outw
39307 9B36           83C4                   04  add	sp,*4
39308                                           !BCC_EOS
39309                                           ! 8865         vbe_info_block.TotalMemory = inw(0x01CF);
39310                                           ! Debug: list int = const $1CF (used reg = )
39311 9B39           B8                   01CF  mov	ax,#$1CF
39312 9B3C           50                         push	ax
39313                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39314 9B3D           E8         E260            call	_inw
39315 9B40           44                         inc	sp
39316 9B41           44                         inc	sp
39317                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
39318 9B42           8986       FE10            mov	-$1F0[bp],ax
39319                                           !BCC_EOS
39320                                           ! 8866         if (vbe2_info)
39321 9B46           8B86       FDF8            mov	ax,-$208[bp]
39322 9B4A           85C0                       test	ax,ax
39323 9B4C           74           4B            je  	.2E3
39324                       00009B4E            .2E4:
39325                                           ! 8867         {
39326                                           ! 8868                 vbe_info_block.OemSoftwareRev = 0x0002;;
39327                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
39328 9B4E           B8                   0002  mov	ax,*2
39329 9B51           8986       FE12            mov	-$1EE[bp],ax
39330                                           !BCC_EOS
39331                                           !BCC_EOS
39332                                           ! 8869                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
39333                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
39334 9B55           B8                   C000  mov	ax,#$C000
39335 9B58           8986       FE16            mov	-$1EA[bp],ax
39336                                           !BCC_EOS
39337                                           ! 8870                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
39338                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
39339 9B5C           BB                   9511  mov	bx,#_vbebios_vendor_name
39340 9B5F           899E       FE14            mov	-$1EC[bp],bx
39341                                           !BCC_EOS
39342                                           ! 8871                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
39343                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
39344 9B63           B8                   C000  mov	ax,#$C000
39345 9B66           8986       FE1A            mov	-$1E6[bp],ax
39346                                           !BCC_EOS
39347                                           ! 8872                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39348                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39349 9B6A           BB                   9529  mov	bx,#_vbebios_product_name
39350 9B6D           899E       FE18            mov	-$1E8[bp],bx
39351                                           !BCC_EOS
39352                                           ! 8873                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39353                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39354 9B71           B8                   C000  mov	ax,#$C000
39355 9B74           8986       FE1E            mov	-$1E2[bp],ax
39356                                           !BCC_EOS
39357                                           ! 8874                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39358                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39359 9B78           BB                   9542  mov	bx,#_vbebios_product_revision
39360 9B7B           899E       FE1C            mov	-$1E4[bp],bx
39361                                           !BCC_EOS
39362                                           ! 8875                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39363                                           ! Debug: list int = const $200 (used reg = )
39364 9B7F           B8                   0200  mov	ax,#$200
39365 9B82           50                         push	ax
39366                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39367 9B83           8D9E       FDFE            lea	bx,-$202[bp]
39368 9B87           53                         push	bx
39369                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39370 9B88           FF76         FE            push	-2[bp]
39371                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39372 9B8B           FF76         08            push	8[bp]
39373                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39374 9B8E           FF76         06            push	6[bp]
39375                                           ! Debug: func () void = memcpyb+0 (used reg = )
39376 9B91           E8         E14B            call	_memcpyb
39377 9B94           83C4                   0A  add	sp,*$A
39378                                           !BCC_EOS
39379                                           ! 8876         }
39380                                           ! 8877         else
39381                                           ! 8878         {
39382 9B97           EB           18            jmp .2E5
39383                       00009B99            .2E3:
39384                                           ! 8879                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39385                                           ! Debug: list int = const $100 (used reg = )
39386 9B99           B8                   0100  mov	ax,#$100
39387 9B9C           50                         push	ax
39388                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39389 9B9D           8D9E       FDFE            lea	bx,-$202[bp]
39390 9BA1           53                         push	bx
39391                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39392 9BA2           FF76         FE            push	-2[bp]
39393                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39394 9BA5           FF76         08            push	8[bp]
39395                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39396 9BA8           FF76         06            push	6[bp]
39397                                           ! Debug: func () void = memcpyb+0 (used reg = )
39398 9BAB           E8         E131            call	_memcpyb
39399 9BAE           83C4                   0A  add	sp,*$A
39400                                           !BCC_EOS
39401                                           ! 8880         }
39402                                           ! 8881         do
39403                       00009BB1            .2E5:
39404                                           ! 8882         {
39405                       00009BB1            .2E8:
39406                                           ! 8883                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39407 9BB1           8B9E       FDF0            mov	bx,-$210[bp]
39408                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39409 9BB5           8A47         1B            mov	al,$1B[bx]
39410 9BB8           30E4                       xor	ah,ah
39411 9BBA           31DB                       xor	bx,bx
39412 9BBC           53                         push	bx
39413 9BBD           50                         push	ax
39414 9BBE           8B9E       FDF0            mov	bx,-$210[bp]
39415                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39416 9BC2           8B47         14            mov	ax,$14[bx]
39417 9BC5           31DB                       xor	bx,bx
39418 9BC7           53                         push	bx
39419 9BC8           50                         push	ax
39420 9BC9           8B9E       FDF0            mov	bx,-$210[bp]
39421                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39422 9BCD           8B47         14            mov	ax,$14[bx]
39423 9BD0           31DB                       xor	bx,bx
39424                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39425 9BD2           8DBE       FDE8            lea	di,-$218[bp]
39426 9BD6           E8         FE29            call	lmulul
39427 9BD9           83C4                   04  add	sp,*4
39428                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39429 9BDC           8DBE       FDEC            lea	di,-$214[bp]
39430 9BE0           E8         FE1F            call	lmulul
39431 9BE3           83C4                   04  add	sp,*4
39432                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39433                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39434 9BE6           31C0                       xor	ax,ax
39435                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39436 9BE8           8986       FDF2            mov	-$20E[bp],ax
39437                                           !BCC_EOS
39438                                           ! 8884                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39439                                           ! 8885                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39440                                           ! 8886                     (size_64k <= vbe_info_block.TotalMemory)) {
39441                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39442 9BEC           E8         FB3E            call	_dispi_get_max_xres
39443 9BEF           8B9E       FDF0            mov	bx,-$210[bp]
39444                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39445 9BF3           3B47         14            cmp	ax,$14[bx]
39446 9BF6           72           61            jb  	.2E9
39447                       00009BF8            .2EC:
39448                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39449 9BF8           E8         FB54            call	_dispi_get_max_bpp
39450 9BFB           8B9E       FDF0            mov	bx,-$210[bp]
39451                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39452 9BFF           50                         push	ax
39453 9C00           8A47         1B            mov	al,$1B[bx]
39454 9C03           30E4                       xor	ah,ah
39455 9C05           3B86       FDEE            cmp	ax,-$212[bp]
39456 9C09           8DA6       FDF0            lea	sp,-$210[bp]
39457 9C0D           77           4A            ja  	.2E9
39458                       00009C0F            .2EB:
39459                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39460 9C0F           8B86       FDF2            mov	ax,-$20E[bp]
39461 9C13           3B86       FE10            cmp	ax,-$1F0[bp]
39462 9C17           77           40            ja  	.2E9
39463                       00009C19            .2EA:
39464                                           ! 8887                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
39465                                           ! Debug: list unsigned short cur_mode = [S+$212-$20C] (used reg = )
39466 9C19           FFB6       FDF6            push	-$20A[bp]
39467 9C1D           8B9E       FDF0            mov	bx,-$210[bp]
39468                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39469 9C21           FF37                       push	[bx]
39470                                           ! Debug: list * char = .2ED+0 (used reg = )
39471 9C23           BB                   A4C0  mov	bx,#.2ED
39472 9C26           53                         push	bx
39473                                           ! Debug: func () void = printf+0 (used reg = )
39474 9C27           E8         E1C0            call	_printf
39475 9C2A           83C4                   06  add	sp,*6
39476                                           !BCC_EOS
39477                                           ! 8888                   write_word(ES, DI + cur_ptr, cur_info->mode);
39478 9C2D           8B9E       FDF0            mov	bx,-$210[bp]
39479                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39480 9C31           FF37                       push	[bx]
39481                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39482 9C33           8B46         08            mov	ax,8[bp]
39483 9C36           0386       FDF4            add	ax,-$20C[bp]
39484                                           ! Debug: list unsigned int = ax+0 (used reg = )
39485 9C3A           50                         push	ax
39486                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39487 9C3B           FF76         06            push	6[bp]
39488                                           ! Debug: func () void = write_word+0 (used reg = )
39489 9C3E           E8         E13C            call	_write_word
39490 9C41           83C4                   06  add	sp,*6
39491                                           !BCC_EOS
39492                                           ! 8889                   cur_mode++;
39493                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39494 9C44           8B86       FDF6            mov	ax,-$20A[bp]
39495 9C48           40                         inc	ax
39496 9C49           8986       FDF6            mov	-$20A[bp],ax
39497                                           !BCC_EOS
39498                                           ! 8890                   cur_ptr+=2;
39499                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39500 9C4D           8B86       FDF4            mov	ax,-$20C[bp]
39501 9C51           40                         inc	ax
39502 9C52           40                         inc	ax
39503 9C53           8986       FDF4            mov	-$20C[bp],ax
39504                                           !BCC_EOS
39505                                           ! 8891                 } else {
39506 9C57           EB           21            jmp .2EE
39507                       00009C59            .2E9:
39508                                           ! 8892                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
39509 9C59           8B9E       FDF0            mov	bx,-$210[bp]
39510                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39511 9C5D           8A47         1B            mov	al,$1B[bx]
39512 9C60           30E4                       xor	ah,ah
39513 9C62           50                         push	ax
39514 9C63           8B9E       FDF0            mov	bx,-$210[bp]
39515                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39516 9C67           FF77         14            push	$14[bx]
39517 9C6A           8B9E       FDF0            mov	bx,-$210[bp]
39518                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39519 9C6E           FF37                       push	[bx]
39520                                           ! Debug: list * char = .2EF+0 (used reg = )
39521 9C70           BB                   A48F  mov	bx,#.2EF
39522 9C73           53                         push	bx
39523                                           ! Debug: func () void = printf+0 (used reg = )
39524 9C74           E8         E173            call	_printf
39525 9C77           83C4                   08  add	sp,*8
39526                                           !BCC_EOS
39527                                           ! 8893      
39528                                           ! 8893            }
39529                                           ! 8894                 cur_info++;
39530                       00009C7A            .2EE:
39531                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39532 9C7A           8B9E       FDF0            mov	bx,-$210[bp]
39533 9C7E           83C3                   44  add	bx,*$44
39534 9C81           899E       FDF0            mov	-$210[bp],bx
39535                                           !BCC_EOS
39536                                           ! 8895         } while (cur_info->mode != 0xFFFF);
39537                       00009C85            .2E7:
39538 9C85           8B9E       FDF0            mov	bx,-$210[bp]
39539                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39540 9C89           8B1F                       mov	bx,[bx]
39541 9C8B           81FB                 FFFF  cmp	bx,#$FFFF
39542 9C8F         0F85         FF1E            bne 	.2E8
39543                       00009C93            .2F0:
39544                                           !BCC_EOS
39545                                           ! 8896         write_word(ES, DI + cur_ptr, cur_info->mode);
39546                       00009C93            .2E6:
39547 9C93           8B9E       FDF0            mov	bx,-$210[bp]
39548                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39549 9C97           FF37                       push	[bx]
39550                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39551 9C99           8B46         08            mov	ax,8[bp]
39552 9C9C           0386       FDF4            add	ax,-$20C[bp]
39553                                           ! Debug: list unsigned int = ax+0 (used reg = )
39554 9CA0           50                         push	ax
39555                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39556 9CA1           FF76         06            push	6[bp]
39557                                           ! Debug: func () void = write_word+0 (used reg = )
39558 9CA4           E8         E0D6            call	_write_word
39559 9CA7           83C4                   06  add	sp,*6
39560                                           !BCC_EOS
39561                                           ! 8897         result = 0x4f;
39562                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39563 9CAA           B8                   004F  mov	ax,*$4F
39564 9CAD           8986       FDFA            mov	-$206[bp],ax
39565                                           !BCC_EOS
39566                                           ! 8898         write_word(ss, AX, result);
39567                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39568 9CB1           FFB6       FDFA            push	-$206[bp]
39569                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39570 9CB5           FF76         04            push	4[bp]
39571                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39572 9CB8           FF76         FE            push	-2[bp]
39573                                           ! Debug: func () void = write_word+0 (used reg = )
39574 9CBB           E8         E0BF            call	_write_word
39575 9CBE           83C4                   06  add	sp,*6
39576                                           !BCC_EOS
39577                                           ! 8899 }
39578 9CC1           89EC                       mov	sp,bp
39579 9CC3           5D                         pop	bp
39580 9CC4           C3                         ret
39581                                           ! 8900 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39582                                           ! Register BX used in function vbe_biosfn_return_controller_information
39583                                           ! 8901 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39584                                           export	_vbe_biosfn_return_mode_information
39585                       00009CC5            _vbe_biosfn_return_mode_information:
39586                                           !BCC_EOS
39587                                           !BCC_EOS
39588                                           !BCC_EOS
39589                                           !BCC_EOS
39590                                           ! 8902 {
39591                                           ! 8903         Bit16u result=0x0100;
39592 9CC5           55                         push	bp
39593 9CC6           89E5                       mov	bp,sp
39594 9CC8           4C                         dec	sp
39595 9CC9           4C                         dec	sp
39596                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39597 9CCA           B8                   0100  mov	ax,#$100
39598 9CCD           8946         FE            mov	-2[bp],ax
39599                                           !BCC_EOS
39600                                           ! 8904         Bit16u ss=get_SS();
39601 9CD0           4C                         dec	sp
39602 9CD1           4C                         dec	sp
39603                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39604 9CD2           E8         E0F6            call	_get_SS
39605                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39606 9CD5           8946         FC            mov	-4[bp],ax
39607                                           !BCC_EOS
39608                                           ! 8905         ModeInfoBlock info;
39609                                           !BCC_EOS
39610                                           ! 8906         ModeInfoListItem *cur_info;
39611                                           !BCC_EOS
39612                                           ! 8907         Boolean using_lfb;
39613                                           !BCC_EOS
39614                                           ! 8908         Bit16u lfb_addr;
39615                                           !BCC_EOS
39616                                           ! 8909         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
39617 9CD8           81C4                 FEFA  add	sp,#-$106
39618                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39619 9CDC           FF76         06            push	6[bp]
39620                                           ! Debug: list unsigned short DI = [S+$10E+8] (used reg = )
39621 9CDF           FF76         0A            push	$A[bp]
39622                                           ! Debug: list unsigned short ES = [S+$110+6] (used reg = )
39623 9CE2           FF76         08            push	8[bp]
39624                                           ! Debug: list * char = .2F1+0 (used reg = )
39625 9CE5           BB                   A458  mov	bx,#.2F1
39626 9CE8           53                         push	bx
39627                                           ! Debug: func () void = printf+0 (used reg = )
39628 9CE9           E8         E0FE            call	_printf
39629 9CEC           83C4                   08  add	sp,*8
39630                                           !BCC_EOS
39631                                           ! 8910         using_lfb=((CX & 0x4000) == 0x4000);
39632                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39633 9CEF           8B46         06            mov	ax,6[bp]
39634 9CF2           25                   4000  and	ax,#$4000
39635                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39636 9CF5           3D                   4000  cmp	ax,#$4000
39637 9CF8           75           04            jne	.2F2
39638 9CFA           B0                     01  mov	al,*1
39639 9CFC           EB           02            jmp	.2F3
39640                       00009CFE            .2F2:
39641 9CFE           30C0                       xor	al,al
39642                       00009D00            .2F3:
39643                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39644 9D00           30E4                       xor	ah,ah
39645 9D02           8986       FEF8            mov	-$108[bp],ax
39646                                           !BCC_EOS
39647                                           ! 8911         CX = (CX & 0x1ff);
39648                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39649 9D06           8B46         06            mov	ax,6[bp]
39650 9D09           25                   01FF  and	ax,#$1FF
39651                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39652 9D0C           8946         06            mov	6[bp],ax
39653                                           !BCC_EOS
39654                                           ! 8912         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39655                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39656 9D0F           8D9E       FEFA            lea	bx,-$106[bp]
39657 9D13           53                         push	bx
39658                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39659 9D14           FFB6       FEF8            push	-$108[bp]
39660                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39661 9D18           FF76         06            push	6[bp]
39662                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39663 9D1B           E8         FC25            call	_mode_info_find_mode
39664 9D1E           83C4                   06  add	sp,*6
39665                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39666 9D21           8986       FEFA            mov	-$106[bp],ax
39667                                           !BCC_EOS
39668                                           ! 8913         if (cur_info != 0)
39669                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39670 9D25           8B86       FEFA            mov	ax,-$106[bp]
39671 9D29           85C0                       test	ax,ax
39672 9D2B         0F84         0099            beq 	.2F4
39673                       00009D2F            .2F5:
39674                                           ! 8914         {
39675                                           ! 8915                 printf("VBE found mode %x\n",CX);
39676                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39677 9D2F           FF76         06            push	6[bp]
39678                                           ! Debug: list * char = .2F6+0 (used reg = )
39679 9D32           BB                   A445  mov	bx,#.2F6
39680 9D35           53                         push	bx
39681                                           ! Debug: func () void = printf+0 (used reg = )
39682 9D36           E8         E0B1            call	_printf
39683 9D39           83C4                   04  add	sp,*4
39684                                           !BCC_EOS
39685                                           ! 8916                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39686                                           ! Debug: list int = const $100 (used reg = )
39687 9D3C           B8                   0100  mov	ax,#$100
39688 9D3F           50                         push	ax
39689                                           ! Debug: list int = const 0 (used reg = )
39690 9D40           31C0                       xor	ax,ax
39691 9D42           50                         push	ax
39692                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39693 9D43           8D9E       FEFC            lea	bx,-$104[bp]
39694 9D47           53                         push	bx
39695                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39696 9D48           FF76         FC            push	-4[bp]
39697                                           ! Debug: func () void = memsetb+0 (used reg = )
39698 9D4B           E8         DF47            call	_memsetb
39699 9D4E           83C4                   08  add	sp,*8
39700                                           !BCC_EOS
39701                                           ! 8917                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39702                                           ! Debug: list int = const $42 (used reg = )
39703 9D51           B8                   0042  mov	ax,*$42
39704 9D54           50                         push	ax
39705 9D55           8B9E       FEFA            mov	bx,-$106[bp]
39706                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39707                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39708 9D59           43                         inc	bx
39709 9D5A           43                         inc	bx
39710 9D5B           53                         push	bx
39711                                           ! Debug: list unsigned int = const $C000 (used reg = )
39712 9D5C           B8                   C000  mov	ax,#$C000
39713 9D5F           50                         push	ax
39714                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39715 9D60           8D9E       FEFC            lea	bx,-$104[bp]
39716 9D64           53                         push	bx
39717                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39718 9D65           FF76         FC            push	-4[bp]
39719                                           ! Debug: func () void = memcpyb+0 (used reg = )
39720 9D68           E8         DF74            call	_memcpyb
39721 9D6B           83C4                   0A  add	sp,*$A
39722                                           !BCC_EOS
39723                                           ! 8918                 if (using_lfb) {
39724 9D6E           8B86       FEF8            mov	ax,-$108[bp]
39725 9D72           85C0                       test	ax,ax
39726 9D74           74           06            je  	.2F7
39727                       00009D76            .2F8:
39728                                           ! 8919                   info.NumberOfBanks = 1;
39729                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39730 9D76           B0                     01  mov	al,*1
39731 9D78           8886       FF16            mov	-$EA[bp],al
39732                                           !BCC_EOS
39733                                           ! 8920                 }
39734                                           ! 8921                 lfb_addr = pci_get_lfb_addr(0x1234);
39735                       00009D7C            .2F7:
39736                                           ! Debug: list int = const $1234 (used reg = )
39737 9D7C           B8                   1234  mov	ax,#$1234
39738 9D7F           50                         push	ax
39739                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39740 9D80           E8         E1A4            call	_pci_get_lfb_addr
39741 9D83           44                         inc	sp
39742 9D84           44                         inc	sp
39743                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39744 9D85           8986       FEF6            mov	-$10A[bp],ax
39745                                           !BCC_EOS
39746                                           ! 8922                 if (lfb_addr > 0) {
39747                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39748 9D89           8B86       FEF6            mov	ax,-$10A[bp]
39749 9D8D           85C0                       test	ax,ax
39750 9D8F           74           11            je  	.2F9
39751                       00009D91            .2FA:
39752                                           ! 8923                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39753                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39754 9D91           8B86       FEF6            mov	ax,-$10A[bp]
39755 9D95           31DB                       xor	bx,bx
39756                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39757 9D97           93                         xchg	bx,ax
39758 9D98           31C0                       xor	ax,ax
39759                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39760 9D9A           8986       FF24            mov	-$DC[bp],ax
39761 9D9E           899E       FF26            mov	-$DA[bp],bx
39762                                           !BCC_EOS
39763                                           ! 8924                 }
39764                                           ! 8925                 if (info.WinAAttributes & 0x01) {
39765                       00009DA2            .2F9:
39766                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39767 9DA2           8A86       FEFE            mov	al,-$102[bp]
39768 9DA6           24                     01  and	al,*1
39769 9DA8           84C0                       test	al,al
39770 9DAA           74           14            je  	.2FB
39771                       00009DAC            .2FC:
39772                                           ! 8926                   info.WinFuncPtr = 0xC0000000UL;
39773                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39774 9DAC           31C0                       xor	ax,ax
39775 9DAE           BB                   C000  mov	bx,#$C000
39776 9DB1           8986       FF08            mov	-$F8[bp],ax
39777 9DB5           899E       FF0A            mov	-$F6[bp],bx
39778                                           !BCC_EOS
39779                                           ! 8927                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39780                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39781                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39782 9DB9           BB                   97AD  mov	bx,#_dispi_set_bank_farcall
39783 9DBC           899E       FF08            mov	-$F8[bp],bx
39784                                           !BCC_EOS
39785                                           ! 8928                 }
39786                                           ! 8929                 result = 0x4f;
39787                       00009DC0            .2FB:
39788                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39789 9DC0           B8                   004F  mov	ax,*$4F
39790 9DC3           8946         FE            mov	-2[bp],ax
39791                                           !BCC_EOS
39792                                           ! 8930         }
39793                                           ! 8931         else
39794                                           ! 8932         {
39795 9DC6           EB           13            jmp .2FD
39796                       00009DC8            .2F4:
39797                                           ! 8933                 printf("VBE *NOT* found mode %x\n",CX);
39798                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39799 9DC8           FF76         06            push	6[bp]
39800                                           ! Debug: list * char = .2FE+0 (used reg = )
39801 9DCB           BB                   A42C  mov	bx,#.2FE
39802 9DCE           53                         push	bx
39803                                           ! Debug: func () void = printf+0 (used reg = )
39804 9DCF           E8         E018            call	_printf
39805 9DD2           83C4                   04  add	sp,*4
39806                                           !BCC_EOS
39807                                           ! 8934                 result = 0x100;
39808                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39809 9DD5           B8                   0100  mov	ax,#$100
39810 9DD8           8946         FE            mov	-2[bp],ax
39811                                           !BCC_EOS
39812                                           ! 8935         }
39813                                           ! 8936         if (result == 0x4f)
39814                       00009DDB            .2FD:
39815                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39816 9DDB           8B46         FE            mov	ax,-2[bp]
39817 9DDE           3D                   004F  cmp	ax,*$4F
39818 9DE1           75           18            jne 	.2FF
39819                       00009DE3            .300:
39820                                           ! 8937         {
39821                                           ! 8938                 memcpyb(ES, DI, ss, &info, sizeof(info));
39822                                           ! Debug: list int = const $100 (used reg = )
39823 9DE3           B8                   0100  mov	ax,#$100
39824 9DE6           50                         push	ax
39825                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39826 9DE7           8D9E       FEFC            lea	bx,-$104[bp]
39827 9DEB           53                         push	bx
39828                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39829 9DEC           FF76         FC            push	-4[bp]
39830                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39831 9DEF           FF76         0A            push	$A[bp]
39832                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39833 9DF2           FF76         08            push	8[bp]
39834                                           ! Debug: func () void = memcpyb+0 (used reg = )
39835 9DF5           E8         DEE7            call	_memcpyb
39836 9DF8           83C4                   0A  add	sp,*$A
39837                                           !BCC_EOS
39838                                           ! 8939         }
39839                                           ! 8940         write_word(ss, AX, result);
39840                       00009DFB            .2FF:
39841                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39842 9DFB           FF76         FE            push	-2[bp]
39843                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39844 9DFE           FF76         04            push	4[bp]
39845                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39846 9E01           FF76         FC            push	-4[bp]
39847                                           ! Debug: func () void = write_word+0 (used reg = )
39848 9E04           E8         DF76            call	_write_word
39849 9E07           83C4                   06  add	sp,*6
39850                                           !BCC_EOS
39851                                           ! 8941 }
39852 9E0A           89EC                       mov	sp,bp
39853 9E0C           5D                         pop	bp
39854 9E0D           C3                         ret
39855                                           ! 8942 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39856                                           ! Register BX used in function vbe_biosfn_return_mode_information
39857                                           ! 8943 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39858                                           export	_vbe_biosfn_set_mode
39859                       00009E0E            _vbe_biosfn_set_mode:
39860                                           !BCC_EOS
39861                                           !BCC_EOS
39862                                           !BCC_EOS
39863                                           !BCC_EOS
39864                                           ! 8944 {
39865                                           ! 8945         Bit16u ss = get_SS();
39866 9E0E           55                         push	bp
39867 9E0F           89E5                       mov	bp,sp
39868 9E11           4C                         dec	sp
39869 9E12           4C                         dec	sp
39870                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39871 9E13           E8         DFB5            call	_get_SS
39872                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39873 9E16           8946         FE            mov	-2[bp],ax
39874                                           !BCC_EOS
39875                                           ! 8946         Bit16u result;
39876                                           !BCC_EOS
39877                                           ! 8947         ModeInfoListItem *cur_info;
39878                                           !BCC_EOS
39879                                           ! 8948         Boolean using_lfb;
39880                                           !BCC_EOS
39881                                           ! 8949         Bit8u no_clear;
39882                                           !BCC_EOS
39883                                           ! 8950         Bit8u lfb_flag;
39884                                           !BCC_EOS
39885                                           ! 8951         using_lfb=((BX & 0x4000) == 0x4000);
39886 9E19           83C4                   F8  add	sp,*-8
39887                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39888 9E1C           8B46         06            mov	ax,6[bp]
39889 9E1F           25                   4000  and	ax,#$4000
39890                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39891 9E22           3D                   4000  cmp	ax,#$4000
39892 9E25           75           04            jne	.301
39893 9E27           B0                     01  mov	al,*1
39894 9E29           EB           02            jmp	.302
39895                       00009E2B            .301:
39896 9E2B           30C0                       xor	al,al
39897                       00009E2D            .302:
39898                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39899 9E2D           30E4                       xor	ah,ah
39900 9E2F           8946         F8            mov	-8[bp],ax
39901                                           !BCC_EOS
39902                                           ! 8952         lfb_flag=using_lfb?0x40:0;
39903 9E32           8B46         F8            mov	ax,-8[bp]
39904 9E35           85C0                       test	ax,ax
39905 9E37           74           04            je  	.303
39906                       00009E39            .304:
39907 9E39           B0                     40  mov	al,*$40
39908 9E3B           EB           02            jmp .305
39909                       00009E3D            .303:
39910 9E3D           30C0                       xor	al,al
39911                       00009E3F            .305:
39912                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39913 9E3F           8846         F6            mov	-$A[bp],al
39914                                           !BCC_EOS
39915                                           ! 8953         
39916                                           ! 8953 no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
39917                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39918 9E42           8B46         06            mov	ax,6[bp]
39919 9E45           25                   8000  and	ax,#$8000
39920                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39921 9E48           3D                   8000  cmp	ax,#$8000
39922 9E4B           75           04            jne 	.306
39923                       00009E4D            .307:
39924 9E4D           B0                     80  mov	al,#$80
39925 9E4F           EB           02            jmp .308
39926                       00009E51            .306:
39927 9E51           30C0                       xor	al,al
39928                       00009E53            .308:
39929                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39930 9E53           8846         F7            mov	-9[bp],al
39931                                           !BCC_EOS
39932                                           ! 8954         BX = (BX & 0x1ff);
39933                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39934 9E56           8B46         06            mov	ax,6[bp]
39935 9E59           25                   01FF  and	ax,#$1FF
39936                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39937 9E5C           8946         06            mov	6[bp],ax
39938                                           !BCC_EOS
39939                                           ! 8955         if (BX<0x0100)
39940                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39941 9E5F           8B46         06            mov	ax,6[bp]
39942 9E62           3D                   0100  cmp	ax,#$100
39943 9E65           73           23            jae 	.309
39944                       00009E67            .30A:
39945                                           ! 8956         {
39946                                           ! 8957                 Bit8u mode;
39947                                           !BCC_EOS
39948                                           ! 8958                 dispi_set_enable(0x00);
39949 9E67           4C                         dec	sp
39950 9E68           4C                         dec	sp
39951                                           ! Debug: list int = const 0 (used reg = )
39952 9E69           31C0                       xor	ax,ax
39953 9E6B           50                         push	ax
39954                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39955 9E6C           E8         F902            call	_dispi_set_enable
39956 9E6F           44                         inc	sp
39957 9E70           44                         inc	sp
39958                                           !BCC_EOS
39959                                           ! 8959                 mode=(BX & 0xff);
39960                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39961 9E71           8A46         06            mov	al,6[bp]
39962                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39963 9E74           8846         F5            mov	-$B[bp],al
39964                                           !BCC_EOS
39965                                           ! 8960                 biosfn_set_video_mode(mode);
39966                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39967 9E77           8A46         F5            mov	al,-$B[bp]
39968 9E7A           30E4                       xor	ah,ah
39969 9E7C           50                         push	ax
39970                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39971 9E7D           E8         9D41            call	_biosfn_set_video_mode
39972 9E80           44                         inc	sp
39973 9E81           44                         inc	sp
39974                                           !BCC_EOS
39975                                           ! 8961                 result = 0x4f;
39976                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39977 9E82           B8                   004F  mov	ax,*$4F
39978 9E85           8946         FC            mov	-4[bp],ax
39979                                           !BCC_EOS
39980                                           ! 8962         }
39981 9E88           44                         inc	sp
39982 9E89           44                         inc	sp
39983                                           ! 8963         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
39984                       00009E8A            .309:
39985                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39986 9E8A           8D5E         FA            lea	bx,-6[bp]
39987 9E8D           53                         push	bx
39988                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39989 9E8E           FF76         F8            push	-8[bp]
39990                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39991 9E91           FF76         06            push	6[bp]
39992                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39993 9E94           E8         FAAC            call	_mode_info_find_mode
39994 9E97           83C4                   06  add	sp,*6
39995                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39996 9E9A           8946         FA            mov	-6[bp],ax
39997                                           !BCC_EOS
39998                                           ! 8964         if (cur_info != 0)
39999                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
40000 9E9D           8B46         FA            mov	ax,-6[bp]
40001 9EA0           85C0                       test	ax,ax
40002 9EA2         0F84         00B5            beq 	.30B
40003                       00009EA6            .30C:
40004                                           ! 8965         {
40005                                           ! 8966                 printf("VBE found mode %x, setting:\n", BX);
40006                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40007 9EA6           FF76         06            push	6[bp]
40008                                           ! Debug: list * char = .30D+0 (used reg = )
40009 9EA9           BB                   A40F  mov	bx,#.30D
40010 9EAC           53                         push	bx
40011                                           ! Debug: func () void = printf+0 (used reg = )
40012 9EAD           E8         DF3A            call	_printf
40013 9EB0           83C4                   04  add	sp,*4
40014                                           !BCC_EOS
40015                                           ! 8967                 printf("\txres%x yres%x bpp%x\n",
40016                                           ! 8968                         cur_info->info.XResolution,
40017                                           ! 8969                         cur_info->info.YResolution,
40018                                           ! 8970                         cur_info->info.BitsPerPixel);
40019 9EB3           8B5E         FA            mov	bx,-6[bp]
40020                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40021 9EB6           8A47         1B            mov	al,$1B[bx]
40022 9EB9           30E4                       xor	ah,ah
40023 9EBB           50                         push	ax
40024 9EBC           8B5E         FA            mov	bx,-6[bp]
40025                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40026 9EBF           FF77         16            push	$16[bx]
40027 9EC2           8B5E         FA            mov	bx,-6[bp]
40028                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40029 9EC5           FF77         14            push	$14[bx]
40030                                           ! Debug: list * char = .30E+0 (used reg = )
40031 9EC8           BB                   A3F9  mov	bx,#.30E
40032 9ECB           53                         push	bx
40033                                           ! Debug: func () void = printf+0 (used reg = )
40034 9ECC           E8         DF1B            call	_printf
40035 9ECF           83C4                   08  add	sp,*8
40036                                           !BCC_EOS
40037                                           ! 8971                 dispi_set_enable(0x00);
40038                                           ! Debug: list int = const 0 (used reg = )
40039 9ED2           31C0                       xor	ax,ax
40040 9ED4           50                         push	ax
40041                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40042 9ED5           E8         F899            call	_dispi_set_enable
40043 9ED8           44                         inc	sp
40044 9ED9           44                         inc	sp
40045                                           !BCC_EOS
40046                                           ! 8972                 if (cur_info->info.BitsPerPixel == 4)
40047 9EDA           8B5E         FA            mov	bx,-6[bp]
40048                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
40049 9EDD           8A47         1B            mov	al,$1B[bx]
40050 9EE0           3C                     04  cmp	al,*4
40051 9EE2           75           09            jne 	.30F
40052                       00009EE4            .310:
40053                                           ! 8973                 {
40054                                           ! 8974                   biosfn_set_video_mode(0x6a);
40055                                           ! Debug: list int = const $6A (used reg = )
40056 9EE4           B8                   006A  mov	ax,*$6A
40057 9EE7           50                         push	ax
40058                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
40059 9EE8           E8         9CD6            call	_biosfn_set_video_mode
40060 9EEB           44                         inc	sp
40061 9EEC           44                         inc	sp
40062                                           !BCC_EOS
40063                                           ! 8975                 }
40064                                           ! 8976                 dispi_set_bpp(cur_info->info.BitsPerPixel);
40065                       00009EED            .30F:
40066 9EED           8B5E         FA            mov	bx,-6[bp]
40067                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40068 9EF0           8A47         1B            mov	al,$1B[bx]
40069 9EF3           30E4                       xor	ah,ah
40070 9EF5           50                         push	ax
40071                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
40072 9EF6           E8         F7FD            call	_dispi_set_bpp
40073 9EF9           44                         inc	sp
40074 9EFA           44                         inc	sp
40075                                           !BCC_EOS
40076                                           ! 8977                 dispi_set_xres(cur_info->info.XResolution);
40077 9EFB           8B5E         FA            mov	bx,-6[bp]
40078                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40079 9EFE           FF77         14            push	$14[bx]
40080                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
40081 9F01           E8         F7BD            call	_dispi_set_xres
40082 9F04           44                         inc	sp
40083 9F05           44                         inc	sp
40084                                           !BCC_EOS
40085                                           ! 8978                 dispi_set_yres(cur_info->info.YResolution);
40086 9F06           8B5E         FA            mov	bx,-6[bp]
40087                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40088 9F09           FF77         16            push	$16[bx]
40089                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
40090 9F0C           E8         F7C9            call	_dispi_set_yres
40091 9F0F           44                         inc	sp
40092 9F10           44                         inc	sp
40093                                           !BCC_EOS
40094                                           ! 8979                 dispi_set_bank(0);
40095                                           ! Debug: list int = const 0 (used reg = )
40096 9F11           31C0                       xor	ax,ax
40097 9F13           50                         push	ax
40098                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
40099 9F14           E8         F878            call	_dispi_set_bank
40100 9F17           44                         inc	sp
40101 9F18           44                         inc	sp
40102                                           !BCC_EOS
40103                                           ! 8980                 dispi_set_enable(0x01 | no_clear | lfb_flag);
40104                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
40105                                           ! Debug: expression subtree swapping
40106 9F19           8A46         F7            mov	al,-9[bp]
40107 9F1C           0C                     01  or	al,*1
40108                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
40109 9F1E           0A46         F6            or	al,-$A[bp]
40110                                           ! Debug: list unsigned char = al+0 (used reg = )
40111 9F21           30E4                       xor	ah,ah
40112 9F23           50                         push	ax
40113                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40114 9F24           E8         F84A            call	_dispi_set_enable
40115 9F27           44                         inc	sp
40116 9F28           44                         inc	sp
40117                                           !BCC_EOS
40118                                           ! 8981                 vga_compat_setup();
40119                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
40120 9F29           E8         F940            call	_vga_compat_setup
40121                                           !BCC_EOS
40122                                           ! 8982                 write_word(0x40,0xBA,BX);
40123                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40124 9F2C           FF76         06            push	6[bp]
40125                                           ! Debug: list int = const $BA (used reg = )
40126 9F2F           B8                   00BA  mov	ax,#$BA
40127 9F32           50                         push	ax
40128                                           ! Debug: list int = const $40 (used reg = )
40129 9F33           B8                   0040  mov	ax,*$40
40130 9F36           50                         push	ax
40131                                           ! Debug: func () void = write_word+0 (used reg = )
40132 9F37           E8         DE43            call	_write_word
40133 9F3A           83C4                   06  add	sp,*6
40134                                           !BCC_EOS
40135                                           ! 8983                 write_byte(0x40,0x87,(0x60 | no_clear));
40136                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
40137                                           ! Debug: expression subtree swapping
40138 9F3D           8A46         F7            mov	al,-9[bp]
40139 9F40           0C                     60  or	al,*$60
40140                                           ! Debug: list unsigned char = al+0 (used reg = )
40141 9F42           30E4                       xor	ah,ah
40142 9F44           50                         push	ax
40143                                           ! Debug: list int = const $87 (used reg = )
40144 9F45           B8                   0087  mov	ax,#$87
40145 9F48           50                         push	ax
40146                                           ! Debug: list int = const $40 (used reg = )
40147 9F49           B8                   0040  mov	ax,*$40
40148 9F4C           50                         push	ax
40149                                           ! Debug: func () void = write_byte+0 (used reg = )
40150 9F4D           E8         DE15            call	_write_byte
40151 9F50           83C4                   06  add	sp,*6
40152                                           !BCC_EOS
40153                                           ! 8984                 result = 0x4f;
40154                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40155 9F53           B8                   004F  mov	ax,*$4F
40156 9F56           8946         FC            mov	-4[bp],ax
40157                                           !BCC_EOS
40158                                           ! 8985         }
40159                                           ! 8986         else
40160                                           ! 8987         {
40161 9F59           EB           21            jmp .311
40162                       00009F5B            .30B:
40163                                           ! 8988                 printf("VBE *NOT* found mode %x\n" , BX);
40164                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40165 9F5B           FF76         06            push	6[bp]
40166                                           ! Debug: list * char = .312+0 (used reg = )
40167 9F5E           BB                   A3E0  mov	bx,#.312
40168 9F61           53                         push	bx
40169                                           ! Debug: func () void = printf+0 (used reg = )
40170 9F62           E8         DE85            call	_printf
40171 9F65           83C4                   04  add	sp,*4
40172                                           !BCC_EOS
40173                                           ! 8989                 result = 0x100;
40174                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
40175 9F68           B8                   0100  mov	ax,#$100
40176 9F6B           8946         FC            mov	-4[bp],ax
40177                                           !BCC_EOS
40178                                           ! 8990                 if (BX == 3)
40179                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
40180 9F6E           8B46         06            mov	ax,6[bp]
40181 9F71           3D                   0003  cmp	ax,*3
40182 9F74           75           06            jne 	.313
40183                       00009F76            .314:
40184                                           ! 8991                         result = 0x4f;
40185                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40186 9F76           B8                   004F  mov	ax,*$4F
40187 9F79           8946         FC            mov	-4[bp],ax
40188                                           !BCC_EOS
40189                                           ! 8992         }
40190                       00009F7C            .313:
40191                                           ! 8993         write_word(ss, AX, result);
40192                       00009F7C            .311:
40193                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
40194 9F7C           FF76         FC            push	-4[bp]
40195                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
40196 9F7F           FF76         04            push	4[bp]
40197                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
40198 9F82           FF76         FE            push	-2[bp]
40199                                           ! Debug: func () void = write_word+0 (used reg = )
40200 9F85           E8         DDF5            call	_write_word
40201 9F88           83C4                   06  add	sp,*6
40202                                           !BCC_EOS
40203                                           ! 8994 }
40204 9F8B           89EC                       mov	sp,bp
40205 9F8D           5D                         pop	bp
40206 9F8E           C3                         ret
40207                                           ! 8995 #asm
40208                                           !BCC_ASM
40209                       00000008            _vbe_biosfn_set_mode.DI	set	8
40210                       00000006            _vbe_biosfn_set_mode.ES	set	6
40211                       00000002            _vbe_biosfn_set_mode.AX	set	2
40212                       00000004            _vbe_biosfn_set_mode.BX	set	4
40213                       00009F8F            vbe_biosfn_return_current_mode:
40214 9F8F           1E                           push ds
40215 9F90           B8                   0040    mov ax, # 0x40
40216 9F93           8ED8                         mov ds, ax
40217 9F95           E8         F7E9              call dispi_get_enable
40218 9F98           25                   0001    and ax, # 0x01
40219 9F9B           74           09              jz no_vbe_mode
40220 9F9D           BB                   00BA    mov bx, # 0xBA
40221 9FA0           8B07                         mov ax, [bx]
40222 9FA2           89C3                         mov bx, ax
40223 9FA4           75           09              jnz vbe_03_ok
40224                       00009FA6            no_vbe_mode:
40225 9FA6           BB                   0049    mov bx, # 0x49
40226 9FA9           8A07                         mov al, [bx]
40227 9FAB           88C3                         mov bl, al
40228 9FAD           30FF                         xor bh, bh
40229                       00009FAF            vbe_03_ok:
40230 9FAF           B8                   004F    mov ax, #0x004f
40231 9FB2           1F                           pop ds
40232 9FB3           C3                           ret
40233                                           ! 9016 endasm
40234                                           !BCC_ENDASM
40235                                           ! 9017 Bit16u vbe_biosfn_read_video_state_size()
40236                                           ! Register BX used in function vbe_biosfn_set_mode
40237                                           ! 9018 {
40238                                           export	_vbe_biosfn_read_video_state_size
40239                       00009FB4            _vbe_biosfn_read_video_state_size:
40240                                           ! 9019     return 9 * 2;
40241 9FB4           55                         push	bp
40242 9FB5           89E5                       mov	bp,sp
40243 9FB7           B8                   0012  mov	ax,*$12
40244 9FBA           5D                         pop	bp
40245 9FBB           C3                         ret
40246                                           !BCC_EOS
40247                                           ! 9020 }
40248                                           ! 9021 void vbe_biosfn_save_video_state(ES, BX)
40249                                           ! 9022      Bit16u ES; Bit16u BX;
40250                                           export	_vbe_biosfn_save_video_state
40251                       00009FBC            _vbe_biosfn_save_video_state:
40252                                           !BCC_EOS
40253                                           !BCC_EOS
40254                                           ! 9023 {
40255                                           ! 9024     Bit16u enable, i;
40256                                           !BCC_EOS
40257                                           ! 9025     outw(0x01CE,0x4);
40258 9FBC           55                         push	bp
40259 9FBD           89E5                       mov	bp,sp
40260 9FBF           83C4                   FC  add	sp,*-4
40261                                           ! Debug: list int = const 4 (used reg = )
40262 9FC2           B8                   0004  mov	ax,*4
40263 9FC5           50                         push	ax
40264                                           ! Debug: list int = const $1CE (used reg = )
40265 9FC6           B8                   01CE  mov	ax,#$1CE
40266 9FC9           50                         push	ax
40267                                           ! Debug: func () void = outw+0 (used reg = )
40268 9FCA           E8         DDEE            call	_outw
40269 9FCD           83C4                   04  add	sp,*4
40270                                           !BCC_EOS
40271                                           ! 9026     enable = inw(0x01CF);
40272                                           ! Debug: list int = const $1CF (used reg = )
40273 9FD0           B8                   01CF  mov	ax,#$1CF
40274 9FD3           50                         push	ax
40275                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40276 9FD4           E8         DDC9            call	_inw
40277 9FD7           44                         inc	sp
40278 9FD8           44                         inc	sp
40279                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40280 9FD9           8946         FE            mov	-2[bp],ax
40281                                           !BCC_EOS
40282                                           ! 9027    
40283                                           ! 9027  write_word(ES, BX, enable);
40284                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40285 9FDC           FF76         FE            push	-2[bp]
40286                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40287 9FDF           FF76         06            push	6[bp]
40288                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40289 9FE2           FF76         04            push	4[bp]
40290                                           ! Debug: func () void = write_word+0 (used reg = )
40291 9FE5           E8         DD95            call	_write_word
40292 9FE8           83C4                   06  add	sp,*6
40293                                           !BCC_EOS
40294                                           ! 9028     BX += 2;
40295                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40296 9FEB           8B46         06            mov	ax,6[bp]
40297 9FEE           40                         inc	ax
40298 9FEF           40                         inc	ax
40299 9FF0           8946         06            mov	6[bp],ax
40300                                           !BCC_EOS
40301                                           ! 9029     if (!(enable & 0x01))
40302                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40303 9FF3           8A46         FE            mov	al,-2[bp]
40304 9FF6           24                     01  and	al,*1
40305 9FF8           84C0                       test	al,al
40306 9FFA           75           04            jne 	.315
40307                       00009FFC            .316:
40308                                           ! 9030         return;
40309 9FFC           89EC                       mov	sp,bp
40310 9FFE           5D                         pop	bp
40311 9FFF           C3                         ret
40312                                           !BCC_EOS
40313                                           ! 9031     for(i = 0x1; i <= 0x9; i++) {
40314                       0000A000            .315:
40315                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
40316 A000           B8                   0001  mov	ax,*1
40317 A003           8946         FC            mov	-4[bp],ax
40318                                           !BCC_EOS
40319                                           !BCC_EOS
40320 A006           EB           3A            jmp .319
40321                       0000A008            .31A:
40322                                           ! 9032         if (i != 0x4) {
40323                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
40324 A008           8B46         FC            mov	ax,-4[bp]
40325 A00B           3D                   0004  cmp	ax,*4
40326 A00E           74           2B            je  	.31B
40327                       0000A010            .31C:
40328                                           ! 9033             outw(0x01CE, i);
40329                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40330 A010           FF76         FC            push	-4[bp]
40331                                           ! Debug: list int = const $1CE (used reg = )
40332 A013           B8                   01CE  mov	ax,#$1CE
40333 A016           50                         push	ax
40334                                           ! Debug: func () void = outw+0 (used reg = )
40335 A017           E8         DDA1            call	_outw
40336 A01A           83C4                   04  add	sp,*4
40337                                           !BCC_EOS
40338                                           ! 9034             write_word(ES, BX, inw(0x01CF));
40339                                           ! Debug: list int = const $1CF (used reg = )
40340 A01D           B8                   01CF  mov	ax,#$1CF
40341 A020           50                         push	ax
40342                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40343 A021           E8         DD7C            call	_inw
40344 A024           44                         inc	sp
40345 A025           44                         inc	sp
40346                                           ! Debug: list unsigned short = ax+0 (used reg = )
40347 A026           50                         push	ax
40348                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40349 A027           FF76         06            push	6[bp]
40350                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40351 A02A           FF76         04            push	4[bp]
40352                                           ! Debug: func () void = write_word+0 (used reg = )
40353 A02D           E8         DD4D            call	_write_word
40354 A030           83C4                   06  add	sp,*6
40355                                           !BCC_EOS
40356                                           ! 9035             BX += 2;
40357                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40358 A033           8B46         06            mov	ax,6[bp]
40359 A036           40                         inc	ax
40360 A037           40                         inc	ax
40361 A038           8946         06            mov	6[bp],ax
40362                                           !BCC_EOS
40363                                           ! 9036         }
40364                                           ! 9037     }
40365                       0000A03B            .31B:
40366                                           ! 9038 }
40367                       0000A03B            .318:
40368                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40369 A03B           8B46         FC            mov	ax,-4[bp]
40370 A03E           40                         inc	ax
40371 A03F           8946         FC            mov	-4[bp],ax
40372                       0000A042            .319:
40373                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40374 A042           8B46         FC            mov	ax,-4[bp]
40375 A045           3D                   0009  cmp	ax,*9
40376 A048           76           BE            jbe	.31A
40377                       0000A04A            .31D:
40378                       0000A04A            .317:
40379 A04A           89EC                       mov	sp,bp
40380 A04C           5D                         pop	bp
40381 A04D           C3                         ret
40382                                           ! 9039 void vbe_biosfn_restore_video_state(ES, BX)
40383                                           ! 9040      Bit16u ES; Bit16u BX;
40384                                           export	_vbe_biosfn_restore_video_state
40385                       0000A04E            _vbe_biosfn_restore_video_state:
40386                                           !BCC_EOS
40387                                           !BCC_EOS
40388                                           ! 9041 {
40389                                           ! 9042     Bit16u enable, i;
40390                                           !BCC_EOS
40391                                           ! 9043     enable = read_word(ES, BX);
40392 A04E           55                         push	bp
40393 A04F           89E5                       mov	bp,sp
40394 A051           83C4                   FC  add	sp,*-4
40395                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40396 A054           FF76         06            push	6[bp]
40397                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40398 A057           FF76         04            push	4[bp]
40399                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40400 A05A           E8         DCF5            call	_read_word
40401 A05D           83C4                   04  add	sp,*4
40402                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40403 A060           8946         FE            mov	-2[bp],ax
40404                                           !BCC_EOS
40405                                           ! 9044     BX += 2;
40406                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40407 A063           8B46         06            mov	ax,6[bp]
40408 A066           40                         inc	ax
40409 A067           40                         inc	ax
40410 A068           8946         06            mov	6[bp],ax
40411                                           !BCC_EOS
40412                                           ! 9045     if (!(enable & 0x01)) {
40413                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40414 A06B           8A46         FE            mov	al,-2[bp]
40415 A06E           24                     01  and	al,*1
40416 A070           84C0                       test	al,al
40417 A072           75           1E            jne 	.31E
40418                       0000A074            .31F:
40419                                           ! 9046         outw(0x01CE,0x4);
40420                                           ! Debug: list int = const 4 (used reg = )
40421 A074           B8                   0004  mov	ax,*4
40422 A077           50                         push	ax
40423                                           ! Debug: list int = const $1CE (used reg = )
40424 A078           B8                   01CE  mov	ax,#$1CE
40425 A07B           50                         push	ax
40426                                           ! Debug: func () void = outw+0 (used reg = )
40427 A07C           E8         DD3C            call	_outw
40428 A07F           83C4                   04  add	sp,*4
40429                                           !BCC_EOS
40430                                           ! 9047         outw(0x01CF, enable);
40431                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40432 A082           FF76         FE            push	-2[bp]
40433                                           ! Debug: list int = const $1CF (used reg = )
40434 A085           B8                   01CF  mov	ax,#$1CF
40435 A088           50                         push	ax
40436                                           ! Debug: func () void = outw+0 (used reg = )
40437 A089           E8         DD2F            call	_outw
40438 A08C           83C4                   04  add	sp,*4
40439                                           !BCC_EOS
40440                                           ! 9048     } else {
40441 A08F           E9         00E5            br 	.320
40442                       0000A092            .31E:
40443                                           ! 9049         outw(0x01CE, 0x1);
40444                                           ! Debug: list int = const 1 (used reg = )
40445 A092           B8                   0001  mov	ax,*1
40446 A095           50                         push	ax
40447                                           ! Debug: list int = const $1CE (used reg = )
40448 A096           B8                   01CE  mov	ax,#$1CE
40449 A099           50                         push	ax
40450                                           ! Debug: func () void = outw+0 (used reg = )
40451 A09A           E8         DD1E            call	_outw
40452 A09D           83C4                   04  add	sp,*4
40453                                           !BCC_EOS
40454                                           ! 9050         outw(0x01CF, read_word(ES, BX));
40455                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40456 A0A0           FF76         06            push	6[bp]
40457                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40458 A0A3           FF76         04            push	4[bp]
40459                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40460 A0A6           E8         DCA9            call	_read_word
40461 A0A9           83C4                   04  add	sp,*4
40462                                           ! Debug: list unsigned short = ax+0 (used reg = )
40463 A0AC           50                         push	ax
40464                                           ! Debug: list int = const $1CF (used reg = )
40465 A0AD           B8                   01CF  mov	ax,#$1CF
40466 A0B0           50                         push	ax
40467                                           ! Debug: func () void = outw+0 (used reg = )
40468 A0B1           E8         DD07            call	_outw
40469 A0B4           83C4                   04  add	sp,*4
40470                                           !BCC_EOS
40471                                           ! 9051         BX += 2;
40472                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40473 A0B7           8B46         06            mov	ax,6[bp]
40474 A0BA           40                         inc	ax
40475 A0BB           40                         inc	ax
40476 A0BC           8946         06            mov	6[bp],ax
40477                                           !BCC_EOS
40478                                           ! 9052         outw(0x01CE, 0x2);
40479                                           ! Debug: list int = const 2 (used reg = )
40480 A0BF           B8                   0002  mov	ax,*2
40481 A0C2           50                         push	ax
40482                                           ! Debug: list int = const $1CE (used reg = )
40483 A0C3           B8                   01CE  mov	ax,#$1CE
40484 A0C6           50                         push	ax
40485                                           ! Debug: func () void = outw+0 (used reg = )
40486 A0C7           E8         DCF1            call	_outw
40487 A0CA           83C4                   04  add	sp,*4
40488                                           !BCC_EOS
40489                                           ! 9053         outw(0x01CF, read_word(ES, BX));
40490                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40491 A0CD           FF76         06            push	6[bp]
40492                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40493 A0D0           FF76         04            push	4[bp]
40494                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40495 A0D3           E8         DC7C            call	_read_word
40496 A0D6           83C4                   04  add	sp,*4
40497                                           ! Debug: list unsigned short = ax+0 (used reg = )
40498 A0D9           50                         push	ax
40499                                           ! Debug: list int = const $1CF (used reg = )
40500 A0DA           B8                   01CF  mov	ax,#$1CF
40501 A0DD           50                         push	ax
40502                                           ! Debug: func () void = outw+0 (used reg = )
40503 A0DE           E8         DCDA            call	_outw
40504 A0E1           83C4                   04  add	sp,*4
40505                                           !BCC_EOS
40506                                           ! 9054         BX += 2;
40507                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40508 A0E4           8B46         06            mov	ax,6[bp]
40509 A0E7           40                         inc	ax
40510 A0E8           40                         inc	ax
40511 A0E9           8946         06            mov	6[bp],ax
40512                                           !BCC_EOS
40513                                           ! 9055         outw(0x01CE, 0x3);
40514                                           ! Debug: list int = const 3 (used reg = )
40515 A0EC           B8                   0003  mov	ax,*3
40516 A0EF           50                         push	ax
40517                                           ! Debug: list int = const $1CE (used reg = )
40518 A0F0           B8                   01CE  mov	ax,#$1CE
40519 A0F3           50                         push	ax
40520                                           ! Debug: func () void = outw+0 (used reg = )
40521 A0F4           E8         DCC4            call	_outw
40522 A0F7           83C4                   04  add	sp,*4
40523                                           !BCC_EOS
40524                                           ! 9056         outw(0x01CF, read_word(ES, BX));
40525                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40526 A0FA           FF76         06            push	6[bp]
40527                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40528 A0FD           FF76         04            push	4[bp]
40529                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40530 A100           E8         DC4F            call	_read_word
40531 A103           83C4                   04  add	sp,*4
40532                                           ! Debug: list unsigned short = ax+0 (used reg = )
40533 A106           50                         push	ax
40534                                           ! Debug: list int = const $1CF (used reg = )
40535 A107           B8                   01CF  mov	ax,#$1CF
40536 A10A           50                         push	ax
40537                                           ! Debug: func () void = outw+0 (used reg = )
40538 A10B           E8         DCAD            call	_outw
40539 A10E           83C4                   04  add	sp,*4
40540                                           !BCC_EOS
40541                                           ! 9057         BX += 2;
40542                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40543 A111           8B46         06            mov	ax,6[bp]
40544 A114           40                         inc	ax
40545 A115           40                         inc	ax
40546 A116           8946         06            mov	6[bp],ax
40547                                           !BCC_EOS
40548                                           ! 9058         outw(0x01CE,0x4);
40549                                           ! Debug: list int = const 4 (used reg = )
40550 A119           B8                   0004  mov	ax,*4
40551 A11C           50                         push	ax
40552                                           ! Debug: list int = const $1CE (used reg = )
40553 A11D           B8                   01CE  mov	ax,#$1CE
40554 A120           50                         push	ax
40555                                           ! Debug: func () void = outw+0 (used reg = )
40556 A121           E8         DC97            call	_outw
40557 A124           83C4                   04  add	sp,*4
40558                                           !BCC_EOS
40559                                           ! 9059         outw(0x01CF, enable);
40560                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40561 A127           FF76         FE            push	-2[bp]
40562                                           ! Debug: list int = const $1CF (used reg = )
40563 A12A           B8                   01CF  mov	ax,#$1CF
40564 A12D           50                         push	ax
40565                                           ! Debug: func () void = outw+0 (used reg = )
40566 A12E           E8         DC8A            call	_outw
40567 A131           83C4                   04  add	sp,*4
40568                                           !BCC_EOS
40569                                           ! 9060         for(i = 0x5; i <= 0x9; i++) {
40570                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40571 A134           B8                   0005  mov	ax,*5
40572 A137           8946         FC            mov	-4[bp],ax
40573                                           !BCC_EOS
40574                                           !BCC_EOS
40575 A13A           EB           33            jmp .323
40576                       0000A13C            .324:
40577                                           ! 9061             outw(0x01CE, i);
40578                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40579 A13C           FF76         FC            push	-4[bp]
40580                                           ! Debug: list int = const $1CE (used reg = )
40581 A13F           B8                   01CE  mov	ax,#$1CE
40582 A142           50                         push	ax
40583                                           ! Debug: func () void = outw+0 (used reg = )
40584 A143           E8         DC75            call	_outw
40585 A146           83C4                   04  add	sp,*4
40586                                           !BCC_EOS
40587                                           ! 9062             outw(0x01CF, read_word(ES, BX));
40588                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40589 A149           FF76         06            push	6[bp]
40590                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40591 A14C           FF76         04            push	4[bp]
40592                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40593 A14F           E8         DC00            call	_read_word
40594 A152           83C4                   04  add	sp,*4
40595                                           ! Debug: list unsigned short = ax+0 (used reg = )
40596 A155           50                         push	ax
40597                                           ! Debug: list int = const $1CF (used reg = )
40598 A156           B8                   01CF  mov	ax,#$1CF
40599 A159           50                         push	ax
40600                                           ! Debug: func () void = outw+0 (used reg = )
40601 A15A           E8         DC5E            call	_outw
40602 A15D           83C4                   04  add	sp,*4
40603                                           !BCC_EOS
40604                                           ! 9063             BX += 2;
40605                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40606 A160           8B46         06            mov	ax,6[bp]
40607 A163           40                         inc	ax
40608 A164           40                         inc	ax
40609 A165           8946         06            mov	6[bp],ax
40610                                           !BCC_EOS
40611                                           ! 9064         }
40612                                           ! 9065     }
40613                       0000A168            .322:
40614                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40615 A168           8B46         FC            mov	ax,-4[bp]
40616 A16B           40                         inc	ax
40617 A16C           8946         FC            mov	-4[bp],ax
40618                       0000A16F            .323:
40619                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40620 A16F           8B46         FC            mov	ax,-4[bp]
40621 A172           3D                   0009  cmp	ax,*9
40622 A175           76           C5            jbe	.324
40623                       0000A177            .325:
40624                       0000A177            .321:
40625                                           ! 9066 }
40626                       0000A177            .320:
40627 A177           89EC                       mov	sp,bp
40628 A179           5D                         pop	bp
40629 A17A           C3                         ret
40630                                           ! 9067 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40631                                           ! 9068 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40632                                           export	_vbe_biosfn_save_restore_state
40633                       0000A17B            _vbe_biosfn_save_restore_state:
40634                                           !BCC_EOS
40635                                           !BCC_EOS
40636                                           !BCC_EOS
40637                                           !BCC_EOS
40638                                           !BCC_EOS
40639                                           ! 9069 {
40640                                           ! 9070     Bit16u ss=get_SS();
40641 A17B           55                         push	bp
40642 A17C           89E5                       mov	bp,sp
40643 A17E           4C                         dec	sp
40644 A17F           4C                         dec	sp
40645                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40646 A180           E8         DC48            call	_get_SS
40647                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40648 A183           8946         FE            mov	-2[bp],ax
40649                                           !BCC_EOS
40650                                           ! 9071     Bit16u result, val;
40651                                           !BCC_EOS
40652                                           ! 9072     result = 0x4f;
40653 A186           83C4                   FC  add	sp,*-4
40654                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40655 A189           B8                   004F  mov	ax,*$4F
40656 A18C           8946         FC            mov	-4[bp],ax
40657                                           !BCC_EOS
40658                                           ! 9073     switch(( DX & 0x00ff )) {
40659                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40660 A18F           8A46         08            mov	al,8[bp]
40661 A192           E9         00D0            br 	.328
40662                                           ! 9074     case 0x00:
40663                                           ! 9075         val = biosfn_read_video_state_size2(CX);
40664                       0000A195            .329:
40665                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40666 A195           FF76         06            push	6[bp]
40667                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40668 A198           E8         CEA5            call	_biosfn_read_video_state_size2
40669 A19B           44                         inc	sp
40670 A19C           44                         inc	sp
40671                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40672 A19D           8946         FA            mov	-6[bp],ax
40673                                           !BCC_EOS
40674                                           ! 9076         printf("VGA state size=%x\n", val);
40675                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40676 A1A0           FF76         FA            push	-6[bp]
40677                                           ! Debug: list * char = .32A+0 (used reg = )
40678 A1A3           BB                   A3CD  mov	bx,#.32A
40679 A1A6           53                         push	bx
40680                                           ! Debug: func () void = printf+0 (used reg = )
40681 A1A7           E8         DC40            call	_printf
40682 A1AA           83C4                   04  add	sp,*4
40683                                           !BCC_EOS
40684                                           ! 9077         if (CX & 8)
40685                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40686 A1AD           8A46         06            mov	al,6[bp]
40687 A1B0           24                     08  and	al,*8
40688 A1B2           84C0                       test	al,al
40689 A1B4           74           09            je  	.32B
40690                       0000A1B6            .32C:
40691                                           ! 9078             val += vbe_biosfn_read_video_state_size();
40692                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40693 A1B6           E8         FDFB            call	_vbe_biosfn_read_video_state_size
40694                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40695 A1B9           0346         FA            add	ax,-6[bp]
40696 A1BC           8946         FA            mov	-6[bp],ax
40697                                           !BCC_EOS
40698                                           ! 9079         write_word(ss, BX, val);
40699                       0000A1BF            .32B:
40700                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40701 A1BF           FF76         FA            push	-6[bp]
40702                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40703 A1C2           FF76         0C            push	$C[bp]
40704                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40705 A1C5           FF76         FE            push	-2[bp]
40706                                           ! Debug: func () void = write_word+0 (used reg = )
40707 A1C8           E8         DBB2            call	_write_word
40708 A1CB           83C4                   06  add	sp,*6
40709                                           !BCC_EOS
40710                                           ! 9080         break;
40711 A1CE           E9         00A6            br 	.326
40712                                           !BCC_EOS
40713                                           ! 9081     case 0x01:
40714                                           ! 9082         val = read_word(ss, BX);
40715                       0000A1D1            .32D:
40716                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40717 A1D1           FF76         0C            push	$C[bp]
40718                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40719 A1D4           FF76         FE            push	-2[bp]
40720                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40721 A1D7           E8         DB78            call	_read_word
40722 A1DA           83C4                   04  add	sp,*4
40723                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40724 A1DD           8946         FA            mov	-6[bp],ax
40725                                           !BCC_EOS
40726                                           ! 9083         val = biosfn_save_video_state(CX, ES, val);
40727                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40728 A1E0           FF76         FA            push	-6[bp]
40729                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40730 A1E3           FF76         0A            push	$A[bp]
40731                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40732 A1E6           FF76         06            push	6[bp]
40733                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40734 A1E9           E8         CEBF            call	_biosfn_save_video_state
40735 A1EC           83C4                   06  add	sp,*6
40736                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40737 A1EF           8946         FA            mov	-6[bp],ax
40738                                           !BCC_EOS
40739                                           ! 9084         printf("VGA save_state offset=%x\n", val);
40740                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40741 A1F2           FF76         FA            push	-6[bp]
40742                                           ! Debug: list * char = .32E+0 (used reg = )
40743 A1F5           BB                   A3B3  mov	bx,#.32E
40744 A1F8           53                         push	bx
40745                                           ! Debug: func () void = printf+0 (used reg = )
40746 A1F9           E8         DBEE            call	_printf
40747 A1FC           83C4                   04  add	sp,*4
40748                                           !BCC_EOS
40749                                           ! 9085         if (CX & 8)
40750                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40751 A1FF           8A46         06            mov	al,6[bp]
40752 A202           24                     08  and	al,*8
40753 A204           84C0                       test	al,al
40754 A206           74           0C            je  	.32F
40755                       0000A208            .330:
40756                                           ! 9086             vbe_biosfn_save_video_state(ES, val);
40757                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40758 A208           FF76         FA            push	-6[bp]
40759                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40760 A20B           FF76         0A            push	$A[bp]
40761                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40762 A20E           E8         FDAB            call	_vbe_biosfn_save_video_state
40763 A211           83C4                   04  add	sp,*4
40764                                           !BCC_EOS
40765                                           ! 9087         break;
40766                       0000A214            .32F:
40767 A214           EB           61            jmp .326
40768                                           !BCC_EOS
40769                                           ! 9088     case 0x02:
40770                                           ! 9089         val = read_word(ss, BX);
40771                       0000A216            .331:
40772                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40773 A216           FF76         0C            push	$C[bp]
40774                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40775 A219           FF76         FE            push	-2[bp]
40776                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40777 A21C           E8         DB33            call	_read_word
40778 A21F           83C4                   04  add	sp,*4
40779                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40780 A222           8946         FA            mov	-6[bp],ax
40781                                           !BCC_EOS
40782                                           ! 9090         val = biosfn_restore_video_state(CX, ES, val);
40783                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40784 A225           FF76         FA            push	-6[bp]
40785                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40786 A228           FF76         0A            push	$A[bp]
40787                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40788 A22B           FF76         06            push	6[bp]
40789                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40790 A22E           E8         D444            call	_biosfn_restore_video_state
40791 A231           83C4                   06  add	sp,*6
40792                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40793 A234           8946         FA            mov	-6[bp],ax
40794                                           !BCC_EOS
40795                                           ! 9091         printf("VGA restore_state offset=%x\n", val);
40796                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40797 A237           FF76         FA            push	-6[bp]
40798                                           ! Debug: list * char = .332+0 (used reg = )
40799 A23A           BB                   A396  mov	bx,#.332
40800 A23D           53                         push	bx
40801                                           ! Debug: func () void = printf+0 (used reg = )
40802 A23E           E8         DBA9            call	_printf
40803 A241           83C4                   04  add	sp,*4
40804                                           !BCC_EOS
40805                                           ! 9092         if (CX & 8)
40806                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40807 A244           8A46         06            mov	al,6[bp]
40808 A247           24                     08  and	al,*8
40809 A249           84C0                       test	al,al
40810 A24B           74           0C            je  	.333
40811                       0000A24D            .334:
40812                                           ! 9093             vbe_biosfn_restore_video_state(ES, val);
40813                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40814 A24D           FF76         FA            push	-6[bp]
40815                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40816 A250           FF76         0A            push	$A[bp]
40817                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40818 A253           E8         FDF8            call	_vbe_biosfn_restore_video_state
40819 A256           83C4                   04  add	sp,*4
40820                                           !BCC_EOS
40821                                           ! 9094         break;
40822                       0000A259            .333:
40823 A259           EB           1C            jmp .326
40824                                           !BCC_EOS
40825                                           ! 9095     default:
40826                                           ! 9096         result = 0x100;
40827                       0000A25B            .335:
40828                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40829 A25B           B8                   0100  mov	ax,#$100
40830 A25E           8946         FC            mov	-4[bp],ax
40831                                           !BCC_EOS
40832                                           ! 9097         break;
40833 A261           EB           14            jmp .326
40834                                           !BCC_EOS
40835                                           ! 9098     }
40836                                           ! 9099     write_word(ss, AX, result);
40837 A263           EB           12            jmp .326
40838                       0000A265            .328:
40839 A265           2C                     00  sub	al,*0
40840 A267         0F84         FF2A            beq 	.329
40841 A26B           2C                     01  sub	al,*1
40842 A26D         0F84         FF60            beq 	.32D
40843 A271           2C                     01  sub	al,*1
40844 A273           74           A1            je 	.331
40845 A275           EB           E4            jmp	.335
40846                       0000A277            .326:
40847                       FFFFFFF8            ..FFF4	=	-8
40848                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40849 A277           FF76         FC            push	-4[bp]
40850                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40851 A27A           FF76         04            push	4[bp]
40852                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40853 A27D           FF76         FE            push	-2[bp]
40854                                           ! Debug: func () void = write_word+0 (used reg = )
40855 A280           E8         DAFA            call	_write_word
40856 A283           83C4                   06  add	sp,*6
40857                                           !BCC_EOS
40858                                           ! 9100 }
40859 A286           89EC                       mov	sp,bp
40860 A288           5D                         pop	bp
40861 A289           C3                         ret
40862                                           ! 9101 #asm
40863                                           !BCC_ASM
40864                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40865                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40866                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40867                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40868                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40869                       0000A28A            vbe_biosfn_display_window_control:
40870 A28A           80FB                   00    cmp bl, #0x00
40871 A28D           75           24              jne vbe_05_failed
40872 A28F           80FF                   01    cmp bh, #0x01
40873 A292           74           16              je get_display_window
40874 A294           72           04              jb set_display_window
40875 A296           B8                   0100    mov ax, #0x0100
40876 A299           C3                           ret
40877                       0000A29A            set_display_window:
40878 A29A           89D0                         mov ax, dx
40879 A29C           E8         F4F0              call _dispi_set_bank
40880 A29F           E8         F4FD              call dispi_get_bank
40881 A2A2           39D0                         cmp ax, dx
40882 A2A4           75           0D              jne vbe_05_failed
40883 A2A6           B8                   004F    mov ax, #0x004f
40884 A2A9           C3                           ret
40885                       0000A2AA            get_display_window:
40886 A2AA           E8         F4F2              call dispi_get_bank
40887 A2AD           89C2                         mov dx, ax
40888 A2AF           B8                   004F    mov ax, #0x004f
40889 A2B2           C3                           ret
40890                       0000A2B3            vbe_05_failed:
40891 A2B3           B8                   014F    mov ax, #0x014f
40892 A2B6           C3                           ret
40893                                           ! 9126 endasm
40894                                           !BCC_ENDASM
40895                                           ! 9127 #asm
40896                                           !BCC_ASM
40897                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40898                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40899                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40900                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40901                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40902                       0000A2B7            vbe_biosfn_set_get_logical_scan_line_length:
40903 A2B7           89C8                         mov ax, cx
40904 A2B9           80FB                   01    cmp bl, #0x01
40905 A2BC           74           24              je get_logical_scan_line_length
40906 A2BE           80FB                   02    cmp bl, #0x02
40907 A2C1           74           06              je set_logical_scan_line_bytes
40908 A2C3           72           1A              jb set_logical_scan_line_pixels
40909 A2C5           B8                   0100    mov ax, #0x0100
40910 A2C8           C3                           ret
40911                       0000A2C9            set_logical_scan_line_bytes:
40912 A2C9           50                           push ax
40913 A2CA           E8         F447              call dispi_get_bpp
40914 A2CD           30FF                         xor bh, bh
40915 A2CF           88E3                         mov bl, ah
40916 A2D1           08DB                         or bl, bl
40917 A2D3           75           05              jnz no_4bpp_1
40918 A2D5           C1E0                   03    shl ax, #3
40919 A2D8           B3                     01    mov bl, #1
40920                       0000A2DA            no_4bpp_1:
40921 A2DA           31D2                         xor dx, dx
40922 A2DC           58                           pop ax
40923 A2DD           F7F3                         div bx
40924                       0000A2DF            set_logical_scan_line_pixels:
40925 A2DF           E8         F55B              call dispi_set_virt_width
40926                       0000A2E2            get_logical_scan_line_length:
40927 A2E2           E8         F42F              call dispi_get_bpp
40928 A2E5           30FF                         xor bh, bh
40929 A2E7           88E3                         mov bl, ah
40930 A2E9           E8         F564              call dispi_get_virt_width
40931 A2EC           89C1                         mov cx, ax
40932 A2EE           08DB                         or bl, bl
40933 A2F0           75           05              jnz no_4bpp_2
40934 A2F2           C1E8                   03    shr ax, #3
40935 A2F5           B3                     01    mov bl, #1
40936                       0000A2F7            no_4bpp_2:
40937 A2F7           F7E3                         mul bx
40938 A2F9           89C3                         mov bx, ax
40939 A2FB           E8         F560              call dispi_get_virt_height
40940 A2FE           89C2                         mov dx, ax
40941 A300           B8                   004F    mov ax, #0x004f
40942 A303           C3                           ret
40943                                           ! 9169 endasm
40944                                           !BCC_ENDASM
40945                                           ! 9170 #asm
40946                                           !BCC_ASM
40947                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40948                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40949                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40950                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40951                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40952                       0000A304            vbe_biosfn_set_get_display_start:
40953 A304           80FB                   80    cmp bl, #0x80
40954 A307           74           0B              je set_display_start
40955 A309           80FB                   01    cmp bl, #0x01
40956 A30C           74           14              je get_display_start
40957 A30E           72           04              jb set_display_start
40958 A310           B8                   0100    mov ax, #0x0100
40959 A313           C3                           ret
40960                       0000A314            set_display_start:
40961 A314           89C8                         mov ax, cx
40962 A316           E8         F4CB              call dispi_set_x_offset
40963 A319           89D0                         mov ax, dx
40964 A31B           E8         F4E4              call dispi_set_y_offset
40965 A31E           B8                   004F    mov ax, #0x004f
40966 A321           C3                           ret
40967                       0000A322            get_display_start:
40968 A322           E8         F4CF              call dispi_get_x_offset
40969 A325           89C1                         mov cx, ax
40970 A327           E8         F4E8              call dispi_get_y_offset
40971 A32A           89C2                         mov dx, ax
40972 A32C           30FF                         xor bh, bh
40973 A32E           B8                   004F    mov ax, #0x004f
40974 A331           C3                           ret
40975                                           ! 9194 endasm
40976                                           !BCC_ENDASM
40977                                           ! 9195 #asm
40978                                           !BCC_ASM
40979                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40980                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40981                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40982                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40983                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40984                       0000A332            vbe_biosfn_set_get_dac_palette_format:
40985 A332           80FB                   01    cmp bl, #0x01
40986 A335           74           1E              je get_dac_palette_format
40987 A337           72           04              jb set_dac_palette_format
40988 A339           B8                   0100    mov ax, #0x0100
40989 A33C           C3                           ret
40990                       0000A33D            set_dac_palette_format:
40991 A33D           E8         F441              call dispi_get_enable
40992 A340           80FF                   06    cmp bh, #0x06
40993 A343           74           0A              je set_normal_dac
40994 A345           80FF                   08    cmp bh, #0x08
40995 A348           75           1B              jne vbe_08_unsupported
40996 A34A           0D                   0020    or ax, # 0x20
40997 A34D           75           03              jnz set_dac_mode
40998                       0000A34F            set_normal_dac:
40999 A34F           25                   FFDF    and ax, #~ 0x20
41000                       0000A352            set_dac_mode:
41001 A352           E8         F41C              call _dispi_set_enable
41002                       0000A355            get_dac_palette_format:
41003 A355           B7                     06    mov bh, #0x06
41004 A357           E8         F427              call dispi_get_enable
41005 A35A           25                   0020    and ax, # 0x20
41006 A35D           74           02              jz vbe_08_ok
41007 A35F           B7                     08    mov bh, #0x08
41008                       0000A361            vbe_08_ok:
41009 A361           B8                   004F    mov ax, #0x004f
41010 A364           C3                           ret
41011                       0000A365            vbe_08_unsupported:
41012 A365           B8                   014F    mov ax, #0x014f
41013 A368           C3                           ret
41014                                           ! 9226 endasm
41015                                           !BCC_ENDASM
41016                                           ! 9227 void vbe_biosfn_set_get_palette_data(AX)
41017                                           ! Register BX used in function vbe_biosfn_save_restore_state
41018                                           ! 9228 {
41019                                           export	_vbe_biosfn_set_get_palette_data
41020                       0000A369            _vbe_biosfn_set_get_palette_data:
41021                                           ! 9229 }
41022 A369           C3                         ret
41023                                           ! 9230 #asm
41024                                           !BCC_ASM
41025                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41026                       0000A36A            vbe_biosfn_return_protected_mode_interface:
41027 A36A           84DB                         test bl, bl
41028 A36C           75           11              jnz _fail
41029 A36E           BF                   C000    mov di, #0xc000
41030 A371           8EC7                         mov es, di
41031 A373           BF                   95A2    mov di, # vesa_pm_start
41032 A376           B9                   96A3    mov cx, # vesa_pm_end
41033 A379           29F9                         sub cx, di
41034 A37B           B8                   004F    mov ax, #0x004f
41035 A37E           C3                           ret
41036                       0000A37F            _fail:
41037 A37F           B8                   014F    mov ax, #0x014f
41038 A382           C3                           ret
41039                                           ! 9244 endasm
41040                                           !BCC_ENDASM
41041                                           ! 9245 #asm
41042                                           !BCC_ASM
41043                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41044                                           ;; DATA_SEG_DEFS_HERE
41045                                           ! 9247 endasm
41046                                           !BCC_ENDASM
41047                                           ! 9248 #asm
41048                                           !BCC_ASM
41049                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41050 A383                        76            .ascii "vgabios ends here"
41051 A394                        00            .byte 0x00
41052                       0000A395            vgabios_end:
41053 A395                        CB            .byte 0xCB
41054                                           ;; BLOCK_STRINGS_BEGIN
41055                                           ! 9254 endasm
41056                                           !BCC_ENDASM
41057                                           ! 9255 
41058                                           
41059                       0000A396            .332:
41060                       0000A396            .336:
41061 A396                        56            .ascii	"VGA restore_state offset=%x"
41062 A3B1                        0A            .byte	$A
41063 A3B2                        00            .byte	0
41064                       0000A3B3            .32E:
41065                       0000A3B3            .337:
41066 A3B3                        56            .ascii	"VGA save_state offset=%x"
41067 A3CB                        0A            .byte	$A
41068 A3CC                        00            .byte	0
41069                       0000A3CD            .32A:
41070                       0000A3CD            .338:
41071 A3CD                        56            .ascii	"VGA state size=%x"
41072 A3DE                        0A            .byte	$A
41073 A3DF                        00            .byte	0
41074                       0000A3E0            .312:
41075                       0000A3E0            .339:
41076 A3E0                        56            .ascii	"VBE *NOT* found mode %x"
41077 A3F7                        0A            .byte	$A
41078 A3F8                        00            .byte	0
41079                       0000A3F9            .30E:
41080                       0000A3F9            .33A:
41081 A3F9                        09            .byte	9
41082 A3FA                        78            .ascii	"xres%x yres%x bpp%x"
41083 A40D                        0A            .byte	$A
41084 A40E                        00            .byte	0
41085                       0000A40F            .30D:
41086                       0000A40F            .33B:
41087 A40F                        56            .ascii	"VBE found mode %x, setting:"
41088 A42A                        0A            .byte	$A
41089 A42B                        00            .byte	0
41090                       0000A42C            .2FE:
41091                       0000A42C            .33C:
41092 A42C                        56            .ascii	"VBE *NOT* found mode %x"
41093 A443                        0A            .byte	$A
41094 A444                        00            .byte	0
41095                       0000A445            .2F6:
41096                       0000A445            .33D:
41097 A445                        56            .ascii	"VBE found mode %x"
41098 A456                        0A            .byte	$A
41099 A457                        00            .byte	0
41100                       0000A458            .2F1:
41101                       0000A458            .33E:
41102 A458                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
41103 A480                        53            .ascii	"S%x DI%x CX%x"
41104 A48D                        0A            .byte	$A
41105 A48E                        00            .byte	0
41106                       0000A48F            .2EF:
41107                       0000A48F            .33F:
41108 A48F                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
41109 A4B7                        70            .ascii	"ported "
41110 A4BE                        0A            .byte	$A
41111 A4BF                        00            .byte	0
41112                       0000A4C0            .2ED:
41113                       0000A4C0            .340:
41114 A4C0                        56            .ascii	"VBE found mode %x => %x"
41115 A4D7                        0A            .byte	$A
41116 A4D8                        00            .byte	0
41117                       0000A4D9            .2E2:
41118                       0000A4D9            .341:
41119 A4D9                        56            .ascii	"VBE correct VESA/VBE2 signature found"
41120 A4FE                        0A            .byte	$A
41121 A4FF                        00            .byte	0
41122                       0000A500            .2D8:
41123                       0000A500            .342:
41124 A500                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
41125 A528                        20            .ascii	" AX%x"
41126 A52D                        0A            .byte	$A
41127 A52E                        00            .byte	0
41128                       0000A52F            .2B0:
41129                       0000A52F            .343:
41130 A52F                        2D            .ascii	"--> Unknown int10"
41131 A540                        0A            .byte	$A
41132 A541                        00            .byte	0
41133                       0000A542            .2AF:
41134                       0000A542            .344:
41135 A542                        2D            .ascii	"--> Unimplemented"
41136 A553                        0A            .byte	$A
41137 A554                        00            .byte	0
41138                       0000A555            .249:
41139                       0000A555            .345:
41140 A555                        47            .ascii	"Get font info BH(%02x) was discarded"
41141 A579                        0A            .byte	$A
41142 A57A                        00            .byte	0
41143                       0000A57B            .147:
41144                       0000A57B            .346:
41145 A57B                        53            .ascii	"Scroll in graphics mode "
41146 A593                        00            .byte	0
41147                       0000A594            .E2:
41148                       0000A594            .347:
41149 A594                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
41150 A5B9                        0A            .byte	$A
41151 A5BA                        00            .byte	0
41152                       0000A5BB            .B7:
41153                       0000A5BB            .348:
41154 A5BB                        53            .ascii	"Set active page %02x address %04x"
41155 A5DC                        0A            .byte	$A
41156 A5DD                        00            .byte	0
41157                       0000A5DE            .5E:
41158                       0000A5DE            .349:
41159 A5DE                        6D            .ascii	"mode search %02x found line %02x"
41160 A5FE                        0A            .byte	$A
41161 A5FF                        00            .byte	0
41162                       0000A600            .3:
41163                       0000A600            .34A:
41164 A600                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
41165 A628                        20            .ascii	" dx%04x"
41166 A62F                        0A            .byte	$A
41167 A630                        00            .byte	0
41168 A631                                      .bss
41169                                           
41170                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3665 A   .10                         0 3692 A   
.100                        0 4CD7 A   .101                        0 50BE A   
.102                        0 50BE A   .104                        0 50AA A   
.105                        0 4D0C A   .106                        0 4D0C A   
.107                        0 4D9E A   .108                        0 4D49 A   
.109                        0 4D37 A   .10A                        0 4D25 A   
.10B                        0 4D1E A   .10C                        0 4D15 A   
.10D                        0 4EC0 A   .10E                        0 4E31 A   
.10F                        0 4DA7 A   .11                         0 3692 A   
.110                        0 4E2E A   .111                        0 4E1D A   
.112                        0 4E24 A   .113                        0 4DB1 A   
.114                        0 4DF5 A   .115                        0 4DCF A   
.116                        0 4DC8 A   .117                        0 4E1D A   
.118                        0 4E2E A   .119                        0 4EC0 A   
.11A                        0 4EC0 A   .11B                        0 4EAD A   
.11C                        0 4EB4 A   .11D                        0 4E3C A   
.11E                        0 4E79 A   .11F                        0 4E53 A   
.12                         0 3692 A   .120                        0 4E4C A   
.121                        0 4EA1 A   .122                        0 4EAD A   
.123                        0 4EAB A   .124                        0 4EC0 A   
.125                        0 4EC3 A   .126                        0 4F56 A   
.127                        0 4F11 A   .128                        0 4EFF A   
.129                        0 4EED A   .12A                        0 4EE6 A   
.12B                        0 4EDF A   .12C                        0 509A A   
.12D                        0 4F79 A   .12E                        0 4F5D A   
.12F                        0 500C A   .13                         0 369E A   
.130                        0 4F82 A   .131                        0 5009 A   
.132                        0 4FF8 A   .133                        0 4FFF A   
.134                        0 4F8C A   .135                        0 4FD0 A   
.136                        0 4FAA A   .137                        0 4FA3 A   
.138                        0 4FF8 A   .139                        0 5009 A   
.13A                        0 509A A   .13B                        0 509A A   
.13C                        0 5087 A   .13D                        0 508E A   
.13E                        0 5016 A   .13F                        0 5053 A   
.14                         0 36CD A   .140                        0 502D A   
.141                        0 5026 A   .142                        0 507B A   
.143                        0 5087 A   .144                        0 5085 A   
.145                        0 509A A   .146                        0 509C A   
.147                        0 A57B A   .148                        0 50FA A   
.149                        0 50F6 A   .14A                        0 51B9 A   
.14B                        0 515B A   .14C                        0 51BC A   
.14D                        0 51ED A   .14F                        0 51E3 A   
.15                         0 36BD A   .150                        0 51CB A   
.151                        0 51D3 A   .152                        0 51DB A   
.153                        0 525A A   .154                        0 524A A   
.155                        0 5268 A   .156                        0 5320 A   
.157                        0 530F A   .158                        0 5316 A   
.159                        0 5270 A   .15A                        0 530F A   
.15B                        0 52FF A   .15C                        0 5306 A   
.15D                        0 528D A   .15E                        0 52EF A   
.15F                        0 52D8 A   .16                         0 36D2 A   
.160                        0 52FF A   .161                        0 530F A   
.162                        0 5320 A   .163                        0 5532 A   
.164                        0 5522 A   .165                        0 5529 A   
.166                        0 5376 A   .167                        0 539A A   
.168                        0 5391 A   .169                        0 545B A   
.16A                        0 53A8 A   .16B                        0 53C3 A   
.16C                        0 53B1 A   .16D                        0 53C8 A   
.16E                        0 5445 A   .16F                        0 5437 A   
.17                         0 36E9 A   .170                        0 543E A   
.171                        0 53CF A   .172                        0 542D A   
.173                        0 53E6 A   .174                        0 540F A   
.175                        0 53EF A   .176                        0 542D A   
.177                        0 5445 A   .178                        0 5522 A   
.179                        0 5522 A   .17A                        0 5519 A   
.17B                        0 545E A   .17C                        0 5479 A   
.17D                        0 5467 A   .17E                        0 547E A   
.17F                        0 54FF A   .18                         0 36FD A   
.180                        0 54F1 A   .181                        0 54F8 A   
.182                        0 5485 A   .183                        0 54E7 A   
.184                        0 549C A   .185                        0 54C7 A   
.186                        0 54A5 A   .187                        0 54E7 A   
.188                        0 54FF A   .189                        0 5522 A   
.18A                        0 5532 A   .18B                        0 5606 A   
.18C                        0 55F6 A   .18D                        0 55FD A   
.18E                        0 557C A   .18F                        0 55F6 A   
.19                         0 3716 A   .190                        0 55E8 A   
.191                        0 55EF A   .192                        0 55A2 A   
.193                        0 55C4 A   .194                        0 55BE A   
.195                        0 55F6 A   .196                        0 5606 A   
.197                        0 563A A   .198                        0 5636 A   
.199                        0 5705 A   .19A                        0 569B A   
.19B                        0 57FD A   .19C                        0 57FD A   
.19D                        0 57E5 A   .19E                        0 573A A   
.19F                        0 57DE A   .1A                         0 3730 A   
.1A1                        0 57C8 A   .1A2                        0 574E A   
.1A3                        0 574E A   .1A4                        0 5777 A   
.1A5                        0 57A0 A   .1A6                        0 57C3 A   
.1A7                        0 57FD A   .1A8                        0 57F1 A   
.1A9                        0 5831 A   .1AA                        0 582D A   
.1AB                        0 5900 A   .1AC                        0 5892 A   
.1AD                        0 58FD A   .1AE                        0 58F1 A   
.1AF                        0 58C8 A   .1B                         0 373E A   
.1B0                        0 58FD A   .1B1                        0 59F8 A   
.1B2                        0 59F8 A   .1B3                        0 59E0 A   
.1B4                        0 5935 A   .1B5                        0 59D9 A   
.1B7                        0 59C3 A   .1B8                        0 5949 A   
.1B9                        0 5949 A   .1BA                        0 5972 A   
.1BB                        0 599B A   .1BC                        0 59BE A   
.1BD                        0 59F8 A   .1BE                        0 59EC A   
.1BF                        0 5AA7 A   .1C                         0 3779 A   
.1C0                        0 5AA3 A   .1C1                        0 5AC1 A   
.1C2                        0 5ABD A   .1C3                        0 5D14 A   
.1C5                        0 5CFC A   .1C6                        0 5AD6 A   
.1C7                        0 5AD6 A   .1C8                        0 5B57 A   
.1C9                        0 5B49 A   .1CA                        0 5B7C A   
.1CB                        0 5BAE A   .1CC                        0 5B92 A   
.1CD                        0 5BC8 A   .1CE                        0 5BDA A   
.1CF                        0 5BD1 A   .1D                         0 37B3 A   
.1D0                        0 5C46 A   .1D1                        0 5C00 A   
.1D2                        0 5C86 A   .1D3                        0 5C9A A   
.1D4                        0 5C8F A   .1D5                        0 5CB0 A   
.1D6                        0 5CC5 A   .1D7                        0 5CF7 A   
.1D8                        0 5D4E A   .1D9                        0 5D4A A   
.1DA                        0 5D68 A   .1DB                        0 5D64 A   
.1DC                        0 5EFF A   .1DE                        0 5EE7 A   
.1DF                        0 5D7D A   .1E                         0 37C8 A   
.1E0                        0 5D7D A   .1E1                        0 5E11 A   
.1E2                        0 5E03 A   .1E3                        0 5E0A A   
.1E4                        0 5DBF A   .1E5                        0 5E03 A   
.1E6                        0 5DEF A   .1E7                        0 5E11 A   
.1E8                        0 5E14 A   .1E9                        0 5E40 A   
.1EA                        0 5E37 A   .1EB                        0 5E8B A   
.1EC                        0 5E66 A   .1ED                        0 5EAC A   
.1EE                        0 5EAE A   .1EF                        0 5EDD A   
.1F                         0 37E8 A   .1F0                        0 5F3F A   
.1F1                        0 5F2E A   .1F2                        0 5F69 A   
.1F3                        0 5F65 A   .1F4                        0 61CA A   
.1F6                        0 61A9 A   .1F7                        0 5FBA A   
.1F8                        0 5FBD A   .1F9                        0 5FCB A   
.1FA                        0 5FC4 A   .1FB                        0 5FCE A   
.1FC                        0 5FD6 A   .1FD                        0 5FE0 A   
.1FE                        0 602D A   .1FF                        0 6022 A   
.2                          0 3645 A   .20                         0 3808 A   
.200                        0 5FE0 A   .201                        0 602D A   
.202                        0 6030 A   .203                        0 60CA A   
.204                        0 6048 A   .205                        0 60C7 A   
.206                        0 60A4 A   .207                        0 61A0 A   
.208                        0 61A0 A   .20A                        0 618A A   
.20B                        0 6110 A   .20C                        0 6110 A   
.20D                        0 6139 A   .20E                        0 6162 A   
.20F                        0 6185 A   .21                         0 3825 A   
.210                        0 61E0 A   .211                        0 61D4 A   
.212                        0 62B5 A   .213                        0 61EC A   
.214                        0 6285 A   .215                        0 6204 A   
.216                        0 62AC A   .217                        0 6665 A   
.218                        0 6654 A   .219                        0 665B A   
.21A                        0 659D A   .21B                        0 6610 A   
.21C                        0 660A A   .21D                        0 6665 A   
.21E                        0 6746 A   .21F                        0 6736 A   
.22                         0 3840 A   .220                        0 675E A   
.221                        0 68A3 A   .222                        0 6894 A   
.223                        0 689B A   .224                        0 6857 A   
.225                        0 68A3 A   .226                        0 68B8 A   
.227                        0 68AD A   .228                        0 693C A   
.229                        0 692D A   .22A                        0 6934 A   
.22B                        0 68F3 A   .22C                        0 693C A   
.22D                        0 694F A   .22E                        0 6946 A   
.22F                        0 69CD A   .23                         0 385D A   
.230                        0 69BE A   .231                        0 69C5 A   
.232                        0 698A A   .233                        0 69CD A   
.234                        0 69E0 A   .235                        0 69D7 A   
.236                        0 6A6B A   .237                        0 6A5C A   
.238                        0 6A63 A   .239                        0 6A28 A   
.23A                        0 6A6B A   .23B                        0 6A7E A   
.23C                        0 6A75 A   .23D                        0 6C34 A   
.23F                        0 6C0F A   .24                         0 386C A   
.240                        0 6ABB A   .241                        0 6AF2 A   
.242                        0 6B29 A   .243                        0 6B4C A   
.244                        0 6B6F A   .245                        0 6B92 A   
.246                        0 6BB5 A   .247                        0 6BD7 A   
.248                        0 6BF9 A   .249                        0 A555 A   
.24A                        0 6C32 A   .24B                        0 6C22 A   
.24C                        0 6DEF A   .24D                        0 6DDD A   
.24E                        0 6E79 A   .24F                        0 6E6D A   
.25                         0 39AC A   .250                        0 6E1E A   
.251                        0 6E51 A   .252                        0 6E3C A   
.253                        0 6E79 A   .254                        0 6E91 A   
.255                        0 6E82 A   .256                        0 705C A   
.257                        0 7053 A   .258                        0 706E A   
.259                        0 7065 A   .25A                        0 7080 A   
.25B                        0 7077 A   .25C                        0 7333 A   
.25D                        0 70CD A   .25E                        0 71B8 A   
.25F                        0 71A9 A   .260                        0 71B0 A   
.261                        0 717D A   .262                        0 71B8 A   
.263                        0 7226 A   .264                        0 7217 A   
.265                        0 721E A   .266                        0 71EB A   
.267                        0 7226 A   .268                        0 7279 A   
.269                        0 726A A   .26A                        0 7271 A   
.26B                        0 722D A   .26C                        0 7279 A   
.26D                        0 72C4 A   .26E                        0 72B5 A   
.26F                        0 72BC A   .27                         0 3956 A   
.270                        0 7289 A   .271                        0 72C4 A   
.272                        0 75AE A   .273                        0 733E A   
.274                        0 74DF A   .275                        0 74D0 A   
.276                        0 74D7 A   .277                        0 74A8 A   
.278                        0 74DF A   .279                        0 766E A   
.27A                        0 75B9 A   .27B                        0 7658 A   
.27C                        0 7649 A   .27D                        0 7650 A   
.27E                        0 762A A   .27F                        0 7658 A   
.28                         0 3872 A   .280                        0 7930 A   
.281                        0 7686 A   .282                        0 76F5 A   
.283                        0 76E6 A   .284                        0 76ED A   
.285                        0 76B9 A   .286                        0 76F5 A   
.287                        0 777A A   .288                        0 776B A   
.289                        0 7772 A   .28A                        0 7736 A   
.28B                        0 7764 A   .28C                        0 773E A   
.28D                        0 777A A   .28E                        0 779C A   
.28F                        0 7794 A   .29                         0 3872 A   
.290                        0 783D A   .291                        0 782E A   
.292                        0 7835 A   .293                        0 77F9 A   
.294                        0 783D A   .295                        0 7896 A   
.296                        0 7887 A   .297                        0 788E A   
.298                        0 785A A   .299                        0 7896 A   
.29A                        0 7BAB A   .29B                        0 793B A   
.29C                        0 7ADC A   .29D                        0 7ACD A   
.29E                        0 7AD4 A   .29F                        0 7AA5 A   
.2A                         0 389B A   .2A0                        0 7ADC A   
.2A1                        0 7C4C A   .2A2                        0 7BB6 A   
.2A3                        0 7C38 A   .2A4                        0 7C29 A   
.2A5                        0 7C30 A   .2A6                        0 7C09 A   
.2A7                        0 7C38 A   .2A8                        0 7C8E A   
.2A9                        0 7C80 A   .2AA                        0 7C87 A   
.2AB                        0 7C64 A   .2AC                        0 7C80 A   
.2AD                        0 7C78 A   .2AE                        0 7C8E A   
.2AF                        0 A542 A   .2B                         0 389B A   
.2B0                        0 A52F A   .2B1                        0 7F23 A   
.2B2                        0 7F0D A   .2B3                        0 7E09 A   
.2B4                        0 7E1E A   .2B5                        0 7E10 A   
.2B6                        0 7F06 A   .2B7                        0 7EF6 A   
.2B8                        0 7E27 A   .2B9                        0 7E56 A   
.2BA                        0 7E35 A   .2BB                        0 7E2E A   
.2BC                        0 7EF4 A   .2BD                        0 7EF4 A   
.2BE                        0 7E5F A   .2BF                        0 7E83 A   
.2C                         0 38B0 A   .2C0                        0 7E7D A   
.2C1                        0 7EEF A   .2C2                        0 7EE0 A   
.2C3                        0 7EE7 A   .2C4                        0 7E96 A   
.2C5                        0 7EC8 A   .2C6                        0 7EB5 A   
.2C7                        0 7ED9 A   .2C8                        0 7EEF A   
.2C9                        0 7F06 A   .2CA                        0 7F23 A   
.2CB                        0 999E A   .2CC                        0 9993 A   
.2CD                        0 9950 A   .2CE                        0 998A A   
.2CF                        0 995A A   .2D                         0 38B0 A   
.2D0                        0 996A A   .2D1                        0 9961 A   
.2D2                        0 9988 A   .2D3                        0 997F A   
.2D4                        0 9976 A   .2D5                        0 9988 A   
.2D6                        0 9993 A   .2D7                        0 999E A   
.2D8                        0 A500 A   .2D9                        0 9AD5 A   
.2DA                        0 9AC5 A   .2DB                        0 9AA5 A   
.2DC                        0 9A9D A   .2DD                        0 9A95 A   
.2DE                        0 9A8D A   .2DF                        0 9ABD A   
.2E                         0 38C5 A   .2E0                        0 9AB5 A   
.2E1                        0 9AAD A   .2E2                        0 A4D9 A   
.2E3                        0 9B99 A   .2E4                        0 9B4E A   
.2E5                        0 9BB1 A   .2E6                        0 9C93 A   
.2E7                        0 9C85 A   .2E8                        0 9BB1 A   
.2E9                        0 9C59 A   .2EA                        0 9C19 A   
.2EB                        0 9C0F A   .2EC                        0 9BF8 A   
.2ED                        0 A4C0 A   .2EE                        0 9C7A A   
.2EF                        0 A48F A   .2F                         0 38C5 A   
.2F0                        0 9C93 A   .2F1                        0 A458 A   
.2F2                        0 9CFE A   .2F3                        0 9D00 A   
.2F4                        0 9DC8 A   .2F5                        0 9D2F A   
.2F6                        0 A445 A   .2F7                        0 9D7C A   
.2F8                        0 9D76 A   .2F9                        0 9DA2 A   
.2FA                        0 9D91 A   .2FB                        0 9DC0 A   
.2FC                        0 9DAC A   .2FD                        0 9DDB A   
.2FE                        0 A42C A   .2FF                        0 9DFB A   
.3                          0 A600 A   .30                         0 38DA A   
.300                        0 9DE3 A   .301                        0 9E2B A   
.302                        0 9E2D A   .303                        0 9E3D A   
.304                        0 9E39 A   .305                        0 9E3F A   
.306                        0 9E51 A   .307                        0 9E4D A   
.308                        0 9E53 A   .309                        0 9E8A A   
.30A                        0 9E67 A   .30B                        0 9F5B A   
.30C                        0 9EA6 A   .30D                        0 A40F A   
.30E                        0 A3F9 A   .30F                        0 9EED A   
.31                         0 38E9 A   .310                        0 9EE4 A   
.311                        0 9F7C A   .312                        0 A3E0 A   
.313                        0 9F7C A   .314                        0 9F76 A   
.315                        0 A000 A   .316                        0 9FFC A   
.317                        0 A04A A   .318                        0 A03B A   
.319                        0 A042 A   .31A                        0 A008 A   
.31B                        0 A03B A   .31C                        0 A010 A   
.31D                        0 A04A A   .31E                        0 A092 A   
.31F                        0 A074 A   .32                         0 3907 A   
.320                        0 A177 A   .321                        0 A177 A   
.322                        0 A168 A   .323                        0 A16F A   
.324                        0 A13C A   .325                        0 A177 A   
.326                        0 A277 A   .328                        0 A265 A   
.329                        0 A195 A   .32A                        0 A3CD A   
.32B                        0 A1BF A   .32C                        0 A1B6 A   
.32D                        0 A1D1 A   .32E                        0 A3B3 A   
.32F                        0 A214 A   .33                         0 3915 A   
.330                        0 A208 A   .331                        0 A216 A   
.332                        0 A396 A   .333                        0 A259 A   
.334                        0 A24D A   .335                        0 A25B A   
.336                        0 A396 A   .337                        0 A3B3 A   
.338                        0 A3CD A   .339                        0 A3E0 A   
.33A                        0 A3F9 A   .33B                        0 A40F A   
.33C                        0 A42C A   .33D                        0 A445 A   
.33E                        0 A458 A   .33F                        0 A48F A   
.34                         0 3923 A   .340                        0 A4C0 A   
.341                        0 A4D9 A   .342                        0 A500 A   
.343                        0 A52F A   .344                        0 A542 A   
.345                        0 A555 A   .346                        0 A57B A   
.347                        0 A594 A   .348                        0 A5BB A   
.349                        0 A5DE A   .34A                        0 A600 A   
.35                         0 3931 A   .36                         0 3951 A   
.37                         0 39AF A   .38                         0 3A01 A   
.3A                         0 39F3 A   .3B                         0 39B4 A   
.3C                         0 39B9 A   .3D                         0 39D7 A   
.3E                         0 39EE A   .3F                         0 3A04 A   
.4                          0 3BBF A   .40                         0 3A38 A   
.41                         0 3A54 A   .42                         0 3A9D A   
.44                         0 3A8F A   .45                         0 3A59 A   
.46                         0 3A68 A   .47                         0 3A79 A   
.48                         0 3A8A A   .49                         0 3AAA A   
.4A                         0 3B5C A   .4B                         0 3AB3 A   
.4C                         0 3B5A A   .4E                         0 3B2F A   
.4F                         0 3AB8 A   .50                         0 3ACB A   
.51                         0 3AE0 A   .52                         0 3AF5 A   
.53                         0 3B0E A   .54                         0 3B19 A   
.55                         0 3B24 A   .56                         0 3B58 A   
.57                         0 3B42 A   .58                         0 3B62 A   
.59                         0 3B64 A   .5A                         0 3BB6 A   
.5B                         0 3B7C A   .5C                         0 3BDF A   
.5D                         0 3BD7 A   .5E                         0 A5DE A   
.5F                         0 3C16 A   .6                          0 3B69 A   
.60                         0 3C12 A   .61                         0 3DE9 A   
.62                         0 3CA4 A   .63                         0 3D16 A   
.65                         0 3D06 A   .66                         0 3CE4 A   
.67                         0 3CEC A   .68                         0 3CF4 A   
.69                         0 3CFC A   .6A                         0 3DD3 A   
.6B                         0 3DC2 A   .6C                         0 3DC9 A   
.6D                         0 3D1E A   .6E                         0 3D9B A   
.6F                         0 3D3F A   .7                          0 3674 A   
.70                         0 3DC2 A   .71                         0 3DD3 A   
.72                         0 3DE9 A   .73                         0 3DDC A   
.74                         0 3E39 A   .75                         0 3E2A A   
.76                         0 3E31 A   .77                         0 3DF9 A   
.78                         0 3E39 A   .79                         0 3EBE A   
.7A                         0 3EAF A   .7B                         0 3EB6 A   
.7C                         0 3E77 A   .7D                         0 3EBE A   
.7E                         0 3F05 A   .7F                         0 3EF6 A   
.8                          0 36CF A   .80                         0 3EFD A   
.81                         0 3EC5 A   .82                         0 3F05 A   
.83                         0 3F20 A   .84                         0 3F1B A   
.85                         0 3F23 A   .86                         0 3F7A A   
.87                         0 3F6B A   .88                         0 3F72 A   
.89                         0 3F3A A   .8A                         0 3F7A A   
.8B                         0 407A A   .8C                         0 3FB9 A   
.8D                         0 3FF5 A   .8E                         0 3FCF A   
.8F                         0 407A A   .90                         0 4020 A   
.91                         0 3FFC A   .92                         0 407A A   
.93                         0 41B7 A   .94                         0 41A9 A   
.95                         0 41D9 A   .96                         0 41CA A   
.97                         0 41D1 A   .98                         0 41BE A   
.99                         0 41D9 A   .9A                         0 4205 A   
.9B                         0 41F7 A   .9C                         0 426A A   
.9E                         0 425B A   .9F                         0 421D A   
.A                          0 36AA A   .A0                         0 4231 A   
.A1                         0 4245 A   .A2                         0 4338 A   
.A3                         0 42E8 A   .A4                         0 42E1 A   
.A5                         0 42DA A   .A6                         0 42D2 A   
.A7                         0 4311 A   .A8                         0 42FC A   
.A9                         0 4325 A   .AA                         0 439A A   
.AB                         0 4396 A   .AC                         0 4485 A   
.AD                         0 43CD A   .AE                         0 44BD A   
.AF                         0 44B9 A   .B                          0 3686 A   
.B0                         0 450F A   .B1                         0 450B A   
.B2                         0 4539 A   .B3                         0 4535 A   
.B4                         0 45D1 A   .B5                         0 4563 A   
.B6                         0 45F5 A   .B7                         0 A5BB A   
.B8                         0 4730 A   .B9                         0 4721 A   
.BA                         0 4728 A   .BB                         0 46E5 A   
.BC                         0 4730 A   .BD                         0 47BB A   
.BE                         0 47AC A   .BF                         0 47B3 A   
.C                          0 3692 A   .C0                         0 4782 A   
.C1                         0 47BB A   .C2                         0 48DB A   
.C3                         0 48CA A   .C4                         0 48D1 A   
.C5                         0 4829 A   .C6                         0 4888 A   
.C7                         0 4832 A   .C8                         0 48CA A   
.C9                         0 48DB A   .CA                         0 4990 A   
.CB                         0 4981 A   .CC                         0 4988 A   
.CD                         0 4913 A   .CE                         0 4954 A   
.CF                         0 491C A   .D                          0 3692 A   
.D0                         0 4981 A   .D1                         0 4990 A   
.D2                         0 49A6 A   .D3                         0 49A2 A   
.D4                         0 49B2 A   .D5                         0 49AE A   
.D6                         0 49DC A   .D7                         0 49D8 A   
.D8                         0 4A19 A   .D9                         0 4A08 A   
.DA                         0 4A2A A   .DB                         0 4A23 A   
.DC                         0 4A3B A   .DD                         0 4A34 A   
.DE                         0 4A4A A   .DF                         0 4A45 A   
.E                          0 3692 A   .E0                         0 4CDA A   
.E1                         0 4A71 A   .E2                         0 A594 A   
.E3                         0 4B14 A   .E4                         0 4ADF A   
.E5                         0 4ACD A   .E6                         0 4ABB A   
.E7                         0 4AB4 A   .E8                         0 4AAD A   
.E9                         0 4CD7 A   .EA                         0 4BF9 A   
.EB                         0 4B1D A   .EC                         0 4BF6 A   
.ED                         0 4BE3 A   .EE                         0 4BEA A   
.EF                         0 4B28 A   .F                          0 3692 A   
.F0                         0 4B88 A   .F1                         0 4B46 A   
.F2                         0 4B3F A   .F3                         0 4BE3 A   
.F4                         0 4BF6 A   .F5                         0 4CD7 A   
.F6                         0 4CD7 A   .F7                         0 4CC4 A   
.F8                         0 4CCB A   .F9                         0 4C04 A   
.FA                         0 4C5D A   .FB                         0 4C1B A   
.FC                         0 4C14 A   .FD                         0 4CB8 A   
.FE                         0 4CC4 A   .FF                         0 4CC2 A   
_biosfn_alternate_prtsc     0 6C95 A   _biosfn_enable_video_refre+ 0 6DB4 A   
_biosfn_get_cursor_pos      0 4489 A   _biosfn_get_font_info       0 6AAA A   
_biosfn_load_gfx_8_14_char+ 0 6A92 A   _biosfn_load_gfx_8_16_char+ 0 6AA2 A   
_biosfn_load_gfx_8_8_chars  0 6A82 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6A9A A   
_biosfn_load_gfx_user_char+ 0 6A8A A   _biosfn_load_text_8_14_pat  0 68BC A   
_biosfn_load_text_8_16_pat  0 69F1 A   _biosfn_load_text_8_8_pat   0 6953 A   
_biosfn_load_text_user_pat  0 6820 A   _biosfn_perform_gray_scale+ 0 6579 A   
_biosfn_read_char_attr      0 50C2 A   _biosfn_read_pixel          0 5D18 A   
_biosfn_read_state_info     0 6F08 A   _biosfn_read_video_state_s+ 0 7087 A   
_biosfn_read_video_state_s+ 0 7040 A   _biosfn_restore_video_stat+ 0 7675 A   
_biosfn_save_video_state    0 70AB A   _biosfn_scroll              0 4994 A   
_biosfn_set_active_page     0 44FE A   _biosfn_set_cursor_pos      0 4389 A   
_biosfn_set_cursor_shape    0 426E A   _biosfn_set_video_mode      0 3BC1 A   
_biosfn_switch_video_inter+ 0 6DAC A   _biosfn_write_char_attr     0 560A A   
_biosfn_write_char_only     0 5801 A   _biosfn_write_pixel         0 5A77 A   
_biosfn_write_string        0 6DBC A   _biosfn_write_teletype      0 5F21 A   
_dac_regs                   0 029B A   _dispi_get_max_bpp          0 974F A   
_dispi_get_max_xres         0 972D A   _dispi_set_bank             0 978F A   
_dispi_set_bank_farcall     0 97AD A   _dispi_set_bpp              0 96F6 A   
_dispi_set_enable           0 9771 A   _dispi_set_xres             0 96C1 A   
_dispi_set_yres             0 96D8 A   _display_info               0 35F1 A   
_display_splash_screen      0 35F0 A   _display_string             0 360F A   
_fail                       0 A37F A   _find_vga_entry             0 7C53 A   
_get_SS                     0 7DCB A E _get_font_access            0 6680 A   
_inb                        0 7D95 A E _int10_debugmsg             0 3636 A   
_int10_func                 0 3667 A   _inw                        0 7DA0 A E 
_line_to_vpti               0 028B A   _memcpyb                    0 7CDF A   
_memcpyw                    0 7D0F A   _memsetb                    0 7C95 A   
_memsetw                    0 7CBA A   _mode_info_find_mode        0 9943 A   
_mode_info_list             0 7F8B A   _no_vbebios_info_string     0 956D A   
_outb                       0 7DAB A E _outw                       0 7DBB A E 
_palette0                   0 0A1F A   _palette1                   0 0ADF A   
_palette2                   0 0B9F A   _palette3                   0 0C5F A   
_pci_get_lfb_addr           0 7F27 A   _printf                     0 7DEA A E 
_read_byte                  0 7D3F A   _read_word                  0 7D52 A   
_release_font_access        0 66A3 A   _set_scan_lines             0 66D7 A   
_static_functionality       0 0F5F A   _unimplemented              0 7DCE A E 
_unknown                    0 7DDC A E _vbe_biosfn_read_video_sta+ 0 9FB4 A E 
_vbe_biosfn_restore_video_+ 0 A04E A E _vbe_biosfn_return_control+ 0 9A1B A E 
_vbe_biosfn_return_mode_in+ 0 9CC5 A E _vbe_biosfn_save_restore_s+ 0 A17B A E 
_vbe_biosfn_save_video_sta+ 0 9FBC A E _vbe_biosfn_set_get_palett+ 0 A369 A E 
_vbe_biosfn_set_mode        0 9E0E A E _vbe_has_vbe_display        0 99A4 A   
_vbebios_copyright          0 94CB A   _vbebios_info_string        0 9547 A   
_vbebios_product_name       0 9529 A   _vbebios_product_revision   0 9542 A   
_vbebios_vendor_name        0 9511 A   _vga_compat_setup           0 986C A   
_vga_modes                  0 020B A   _vgafont14                  0 176F A   
_vgafont14alt               0 356F A   _vgafont16                  0 256F A   
_vgafont16alt               0 3570 A   _vgafont8                   0 0F6F A   
_vgamem_copy_cga            0 47CD A   _vgamem_copy_pl4            0 4680 A   
_vgamem_fill_cga            0 48DF A   _vgamem_fill_pl4            0 4742 A   
_video_param_table          0 029F A   _video_save_pointer_table   0 35D4 A   
_write_byte                 0 7D65 A   _write_gfx_char_cga         0 5333 A   
_write_gfx_char_lin         0 5536 A   _write_gfx_char_pl4         0 51C0 A   
_write_word                 0 7D7D A   biosfn_enable_cursor_emula+ 0 6D8A A   
biosfn_enable_default_pale+ 0 6D26 A   biosfn_enable_grayscale_su+ 0 6D66 A   
biosfn_enable_video_addres+ 0 6D48 A   biosfn_get_all_palette_reg  0 641E A   
biosfn_get_ega_info         0 6C72 A   biosfn_get_single_palette_+ 0 63EC A   
biosfn_get_video_mode       0 62E6 A   biosfn_group_0B             0 59FC A   
biosfn_group_10             0 630D A   biosfn_group_1A             0 6E95 A   
biosfn_read_all_dac_reg     0 64FE A   biosfn_read_display_code    0 6EA1 A   
biosfn_read_overscan_borde+ 0 6410 A   biosfn_read_pel_mask        0 6531 A   
biosfn_read_single_dac_reg  0 64E3 A   biosfn_read_video_dac_stat+ 0 653C A   
biosfn_select_vert_res      0 6C9D A   biosfn_select_video_dac_co+ 0 64A0 A   
biosfn_set_all_dac_reg      0 6478 A   biosfn_set_all_palette_reg  0 6399 A   
biosfn_set_border_color     0 5A0A A   biosfn_set_display_code     0 6EB6 A   
biosfn_set_overscan_border+ 0 6391 A   biosfn_set_palette          0 5A49 A   
biosfn_set_pel_mask         0 6526 A   biosfn_set_single_dac_reg   0 645F A   
biosfn_set_single_palette_+ 0 6377 A   biosfn_set_text_block_spec+ 0 69E4 A   
biosfn_toggle_intensity     0 63C6 A   bit8_clear                  0 98B4 A   
bit9_clear                  0 98BB A   bpp4_mode                   0 9655 A   
dispi_get_bank              0 979F A   dispi_get_bpp               0 9714 A   
dispi_get_enable            0 9781 A   dispi_get_id                0 96A3 A   
dispi_get_virt_height       0 985E A   dispi_get_virt_width        0 9850 A   
dispi_get_x_offset          0 97F4 A   dispi_get_y_offset          0 9812 A   
dispi_set_bank_farcall_err+ 0 97DF A   dispi_set_bank_farcall_get  0 97D1 A   
dispi_set_id                0 96B1 A   dispi_set_virt_width        0 983D A   
dispi_set_x_offset          0 97E4 A   dispi_set_y_offset          0 9802 A   
get_bpp_noinc               0 972B A   get_dac_16_page             0 656C A   
get_dac_palette_format      0 A355 A   get_display_start           0 A322 A   
get_display_window          0 A2AA A   get_logical_scan_line_leng+ 0 A2E2 A   
get_palette_loop            0 6426 A   idiv_u                      0 66D2 A   
illegal_window              0 95E8 A   init_bios_area              0 359C A   
init_vga_card               0 3571 A   int10_end                   0 0209 A   
int10_group_10_unknown      0 6373 A   int10_normal                0 01FB A   
int10_test_0B               0 0158 A   int10_test_1001             0 6313 A   
int10_test_1002             0 6319 A   int10_test_1003             0 631F A   
int10_test_1007             0 6326 A   int10_test_1008             0 632D A   
int10_test_1009             0 6334 A   int10_test_1010             0 633B A   
int10_test_1012             0 6342 A   int10_test_1013             0 6349 A   
int10_test_1015             0 6350 A   int10_test_1017             0 6357 A   
int10_test_1018             0 635E A   int10_test_1019             0 6365 A   
int10_test_101A             0 636C A   int10_test_101B             0 01B1 A   
int10_test_1103             0 0163 A   int10_test_12               0 016E A   
int10_test_1A               0 014D A   int10_test_4F               0 01C0 A   
int10_test_BL30             0 017E A   int10_test_BL31             0 0189 A   
int10_test_BL32             0 0193 A   int10_test_BL33             0 019D A   
int10_test_BL34             0 01A7 A   int10_test_vbe_05           0 01CE A   
int10_test_vbe_06           0 01D7 A   int10_test_vbe_07           0 01E0 A   
int10_test_vbe_08           0 01E9 A   int10_test_vbe_0A           0 01F2 A   
lmulul                      0 9A02 A   memcpyb_end                 0 7D07 A   
memcpyw_end                 0 7D37 A   memsetb_end                 0 7CB4 A   
memsetw_end                 0 7CD9 A   mode_ega_color              0 6C92 A   
msg_alt_dcc                 0 6EDA A   msg_vbe_init                0 9591 A   
msg_vert_res                0 6CFF A   msg_vga_init                0 358D A   
no_4bpp_1                   0 A2DA A   no_4bpp_2                   0 A2F7 A   
no_actl_reg1                0 6390 A   no_actl_reg2                0 640F A   
no_vbe_flag                 0 99F7 A   no_vbe_interface            0 99DB A   
no_vbe_mode                 0 9FA6 A   pci_get_lfb_addr_fail       0 7F4C A   
pci_get_lfb_addr_found      0 7F50 A   pci_get_lfb_addr_next_dev   0 7F3A A   
pci_get_lfb_addr_return     0 7F6A A   pci_get_lfb_addr_success    0 7F64 A   
pci_read_reg                0 7F72 A   read_dac_loop               0 650F A   
set_actl_normal             0 64DC A   set_cga_palette_loop        0 5A56 A   
set_dac_16_page             0 64D6 A   set_dac_loop                0 6489 A   
set_dac_mode                0 A352 A   set_dac_page                0 64C3 A   
set_dac_palette_format      0 A33D A   set_display_start           0 A314 A   
set_display_window          0 A29A A   set_intensity_loop          0 5A28 A   
set_logical_scan_line_byte+ 0 A2C9 A   set_logical_scan_line_pixe+ 0 A2DF A   
set_low_border              0 5A22 A   set_normal_dac              0 A34F A   
set_palette_loop            0 63A8 A   set_retcode                 0 6CF8 A   
set_vert_res                0 6CEE A   set_width_svga              0 982E A   
set_xy_regs                 0 9661 A   vbe_03_ok                   0 9FAF A   
vbe_05_failed               0 A2B3 A   vbe_08_ok                   0 A361 A   
vbe_08_unsupported          0 A365 A   vbe_biosfn_display_window_+ 0 A28A A   
vbe_biosfn_return_current_+ 0 9F8F A   vbe_biosfn_return_protecte+ 0 A36A A   
vbe_biosfn_set_get_dac_pal+ 0 A332 A   vbe_biosfn_set_get_display+ 0 A304 A   
vbe_biosfn_set_get_logical+ 0 A2B7 A   vbe_display_info            0 99E5 A   
vbe_init                    0 99B7 A   vert_res_200                0 6CE4 A   
vert_res_350                0 6CDA A   vert_res_400                0 6CCE A   
vesa_pm_end                 0 96A3 A   vesa_pm_io_ports_table      0 95AA A   
vesa_pm_set_display_start   0 95ED A   vesa_pm_set_display_start1  0 95FC A   
vesa_pm_set_display_window+ 0 95C1 A   vesa_pm_set_window          0 95B6 A   
vesa_pm_start               0 95A2 A   vesa_pm_unimplemented       0 969E A   
vga_compat_end              0 9941 A   vga_set_virt_width          0 9820 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 A395 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 0133 A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
